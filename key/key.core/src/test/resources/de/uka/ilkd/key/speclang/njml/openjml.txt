//@ invariant contents != null;
//@ invariant 0 <= n;
//@ invariant n <= contents.length;
//@ requires input != null;
//@ requires b != null;
//@ loop_invariant i>=0 && i<=n+1;
//@ ensures \result >= 0;
/*@ pure @*/
//@ loop_invariant i>=0 && i<=n;
//@ loop_invariant count >= 0;
//@ assert new_contents.length == 2*n+1 ; // this should not fail?
//@ assert n >= 0;
//@ assert 2*n+1 > n;
//@ assert  n < new_contents.length;
//@ requires b != null;
//@ requires src != null;
//@ requires srcOff >=0;
//@ requires dest != null;
//@ requires destOff >=0;
//@ requires length >=0;
//@ requires srcOff + length <= src.length;
//@ requires destOff + length <= dest.length;
//@ assignable dest[*];
/*@ loop_invariant i>=0 && i<=length; @*/
/*@ code_java_math */
//@ invariant contents != null;
//@ invariant 0 <= n;
//@ invariant n <= contents.length;
//@ requires input != null;
//@ requires b != null;
//@ loop_invariant 0 <= i && i <= n && n >= 0 && n <= contents.length; // added by DRC
//@ loop_invariant i>=0 && i<=n && n >= 0 && n <= contents.length; // DRC modified
//@ ensures \result >= 0;
/*@ pure @*/
//@ loop_invariant i>=0 && i<=n;
//@ loop_invariant count >= 0;
//@ modifies n, contents, contents[*];
//@ requires b != null;
//@ modifies n,contents;
//@ requires src != null;

//@ requires srcOff >=0;

//@ requires dest != null;

//@ requires destOff >=0;

//@ requires length >=0;

//@ requires srcOff + length <= src.length;

//@ requires destOff + length <= dest.length;

//@ assignable dest[*];

/*@ loop_invariant i>=0 && i<=length; @*/
// This example had a problem with crashing, because of the lack of helper

// on the functions used in the invariant.

/*@ code_java_math */
//@ public invariant x() + y() > 0;

/*@ spec_public */
/*@ spec_public */
//@ requires the_x + the_y > 0;

//@ ensures x() == the_x && y() == the_y;

//@ ensures \result == my_x;

/*@ pure helper @*/
//@ ensures \result == my_y;

/*@ pure helper @*/
//@ ensures \result == x() + y() + the_operand;

/*@ pure @*/
// This example had a problem with crashing, because of the lack of helper

// on the functions used in the invariant.

/*@ code_java_math */
//@ public invariant x() + y() > 0;

/*@ spec_public */
/*@ spec_public */
//@ requires the_x + the_y > 0;

//@ ensures x() == the_x && y() == the_y;

//@ ensures \result == my_x;

/*@ pure @*/
//@ ensures \result == my_y;

/*@ pure @*/
//@ ensures \result == x() + y() + the_operand;

/*@ pure @*/
//@ requires pp.position.x >= 0 && pp.position.x < xSize;

//@ ensures piece == pp;

//@ pure

//@ public invariant piece.position.x >= 0 && piece.position.x < xSize;

//@ normal_behavior

//@ requires inRange(p);

//@ assignable piece.position;

//@ assert inRange(piece.position);

//@ ensures \result == ( p.x >= 0 && p.x < xSize );

//@ pure helper

//@ ensures position == p;

//@ pure

//@ normal_behavior

//@ assignable position;

//@ ensures position == p;

// From DMZ - 10/16/2013

//@ assert !(b & bb);

//@ assert (b | bb);

//@ assert !(b ^ bb);

//@ assert (b & bb); // FALSE

/*
 * Extended Static Checking Exercise
 * Fall 2013 CSCI181F - Verification-centric Software Engineering
 * Daniel M. Zimmerman
 */
//package annotated;

/**
 * A class that represents a quantity of (U.S.) cash in dollars
 * and cents. The quantity can be positive or negative (representing
 * an asset or a debt). Instances of this class are immutable, so it has
 * only queries (and a constructor).
 *
 * @author Daniel M. Zimmerman
 * @version 2013-10-17
 */
/*@ code_java_math */
// invariants for sane amounts of dollars and cents

//@ public invariant -CENTS_IN_DOLLAR < my_cents && my_cents < CENTS_IN_DOLLAR;

//@ public invariant !(my_cents > 0 && my_dollars < 0);

//@ public invariant !(my_cents < 0 && my_dollars > 0);

/**
   * The number of cents in one dollar.
   */
/**
   * The number of dollars.
   */
/*@ spec_public */
/**
   * The number of cents.
   */
/*@ spec_public */
//@ requires -100 < the_cents && the_cents < 100;

//@ requires !(the_cents > 0 && the_dollars < 0);

//@ requires !(the_cents < 0 && the_dollars > 0);

//@ ensures my_dollars == the_dollars && my_cents == the_cents;

/**
   * Constructs a new CashAmount representing the specified amount of cash.
   *
   * @param the_dollars The number of dollars.
   * @param the_cents The number of cents.
   */
/**
   * @return a new CashAmount representing the negation of this
   * CashAmount.
   */
/*@ ensures \result.my_dollars * CENTS_IN_DOLLAR + \result.my_cents ==
              the_amount.my_dollars * CENTS_IN_DOLLAR + the_amount.my_cents +
              my_dollars * CENTS_IN_DOLLAR + my_cents;
   */
/**
   * Increases this CashAmount by the specified CashAmount.
   *
   * @param the_amount The amount to increase by.
   * @return The resulting CashAmount.
   */
/**
   * Decreases this CashAmount by the specified CashAmount.
   *
   * @param the_amount The amount to decrease by.
   * @return The resulting CashAmount.
   */
/**
   * @return The number of dollars in this CashAmount.
   */
//@ ensures \result == my_dollars;

/*@ pure helper */
/**
   * @return The number of cents in this CashAmount.
   */
//@ ensures \result == my_cents;

/*@ pure helper */
/*@ ensures \result <==> the_other.my_dollars == my_dollars &&
                           the_other.my_cents == my_cents;
   */
/**
   * Compare this CashAmount with the specified CashAmount for being identical.
   * Being identical here means "has exactly the same numbers of dollars and cents."
   *
   * @param the_other The other CashAmount.
   * @return true if the two amounts are identical, false otherwise.
   */
/*@ pure helper */
/*@ ensures \result <==>
                 the_other.my_dollars * CENTS_IN_DOLLAR + the_other.my_cents ==
                 my_dollars * CENTS_IN_DOLLAR + my_cents;
   */
/**
   * Compare this CashAmount with the specified CashAmount for equivalence.
   * Equivalent here means "represents the same total number of cents".
   *
   * @param the_other The other CashAmount.
   * @return true if the two amounts are equivalent, false otherwise.
   */
/*@ pure helper */


//@ ensures o.equals(oo);

//@ pure

/*@ non_null*/


//@ ensures o != null && o.equals(oo);

//@ pure

/*@ non_null*/


//@ ensures oo.equals(o);

//@ pure

/*@ non_null*/


//@ ensures o.equals(oo);

//@ pure

/*@ non_null*/


//@ ensures o.equals(oo);

//@ pure

/*@ non_null*/


//@ ensures o.equals(oo);

//@ pure

/*@ non_null*/
//@ public invariant good();

//@ pure helper

//@ also ensures \result;

//@ pure helper

/*@ public normal_behavior
      requires 0 <= the_input;
      ensures \result == 0;
    also public exceptional_behavior
      requires the_input < 0;
      signals (IllegalArgumentException e) true;
      signals_only IllegalArgumentException;
*/
/*@   requires 0 <= the_input;
      ensures \result == 0;
    also
      requires the_input < 0;
      diverges true;
      signals (IllegalArgumentException e) true;
      signals_only IllegalArgumentException;
*/
/*
I get an OpenJML ESC Error:

"An error while executing a proof script for sort: (error "Parse Error: <shell>:1.33:Symbol Real not declared as a type")

when trying to ESC the following method (ignore the fact that it doesn't actually calculate a square root  ):

I then get an error marker saying "Not implemented for static checking: diverges clause"; which is fine, but the proof script error that popped up was pretty unnerving. Also, if I write it this way:

[ see escDiverges2 ]

It checks fine. But isn't the diverges clause in exceptional_behavior just "true" by default, the same as I had specified it in my lightweight spec?

*/
// This example from DMZ on 10/23 - has a problem proving the loop invariant with the exists

//@ requires the_array.length > 0;

/*@ ensures (\forall int i; 0 <= i && i < the_array.length;
               the_array[i] <= \result);
   */
/*@ ensures (\exists int i; 0 <= i && i < the_array.length;
               the_array[i] == \result);
   */
/**
   * A method that finds the maximum value in an array.
   *
   * @param the_array The array to find the maximum value in.
   * @return The index of the maximum value. If it appears more
   * than once, we do not define which of the indices we return.
   */
/*@ pure */
//@ assume the_array[0] >= Integer.MIN_VALUE;

//@ loop_invariant 0 <= i;

//@ loop_invariant i <= the_array.length;

//@ loop_invariant (\forall int j; 0 <= j && j < i; the_array[j] <= result);

//@ loop_invariant i > 0 ==> (\exists int j; 0 <= j && j < i; the_array[j] == result);

//@ loop_invariant i == 0 ==> result == Integer.MIN_VALUE;

//@ decreasing the_array.length - i;

// This example from DMZ on 10/23 - has a problem proving the loop invariant with the exists

//@ requires the_array.length > 0;

/*@ ensures (\forall int i; 0 <= i && i < the_array.length;
               the_array[i] <= \result);
   */
/*@ ensures (\exists int i; 0 <= i && i < the_array.length;
               the_array[i] == \result);
   */
/**
   * A method that finds the maximum value in an array.
   *
   * @param the_array The array to find the maximum value in.
   * @return The index of the maximum value. If it appears more
   * than once, we do not define which of the indices we return.
   */
/*@ pure */
//@ loop_invariant 0 <= i;

//@ loop_invariant i <= the_array.length;

//@ loop_invariant (\forall int j; 0 <= j && j < i; the_array[j] <= result);

//@ loop_invariant i > 0 ==> (\exists int j; 0 <= j && j < i; the_array[j] == result);

//@ loop_invariant i == 0 ==> result == the_array[0];

//@ decreasing the_array.length - i;

// This example from DMZ on 10/23 - has a problem proving the loop invariant with the exists

//@ requires the_array.length > 0;

/*@ ensures (\forall int i; 0 <= i && i < the_array.length;
               the_array[i] <= \result);
   */
/*@ ensures (\exists int i; 0 <= i && i < the_array.length;
               the_array[i] == \result);
   */
/**
   * A method that finds the maximum value in an array.
   *
   * @param the_array The array to find the maximum value in.
   * @return The index of the maximum value. If it appears more
   * than once, we do not define which of the indices we return.
   */
/*@ pure */
//@ assume the_array[0] >= Integer.MIN_VALUE;

//@ loop_invariant 0 <= i;

//@ loop_invariant i <= the_array.length;

//@ loop_invariant (\forall int j; 0 <= j && j < i; the_array[j] <= result);

//@ loop_invariant i > 0 ==> (\exists int j; 0 <= j && j < i; the_array[j] == result);

//@ decreasing the_array.length - i;

// Problem reported by DMZ on 10/30

/**
 * Implements a doubly linked list.
 *
 * @author Kevin Vigue
 * @version 9/18/2013
 * @param <T> Type stored in list.
 */
/**
   * The linked list node after this one.
   *
   * @author Kevin Vigue
   * @version 9/18/2013
   */
/*@ nullable spec_public */
/**
   * The linked list node before this one.
   *
   * @author Kevin Vigue
   * @version 9/18/2013
   */
/*@ nullable spec_public */
/**
   * The value stored in this linked list node.
   *
   * @author Kevin Vigue
   * @version 9/18/2013
   */
/*@ nullable spec_public */
//@ public invariant my_next != this;

//@ public invariant my_prev != this;

//@ public invariant my_next != null ==> my_next != my_prev;

/**
   * Constructor that takes a value.
   *
   * @author Kevin Vigue
   * @version 9/18/2013
   * @param a_value Data to be stored in my_value.
   */
/**
   * Constructor that lets you specify my_prev, my_value, and my_next.
   *
   * @author Kevin Vigue
   * @version 9/18/2013
   * @param a_prev Doubly linked list that comes before this one.
   * @param a_value Value to be stored in this node.
   * @param a_next Doubly linked list that comes after this one.
   */
//@ requires a_prev != this && a_next != this && (a_next != null ==> a_next != a_prev);

/**
   * Getter for my_value.
   *
   * @author Kevin Vigue
   * @version 9/18/2013
   * @return The value in this node.
   */

/**
   * Setter for my_value.
   *
   * @author Kevin Vigue
   * @version 9/18/2013
   * @param a_value New value for this node.
   */
//@ assignable my_value;

//@ ensures my_value == a_value;


/**
   * Getter for my_prev.
   *
   * @author Kevin Vigue
   * @version 9/18/2013
   * @return The doubly linked list before this one.
   */

/**
   * Setter for my_prev.
   *
   * @author Kevin Vigue
   * @version 9/18/2013
   * @param a_doubly_linked_list New node to come before this one.
   */
//@ requires this != a_doubly_linked_list && (my_next != null ==> a_doubly_linked_list != my_next);

//@ assignable my_prev;

//@ ensures my_prev == a_doubly_linked_list;


// A doubly linked list's next is not itself.

/**
   * Getter for my_next.
   *
   * @author Kevin Vigue
   * @version 9/18/2013
   * @return The doubly linked list after this one.
   */

/**
   * Setter for my_next.
   *
   * @author Kevin Vigue
   * @version 9/18/2013
   * @param a_doubly_linked_list New node to come after this one.
   */
//@ requires this != a_doubly_linked_list && (a_doubly_linked_list != null ==> a_doubly_linked_list != my_prev);

//@ assignable my_next;

//@ ensures my_next == a_doubly_linked_list;


// A doubly linked list's prev is not itself.

/**
   * Removes this node from the larger doubly linked list structure.
   *
   * @author Kevin Vigue
   * @version 9/18/2013
   */
//@ requires my_prev != null && my_next != null;

//@ requires my_prev != my_next.my_next;

//@ requires my_prev.my_prev != my_next;

//@ public invariant value > 0;

//@ in value;

//@ public model int value;

//@ private represents value = my_value;

//@ requires value_1 > 0;

//@ ensures value == value_1;

/*@ spec_public */
//@ pure

//@ public invariant value > 0;

//@ in value;

//@ public model int value;

//@ private represents value = my_value;

//@ requires value_1 > 0;

//@ ensures value == value_1;

/*@ spec_public */
//@ public invariant value > 0;

//@ in value;

//@ public model int value;

//@ private represents value = my_value;

//@ requires value_1 > 0;

//@ ensures value == value_1;

/*@ spec_public */
//@ signals_only     othing;

/*@ spec_public @*/
//@ requires str!=null;

//@ ensures value == str; // should this be value.equals(str)?

//@ assignable value;

//@ensures \result == value; // likewise, should this be .equals?

/*@ pure @*/
// <<< this is the line that generates the error.

/*@ code_java_math */
//@ in value;

//@ public model int value;

//@ private represents value = -rep;

//@ public invariant value >= 0;

//@ requires v >= 0;

//@ modifies this.*;

//@ ensures value == v;

//@ requires this != other;

//@ modifies value;

//@ ensures value == (other.value + \old(value));

//@ ghost boolean b = (\lbl SAME this == other);

//@ assignable     othing;

//@ ensures \result.value == (other.value + value);

//@ public invariant m();

//@ ensures \result;

/*@ pure */
//@ requires m();

//@ public invariant m();

/*@ pure */
//@ requires m();

//@ public invariant m();

/*@ pure */
//@ requires m();

/*
 * Fall 2013 CSCI181G - Homework 6
 * Static and Runtime Checking
 */
/**
 * A trivial string class that supports initialization,
 * concatenation and the substring operation.
 *
 * @author Daniel M. Zimmerman
 * @author YOUR NAME HERE
 * @version 2013-11-04
 */
/*
   * The class should have a history constraint about the fact
   * that it is immutable ("final" on the array isn't quite good enough).
   */
// Instance Fields

/**
   * The character data of this SimpleString.
   */
//@ in chars;

//@ public model char[] chars;

//@ private represents chars = my_chars;

// Constructors

/**
   * Constructs a new SimpleString with the contents of the specified
   * array of characters in the order they appear in the array.
   *
   * @param the_chars The array of characters.
   */
//@ ensures (\forall int i; 0 <= i && i < chars.length; chars[i] == the_chars[i]);

//@ assignable chars;

//@ maintaining (\forall int j; 0 <= j && j < i; my_chars[j] == the_chars[j]);

//@ maintaining 0 <= i && i <= my_chars.length;

//@ decreasing my_chars.length - i;

/*
 * Fall 2013 CSCI181G - Homework 6
 * Static and Runtime Checking
 */
/**
 * A trivial string class that supports initialization,
 * concatenation and the substring operation.
 *
 * @author Daniel M. Zimmerman
 * @author YOUR NAME HERE
 * @version 2013-11-04
 */
/*
   * The class should have a history constraint about the fact
   * that it is immutable ("final" on the array isn't quite good enough).
   */
// Instance Fields

/**
   * The character data of this SimpleString.
   */
/*@ spec_public */
// Constructors

/**
   * Constructs a new SimpleString with the contents of the specified
   * array of characters in the order they appear in the array.
   *
   * @param the_chars The array of characters.
   */
//@ ensures my_chars.length == the_chars.length;

//@ ensures (\forall int i; 0 <= i && i < my_chars.length; my_chars[i] == the_chars[i]);

//@ maintaining (\forall int j; 0 <= j && j < i; my_chars[j] == the_chars[j]);

//@ maintaining 0 <= i && i <= my_chars.length;

//@ decreasing my_chars.length - i;

/*
 * Fall 2013 CSCI181G - Homework 6
 * Static and Runtime Checking
 */
/**
 * A trivial string class that supports initialization,
 * concatenation and the substring operation.
 *
 * @author Daniel M. Zimmerman
 * @author YOUR NAME HERE
 * @version 2013-11-04
 */
/*
   * The class should have a history constraint about the fact
   * that it is immutable ("final" on the array isn't quite good enough).
   */
// Instance Fields

/**
   * The character data of this SimpleString.
   */
/*@ spec_public */
/*@ spec_public */
/*@ spec_public */
/*@ spec_public */
// Constructors

/**
     * Constructs a new SimpleString with the contents of the specified
     * array of characters in the order they appear in the array.
     *
     * @param the_array The array of characters.
     */
//@ ensures (\forall int i; 0 <= i && i < my_chars.length; my_chars[i] == the_array[i]);


// @ assert the_array != null;

// @ assert the_array != null;

// @ assert my_chars != null;

// @ assert my_chars.length == the_array.length;

// @ assert (\typeof(the_array)) == \type(char[]);

// @ assert (\typeof(my_chars)) == \type(char[]);

// @ assert \erasure(\typeof(my_chars)) == \erasure(\type(char[]));

// @ assert \elemtype(\typeof(the_array)) == \type(char);

// @ assert \elemtype(\typeof(my_chars)) == \type(char);

// @ assert my_chars instanceof char[];

// @ assert the_array instanceof char[];

// @ assert true;

/**
     * Constructs a new SimpleString with the contents of the specified
     * array of ints in the order they appear in the array.
     *
     * @param the_array The array of ints.
     */
//@ ensures (\forall int i; 0 <= i && i < my_ints.length; my_ints[i] == the_array[i]);


/**
     * Constructs a new SimpleString with the contents of the specified
     * array of ints in the order they appear in the array.
     *
     * @param the_array The array of ints.
     */
//@ ensures my_Objects.length == the_array.length;

//@ ensures (\forall int i; 0 <= i && i < my_Objects.length; my_Objects[i] == the_array[i]);


//@ ensures my_Integers.length == the_array.length;

//@ ensures (\forall int i; 0 <= i && i < my_Integers.length; my_Integers[i] == the_array[i]);


/*
 * Fall 2013 CSCI181G - Homework 6
 * Static and Runtime Checking
 */
/**
 * A trivial string class that supports initialization,
 * concatenation and the substring operation.
 *
 * @author Daniel M. Zimmerman
 * @author YOUR NAME HERE
 * @version 2013-11-04
 */
/*
   * The class should have a history constraint about the fact
   * that it is immutable ("final" on the array isn't quite good enough).
   */
// Instance Fields

/**
   * The character data of this SimpleString.
   */
/*@ spec_public */
/*@ spec_public */
/*@ spec_public */
/*@ spec_public */
// Constructors

/**
     * Constructs a new SimpleString with the contents of the specified
     * array of characters in the order they appear in the array.
     *
     * @param the_array The array of characters.
     */
//@ ensures (\forall int i; 0 <= i && i < my_chars.length; my_chars[i] == the_array[i]);


// @ assert the_array != null;

// @ assert the_array != null;

// @ assert my_chars != null;

// @ assert my_chars.length == the_array.length;

// @ assert (\typeof(the_array)) == \type(char[]);

// @ assert (\typeof(my_chars)) == \type(char[]);

// @ assert \erasure(\typeof(my_chars)) == \erasure(\type(char[]));

// @ assert \elemtype(\typeof(the_array)) == \type(char);

// @ assert \elemtype(\typeof(my_chars)) == \type(char);

// @ assert my_chars instanceof char[];

// @ assert the_array instanceof char[];

// @ assert true;

/**
     * Constructs a new SimpleString with the contents of the specified
     * array of ints in the order they appear in the array.
     *
     * @param the_array The array of ints.
     */
//@ ensures (\forall int i; 0 <= i && i < my_ints.length; my_ints[i] == the_array[i]);


/**
     * Constructs a new SimpleString with the contents of the specified
     * array of ints in the order they appear in the array.
     *
     * @param the_array The array of ints.
     */
//@ ensures my_Objects.length == the_array.length;

//@ ensures (\forall int i; 0 <= i && i < my_Objects.length; my_Objects[i] == the_array[i]);


//@ assert the_array.length >= 0;

//@ assert the_array instanceof Object[];

//@ assert my_Objects instanceof Object[];

//@ assert \elemtype(\typeof(the_array)) <: \elemtype(\typeof(my_Objects));

//@ assert 0 + the_array.length <= ((Object[])the_array).length;

//@ assert 0 + the_array.length <= ((Object[])my_Objects).length;

//@ ensures my_Integers.length == the_array.length;

//@ ensures (\forall int i; 0 <= i && i < my_Integers.length; my_Integers[i] == the_array[i]);


//@ requires k < 0;

//@ ensures \result == 0;

//@ also

//@ requires true;

//@ requires k >= 0;

//@ ensures \result != 0;

//@ loop_invariant 0 <= i && i <= 10;

//@ loop_invariant i == j;

//@ decreases 10-i;

//@ loop_invariant 0 <= i && i <= 10;

//@ loop_invariant i == j;

//@ loop_invariant i == \count;

//@ decreases 9-i;

//@ loop_invariant 0 <= i && i <= 10;

//@ loop_invariant i == j;

//@ decreases 8-i;

//@ ensures \result == 41;

//@ requires true;

//@ ensures \result != 0;

//@ requires true;

//@ ensures \result != 0;

//@ assert \typeof(o) == \type(Object);

//@ requires true;

//@ assignable k;

//@ signals (Exception e) false;

//@ requires true;

//@ assignable k;

//@ ensures k == 2;

//@ signals (Exception e) k == 1;

//@ requires true;

//@ assignable k;

//@ ensures k == 2;

//@ signals (Exception e) k == 1;

//@ assert i == 0 &&     onnullelements(a);

//@ assert     ot_modified(i);

//@ assert i == 4 &&     ot_modified(i);

//@ loop_invariant j == i && 0 <= i && i <= k;

//@ assert j == k;

//@ loop_invariant j == i && 0 <= i && i <= k;

//@ assert j == k;

//@ loop_invariant j == i && 0 <= i && i <= k;

//@ assert false;

//@ assert j == k;

//@ loop_invariant j == i && 0 <= i && i <= k;

//@ decreases j;

//@ assert j == k;

//@ loop_invariant j == i && 0 <= i && i <= k;

//@ decreases i-j;

//@ assert j == k;

//@ loop_invariant j == i && 0 <= i && i <= k;

//@ decreases k-j-1;

//@ assert j == k;

//@ loop_invariant j == i && 0 <= i && i <= k;

//@ decreases k-j-2;

//@ assert j == k;

//@ loop_invariant j == 2*i && 0 <= i && i <= k;

//@ assert j == k+k;

//@ loop_invariant j == 2*i && 0 <= i && i <= k;

//@ assert j == k+k;

//@ loop_invariant j == 2*i && 0 <= i && i <= k;

//@ assert j == k+k;

//@ loop_invariant j == 2*i && 0 <= i && i < k;

//@ decreases k-i;

//@ assert j == k+k;

//@ loop_invariant j == 2*i && 0 <= i && i < k;

//@ assert j == k+k;

//@ loop_invariant j == 2*i && 0 <= i && i < k;

//@ assert j == k+k;

//@ loop_invariant j == \count && 0 <= \count && \count <= a.length;

//@ assert j == a.length;

//@ loop_invariant j == 0 && 0 <= \count && \count <= a.length;

//@ assert j == a.length;

//@ loop_invariant j == \count && 0 <= \count && \count <= a.length;

//@ loop_invariant j == \count && 0 <= \count && \count <= a.length;

//@ decreases a.length - j;

//@ assert j == a.length;

//@ loop_invariant j == \count && 0 <= \count && \count <= a.length;

//@ decreases j;

//@ assert j == a.length;

//@ loop_invariant j == \count && 0 <= \count && \count <= a.length;

//@ decreases -j;

//@ assert j == a.length;

//@ ensures \result == 41;

//@ requires true;

//@ ensures \result != 0;

//@ assert k != 7;

//@ assert (k == 7) ==> (k != 7);

//@ assert !((k != 7) ==> (k == 7));

//@ ghost int x = 9;

//@ set x = x + 9;

//@ debug x = 0;

//@ set x = (\lbl AAA k+1);

//-ESC@ set x = (\lbl BBB k+1);

//@ assume a.length > 10;

/*
 * Extended Static Checking Exercise
 * Fall 2013 CSCI181F - Verification-centric Software Engineering
 * Daniel M. Zimmerman
 */
/**
 * A class that implements a growable array of objects, based
 * on an old implementation of java.util.Vector - original source
 * by Lee Boynton and Jonathan Payne, Sun Microsystems.
 *
 * @author Daniel M. Zimmerman
 * @version 2013-10-24 (based on v1.38, 12/18/97)
 */
//@ public invariant my_element_data != null;

//@ public invariant my_element_count >= 0;

//@ public invariant my_element_count <= my_element_data.length;

//@ public invariant my_capacity_increment > 0;

/**
   * The array buffer into which the components of the vector are
   * stored. The capacity of the vector is the length of this array buffer.
   *
   * @since   JDK1.0
   */
//@ public invariant \elemtype(\typeof(my_element_data)) == \type(Object);

/*@ spec_public */
/**
   * The number of valid components in the vector.
   *
   * @since   JDK1.0
   */
/*@ spec_public */
/**
   * The amount by which the capacity of the vector is automatically
   * incremented when its size becomes greater than its capacity. If
   * the capacity increment is <code>0</code>, the capacity of the
   * vector is doubled each time it needs to grow.
   *
   * @since   JDK1.0
   */
/*@ spec_public */
/**
   * Constructs an empty vector with the specified initial capacity and
   * capacity increment.
   *
   * @param   the_initial_capacity     the initial capacity of the vector.
   * @param   the_capacity_increment   the amount by which the capacity is
   *                                   increased when the vector overflows.
   * @since   JDK1.0
   */
//@ requires the_initial_capacity >= 0 && the_capacity_increment > 0;

/**
   * Adds an element to the vector.
   *
   * @param the_object The element to add.
   */
// create a new array

// ERROR - could be negative

//@ ghost Object[] nd = new_data;

//@ loop_invariant 0 <= i && i <= my_element_count && new_data == nd;

//@ decreases my_element_count - i;

/**
   * Copies the components of this vector into the specified array.
   * The array must be big enough to hold all the objects in this  vector.
   *
   * @param   the_array   the array into which the components get copied.
   * @since   JDK1.0
   */
//@ loop_invariant 0 <= i && i <= my_element_count;

//@ decreases i;

/**
   * Searches for the first occurrence of the given argument, beginning the
   * search at <code>index</code>, and testing for equality using the
   * <code>equals</code> method.
   *
   * @param the_elem an object.
   * @param the_index the index to start searching from.
   * @return the index of the first occurrence of the object argument in this
   *         vector at position <code>index</code> or later in the vector;
   *         returns <code>-1</code> if the object is not found.
   * @see java.lang.Object#equals(java.lang.Object)
   * @since JDK1.0
   */
//@ loop_invariant the_index == i || (the_index <= i && i <= my_element_count);

//@ decreases my_element_count - i;

/**
   * Returns the component at the specified index.
   *
   * @param the_index an index into this vector.
   * @return the component at the specified index.
   * @exception ArrayIndexOutOfBoundsException if an invalid index was given.
   * @since JDK1.0
   */
//@ invariant a >= 0;

//@ requires a < 0;

//@ assert a ==1;  // result of geta() is 0 so result of getb() should be 1 and assertion should pass.

/*@  public normal_behavior
    @     ensures \result == 0;  // postcond 1  // incorrect postCondition
    @*/
/*@ pure @*/
/*@  public normal_behavior
    @     ensures \result == geta() + 1;   // postcond 2
    @*/
/** Documentation of class A */
// NESTED CLASSES

/** DOcumentation for class B. */
/** Documentation for a model nested class but not BNInterface. */
//@ static @Model public class MB {  }

// ENUMS

/** */
/** Model enum */
//@ model protected static enum mconsts { MEA, MEB }

// ANNOTATIONS

/** */
/** Model annotation */
//@ model public @interface MAnnot {}

/** Documentation of class A */
// CONSTRUCTORS

/** Documentation of a constructor with specs */
//@ requires true;

/** Documentation of a constructor without specs */
/*@ nullable*/
/** Documentation for a model constructor with specs. */
//@ requires i == 0;

//@ model public A(int i) {}

//@ requires i == 0.0;

//@ model public A(float i) {}

//@ requires i == null;

//@ model public A(Object i) {}

/** Documentation for a model constructor with no specs. */
//@ model public A(int i,int j, @NonNull Object k , non_null Object m) {}

//@ requires j >= 0;

//@ model public A(float nodocs ,int j , int k) {}

// CLASS SPECS

//@ invariant true;

//@ constraint false;

//@ initially true;

//@ axiom true;

//@ represents bb_model = 0;

// ENUMS

/** */
/** Model enum */
// FIXME  @ model protected static enum mconsts { MEA, MEB }

// ANNOTATIONS

/** */
/** Model annotation */
//@ model public @interface MAnnot {}

// FIELDS

/** Documentation for a model field */
/*@
 public secret model int i;
 secret represents i = 0;
*/
/** Documentatino for a ghost field and for fboth */
/*@
 ghost int ghost_i;
*/

//@ in i;

//@ maps a.i \into i;


//@ in i;

//@ in i;

//@ maps a.i \into i;

// METHODS

/** Documentation for a model method with specs - adl */
//@ also requires true;

//@ model @Deprecated Object adl(int i);

/** Documentation for a model method mdl_nospecs and for nodocnospecs */
//@ model int mdl_nospecs(int i);

//@ requires i == 0;

//@ model void ambig(int i);

//@ requires i == 0.0;

//@ model void ambig(float i);

//@ requires i == null;

//@ model void ambig(Object i);

//@ requires i == "";

//@ model void ambig(String i);

/** Doc but no specs */
/** Documentation of method m with specs. More info. */
//@ requires true;

//@ ensures \result == 0;

//@ signals (java.io.FileNotFoundException e) true;

//@ signals_only java.io.FileNotFoundException;

/** Documentation of method m with specs. More info. */
//@ requires true;

//@ ensures \result == 0;

//@ modifies a;

//@ signals (java.io.FileNotFoundException e) true;

//@ signals_only java.io.FileNotFoundException;

//@ requires true;

//@ ensures \result == 0;

//@ signals (java.io.FileNotFoundException e) true;

//@ signals_only java.io.FileNotFoundException;

/** @param s input
    @return output
*/


//@ public normal_behavior

//@  requires true;

//@  ensures true;

//@ also public behavior

//@  requires false;

//@  ensures false;



// NESTED CLASSES

/** DOcumentation for class B. */
//@invariant false && true;

/** Documentation for a model nested class but not BNInterface. */
//@ static @Model public class MB { invariant true;  void qqq() {} }

//@ static model public class MC extends BB {}

/**/
/*@ invariant false; */
/** Documentation for a model nested interface. */
//@ model public static interface BMInterface {}

/*@ invariant false; */
//@ ensures false;

//@ model Object adl(int i);

//@ ensures false;

/*@ invariant false && false; */
//@ ensures false && false;

//@ model @NonNull Object adl(int i);

//@ ensures false && false;

//@ invariant false;

//@ ensures z_public == 10;

//@ ensures z_public == 11;

//@ public model int mdla();

//@ public model int mdlb();

//@ private model void mdlc();

//@ ghost public int bb_ghost;

//@ model public int bb_model;

//@ ghost private int bb_private;

//@ model static public class BBBM {}

//@ model public CEmpty(Object o) {}

//@ ghost public int ghhost_i;

//@ model public int model_i;

//@ model public int model_m();

//@ model public static class CNested {}

//@ model class CCM {}

// @ model class M {}

//@ ghost public int gp_public;

//@ ghost protected int gp_protected;

//@ ghost int gp_package;

//@ ghost private int gp_private;

//@ model public void qp_public() {};

//@ model protected void qp_protected() {}

//@ model void qp_package() {}

//@ model private void qp_private() {}

/** public constructor */
/** protected constructor */
/** package constructor */
/** private constructor */
/** public model constructor */
//@ model public PVis(Object o) {}

/** protected model constructor */
//@ model protected PVis(float i) {}

/** package model constructor */
//@ model PVis(float i, float j) {}

/** private model constructor */
//@ model private PVis(float i, float j, float k) {}

//@ model public static class Dp_public {}

//@ model protected static class Dp_protected {}

//@ model static class Dp_package {}

//@ model private static class Dp_private {}

/** public nested model enum */
//@ model public static enum EMp_public { EMAp }

/** protected nested model enum */
//@ model protected static enum EMp_protected { EMBp }

/** package nested model enum */
//@ model static enum EMp_package { EMCp }

/** private nested model enum */
//@ model private static enum EMp_private { EMDp }

/** public nested interface */
/** protected nested interface */
/** package nested interface */
/** private nested interface */
/** public nested model interface */
//@ model public static interface IMp_public {  }

/** protected nested model interface */
//@ model protected static interface IMp_protected {  }

/** package nested model interface */
//@ model static interface IMp_package {  }

/** private nested model interface */
//@ model private static interface IMp_private {  }

/** public nested annotation */
/** protected nested annotation */
/** package nested annotation */
/** private nested annotation */
/** public nested model annotation */
//@ model public static @interface AMp_public {  }

/** protected nested model annotation */
//@ model protected static @interface AMp_protected {  }

/** package nested model annotation */
//@ model static @interface AMp_package {  }

/** private nested model annotation */
//@ model private static @interface AMp_private {  }

/** public field */
/** protected field */
/** package field */
/** private field */
/** public ghost field */
//@ ghost public int g_public;

/** protected ghost field */
//@ ghost protected int g_protected;

/** package ghost field */
//@ ghost int g_package;

/** private ghost field */
//@ ghost private int g_private;

/** public method */
/** protected method */
/** package method */
/** private method */
/** public model method */
//@ model public void q_public() {};

/** protected model method */
//@ model protected void q_protected() {}

/** package model method */
//@ model void q_package() {}

/** private model method */
//@ model private void q_private() {}

/** public constructor */
/** protected constructor */
/** package constructor */
/** private constructor */
/** public model constructor */
//@ model public Vis(Object o) {}

/** protected model constructor */
//@ model protected Vis(float i) {}

/** package model constructor */
//@ model Vis(float i, float j) {}

/** private model constructor */
//@ model private Vis(float i, float j, float k) {}

/** public nested class */
/** protected nested class */
/** package nested class */
/** private nested class */
/** public nested model class */
//@ model public static class D_public {}

/** protected nested model class */
//@ model protected static class D_protected {}

/** package nested model class */
//@ model static class D_package {}

/** private nested model class */
//@ model private static class D_private {}

/** public nested enum */
/** protected nested enum */
/** package nested enum */
/** private nested enum */
/** public nested model enum */
//@ model public static enum EM_public { EMA }

/** protected nested model enum */
//@ model protected static enum EM_protected { EMB }

/** package nested model enum */
//@ model static enum EM_package { EMC }

/** private nested model enum */
//@ model private static enum EM_private { EMD }

/** public nested interface */
/** protected nested interface */
/** package nested interface */
/** private nested interface */
/** public nested model interface */
//@ model public static interface IM_public {  }

/** protected nested model interface */
//@ model protected static interface IM_protected {  }

/** package nested model interface */
//@ model static interface IM_package {  }

/** private nested model interface */
//@ model private static interface IM_private {  }

/** public nested annotation */
/** protected nested annotation */
/** package nested annotation */
/** private nested annotation */
/** public nested model annotation */
//@ model public static @interface AM_public {  }

/** protected nested model annotation */
//@ model protected static @interface AM_protected {  }

/** package nested model annotation */
//@ model static @interface AM_package {  }

/** private nested model annotation */
//@ model private static @interface AM_private {  }

//@ ghost public int gs_public;

//@ ghost protected int gs_protected;

//@ ghost int gs_package;

//@ ghost private int gs_private;

//@ model public void qs_public() {};

//@ model protected void qs_protected() {}

//@ model void qs_package() {}

//@ model private void qs_private() {}

/** public constructor */
/** protected constructor */
/** package constructor */
/** private constructor */
/** public model constructor */
//@ model public SVis(Object o) {}

/** protected model constructor */
//@ model protected SVis(float i) {}

/** package model constructor */
//@ model SVis(float i, float j) {}

/** private model constructor */
//@ model private SVis(float i, float j, float k) {}

//@ model public static class Ds_public {}

//@ model protected static class Ds_protected {}

//@ model static class Ds_package {}

//@ model private static class Ds_private {}

/** public nested model enum */
//@ model public static enum EMs_public { EMAs }

/** protected nested model enum */
//@ model protected static enum EMs_protected { EMBs }

/** package nested model enum */
//@ model static enum EMs_package { EMCs }

/** private nested model enum */
//@ model private static enum EMs_private { EMDs }

/** public nested interface */
/** protected nested interface */
/** package nested interface */
/** private nested interface */
/** public nested model interface */
//@ model public static interface IMs_public {  }

/** protected nested model interface */
//@ model protected static interface IMs_protected {  }

/** package nested model interface */
//@ model static interface IMs_package {  }

/** private nested model interface */
//@ model private static interface IMs_private {  }

/** public nested annotation */
/** protected nested annotation */
/** package nested annotation */
/** private nested annotation */
/** public nested model annotation */
//@ model public static @interface AMs_public {  }

/** protected nested model annotation */
//@ model protected static @interface AMs_protected {  }

/** package nested model annotation */
//@ model static @interface AMs_package {  }

/** private nested model annotation */
//@ model private static @interface AMs_private {  }

/*@ normal_behavior
	  @ requires x != null;
      @ requires x.length >= 1;
	  @  ensures \result == (\forall int k; 0<k && k<x.length; x[k-1] <= x[k]);
	  @*/
//@ loop_invariant 1 <= i && i <= x.length;

//@ loop_invariant result == (\forall int j; 1 <= j && j < i; x[j-1] <= x[j]);

//@ decreasing x.length - i;

/*@ normal_behavior
	  @ requires x >= 0;
	  @ ensures \result == x*(x+1)/2;
	  @*/
//@ assume i*(i+1)/2 == ((i-1)*i/2) + i;

//@ loop_invariant 1 <= i && i <= x + 1;

//@ loop_invariant i*(i+1)/2 == ((i-1)*i/2) + i;

//@ loop_invariant result == (i-1)*i/2;

//@ decreasing (x - i);

//@ assume i*(i+1)/2 == ((i-1)*i/2) + i;

/*@ normal_behavior
	  @ requires x != null;
	  @ ensures (\forall int i; 0 <= i && i < x.length; x[i] <= \result);
	 */
//@ requires x.length > 0;

//@ loop_invariant 1 <= i && i <= x.length;

//@ loop_invariant (\forall int j; 0 <= j && j < i; x[j] <= max);

//@ decreasing x.length - i;

/*@ public model class MContents {
    public boolean foo() { return true; }
    }
    @*/
/*@ public static model class SMContents {
    public boolean foo() { return true; }
    }
    @*/
/*@ public model class MIndexedContents extends ModelClassExampleBug<E>.MContents {
          public boolean foo() { return false; }
        }

        public static model class SMIndexedContents extends ModelClassExampleBug<E>.SMContents { // ERROR
          public boolean foo() { return false; }
        }
    @*/
// ERROR

/*@
    public static model class Contents {
          public boolean foo() { return true; }
      }
    @*/
/*@
     public static model class IndexedContents extends NonGenericModelClassExampleBug.Contents {
          public boolean foo() { return false; }
     }
@*/
// This class tests that jmldoc knows how to print all kinds of expressions

//@ pure

//@ invariant i + 2 * 3 - 4 / 5 + 6 % i + (i << 5) + (i >> 6) + (i >>> i) == -10;

//@ invariant i > 0 && i < 0 && i == 0 && (i <= +10 ? i >= 0 : i != 0);

//@ invariant b || !b && (b ==> b) && ( b <==> b ) && ( b <=!=> b ) && (b <== b);

//@ invariant (i & 1) + (i ^ 1) + (i | 1) + (~i) == 0;

//@ invariant \type(int) <: \typeof(o);

//@ invariant \type(int) <#= \typeof(o);

//@ invariant \type(int) <# \typeof(o);

//@ invariant o instanceof java.lang.String;

//@ invariant true && false && (i == 10.0) && (i < -10e4) && (i > +.4e+5) && (i > +.4e+50);

//@ invariant "asd" != (Object)null && 'c' != 'd' && 'a' != '\045' && "45" != "    \"'\034";

//@ invariant (int)9 == 9 && (char)3 == 'd' && (float)4 == (double)5 && (short)1 == (byte)(-1) && (long)-13 == -12;

//@ invariant (new int[]{1,2,3}).length == 3 && (new int[]{1,2,3})[0] == 1 && a[3] == 6;

//@ invariant (new PP()).i == 0;

//  FIXME @ invariant (new PP() { int m() { return 5; } }) != null;

//@ invariant (\forall int i; i != 0) && (\forall int k; k > 0; k >-1);

//@ invariant (\exists int i; i != 0) && (\exists int k; k > 0; k >-1);

//@ invariant (    um_of int i; i == 0) == (    um_of int k; k > 0; k >-1);

//@ invariant (\max int i; i>0 && i<10; i ) == (\min int i; i>0 && i<10; i );

//@ invariant (\sum int i; i>0 && i<10; i ) == (\product int i; i>0 && i<10; i );

//@ invariant this.i == 0 && super.bb() && PP.class != null;

//@ invariant (* informal predicate *) && false && m() == 0 && 0==mq(1,false,new Object());

//@ invariant \is_initialized(PP);

//@ invariant \is_initialized(Integer);

//@ invariant \invariant_for(o);

//@ invariant (\lblpos A true);

//@ invariant (\lblneg A true);

//@ invariant (\lbl A true);

//@ invariant ! \reach(o).isEmpty();

//@ invariant \reach(o) != null;

//@ invariant (new PP() { int m() { return 5; } }) != null;

//@ invariant new JMLSetType { Integer o | list.contains(o) && o > 0 } != null;

// NOTE: \old with 2 arguments and \pre is only within a method

//@ constraint i >= \old(i);

//@ axiom true;

//@ initially true;

//@ readable i if true;

//@ writable i if true;

//@ monitors_for i = o;

//@ public invariant false;

//@ public constraint i >= \old(i);

//@ public initially true;

//@ public readable i if true;

//@ public writable i if true;

//@ public monitors_for i = o;

//@ model int modelM;

//@ represents modelM = 20;

//@ model int modelMZ;

//@ private represents modelMZ = 20;

//@ model int modelM2; in modelM;

//@ ensures \result > 0 && !     onnullelements(a) && \elemtype(\typeof(a)) == \type(int);

//@ ensures \duration(m()) > 0 && \space(o) > 0 && \working_space(m()) > 0;

//@ ensures \fresh(a) && \fresh(a,o);

//@ ensures \max(\lockset) == a;

//@ ensures \max(\lockset).hashCode() != 0;

//@ ensures     ot_modified(i,o);

//@ ensures     ot_modified(a[1 ..*]);

//@ ensures     ot_assigned(    othing) || \only_accessed(    othing) || \only_captured(    othing) || \only_assigned(    othing);

//@ ensures     ot_assigned(\everything) || \only_accessed(\everything) || \only_captured(\everything) || \only_assigned(\everything);

//@ ensures     ot_assigned(i) || \only_accessed(i) || \only_captured(i) || \only_assigned(i);

//@ ensures     ot_assigned(i,a[1 ..*]) || \only_accessed(i,a[1 ..]) || \only_captured(i,a[*]) || \only_assigned(i,o.*);

//@ ensures     ot_assigned(    ot_specified) || \only_accessed(    ot_specified) || \only_captured(    ot_specified) || \only_assigned(    ot_specified);

// FIXME @ ensures \only_called(m,mq);

//@ requires \same;

//@ requires true; pre true;

//@ ensures false; post true;

//@ signals (Exception e) true; exsures (Exception) false;

//@ signals_only Exception;

//@ diverges true;

//@ modifies i;

//@ assignable     othing;

//@ assignable p.i,p.*,this.*,super.*,PP.*;

//@ modifiable i,o,a,a[*],a[1],a[1 .. 2],a[1 ..],a[1 ..*];

// @ modifiable a[1..2],a[1..*],a[1..]; // FIXME (white space before ..)

//@ assignable \everything;

//@ accessible     othing;

//@ accessible \everything;

//@ accessible i, PP.*;

//@ callable     othing;

//@ callable \everything;

//@ callable m, mq, mq(int, boolean, Object), bb, super.bb, o.m();  // FIXME _ more?

//@ measured_by 10;

//@ measured_by 20 if false;

//@ captures i, a[*];

//@ captures     othing;

//@ captures \everything;

//@ duration 0;

//@ duration 0 if true;

//@ working_space 0;

//@ working_space 0 if true;

//@ when false;

//@ signals_only Exception, java.lang.RuntimeException;

//@ signals_only     othing;

//@ requires     ot_specified;

//@ ensures     ot_specified;

//@ diverges     ot_specified;

//@ signals (Exception)     ot_specified;

// NOT_JML: @ signals_only     ot_specified;

//@ assignable     ot_specified;

//@ accessible     ot_specified;

//@ callable     ot_specified;

//@ when     ot_specified;

//@ measured_by     ot_specified;

//@ duration     ot_specified;

//@ working_space     ot_specified;

//@ captures     ot_specified;

//@ maps p.i \into modelM;

/*@ public normal_behavior
    @      requires true;
    @      {|
    @          ensures false;
    @          diverges true;
    @      also
    @          ensures true;
    @          diverges true;
    @      |}
    @  also protected exceptional_behavior
    @       forall Object o;
    @       old int j = k+1;
    @      requires false;
    @      signals (Exception) true;
    @  also code behavior
    @      requires false;
    @      signals (Exception) true;
    @  also private code model_program {
        }
    @  also model_program {
            int x = 0;
            x++;
            ++x;
            x--;
            --x;
            x = 1;
            x += 1;
            x -= 1;
            x *= 1;
            x /= 1;
            x %= 1;
            x <<= 1;
            x >>= 1;
            x >>>=1 ;
            x |= 1;
            x &= 1;
            x ^= 1;
            if (true) x = 1;
            if (true) { x = 1; } else { x = 2; }
            while (true) { x = 1; if (x == 2) continue; if (x == 3) break; }
            do x = 1; while (true);
            switch (x) { case 1: x=2; break; default: x=3; }
            ;
            assume true;
            assert true;
            choose { x = 1; } or { x = 2; }
            choose_if { x = 1; } or { x = 2; } else { x = 3; }
            behavior requires true; ensures false;
            abrupt_behavior requires false; continues true; breaks true; returns true;
            invariant false;

            // FIXME - add loop invariants, refining statements, try catch finally blocks,
            // model programs do not need: set, debug, ghost decls
    @  }
   */
// Various combinations of javadoc comments, tags, and jml

// nothing

/** Javadoc comment only.  Second sentence. */
/** @param i tag only */
/** Javadoc comment and tag.  Second sentence.
    * @param i tag comment
    */
//@ requires i > 0;

//@ requires i > 0;

/** Javadoc comment and JML.  Second sentence. */
//@ requires i > 0;

/** @param i tag and JML*/
//@ requires i > 0;

/** Javadoc comment and tag and JML.  Second sentence.
    * @param i tag comment
    */
// nothing

//@ model public void mq0(int i) {}

/** Javadoc comment only.  Second sentence. */
//@ model public void mq1(int i) {}

/** @param i tag only */
//@ model public void mq2(int i) {}

/** Javadoc comment and tag.  Second sentence.
    * @param i tag comment
    */
//@ model public void mq3(int i) {}

//@ requires i > 0;

//@ model public void mq4(int i) {}

//@ requires i > 0;

/** Javadoc comment and JML.  Second sentence. */
//@ model public void mq5(int i) {}

//@ requires i > 0;

/** @param i tag and JML*/
//@ model public void mq6(int i) {}

//@ requires i > 0;

/** Javadoc comment and tag and JML.  Second sentence.
    * @param i tag comment
    */
//@ model public void mq7(int i) {}

/** Javadoc comment and JML.  Second sentence. */
//@ requires i > 0;

//@ model public void mmq5(int i) {}

/** @param i tag and JML*/
//@ requires i > 0;

//@ model public void mmq6(int i) {}

/** Javadoc comment and tag and JML.  Second sentence.
    * @param i tag comment
    */
//@ requires i > 0;

//@ model public void mmq7(int i) {}

// FIXME - q4 is not indented correctly

// FIXME - extra blank line whenever there are no tags

// FIXME - model methods have no tags

// FIXME - rationalize handling of precedence and () between Pretty and JmlPretty

// TODO - implement choose and choose_if from model program

// FIXME - breaks and continues model program statements all allowed to have labels.

// FIXME - pretty printing assert and assume in model programs

// TODO: forall and old in method specs

// TODO: need to test all kinds of statements, including JML statements

//       labelled, synchronized, throw, local decl, local class,

//       annotated loops, break (to label), continue (to label), return (with value)

//       java assert

//   JML: assert, assume, assert_redundantly, set, debug, unreachable, hence_by

//   JML: choice, choice_if

//   UNDERSTAND: invariant in model program

// TODO: example, implies_that

// TODO:  .this  .super .new-expr

// TODO: callable clause, \only_called

// TODO: long lines, retain user formatting

// This used to compare a \TYPE to null - which is no longer allowed - but still need to sort out whether \elemtype can return null

//@ ghost \TYPE t = \elemtype(\typeof(a));

//@ assert (\lbl TY t) == \type(LinkedList);

//@ assert (\lbl TY2 \typeof(k)) == \type(int);

//@ set  t = (\lbl TY3 \elemtype(\typeof(k)));

//@ set  t = (\lbl TY4 \elemtype(\typeof(o)));

// This used to compare a \TYPE to null - which is no longer allowed - but still need to sort out whether \elemtype can return null

//@ ghost \TYPE t = \elemtype(\typeof(a));

//@ assert (\lbl TY t) == \type(LinkedList<Boolean>);

//@ assert (\lbl TY2 \typeof(k)) == \type(int);

//@ set  t = (\lbl TY3 \elemtype(\typeof(k)));

//@ set  t = (\lbl TY4 \elemtype(\typeof(o)));

/*
 * Test data strategy for Add.
 *
 * Generated by JMLUnitNG 1.4b1 (104), 2013-10-08 22:59 -0700.
 * (do not modify this comment, it is used by JMLUnitNG clean-up routines)
 */
/**
 * Test data strategy for Add. Provides
 * test values for parameter "int the_x"
 * of method "Add(int, int)".
 *
 * @author JMLUnitNG 1.4b1 (104)
 * @version 2013-10-08 22:59 -0700
 */
/**
   * @return local-scope values for parameter
   *  "int the_x".
   */
/* add local-scope int values or generators here */
/*
 * Test data strategy for Add.
 *
 * Generated by JMLUnitNG 1.4b1 (104), 2013-10-08 22:59 -0700.
 * (do not modify this comment, it is used by JMLUnitNG clean-up routines)
 */
/**
 * Test data strategy for Add. Provides
 * test values for parameter "int the_y"
 * of method "Add(int, int)".
 *
 * @author JMLUnitNG 1.4b1 (104)
 * @version 2013-10-08 22:59 -0700
 */
/**
   * @return local-scope values for parameter
   *  "int the_y".
   */
/* add local-scope int values or generators here */
/*
 * Test data strategy for Add.
 *
 * Generated by JMLUnitNG 1.4b1 (104), 2013-10-08 22:59 -0700.
 * (do not modify this comment, it is used by JMLUnitNG clean-up routines)
 */
/**
 * Test data strategy for Add. Provides
 * class-scope test values for type int.
 *
 * @author JMLUnitNG 1.4b1 (104)
 * @version 2013-10-08 22:59 -0700
 */
/**
   * @return class-scope values for type int.
   */
/* add class-scope int values or generators here */
/*
 * Test data strategy for Add.
 *
 * Generated by JMLUnitNG 1.4b1 (104), 2013-10-08 22:59 -0700.
 * (do not modify this comment, it is used by JMLUnitNG clean-up routines)
 */
/**
 * Test data strategy for Add. Provides
 * instances of Add for testing, using
 * parameters from constructor tests.
 *
 * @author JMLUnitNG 1.4b1 (104)
 * @version 2013-10-08 22:59 -0700
 */
/**
   * @return local-scope instances of Add.
   */
/* add Add values or generators here */
/**
   * @return default instances of Add, generated
   *  using constructor test parameters.
   */
// an instantiation iterator for the default constructor

// (if there isn't one, it will fail silently)

// parameters for method Add(int, int)

/**
   * Constructor. The boolean parameter to <code>setReflective</code>
   * determines whether or not reflection will be used to generate
   * test objects, and the int parameter to <code>setMaxRecursionDepth</code>
   * determines how many levels reflective generation of self-referential classes
   * will recurse.
   *
   * @see ObjectStrategy#setReflective(boolean)
   * @see ObjectStrategy#setMaxRecursionDepth(int)
   */
// uncomment to control the maximum reflective instantiation

// recursion depth, 0 by default

// setMaxRecursionDepth(0);

//@ public invariant x() + y() > 0;

/*@ spec_public */
/*@ spec_public */
//@ requires the_x + the_y > 0;

//@ ensures x() == the_x && y() == the_y;

//@ ensures \result == my_x;

/*@ pure helper @*/
//@ ensures \result == my_y;

/*@ pure helper @*/
//@ ensures \result == x() + y() + the_operand;

/*@ pure @*/
/*
 * Test Oracle Class for Add
 * For Use With OpenJML RAC
 *
 * Generated by JMLUnitNG 1.4b1 (104), 2013-10-08 23:02 -0700.
 * (do not modify this comment, it is used by JMLUnitNG clean-up routines)
 */
/**
 * Test oracles generated by JMLUnitNG for OpenJML RAC of class
 * Add.
 *
 * @author JMLUnitNG 1.4b1 (104)
 * @version 2013-10-08 23:02 -0700
 */
/**
   * The main method. Allows the tests to be run without a testng.xml or
   * the use of the TestNG executable/plugin.
   *
   * @param the_args Command line arguments, ignored.
   */
/**
   * A test to ensure that RAC is enabled before running other tests;
   * this also turns on RAC assertions if they were not already turned on.
   */
/*Assert.assertTrue
    (JMLChecker.isRACCompiled(Add.class),
     "JMLUnitNG tests can only run on RAC-compiled code.");*/
/**
   * A test for method x.
   *
   * @param the_test_object The Add to call the test method on.
   */
// meaningless test

// test failure

// test failure for some reason other than assertion violation

/**
   * A test for method y.
   *
   * @param the_test_object The Add to call the test method on.
   */
// meaningless test

// test failure

// test failure for some reason other than assertion violation

/**
   * A test for method sum.
   *
   * @param the_test_object The Add to call the test method on.
   * @param the_operand The int to be passed.
   */
// meaningless test

// test failure

// test failure for some reason other than assertion violation

/**
   * A test for a constructor.
   *
   * @param the_x The int to be passed.
   * @param the_y The int to be passed.
   */
// meaningless test

// test failure

// test failure for some reason other than assertion violation

/**
   * Data provider for method int sum(int).
   * @return An iterator over strategies to use for parameter generation.
   */
/**
   * Data provider for constructor Add(int, int).
   * @return An iterator over strategies to use for parameter generation.
   */
/**
   * Data provider for methods with no parameters.
   * @return An iterator over the main class strategy.
   */
/*
 * Test data strategy for Add.
 *
 * Generated by JMLUnitNG 1.4b1 (104), 2013-10-08 22:59 -0700.
 * (do not modify this comment, it is used by JMLUnitNG clean-up routines)
 */
/**
 * Test data strategy for Add. Provides
 * test values for parameter "int the_operand"
 * of method "int sum(int)".
 *
 * @author JMLUnitNG 1.4b1 (104)
 * @version 2013-10-08 22:59 -0700
 */
/**
   * @return local-scope values for parameter
   *  "int the_operand".
   */
/* add local-scope int values or generators here */
/*
 * Test data strategy for package .
 *
 * Generated by JMLUnitNG 1.4b1 (104), 2013-10-08 22:59 -0700.
 * (do not modify this comment, it is used by JMLUnitNG clean-up routines)
 */
/**
 * Test data strategy for package <default>. Provides
 * package-scope test values for type int.
 *
 * @author JMLUnitNG 1.4b1 (104)
 * @version 2013-10-08 22:59 -0700
 */
/**
   * @return package-scope values for type int.
   */
/* add package-scope int values or generators here */
// FIXME - what about ++, --, conversion to \real, op=

//@ ghost \bigint b = 20;

//@ ghost \bigint bb = -b;

//@ ghost \bigint zero = 0;

//@ ghost \bigint prod = -400;

//@ assert b + bb == zero;

//@ assert b * bb == prod;

//@ assert b + 0 == b;

//@ assert b > 0;

//@ assert zero == 0L;

//@ set zero = 0L;

//@ assert zero >= 0;

//@ assert 0L + b == b;

//@ assert b * (short)0 == zero;

//@ ghost int i = (int)b;

//@ ghost long l = (long)b;

//@ assert b == zero;

//@ ghost BigInteger bi = bb;

//@ ghost \bigint bbb = bi;

//@ assert bbb == bb;

//@ set bbb = prod + bi;

//@ assert (\lbl BBB bbb) == -420;

//@ ghost \bigint x = new BigInteger("123456789012345678901234567890");

//@ ghost \bigint xx = (\lbl XX x*10);

//@ set bb = bb / zero;

//@ set prod = prod / 0;

//@ set i += 1;

//@ set ++i;

//@ set bbb += 1;

//@ set ++bbb;

//@ set bbb++;

//@ assert (\lbl BBB bbb) == -417;

//@ assert (\lbl TRUE bx != bxx);

//@ ghost \bigint bix = bx;

//@ assert (\lbl TRUE bix == bxx);

//@ assert (\lbl TRUE ((\bigint)bx) == bxx);

//@ assert (\lbl TRUE bx == (\bigint)bxx);

//@ public invariant x() + y() > 0;

//@ requires the_x + the_y > 0;

//@ assignable \everything;

//@ ensures x() == the_x && y() == the_y;

/*@ pure @*/
/*@ pure @*/
//@ ensures \result == x() + y() + the_operand;

/*@ pure @*/
//used for JML annotation only (not public)

//suite.addTest(test_Account);

//suite.addTest(test_AccountStub);

//  public static TestCase test_Account = new TestAccount("Account")

//  {

//    public void runTest ()

//    {

//      int i = 1;

//      try

//      {

//        for ( ; i <= TestAccount.testCount; i++)

//          test(i);

//      }

//      catch (JmlAssertionError e) {

//        AllTests.result.addJMLError(this, e);

//        this.setCaseNumber(i); }

//      catch (Throwable e) {

//        AllTests.result.addError(this, e);

//        this.setCaseNumber(i); }

//    }

//  };

//  public static TestCase test_AccountStub = new TestAccountStub("AccountStub")

//  {

//    public void runTest ()

//    {

//      int i = 1;

//      try

//      {

//        for ( ; i <= TestAccountStub.testCount; i++)

//          test(i);

//      }

//      catch (JmlAssertionError e) {

//        AllTests.result.addJMLError(this, e);

//        this.setCaseNumber(i); }

//      catch (Throwable e) {

//        AllTests.result.addError(this, e);

//        this.setCaseNumber(i); }

//    }

//  };

//      case 2:

//        new ConcreteAccount(100); break;

//      case 3:

//        try { new ConcreteAccount(-1); assert false; }

//        catch (JmlAssertionError e){}; break;

//

//      case 4:

//        new ConcreteAccount(100).balance();

//        break;

//      case 5:

//        new ConcreteAccount(0).balance();

//        break;

//      case 6:

//        AbstractAccount acc = new ConcreteAccount(300);

//        assert acc.balance() == 300;

//        break;

/**
 * Thrown when an assertion failed.
 */
// private static final long serialVersionUID = 1L;

/**
	 *
	 */
/**
 * A set of assert methods. Messages are only displayed when an assert fails.
 */
/**
	 * Protect constructor since it is a static only class
	 */
/**
	 * Asserts that a condition is true. If it isn't it throws an
	 * AssertionFailedError with the given message.
	 */
/**
	 * Asserts that a condition is true. If it isn't it throws an
	 * AssertionFailedError.
	 */
/**
	 * Asserts that a condition is false. If it isn't it throws an
	 * AssertionFailedError with the given message.
	 */
/**
	 * Asserts that a condition is false. If it isn't it throws an
	 * AssertionFailedError.
	 */
/**
	 * Fails a test with the given message.
	 */
/**
	 * Fails a test with no message.
	 */
/**
	 * Asserts that two objects are equal. If they are not an
	 * AssertionFailedError is thrown with the given message.
	 */
// devices.Console.println("Assert.assertEquals(message, .., ..)");

/**
	 * Asserts that two objects are equal. If they are not an
	 * AssertionFailedError is thrown.
	 */
/**
	 * Asserts that two Strings are equal.
	 */
/**
	 * Asserts that two Strings are equal.
	 */
/**
	 * Asserts that two doubles are equal concerning a delta. If they are not an
	 * AssertionFailedError is thrown with the given message. If the expected
	 * value is infinity then the delta value is ignored.
	 */
/**
	 * Asserts that two doubles are equal concerning a delta. If the expected
	 * value is infinity then the delta value is ignored.
	 */
/**
	 * Asserts that two floats are equal concerning a delta. If they are not an
	 * AssertionFailedError is thrown with the given message. If the expected
	 * value is infinity then the delta value is ignored.
	 */
// handle infinity specially since subtracting to infinite values gives

// NaN and the

// the following test fails

/**
	 * Asserts that two floats are equal concerning a delta. If the expected
	 * value is infinity then the delta value is ignored.
	 */
/**
	 * Asserts that two longs are equal. If they are not an AssertionFailedError
	 * is thrown with the given message.
	 */
/**
	 * Asserts that two longs are equal.
	 */
/**
	 * Asserts that two booleans are equal. If they are not an
	 * AssertionFailedError is thrown with the given message.
	 */
/**
	 * Asserts that two booleans are equal.
	 */
/**
	 * Asserts that two bytes are equal. If they are not an AssertionFailedError
	 * is thrown with the given message.
	 */
/**
	 * Asserts that two bytes are equal.
	 */
/**
	 * Asserts that two chars are equal. If they are not an AssertionFailedError
	 * is thrown with the given message.
	 */
/**
	 * Asserts that two chars are equal.
	 */
/**
	 * Asserts that two shorts are equal. If they are not an
	 * AssertionFailedError is thrown with the given message.
	 */
/**
	 * Asserts that two shorts are equal.
	 */
/**
	 * Asserts that two ints are equal. If they are not an AssertionFailedError
	 * is thrown with the given message.
	 */
/**
	 * Asserts that two ints are equal.
	 */
/**
	 * Asserts that an object isn't null.
	 */
/**
	 * Asserts that an object isn't null. If it is an AssertionFailedError is
	 * thrown with the given message.
	 */
/**
	 * Asserts that an object is null.
	 */
/**
	 * Asserts that an object is null. If it is not an AssertionFailedError is
	 * thrown with the given message.
	 */
/**
	 * Asserts that two objects refer to the same object. If they are not an
	 * AssertionFailedError is thrown with the given message.
	 */
/**
	 * Asserts that two objects refer to the same object. If they are not the
	 * same an AssertionFailedError is thrown.
	 */
/**
	 * Asserts that two objects do not refer to the same object. If they do
	 * refer to the same object an AssertionFailedError is thrown with the given
	 * message.
	 */
/**
	 * Asserts that two objects do not refer to the same object. If they do
	 * refer to the same object an AssertionFailedError is thrown.
	 */
/**
 * Thrown when an assert equals for Strings failed.
 */
/**
	 * Constructs a comparison failure.
	 *
	 * @param message
	 *            the identifying message or null
	 * @param expected
	 *            the expected string value
	 * @param actual
	 *            the actual string value
	 */
/**
	 * Returns "..." in place of common prefix and "..." in place of common
	 * suffix between expected and actual.
	 *
	 * @see java.lang.Throwable#getMessage()
	 */
// return new ComparisonCompactor(MAX_CONTEXT_LENGTH, fExpected,

// fActual)

// .compact(super.getMessage());

/**
	 * Gets the actual string value
	 *
	 * @return the actual string value
	 */
/**
	 * Gets the expected string value
	 *
	 * @return the expected string value
	 */
/**
 * A <em>Protectable</em> can be run and can throw a Throwable.
 *
 * @see TestResult
 */
/**
   * Run the the following method protected.
   */
//import java.lang.reflect.InvocationTargetException;

//import java.lang.reflect.Method;

//import java.lang.reflect.Modifier;

/**
	 * the name of the test case
	 */
// Switch case number

/**
	 * No-arg constructor to enable serialization. This method is not intended
	 * to be used by mere mortals without calling setName().
	 */
/**
	 * Constructs a test case with the given name.
	 */
/**
	 * Counts the number of test cases executed by run(TestResult result).
	 */
//devices.Console.println("TestCase.run begin");

//devices.Console.println("TestCase.run end");

/**
	 * Runs the bare test sequence.
	 *
	 * @exception Throwable
	 *                if any exception is thrown
	 */
/**
	 * Override to run the test and assert its state.
	 *
	 * @exception Throwable
	 *                if any exception is thrown
	 */
/*
		 * assertNotNull(fName); // Some VMs crash when calling
		 * getMethod(null,null); Method runMethod= null; try { // use getMethod
		 * to get all public inherited // methods. getDeclaredMethods returns
		 * all // methods of this class but excludes the // inherited ones.
		 * runMethod= getClass().getMethod(fName, (Class[])null);
		 *
		 * System.out.println ("1 TestCase.runTest: " + runMethod);
		 *
		 * } catch (NoSuchMethodException e) {
		 * fail("Method \""+fName+"\" not found"); } if
		 * (!Modifier.isPublic(runMethod.getModifiers())) {
		 * fail("Method \""+fName+"\" should be public"); }
		 *
		 * try { System.out.println ("2 TestCase.runTest: " + runMethod);
		 * runMethod.invoke(this, (Object[])new Class[0]); } catch
		 * (InvocationTargetException e) { e.fillInStackTrace(); throw
		 * e.getTargetException(); } catch (IllegalAccessException e) {
		 * e.fillInStackTrace(); throw e; }
		 */
/**
	 * Sets up the fixture, for example, open a network connection. This method
	 * is called before a test is executed.
	 */
/**
	 * Tears down the fixture, for example, close a network connection. This
	 * method is called after a test is executed.
	 */
/**
	 * Returns a string representation of the test case
	 */
/**
	 * Gets the name of a TestCase
	 * @return returns a String
	 */
/**
	 * Sets the name of a TestCase
	 * @param name The name to set
	 */
//import java.io.PrintWriter;

//import java.io.StringWriter;

/**
 * A <code>TestFailure</code> collects a failed test together with the
 * caught exception.
 *
 * @see TestResult
 */
/**
   * Constructs a TestFailure with the given test and exception.
   */
/**
   * Gets the failed test.
   */
/**
   * Gets the thrown exception.
   */
/**
   * Returns a short description of the failure.
   */
/*public String trace ()
  {
    StringWriter stringWriter = new StringWriter();
    PrintWriter writer = new PrintWriter(stringWriter);
    thrownException().printStackTrace(writer);
    StringBuffer buffer = stringWriter.getBuffer();
    return buffer.toString();
  }*/
/**
   * Counts the number of test cases that will be run by this test.
   */
/**
   * Runs a test and collects its result in a TestResult instance.
   */
/**
 * A Listener for test progress
 */
//  /**

//   * An error occurred.

//   */

//  public void addError(Test test, Throwable t);

//  /**

//   * A failure occurred.

//   */

//  public void addFailure(Test test, AssertionFailedError t);

//  /**

//   * A test ended.

//   */

//  public void endTest(Test test);

//  /**

//   * A test started.

//   */

//  public void startTest(Test test);

/**
 * A <code>TestResult</code> collects the results of executing a test case.
 * It is an instance of the Collecting Parameter pattern. The test
 * framework distinguishes between <i>failures</i> and <i>errors</i>. <br>
 * A failure is anticipated and checked for with assertions. <br>
 * Errors are unanticipated problems like an
 * <code>ArrayIndexOutOfBoundsException</code>.
 *
 * @see Test
 */
/**
   * Adds an error to the list of errors. The passed in exception caused
   * the error.
   */
/**
   * Adds a failure to the list of failures. The passed in exception caused
   * the failure.
   */
/**
   * Informs the result that a test was completed.
   */
/**
   * Gets the number of detected JML errors.
   */
/**
   * Returns an Enumeration for the JML errors
   */
/**
   * Gets the number of detected failures.
   */
/**
   * Returns an Enumeration for the failures
   */
/**
   * Returns an Enumeration for the errors
   */
/**
   * Runs a TestCase.
   */
//devices.Console.println("1 TestResult.run");

//devices.Console.println("2 TestResult.run");

/**
   * Gets the number of run tests.
   */
/**
   * Runs a TestCase.
   */
//devices.Console.println("TestResult.runProtected");

//devices.Console.println("TestResult.runProtected: failure");

// don't catch ThreadDeath by accident

//devices.Console.println("TestResult.runProtected: error");

/**
   * Checks whether the test run should stop
   */
/**
   * Informs the result that a test will be started.
   */
/**
   * Marks that the test run should stop.
   */
/**
   * Returns whether the entire test was successful or not.
   */
/**
 * A <code>TestSuite</code> is a <code>Composite</code> of Tests.
 * It runs a collection of test cases. Here is an example using
 * the dynamic test definition.
 * <pre>
 * TestSuite suite= new TestSuite();
 * suite.addTest(new MathTest("testAdd"));
 * suite.addTest(new MathTest("testDivideByZero"));
 * </pre>
 * Alternatively, a TestSuite can extract the tests to be run automatically.
 * To do so you pass the class of your TestCase class to the
 * TestSuite constructor.
 * <pre>
 * TestSuite suite= new TestSuite(MathTest.class);
 * </pre>
 * This constructor creates a suite with all the methods
 * starting with "test" that take no arguments.
 * <p>
 * A final option is to do the same for a large array of test classes.
 * <pre>
 * Class[] testClasses = { MathTest.class, AnotherTest.class }
 * TestSuite suite= new TestSuite(testClasses);
 * </pre>
 *
 * @see Test
 */
/**
	 * ...as the moon sets over the early morning Merlin, Oregon
	 * mountains, our intrepid adventurers type...
	 */
/*static public Test createTest(Class theClass, String name) {
		Constructor constructor;
		try {
			constructor= getTestConstructor(theClass);
		} catch (NoSuchMethodException e) {
			return warning("Class "+theClass.getName()+" has no public constructor TestCase(String name) or TestCase()");
		}
		Object test;
		try {
			if (constructor.getParameterTypes().length == 0) {
				test= constructor.newInstance(new Object[0]);
				if (test instanceof TestCase)
					((TestCase) test).setName(name);
			} else {
				test= constructor.newInstance(new Object[]{name});
			}
		} catch (InstantiationException e) {
			return(warning("Cannot instantiate test case: "+name+" ("+exceptionToString(e)+")"));
		} catch (InvocationTargetException e) {
			return(warning("Exception in constructor: "+name+" ("+exceptionToString(e.getTargetException())+")"));
		} catch (IllegalAccessException e) {
			return(warning("Cannot access test case: "+name+" ("+exceptionToString(e)+")"));
		}
		return (Test) test;
	}*/
/**
	 * Gets a constructor which takes a single String as
	 * its argument or a no arg constructor.
	 */
/*public static Constructor getTestConstructor(Class theClass) throws NoSuchMethodException {
		Class[] args= { String.class };
		try {
			return theClass.getConstructor(args);
		} catch (NoSuchMethodException e) {
			// fall through
		}
		return theClass.getConstructor(new Class[0]);
	}*/
/**
	 * Returns a test which will fail and log a warning message.
	 */
/**
	 * Converts the stack trace into a string

	private static String exceptionToString(Throwable t) {
		StringWriter stringWriter= new StringWriter();
		PrintWriter writer= new PrintWriter(stringWriter);
		t.printStackTrace(writer);
		return stringWriter.toString();

	}
	*/
/**
	 * Constructs an empty TestSuite.
	 */
/**
	 * Constructs a TestSuite from the given class. Adds all the methods
	 * starting with "test" as test cases to the suite.
	 * Parts of this method was written at 2337 meters in the Hueffihuette,
	 * Kanton Uri
	 */
/*public TestSuite(final Class theClass) {
		fName= theClass.getName();
		try {
			getTestConstructor(theClass); // Avoid generating multiple error messages
		} catch (NoSuchMethodException e) {
			addTest(warning("Class "+theClass.getName()+" has no public constructor TestCase(String name) or TestCase()"));
			return;
		}

		if (!Modifier.isPublic(theClass.getModifiers())) {
			addTest(warning("Class "+theClass.getName()+" is not public"));
			return;
		}

		Class superClass= theClass;
		Vector names= new Vector();
		while (Test.class.isAssignableFrom(superClass)) {
			Method[] methods= superClass.getDeclaredMethods();
			for (int i= 0; i < methods.length; i++) {
				addTestMethod(methods[i], names, theClass);
			}
			superClass= superClass.getSuperclass();
		}
		if (fTests.size() == 0)
			addTest(warning("No tests found in "+theClass.getName()));
	}*/
/**
	 * Constructs a TestSuite from the given class with the given name.
	 * @see TestSuite#TestSuite(Class)
	 */
/*public TestSuite(Class theClass, String name) {
		this(theClass);
		setName(name);
	}*/
/**
	 * Constructs an empty TestSuite.
	 */
/**
	 * Constructs a TestSuite from the given array of classes.
	 * @param classes
	 */
/*public TestSuite (Class[] classes) {
		for (int i= 0; i < classes.length; i++)
			addTest(new TestSuite(classes[i]));
	}*/
/**
	 * Constructs a TestSuite from the given array of classes with the given name.
	 * @see TestSuite#TestSuite(Class[])
	 */
/*public TestSuite(Class[] classes, String name) {
		this(classes);
		setName(name);
	}*/
/**
	 * Adds a test to the suite.
	 */
/**
	 * Adds the tests from the given class to the suite
	 */
/*public void addTestSuite(Class testClass) {
		addTest(new TestSuite(testClass));
	}*/
/**
	 * Counts the number of test cases that will be run by this test.
	 */
/**
	 * Returns the name of the suite. Not all
	 * test suites have a name and this method
	 * can return null.
	 */
/**
	 * Runs the tests and collects their result in a TestResult.
	 */
/**
	 * Sets the name of the suite.
	 * @param name The name to set
	 */
/**
	 * Returns the test at the given index
	 */
/**
	 * Returns the number of tests in this suite
	 */
/**
	 * Returns the tests as an enumeration
	 */
/**
	 */
/*private void addTestMethod(Method m, Vector names, Class theClass) {
		String name= m.getName();
		if (names.contains(name))
			return;
		if (! isPublicTestMethod(m)) {
			if (isTestMethod(m))
				addTest(warning("Test method isn't public: "+m.getName()));
			return;
		}
		names.addElement(name);
		addTest(createTest(theClass, name));
	}

	private boolean isPublicTestMethod(Method m) {
		return isTestMethod(m) && Modifier.isPublic(m.getModifiers());
	 }

	private boolean isTestMethod(Method m) {
		String name= m.getName();
		Class[] parameters= m.getParameterTypes();
		Class returnType= m.getReturnType();
		return parameters.length == 0 && name.startsWith("test") && returnType.equals(Void.TYPE);
	 }*/
// Calculator-JML program by Pushkar Ogale

// CS 5374 Fall 2013

// NOTE: Added as a test case because it crashed (with RAC) under 12/12 release

//import java.lang.*;

//Global Result variable

//Global Result variable

//Global Result variable

//Global Result variable

//Global Result variable

//Global Result variable

//Global Result variable

//Thread to process Sum

//@ requires I1 >= 0 && I2>=0;

//@ ensures \result > 0.0;

//Thread to process Division

//@ requires I2 > 0;

//@ ensures \result < 0;

//Thread to process Subtract

//@ requires I1 > I2;

//@ ensures \result > 0;

//Thread to process Multiplication

//@ requires I1 > 0 && I2 > 0;

//@ ensures \result >0;

//@ requires I1 > 0 && I2 > 0;

//@ ensures \result > 0;

//@ ensures \result > 0;

//@ requires I1 > 0 && I2 >= 0 ;

//@ ensures \result >0;

// Read user input

// Read user input code

//.charAt(0);

//System.out.println("User input is : "+c); //Debug statement

//

/*@ spec_public */
//@ ensures \old(someArray[\result]) == 4;

//@ ensures \old(someArray[\result] + 2) == 6;

//@ ensures \old(someArray[\result])+ 2 == 6;

/*  NOTE: This submitted as a test case because RAC crashes when it encounters a model method in the java.lang.Math spec, which doee not have a real counterpart because java.lang.Math is not RAC-compiled.
 * Two-Dimensional Points
 * Fall 2013 CSCI181F
 * Daniel M. Zimmerman
 */
/**
 * A point in the Euclidean plane.
 *
 * @author Daniel M. Zimmerman
 * @version 2013-10-31
 */
/**
   * The margin of error for double-precision arithmetic.
   */
/**
   * The format string for computing hash codes that will
   * work with the error margin.
   */
/**
   * The x-coordinate.
   */
/**
   * The y-coordinate.
   */
/*@ requires the_system == CoordinateSystem.CARTESIAN |
               the_system == CoordinateSystem.POLAR; */
/*@ requires the_system == CoordinateSystem.POLAR ==>
                 0 <= coord_1 & 0 <= coord_2 & coord_2 < 2 * Math.PI; */
//@ requires isFinite(coord_1) & isFinite(coord_2);

/*@ ensures the_system == CoordinateSystem.CARTESIAN ==>
                x() == coord_1 & y() == coord_2; */
/*@ ensures the_system == CoordinateSystem.POLAR ==>
                approxEquals(rho(), coord_1) & approxEquals(theta(), coord_2); */
/**
   * Your Cartesian coordinates are (the_x, the_y)!
   * Your polar coordinates are (the_rho, the_theta)!
   *
   * Constructs a Point with the specified coordinates in
   * the specified coordinate system.
   *
   * @param coord_1 The x-coordinate or rho.
   * @param coord_2 The y-coordinate or theta.
   * @param the_system The coordinate system.
   */
/**
   * Compares two numbers for approximate equivalence. They
   * must be within ERROR_MARGIN of each other.
   *
   * @param number_1 The first number.
   * @param number_2 The second number.
   * @return true if the two specified numbers are approximately
   * equivalent, false otherwise.
   */
//@ ensures \result <==> Math.abs(number_1 - number_2) < ERROR_MARGIN;

/*@ pure */
/*@ ensures \result <==> the_number != Double.NEGATIVE_INFINITY &
                           the_number != Double.POSITIVE_INFINITY &
                           !Double.isNaN(the_number); */
/**
   * Checks a double-precision floating point number for finiteness.
   *
   * @param the_number The number to check.
   * @return true if the_number is finite, false otherwise.
   */
/*@ pure */
/**
   * Normalizes an angle to be between 0 (inclusive) and 2 * Math.PI
   * (exclusive).
   *
   * @param the_angle The angle.
   * @return The normalized angle.
   */
/*@ pure */
// repeatedly subtract 2 * Math.PI until we're less than 2 * Math.PI

// repeatedly add 2 * Math.PI until we're greater than 0

// should be normalized

/**
   * @return What is your x-coordinate?
   */
/*@ pure */
/**
   * @return What is your y-coordinate?
   */
/*@ pure */
/**
   * @return What is your rho?
   */
/*@ pure */
/**
   * @return What is your theta?
   */
/*@ pure */
/**
   * A main method to demonstrate a JML error.
   */
/*  NOTE: This submitted as a test case because RAC crashes when it encounters a model method in the java.lang.Math spec, which doee not have a real counterpart because java.lang.Math is not RAC-compiled.
 * Two-Dimensional Points
 * Fall 2013 CSCI181F
 * Daniel M. Zimmerman
 */
/**
 * A point in the Euclidean plane.
 *
 * @author Daniel M. Zimmerman
 * @version 2013-10-31
 */
/**
   * The margin of error for double-precision arithmetic.
   */
/**
   * The format string for computing hash codes that will
   * work with the error margin.
   */
/**
   * The x-coordinate.
   */
/**
   * The y-coordinate.
   */
/*@ requires the_system == CoordinateSystem.CARTESIAN |
               the_system == CoordinateSystem.POLAR; */
/*@ requires the_system == CoordinateSystem.POLAR ==>
                 0 <= coord_1 & 0 <= coord_2 & coord_2 < 2 * Math.PI; */
//@ requires isFinite(coord_1) & isFinite(coord_2);

/*@ ensures the_system == CoordinateSystem.CARTESIAN ==>
                x() == coord_1 & y() == coord_2; */
/*@ ensures the_system == CoordinateSystem.POLAR ==>
                approxEquals(rho(), coord_1) & approxEquals(theta(), coord_2); */
/**
   * Your Cartesian coordinates are (the_x, the_y)!
   * Your polar coordinates are (the_rho, the_theta)!
   *
   * Constructs a Point with the specified coordinates in
   * the specified coordinate system.
   *
   * @param coord_1 The x-coordinate or rho.
   * @param coord_2 The y-coordinate or theta.
   * @param the_system The coordinate system.
   */
/**
   * Compares two numbers for approximate equivalence. They
   * must be within ERROR_MARGIN of each other.
   *
   * @param number_1 The first number.
   * @param number_2 The second number.
   * @return true if the two specified numbers are approximately
   * equivalent, false otherwise.
   */
//@ ensures \result <==> Math.abs(number_1 - number_2) < ERROR_MARGIN;

/*@ pure */
/*@ ensures \result <==> the_number != Double.NEGATIVE_INFINITY &
                           the_number != Double.POSITIVE_INFINITY &
                           !Double.isNaN(the_number); */
/**
   * Checks a double-precision floating point number for finiteness.
   *
   * @param the_number The number to check.
   * @return true if the_number is finite, false otherwise.
   */
/*@ pure */
/**
   * Normalizes an angle to be between 0 (inclusive) and 2 * Math.PI
   * (exclusive).
   *
   * @param the_angle The angle.
   * @return The normalized angle.
   */
/*@ pure */
// repeatedly subtract 2 * Math.PI until we're less than 2 * Math.PI

// repeatedly add 2 * Math.PI until we're greater than 0

// should be normalized

/**
   * @return What is your x-coordinate?
   */
/*@ pure */
/**
   * @return What is your y-coordinate?
   */
/*@ pure */
/**
   * @return What is your rho?
   */
/*@ pure */
/**
   * @return What is your theta?
   */
/*@ pure */
/**
   * A main method to demonstrate a JML error.
   */
// FIXME - what about ++, --, conversion to \real, op=

//@ ghost \real b = 20;

//@ ghost \real bb = -b;

//@ ghost \real zero = 0;

//@ ghost \real prod = -400;

//@ assert b + bb == zero;

//@ assert b * bb == prod;

//@ assert b + 0 == b;

//@ assert b > 0;

//@ assert zero == 0L;

//@ set zero = 0L;

//@ assert zero >= 0;

//@ assert 0.0 + b == b;

//@ assert b * (double)0 == zero;

//@ ghost float i = (float)b;

//@ ghost double l = (double)b;

//@ assert b == zero;

//@ ghost Real bi = bb;

//@ ghost \real bbb = bi;

//@ assert bbb == bb;

//@ set bbb = prod + bi;

//@ assert (\lbl BBB bbb) == -420;

//@ ghost \real x = new Real(10.30);

//@ ghost \real xx = (\lbl XX x*10);

//@ set bb = bb / zero;

//@ set prod /= 0;

//@ set i += 1;

//@ set ++i;

//@ set bbb += 1;

//@ set ++bbb;

//@ set bbb++;

//@ assert (\lbl BBB bbb) == -417;

//@ assignable     othing;

/**
 * Copyright (c) 1999 GEMPLUS group. All Rights Reserved.
 *------------------------------------------------------------------------------
 *  Project name:  PACAP  - cas d'�tude -
 *
 *
 *  Platform    :  Java virtual machine
 *  Language    :  JAVA 1.1.x
 *  Devl tool   :  Symantec VisualCafe
 *
 *  @version 1.0.
 *------------------------------------------------------------------------------
 */
/**
 * The class Decimal allows to represent virgule number. We use to
 * represent a number two short that correspond to the entire part and
 * the decimal part. Two important notes about a decimal number: it is
 * limited to 32767 (short representation) and the decimal part must
 * be done in the interval [000,999]. The operation are exact for the
 * addition and subtraction and rounded for the multiplication. The
 * division is not implemented because it is the terminal that it does
 * this action */
////////////////      ATTRIBUTES       ////////////////

/**
     *	Nombre � virgule trop grand
     */
//(0x9F15);

/** save stack maximum length */
/*@ spec_public */
/*@
      public invariant decPart >= 0 && decPart < PRECISION ;
      public invariant intPart >= 0 && intPart <= MAX_DECIMAL_NUMBER;
      public invariant intPart == MAX_DECIMAL_NUMBER ==> decPart == 0;
    */
/** decimal precision */
/** entere part */
/*@ spec_public */
/** decimal part */
/*@ spec_public */
/*@
      public invariant decPart_ >= 0 && decPart_ < PRECISION ;
      public invariant intPart_ >= 0 ;
      public invariant intPart_ == MAX_DECIMAL_NUMBER ==> decPart_ == 0;
    */
// save entere and decimal part

/*@ spec_public */
/*@ spec_public */
/** save stack present length */
// invariant 0 <= depth && depth <= MAX_DEPTH;

/*@ spec_public */
///////////////     CONSTRUCTOR     ////////////////

/*@
      requires true;
      ensures intPart == 0 && decPart == 0;
//      ensures \fresh(this);
    */
/*@
      requires v >= 0;
      ensures intPart == v && decPart == 0;
//      ensures \fresh(this);
      exsures (ISOException) false;
    */
// Code modified by Nestor CATANO 23/05/2001

// inclusion of throws clause

//@ unreachable;

/*@
      requires i >= 0 && d >= 0 && d < PRECISION;
      requires i == MAX_DECIMAL_NUMBER ==> d == 0;
      ensures intPart == i && decPart == d;
//      ensures \fresh(this);
      exsures (ISOException) false; assignable \everything;
    */
// Code modified by Nestor CATANO 23/05/2001

// inclusion of throws clause

//@ unreachable;

/*@
      requires d != null; assignable \everything;
      ensures intPart == d.intPart && decPart == d.decPart;
//      ensures \fresh(this);
      exsures (ISOException) false;
    */
// Code modified by Nestor CATANO 23/05/2001

// inclusion of throws clause

//@ unreachable;

////////////////       METHODS      ///////////////

//-------------------------------------------------------------------------

//

//                        aritmetic methods

//

//-------------------------------------------------------------------------

/**
        @return the Decimal added by the value of the Decimal d
    */
/*@
      modifies intPart, decPart;
      requires d != null;
//       ensures intPart * PRECISION + decPart ==
//                 \old(intPart * PRECISION + decPart) +
//                 d.intPart * PRECISION + d.decPart;
      ensures \result == this ;
      exsures (DecimalException) intPart < 0 ;
     */
/**
        @return the Decimal substracted by the value of the Decimal d
    */
/*@
      requires d != null;
      modifies intPart, decPart;
//       ensures intPart * PRECISION + decPart ==
//                 \old(intPart * PRECISION + decPart) -
//                 d.intPart * PRECISION + d.decPart;
      ensures \result == this;
      exsures (DecimalException) intPart < 0;
    */
/**
        @return the Decimal multiplied by the value of the Decimal d
    */
/*@
      modifies intPart, decPart;
      requires d != null ;
//       ensures intPart * PRECISION + decPart ==
//                 \old(intPart * PRECISION + decPart) *
//                 (d.intPart * PRECISION + d.decPart);
      ensures \result == this ;
      exsures (DecimalException) intPart < 0 ;
    */
/**
        @return the oppose value of the Decimal d
    */
/*@
      modifies intPart, decPart;
      requires true;
      ensures intPart == \old((short)-intPart);
      ensures decPart == \old((short)-decPart);
      ensures \result == this;
      //exsures (RuntimeException) false
    */
// Code modified by Marieke Huisman, 24/10/2001

// Method changed from public to private

// Cf. email Hugues Martin, Gemplus

/*@ helper */
/**
        @return the around to the nexte entere value
    */
/*@
      modifies intPart, decPart;
      requires true;
      ensures \result == this;
      ensures decPart == 0;
      ensures intPart == (\old(decPart) >= (PRECISION/2) ?
                              (short)(\old(intPart) + 1) :
                                 (short)(\old(intPart)));
      //exsures (RuntimeException)false
    */
// MH, 29/10/01, commented out wrong code

//         short aux = decPart;

//         if ( aux < 0 ) aux = (short) -aux;

//         while ( aux > 10 ) aux /= (short) 10;

//         if ( aux > 5 ) {

// 	    if ( decPart > 0 ) intPart++;

// 	    else intPart = intPart --;

//         }

//         decPart = (short) 0;

//         return this;

//-------------------------------------------------------------------------

//

//                          comparaison methods

//

//-------------------------------------------------------------------------

/**
        comprae this decimal with the entere in parameter
        @param ref entere
        @return 0  if this == ref,
                1  if this > ref,
               -1  if this < ref
    */
/*@
      //modifies     othing
      requires 0 <= ref && ref <= MAX_DECIMAL_NUMBER;
      ensures \result == (intPart == ref ? ((decPart == 0) ? 0 : 1)
                                         : ((intPart < ref) ? -1 : 1));
      //exsures (RuntimeException)false
    */
/**
       Test if the Decimal is equal to 0
    */
/*@
      //modifies     othing
      requires true;
      ensures \result == (intPart == 0 && decPart == 0);
      //exsures (RuntimeException)false
    */
/**
       Test if the Decimal is superior to 0
    */
/*@
      //modifies     othing
      requires true;
      ensures \result;
      //exsures (RuntimeException)false
    */
/**
       Test if the Decimal is inferior to 0
    */
/*@
      //modifies     othing
      requires true;
      ensures \result == false;
      //exsures (RuntimeException)false
    */
//        return (compareTo((short) 0) <= (short) 0 );

/**
       Test if the Decimal is great or equal than the Decimal d
    */
/*@
      //modifies     othing
      requires d != null;
      ensures \result == ((intPart * PRECISION + decPart >
                           d.intPart * PRECISION + d.decPart) ||
                          (intPart * PRECISION + decPart ==
                           d.intPart * PRECISION + d.decPart));
      //exsures (RuntimeException)false
    */
//             if      ((decPart > d.getDecPart())||(decPart > d.getDecPart()))   resu = true;

/**
       Test if the Decimal is small or equal than the Decimal d
    */
/*@
      //modifies     othing
      requires d != null;
//       ensures \result == (intPart * PRECISION + decPart <=
//                           d.intPart * PRECISION + d.decPart);
      //exsures (RuntimeException)false
    */
/**
        Test if the Decimal is great than the Decimal d
    */
/*@
      //modifies     othing
      requires d != null;
//       ensures \result == (intPart * PRECISION + decPart >
//                           d.intPart * PRECISION + d.decPart);
      //exsures (RuntimeException)false
    */
/**
        Test if the Decimal is small than the Decimal d
    */
/*@
      //modifies     othing
      requires d != null;
//       ensures \result == (d.intPart * PRECISION + d.decPart >
//                           intPart * PRECISION + decPart);
      //exsures (RuntimeException)false
    */
/**
        Test if the Decimal is equal than the Decimal d
    */
/*@
      //modifies     othing
      requires d != null;
      ensures \result == (intPart == d.intPart &&
                          decPart == d.decPart);
      //exsures (RuntimeException)false
    */
//-------------------------------------------------------------------------

//

//                            accesor methods

//

//-------------------------------------------------------------------------

/**
       Set the decimal value
    */
/*@
      requires true;
      ensures intPart == v ;
      ensures decPart == (short) 0 ;
      ensures \result == this;
      exsures (DecimalException) v < 0;
    */
// MH, 29/10/01, commented out wrong code

// 	intPart = v;

// 	if(intPart < 0)

// 	    decimal_exception.throwIt((byte)0x01 /*decimal_exception.DECIMAL_OVERFLOW*/);

// 	decPart = (short) 0;

// 	return this;

/**
        Set two short part to a decimal value
    */
/*@
      requires true;
      ensures intPart == i && decPart == d ;
      ensures \result == this;
      exsures (DecimalException) i < 0 || d < 0 || d >= PRECISION ||
                                 (i == MAX_DECIMAL_NUMBER && d != 0);
    */
// NCC, 21/10/01, commented out wrong code

// 	intPart = i;

// 	decPart = d;

// 	if(intPart < 0)

// 	decimal_exception.throwIt((byte)0x01 /*decimal_exception.DECIMAL_OVERFLOW*/);

// 	return this;

/**
       Set a decimal value to a decimal value
    */
/*@
      requires d != null ;
      ensures intPart == d.intPart ;
      ensures decPart == d.decPart ;
      ensures \result == this ;
      exsures (DecimalException) false ;
    */
//code added by Nestor CATANO 12/10/01 to compile

//Purse and PurseApplet classes

/**
       Acess to the entere part
    */
/*@
      //modifies     othing
      requires true;
      ensures \result == intPart;
      //exsures (RuntimeException)false
      pure */
/**
       Acess to the decimal part
    */
/*@
      //modifies     othing;
      requires true ;
      ensures \result == decPart;
      //exsures (RuntimeException)false
      pure */
/**
     *  return the entere value next the Decimal
    */
/*@
      modifies intPart, decPart;
      requires true;
      ensures intPart == \old(intPart) && decPart == \old(decPart);
      ensures \result == (decPart >= PRECISION/2 ?
                          intPart + 1:
                          intPart);
      //exsures (RuntimeException)false
    */
/**
     * Put the Decimal value in the table bArray in two conscutive short
     * @param bArray destinantion table
     * @param off loaction in the table
     * @return off + 4
    */
/*@
      modifies bArray[off], bArray[off+1], bArray[off+2], bArray[off+3];
      requires bArray != null ;
      requires off >= 0;
      requires off + 3 < bArray.length;
      ensures \result == off+4 ;
      exsures (ArrayIndexOutOfBoundsException) false;
    */
// Code modified by Nestor CATANO 21/05/2001

// inclusion of throws clause

//-----------------------------------------------------------------------

//

//          save method and value restoration

//

//-----------------------------------------------------------------------

/** save the value of Decimal in the stack */
/*@
      modifies intPart_, decPart_, depth;
      requires true;
      ensures (depth < MAX_DEPTH) ==> (intPart_ == intPart &&
                                       decPart_ == decPart &&
                                       depth == (byte) (\old(depth) + 1));
      //exsures (RuntimeException)false
    */
// MH, 29/10/01, code added

/** restore the value of the Decimal */
/*@
      modifies intPart, decPart, depth;
      requires true;
      ensures (depth > 0) ==> (intPart == intPart_ &&
                               decPart == decPart_ &&
                               depth == (byte)(\old(depth) - 1));
      //exsures (RuntimeException)false
    */
//-------------------------------------------------------------------------

//

//                            private methods

//

//-------------------------------------------------------------------------

/**
     * add the entere part e and the decimal part f to a Decimal
     */
/*@
      modifies intPart, decPart ;
      requires true ;
//       ensures intPart * PRECISION + decPart ==
//                \old(intPart * PRECISION + decPart) + (e * PRECISION + f);
      //exsures (RuntimeException)false;
    */
//@ nowarn;

/**
     * Multiplication of the Decimal by a entere part e and a decimal part f
     */
/*@
      modifies intPart, decPart;
      requires true ;
//       ensures intPart * PRECISION + decPart ==
//               \old(intPart * PRECISION + decPart) * (e * PRECISION + f);
      // exsures (RuntimeException)false;
    */
//a * b = a * (int(b) + frac(b)) = a * int(b) + a* frac(b)

//@ assume aux != 0;

//@ nowarn;

/**
 * Copyright (c) 1999 GEMPLUS group. All Rights Reserved.
 *------------------------------------------------------------------------------
 *  Project name:  PACAP  - cas d'�tude -
 *
 *
 *  Platform    :  Java virtual machine
 *  Language    :  JAVA 1.1.x
 *  Devl tool   :  Symantec VisualCafe
 *
 *  @version 1.0.
 *------------------------------------------------------------------------------
 */
/**
 * The class Decimal allows to represent virgule number. We use to
 * represent a number two short that correspond to the entire part and
 * the decimal part. Two important notes about a decimal number: it is
 * limited to 32767 (short representation) and the decimal part must
 * be done in the interval [000,999]. The operation are exact for the
 * addition and subtraction and rounded for the multiplication. The
 * division is not implemented because it is the terminal that it does
 * this action */
////////////////      ATTRIBUTES       ////////////////

/**
     *	Nombre � virgule trop grand
     */
/** save stack maximum length */
/*@ spec_public */
/*@
      public invariant decPart >= 0 && decPart < PRECISION ;
      public invariant intPart >= 0 && intPart <= MAX_DECIMAL_NUMBER;
      public invariant intPart == MAX_DECIMAL_NUMBER ==> decPart == 0;
    */
/** decimal precision */
/** entere part */
/*@ spec_public */
/** decimal part */
/*@ spec_public */
/*@
      public invariant decPart_ >= 0 && decPart_ < PRECISION ;
      public invariant intPart_ >= 0 ;
      public invariant intPart_ == MAX_DECIMAL_NUMBER ==> decPart_ == 0;
    */
// save entere and decimal part

/*@ spec_public */
/*@ spec_public */
/** save stack present length */
// invariant 0 <= depth && depth <= MAX_DEPTH;

/*@ spec_public */
///////////////     CONSTRUCTOR     ////////////////

/*@
      requires true;
      ensures intPart == 0 && decPart == 0;
      ensures \fresh(this);
    */
/*@
      requires v >= 0;
      ensures intPart == v && decPart == 0;
      ensures \fresh(this);
      exsures (ISOException) false;
    */
// Code modified by Nestor CATANO 23/05/2001

// inclusion of throws clause

//@ unreachable;

/*@
      requires i >= 0 && d >= 0 && d < PRECISION;
      requires i == MAX_DECIMAL_NUMBER ==> d == 0;
      ensures intPart == i && decPart == d;
      ensures \fresh(this);
      exsures (ISOException) false; assignable \everything;
    */
// Code modified by Nestor CATANO 23/05/2001

// inclusion of throws clause

//@ unreachable;

/*@
      requires d != null;
      ensures intPart == d.intPart && decPart == d.decPart;
      ensures \fresh(this);
      exsures (ISOException) false;
    */
// Code modified by Nestor CATANO 23/05/2001

// inclusion of throws clause

//@ unreachable;

////////////////       METHODS      ///////////////

//-------------------------------------------------------------------------

//

//                        aritmetic methods

//

//-------------------------------------------------------------------------

/**
        @return the Decimal added by the value of the Decimal d
    */
/*@
      modifies intPart, decPart;
      requires d != null;
//       ensures intPart * PRECISION + decPart ==
//                 \old(intPart * PRECISION + decPart) +
//                 d.intPart * PRECISION + d.decPart;
      ensures \result == this ;
      exsures (DecimalException) intPart < 0 ;
     */
/**
        @return the Decimal substracted by the value of the Decimal d
    */
/*@
      requires d != null;
      modifies intPart, decPart;
//       ensures intPart * PRECISION + decPart ==
//                 \old(intPart * PRECISION + decPart) -
//                 d.intPart * PRECISION + d.decPart;
      ensures \result == this;
      exsures (DecimalException) intPart < 0;
    */
/**
        @return the Decimal multiplied by the value of the Decimal d
    */
/*@
      modifies intPart, decPart;
      requires d != null ;
//       ensures intPart * PRECISION + decPart ==
//                 \old(intPart * PRECISION + decPart) *
//                 (d.intPart * PRECISION + d.decPart);
      ensures \result == this ;
      exsures (DecimalException) intPart < 0 ;
    */
/**
        @return the oppose value of the Decimal d
    */
/*@
      modifies intPart, decPart;
      requires true;
      ensures intPart == \old((short)-intPart);
      ensures decPart == \old((short)-decPart);
      ensures \result == this;
      //exsures (RuntimeException) false
    */
// Code modified by Marieke Huisman, 24/10/2001

// Method changed from public to private

// Cf. email Hugues Martin, Gemplus

/*@ helper */
/**
        @return the around to the nexte entere value
    */
/*@
      modifies intPart, decPart;
      requires true;
      ensures \result == this;
      ensures decPart == 0;
      ensures intPart == (\old(decPart) >= (PRECISION/2) ?
                              (short)(\old(intPart) + 1) :
                                 (short)(\old(intPart)));
      //exsures (RuntimeException)false
    */
// MH, 29/10/01, commented out wrong code

//         short aux = decPart;

//         if ( aux < 0 ) aux = (short) -aux;

//         while ( aux > 10 ) aux /= (short) 10;

//         if ( aux > 5 ) {

// 	    if ( decPart > 0 ) intPart++;

// 	    else intPart = intPart --;

//         }

//         decPart = (short) 0;

//         return this;

//-------------------------------------------------------------------------

//

//                          comparaison methods

//

//-------------------------------------------------------------------------

/**
        comprae this decimal with the entere in parameter
        @param ref entere
        @return 0  if this == ref,
                1  if this > ref,
               -1  if this < ref
    */
/*@
      //modifies     othing
      requires 0 <= ref && ref <= MAX_DECIMAL_NUMBER;
      ensures \result == (intPart == ref ? ((decPart == 0) ? 0 : 1)
                                         : ((intPart < ref) ? -1 : 1));
      //exsures (RuntimeException)false
    */
/**
       Test if the Decimal is equal to 0
    */
/*@
      //modifies     othing
      requires true;
      ensures \result == (intPart == 0 && decPart == 0);
      //exsures (RuntimeException)false
    */
/**
       Test if the Decimal is superior to 0
    */
/*@
      //modifies     othing
      requires true;
      ensures \result;
      //exsures (RuntimeException)false
    */
/**
       Test if the Decimal is inferior to 0
    */
/*@
      //modifies     othing
      requires true;
      ensures \result == false;
      //exsures (RuntimeException)false
    */
//        return (compareTo((short) 0) <= (short) 0 );

/**
       Test if the Decimal is great or equal than the Decimal d
    */
/*@
      //modifies     othing
      requires d != null;
      ensures \result == ((intPart * PRECISION + decPart >
                           d.intPart * PRECISION + d.decPart) ||
                          (intPart * PRECISION + decPart ==
                           d.intPart * PRECISION + d.decPart));
      //exsures (RuntimeException)false
    */
//             if      ((decPart > d.getDecPart())||(decPart > d.getDecPart()))   resu = true;

/**
       Test if the Decimal is small or equal than the Decimal d
    */
/*@
      //modifies     othing
      requires d != null;
//       ensures \result == (intPart * PRECISION + decPart <=
//                           d.intPart * PRECISION + d.decPart);
      //exsures (RuntimeException)false
    */
/**
        Test if the Decimal is great than the Decimal d
    */
/*@
      //modifies     othing
      requires d != null;
//       ensures \result == (intPart * PRECISION + decPart >
//                           d.intPart * PRECISION + d.decPart);
      //exsures (RuntimeException)false
    */
/**
        Test if the Decimal is small than the Decimal d
    */
/*@
      //modifies     othing
      requires d != null;
//       ensures \result == (d.intPart * PRECISION + d.decPart >
//                           intPart * PRECISION + decPart);
      //exsures (RuntimeException)false
    */
/**
        Test if the Decimal is equal than the Decimal d
    */
/*@
      //modifies     othing
      requires d != null;
      ensures \result == (intPart == d.intPart &&
                          decPart == d.decPart);
      //exsures (RuntimeException)false
    */
//-------------------------------------------------------------------------

//

//                            accesor methods

//

//-------------------------------------------------------------------------

/**
       Set the decimal value
    */
/*@
      requires true;
      ensures intPart == v ;
      ensures decPart == (short) 0 ;
      ensures \result == this;
      exsures (DecimalException) v < 0;
    */
// MH, 29/10/01, commented out wrong code

// 	intPart = v;

// 	if(intPart < 0)

// 	    decimal_exception.throwIt((byte)0x01 /*decimal_exception.DECIMAL_OVERFLOW*/);

// 	decPart = (short) 0;

// 	return this;

/**
        Set two short part to a decimal value
    */
/*@
      requires true;
      ensures intPart == i && decPart == d ;
      ensures \result == this;
      exsures (DecimalException) i < 0 || d < 0 || d >= PRECISION ||
                                 (i == MAX_DECIMAL_NUMBER && d != 0);
    */
// NCC, 21/10/01, commented out wrong code

// 	intPart = i;

// 	decPart = d;

// 	if(intPart < 0)

// 	decimal_exception.throwIt((byte)0x01 /*decimal_exception.DECIMAL_OVERFLOW*/);

// 	return this;

/**
       Set a decimal value to a decimal value
    */
/*@
      requires d != null ;
      ensures intPart == d.intPart ;
      ensures decPart == d.decPart ;
      ensures \result == this ;
      exsures (DecimalException) false ;
    */
//code added by Nestor CATANO 12/10/01 to compile

//Purse and PurseApplet classes

/**
       Acess to the entere part
    */
/*@
      //modifies     othing
      requires true;
      ensures \result == intPart;
      //exsures (RuntimeException)false
    */
/**
       Acess to the decimal part
    */
/*@
      //modifies     othing;
      requires true ;
      ensures \result == decPart;
      //exsures (RuntimeException)false
    */
/**
     *  return the entere value next the Decimal
    */
/*@
      modifies intPart, decPart;
      requires true;
      ensures intPart == \old(intPart) && decPart == \old(decPart);
      ensures \result == (decPart >= PRECISION/2 ?
                          intPart + 1:
                          intPart);
      //exsures (RuntimeException)false
    */
/**
     * Put the Decimal value in the table bArray in two conscutive short
     * @param bArray destinantion table
     * @param off loaction in the table
     * @return off + 4
    */
/*@
      modifies bArray[off], bArray[off+1], bArray[off+2], bArray[off+3];
      requires bArray != null ;
      requires off >= 0;
      requires off + 3 < bArray.length;
      ensures \result == off+4 ;
      exsures (ArrayIndexOutOfBoundsException) false;
    */
// Code modified by Nestor CATANO 21/05/2001

// inclusion of throws clause

//-----------------------------------------------------------------------

//

//          save method and value restoration

//

//-----------------------------------------------------------------------

/** save the value of Decimal in the stack */
/*@
      modifies intPart_, decPart_, depth;
      requires true;
      ensures (depth < MAX_DEPTH) ==> (intPart_ == intPart &&
                                       decPart_ == decPart &&
                                       depth == (byte) (\old(depth) + 1));
      //exsures (RuntimeException)false
    */
// MH, 29/10/01, code added

/** restore the value of the Decimal */
/*@
      modifies intPart, decPart, depth;
      requires true;
      ensures (depth > 0) ==> (intPart == intPart_ &&
                               decPart == decPart_ &&
                               depth == (byte)(\old(depth) - 1));
      //exsures (RuntimeException)false
    */
//-------------------------------------------------------------------------

//

//                            private methods

//

//-------------------------------------------------------------------------

/**
     * add the entere part e and the decimal part f to a Decimal
     */
/*@
      modifies intPart, decPart ;
      requires true ;
//       ensures intPart * PRECISION + decPart ==
//                \old(intPart * PRECISION + decPart) + (e * PRECISION + f);
      //exsures (RuntimeException)false;
    */
//@ nowarn;

/**
     * Multiplication of the Decimal by a entere part e and a decimal part f
     */
/*@
      modifies intPart, decPart;
      requires true ;
//       ensures intPart * PRECISION + decPart ==
//               \old(intPart * PRECISION + decPart) * (e * PRECISION + f);
      // exsures (RuntimeException)false;
    */
//a * b = a * (int(b) + frac(b)) = a * int(b) + a* frac(b)

//@ assume aux != 0;

//@ nowarn;

//@ assert false;

//@ assert true;

//@ ghost int i = 0; // No errors

/*
 * This file is part of the OpenJML project.
 * Author: David R. Cok
 */
// Error to provoke a message

//@ ghost int i = true; // Error to provoke a message

//@ ghost int i = ; // Parse error to provoke a message

//-K1@ requires x; // Type-check error when enabled

//+K2@ requires x; // Type-check error when enabled

//+K2-K2@ requires x; // Type-check error when enabled

//-K1-K2@ requires x; // Type-check error when enabled

//+K1+K3@ requires x; // Type-check error when enabled

// Comment should be ignored

//-K1 @ requires x;

//@ ghost int i = 0; // No errors

//@ ghost int i = 0; // No errors

//@ requires z ; // BAD

//@ assert args.length != 2;

// The original problem was that spec_public fields were included

// in rewritten code in places where Java private variables were

// not allowed.

/*@ spec_public */
/*@ spec_public */
/*@ requires length < 10;
	  @ requires !contains(value);
	  @ ensures length == \old(length) + 1;
	  @*/
/*@ requires index < length;
	  @ ensures \result == values[index];
	  @*/
/*@ pure */
/*@
	  @ requires index1 < length;
	  @ requires index2 < length;
	  @ ensures values[index1] == \old(values[index2]);
	  @ ensures values[index2] == \old(values[index1]);
	  @*/
/*@
	  @ requires contains(value);
	  @ ensures !contains(value);
	  @ ensures \old(values)[\result] == value;
	  @ ensures \result == \old(find(value));
	  @ ensures length == \old(length) - 1;
	  @*/
/*@
	  @ ensures \result >= 0;
	  @ ensures \result <= length;
	  @ ensures contains(value) ==> value == values[\result];
	  @ ensures !contains(value) ==> \result == length;
	  @*/
/*@
	  @ ensures \result == (\exists int i; 0 <= i && i < length; value == values[i]);
	  @*/
// index2==2 is too big

// Code is buggy

_by_default

//@ public invariant x == y;

//@ also public normal_behavior

//@   ensures \result == (x == y);

//@ pure

//@ assert res;


//@ public invariant xxxx != null;

//@ also public normal_behavior

//@ ensures \result == (xxxx != null);

//@ pure

//@ public normal_behavior

//@ pure

//@ public normal_behavior

//@ pure

_by_default

//@ public invariant x == y;

//@ also public normal_behavior

//@   ensures \result == (x == y);

//@ pure

//@ assert res;


//@ public invariant xxxx != null;

//@ also public normal_behavior

//@ ensures \result == (xxxx != null);

//@ pure

//@ public normal_behavior

//@ pure

//@ public normal_behavior

//@ pure

//@ invariant contents != null;

//@ invariant 0 <= n;

//@ invariant n <= contents.length;

//@ requires input != null;

//@ requires b != null;

//@ ensures \result >= 0;

/*@ pure @*/
//@ loop_invariant i>=0 && i<=n;

//@ loop_invariant count >= 0;

//@ assert new_contents.length == 2*n+1 ; // this should not fail?

//@ assert n >= 0;

//@ assert 2*n+1 > n;

//@ assert  n < new_contents.length;

//@ requires b != null;

//@ requires src != null;

//@ requires srcOff >=0;

//@ requires dest != null;

//@ requires destOff >=0;

//@ requires length >=0;

//@ requires srcOff + length <= src.length;

//@ requires destOff + length <= dest.length;

//@ assignable dest[*];

/*@ loop_invariant i>=0 && i<=length; @*/
//@ invariant contents != null;

//@ invariant 0 <= n;

//@ invariant n <= contents.length;

//@ requires input != null;

//@ requires b != null;

//@ ensures \result >= 0;

/*@ pure @*/
//@ loop_invariant i>=0 && i<=n;

//@ loop_invariant count >= 0;

//@ assert new_contents.length == 2*n+1 ; // this should not fail?

//@ assert n >= 0;

//@ assert 2*n+1 > n;

//@ assert  n < new_contents.length;

//@ requires b != null;

//@ requires src != null;

//@ requires srcOff >=0;

//@ requires dest != null;

//@ requires destOff >=0;

//@ requires length >=0;

//@ requires srcOff + length <= src.length;

//@ requires destOff + length <= dest.length;

//@ assignable dest[*];

/*@ loop_invariant i>=0 && i<=length; @*/
/*@ code_bigint_math */
//@ invariant contents != null;

//@ invariant 0 <= n;

//@ invariant n <= contents.length;

//@ requires input != null;

//@ requires b != null;

//@ loop_invariant 0 <= i && i <= n && n >= 0 && n <= contents.length; // added by DRC

//@ loop_invariant i>=0 && i<=n && n >= 0 && n <= contents.length; // DRC modified

//@ ensures \result >= 0;

/*@ pure @*/
//@ loop_invariant i>=0 && i<=n;

//@ loop_invariant count >= 0;

//@ modifies n, contents, contents[*];  // added by DRC

//@ requires b != null;

//@ modifies n,contents; // DRC added

//@ requires src != null;

//@ requires srcOff >=0;

//@ requires dest != null;

//@ requires destOff >=0;

//@ requires length >=0;

//@ requires srcOff + length <= src.length;

//@ requires destOff + length <= dest.length;

//@ assignable dest[*];

/*@ loop_invariant i>=0 && i<=length; @*/
/*@ code_bigint_math */
//@ invariant contents != null;

//@ invariant 0 <= n;

//@ invariant n <= contents.length;

//@ requires input != null;

//@ requires b != null;

//@ loop_invariant 0 <= i && i <= n && n >= 0 && n <= contents.length; // added by DRC

//@ loop_invariant i>=0 && i<=n && n >= 0 && n <= contents.length; // DRC modified

//@ ensures \result >= 0;

/*@ pure @*/
//@ loop_invariant i>=0 && i<=n;

//@ loop_invariant count >= 0;

//@ modifies n, contents, contents[*];  // added by DRC

//@ requires b != null;

//@ modifies n,contents; // DRC added

//@ requires src != null;

//@ requires srcOff >=0;

//@ requires dest != null;

//@ requires destOff >=0;

//@ requires length >=0;

//@ requires srcOff + length <= src.length;

//@ requires destOff + length <= dest.length;

//@ assignable dest[*];

/*@ loop_invariant i>=0 && i<=length; @*/
//@ requires operator == '+' || operator == '*' || operator == '-' || operator == '/' || operator == '%' || operator == '&' || operator == '|' || operator == '^';

//@{|

//@ requires operator == '+';

//@ requires num1 + num2 <= Integer.MAX_VALUE;

//@ requires num1 + num2 >= Integer.MIN_VALUE;

//@ ensures \result == num1 + num2;

//@ also

//@ requires operator == '*';

//@ requires num1 * num2 <= Integer.MAX_VALUE;

//@ requires num1 * num2 >= Integer.MIN_VALUE;

//@ ensures \result == num1 * num2;

//@ also

//@ requires operator == '-';

//@ requires num1 - num2 <= Integer.MAX_VALUE;

//@ requires num1 - num2 >= Integer.MIN_VALUE;

//@ ensures \result == num1 - num2;

//@ also

//@ requires operator == '/';

//@ requires num2 != 0;

//@ requires num1 / num2 <= Integer.MAX_VALUE;

//@ requires num1 / num2 >= Integer.MIN_VALUE;

//@ ensures \result == (num1 / num2);

//@ also

//@ requires operator == '%';

//@ requires num2 != 0;

//@ requires num1 % num2 <= Integer.MAX_VALUE;

//@ requires num1 % num2 >= Integer.MIN_VALUE;

//@ ensures \result == (num1 % num2);

//@ also

//@ requires operator == '&';

//@ ensures \result == (num1 & num2);

//@ also

//@ requires operator == '|';

//@ ensures \result == (num1 | num2);

//@ also

//@ requires operator == '^';

//@ ensures \result == (num1 ^ num2);

//@ |}

//@ also

//@ requires operator != '+' && operator != '-' && operator != '*' && operator != '/' && operator != '%' && operator != '&' && operator != '^' && operator != '|';

//@ ensures \result == -1;

//@ requires operator == '+' || operator == '*' || operator == '-' || operator == '/' || operator == '%' || operator == '&' || operator == '|' || operator == '^';

//@{|

//@ requires operator == '+';

//@ requires num1 + num2 <= Integer.MAX_VALUE;

//@ requires num1 + num2 >= Integer.MIN_VALUE;

//@ ensures \result == num1 + num2;

//@ also

//@ requires operator == '*';

//@ requires num1 * num2 <= Integer.MAX_VALUE;

//@ requires num1 * num2 >= Integer.MIN_VALUE;

//@ ensures \result == num1 * num2;

//@ also

//@ requires operator == '-';

//@ requires num1 - num2 <= Integer.MAX_VALUE;

//@ requires num1 - num2 >= Integer.MIN_VALUE;

//@ ensures \result == num1 - num2;

//@ also

//@ requires operator == '/';

//@ requires num2 != 0;

//@ requires num1 / num2 <= Integer.MAX_VALUE;

//@ requires num1 / num2 >= Integer.MIN_VALUE;

//@ ensures \result == (num1 / num2);

//@ also

//@ requires operator == '%';

//@ requires num2 != 0;

//@ requires num1 % num2 <= Integer.MAX_VALUE;

//@ requires num1 % num2 >= Integer.MIN_VALUE;

//@ ensures \result == (num1 % num2);

//@ also

//@ requires operator == '&';

//@ ensures \result == (num1 & num2);

//@ also

//@ requires operator == '|';

//@ ensures \result == (num1 | num2);

//@ also

//@ requires operator == '^';

//@ ensures \result == (num1 ^ num2);

//@ |}

//@ also

//@ requires operator != '+' && operator != '-' && operator != '*' && operator != '/' && operator != '%' ;

//@ ensures \result == -1;

//@ requires operator == '+' || operator == '*' || operator == '-' || operator == '/' || operator == '%' || operator == '&' || operator == '|' || operator == '^';

//@{|

//@ requires operator == '+';

//@ requires num1 + num2 <= Integer.MAX_VALUE;

//@ requires num1 + num2 >= Integer.MIN_VALUE;

//@ ensures \result == num1 + num2;

//@ also

//@ requires operator == '*';

//@ requires num1 * num2 <= Integer.MAX_VALUE;

//@ requires num1 * num2 >= Integer.MIN_VALUE;

//@ ensures \result == num1 * num2;

//@ also

//@ requires operator == '-';

//@ requires num1 - num2 <= Integer.MAX_VALUE;

//@ requires num1 - num2 >= Integer.MIN_VALUE;

//@ ensures \result == num1 - num2;

//@ also

//@ requires operator == '/';

//@ requires num2 != 0;

//@ requires num1 / num2 <= Integer.MAX_VALUE;

//@ requires num1 / num2 >= Integer.MIN_VALUE;

//@ ensures \result == (num1 / num2);

//@ also

//@ requires operator == '%';

//@ requires num2 != 0;

//@ requires num1 % num2 <= Integer.MAX_VALUE;

//@ requires num1 % num2 >= Integer.MIN_VALUE;

//@ ensures \result == (num1 % num2);

//@ also

//@ requires operator == '&';

//@ ensures \result == (num1 & num2);

//@ also

//@ requires operator == '|';

//@ ensures \result == (num1 | num2);

//@ also

//@ requires operator == '^';

//@ ensures \result == (num1 ^ num2);

//@ |}

//@ also

//@ requires operator != '+' && operator != '-' && operator != '*' && operator != '/' && operator != '%' && operator != '&' && operator != '^' && operator != '|';

//@ ensures \result == -1;

//@ requires operator == '+' || operator == '*' || operator == '-' || operator == '/' || operator == '%' || operator == '&' || operator == '|' || operator == '^';

//@{|

//@ requires operator == '+';

//@ requires num1 + num2 <= Integer.MAX_VALUE;

//@ requires num1 + num2 >= Integer.MIN_VALUE;

//@ ensures \result == num1 + num2;

//@ also

//@ requires operator == '*';

//@ requires num1 * num2 <= Integer.MAX_VALUE;

//@ requires num1 * num2 >= Integer.MIN_VALUE;

//@ ensures \result == num1 * num2;

//@ also

//@ requires operator == '-';

//@ requires num1 - num2 <= Integer.MAX_VALUE;

//@ requires num1 - num2 >= Integer.MIN_VALUE;

//@ ensures \result == num1 - num2;

//@ also

//@ requires operator == '/';

//@ requires num2 != 0;

//@ requires num1 / num2 <= Integer.MAX_VALUE;

//@ requires num1 / num2 >= Integer.MIN_VALUE;

//@ ensures \result == (num1 / num2);

//@ also

//@ requires operator == '%';

//@ requires num2 != 0;

//@ requires num1 % num2 <= Integer.MAX_VALUE;

//@ requires num1 % num2 >= Integer.MIN_VALUE;

//@ ensures \result == (num1 % num2);

//@ also

//@ requires operator == '&';

//@ ensures \result == (num1 & num2);

//@ also

//@ requires operator == '|';

//@ ensures \result == (num1 | num2);

//@ also

//@ requires operator == '^';

//@ ensures \result == (num1 ^ num2);

//@ |}

//@ also

//@ requires operator != '+' && operator != '-' && operator != '*' && operator != '/' && operator != '%' ;

//@ ensures \result == -1;

/*@ spec_public@*/
//@ public normal_behavior

//@ assignable reverse;

//@ ensures \result <==> reverse.equals(original);

//@ ghost int i_counter;

//@ set i_counter = 0;

//@ maintaining i >= -1 && i < original.length();

//@ maintaining \forall int k; 0<=k & k<i_counter; reverse.charAt(k) == original.charAt(length-1-k);

//@ decreases i;

//@ maintaining reverse != null && reverse instanceof String && i_counter == reverse.length();

//@ maintaining i_counter + i + 1 == length;

//@ assert \forall int k; 0<=k & k<i_counter; reverse.charAt(k) == original.charAt(length-1-k);

//@ assert reverse.length() == i_counter;

//@ assert reverse.length() == i_counter+1;

//@ assert reverse.charAt(i_counter) == original.charAt(length-1-i_counter);

//@ assert \forall int k; 0<=k & k<=i_counter; reverse.charAt(k) == original.charAt(length-1-k);

//@ set i_counter = i_counter + 1;

//@ assert i_counter == length;

//@ assignable reverse;

//@ ensures \result <==> reverse.equals(original);

//@ ghost int i_counter;

//@ set i_counter = 0;

//@ maintaining i >= -1 && i < original.length();

//@ decreases i;

//@ maintaining i_counter + i + 1 == length;

//@ set i_counter = i_counter + 1;

//@ assert i_counter == length;

//@ public normal_behavior

//@ assignable reverse;

//@ ensures \result <==> reverse.equals(original);

//@ ghost int i_counter;

//@ set i_counter = 0;

//@ maintaining i >= -1 && i < original.length();

//@ decreases i;

//@ maintaining i_counter + i + 1 == length;

//@ assume reverse instanceof String;

//@ set i_counter = i_counter + 1;

//@ assert i_counter == length;

/*@ spec_public@*/
//@ public normal_behavior

//@ assignable reverse;

//@ ensures \result <==> reverse.equals(original);

//@ ghost int i_counter;

//@ set i_counter = 0;

//@ maintaining i >= -1 && i < original.length();

//@ maintaining \forall int k; 0<=k & k<i_counter; reverse.charAt(k) == original.charAt(length-1-k);

//@ decreases i;

//@ maintaining reverse != null && reverse instanceof String && i_counter == reverse.length();

//@ maintaining i_counter + i + 1 == length;

//@ assert \forall int k; 0<=k & k<i_counter; reverse.charAt(k) == original.charAt(length-1-k);

//@ assert reverse.length() == i_counter;

//@ assert reverse.length() == i_counter+1;

//@ assert reverse.charAt(i_counter) == original.charAt(length-1-i_counter);

//@ assert \forall int k; 0<=k & k<=i_counter; reverse.charAt(k) == original.charAt(length-1-k);

//@ set i_counter = i_counter + 1;

//@ assert i_counter == length;

//@ assignable reverse;

//@ ensures \result <==> reverse.equals(original);

//@ ghost int i_counter;

//@ set i_counter = 0;

//@ maintaining i >= -1 && i < original.length();

//@ decreases i;

//@ maintaining i_counter + i + 1 == length;

//@ set i_counter = i_counter + 1;

//@ assert i_counter == length;

//@ public normal_behavior

//@ assignable reverse;

//@ ensures \result <==> reverse.equals(original);

//@ ghost int i_counter;

//@ set i_counter = 0;

//@ maintaining i >= -1 && i < original.length();

//@ decreases i;

//@ maintaining i_counter + i + 1 == length;

//@ assume reverse instanceof String;

//@ set i_counter = i_counter + 1;

//@ assert i_counter == length;

//@ public normal_behavior

//@ requires d != 0;

//@ pure function

/*@ spec_public nullable @*/
//@ requires 1 <= n && n < Integer.MAX_VALUE;

//@ assignable primeArray;

//@ ensures primeArray.length == n;

//@ ensures (\forall int i, j; 0 <= i && i < primeArray.length && 2 <= j && j <= primeArray[i]/2; !div(primeArray[i],j));

//@ ensures (\forall int i,j; 0 <= i && i < primeArray.length && 0 <= j && j < primeArray.length && i != j; primeArray[i] != primeArray[j]);

//@ assert num == 3;

//@ assert primeArray[0] == 2;

//@ assert num != primeArray[0];

//@ ghost int maxnumber = Integer.MAX_VALUE;

//@ ghost int count_counter = 2;

//@ maintaining (\forall int i, k; 0 <= i && i < count-1 && 2 <= k && k <= primeArray[i]/2; !div(primeArray[i],k));

//@ maintaining (\forall int i, k; 0 <= i && i < count-1 && 0 <= k && k < count-1 && i != k; primeArray[i] != primeArray[k]);

//@ maintaining (\forall int i; 0 <= i && i < count-1; primeArray[i] < num); // Added this line to Amirfarhad's submission

//@ maintaining num >= 3;

//@ maintaining count >= 2 && count <= n + 1;

//@ maintaining count_counter == count;

//@ loop_invariant status == 1;

//@ decreases maxnumber - num;

//@ maintaining j> 1 && j <= num/2 + 1;

//@ maintaining status == 1;

//@ maintaining (\forall int k; 0 <= k && k < count - 1; num != primeArray[k]);

//@ maintaining (\forall int k; 2 <= k && k < j; !div(num,k));

//@ decreases num - j;

//@ assert div(num,j);

//@ assert !div(num,j);

//@ assert status != 0;

//@ assert (\forall int k; 0 <= k && k < count - 1; num != primeArray[k]);

//@ assert (\forall int i; i >= 2 && i <= num/2; !div(num,i));

//@ assert primeArray[count -1] == num;

//@ set count_counter = count_counter + 1;

//@ assume num < Integer.MAX_VALUE;

//@ public normal_behavior

//@ requires d != 0;

//@ pure function

/*@ spec_public nullable @*/
//@ requires 1 <= n && n < Integer.MAX_VALUE;

//@ assignable primeArray;

//@ ensures primeArray.length == n;

//@ ensures (\forall int i, j; 0 <= i && i < primeArray.length && 2 <= j && j <= primeArray[i]/2; !div(primeArray[i],j));

//@ ensures (\forall int i,j; 0 <= i && i < primeArray.length && 0 <= j && j < primeArray.length && i != j; primeArray[i] != primeArray[j]);

//@ assert num == 3;

//@ assert primeArray[0] == 2;

//@ assert num != primeArray[0];

//@ ghost int maxnumber = Integer.MAX_VALUE;

//@ ghost int count_counter = 2;

//@ maintaining (\forall int i, k; 0 <= i && i < count-1 && 2 <= k && k <= primeArray[i]/2; !div(primeArray[i],k));

//@ maintaining (\forall int i, k; 0 <= i && i < count-1 && 0 <= k && k < count-1 && i != k; primeArray[i] != primeArray[k]);

//@ maintaining (\forall int i; 0 <= i && i < count-1; primeArray[i] < num); // Added this line to Amirfarhad's submission

//@ maintaining num >= 3;

//@ maintaining count >= 2 && count <= n + 1;

//@ maintaining count_counter == count;

//@ loop_invariant status == 1;

//@ decreases maxnumber - num;

//@ maintaining j> 1 && j <= num/2 + 1;

//@ maintaining status == 1;

//@ maintaining (\forall int k; 0 <= k && k < count - 1; num != primeArray[k]);

//@ maintaining (\forall int k; 2 <= k && k < j; !div(num,k));

//@ decreases num - j;

//@ assert div(num,j);

//@ assert !div(num,j);

//@ assert status != 0;

//@ assert (\forall int k; 0 <= k && k < count - 1; num != primeArray[k]);

//@ assert (\forall int i; i >= 2 && i <= num/2; !div(num,i));

//@ assert primeArray[count -1] == num;

//@ set count_counter = count_counter + 1;

//@ assume num < Integer.MAX_VALUE;

//@ public normal_behavior

//@ requires range > 0;

//@ requires repeat >= 0;

//@ ensures (\forall int k; 0 <= k && k < \result.size() ; \result.get(k) >= 0 && \result.get(k) < range);

//@ ensures repeat == \result.size();

//@ decreases repeat - counter;

//@ maintaining (\lbl RS randomNumbers.size()) == (\lbl CN counter)-1;

//@ maintaining randomNumbers.size() <= repeat;

//@ maintaining 0 <= selected && selected < range;

//@ maintaining (\forall int i; 0 <= i && i < randomNumbers.size(); 0 <= randomNumbers.get(i) && randomNumbers.get(i) <range);

//@ assert randomNumbers.get(randomNumbers.size()-1) == selected;

//@ assert 0 <= randomNumbers.get(randomNumbers.size()-1);

//@ assert randomNumbers.get(randomNumbers.size()-1) < range;

//@ assert randomNumbers.size() == repeat && counter-1 == repeat;

//@ public normal_behavior

//@ requires range > 0;

//@ requires repeat >= 0;

//@ ensures (\forall int k; 0 <= k && k < \result.size() ; \result.get(k) >= 0 && \result.get(k) < range);

//@ ensures repeat == \result.size();

//@ decreases repeat - counter;

//@ maintaining randomNumbers.size() == counter-1;

//@ maintaining randomNumbers.size() <= repeat;

//@ maintaining 0 <= selected && selected < range;

//@ maintaining (\forall int i; 0 <= i && i < randomNumbers.size(); 0 <= randomNumbers.get(i) && randomNumbers.get(i) <range);

//@ assert randomNumbers.get(randomNumbers.size()-1) == selected;

//@ assert 0 <= randomNumbers.get(randomNumbers.size()-1);

//@ assert randomNumbers.get(randomNumbers.size()-1) < range;

//@ assert randomNumbers.size() == repeat && counter-1 == repeat;

//@ public normal_behavior

//@ requires range > 0;

//@ requires repeat >= 0;

//@ ensures (\forall int k; 0 <= k && k < \result.size() ; \result.get(k) >= 0 && \result.get(k) < range);

//@ ensures repeat == \result.size();

//@ decreases repeat - counter;

//@ maintaining (\lbl RS randomNumbers.size()) == (\lbl CN counter)-1;

//@ maintaining randomNumbers.size() <= repeat;

//@ maintaining 0 <= selected && selected < range;

//@ maintaining (\forall int i; 0 <= i && i < randomNumbers.size(); 0 <= randomNumbers.get(i) && randomNumbers.get(i) <range);

//@ assert randomNumbers.get(randomNumbers.size()-1) == selected;

//@ assert 0 <= randomNumbers.get(randomNumbers.size()-1);

//@ assert randomNumbers.get(randomNumbers.size()-1) < range;

//@ assert randomNumbers.size() == repeat && counter-1 == repeat;

//@ public normal_behavior

//@ requires range > 0;

//@ requires repeat >= 0;

//@ ensures (\forall int k; 0 <= k && k < \result.size() ; \result.get(k) >= 0 && \result.get(k) < range);

//@ ensures repeat == \result.size();

//@ decreases repeat - counter;

//@ maintaining randomNumbers.size() == counter-1;

//@ maintaining randomNumbers.size() <= repeat;

//@ maintaining 0 <= selected && selected < range;

//@ maintaining (\forall int i; 0 <= i && i < randomNumbers.size(); 0 <= randomNumbers.get(i) && randomNumbers.get(i) <range);

//@ assert randomNumbers.get(randomNumbers.size()-1) == selected;

//@ assert 0 <= randomNumbers.get(randomNumbers.size()-1);

//@ assert randomNumbers.get(randomNumbers.size()-1) < range;

//@ assert randomNumbers.size() == repeat && counter-1 == repeat;

//@ requires x(i);

//@ requires pos(i);

//@ ensures \result == i > 10;

//@ pure

//@ ensures \result == i > 0;

//@ pure

//@ requires x(i);

//@ requires pos(i);

//@ ensures \result == i > 10;

//@ pure

//@ ensures \result == i > 0;

//@ pure

//@ assert i >= 0; // FAILS

//@ assert i >= 0; // OK

//@ assume i >= 0;

//@ assert i >= 0; // OK

//@ check  i >= 0; // FAILS

//@ assert i >= 0; // FAILS

//@ assert i >= 0; // FAILS

//@ assert i >= 0; // OK

//@ assume i >= 0;

//@ assert i >= 0; // OK

//@ check  i >= 0; // FAILS

//@ assert i >= 0; // FAILS

//@ public normal_behavior

//@   ensures \fresh(x);

//@ pure

//@ public normal_behavior

//@   ensures \fresh(x);

//@ pure

//@ public normal_behavior

//@   ensures \fresh(x);

//@ pure

//@ public normal_behavior

//@   ensures \fresh(x);

//@ pure

//@ public normal_behavior

//@   ensures true;

//@ public normal_behavior

//@   ensures true;

/*@
    static public datatype N {}
     */
//@ datatype X {};

/*@
    model
    public void mm(NN<Integer> x) {
        NN<Integer> xx = NN.<Integer>Empty();
        xx = NN.<Integer>Cons(1,xx);
        boolean b = xx.isEmpty();
        b = x.isCons();
        Integer i = xx.head();
        xx = xx.tail();
    }
    */
/*@
datatype NN<T> {
    Empty(),
    Cons(T head, NN<T> tail)
    ;

    int length() {
       return match (this) {
         case Empty() -> 0;
         case Cons(_,t) -> 1+ t.length();
       };
     }

    NN<T> of(T t) { return Cons(t, Empty()); }

}
 */
/*@
    static public datatype N {}
     */
//@ datatype X {};

/*@
    model
    public void mm(NN<Integer> x) {
        NN<Integer> xx = NN.<Integer>Empty();
        xx = NN.<Integer>Cons(1,xx);
        boolean b = xx.isEmpty();
        b = x.isCons();
        Integer i = xx.head();
        xx = xx.tail();
    }
    */
/*@
datatype NN<T> {
    Empty(),
    Cons(T head, NN<T> tail)
    ;

    int length() {
       return match (this) {
         case Empty() -> 0;
         case Cons(_,t) -> 1+ t.length();
       };
     }

    NN<T> of(T t) { return Cons(t, Empty()); }

}
 */
//@   requires BB;

//@   requires CC;

//@   ensures \result == true;

//@ also

//@   requires DD;

//@   requires EE;

//@   ensures \result == true;

//@ also

//@   requires \else;

//@   ensures \result == false;

//@ pure

//@ requires m();

//@ ensures \result == true;

//@ unreachable;

//@ requires AA;

//@ {|

//@   requires BB;

//@   requires CC;

//@   ensures \result == true;

//@ also

//@   requires DD;

//@   requires EE;

//@   ensures \result == true;

//@ also

//@   requires \else;

//@   ensures \result == false;

//@ |}

//@   requires BB;

//@   requires CC;

//@   ensures \result == true;

//@ also

//@   requires DD;

//@   requires EE;

//@   ensures \result == true;

//@ also

//@   requires \else;

//@   ensures \result == false;

//@ pure

//@ requires m();

//@ ensures \result == true;

//@ unreachable;

//@ requires AA;

//@ {|

//@   requires BB;

//@   requires CC;

//@   ensures \result == true;

//@ also

//@   requires DD;

//@   requires EE;

//@   ensures \result == true;

//@ also

//@   requires \else;

//@   ensures \result == false;

//@ |}

//@ assert EEE.AA instanceof EEE;

//@ assert \type(EEE) <: \type(Enum<EEE>);  // FIXME - needs work

//@ assert EEE.class <: Enum.class;

//@ pure

//@ assert EEE.AA.toString().equals("AA");  // Needs work on strings

//@ pure

//@ assert EEE.AA.name().equals("AA");  // Needs work on strings

//@ pure

//@ assume (\forall EEE ee; ee != null ==> (\exists \bigint i; 0<=i && i<EEE._JMLvalues.length; EEE._JMLvalues[i] == ee)); // FIXME - failig

//@ assume (\forall EEE ee; ee != null ==> (\exists \bigint i; 0<=i && i<ev.length; ev[i] == ee)); // FIXME - failig

//@ show ev, EEE._JMLvalues, ev[0], EEE._JMLvalues[0];

//@ assert (\forall EEE ee; ee != null ==> (\exists \bigint i; 0<=i && i<ev.length; ev[i] == ee)); // FIXME - failig

//@ assert EEE.AA instanceof EEE;

//@ assert \type(EEE) <: \type(Enum<EEE>);  // FIXME - needs work

//@ assert EEE.class <: Enum.class;

//@ pure

//@ assert EEE.AA.toString().equals("AA");  // Needs work on strings

//@ pure

//@ assert EEE.AA.name().equals("AA");  // Needs work on strings

//@ pure

//@ assume (\forall EEE ee; ee != null ==> (\exists \bigint i; 0<=i && i<EEE._JMLvalues.length; EEE._JMLvalues[i] == ee)); // FIXME - failig

//@ assume (\forall EEE ee; ee != null ==> (\exists \bigint i; 0<=i && i<ev.length; ev[i] == ee)); // FIXME - failig

//@ show ev, EEE._JMLvalues, ev[0], EEE._JMLvalues[0];

//@ assert (\forall EEE ee; ee != null ==> (\exists \bigint i; 0<=i && i<ev.length; ev[i] == ee)); // FIXME - failig

//@ spec_public

//@ public final static invariant AA.code == 4;

//@ public final static invariant BB.code == 8;

//@ public final static invariant CC.code == 7;

//@ private normal_behavior

//@   ensures code == c;

//@ pure

//@ show EEE.AA.code, EEE.BB.code;

//@ assert EEE.AA.code == 4;

//@ assert EEE.BB.code == 8;

//@ assert EEE.CC.code == 7;

//@ assert EEE.AA.code == 9; // Expected failure

//@ spec_public

//@ public final static invariant AA.code == 4;

//@ public final static invariant BB.code == 8;

//@ public final static invariant CC.code == 7;

//@ private normal_behavior

//@   ensures code == c;

//@ pure

//@ show EEE.AA.code, EEE.BB.code;

//@ assert EEE.AA.code == 4;

//@ assert EEE.BB.code == 8;

//@ assert EEE.CC.code == 7;

//@ assert EEE.AA.code == 9; // Expected failure

//@ assert EEE.AA == EEE.AA;

//@ assert EEE.AA != EEE.BB;

//@ pure

//@ assert EEE.AA.toString() == EEE.AA.name();

//@ pure

//@ assert EEE.AA.name() == EEE.AA.name();

//@ assert EEE.AA.name() != EEE.BB.name();

//@ assert e == EEE.AA || e == EEE.BB || e == EEE.CC || e == EEE.DD;

//@ unreachable;

//@ pure

//@ assert ev.length == 4 ;

//@ assert EEE.values() == EEE.values();

//@ assert EEE.values() == e.values();

//@ pure

//@ show EEE._JMLvalues, EEE._JMLvalues[0];

//@ assert ev.length == 4 ;

//@ assert ev[0] == EEE.AA;

//@ assert ev[1] == EEE.BB;

//@ assert ev[2] == EEE.CC;

//@ assert ev[3] == EEE.DD;

//@ pure

//@ assume (\forall EEE ee; ee != null ==> (\exists int i; 0<=i && i<ev.length; ev[i] == ee)); // FIXME - failig

//@ assert ev.length == 4 ;

//@ assert b;

//@ pure

//@ assert (\exists int i; 0<=i && i<ev.length; ev[i] == e);  // FIXME - Failinng

//@ pure


//@ assert e != null && s != null;

//@ assert e == EEE.AA || e == EEE.BB || e == EEE.CC || e == EEE.DD;

//@ assert s == null;

//@ pure


//@ assert e != null;

//@ assert ssss != null;

//@ assert e == EEE.AA || e == EEE.BB || e == EEE.CC || e == EEE.DD;

//@ assert ssss == null;

//@ pure

//@ assert ee.ordinal() < EEE.values().length;

//@ ensures !\fresh(\result);

//@ pure

//@ pure

//@ assert \fresh(e); // false

//@ pure

//@ assert !\fresh(e);

//@ assert EEE.AA == EEE.AA;

//@ assert EEE.AA != EEE.BB;

//@ pure

//@ assert EEE.AA.toString() == EEE.AA.name();

//@ pure

//@ assert EEE.AA.name() == EEE.AA.name();

//@ assert EEE.AA.name() != EEE.BB.name();

//@ assert e == EEE.AA || e == EEE.BB || e == EEE.CC || e == EEE.DD;

//@ unreachable;

//@ pure

//@ assert ev.length == 4 ;

//@ assert EEE.values() == EEE.values();

//@ assert EEE.values() == e.values();

//@ pure

//@ show EEE._JMLvalues, EEE._JMLvalues[0];

//@ assert ev.length == 4 ;

//@ assert ev[0] == EEE.AA;

//@ assert ev[1] == EEE.BB;

//@ assert ev[2] == EEE.CC;

//@ assert ev[3] == EEE.DD;

//@ pure

//@ assume (\forall EEE ee; ee != null ==> (\exists int i; 0<=i && i<ev.length; ev[i] == ee)); // FIXME - failig

//@ assert ev.length == 4 ;

//@ assert b;

//@ pure

//@ assert (\exists int i; 0<=i && i<ev.length; ev[i] == e);  // FIXME - Failinng

//@ pure


//@ assert e != null && s != null;

//@ assert e == EEE.AA || e == EEE.BB || e == EEE.CC || e == EEE.DD;

//@ assert s == null;

//@ pure


//@ assert e != null;

//@ assert ssss != null;

//@ assert e == EEE.AA || e == EEE.BB || e == EEE.CC || e == EEE.DD;

//@ assert ssss == null;

//@ pure

//@ assert ee.ordinal() < EEE.values().length;

//@ ensures !\fresh(\result);

//@ pure

//@ pure

//@ assert \fresh(e); // false

//@ pure

//@ assert !\fresh(e);

//@ requires m >= 0 && n>= 0;  // FIXME - fails to prove if m is allowed to be 0

//@ ensures \fresh(\result);

//@ ensures \result.length == m;

//@ ensures \forall int i; 0<=i<m; \result[i] != null && \result[i].length == n;

//@ ensures \forall int e; 0<=e<m; \forall int k; 0 <= k < n; \result[e][k] == e+k;

//@ assume m == 2 && n == 2;

//@ assert a != null;

//@ assert a.length == m;

//@ assert m > 0 ==> a[0] != null;  // FIXME - proof fails if the following are not assumed

//@ assert m > 0 ==> a[0].length == n;

//@ assert \forall int i; 0 <= i < m; a[i] != null && a[i].length == n;

//@ assert \forall int e; 0<=e<m; \forall int k; 0 <= k < m; (e != k ==> a[e] != a[k]);

//@ loop_invariant 0 <= i <= m;

//@ loop_invariant \forall int k; 0<=k<m; a[k] != null && a[k].length == n;

//@ loop_invariant \forall int e; 0<=e<m; \forall int k; 0 <= k < m; (e != k ==> a[e] != a[k]);

//@ loop_invariant \forall int e; 0<=e<i; \forall int k; 0 <= k < n; a[e][k] == e+k;

//@ loop_modifies a[*][*];

//@ loop_decreases m-i;

//@ loop_invariant 0 <= j <= n;

//@ loop_invariant \forall int k; 0<=k<m; a[k] != null && a[k].length == n;

//@ loop_invariant \forall int e; 0<=e<m; \forall int k; 0 <= k < m; (e != k ==> a[e] != a[k]);

//@ loop_invariant \forall int e; 0<=e<i; \forall int k; 0 <= k < n; a[e][k] == e+k;

//@ loop_invariant \forall int k; 0 <= k < j; a[i][k] == i+k;

//@ loop_modifies a[*][*];

//@ loop_decreases n-j;

//@ assert \forall int k; 0 <= k < n; a[i][k] == i+k;

//@ assert \forall int e; 0<=e<m; \forall int k; 0 <= k < n; a[e][k] == e+k;

//@ assume a != null;

//@ assume a.length == 5;

//@ assume a[1] != null && a[2] != null;

//@ assume a[1].length == 6;

//@ assume a[2].length == 7;

//@ assume a[2][3] ==7;

//@ assert a.length == 5; //OK

//@ assert a[1].length == 6; //OK

//@ assert a[2].length == 7; //OK

//@ assert a[2][3] ==7; //OK

//@ assume a != null;

//@ assume a.length == 5;

//@ assume a[1] != null && a[2] != null;

//@ assume a[1].length == 6;

//@ assume a[2].length == 7;

//@ assume a[2][3] ==7;

//@ havoc a[*][*];

//@ assert a.length == 5 && a[1].length == 6 && a[2].length == 7 && a[2][3] ==7;  // FAILS

//@ assume a != null;

//@ assume a.length == 5;

//@ assume a[1] != null && a[2] != null;

//@ assume a[1].length == 6;

//@ assume a[2].length == 7;

//@ assume a[2][3] ==7;

//@ assert a.length == 5; // OK

//@ assert a[1].length == 6; // OK

//@ assert a[2].length == 7; // OK

//@ assert a[2][3] ==7; // OK

//@ assert b[2] == 13; // OK

//@ requires m >= 0 && n>= 0;  // FIXME - fails to prove if m is allowed to be 0

//@ ensures \fresh(\result);

//@ ensures \result.length == m;

//@ ensures \forall int i; 0<=i<m; \result[i] != null && \result[i].length == n;

//@ ensures \forall int e; 0<=e<m; \forall int k; 0 <= k < n; \result[e][k] == e+k;

//@ assume m == 2 && n == 2;

//@ assert a != null;

//@ assert a.length == m;

//@ assert m > 0 ==> a[0] != null;  // FIXME - proof fails if the following are not assumed

//@ assert m > 0 ==> a[0].length == n;

//@ assert \forall int i; 0 <= i < m; a[i] != null && a[i].length == n;

//@ assert \forall int e; 0<=e<m; \forall int k; 0 <= k < m; (e != k ==> a[e] != a[k]);

//@ loop_invariant 0 <= i <= m;

//@ loop_invariant \forall int k; 0<=k<m; a[k] != null && a[k].length == n;

//@ loop_invariant \forall int e; 0<=e<m; \forall int k; 0 <= k < m; (e != k ==> a[e] != a[k]);

//@ loop_invariant \forall int e; 0<=e<i; \forall int k; 0 <= k < n; a[e][k] == e+k;

//@ loop_modifies a[*][*];

//@ loop_decreases m-i;

//@ loop_invariant 0 <= j <= n;

//@ loop_invariant \forall int k; 0<=k<m; a[k] != null && a[k].length == n;

//@ loop_invariant \forall int e; 0<=e<m; \forall int k; 0 <= k < m; (e != k ==> a[e] != a[k]);

//@ loop_invariant \forall int e; 0<=e<i; \forall int k; 0 <= k < n; a[e][k] == e+k;

//@ loop_invariant \forall int k; 0 <= k < j; a[i][k] == i+k;

//@ loop_modifies a[*][*];

//@ loop_decreases n-j;

//@ assert \forall int k; 0 <= k < n; a[i][k] == i+k;

//@ assert \forall int e; 0<=e<m; \forall int k; 0 <= k < n; a[e][k] == e+k;

//@ assume a != null;

//@ assume a.length == 5;

//@ assume a[1] != null && a[2] != null;

//@ assume a[1].length == 6;

//@ assume a[2].length == 7;

//@ assume a[2][3] ==7;

//@ assert a.length == 5; //OK

//@ assert a[1].length == 6; //OK

//@ assert a[2].length == 7; //OK

//@ assert a[2][3] ==7; //OK

//@ assume a != null;

//@ assume a.length == 5;

//@ assume a[1] != null && a[2] != null;

//@ assume a[1].length == 6;

//@ assume a[2].length == 7;

//@ assume a[2][3] ==7;

//@ havoc a[*][*];

//@ assert a.length == 5 && a[1].length == 6 && a[2].length == 7 && a[2][3] ==7;  // FAILS

//@ assume a != null;

//@ assume a.length == 5;

//@ assume a[1] != null && a[2] != null;

//@ assume a[1].length == 6;

//@ assume a[2].length == 7;

//@ assume a[2][3] ==7;

//@ assert a.length == 5; // OK

//@ assert a[1].length == 6; // OK

//@ assert a[2].length == 7; // OK

//@ assert a[2][3] ==7; // OK

//@ assert b[2] == 13; // OK

//@ requires matrix.length > 0;

//@ requires matrix[0].length > 0;

//@ requires (\forall int k; 0 <= k < matrix.length; matrix[k] != null);

//@ requires (\forall int k; 0 <= k < matrix.length; matrix[0].length == matrix[k].length);

//@ ensures (\forall int i, j; 0 <= i < matrix.length && 0 <= j < matrix[0].length; matrix[i][j] == \result[j][i]);

//@ ensures matrix.length == \result[0].length;

//@ ensures matrix[0].length == \result.length;

//@ assert \forall int i; 0 <= i < n; transpose[i] != null && transpose[i].length == m;

//@ assert \forall int e; 0<=e<n; \forall int k; 0 <= k < n; (e != k ==> transpose[e] != transpose[k]);

//@ assert \forall int e; 0<=e<n; (\forall int k; 0 <= k < m; transpose[e] != matrix[k]);

//@ maintaining 0 <= c <= n;

//@ maintaining \forall int i; 0<=i<c; (\forall int j; 0 <= j < m ; transpose[i][j] == matrix[j][i]);

//@ decreases n - c;

//@ maintaining 0 <= d <= m;

//@ maintaining (\forall int j; 0 <= j < d; transpose[c][j] == matrix[j][c]);

//@ decreases m - d;

//@ requires matrix.length > 0;

//@ requires (\forall int k; 0 <= k && k < matrix.length; matrix[k] != null);

//@ requires (\forall int k; 0 <= k && k < matrix.length; matrix[0].length == matrix[k].length);

//@ ensures matrix.length == \result[0].length;

//@ ensures matrix[0].length == \result.length;

//@ ensures (\forall int i, j; 0 <= i < matrix.length && 0 <= j < matrix[0].length; matrix[i][j] == \result[j][i]);

//@ assert n > 0 ==> transpose[0] != null;

//@ assert n > 0 ==> transpose[0].length == n;

//@ assert \forall int i; 0 <= i < n; transpose[i] != null && transpose[i].length == m;

//@ assert \forall int e; 0<=e<n; \forall int k; 0 <= k < n; (e != k ==> transpose[e] != transpose[k]);

//@ maintaining 0 <= d && d <= n;

//@ maintaining (\forall int j, i; 0 <= j < matrix.length && 0 <= i < d; transpose[i][j] == matrix[j][i]);

//@ decreases n - d;

//@ maintaining 0 <= c && c <= m;

//@ maintaining (\forall int j; 0 <= j < c; transpose[d][j] == matrix[j][d]);

//@ decreases m - c;

//@ assume n >= 0;

//@ assume m >= 0;

//@ maintaining 0 <= c && c <= m;

//@ maintaining \forall int i; 0<=i<n; transpose[i] != null && transpose[i].length == m;

//@ loop_modifies transpose[*][*];

//@ decreases m - c;

//@ maintaining 0 <= d && d <= n;

//@ maintaining \forall int i; 0<=i<n; transpose[i] != null && transpose[i].length == m;

//@ loop_modifies transpose[*][*];

//@ decreases n - d;

//@ assert n > 0 ==> m == transpose[0].length;

//@ assert n == transpose.length;

//@ requires matrix.length > 0;

//@ requires matrix[0].length > 0;

//@ requires (\forall int k; 0 <= k < matrix.length; matrix[k] != null);

//@ requires (\forall int k; 0 <= k < matrix.length; matrix[0].length == matrix[k].length);

//@ ensures (\forall int i, j; 0 <= i < matrix.length && 0 <= j < matrix[0].length; matrix[i][j] == \result[j][i]);

//@ ensures matrix.length == \result[0].length;

//@ ensures matrix[0].length == \result.length;

//@ assert \forall int i; 0 <= i < n; transpose[i] != null && transpose[i].length == m;

//@ assert \forall int e; 0<=e<n; \forall int k; 0 <= k < n; (e != k ==> transpose[e] != transpose[k]);

//@ assert \forall int e; 0<=e<n; (\forall int k; 0 <= k < m; transpose[e] != matrix[k]);

//@ maintaining 0 <= c <= n;

//@ maintaining \forall int i; 0<=i<c; (\forall int j; 0 <= j < m ; transpose[i][j] == matrix[j][i]);

//@ decreases n - c;

//@ maintaining 0 <= d <= m;

//@ maintaining (\forall int j; 0 <= j < d; transpose[c][j] == matrix[j][c]);

//@ decreases m - d;

//@ requires matrix.length > 0;

//@ requires (\forall int k; 0 <= k && k < matrix.length; matrix[k] != null);

//@ requires (\forall int k; 0 <= k && k < matrix.length; matrix[0].length == matrix[k].length);

//@ ensures matrix.length == \result[0].length;

//@ ensures matrix[0].length == \result.length;

//@ ensures (\forall int i, j; 0 <= i < matrix.length && 0 <= j < matrix[0].length; matrix[i][j] == \result[j][i]);

//@ assert n > 0 ==> transpose[0] != null;

//@ assert n > 0 ==> transpose[0].length == n;

//@ assert \forall int i; 0 <= i < n; transpose[i] != null && transpose[i].length == m;

//@ assert \forall int e; 0<=e<n; \forall int k; 0 <= k < n; (e != k ==> transpose[e] != transpose[k]);

//@ maintaining 0 <= d && d <= n;

//@ maintaining (\forall int j, i; 0 <= j < matrix.length && 0 <= i < d; transpose[i][j] == matrix[j][i]);

//@ decreases n - d;

//@ maintaining 0 <= c && c <= m;

//@ maintaining (\forall int j; 0 <= j < c; transpose[d][j] == matrix[j][d]);

//@ decreases m - c;

//@ assume n >= 0;

//@ assume m >= 0;

//@ maintaining 0 <= c && c <= m;

//@ maintaining \forall int i; 0<=i<n; transpose[i] != null && transpose[i].length == m;

//@ loop_modifies transpose[*][*];

//@ decreases m - c;

//@ maintaining 0 <= d && d <= n;

//@ maintaining \forall int i; 0<=i<n; transpose[i] != null && transpose[i].length == m;

//@ loop_modifies transpose[*][*];

//@ decreases n - d;

//@ assert n > 0 ==> m == transpose[0].length;

//@ assert n == transpose.length;

//@ requires matrix.length > 0;

//@ requires (\forall int k; 0 <= k && k < matrix.length; matrix[k] != null);

//@ requires (\forall int k; 0 <= k && k < matrix.length; matrix[0].length == matrix[k].length);

//@ ensures (\forall int i, j; i >= 0 && j >= 0 && i < matrix.length && j < matrix[0].length; matrix[i][j] == \result[j][i]);

//@ ensures matrix.length == \result[0].length;

//@ ensures matrix[0].length == \result.length;

//@ assume \forall int i; 0<=i<n; transpose[i] != null && transpose[i].length == m;

//@ assume \forall int i; 0<=i<n; \forall int j; 0<=j<n; i != j ==> transpose[i] != transpose[j];

//@ assert transpose.length == n;

//@ assert (\forall int k; 0 <= k && k < n; transpose[k] != null && transpose[k].length == m);

//@ maintaining (\forall int i, j; i >= 0 && j >= 0 && i < c && j < n ; matrix[i][j] == transpose[j][i]);

//@ maintaining c >= 0 && c <= m;

//@ decreases m - c;

//@ maintaining (\forall int j; 0 <= j && j < d; matrix[c][j] == transpose[j][c]);

//@ maintaining (\forall int k; 0 < k && k < matrix.length; matrix[k].length == n);

//@ maintaining transpose.length == n;

//@ maintaining (\forall int k; 0 < k && k < transpose.length; transpose[k].length == m);

//@ maintaining 0 <= d && d <= n;

//@ decreases n - d;

//@ maintaining d < n ==> (transpose[d].length == m);

//@ maintaining 0 <= c && c < m;

//@ assert d < transpose.length && transpose.length == n;

//@ assert d >= 0;

//@ assert c <  transpose[0].length && transpose[0].length == m;

//@ assert transpose[d][c] == matrix[c][d];

//@ requires matrix.length > 0;

//@ requires (\forall int k; 0 <= k && k < matrix.length; matrix[k] != null);

//@ requires (\forall int k; 0 <= k && k < matrix.length; matrix[0].length == matrix[k].length);

//@ ensures (\forall int i, j; i >= 0 && j >= 0 && i < matrix.length && j < matrix[0].length; matrix[i][j] == \result[j][i]);

//@ ensures matrix.length == \result[0].length;

//@ ensures matrix[0].length == \result.length;

//@ assume \forall int i; 0<=i<n; transpose[i] != null && transpose[i].length == m;

//@ assume \forall int i; 0<=i<n; \forall int j; 0<=j<n; i != j ==> transpose[i] != transpose[j];

//@ assert transpose.length == n;

//@ assert (\forall int k; 0 <= k && k < n; transpose[k] != null && transpose[k].length == m);

//@ maintaining (\forall int i, j; i >= 0 && j >= 0 && i < c && j < n ; matrix[i][j] == transpose[j][i]);

//@ maintaining c >= 0 && c <= m;

//@ decreases m - c;

//@ maintaining (\forall int j; 0 <= j && j < d; matrix[c][j] == transpose[j][c]);

//@ maintaining (\forall int k; 0 < k && k < matrix.length; matrix[k].length == n);

//@ maintaining transpose.length == n;

//@ maintaining (\forall int k; 0 < k && k < transpose.length; transpose[k].length == m);

//@ maintaining 0 <= d && d <= n;

//@ decreases n - d;

//@ maintaining d < n ==> (transpose[d].length == m);

//@ maintaining 0 <= c && c < m;

//@ assert d < transpose.length && transpose.length == n;

//@ assert d >= 0;

//@ assert c <  transpose[0].length && transpose[0].length == m;

//@ assert transpose[d][c] == matrix[c][d];

//@ public normal_behavior

//@   ensures init;

//@ public C();

//@ public normal_behavior

//@   ensures init;

//@ public C();

//@ public normal_behavior

//@   ensures init;

//@ model public A();

//@ assert a.init;

//@ also public normal_behavior

//@   requires true;

//@   ensures false;



//@ abstract public String toString();

//@ public normal_behavior

//@   ensures init;

//@ model public A();

//@ assert a.init;

//@ also public normal_behavior

//@   requires true;

//@   ensures false;



//@ abstract public String toString();

/*@ code_bigint_math */
//@ public invariant x() + y() > 0;

/*@ spec_public */
/*@ spec_public */
//@ requires the_x + the_y > 0;

//@ ensures x() == the_x && y() == the_y;

//@ ensures \result == my_x;

/*@ pure helper @*/
//@ ensures \result == my_y;

/*@ pure helper @*/
//@ ensures \result == x() + y() + the_operand;

/*@ pure @*/
/*@ code_bigint_math */
//@ public invariant x() + y() > 0;

/*@ spec_public */
/*@ spec_public */
//@ requires the_x + the_y > 0;

//@ ensures x() == the_x && y() == the_y;

//@ ensures \result == my_x;

/*@ pure helper @*/
//@ ensures \result == my_y;

/*@ pure helper @*/
//@ ensures \result == x() + y() + the_operand;

/*@ pure @*/
//@ public invariant x() + y() > 0;

/*@ spec_public */
/*@ spec_public */
//@ requires the_x + the_y > 0;

//@ ensures x() == the_x && y() == the_y;

//@ ensures \result == my_x;

/*@ pure @*/
//@ ensures \result == my_y;

/*@ pure @*/
//@ ensures \result == x() + y() + the_operand;

/*@ pure @*/
//@ public invariant x() + y() > 0;

/*@ spec_public */
/*@ spec_public */
//@ requires the_x + the_y > 0;

//@ ensures x() == the_x && y() == the_y;

//@ ensures \result == my_x;

/*@ pure @*/
//@ ensures \result == my_y;

/*@ pure @*/
//@ ensures \result == x() + y() + the_operand;

/*@ pure @*/
//@ requires a != null && a.length == 10;

//@ requires b != null && b.length == 30;

//@ assignable b[*];

//@ assert (\forall int i; i <10 && i <= 20; b[i] == \old(b[i]));

//@ assert (\forall int i; 10<=i && i <20; b[i] == a[i-10]);

//@ requires a != null && a.length == 10;

//@ requires b != null && b.length == 30;

//@ assignable b[*];

//@ assert (\forall int i; i <10 && i <= 20; b[i] == \old(b[i]));

//@ assert (\forall int i; 10<=i && i <20; b[i] == a[i-10]);

//@ requires a != null && a.length == 10;

//@ requires b != null && b.length == 30;

//@ assignable b[*];

//@ assert (\forall int i; i <10 && i <= 20; b[i] == \old(b[i]));

//@ assert (\forall int i; 10<=i && i <20; b[i] == a[i-10]);

//@ requires a != null && a.length == 10;

//@ requires b != null && b.length == 30;

//@ assignable b[*];

//@ assert (\forall int i; i <10 && i <= 20; b[i] == \old(b[i]));

//@ assert (\forall int i; 10<=i && i <20; b[i] == a[i-10]);

//@ requires a != null && a.length == 10;

//@ requires b != null && b.length == 30;

//@ assignable b[*];

//@ assert (\forall int i; i <10 && i <= 20; b[i] == \old(b[i]));

//@ assert (\forall int i; 10<=i && i <20; b[i] == a[i-10]);

//@ requires a != null && a.length == 10;

//@ requires b != null && b.length == 30;

//@ assignable b[*];

//@ assert (\forall int i; i <10 && i <= 20; b[i] == \old(b[i]));

//@ assert (\forall int i; 10<=i && i <20; b[i] == a[i-10]);

//@ requires a != null && a.length == 10;

//@ requires b != null && b.length == 30;

//@ requires \elemtype(\typeof(a)) <: \elemtype(\typeof(b));

//@ assignable b[*];

//@ assert (\forall int i; i <10 && i <= 20; b[i] == \old(b[i]));

//@ assert (\forall int i; 10<=i && i <20; b[i] == a[i-10]);

//@ requires a != null && a.length == 10;

//@ requires b != null && b.length == 30;

//@ assignable b[*];

//@ assert (\forall int i; i <10 && i <= 20; b[i] == \old(b[i]));

//@ assert (\forall int i; 10<=i && i <20; b[i] == a[i-10]);

//@ requires a != null && a.length == 10;

//@ requires b != null && b.length == 30;

//@ assignable b[*];

//@ assert (\forall int i; i <10 && i <= 20; b[i] == \old(b[i]));

//@ assert (\forall int i; 10<=i && i <20; b[i] == a[i-10]);

//@ requires a != null && a.length == 10;

//@ requires b != null && b.length == 30;

//@ assignable b[*];

//@ assert (\forall int i; i <10 && i <= 20; b[i] == \old(b[i]));

//@ assert (\forall int i; 10<=i && i <20; b[i] == a[i-10]);

//@ requires a != null && a.length == 10;

//@ requires b != null && b.length == 30;

//@ assignable b[*];

//@ assert (\forall int i; i <10 && i <= 20; b[i] == \old(b[i]));

//@ assert (\forall int i; 10<=i && i <20; b[i] == a[i-10]);

//@ requires a != null && a.length == 10;

//@ requires b != null && b.length == 30;

//@ assignable b[*];

//@ assert (\forall int i; i <10 && i <= 20; b[i] == \old(b[i]));

//@ assert (\forall int i; 10<=i && i <20; b[i] == a[i-10]);

//@ requires a != null && a.length == 10;

//@ requires b != null && b.length == 30;

//@ assignable b[*];

//@ assert (\forall int i; i <10 && i <= 20; b[i] == \old(b[i]));

//@ assert (\forall int i; 10<=i && i <20; b[i] == a[i-10]);

//@ requires a != null && a.length == 10;

//@ requires b != null && b.length == 30;

//@ requires \elemtype(\typeof(a)) <: \elemtype(\typeof(b));

//@ assignable b[*];

//@ assert (\forall int i; i <10 && i <= 20; b[i] == \old(b[i]));

//@ assert (\forall int i; 10<=i && i <20; b[i] == a[i-10]);

//@ requires pp.position.x >= 0 && pp.position.x < xSize;

//@ ensures piece == pp;

//@ pure

//@ public invariant piece.position.x >= 0 && piece.position.x < xSize;

//@ normal_behavior

//@ requires inRange(p);

//@ assignable piece.position;

//@ assert inRange(piece.position);

//@ ensures \result == ( p.x >= 0 && p.x < xSize );

//@ pure helper

//@ ensures position == p;

//@ pure

//@ normal_behavior

//@ assignable position;

//@ ensures position == p;

//@ requires pp.position.x >= 0 && pp.position.x < xSize;

//@ ensures piece == pp;

//@ pure

//@ public invariant piece.position.x >= 0 && piece.position.x < xSize;

//@ normal_behavior

//@ requires inRange(p);

//@ assignable piece.position;

//@ assert inRange(piece.position);

//@ ensures \result == ( p.x >= 0 && p.x < xSize );

//@ pure helper

//@ ensures position == p;

//@ pure

//@ normal_behavior

//@ assignable position;

//@ ensures position == p;

//@ assert !(b & bb);

//@ assert (b | bb);

//@ assert !(b ^ bb);

//@ assert (b & bb); // FALSE

//@ assert !(b & bb);

//@ assert (b | bb);

//@ assert !(b ^ bb);

//@ assert (b & bb); // FALSE

//@ requires i < 100;

//@ ensures \result == i;

//@ refining normal_behavior

//@   assignable a;

//@   ensures a == i+10;

//@ requires i < 100;

//@ ensures \result == i;

//@ refining normal_behavior

//@   assignable a;

//@   ensures a == i+10;

/*@ code_bigint_math */
//@ public invariant -CENTS_IN_DOLLAR < my_cents && my_cents < CENTS_IN_DOLLAR;

//@ public invariant !(my_cents > 0 && my_dollars < 0);

//@ public invariant !(my_cents < 0 && my_dollars > 0);

/*@ spec_public */
/*@ spec_public */
//@ requires -100 < the_cents && the_cents < 100;

//@ requires !(the_cents > 0 && the_dollars < 0);

//@ requires !(the_cents < 0 && the_dollars > 0);

//@ ensures my_dollars == the_dollars && my_cents == the_cents;

/*@ ensures \result.my_dollars * CENTS_IN_DOLLAR + \result.my_cents ==
              the_amount.my_dollars * CENTS_IN_DOLLAR + the_amount.my_cents +
              my_dollars * CENTS_IN_DOLLAR + my_cents;
   */
//@ ensures \result == my_dollars;

/*@ pure helper */
//@ ensures \result == my_cents;

/*@ pure helper */
/*@ ensures \result <==> the_other.my_dollars == my_dollars &&
                           the_other.my_cents == my_cents;
   */
/*@ pure helper */
/*@ ensures \result <==>
                 the_other.my_dollars * CENTS_IN_DOLLAR + the_other.my_cents ==
                 my_dollars * CENTS_IN_DOLLAR + my_cents;
   */
/*@ pure helper */
/*@ code_bigint_math */
//@ public invariant -CENTS_IN_DOLLAR < my_cents && my_cents < CENTS_IN_DOLLAR;

//@ public invariant !(my_cents > 0 && my_dollars < 0);

//@ public invariant !(my_cents < 0 && my_dollars > 0);

/*@ spec_public */
/*@ spec_public */
//@ requires -100 < the_cents && the_cents < 100;

//@ requires !(the_cents > 0 && the_dollars < 0);

//@ requires !(the_cents < 0 && the_dollars > 0);

//@ ensures my_dollars == the_dollars && my_cents == the_cents;

/*@ ensures \result.my_dollars * CENTS_IN_DOLLAR + \result.my_cents ==
              the_amount.my_dollars * CENTS_IN_DOLLAR + the_amount.my_cents +
              my_dollars * CENTS_IN_DOLLAR + my_cents;
   */
//@ ensures \result == my_dollars;

/*@ pure helper */
//@ ensures \result == my_cents;

/*@ pure helper */
/*@ ensures \result <==> the_other.my_dollars == my_dollars &&
                           the_other.my_cents == my_cents;
   */
/*@ pure helper */
/*@ ensures \result <==>
                 the_other.my_dollars * CENTS_IN_DOLLAR + the_other.my_cents ==
                 my_dollars * CENTS_IN_DOLLAR + my_cents;
   */
/*@ pure helper */
//@ nullable_by_default


//@ assert i == \old(i);

//@ assert bb != null;

//@ assert \fresh(bb);

//@ assert java.util.Arrays.equalArrays(bb,b);


//@ assert i == \old(i);

//@ assert bb != null;

//@ assert \fresh(bb);

//@ assert java.util.Arrays.equalArrays(bb,b);


//@ assert i == \old(i);

//@ assert bb != null;

//@ assert \fresh(bb);

//@ assert java.util.Arrays.equalArrays(bb,b);


//@ assert i == \old(i);

//@ assert bb != null;

//@ assert \fresh(bb);

//@ assert java.util.Arrays.equalArrays(bb,b);


//@ assert i == \old(i);

//@ assert bb != null;

//@ assert \fresh(bb);

//@ assert java.util.Arrays.equalArrays(bb,b);


//@ assert i == \old(i);

//@ assert bb != null;

//@ assert \fresh(bb);

//@ assert java.util.Arrays.equalArrays(bb,b);


//@ assert i == \old(i);

//@ assert bb != null;

//@ assert \fresh(bb);

//@ assert java.util.Arrays.equalArrays(bb,b);


//@ assert i == \old(i);

//@ assert bb != null;

//@ assert \fresh(bb);

//@ assert java.util.Arrays.equalArrays(bb,b);

//@ assert i == \old(i);

//@ public normal_behavior

//@   assignable     othing;

//@ nullable_by_default


//@ assert i == \old(i);

//@ assert bb != null;

//@ assert \fresh(bb);

//@ assert java.util.Arrays.equalArrays(bb,b);


//@ assert i == \old(i);

//@ assert bb != null;

//@ assert \fresh(bb);

//@ assert java.util.Arrays.equalArrays(bb,b);


//@ assert i == \old(i);

//@ assert bb != null;

//@ assert \fresh(bb);

//@ assert java.util.Arrays.equalArrays(bb,b);


//@ assert i == \old(i);

//@ assert bb != null;

//@ assert \fresh(bb);

//@ assert java.util.Arrays.equalArrays(bb,b);


//@ assert i == \old(i);

//@ assert bb != null;

//@ assert \fresh(bb);

//@ assert java.util.Arrays.equalArrays(bb,b);


//@ assert i == \old(i);

//@ assert bb != null;

//@ assert \fresh(bb);

//@ assert java.util.Arrays.equalArrays(bb,b);


//@ assert i == \old(i);

//@ assert bb != null;

//@ assert \fresh(bb);

//@ assert java.util.Arrays.equalArrays(bb,b);


//@ assert i == \old(i);

//@ assert bb != null;

//@ assert \fresh(bb);

//@ assert java.util.Arrays.equalArrays(bb,b);

//@ assert i == \old(i);

//@ public normal_behavior

//@   assignable     othing;

_by_default

//@ public normal_behavior

//@   assignable xx;

//@ spec_public

//@ private normal_behavior

//@   assignable xx;

//@ public normal_behavior

//@ pure

_by_default

//@ public normal_behavior

//@   assignable xx;

//@ spec_public

//@ private normal_behavior

//@   assignable xx;

//@ public normal_behavior

//@ pure




//@ ensures o.equals(oo);

//@ pure

/*@ non_null*/

//@ ensures o.equals(oo);

//@ pure

/*@ non_null*/



//@ ensures o != null && o.equals(oo);

//@ pure

/*@ non_null*/

//@ ensures o != null && o.equals(oo);

//@ pure

/*@ non_null*/



//@ ensures oo.equals(o);

//@ pure

/*@ non_null*/

//@ ensures oo.equals(o);

//@ pure

/*@ non_null*/



//@ ensures o.equals(oo);

//@ pure

/*@ non_null*/

//@ ensures o.equals(oo);

//@ pure

/*@ non_null*/



//@ ensures o.equals(oo);

//@ pure

/*@ non_null*/

//@ ensures o.equals(oo);

//@ pure

/*@ non_null*/



//@ ensures o.equals(oo);

//@ pure

/*@ non_null*/

//@ ensures o.equals(oo);

//@ pure

/*@ non_null*/
//@ public invariant good();

//@ pure helper

//@ also ensures \result;

//@ pure helper

//@ public invariant good();

//@ pure helper

//@ also ensures \result;

//@ pure helper

//@ ensures true;

//@ function

//@ model static public int comp(int a);

//@ ensures a == b;

//@ set a = comp(10);

//@ set c = 20;

//@ set b = comp(10);

//@ assert a == b;

//@ ensures comp(10) == comp(10);

//@ ensures true;

//@ function

//@ model static public int comp(int a);

//@ ensures a == b;

//@ set a = comp(10);

//@ set c = 20;

//@ set b = comp(10);

//@ assert a == b;

//@ ensures comp(10) == comp(10);

//@ immutable

//@ ensures true;

//@ function

//@ ensures a == b;

//@ assert a == b;

//@ ensures true;

//@ function

//@ assignable \everything;

//@ ensures acomp(10) == acomp(10);

//@ immutable

//@ ensures true;

//@ function

//@ ensures a == b;

//@ assert a == b;

//@ ensures true;

//@ function

//@ assignable \everything;

//@ ensures acomp(10) == acomp(10);

/*@ public normal_behavior
      requires 0 <= the_input;
      ensures \result == 0;
    also public exceptional_behavior
      requires the_input < 0;
      signals (IllegalArgumentException e) true;
      signals_only IllegalArgumentException;
*/
/*@ public normal_behavior
      requires 0 <= the_input;
      ensures \result == 0;
    also public exceptional_behavior
      requires the_input < 0;
      signals (IllegalArgumentException e) true;
      signals_only IllegalArgumentException;
*/
/*@   requires 0 <= the_input;
      ensures \result == 0;
    also
      requires the_input < 0;
      diverges true;
      signals (IllegalArgumentException e) true;
      signals_only IllegalArgumentException;
*/
/*@   requires 0 <= the_input;
      ensures \result == 0;
    also
      requires the_input < 0;
      diverges true;
      signals (IllegalArgumentException e) true;
      signals_only IllegalArgumentException;
*/
//@ requires the_array.length > 0;

/*@ ensures (\forall int i; 0 <= i && i < the_array.length;
               the_array[i] <= \result);
   */
/*@ ensures (\exists int i; 0 <= i && i < the_array.length;
               the_array[i] == \result);
   */
/*@ pure */
//@ assume the_array[0] >= Integer.MIN_VALUE;

//@ loop_invariant 0 <= i;

//@ loop_invariant i <= the_array.length;

//@ loop_invariant (\forall int j; 0 <= j && j < i; the_array[j] <= result);

//@ loop_invariant i > 0 ==> (\exists int j; 0 <= j && j < i; the_array[j] == result);

//@ loop_invariant i == 0 ==> result == Integer.MIN_VALUE;

//@ decreasing the_array.length - i;

//@ requires the_array.length > 0;

/*@ ensures (\forall int i; 0 <= i && i < the_array.length;
               the_array[i] <= \result);
   */
/*@ ensures (\exists int i; 0 <= i && i < the_array.length;
               the_array[i] == \result);
   */
/*@ pure */
//@ assume the_array[0] >= Integer.MIN_VALUE;

//@ loop_invariant 0 <= i;

//@ loop_invariant i <= the_array.length;

//@ loop_invariant (\forall int j; 0 <= j && j < i; the_array[j] <= result);

//@ loop_invariant i > 0 ==> (\exists int j; 0 <= j && j < i; the_array[j] == result);

//@ loop_invariant i == 0 ==> result == Integer.MIN_VALUE;

//@ decreasing the_array.length - i;

//@ requires the_array.length > 0;

/*@ ensures (\forall int i; 0 <= i && i < the_array.length;
               the_array[i] <= \result);
   */
/*@ ensures (\exists int i; 0 <= i && i < the_array.length;
               the_array[i] == \result);
   */
/*@ pure */
//@ loop_invariant 0 <= i;

//@ loop_invariant i <= the_array.length;

//@ loop_invariant (\forall int j; 0 <= j && j < i; the_array[j] <= result);

//@ loop_invariant i > 0 ==> (\exists int j; 0 <= j && j < i; the_array[j] == result);

//@ loop_invariant i == 0 ==> result == the_array[0];

//@ decreasing the_array.length - i;

//@ requires the_array.length > 0;

/*@ ensures (\forall int i; 0 <= i && i < the_array.length;
               the_array[i] <= \result);
   */
/*@ ensures (\exists int i; 0 <= i && i < the_array.length;
               the_array[i] == \result);
   */
/*@ pure */
//@ loop_invariant 0 <= i;

//@ loop_invariant i <= the_array.length;

//@ loop_invariant (\forall int j; 0 <= j && j < i; the_array[j] <= result);

//@ loop_invariant i > 0 ==> (\exists int j; 0 <= j && j < i; the_array[j] == result);

//@ loop_invariant i == 0 ==> result == the_array[0];

//@ decreasing the_array.length - i;

//@ requires the_array.length > 0;

/*@ ensures (\forall int i; 0 <= i && i < the_array.length;
               the_array[i] <= \result);
   */
/*@ ensures (\exists int i; 0 <= i && i < the_array.length;
               the_array[i] == \result);
   */
/*@ pure */
//@ assume the_array[0] >= Integer.MIN_VALUE;

//@ loop_invariant 0 <= i;

//@ loop_invariant i <= the_array.length;

//@ loop_invariant (\forall int j; 0 <= j && j < i; the_array[j] <= result);

//@ loop_invariant i > 0 ==> (\exists int j; 0 <= j && j < i; the_array[j] == result);

//@ decreasing the_array.length - i;

//@ requires the_array.length > 0;

/*@ ensures (\forall int i; 0 <= i && i < the_array.length;
               the_array[i] <= \result);
   */
/*@ ensures (\exists int i; 0 <= i && i < the_array.length;
               the_array[i] == \result);
   */
/*@ pure */
//@ assume the_array[0] >= Integer.MIN_VALUE;

//@ loop_invariant 0 <= i;

//@ loop_invariant i <= the_array.length;

//@ loop_invariant (\forall int j; 0 <= j && j < i; the_array[j] <= result);

//@ loop_invariant i > 0 ==> (\exists int j; 0 <= j && j < i; the_array[j] == result);

//@ decreasing the_array.length - i;

/*@ nullable spec_public */
/*@ nullable spec_public */
/*@ nullable spec_public */
//@ public invariant my_next != this;

//@ public invariant my_prev != this;

//@ public invariant my_next != null ==> my_next != my_prev;

//@ requires (a_next != null ==> a_next != a_prev);


//@ assignable my_value;

//@ ensures my_value == a_value;



//@ requires this != a_doubly_linked_list && (my_next != null ==> a_doubly_linked_list != my_next);

//@ assignable my_prev;

//@ ensures my_prev == a_doubly_linked_list;



//@ requires this != a_doubly_linked_list && (a_doubly_linked_list != null ==> a_doubly_linked_list != my_prev);

//@ assignable my_next;

//@ ensures my_next == a_doubly_linked_list;


//@ requires my_prev != null && my_next != null;

//@ requires my_prev != my_next.my_next;

//@ requires my_prev.my_prev != my_next;

//@ assignable my_prev.my_next, my_next.my_prev;

/*@ nullable spec_public */
/*@ nullable spec_public */
/*@ nullable spec_public */
//@ public invariant my_next != this;

//@ public invariant my_prev != this;

//@ public invariant my_next != null ==> my_next != my_prev;

//@ requires (a_next != null ==> a_next != a_prev);


//@ assignable my_value;

//@ ensures my_value == a_value;



//@ requires this != a_doubly_linked_list && (my_next != null ==> a_doubly_linked_list != my_next);

//@ assignable my_prev;

//@ ensures my_prev == a_doubly_linked_list;



//@ requires this != a_doubly_linked_list && (a_doubly_linked_list != null ==> a_doubly_linked_list != my_prev);

//@ assignable my_next;

//@ ensures my_next == a_doubly_linked_list;


//@ requires my_prev != null && my_next != null;

//@ requires my_prev != my_next.my_next;

//@ requires my_prev.my_prev != my_next;

//@ assignable my_prev.my_next, my_next.my_prev;

//@ public normal_behavior // Avoids bit arithmetic

//@   ensures \result == \bigint_math(i < 0 ? ((long)i - Integer.MIN_VALUE - Integer.MIN_VALUE) : i);

//@   ensures 0 <= \result && \result <= Integer.MAX_UNSIGNED_INT;

//@ pure helper function // FIXME - causes infeasibility if written as a function with separated ensures conjuncts

//@ public normal_behavior

//@   old long msecs = 1000 * toUnsignedLongBuggy(seconds);

//@   requires msecs < 1000000;

//@   ensures \result == msecs;

//@ pure code_java_math spec_safe_math

//@ assert t < 1000000;

//@ public normal_behavior // Avoids bit arithmetic

//@   ensures \result == \bigint_math(i < 0 ? ((long)i - Integer.MIN_VALUE - Integer.MIN_VALUE) : i);

//@   ensures 0 <= \result && \result <= Integer.MAX_UNSIGNED_INT;

//@ pure helper function // FIXME - causes infeasibility if written as a function with separated ensures conjuncts

//@ public normal_behavior

//@   old long msecs = 1000 * toUnsignedLongBuggy(seconds);

//@   requires msecs < 1000000;

//@   ensures \result == msecs;

//@ pure code_java_math spec_safe_math

//@ assert t < 1000000;

//@ public normal_behavior // Avoids bit arithmetic

//@   ensures \result == (i < 0 ? ((long)i - Integer.MIN_VALUE - Integer.MIN_VALUE) : i) && 0 <= \result && \result <= Integer.MAX_UNSIGNED_INT;

//@ pure helper function

//@ public normal_behavior

//@   old long msecs = 1000 * toUnsignedLongBuggy(seconds);

//@   requires msecs < 1000000;

//@   ensures \result == msecs;

//@ pure code_java_math spec_safe_math

//@ assert t < 1000000;

//@ public normal_behavior // Avoids bit arithmetic

//@   ensures \result == (i < 0 ? ((long)i - Integer.MIN_VALUE - Integer.MIN_VALUE) : i) && 0 <= \result && \result <= Integer.MAX_UNSIGNED_INT;

//@ pure helper function

//@ public normal_behavior

//@   old long msecs = 1000 * toUnsignedLongBuggy(seconds);

//@   requires msecs < 1000000;

//@   ensures \result == msecs;

//@ pure code_java_math spec_safe_math

//@ assert t < 1000000;

//@ requires e != null;

//@ assert e == TestEnum.EE.AA | e == TestEnum.EE.BB;

//@ assert TestEnum.EE.AA != TestEnum.EE.BB;

//@ assert \distinct(TestEnum.EE.AA, TestEnum.EE.BB, null);

//@ requires e != null;

//@ assert e == TestEnum.EE.AA | e == TestEnum.EE.BB;

//@ assert TestEnum.EE.AA != TestEnum.EE.BB;

//@ assert \distinct(TestEnum.EE.AA, TestEnum.EE.BB, null);

//@ requires cause != null;

//@ assert this != cause;

//@ requires cause != null;

//@ assert this != cause;

//@ public normal_behavior

//@   requires f != null && g != null;

//@   ensures \result != null && (\forall Integer i,r;; \ensures(\result,r,i) == (\exists Integer t;; \ensures(g,t,i) && \ensures(f,r,t)));

//@ also public normal_behavior

//@   requires i != Integer.MIN_VALUE;

//@   ensures \result != null && \result == i - 1;

//@ also public normal_behavior

//@   requires i != Integer.MAX_VALUE;

//@   ensures \result != null && \result == i + 1;

//@ also public normal_behavior

//@   requires i != Integer.MAX_VALUE;

//@   ensures \result != null && \result > i;

//@   requires k != null && k != Integer.MAX_VALUE;

//@ assert (int)h == (int)k;

//@   requires k != Integer.MAX_VALUE;

//@ assert h >= k;

//@   requires k != Integer.MAX_VALUE;

//@ assert h == k;

//@ public normal_behavior

//@   requires f != null && g != null;

//@   ensures \result != null && (\forall Integer i,r;; \ensures(\result,r,i) == (\exists Integer t;; \ensures(g,t,i) && \ensures(f,r,t)));

//@ also public normal_behavior

//@   requires i != Integer.MIN_VALUE;

//@   ensures \result != null && \result == i - 1;

//@ also public normal_behavior

//@   requires i != Integer.MAX_VALUE;

//@   ensures \result != null && \result == i + 1;

//@ also public normal_behavior

//@   requires i != Integer.MAX_VALUE;

//@   ensures \result != null && \result > i;

//@   requires k != null && k != Integer.MAX_VALUE;

//@ assert (int)h == (int)k;

//@   requires k != Integer.MAX_VALUE;

//@ assert h >= k;

//@   requires k != Integer.MAX_VALUE;

//@ assert h == k;

//@ public normal_behavior

//@   ensures \result == (i<0 ? ((long)i - Integer.MIN_VALUE - Integer.MIN_VALUE) : i);

//@   ensures 0 <= \result && \result <= 0xffff_ffffL;

//@ pure helper function

//@ model public static long cv(int i);

//@ public normal_behavior

//@   ensures \result == cv(i);

//@ pure helper

//@ ensures \result == cv(i);

//@ public normal_behavior

//@   ensures \result == (i<0 ? ((long)i - Integer.MIN_VALUE - Integer.MIN_VALUE) : i) && 0 <= \result && \result <= 0xffff_ffffL;

//@ pure helper function

//@ model public static long cv2(int i);

//@ public normal_behavior

//@   ensures \result == cv2(i);

//@ pure helper

//@ ensures \result == cv2(i);

//@ public normal_behavior

//@   ensures \result == (i<0 ? ((long)i - Integer.MIN_VALUE - Integer.MIN_VALUE) : i);

//@   ensures 0 <= \result && \result <= 0xffff_ffffL;

//@ pure helper

//@ model public static long cv3(int i);

//@ public normal_behavior

//@   ensures \result == cv3(i);

//@ pure helper

//@ ensures \result == cv3(i);

//@ public normal_behavior

//@   ensures \result == (i<0 ? ((long)i - Integer.MIN_VALUE - Integer.MIN_VALUE) : i);

//@   ensures 0 <= \result && \result <= 0xffff_ffffL;

//@ pure helper function

//@ model public static long cv(int i);

//@ public normal_behavior

//@   ensures \result == cv(i);

//@ pure helper

//@ ensures \result == cv(i);

//@ public normal_behavior

//@   ensures \result == (i<0 ? ((long)i - Integer.MIN_VALUE - Integer.MIN_VALUE) : i) && 0 <= \result && \result <= 0xffff_ffffL;

//@ pure helper function

//@ model public static long cv2(int i);

//@ public normal_behavior

//@   ensures \result == cv2(i);

//@ pure helper

//@ ensures \result == cv2(i);

//@ public normal_behavior

//@   ensures \result == (i<0 ? ((long)i - Integer.MIN_VALUE - Integer.MIN_VALUE) : i);

//@   ensures 0 <= \result && \result <= 0xffff_ffffL;

//@ pure helper

//@ model public static long cv3(int i);

//@ public normal_behavior

//@   ensures \result == cv3(i);

//@ pure helper

//@ ensures \result == cv3(i);

_by_default

//@ private normal_behavior

//@   ensures \fresh(\result);

//@ pure helper

_by_default

//@ private normal_behavior

//@   ensures \fresh(\result);

//@ pure helper

//@ public normal_behavior

//@ requires ii >= 0 && ii < arr.length;

//@ old int oldI = ii;

//@ assignable ii, arr[ii];

//@ ensures arr[oldI] == v;

//@ ensures ii == oldI + 1;

//@ assert st.count() == 5;

//@ assume arr.length == 5;

//@ loop_invariant Test.ii == \count;

//@ loop_invariant (\forall int j; j>=0 && j<\count; arr[j] == j+1);

//@ loop_modifies Test.ii, Test.arr[*];

//@ inlined_loop;

//@ assert Test.ii == st.count();

//@ assert arr[0] == 1;

//@ assert arr[4] == 5;

//@ assert (\forall int j; j>=0 && j<arr.length; arr[j] == j+1);

//@ requires ii >= 0 && ii < arr.length;

//@ old int oldI = ii;

//@ assignable ii, arr[ii];

//@ ensures arr[oldI] == v;

//@ ensures ii == oldI + 1;

//@ assert st.count() == 5;

//@ loop_invariant ii == \count;

//@ loop_invariant (\forall int j; j>=0 && j<\count; arr[j] == j+1);

//@ loop_modifies ii, arr[*];

//@ inlined_loop;

//@ show ii, st.values.length, st.count();

//@ assert ii == st.count();

//@ assert arr[0] == 1;

//@ assert arr[4] == 5;

//@ assert (\forall int j; j>=0 && j<arr.length; arr[j] == j+1);

//@ public normal_behavior

//@ requires ii >= 0 && ii < arr.length;

//@ old int oldI = ii;

//@ assignable ii, arr[ii];

//@ ensures arr[oldI] == v;

//@ ensures ii == oldI + 1;

//@ assert st.count() == 5;

//@ assume arr.length == 5;

//@ loop_invariant Test.ii == \count;

//@ loop_invariant (\forall int j; j>=0 && j<\count; arr[j] == j+1);

//@ loop_modifies Test.ii, Test.arr[*];

//@ inlined_loop;

//@ assert Test.ii == st.count();

//@ assert arr[0] == 1;

//@ assert arr[4] == 5;

//@ assert (\forall int j; j>=0 && j<arr.length; arr[j] == j+1);

//@ requires ii >= 0 && ii < arr.length;

//@ old int oldI = ii;

//@ assignable ii, arr[ii];

//@ ensures arr[oldI] == v;

//@ ensures ii == oldI + 1;

//@ assert st.count() == 5;

//@ loop_invariant ii == \count;

//@ loop_invariant (\forall int j; j>=0 && j<\count; arr[j] == j+1);

//@ loop_modifies ii, arr[*];

//@ inlined_loop;

//@ show ii, st.values.length, st.count();

//@ assert ii == st.count();

//@ assert arr[0] == 1;

//@ assert arr[4] == 5;

//@ assert (\forall int j; j>=0 && j<arr.length; arr[j] == j+1);

//@ public invariant value > 0;

//@ in value;

//@ public model int value;

//@ private represents value = my_value;

//@ requires value_1 > 0;

//@ ensures value == value_1;

//@ public invariant value > 0;

//@ in value;

//@ public model int value;

//@ private represents value = my_value;

//@ requires value_1 > 0;

//@ ensures value == value_1;

/*@ spec_public */
//@ pure

/*@ spec_public */
//@ pure

//@ public invariant value > 0;

//@ in value;

//@ public model int value;

//@ private represents value = my_value;

//@ requires value_1 > 0;

//@ ensures value == value_1;

//@ public invariant value > 0;

//@ in value;

//@ public model int value;

//@ private represents value = my_value;

//@ requires value_1 > 0;

//@ ensures value == value_1;

/*@ spec_public */
/*@ spec_public */
//@ public invariant value > 0;

//@ in value;

//@ public model int value;

//@ private represents value = my_value;

//@ requires value_1 > 0;

//@ ensures value == value_1;

//@ public invariant value > 0;

//@ in value;

//@ public model int value;

//@ private represents value = my_value;

//@ requires value_1 > 0;

//@ ensures value == value_1;

/*@ spec_public */
//@ signals_only     othing;

/*@ spec_public */
//@ signals_only     othing;

/*@ spec_public @*/
//@ requires str!=null;

//@ ensures value == str; // should this be value.equals(str)?

//@ensures \result == value; // likewise, should this be .equals?

/*@ pure @*/
/*@ spec_public @*/
//@ requires str!=null;

//@ ensures value == str; // should this be value.equals(str)?

//@ensures \result == value; // likewise, should this be .equals?

/*@ pure @*/
//@ ensures \fresh(\result);

//@ assert b == a.getConfigurationSizes(); // Error - fails because result is fresh

//@ ensures \fresh(\result);

//@ assert b == a.getConfigurationSizes(); // Error - fails because result is fresh

//@ ensures !\fresh(\result);

//@ assert b == a.getConfigurationSizes(); // Error - fails because result is fresh

//@ ensures !\fresh(\result);

//@ assert b == a.getConfigurationSizes(); // Error - fails because result is fresh



//@ pure  // FIXME - should be able to get rid of this


//@ pure  // FIXME - should be able to get rid of this




//@ public normal_behavior

//@   requires p >= 0;

//@   ensures (p&1) ==  p%2;

//@ pure

//@ requires k >= 0;

//@ requires k <= Integer.MAX_VALUE/16;

//@ assert b;

//@ requires k <= Integer.MAX_VALUE/2 && k >= -1; // The -1 just so the counterexample is always the same

//@ show k;

//@ use lemma((k+1));

//@ assert b;

//@ requires k >= 0;

//@ requires k <= Integer.MAX_VALUE/2 && k >= Integer.MIN_VALUE/2;

//@ show k;

//@ use lemma((k+1));

//@ assert b;

//@ public normal_behavior

//@   requires p >= 0;

//@   ensures (p&1) ==  p%2;

//@ pure

//@ requires k >= 0;

//@ requires k <= Integer.MAX_VALUE/16;

//@ assert b;

//@ requires k <= Integer.MAX_VALUE/2 && k >= -1; // The -1 just so the counterexample is always the same

//@ show k;

//@ use lemma((k+1));

//@ assert b;

//@ requires k >= 0;

//@ requires k <= Integer.MAX_VALUE/2 && k >= Integer.MIN_VALUE/2;

//@ show k;

//@ use lemma((k+1));

//@ assert b;

_by_default

//@ normal_behavior

//@   requires (\let int c = cc; c != 0);

//@ pure

//@ assert cc != 0;

//@ normal_behavior

//@   requires (\let int c = cc; c != 0);

//@ pure

//@ @org.jmlspecs.annotation.Options("-solver-seed=2000")

//@ assert cc != 0;

//@ nullable

//@ normal_behavior

//@   requires a != null && a.length == 10;

//@   requires (\forall int i; 0 <= i < 5; a[i+i] == 0);

//@ pure

//@ assert a[2]== 0; // OK // but fails

//@ assert a[3]== 0; // ERROR

//@ normal_behavior

//@   requires a != null && a.length == 10;

//@   requires (\forall int i; 0 <= i < 5; (\let int ii = 2*i; a[ii] == 0));

//@ pure

//@ assert a[2]== 0; // OK // forall does not work well with let

//@ assert a[3]== 0; // ERROR

//@ normal_behavior

//@   requires a != null && a.length == 10;

//@   requires (\forall int i; 0 <= i < 5; (\let int ii = i; a[ii] == 0));

//@ pure

//@ assert a[2]== 0; // OK

//@ assert a[3]== 0; // OK

//@ normal_behavior

//@   requires a != null && a.length == 10;

//@   requires (\forall \bigint i; 0 <= i < 5; (\let \bigint ii = i; a[ii] == 0));

//@ pure

//@ assert a[2]== 0; // OK

//@ assert a[3]== 0; // OK

//@ normal_behavior

//@   requires a != null && a.length == 10;

//@   requires (\forall int i; 0 <= i < 5; a[i] == 0);

//@ pure

//@ assert a[2]== 0; // OK

//@ assert a[3]== 0; // OK

//@ assert (\let \bigint i = cc+1; i == i);

//@ assert (\let \bigint i = cc+1; i-2 == cc-1);

//@ assert (\forall \bigint i; \let \bigint ii = i+i; ii == ii);

_by_default

//@ normal_behavior

//@   requires (\let int c = cc; c != 0);

//@ pure

//@ assert cc != 0;

//@ normal_behavior

//@   requires (\let int c = cc; c != 0);

//@ pure

//@ @org.jmlspecs.annotation.Options("-solver-seed=2000")

//@ assert cc != 0;

//@ nullable

//@ normal_behavior

//@   requires a != null && a.length == 10;

//@   requires (\forall int i; 0 <= i < 5; a[i+i] == 0);

//@ pure

//@ assert a[2]== 0; // OK // but fails

//@ assert a[3]== 0; // ERROR

//@ normal_behavior

//@   requires a != null && a.length == 10;

//@   requires (\forall int i; 0 <= i < 5; (\let int ii = 2*i; a[ii] == 0));

//@ pure

//@ assert a[2]== 0; // OK // forall does not work well with let

//@ assert a[3]== 0; // ERROR

//@ normal_behavior

//@   requires a != null && a.length == 10;

//@   requires (\forall int i; 0 <= i < 5; (\let int ii = i; a[ii] == 0));

//@ pure

//@ assert a[2]== 0; // OK

//@ assert a[3]== 0; // OK

//@ normal_behavior

//@   requires a != null && a.length == 10;

//@   requires (\forall \bigint i; 0 <= i < 5; (\let \bigint ii = i; a[ii] == 0));

//@ pure

//@ assert a[2]== 0; // OK

//@ assert a[3]== 0; // OK

//@ normal_behavior

//@   requires a != null && a.length == 10;

//@   requires (\forall int i; 0 <= i < 5; a[i] == 0);

//@ pure

//@ assert a[2]== 0; // OK

//@ assert a[3]== 0; // OK

//@ assert (\let \bigint i = cc+1; i == i);

//@ assert (\let \bigint i = cc+1; i-2 == cc-1);

//@ assert (\forall \bigint i; \let \bigint ii = i+i; ii == ii);

//@ requires a != null && a.length > 10;

//@ loop_invariant 5<=i && i<=8;

//@ assignable i,a[4..7];

//@ writes i,a[4..7];

//@ assert a[3] == 10;  // OK

//@ requires a != null && a.length > 10;

//@ loop_invariant 5<=i && i<=8;

//@ loop_assignable i,a[4..7];

//@ loop_writes i,a[4..7];

//@ loop_modifies i,a[4..7];

//@ assert a[3] == 10;  // OK

//@ requires a != null && a.length > 10;

//@ loop_invariant 5<=i && i<=8;

//@ assignable i,a[4..7];

//@ writes i,a[4..7];

//@ assert a[3] == 10;  // OK

//@ requires a != null && a.length > 10;

//@ loop_invariant 5<=i && i<=8;

//@ loop_assignable i,a[4..7];

//@ loop_writes i,a[4..7];

//@ loop_modifies i,a[4..7];

//@ assert a[3] == 10;  // OK

//@ requires a != null && a.length > 10;

//@ loop_invariant 5<=i && i<=8;

//@ assert a[3] == 10; // Not proved since the default loop_modifies is a[*]

//@ requires a != null && a.length > 10;

//@ loop_invariant 5<=i && i<=8;

//@ loop_modifies i,a[4..7];

//@ assert a[3] == 10;  // OK

//@ requires a != null && a.length > 10;

//@ loop_invariant 5<=i && i<=8;

//@ assert a[3] == 10; // Not proved since the default loop_modifies is a[*]

//@ requires a != null && a.length > 10;

//@ loop_invariant 5<=i && i<=8;

//@ loop_modifies i,a[4..7];

//@ assert a[3] == 10;  // OK

//@ requires     onnullelements(list.values);

//@ loop_invariant \forall \bigint k; 0 <= k < \count; list.values[k] >= 0;

//@ assert \forall \bigint k; 0 <= k < list.values.length; list.values[k] >= 0;

//@ requires     onnullelements(list);

//@ loop_invariant \forall \bigint k; 0 <= k < \count; list[k] >= 0;

//@ assert \forall \bigint k; 0 <= k < list.length; list[k] >= 0;

//@ requires     onnullelements(list.values);

//@ loop_invariant \forall \bigint k; 0 <= k < \count; list.values[k] >= 0;

//@ assert \forall \bigint k; 0 <= k < list.values.length; list.values[k] >= 0;

//@ requires     onnullelements(list);

//@ loop_invariant \forall \bigint k; 0 <= k < \count; list[k] >= 0;

//@ assert \forall \bigint k; 0 <= k < list.length; list[k] >= 0;

//@ in value;

//@ public model int value;

//@ private represents value = -rep;

//@ public invariant value >= 0;

//@ requires v >= 0;

//@ ensures value == v;

//@ pure

//@ requires this != other;

//@ modifies value;

//@ ensures value == (other.value + \old(value));

//@ ghost boolean b = (\lbl SAME this == other);

//@ assignable     othing;

//@ ensures \result.value == (other.value + value);

//@ in value;

//@ public model int value;

//@ private represents value = -rep;

//@ public invariant value >= 0;

//@ requires v >= 0;

//@ ensures value == v;

//@ pure

//@ requires this != other;

//@ modifies value;

//@ ensures value == (other.value + \old(value));

//@ ghost boolean b = (\lbl SAME this == other);

//@ assignable     othing;

//@ ensures \result.value == (other.value + value);

_by_default

//@ public model int _base;

//@ public normal_behavior ensures true; pure

//@ public normal_behavior ensures \result._base == i; pure

//@ public normal_behavior ensures \result._base == this._base + i;

//@ public normal_behavior ensures \result == _base; pure

_by_default

//@ in _base;

//@ public represents _base = value1;

//@ public normal_behavior ensures _base == i; pure

_by_default

//@ in _base;

//@ public represents _base = value2;

//@ public normal_behavior ensures _base == i; pure

_by_default

//@ public model int _base;

//@ public normal_behavior ensures true; pure

//@ public normal_behavior ensures \result._base == i; pure

//@ public normal_behavior ensures \result._base == this._base + i;

//@ public normal_behavior ensures \result == _base; pure

_by_default

//@ in _base;

//@ public represents _base = value1;

//@ public normal_behavior ensures _base == i; pure

_by_default

//@ in _base;

//@ public represents _base = value2;

//@ public normal_behavior ensures _base == i; pure

_by_default

//@ public model int _base;

//@ public normal_behavior ensures true; pure

//@ public normal_behavior ensures \result._base == i; pure

//@ public normal_behavior ensures \result._base == this._base + i;

//@ public normal_behavior ensures \result == _base; pure

_by_default

//@ in _base;

//@ public represents _base = value1;

//@ public normal_behavior ensures value1 == i; pure  // value1 here instead of _base -- what is to tell the value of _base?

_by_default

//@ in _base;

//@ public represents _base = value2;

//@ public normal_behavior ensures value2 == i; pure  // Uses value2 instead of _base here

_by_default

//@ public model int _base;

//@ public normal_behavior ensures true; pure

//@ public normal_behavior ensures \result._base == i; pure

//@ public normal_behavior ensures \result._base == this._base + i;

//@ public normal_behavior ensures \result == _base; pure

_by_default

//@ in _base;

//@ public represents _base = value1;

//@ public normal_behavior ensures value1 == i; pure  // value1 here instead of _base -- what is to tell the value of _base?

_by_default

//@ in _base;

//@ public represents _base = value2;

//@ public normal_behavior ensures value2 == i; pure  // Uses value2 instead of _base here

_by_default

//@ public model int _base;

//@ public normal_behavior ensures true; pure

//@ public normal_behavior ensures \result._base == i; pure

//@ public normal_behavior ensures \result._base == this._base + i;

//@ public normal_behavior ensures \result == _base; pure

_by_default

//@ in _base;

//@ public represents _base = value1;

//@ public normal_behavior ensures value1 == i; pure

_by_default

//@ in _base;

//@ public represents _base = value2;

//@ public normal_behavior ensures value2 == i; pure

_by_default

//@ public model int _base;

//@ public normal_behavior ensures true; pure

//@ public normal_behavior ensures \result._base == i; pure

//@ public normal_behavior ensures \result._base == this._base + i;

//@ public normal_behavior ensures \result == _base; pure

_by_default

//@ in _base;

//@ public represents _base = value1;

//@ public normal_behavior ensures value1 == i; pure

_by_default

//@ in _base;

//@ public represents _base = value2;

//@ public normal_behavior ensures value2 == i; pure

//@ public normal_behavior

//@   old int iiiii = 20;

//@   requires iiiii - 10 >= 0;

//@   {|

//@   requires b;

//@   old int jjjjj = qq(iiiii);

//@   requires a.length > 10000;

//@   assignable a[jjjjj-100];

//@   ensures \result == jjjjj - iiiii;

//@   also

//@   requires !b;

//@   old int kkkkk = qq(10+iiiii);

//@   ensures \result == iiiii - 20 + 100;

//@   |}

//@ public normal_behavior

//@   requires k < 1000;

//@   ensures \result == k + 100;

//@ pure

//@ public normal_behavior

//@   old int iiiii = 20;

//@   requires iiiii - 10 >= 0;

//@   {|

//@   requires b;

//@   old int jjjjj = qq(iiiii);

//@   requires a.length > 10000;

//@   assignable a[jjjjj-100];

//@   ensures \result == jjjjj - iiiii;

//@   also

//@   requires !b;

//@   old int kkkkk = qq(10+iiiii);

//@   ensures \result == iiiii - 20 + 100;

//@   |}

//@ public normal_behavior

//@   requires k < 1000;

//@   ensures \result == k + 100;

//@ pure

//@ assert A.m() == 1;

//@ assert B.m() == 2;

//@ assert C.m() == 3;

//@ assert k == 2;

//@ ensures \result == 1;

//@ pure spec_public

//@ public normal_behavior ensures \result == 1;

//@ pure

//@ ensures \result == 2;

//@ pure spec_public

//@ also public normal_behavior ensures \result == 2;

//@ pure

//@ ensures \result == 3;

//@ pure spec_public

//@ assert A.m() == 1;

//@ assert B.m() == 2;

//@ assert C.m() == 3;

//@ assert k == 2;

//@ ensures \result == 1;

//@ pure spec_public

//@ public normal_behavior ensures \result == 1;

//@ pure

//@ ensures \result == 2;

//@ pure spec_public

//@ also public normal_behavior ensures \result == 2;

//@ pure

//@ ensures \result == 3;

//@ pure spec_public

//@ public instance invariant charArray.owner == this;

//@ assert sb.stringLength <= sb.value.length;

/*@ nullable @*/
/*@ nullable @*/
/*@ nullable @*/
/*@ nullable @*/
/*@ nullable @*/
/*@ nullable @*/
/*@ nullable @*/
/*@ nullable @*/
/*@ nullable @*/
/*@ nullable @*/
/*@ nullable @*/
/*@ nullable @*/
/*@ nullable @*/
//@ public instance invariant charArray.owner == this;

//@ assert sb.stringLength <= sb.value.length;

/*@ nullable @*/
/*@ nullable @*/
/*@ nullable @*/
/*@ nullable @*/
/*@ nullable @*/
/*@ nullable @*/
/*@ nullable @*/
/*@ nullable @*/
/*@ nullable @*/
/*@ nullable @*/
/*@ nullable @*/
/*@ nullable @*/
/*@ nullable @*/
//@ public invariant m();

//@ ensures \result;

/*@ pure */
//@ requires m();

//@ public invariant m();

//@ ensures \result;

/*@ pure */
//@ requires m();

//@ public invariant m();

/*@ pure */
//@ requires m();

//@ public invariant m();

/*@ pure */
//@ requires m();

//@ public invariant m();

/*@ pure */
//@ requires m();

//@ public invariant m();

/*@ pure */
//@ requires m();

//@ old int nnnn = 120+4;

//@ ensures \result <= nnnn;

//@ old int nnnn = 120+4;

//@ ensures \result <= nnnn;

/*@ normal_behavior
   @ requires 0 <= x && x < a.length;
   @ requires 0 <= y && y < a.length;
   @ requires x != y;

   @ ensures 0 <= \result;
   @ ensures \result <= a.length-x && \result <= a.length-y;
   @ ensures (\forall int i; x <= i && i < x+\result; a[i] == a[y+i-x] );
   @ ensures \result == a.length-x || \result == a.length-y || a[x+\result] != a[y+\result];

   @ pure @*/
/*@ loop_modifies l;
         @ maintaining 0 <= l && l+x <= a.length && l+y <= a.length && x!=y;
         @ maintaining (\forall int z; x <= z && z < x+l; a[z] == a[y+z-x] );
         @ decreasing a.length-l;
         @*/
/*@ normal_behavior
   @ requires 0 <= x && x < a.length;
   @ requires 0 <= y && y < a.length;
   @ requires x != y;

   @ ensures 0 <= \result;
   @ ensures \result <= a.length-x && \result <= a.length-y;
   @ ensures (\forall int i; x <= i && i < x+\result; a[i] == a[y+i-x] );
   @ ensures \result == a.length-x || \result == a.length-y || a[x+\result] != a[y+\result];

   @ pure @*/
/*@ loop_modifies l;
         @ maintaining 0 <= l && l+x <= a.length && l+y <= a.length && x!=y;
         @ maintaining (\forall int z; x <= z && z < x+l; a[z] == a[y+z-x] );
         @ decreasing a.length-l;
         @*/
/*@ public normal_behaviour
      @  requires sa.a != null;
      @  requires 0 <= a && a < sa.a.length;
      @  requires 0 <= b && b < sa.a.length;
      @  requires 0 <= c && c < sa.a.length;
      @  requires sa.compare(a,b) > 0;
      @  requires sa.compare(b,c) > 0;
      @  ensures sa.compare(a,c) > 0;
      @  pure helper
      @*/
/*@ public normal_behaviour
      @  requires sa.a != null;
      @  requires k > 0;
      @  requires 0 <= a && a <= sa.a.length - k;
      @  requires 0 <= b && b < sa.a.length;
      @  requires 0 <= c && c <= sa.a.length - k;
      @  requires sa.compare(a,b) >= 0;
      @  requires sa.compare(b,c) > 0;
      @  requires (\forall int t; a <= t && t < a+k; sa.a[t] == sa.a[c+t-a]);
      @  ensures  (\forall int t; a <= t && t < a+k; sa.a[t] == sa.a[b+t-a]);
      @  ensures  (\forall int t; b <= t && t < b+k; sa.a[t] == sa.a[c+t-b]);
      @  ensures  b < sa.a.length - k;
      @  pure helper
      @*/
/*@ public normal_behaviour
      @  requires \invariant_for(sa);
      @  requires 0 <= i && i < j && j < sa.a.length;
      @  ensures sa.compare(sa.suffixes[j], sa.suffixes[i]) > 0;
      @  pure helper
      @*/
/*@ decreases j - m;
          @ assignable     othing;
          @ loop_invariant sa.compare(sa.suffixes[m], sa.suffixes[i]) > 0 && i+1 <= m && m <= j;
          @*/
/*@ public normal_behaviour
      @  requires sa.a != null;
      @  requires 0 <= i && i < sa.a.length;
      @  ensures sa.compare(i,i) == 0;
      @  pure helper
      @*/
/*@ public normal_behaviour
      @  requires \invariant_for(sa);
      @  requires 0 <= i && i < j && j < sa.a.length;
      @  requires
      @     sa.suffixes[i] + k <= sa.a.length &&  sa.suffixes[j] + k <= sa.a.length &&
      @     (\forall int t; 0 <=t && t < k; sa.a[sa.suffixes[i]+t] == sa.a[sa.suffixes[j]+t]);
      @  ensures
      @     sa.suffixes[i+1] + k <= sa.a.length &&
      @     (\forall int t; 0 <=t && t < k; sa.a[sa.suffixes[i]+t] == sa.a[sa.suffixes[i+1]+t]);
      @  ensures \result;
      @  pure helper
      @*/
/*@ public normal_behaviour
      @  requires sa.a != null;
      @  requires 0 <= a && a < sa.a.length;
      @  requires 0 <= b && b < sa.a.length;
      @  requires 0 <= c && c < sa.a.length;
      @  requires sa.compare(a,b) > 0;
      @  requires sa.compare(b,c) > 0;
      @  ensures sa.compare(a,c) > 0;
      @  pure helper
      @*/
/*@ public normal_behaviour
      @  requires sa.a != null;
      @  requires k > 0;
      @  requires 0 <= a && a <= sa.a.length - k;
      @  requires 0 <= b && b < sa.a.length;
      @  requires 0 <= c && c <= sa.a.length - k;
      @  requires sa.compare(a,b) >= 0;
      @  requires sa.compare(b,c) > 0;
      @  requires (\forall int t; a <= t && t < a+k; sa.a[t] == sa.a[c+t-a]);
      @  ensures  (\forall int t; a <= t && t < a+k; sa.a[t] == sa.a[b+t-a]);
      @  ensures  (\forall int t; b <= t && t < b+k; sa.a[t] == sa.a[c+t-b]);
      @  ensures  b < sa.a.length - k;
      @  pure helper
      @*/
/*@ public normal_behaviour
      @  requires \invariant_for(sa);
      @  requires 0 <= i && i < j && j < sa.a.length;
      @  ensures sa.compare(sa.suffixes[j], sa.suffixes[i]) > 0;
      @  pure helper
      @*/
/*@ decreases j - m;
          @ assignable     othing;
          @ loop_invariant sa.compare(sa.suffixes[m], sa.suffixes[i]) > 0 && i+1 <= m && m <= j;
          @*/
/*@ public normal_behaviour
      @  requires sa.a != null;
      @  requires 0 <= i && i < sa.a.length;
      @  ensures sa.compare(i,i) == 0;
      @  pure helper
      @*/
/*@ public normal_behaviour
      @  requires \invariant_for(sa);
      @  requires 0 <= i && i < j && j < sa.a.length;
      @  requires
      @     sa.suffixes[i] + k <= sa.a.length &&  sa.suffixes[j] + k <= sa.a.length &&
      @     (\forall int t; 0 <=t && t < k; sa.a[sa.suffixes[i]+t] == sa.a[sa.suffixes[j]+t]);
      @  ensures
      @     sa.suffixes[i+1] + k <= sa.a.length &&
      @     (\forall int t; 0 <=t && t < k; sa.a[sa.suffixes[i]+t] == sa.a[sa.suffixes[i+1]+t]);
      @  ensures \result;
      @  pure helper
      @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@ normal_behavior
     @ requires \invariant_for(sa);
     @ requires sa.a.length >= 2;
     @ ensures 0 <= s && s < sa.a.length;
     @ ensures 0 <= t && t < sa.a.length;
     @ ensures 0 <= l && l < sa.a.length;
     @ ensures s+l <= sa.a.length && t+l <= sa.a.length;
     @ ensures (\forall int j; 0 <= j && j < l; sa.a[s+j] == sa.a[t+j]);
     @ ensures s != t || l == 0;
     @ ensures !(\exists int i,k; 0 <= i && i < k && k < sa.a.length-l;
     @            (\forall int j; k <= j && j <= k+l; sa.a[j] == sa.a[j-k+i]));
     @         // there is no LRS of length l+1
     @*/
/*@ loop_modifies x,s,t,l;
         @ maintaining sa != null && \invariant_for(sa);
         @ maintaining 0 <= s && s < sa.a.length;
         @ maintaining 0 <= t && t < sa.a.length;
         @ maintaining 0 <= l && l < sa.a.length;
         @ maintaining s+l <= sa.a.length && t+l <= sa.a.length;
         @ maintaining s != t || l == 0;
         @ maintaining 0 < x && x <= sa.a.length;
         @ maintaining (\forall int j; s <= j && j <s+l; sa.a[j] == sa.a[j-s+t]);
         @ maintaining !(\exists int w; 0 < w && w < x
         @               && sa.suffixes[w-1] < sa.a.length-l
         @               && sa.suffixes[w]   < sa.a.length-l;
         @               (\forall int j; sa.suffixes[w-1]+0 <= j && j <= sa.suffixes[w-1]+l;
         @                sa.a[j] == sa.a[sa.suffixes[w]+j-sa.suffixes[w-1]]));
         @ decreasing sa.a.length-x;
         @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@ normal_behavior
     @ requires \invariant_for(sa);
     @ requires sa.a.length >= 2;
     @ ensures 0 <= s && s < sa.a.length;
     @ ensures 0 <= t && t < sa.a.length;
     @ ensures 0 <= l && l < sa.a.length;
     @ ensures s+l <= sa.a.length && t+l <= sa.a.length;
     @ ensures (\forall int j; 0 <= j && j < l; sa.a[s+j] == sa.a[t+j]);
     @ ensures s != t || l == 0;
     @ ensures !(\exists int i,k; 0 <= i && i < k && k < sa.a.length-l;
     @            (\forall int j; k <= j && j <= k+l; sa.a[j] == sa.a[j-k+i]));
     @         // there is no LRS of length l+1
     @*/
/*@ loop_modifies x,s,t,l;
         @ maintaining sa != null && \invariant_for(sa);
         @ maintaining 0 <= s && s < sa.a.length;
         @ maintaining 0 <= t && t < sa.a.length;
         @ maintaining 0 <= l && l < sa.a.length;
         @ maintaining s+l <= sa.a.length && t+l <= sa.a.length;
         @ maintaining s != t || l == 0;
         @ maintaining 0 < x && x <= sa.a.length;
         @ maintaining (\forall int j; s <= j && j <s+l; sa.a[j] == sa.a[j-s+t]);
         @ maintaining !(\exists int w; 0 < w && w < x
         @               && sa.suffixes[w-1] < sa.a.length-l
         @               && sa.suffixes[w]   < sa.a.length-l;
         @               (\forall int j; sa.suffixes[w-1]+0 <= j && j <= sa.suffixes[w-1]+l;
         @                sa.a[j] == sa.a[sa.suffixes[w]+j-sa.suffixes[w-1]]));
         @ decreasing sa.a.length-x;
         @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@ public invariant
      @           (\forall int i; 0 <= i && i < a.length;
      @           (\exists int j; 0 <= j && j < a.length; suffixes[j]==i));
      @           // suffixes is a permutation on indices
      @ public invariant
      @         (\forall int i; 0 <= i && i < a.length;
      @                  0 <= suffixes[i] && suffixes[i] < a.length);
      @           // indices are in range (follows from above, cannot hurt)
      @ public invariant (\forall int i; 0 < i && i < a.length;
      @                        suffixes[i-1] != suffixes[i]);
      @           // indices are unique (follows from above, cannot hurt)
      @ public invariant (\forall int i; 0 < i && i < a.length;
      @                        compare(suffixes[i],suffixes[i-1]) > 0);
      @           // suffixes is ordered lexicographically
      @ public invariant a.length == suffixes.length;
      @*/
/*@ public normal_behavior
      @ ensures this.a == a;
      @*/
/*@ pure @*/
/*@ loop_modifies suffixes[*];
          @ maintaining 0 <= i && i <= a.length;
          @ maintaining (\forall int j; 0 <= j && j < i; suffixes[j] == j);
          @ decreasing a.length-i;
          @*/
/*@ normal_behavior
      @ requires a != null;
      @ requires 0 <= x && x < a.length;
      @ requires 0 <= y && y < a.length;
      @ ensures \result <  0 <==>
      @           (\exists int j; x <= j && j < a.length-y+x;
      @               ((j < a.length && a[j] < a[y+j-x] ) || j == a.length)
      @               && (\forall int k; x <= k && k < j; a[k] == a[k-x+y]));
      @ ensures \result == 0 <==> x == y;
      @ ensures \result >  0 <==>
      @           (\exists int j; x <= j && j < a.length;
      @               ((j < a.length-y+x && a[j] > a[y+j-x] ) || j == a.length-y+x)
      @               && (\forall int k; x <= k && k < j; a[k] == a[k-x+y]));
      @ ensures \result == -compare(y,x);
      @ accessible a, a[*];
      @ spec_public pure helper
      @*/
//@ private normal_behavior

//@   assignable data[*];

//@   ensures (\forall int k; 0 < k && k < data.length; data[k] >= data[k-1]);

/*@ helper @*/
/*@ loop_writes data[*];
              @ maintaining 0 <= l && l <= k;
              @ maintaining (\forall int i; l < i && i <= k;
              @                 compare(data[i],data[i-1]) > 0);
              @ maintaining (\forall int i; 0 < i && i < data.length
              @                 && !( l < i && i <= k);
              @                 data[i] == \old(data[i]));
              @ decreasing l;
              @*/
/*@ private normal_behavior
      @ requires 0 < x && x < data.length;
      @ ensures data[x] == \old(data[x-1]);
      @ ensures data[x-1] == \old(data[x]);
      @ assignable data[x], data[x-1];
      @*/
/*@ helper @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@ public invariant
      @           (\forall int i; 0 <= i && i < a.length;
      @           (\exists int j; 0 <= j && j < a.length; suffixes[j]==i));
      @           // suffixes is a permutation on indices
      @ public invariant
      @         (\forall int i; 0 <= i && i < a.length;
      @                  0 <= suffixes[i] && suffixes[i] < a.length);
      @           // indices are in range (follows from above, cannot hurt)
      @ public invariant (\forall int i; 0 < i && i < a.length;
      @                        suffixes[i-1] != suffixes[i]);
      @           // indices are unique (follows from above, cannot hurt)
      @ public invariant (\forall int i; 0 < i && i < a.length;
      @                        compare(suffixes[i],suffixes[i-1]) > 0);
      @           // suffixes is ordered lexicographically
      @ public invariant a.length == suffixes.length;
      @*/
/*@ public normal_behavior
      @ ensures this.a == a;
      @*/
/*@ pure @*/
/*@ loop_modifies suffixes[*];
          @ maintaining 0 <= i && i <= a.length;
          @ maintaining (\forall int j; 0 <= j && j < i; suffixes[j] == j);
          @ decreasing a.length-i;
          @*/
/*@ normal_behavior
      @ requires a != null;
      @ requires 0 <= x && x < a.length;
      @ requires 0 <= y && y < a.length;
      @ ensures \result <  0 <==>
      @           (\exists int j; x <= j && j < a.length-y+x;
      @               ((j < a.length && a[j] < a[y+j-x] ) || j == a.length)
      @               && (\forall int k; x <= k && k < j; a[k] == a[k-x+y]));
      @ ensures \result == 0 <==> x == y;
      @ ensures \result >  0 <==>
      @           (\exists int j; x <= j && j < a.length;
      @               ((j < a.length-y+x && a[j] > a[y+j-x] ) || j == a.length-y+x)
      @               && (\forall int k; x <= k && k < j; a[k] == a[k-x+y]));
      @ ensures \result == -compare(y,x);
      @ accessible a, a[*];
      @ spec_public pure helper
      @*/
//@ private normal_behavior

//@   assignable data[*];

//@   ensures (\forall int k; 0 < k && k < data.length; data[k] >= data[k-1]);

/*@ helper @*/
/*@ loop_writes data[*];
              @ maintaining 0 <= l && l <= k;
              @ maintaining (\forall int i; l < i && i <= k;
              @                 compare(data[i],data[i-1]) > 0);
              @ maintaining (\forall int i; 0 < i && i < data.length
              @                 && !( l < i && i <= k);
              @                 data[i] == \old(data[i]));
              @ decreasing l;
              @*/
/*@ private normal_behavior
      @ requires 0 < x && x < data.length;
      @ ensures data[x] == \old(data[x-1]);
      @ ensures data[x-1] == \old(data[x]);
      @ assignable data[x], data[x-1];
      @*/
/*@ helper @*/
/*@ normal_behavior
   @ requires 0 <= x && x < a.length;
   @ requires 0 <= y && y < a.length;
   @ requires x != y;

   @ ensures 0 <= \result;
   @ ensures \result <= a.length-x && \result <= a.length-y;
   @ ensures (\forall int i; x <= i && i < x+\result; a[i] == a[y+i-x] );
   @ ensures \result == a.length-x || \result == a.length-y || a[x+\result] != a[y+\result];

   @ pure @*/
/*@ loop_modifies l;
         @ maintaining 0 <= l && l+x <= a.length && l+y <= a.length && x!=y;
         @ maintaining (\forall int z; x <= z && z < x+l; a[z] == a[y+z-x] );
         @ decreasing a.length-l;
         @*/
/*@ normal_behavior
   @ requires 0 <= x && x < a.length;
   @ requires 0 <= y && y < a.length;
   @ requires x != y;

   @ ensures 0 <= \result;
   @ ensures \result <= a.length-x && \result <= a.length-y;
   @ ensures (\forall int i; x <= i && i < x+\result; a[i] == a[y+i-x] );
   @ ensures \result == a.length-x || \result == a.length-y || a[x+\result] != a[y+\result];

   @ pure @*/
/*@ loop_modifies l;
         @ maintaining 0 <= l && l+x <= a.length && l+y <= a.length && x!=y;
         @ maintaining (\forall int z; x <= z && z < x+l; a[z] == a[y+z-x] );
         @ decreasing a.length-l;
         @*/
/*@ public normal_behaviour
      @  requires sa.a != null;
      @  requires 0 <= a && a < sa.a.length;
      @  requires 0 <= b && b < sa.a.length;
      @  requires 0 <= c && c < sa.a.length;
      @  requires sa.compare(a,b) > 0;
      @  requires sa.compare(b,c) > 0;
      @  ensures sa.compare(a,c) > 0;
      @  pure helper
      @*/
//@ skipesc // Times out

/*@ public normal_behaviour
      @  requires sa.a != null;
      @  requires k > 0;
      @  requires 0 <= a && a <= sa.a.length - k;
      @  requires 0 <= b && b < sa.a.length;
      @  requires 0 <= c && c <= sa.a.length - k;
      @  requires sa.compare(a,b) >= 0;
      @  requires sa.compare(b,c) > 0;
      @  requires (\forall int t; a <= t && t < a+k; sa.a[t] == sa.a[c+t-a]);
      @  ensures  (\forall int t; a <= t && t < a+k; sa.a[t] == sa.a[b+t-a]);
      @  ensures  (\forall int t; b <= t && t < b+k; sa.a[t] == sa.a[c+t-b]);
      @  ensures  b < sa.a.length - k;
      @  pure helper
      @*/
//@ skipesc // Time out

/*@ public normal_behaviour
      @  requires \invariant_for(sa);
      @  requires 0 <= i && i < j && j < sa.a.length;
      @  ensures sa.compare(sa.suffixes[j], sa.suffixes[i]) > 0;
      @  pure helper
      @*/
//@ skipesc // Various proof failures

/*@ decreases j - m;
          @ loop_modifies     othing;
          @ loop_invariant sa.compare(sa.suffixes[m], sa.suffixes[i]) > 0 && i+1 <= m && m <= j;
          @*/
/*@ public normal_behaviour
      @  requires sa.a != null;
      @  requires 0 <= i && i < sa.a.length;
      @  ensures sa.compare(i,i) == 0;
      @  pure helper
      @*/
/*@ public normal_behaviour
      @  requires \invariant_for(sa);
      @  requires 0 <= i && i < j && j < sa.a.length;
      @  requires
      @     sa.suffixes[i] + k <= sa.a.length &&  sa.suffixes[j] + k <= sa.a.length &&
      @     (\forall int t; 0 <=t && t < k; sa.a[sa.suffixes[i]+t] == sa.a[sa.suffixes[j]+t]);
      @  ensures
      @     sa.suffixes[i+1] + k <= sa.a.length &&
      @     (\forall int t; 0 <=t && t < k; sa.a[sa.suffixes[i]+t] == sa.a[sa.suffixes[i+1]+t]);
      @  ensures \result;
      @  pure helper
      @*/
//@ skipesc // Time out

/*@ public normal_behaviour
      @  requires sa.a != null;
      @  requires 0 <= a && a < sa.a.length;
      @  requires 0 <= b && b < sa.a.length;
      @  requires 0 <= c && c < sa.a.length;
      @  requires sa.compare(a,b) > 0;
      @  requires sa.compare(b,c) > 0;
      @  ensures sa.compare(a,c) > 0;
      @  pure helper
      @*/
//@ skipesc // Times out

/*@ public normal_behaviour
      @  requires sa.a != null;
      @  requires k > 0;
      @  requires 0 <= a && a <= sa.a.length - k;
      @  requires 0 <= b && b < sa.a.length;
      @  requires 0 <= c && c <= sa.a.length - k;
      @  requires sa.compare(a,b) >= 0;
      @  requires sa.compare(b,c) > 0;
      @  requires (\forall int t; a <= t && t < a+k; sa.a[t] == sa.a[c+t-a]);
      @  ensures  (\forall int t; a <= t && t < a+k; sa.a[t] == sa.a[b+t-a]);
      @  ensures  (\forall int t; b <= t && t < b+k; sa.a[t] == sa.a[c+t-b]);
      @  ensures  b < sa.a.length - k;
      @  pure helper
      @*/
//@ skipesc // Time out

/*@ public normal_behaviour
      @  requires \invariant_for(sa);
      @  requires 0 <= i && i < j && j < sa.a.length;
      @  ensures sa.compare(sa.suffixes[j], sa.suffixes[i]) > 0;
      @  pure helper
      @*/
//@ skipesc // Various proof failures

/*@ decreases j - m;
          @ loop_modifies     othing;
          @ loop_invariant sa.compare(sa.suffixes[m], sa.suffixes[i]) > 0 && i+1 <= m && m <= j;
          @*/
/*@ public normal_behaviour
      @  requires sa.a != null;
      @  requires 0 <= i && i < sa.a.length;
      @  ensures sa.compare(i,i) == 0;
      @  pure helper
      @*/
/*@ public normal_behaviour
      @  requires \invariant_for(sa);
      @  requires 0 <= i && i < j && j < sa.a.length;
      @  requires
      @     sa.suffixes[i] + k <= sa.a.length &&  sa.suffixes[j] + k <= sa.a.length &&
      @     (\forall int t; 0 <=t && t < k; sa.a[sa.suffixes[i]+t] == sa.a[sa.suffixes[j]+t]);
      @  ensures
      @     sa.suffixes[i+1] + k <= sa.a.length &&
      @     (\forall int t; 0 <=t && t < k; sa.a[sa.suffixes[i]+t] == sa.a[sa.suffixes[i+1]+t]);
      @  ensures \result;
      @  pure helper
      @*/
//@ skipesc // Time out

/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
//@ ensures sa == arr;

//@ skipesc // Proof failures

/*@ normal_behavior
     @ requires \invariant_for(sa);
     @ requires sa.a.length >= 2;
     @ ensures 0 <= s && s < sa.a.length;
     @ ensures 0 <= t && t < sa.a.length;
     @ ensures 0 <= l && l < sa.a.length;
     @ ensures s+l <= sa.a.length && t+l <= sa.a.length;
     @ ensures (\forall int j; 0 <= j && j < l; sa.a[s+j] == sa.a[t+j]);
     @ ensures s != t || l == 0;
     @ ensures !(\exists int i,k; 0 <= i && i < k && k < sa.a.length-l;
     @            (\forall int j; k <= j && j <= k+l; sa.a[j] == sa.a[j-k+i]));
     @         // there is no LRS of length l+1
     @*/
//@ skipesc // Time out

/*@ loop_modifies x,s,t,l;
         @ maintaining sa != null && \invariant_for(sa);
         @ maintaining 0 <= s && s < sa.a.length;
         @ maintaining 0 <= t && t < sa.a.length;
         @ maintaining 0 <= l && l < sa.a.length;
         @ maintaining s+l <= sa.a.length && t+l <= sa.a.length;
         @ maintaining s != t || l == 0;
         @ maintaining 0 < x && x <= sa.a.length;
         @ maintaining (\forall int j; s <= j && j <s+l; sa.a[j] == sa.a[j-s+t]);
         @ maintaining !(\exists int w; 0 < w && w < x
         @               && sa.suffixes[w-1] < sa.a.length-l
         @               && sa.suffixes[w]   < sa.a.length-l;
         @               (\forall int j; sa.suffixes[w-1]+0 <= j && j <= sa.suffixes[w-1]+l;
         @                sa.a[j] == sa.a[sa.suffixes[w]+j-sa.suffixes[w-1]]));
         @ decreasing sa.a.length-x;
         @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
//@ ensures sa == arr;

//@ skipesc // Proof failures

/*@ normal_behavior
     @ requires \invariant_for(sa);
     @ requires sa.a.length >= 2;
     @ ensures 0 <= s && s < sa.a.length;
     @ ensures 0 <= t && t < sa.a.length;
     @ ensures 0 <= l && l < sa.a.length;
     @ ensures s+l <= sa.a.length && t+l <= sa.a.length;
     @ ensures (\forall int j; 0 <= j && j < l; sa.a[s+j] == sa.a[t+j]);
     @ ensures s != t || l == 0;
     @ ensures !(\exists int i,k; 0 <= i && i < k && k < sa.a.length-l;
     @            (\forall int j; k <= j && j <= k+l; sa.a[j] == sa.a[j-k+i]));
     @         // there is no LRS of length l+1
     @*/
//@ skipesc // Time out

/*@ loop_modifies x,s,t,l;
         @ maintaining sa != null && \invariant_for(sa);
         @ maintaining 0 <= s && s < sa.a.length;
         @ maintaining 0 <= t && t < sa.a.length;
         @ maintaining 0 <= l && l < sa.a.length;
         @ maintaining s+l <= sa.a.length && t+l <= sa.a.length;
         @ maintaining s != t || l == 0;
         @ maintaining 0 < x && x <= sa.a.length;
         @ maintaining (\forall int j; s <= j && j <s+l; sa.a[j] == sa.a[j-s+t]);
         @ maintaining !(\exists int w; 0 < w && w < x
         @               && sa.suffixes[w-1] < sa.a.length-l
         @               && sa.suffixes[w]   < sa.a.length-l;
         @               (\forall int j; sa.suffixes[w-1]+0 <= j && j <= sa.suffixes[w-1]+l;
         @                sa.a[j] == sa.a[sa.suffixes[w]+j-sa.suffixes[w-1]]));
         @ decreasing sa.a.length-x;
         @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@ public invariant
      @           (\forall int i; 0 <= i && i < a.length;
      @           (\exists int j; 0 <= j && j < a.length; suffixes[j]==i));
      @           // suffixes is a permutation on indices
      @ public invariant
      @         (\forall int i; 0 <= i && i < a.length;
      @                  0 <= suffixes[i] && suffixes[i] < a.length);
      @           // indices are in range (follows from above, cannot hurt)
      @ public invariant (\forall int i; 0 < i && i < a.length;
      @                        suffixes[i-1] != suffixes[i]);
      @           // indices are unique (follows from above, cannot hurt)
      @ public invariant (\forall int i; 0 < i && i < a.length;
      @                        compare(suffixes[i],suffixes[i-1]) > 0);
      @           // suffixes is ordered lexicographically
      @ public invariant a.length == suffixes.length;
      @*/
/*@ public normal_behavior
      @ ensures this.a == a;
      @*/
//@ skipesc // Various proof failures

/*@ pure @*/
/*@ loop_modifies suffixes[*];
          @ maintaining 0 <= i && i <= a.length;
          @ maintaining (\forall int j; 0 <= j && j < i; suffixes[j] == j);
          @ decreasing a.length-i;
          @*/
/*@ normal_behavior
      @ requires a != null;
      @ requires 0 <= x && x < a.length;
      @ requires 0 <= y && y < a.length;
      @ ensures \result <  0 <==>
      @           (\exists int j; x <= j && j < a.length-y+x;
      @               ((j < a.length && a[j] < a[y+j-x] ) || j == a.length)
      @               && (\forall int k; x <= k && k < j; a[k] == a[k-x+y]));
      @ ensures \result == 0 <==> x == y;
      @ ensures \result >  0 <==>
      @           (\exists int j; x <= j && j < a.length;
      @               ((j < a.length-y+x && a[j] > a[y+j-x] ) || j == a.length-y+x)
      @               && (\forall int k; x <= k && k < j; a[k] == a[k-x+y]));
      @ // ensures \result == -compare(y,x);
      @ accessible a, a[*];
      @ spec_public pure helper
      @*/
//@ skipesc // Various proof failures

//@ private normal_behavior

//@   assignable data[*];

//@   ensures (\forall int k; 0 < k && k < data.length; data[k] >= data[k-1]);

//@ skipesc // Various proof failures

/*@ helper @*/
/*@ loop_modifies data[*];
              @ maintaining 0 <= l && l <= k;
              @ maintaining (\forall int i; l < i && i <= k;
              @                 compare(data[i],data[i-1]) > 0);
              @ maintaining (\forall int i; 0 < i && i < data.length
              @                 && !( l < i && i <= k);
              @                 data[i] == \old(data[i]));
              @ decreasing l;
              @*/
/*@ private normal_behavior
      @ requires 0 < x && x < data.length;
      @ ensures data[x] == \old(data[x-1]);
      @ ensures data[x-1] == \old(data[x]);
      @ assignable data[x], data[x-1];
      @*/
/*@ helper @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@ public invariant
      @           (\forall int i; 0 <= i && i < a.length;
      @           (\exists int j; 0 <= j && j < a.length; suffixes[j]==i));
      @           // suffixes is a permutation on indices
      @ public invariant
      @         (\forall int i; 0 <= i && i < a.length;
      @                  0 <= suffixes[i] && suffixes[i] < a.length);
      @           // indices are in range (follows from above, cannot hurt)
      @ public invariant (\forall int i; 0 < i && i < a.length;
      @                        suffixes[i-1] != suffixes[i]);
      @           // indices are unique (follows from above, cannot hurt)
      @ public invariant (\forall int i; 0 < i && i < a.length;
      @                        compare(suffixes[i],suffixes[i-1]) > 0);
      @           // suffixes is ordered lexicographically
      @ public invariant a.length == suffixes.length;
      @*/
/*@ public normal_behavior
      @ ensures this.a == a;
      @*/
//@ skipesc // Various proof failures

/*@ pure @*/
/*@ loop_modifies suffixes[*];
          @ maintaining 0 <= i && i <= a.length;
          @ maintaining (\forall int j; 0 <= j && j < i; suffixes[j] == j);
          @ decreasing a.length-i;
          @*/
/*@ normal_behavior
      @ requires a != null;
      @ requires 0 <= x && x < a.length;
      @ requires 0 <= y && y < a.length;
      @ ensures \result <  0 <==>
      @           (\exists int j; x <= j && j < a.length-y+x;
      @               ((j < a.length && a[j] < a[y+j-x] ) || j == a.length)
      @               && (\forall int k; x <= k && k < j; a[k] == a[k-x+y]));
      @ ensures \result == 0 <==> x == y;
      @ ensures \result >  0 <==>
      @           (\exists int j; x <= j && j < a.length;
      @               ((j < a.length-y+x && a[j] > a[y+j-x] ) || j == a.length-y+x)
      @               && (\forall int k; x <= k && k < j; a[k] == a[k-x+y]));
      @ // ensures \result == -compare(y,x);
      @ accessible a, a[*];
      @ spec_public pure helper
      @*/
//@ skipesc // Various proof failures

//@ private normal_behavior

//@   assignable data[*];

//@   ensures (\forall int k; 0 < k && k < data.length; data[k] >= data[k-1]);

//@ skipesc // Various proof failures

/*@ helper @*/
/*@ loop_modifies data[*];
              @ maintaining 0 <= l && l <= k;
              @ maintaining (\forall int i; l < i && i <= k;
              @                 compare(data[i],data[i-1]) > 0);
              @ maintaining (\forall int i; 0 < i && i < data.length
              @                 && !( l < i && i <= k);
              @                 data[i] == \old(data[i]));
              @ decreasing l;
              @*/
/*@ private normal_behavior
      @ requires 0 < x && x < data.length;
      @ ensures data[x] == \old(data[x-1]);
      @ ensures data[x-1] == \old(data[x]);
      @ assignable data[x], data[x-1];
      @*/
/*@ helper @*/
//@ ensures a < 0 ==> \result == 1;

//@ ensures b < 0 ==> \result == 1;

//@ ensures a + b < 0 ==> \result == 1;

//@ ensures a >= 0 && b >= 0 && a+b >= 10 ==> \result == 2;

//@ ensures a < 0 ==> \result == 2;

//@ ensures b < 0 ==> \result == 2;

//@ ensures a + b < 0 ==> \result == 2;

//@ ensures a >= 0 && b >= 0 && a+b >= 10 ==> \result == 1;

//@ ensures a < 0 ==> \result == 1;

//@ ensures b < 0 ==> \result == 1;

//@ ensures a + b < 0 ==> \result == 1;

//@ ensures a >= 0 && b >= 0 && a+b >= 10 ==> \result == 2;

//@ ensures a < 0 ==> \result == 2;

//@ ensures b < 0 ==> \result == 2;

//@ ensures a + b < 0 ==> \result == 2;

//@ ensures a >= 0 && b >= 0 && a+b >= 10 ==> \result == 1;

//@ in chars;

//@ public model char[] chars;

//@ private represents chars = my_chars;

//@ ensures (\forall int i; 0 <= i && i < chars.length; chars[i] == the_chars[i]);

//@

//@ maintaining (\forall int j; 0 <= j && j < i; my_chars[j] == the_chars[j]);

//@ maintaining 0 <= i && i <= my_chars.length;

//@ decreasing my_chars.length - i;

//@ in chars;

//@ public model char[] chars;

//@ private represents chars = my_chars;

//@ ensures (\forall int i; 0 <= i && i < chars.length; chars[i] == the_chars[i]);

//@

//@ maintaining (\forall int j; 0 <= j && j < i; my_chars[j] == the_chars[j]);

//@ maintaining 0 <= i && i <= my_chars.length;

//@ decreasing my_chars.length - i;

/*@ spec_public */
//@ ensures my_chars.length == the_chars.length;

//@ ensures (\forall int i; 0 <= i && i < my_chars.length; my_chars[i] == the_chars[i]);

//@ maintaining (\forall int j; 0 <= j && j < i; my_chars[j] == the_chars[j]);

//@ maintaining 0 <= i && i <= my_chars.length;

//@ decreasing my_chars.length - i;

/*@ spec_public */
//@ ensures my_chars.length == the_chars.length;

//@ ensures (\forall int i; 0 <= i && i < my_chars.length; my_chars[i] == the_chars[i]);

//@ maintaining (\forall int j; 0 <= j && j < i; my_chars[j] == the_chars[j]);

//@ maintaining 0 <= i && i <= my_chars.length;

//@ decreasing my_chars.length - i;

/*@ spec_public nullable */
/*@ spec_public nullable */
/*@ spec_public nullable */
/*@ spec_public nullable */
//@ ensures (\forall int i; 0 <= i && i < my_chars.length; my_chars[i] == the_array[i]);


//@ ensures (\forall int i; 0 <= i && i < my_ints.length; my_ints[i] == the_array[i]);


//@ ensures my_Objects.length == the_array.length;

//@ ensures (\forall int i; 0 <= i && i < my_Objects.length; my_Objects[i] == the_array[i]);


//@ ensures my_Integers.length == the_array.length;

//@ ensures (\forall int i; 0 <= i && i < my_Integers.length; my_Integers[i] == the_array[i]);


/*@ spec_public nullable */
/*@ spec_public nullable */
/*@ spec_public nullable */
/*@ spec_public nullable */
//@ ensures (\forall int i; 0 <= i && i < my_chars.length; my_chars[i] == the_array[i]);


//@ ensures (\forall int i; 0 <= i && i < my_ints.length; my_ints[i] == the_array[i]);


//@ ensures my_Objects.length == the_array.length;

//@ ensures (\forall int i; 0 <= i && i < my_Objects.length; my_Objects[i] == the_array[i]);


//@ ensures my_Integers.length == the_array.length;

//@ ensures (\forall int i; 0 <= i && i < my_Integers.length; my_Integers[i] == the_array[i]);


/*@ spec_public */
/*@ spec_public */
/*@ spec_public */
/*@ spec_public */
//@ ensures (\forall int i; 0 <= i && i < my_chars.length; my_chars[i] == the_array[i]);


//@ ensures (\forall int i; 0 <= i && i < my_ints.length; my_ints[i] == the_array[i]);


//@ ensures my_Objects.length == the_array.length;

//@ ensures (\forall int i; 0 <= i && i < my_Objects.length; my_Objects[i] == the_array[i]);


//@ assert the_array.length >= 0;

//@ assert the_array instanceof Object[];

//@ assert my_Objects instanceof Object[];

//@ assert \elemtype(\typeof(the_array)) <: \elemtype(\typeof(my_Objects));

//@ assert 0 + the_array.length <= ((Object[])the_array).length;

//@ assert 0 + the_array.length <= ((Object[])my_Objects).length;

//@ ensures my_Integers.length == the_array.length;

//@ ensures (\forall int i; 0 <= i && i < my_Integers.length; my_Integers[i] == the_array[i]);


/*@ spec_public */
/*@ spec_public */
/*@ spec_public */
/*@ spec_public */
//@ ensures (\forall int i; 0 <= i && i < my_chars.length; my_chars[i] == the_array[i]);


//@ ensures (\forall int i; 0 <= i && i < my_ints.length; my_ints[i] == the_array[i]);


//@ ensures my_Objects.length == the_array.length;

//@ ensures (\forall int i; 0 <= i && i < my_Objects.length; my_Objects[i] == the_array[i]);


//@ assert the_array.length >= 0;

//@ assert the_array instanceof Object[];

//@ assert my_Objects instanceof Object[];

//@ assert \elemtype(\typeof(the_array)) <: \elemtype(\typeof(my_Objects));

//@ assert 0 + the_array.length <= ((Object[])the_array).length;

//@ assert 0 + the_array.length <= ((Object[])my_Objects).length;

//@ ensures my_Integers.length == the_array.length;

//@ ensures (\forall int i; 0 <= i && i < my_Integers.length; my_Integers[i] == the_array[i]);


//@ public normal_behavior

//@   ensures \result == "ABC".equals(s);

//@ pure

//@ public normal_behavior

//@   ensures "ABC".equals(s) ==> \result == 1;

//@   ensures "ABD".equals(s) ==> \result == 2;

//@   ensures "DEF".equals(s) ==> \result == 3;

//@   ensures !("ABC".equals(s)|"ABD".equals(s)|"DEF".equals(s)) ==> \result == -1;

//@ pure

//@ public normal_behavior

//@   ensures \result == "ABC".equals(s);

//@ pure

//@ public normal_behavior

//@   ensures "ABC".equals(s) ==> \result == 1;

//@   ensures "ABD".equals(s) ==> \result == 2;

//@   ensures "DEF".equals(s) ==> \result == 3;

//@   ensures !("ABC".equals(s)|"ABD".equals(s)|"DEF".equals(s)) ==> \result == -1;

//@ pure

//@ requires k < 0;

//@ ensures \result == 0;

//@ also

//@ requires true;

//@ requires k >= 0;

//@ ensures \result != 0;

//@ requires k < 0;

//@ ensures \result == 0;

//@ also

//@ requires true;

//@ requires k >= 0;

//@ ensures \result != 0;

//@ loop_invariant 0 <= i && i <= 10;

//@ loop_invariant i == j;

//@ decreases 10-i;

//@ loop_invariant 0 <= i && i <= 10;

//@ loop_invariant i == j;

//@ loop_invariant i == \count;

//@ decreases 9-i;

//@ loop_invariant 0 <= i && i <= 10;

//@ loop_invariant i == j;

//@ decreases 8-i;

//@ loop_invariant 0 <= i && i <= 10;

//@ loop_invariant i == j;

//@ decreases 10-i;

//@ loop_invariant 0 <= i && i <= 10;

//@ loop_invariant i == j;

//@ loop_invariant i == \count;

//@ decreases 9-i;

//@ loop_invariant 0 <= i && i <= 10;

//@ loop_invariant i == j;

//@ decreases 8-i;

//@ ensures \result == 41;

//@ requires true;

//@ ensures \result != 0;

//@ ensures \result == 41;

//@ requires true;

//@ ensures \result != 0;

//@ requires true;

//@ ensures \result != 0;

//@ assert \typeof(o) == \type(Object);

//@ requires true;

//@ ensures \result != 0;

//@ assert \typeof(o) == \type(Object);

//@ requires true;

//@ assignable k;

//@ signals (Exception e) false;

//@ requires true;

//@ assignable k;

//@ ensures k == 2;

//@ signals (Exception e) k == 1;

//@ requires true;

//@ assignable k;

//@ ensures k == 2;

//@ signals (Exception e) k == 1;

//@ requires true;

//@ assignable k;

//@ signals (Exception e) false;

//@ requires true;

//@ assignable k;

//@ ensures k == 2;

//@ signals (Exception e) k == 1;

//@ requires true;

//@ assignable k;

//@ ensures k == 2;

//@ signals (Exception e) k == 1;

//@ assert i == 0 &&     onnullelements(a);

//@ assert     ot_modified(i);

//@ assert i == 4 &&     ot_modified(i);

//@ assert i == 0 &&     onnullelements(a);

//@ assert     ot_modified(i);

//@ assert i == 4 &&     ot_modified(i);

//@ loop_invariant j == i && 0 <= i && i <= k;

//@ assert j == k;

//@ loop_invariant j == i && 0 <= i && i <= k;

//@ assert j == k;

//@ loop_invariant j == i && 0 <= i && i <= k;

//@ assert false;

//@ assert j == k;

//@ loop_invariant j == i && 0 <= i && i <= k;

//@ decreases j;

//@ assert j == k;

//@ loop_invariant j == i && 0 <= i && i <= k;

//@ decreases i-j;

//@ assert j == k;

//@ loop_invariant j == i && 0 <= i && i <= k;

//@ decreases k-j-1;

//@ assert j == k;

//@ loop_invariant j == i && 0 <= i && i <= k;

//@ decreases k-j-2;

//@ assert j == k;

//@ loop_invariant j == 2*i && 0 <= i && i <= k;

//@ assert j == k+k;

//@ loop_invariant j == 2*i && 0 <= i && i <= k;

//@ assert j == k+k;

//@ loop_invariant j == 2*i && 0 <= i && i <= k;

//@ assert j == k+k;

//@ loop_invariant j == 2*i && 0 <= i && i < k;

//@ decreases k-i;

//@ assert j == k+k;

//@ loop_invariant j == 2*i && 0 <= i && i < k;

//@ assert j == k+k;

//@ loop_invariant j == 2*i && 0 <= i && i < k;

//@ assert j == k+k;

//@ loop_invariant j == \count && 0 <= \count && \count <= a.length;

//@ assert j == a.length;

//@ loop_invariant j == 0 && 0 <= \count && \count <= a.length;

//@ assert j == a.length;

//@ loop_invariant j == \count && 0 <= \count && \count <= a.length;

//@ loop_invariant j == \count && 0 <= \count && \count <= a.length;

//@ decreases a.length - j;

//@ assert j == a.length;

//@ loop_invariant j == \count && 0 <= \count && \count <= a.length;

//@ decreases j;

//@ assert j == a.length;

//@ loop_invariant j == \count && 0 <= \count && \count <= a.length;

//@ decreases -j;

//@ assert j == a.length;

//@ loop_invariant j == i && 0 <= i && i <= k;

//@ assert j == k;

//@ loop_invariant j == i && 0 <= i && i <= k;

//@ assert j == k;

//@ loop_invariant j == i && 0 <= i && i <= k;

//@ assert false;

//@ assert j == k;

//@ loop_invariant j == i && 0 <= i && i <= k;

//@ decreases j;

//@ assert j == k;

//@ loop_invariant j == i && 0 <= i && i <= k;

//@ decreases i-j;

//@ assert j == k;

//@ loop_invariant j == i && 0 <= i && i <= k;

//@ decreases k-j-1;

//@ assert j == k;

//@ loop_invariant j == i && 0 <= i && i <= k;

//@ decreases k-j-2;

//@ assert j == k;

//@ loop_invariant j == 2*i && 0 <= i && i <= k;

//@ assert j == k+k;

//@ loop_invariant j == 2*i && 0 <= i && i <= k;

//@ assert j == k+k;

//@ loop_invariant j == 2*i && 0 <= i && i <= k;

//@ assert j == k+k;

//@ loop_invariant j == 2*i && 0 <= i && i < k;

//@ decreases k-i;

//@ assert j == k+k;

//@ loop_invariant j == 2*i && 0 <= i && i < k;

//@ assert j == k+k;

//@ loop_invariant j == 2*i && 0 <= i && i < k;

//@ assert j == k+k;

//@ loop_invariant j == \count && 0 <= \count && \count <= a.length;

//@ assert j == a.length;

//@ loop_invariant j == 0 && 0 <= \count && \count <= a.length;

//@ assert j == a.length;

//@ loop_invariant j == \count && 0 <= \count && \count <= a.length;

//@ loop_invariant j == \count && 0 <= \count && \count <= a.length;

//@ decreases a.length - j;

//@ assert j == a.length;

//@ loop_invariant j == \count && 0 <= \count && \count <= a.length;

//@ decreases j;

//@ assert j == a.length;

//@ loop_invariant j == \count && 0 <= \count && \count <= a.length;

//@ decreases -j;

//@ assert j == a.length;

//@ ensures \result == 41;

//@ requires true;

//@ ensures \result != 0;

//@ assert k != 7;

//@ assert (k == 7) ==> (k != 7);

//@ assert !((k != 7) ==> (k == 7));

//@ ghost int x = 9;

//@ set x = x + 9;

//@ debug x = 0;

//@ set x = (\lbl AAA k+1);

//@ maintaining m == 14 + z && 0 <= z && z <= 4;

//@ assume a.length > 10;

//@ ensures \result == 41;

//@ requires true;

//@ ensures \result != 0;

//@ assert k != 7;

//@ assert (k == 7) ==> (k != 7);

//@ assert !((k != 7) ==> (k == 7));

//@ ghost int x = 9;

//@ set x = x + 9;

//@ debug x = 0;

//@ set x = (\lbl AAA k+1);

//@ maintaining m == 14 + z && 0 <= z && z <= 4;

//@ assume a.length > 10;

//@ public invariant my_element_data != null;

//@ public invariant my_element_count >= 0;

//@ public invariant my_element_count <= my_element_data.length;

//@ public invariant my_capacity_increment > 0;

//@ public invariant \elemtype(\typeof(my_element_data)) == \type(Object);

/*@ spec_public */
/*@ spec_public */
/*@ spec_public */
//@ requires the_initial_capacity >= 0 && the_capacity_increment > 0;

//@ ghost Object[] nd = new_data;

//@ loop_invariant 0 <= i && i <= my_element_count && new_data == nd;

//@ decreases my_element_count - i;

//@ loop_invariant 0 <= i && i <= my_element_count;

//@ decreases i;

//@ loop_invariant the_index == i || (the_index <= i && i <= my_element_count);

//@ decreases my_element_count - i;

//@ requires the_index >= 0;

//@ public invariant my_element_data != null;

//@ public invariant my_element_count >= 0;

//@ public invariant my_element_count <= my_element_data.length;

//@ public invariant my_capacity_increment > 0;

//@ public invariant \elemtype(\typeof(my_element_data)) == \type(Object);

/*@ spec_public */
/*@ spec_public */
/*@ spec_public */
//@ requires the_initial_capacity >= 0 && the_capacity_increment > 0;

//@ ghost Object[] nd = new_data;

//@ loop_invariant 0 <= i && i <= my_element_count && new_data == nd;

//@ decreases my_element_count - i;

//@ loop_invariant 0 <= i && i <= my_element_count;

//@ decreases i;

//@ loop_invariant the_index == i || (the_index <= i && i <= my_element_count);

//@ decreases my_element_count - i;

//@ requires the_index >= 0;

//@ requires i == 0;

//@ signals (RuntimeException) false; // SHOULD FAIL

//@ reachable; // ERROR

//@ requires i == 0;

//@ signals (RuntimeException) false;

//@ reachable;

//@ requires i == 0;

//@ signals (RuntimeException) false;

//@ reachable;

//@ requires i == 0;

//@ signals (RuntimeException) false;

//@ reachable;

//@ requires i == 0;

//@ signals (RuntimeException) false;

//@ reachable;

//@ requires i == 0;

//@ signals (RuntimeException) false; // SHOULD FAIL

//@ reachable; // ERROR

//@ requires i == 0;

//@ signals (RuntimeException) false;

//@ reachable;

//@ requires i == 0;

//@ signals (RuntimeException) false;

//@ reachable;

//@ requires i == 0;

//@ signals (RuntimeException) false;

//@ reachable;

//@ requires i == 0;

//@ signals (RuntimeException) false;

//@ reachable;

//@ requires n >= 0 && n <= 20;

//@ assert fact == spec_factorial(n);

//@ assert spec_factorial(0) == 1;

//@ maintaining c >= 1 && c <= n+1;

//@ maintaining fact > 0;

//@ maintaining fact <= Long.MAX_VALUE;

//@ maintaining spec_factorial(c - 1) == fact;

//@ decreases n - c;

//@ assert c <= n;

//@ assume fact*c <= Long.MAX_VALUE;

//@ assert c == n+1;

//@ assert spec_factorial(c - 1) == fact;

/*@ requires n > 0 && n <= 20;
            ensures 0 <= \result && \result <= Long.MAX_VALUE;
            ensures \result == n * spec_factorial(n-1);
           also
            requires n == 0;
            ensures \result == 1;
        public static model function pure long spec_factorial(int n){
	    if(n == 0) {
		 return 1;
	    }
	    else {
		//@ assert n > 0 && n <= 20;
		//@ assume n * spec_factorial(n-1) <= Long.MAX_VALUE;
		return n * spec_factorial(n-1);
	    }

        }@*/
//@ requires n >= 0 && n <= 20;

//@ assert fact == spec_factorial(n);

//@ assert spec_factorial(0) == 1;

//@ maintaining c >= 1 && c <= n+1;

//@ maintaining fact > 0;

//@ maintaining fact <= Long.MAX_VALUE;

//@ maintaining spec_factorial(c - 1) == fact;

//@ decreases n - c;

//@ assert c <= n;

//@ assume fact*c <= Long.MAX_VALUE;

//@ assert c == n+1;

//@ assert spec_factorial(c - 1) == fact;

/*@ requires n > 0 && n <= 20;
            ensures 0 <= \result && \result <= Long.MAX_VALUE;
            ensures \result == n * spec_factorial(n-1);
           also
            requires n == 0;
            ensures \result == 1;
        public static model function pure long spec_factorial(int n){
	    if(n == 0) {
		 return 1;
	    }
	    else {
		//@ assert n > 0 && n <= 20;
		//@ assume n * spec_factorial(n-1) <= Long.MAX_VALUE;
		return n * spec_factorial(n-1);
	    }

        }@*/
//@ requires n >= 0 && n <= 19;

//@ ensures \result == spec_factorial(n);

//@ assert fact == spec_factorial(n);

//@ assert spec_factorial(0) == 1;

//@ maintaining c >= 1 && c <= n+1;

//@ maintaining fact > 0;

//@ maintaining fact <= Long.MAX_VALUE;

//@ maintaining spec_factorial(c - 1) == fact;

//@ loop_writes c, fact;

//@ decreases n - c;

//@ assert spec_factorial(c-1) == fact;

//@ assert c <= n;

//@ assume fact*c <= Long.MAX_VALUE;

//@ assert spec_factorial(c) == c * spec_factorial(c-1);

//@ assert spec_factorial(c) == fact;

//@ assert c == n+1;

//@ assert spec_factorial(c - 1) == fact;

/*@ requires n > 0 && n <= 20;
        ensures 0 <= \result && \result <= Long.MAX_VALUE;
        ensures \result == n * spec_factorial(n-1);
     also
        requires n == 0;
        ensures \result == 1;
     public static model function pure long spec_factorial(int n){
        if (n == 0) {
            return 1;
        } else {
            //@ assert n > 0 && n <= 20;
            //@ assume n * spec_factorial(n-1) <= Long.MAX_VALUE;
            return n * spec_factorial(n-1);
        }
    }
    @*/
//@ requires n >= 0 && n <= 19;

//@ ensures \result == spec_factorial(n);

//@ assert fact == spec_factorial(n);

//@ assert spec_factorial(0) == 1;

//@ maintaining c >= 1 && c <= n+1;

//@ maintaining fact > 0;

//@ maintaining fact <= Long.MAX_VALUE;

//@ maintaining spec_factorial(c - 1) == fact;

//@ loop_writes c, fact;

//@ decreases n - c;

//@ assert spec_factorial(c-1) == fact;

//@ assert c <= n;

//@ assume fact*c <= Long.MAX_VALUE;

//@ assert spec_factorial(c) == c * spec_factorial(c-1);

//@ assert spec_factorial(c) == fact;

//@ assert c == n+1;

//@ assert spec_factorial(c - 1) == fact;

/*@ requires n > 0 && n <= 20;
        ensures 0 <= \result && \result <= Long.MAX_VALUE;
        ensures \result == n * spec_factorial(n-1);
     also
        requires n == 0;
        ensures \result == 1;
     public static model function pure long spec_factorial(int n){
        if (n == 0) {
            return 1;
        } else {
            //@ assert n > 0 && n <= 20;
            //@ assume n * spec_factorial(n-1) <= Long.MAX_VALUE;
            return n * spec_factorial(n-1);
        }
    }
    @*/
//@ requires i >= 0;

//@ also feasible_behavior

//@   requires i == 12;

//@ reachable;

//@ requires i >= 0;

//@ also feasible_behavior

//@   requires i == 12 || i == 2;

//@ reachable;

//@ requires i >= 0;

//@ also feasible_behavior

//@   requires i == 12 || i == -2;

//@ reachable;

//@ requires i >= 0;

//@ also feasible_behavior

//@   requires i == 12;

//@ reachable;

//@ requires i >= 0;

//@ also feasible_behavior

//@   requires i == 12 || i == 2;

//@ reachable;

//@ requires i >= 0;

//@ also feasible_behavior

//@   requires i == 12 || i == -2;

//@ reachable;

//@ invariant a >= 0;

//@ requires a < 0;

//@ invariant a >= 0;

//@ requires a < 0;

//@ assert a ==1;  // result of geta() is 0 so result of getb() should be 1 and assertion should pass.

/*@  public normal_behavior
    @     ensures \result == 0;  // postcond 1  // incorrect postCondition
    @*/
/*@ pure @*/
/*@  public normal_behavior
    @     ensures \result == geta() + 1;   // postcond 2
    @*/
//@ assert a ==1;  // result of geta() is 0 so result of getb() should be 1 and assertion should pass.

/*@  public normal_behavior
    @     ensures \result == 0;  // postcond 1  // incorrect postCondition
    @*/
/*@ pure @*/
/*@  public normal_behavior
    @     ensures \result == geta() + 1;   // postcond 2
    @*/
//@ requires num >= 0;

//@ ensures \result == num;

//@ ensures \result >= 0;

//@ also

//@ requires num < 0 && num > Integer.MIN_VALUE;

//@ ensures \result == -num;

//@ ensures \result >= 0;

/*@ pure @*/
//@ requires num >= 0;

//@ ensures \result == num;

//@ ensures \result >= 0;

//@ also

//@ requires num < 0 && num > Long.MIN_VALUE;

//@ ensures \result == -num;

//@ ensures \result >= 0;

/*@ pure @*/
//@ requires num >= 0;

//@ ensures \result == num;

//@ ensures \result >= 0;

//@ also

//@ requires num < 0 && num > Integer.MIN_VALUE;

//@ ensures \result == -num;

//@ ensures \result >= 0;

/*@ pure @*/
//@ requires num >= 0;

//@ ensures \result == num;

//@ ensures \result >= 0;

//@ also

//@ requires num < 0 && num > Long.MIN_VALUE;

//@ ensures \result == -num;

//@ ensures \result >= 0;

/*@ pure @*/
//@ public normal_behavior

//@ requires d != 0;

//@ pure function

//@ requires num1 != Integer.MAX_VALUE && num1 != Integer.MAX_VALUE && num1 > Integer.MIN_VALUE + 1 && num2 > Integer.MIN_VALUE + 1;

//@ {|

//@ requires num1 != 0 && num2 != 0;

//@ old int tnum1 = Math.abs(num1);

//@ old int tnum2 = Math.abs(num2);

//@ old int greater = (tnum1 > tnum2) ? tnum1 : tnum2;

//@ old int smaller = (tnum1 > tnum2) ? tnum2 : tnum1;

//@ ensures \result > 0;

//@ ensures div(tnum1,\result) == 0;

//@ ensures div(tnum2,\result) == 0;

//@ ensures (\forall int i; i > \result && i <= smaller; div(smaller,i) == 0 ==> div(greater,i) != 0);

//@ also

//@ requires num1 == 0 && num2 != 0;

//@ requires num2 != Integer.MIN_VALUE;

//@ ensures \result == Math.abs(num2);

//@ also

//@ requires num1 != 0 && num2 == 0;

//@ requires num1 != Integer.MIN_VALUE;

//@ old int tnum1a = Math.abs(num1);  // FIXME: If we eliminnate this old clause, things work, but otherwise not.

//@ ensures \result == \lbl TNUM1a tnum1a;

//@ |}

//@ assume div(num1, gcd) == 0 && div(num2, gcd) == 0;

//@ show \old(num1), \old(num2), num1, num2, num1>num2, Integer.MAX_VALUE;

//@ maintaining gcd <= num1 && gcd <= num2;

//@ maintaining i > 0 && i <= num1 + 1 && i<= num2 + 1;

//@ maintaining 0 < gcd && gcd <= i;

//@ maintaining div(num1, gcd) == 0 && div(num2, gcd) == 0;

//@ maintaining (\forall int j; 1 <= j &&  j<i; div(num1, j) == 0 && div(num2, j) == 0 ==> j <= gcd);

//@ decreases num1 - i;

//@ public normal_behavior

//@ requires d != 0;

//@ pure function

//@ requires num1 != Integer.MAX_VALUE && num1 != Integer.MAX_VALUE && num1 > Integer.MIN_VALUE + 1 && num2 > Integer.MIN_VALUE + 1;

//@ {|

//@ requires num1 != 0 && num2 != 0;

//@ old int tnum1 = Math.abs(num1);

//@ old int tnum2 = Math.abs(num2);

//@ old int greater = (tnum1 > tnum2) ? tnum1 : tnum2;

//@ old int smaller = (tnum1 > tnum2) ? tnum2 : tnum1;

//@ ensures \result > 0;

//@ ensures div(tnum1,\result) == 0;

//@ ensures div(tnum2,\result) == 0;

//@ ensures (\forall int i; i > \result && i <= smaller; div(smaller,i) == 0 ==> div(greater,i) != 0);

//@ also

//@ requires num1 == 0 && num2 != 0;

//@ requires num2 != Integer.MIN_VALUE;

//@ ensures \result == Math.abs(num2);

//@ also

//@ requires num1 != 0 && num2 == 0;

//@ requires num1 != Integer.MIN_VALUE;

//@ old int tnum1a = Math.abs(num1);  // FIXME: If we eliminnate this old clause, things work, but otherwise not.

//@ ensures \result == \lbl TNUM1a tnum1a;

//@ |}

//@ assume div(num1, gcd) == 0 && div(num2, gcd) == 0;

//@ show \old(num1), \old(num2), num1, num2, num1>num2, Integer.MAX_VALUE;

//@ maintaining gcd <= num1 && gcd <= num2;

//@ maintaining i > 0 && i <= num1 + 1 && i<= num2 + 1;

//@ maintaining 0 < gcd && gcd <= i;

//@ maintaining div(num1, gcd) == 0 && div(num2, gcd) == 0;

//@ maintaining (\forall int j; 1 <= j &&  j<i; div(num1, j) == 0 && div(num2, j) == 0 ==> j <= gcd);

//@ decreases num1 - i;

//@ requires System.out.isOpen && System.err.isOpen;

//@ requires \invariant_for(System.out);

//@ requires \invariant_for(System.err);

//@ assume \invariant_for(System.err);

//@ assume System.err.isOpen;

//@ requires System.out.isOpen && System.err.isOpen;

//@ requires \invariant_for(System.out);

//@ requires \invariant_for(System.err);

//@ assume \invariant_for(System.err);

//@ assume System.err.isOpen;

//@ ensures (elements.contains(s));

//@ ensures (elements.contains(s));

//@ model import org.jmlspecs.models.JMLEqualsToObjectMap;

/*@ spec_public nullable @*/
//@ model import org.jmlspecs.models.JMLEqualsToObjectMap;

/*@ spec_public nullable @*/
//@ requires true;

//@ ensures pat.length == 0 ==> \result == true;

//@ ensures a.length == 0  && pat.length == 1 ==> \result == true;

//@ ensures a.length == 0  && pat.length > 1 ==> \result == false;

//@ ensures pat.length > 0 && a.length > 0 ==>  Relaxed.diffIndex(pat, a) == pat.length ==> \result == true;

//@ maintaining 0 <= index && index <= pat.length;

//@ maintaining 0 <= index - shift && index - shift <= a.length && 0 <= shift && shift <= 1;

//@ maintaining  Relaxed.diffIndex(pat, a) > index ==>(\forall int i; 0 <= i && i < index; pat[i] == a[i]) ;

//@ maintaining  Relaxed.diffIndex(pat, a) >  index ==> (\forall int j; Relaxed.diffIndex(pat, a) < j && j < index; pat[j] == a[j - 1]);

//@ decreases pat.length - index - shift;

//@ requires true;

//@ ensures 0 <= \result && \result <= pat.length;

//@ ensures (\forall int i; 0 <= i && i < \result; pat[i] == a[i]);

//@ ensures (pat.length > \result) && (a.length > \result) ==> pat[\result] != a[\result];

/*@ pure function @*/
//@ maintaining 0 <= index && index <= pat.length && index <= a.length;

//@ maintaining (\forall int i; 0 <= i && i < index; pat[i] == a[i]);

//@ decreases pat.length - index;

//@ requires true;

//@ ensures pat.length == 0 ==> \result == true;

//@ ensures a.length == 0  && pat.length == 1 ==> \result == true;

//@ ensures a.length == 0  && pat.length > 1 ==> \result == false;

//@ ensures pat.length > 0 && a.length > 0 ==>  Relaxed.diffIndex(pat, a) == pat.length ==> \result == true;

//@ maintaining 0 <= index && index <= pat.length;

//@ maintaining 0 <= index - shift && index - shift <= a.length && 0 <= shift && shift <= 1;

//@ maintaining  Relaxed.diffIndex(pat, a) > index ==>(\forall int i; 0 <= i && i < index; pat[i] == a[i]) ;

//@ maintaining  Relaxed.diffIndex(pat, a) >  index ==> (\forall int j; Relaxed.diffIndex(pat, a) < j && j < index; pat[j] == a[j - 1]);

//@ decreases pat.length - index - shift;

//@ requires true;

//@ ensures 0 <= \result && \result <= pat.length;

//@ ensures (\forall int i; 0 <= i && i < \result; pat[i] == a[i]);

//@ ensures (pat.length > \result) && (a.length > \result) ==> pat[\result] != a[\result];

/*@ pure function @*/
//@ maintaining 0 <= index && index <= pat.length && index <= a.length;

//@ maintaining (\forall int i; 0 <= i && i < index; pat[i] == a[i]);

//@ decreases pat.length - index;

//@ ensures pat.length > 0 && a.length > 0 ==>  Relaxed.diffIndex(pat, a) == pat.length ==> \result == true;

//@ maintaining  ( Relaxed.diffIndex(pat, a) >  0 ==> (\forall int j; Relaxed.diffIndex(pat, a) < j && j < 0; pat[j] == a[j - 1]));

//@ loop_writes pat;

//@ maintaining  ( Relaxed.diffIndex(pat, a) >  0 ==> (\forall int j; Relaxed.diffIndex(pat, a) < j && j < 0; pat[j] == a[j - 1]));

/*@ pure  @*/
//@ ensures pat.length > 0 && a.length > 0 ==>  Relaxed.diffIndex(pat, a) == pat.length ==> \result == true;

//@ maintaining  ( Relaxed.diffIndex(pat, a) >  0 ==> (\forall int j; Relaxed.diffIndex(pat, a) < j && j < 0; pat[j] == a[j - 1]));

//@ loop_writes pat;

//@ maintaining  ( Relaxed.diffIndex(pat, a) >  0 ==> (\forall int j; Relaxed.diffIndex(pat, a) < j && j < 0; pat[j] == a[j - 1]));

/*@ pure  @*/
//@ assert myp.getFirst() == 5 && myp.getSecond() == 4;

//@ assert pm.getMax() == 5 && r.get(1) == 4;

//@ assert myp.getFirst() == 5 && myp.getSecond() == 4;

//@ assert pm.getMax() == 5 && r.get(1) == 4;

/*@ spec_public @*/
/*@ assignable first, second;
      @ ensures first == fst && second == snd; @*/
/*@ ensures \result == first; @*/
/*@ pure @*/
/*@ ensures \result == second; @*/
/*@ public model_program {
      @   normal_behavior
      @     ensures \result != null && \result instanceof ArrayList<S>
      @          && \result.size() == 2;
      @   \result.add(0,p.run(first));
      @   \result.add(1,p.run(second));
      @   return res;
      @ } @*/
/*@ spec_public @*/
/*@ assignable first, second;
      @ ensures first == fst && second == snd; @*/
/*@ ensures \result == first; @*/
/*@ pure @*/
/*@ ensures \result == second; @*/
/*@ public model_program {
      @   normal_behavior
      @     ensures \result != null && \result instanceof ArrayList<S>
      @          && \result.size() == 2;
      @   \result.add(0,p.run(first));
      @   \result.add(1,p.run(second));
      @   return res;
      @ } @*/
/*@ spec_public @*/
//@ in objectState;

/*@ assignable maxSeen;
      @ ensures maxSeen == Math.max(\old(maxSeen),x); @*/
//@ ensures \result == maxSeen;

/*@ pure @*/
/*@ spec_public @*/
//@ in objectState;

/*@ assignable maxSeen;
      @ ensures maxSeen == Math.max(\old(maxSeen),x); @*/
//@ ensures \result == maxSeen;

/*@ pure @*/
//@ assignable objectState;

//@ assignable objectState;

//@ assert myp.getFirst() == 5 && myp.getSecond() == 4;

//@ assert pm.getMax() == 5 && r.get(1) == 4;

//@ assert myp.getFirst() == 5 && myp.getSecond() == 4;

//@ assert pm.getMax() == 5 && r.get(1) == 4;

/*@ spec_public @*/
/*@ ensures first == fst && second == snd;
      @ pure @*/
/*@ ensures \result == first; pure @*/
/*@ ensures \result == second; pure @*/
/*@ public model_program {
      @   normal_behavior
      @     ensures res != null && res instanceof ArrayList<S>
      @          && res.size() == 2;
      @   res.add(0,p.run(first));
      @   res.add(1,p.run(second));
      @   return res;
      @ } @*/
/*@ spec_public @*/
/*@ ensures first == fst && second == snd;
      @ pure @*/
/*@ ensures \result == first; pure @*/
/*@ ensures \result == second; pure @*/
/*@ public model_program {
      @   normal_behavior
      @     ensures res != null && res instanceof ArrayList<S>
      @          && res.size() == 2;
      @   res.add(0,p.run(first));
      @   res.add(1,p.run(second));
      @   return res;
      @ } @*/
/*@ spec_public @*/
//@ in objectState;

/*@ also assignable maxSeen;
      @ ensures maxSeen == Math.max(\old(maxSeen),x); @*/
//@ ensures \result == maxSeen;

/*@ pure @*/
/*@ spec_public @*/
//@ in objectState;

/*@ also assignable maxSeen;
      @ ensures maxSeen == Math.max(\old(maxSeen),x); @*/
//@ ensures \result == maxSeen;

/*@ pure @*/
//@ assignable objectState;

//@ assignable objectState;

/*@ spec_public @*/
//@ in objectState;

/*@ also
      @   requires 0 <= i && i < a.length;
      @   assignable maxSeen;
      @   ensures maxSeen == Math.max(\old(maxSeen),a[i]); @*/
//@ ensures \result == maxSeen;

/*@ pure @*/
/*@ spec_public @*/
//@ in objectState;

/*@ also
      @   requires 0 <= i && i < a.length;
      @   assignable maxSeen;
      @   ensures maxSeen == Math.max(\old(maxSeen),a[i]); @*/
//@ ensures \result == maxSeen;

/*@ pure @*/
/*@ public normal_behavior
      @   requires 0 <= i && i < a.length;
      @   assignable objectState, a[i];   @*/
/*@ public normal_behavior
      @   requires 0 <= i && i < a.length;
      @   assignable objectState, a[i];   @*/
/*@ extract @*/
//@ maintaining 0 <= i && i <= a.length;

//@ decreasing a.length - i;

/*@ extract @*/
//@ maintaining 0 <= i && i <= a.length;

//@ decreasing a.length - i;

//@ assert pm.getMax() == 5;

//@ assert pm.getMax() == 5;

//@ ensures theList != null;

//@ ensures theList.size() == 1;

//@ assignable     othing;

//@ ensures theList != null;

//@ ensures theList.size() == 1;

//@ assignable     othing;

//@ ensures theList != null;

//@ ensures theList.indexOf(a) == 0;

//@ ensures theList != null;

//@ ensures theList.size() == 1;

//@ assignable     othing;

//@ ensures theList != null;

//@ ensures theList.indexOf(a) == 0;

//@ ensures theList != null;

//@ ensures theList.size() == 1;

//@ assignable     othing;

//@ ensures theList != null;

//@ ensures theList.size() == 1;

//@ pure

//@ assignable     othing;

//@ ensures theList != null;

//@ ensures theList.size() == 1;

//@ pure

//@ assignable     othing;

//@ public normal_behavior

//@   requires size > 0;

//@   ensures \result != null;

//@   ensures \result.length == size;

//@   ensures \result[0] == 0;

//@ public normal_behavior

//@   requires size > 0;

//@   ensures \result != null;

//@   ensures \result.length == size;

//@   ensures \result[0] == 0;

/*@ spec_public @*/
//@ public normal_behavior

//@   accessible \everything;

//@   requires a != null;

//@   ensures theList != null;

//@   ensures theList.size() == 1;

//@   ensures theList.contains(a);

//@ pure

/*@ spec_public @*/
//@ public normal_behavior

//@   accessible \everything;

//@   requires a != null;

//@   ensures theList != null;

//@   ensures theList.size() == 1;

//@   ensures theList.contains(a);

//@ pure

/*@ pure @*/
/*@ pure @*/
/*@ pure @*/
/*@ public normal_behavior
	@   requires b != null;
	@   requires b.limit >= 1;
	@   ensures \result == b.contents[0];
	@*/
/*@ pure @*/
/*@ public normal_behavior
	@   requires b != null;
	@   requires b.limit >= 1;
	@   ensures \result == b.contents[0];
	@*/
/*@ pure @*/
/*@ public normal_behavior
	@   requires b != null;
	@   requires b.limit >= 1;
	@   ensures \result == b.contents[0];
	@*/
/*@ pure @*/
//@ requires cause.getMessage()!=null;

//@ requires cause.getMessage()!=null;

//@ requires cause.getMessage()!=null;

//@ requires cause.getMessage()!=null;

//@ assert b1 != null;

//@ assert b1.length == 10;

//@ assert b2 != null;

//@ assert b2.length == 10;

//@ assert b1 != b2;

//@ assert b1 != null;

//@ assert b1.length == 10;

//@ assert b2 != null;

//@ assert b2.length == 10;

//@ assert b2 != b1;

//@ assert b3 != null;

//@ assert b3.length == 10;

//@ assert b1 != b3;

//@ assert b2 != b3;

//@ assert b4 != null;

//@ assert b4.length == 10;

//@ assert b1 != b4;

//@ assert b2 != b4;

//@ assert b3 != b4;

//@ assert b5 != null;

//@ assert b5.length == 10;

//@ assert b1 != b5;

//@ assert b2 != b5;

//@ assert b3 != b5;

//@ assert b4 != b5;

//@ assert b6 != null;

//@ assert b6.length == 10;

//@ assert b1 != b6;

//@ assert b2 != b6;

//@ assert b3 != b6;

//@ assert b4 != b6;

//@ assert b5 != b6;

//@ assert b7 != null;

//@ assert b7.length == 10;

//@ assert b1 != b7;

//@ assert b2 != b7;

//@ assert b3 != b7;

//@ assert b4 != b7;

//@ assert b5 != b7;

//@ assert b6 != b7;

//@ assert b8 != null;

//@ assert b8.length == 10;

//@ assert b1 != b8;

//@ assert b2 != b8;

//@ assert b3 != b8;

//@ assert b4 != b8;

//@ assert b5 != b8;

//@ assert b6 != b8;

//@ assert b7 != b8;

//@ assert b9 != null;

//@ assert b9.length == 10;

//@ assert b1 != b9;

//@ assert b2 != b9;

//@ assert b3 != b9;

//@ assert b4 != b9;

//@ assert b5 != b9;

//@ assert b6 != b9;

//@ assert b7 != b9;

//@ assert b8 != b9;

//@ assert b10 != b1;

//@ assert b1 != null;

//@ assert b1.length == 10;

//@ assert b2 != null;

//@ assert b2.length == 10;

//@ assert b1 != b2;

//@ assert b1 != null;

//@ assert b1.length == 10;

//@ assert b2 != null;

//@ assert b2.length == 10;

//@ assert b2 != b1;

//@ assert b3 != null;

//@ assert b3.length == 10;

//@ assert b1 != b3;

//@ assert b2 != b3;

//@ assert b4 != null;

//@ assert b4.length == 10;

//@ assert b1 != b4;

//@ assert b2 != b4;

//@ assert b3 != b4;

//@ assert b5 != null;

//@ assert b5.length == 10;

//@ assert b1 != b5;

//@ assert b2 != b5;

//@ assert b3 != b5;

//@ assert b4 != b5;

//@ assert b6 != null;

//@ assert b6.length == 10;

//@ assert b1 != b6;

//@ assert b2 != b6;

//@ assert b3 != b6;

//@ assert b4 != b6;

//@ assert b5 != b6;

//@ assert b7 != null;

//@ assert b7.length == 10;

//@ assert b1 != b7;

//@ assert b2 != b7;

//@ assert b3 != b7;

//@ assert b4 != b7;

//@ assert b5 != b7;

//@ assert b6 != b7;

//@ assert b8 != null;

//@ assert b8.length == 10;

//@ assert b1 != b8;

//@ assert b2 != b8;

//@ assert b3 != b8;

//@ assert b4 != b8;

//@ assert b5 != b8;

//@ assert b6 != b8;

//@ assert b7 != b8;

//@ assert b9 != null;

//@ assert b9.length == 10;

//@ assert b1 != b9;

//@ assert b2 != b9;

//@ assert b3 != b9;

//@ assert b4 != b9;

//@ assert b5 != b9;

//@ assert b6 != b9;

//@ assert b7 != b9;

//@ assert b8 != b9;

//@ assert b10 != b1;

/*@ public normal_behavior
	  @   requires size >= 0 && size < 128;
	  @   assignable     othing;
	  @   ensures \fresh(\result);
	  @   ensures \result.length == size;
	  @   //ensures \forall int i; 0 <= i && i < size; \result[i] == (byte) 0x00;
	  @*/
/*@ public normal_behavior
	  @   requires size >= 0 && size < 128;
	  @   assignable     othing;
	  @   ensures \fresh(\result);
	  @   ensures \result.length == size;
	  @   //ensures \forall int i; 0 <= i && i < size; \result[i] == (byte) 0x00;
	  @*/
//@ assert b1 != null;

//@ assert b1.length == 10;

//@ assert b2 != null;

//@ assert b2.length == 10;

//@ assert b1 != b2;

//@ assert b1 != null;

//@ assert b1.length == 10;

//@ assert b2 != null;

//@ assert b2.length == 10;

//@ assert b2 != b1;

//@ assert b3 != null;

//@ assert b3.length == 10;

//@ assert b1 != b3;

//@ assert b2 != b3;

//@ assert b1 != null;

//@ assert b1.length == 10;

//@ assert b2 != null;

//@ assert b2.length == 10;

//@ assert b1 != b2;

//@ assert b1 != null;

//@ assert b1.length == 10;

//@ assert b2 != null;

//@ assert b2.length == 10;

//@ assert b2 != b1;

//@ assert b3 != null;

//@ assert b3.length == 10;

//@ assert b1 != b3;

//@ assert b2 != b3;

/*@ spec_public @*/
/*@ public normal_behavior
      @   ensures \fresh(contents);
      @ pure */
/*@ public normal_behavior
      @   requires cont != null;
      @   ensures contents == cont;
      @ pure
      @*/
/*@ public normal_behavior
      @   requires size >= 0;
      @   ensures \fresh(\result);
      @   ensures \fresh(\result.contents);
      @*/
/*@ spec_public @*/
/*@ public normal_behavior
      @   ensures \fresh(contents);
      @ pure */
/*@ public normal_behavior
      @   requires cont != null;
      @   ensures contents == cont;
      @ pure
      @*/
/*@ public normal_behavior
      @   requires size >= 0;
      @   ensures \fresh(\result);
      @   ensures \fresh(\result.contents);
      @*/
//@ assert seq.isEmpty(); // failed to verify even though this is explicitly ensured in the spec for the constructor

//@ assert seq.int_length() == 1; // also failed

//@ assert seq.isEmpty(); // failed to verify even though this is explicitly ensured in the spec for the constructor

//@ assert seq.int_length() == 1; // also failed

/*@ private normal_behavior
      @   assignable     othing;
      @*/
/*@ helper @*/
/*@ public normal_behavior
      @   assignable     othing;
      @   ensures \fresh(\result);
      @*/
/*@ pure @*/
/*@ private normal_behavior
      @   assignable     othing;
      @*/
/*@ helper @*/
/*@ public normal_behavior
      @   assignable     othing;
      @   ensures \fresh(\result);
      @*/
/*@ pure @*/
/*@ spec_public @*/
/*@ private normal_behavior
      @   assignable     othing;
      @   ensures true;
      @*/
/*@ helper @*/
/*@ public normal_behavior
      @   assignable     othing;
      @   ensures \result.a == 127;
      @*/
/*@ pure @*/
/*@ also public normal_behavior
      @   assignable     othing;
      @   ensures \result <==> (obj instanceof Container) && ((Container) obj).a == a;
      @*/
/*@ pure @*/
/*@ spec_public non_null @*/
/*@ private normal_behavior
          @   assignable     othing;
          @   ensures true;
          @*/
/*@ helper @*/
/*@ public normal_behavior
          @   assignable     othing;
          @   //ensures Container.allocate() instanceof Container;
          @   ensures \result.c.equals(Container.allocate());
          @   // edit: turning this around into "Container.allocate().equals(\result.c)" does
          @   // establish that \result.c is an instance of Container, but the type system and
          @   // fact that \result.c != null should already establish this
          @*/
//@ assert user instanceof ContainerUser; // passes

//@ assert cont instanceof Container;     // passes

//@ assert user.c.a == 127;               // passes

//@ assert user.c instanceof Container;   // fails - fixed

/*@ spec_public @*/
/*@ private normal_behavior
      @   assignable     othing;
      @   ensures true;
      @*/
/*@ helper @*/
/*@ public normal_behavior
      @   assignable     othing;
      @   ensures \result.a == 127;
      @*/
/*@ pure @*/
/*@ also public normal_behavior
      @   assignable     othing;
      @   ensures \result <==> (obj instanceof Container) && ((Container) obj).a == a;
      @*/
/*@ pure @*/
/*@ spec_public non_null @*/
/*@ private normal_behavior
          @   assignable     othing;
          @   ensures true;
          @*/
/*@ helper @*/
/*@ public normal_behavior
          @   assignable     othing;
          @   //ensures Container.allocate() instanceof Container;
          @   ensures \result.c.equals(Container.allocate());
          @   // edit: turning this around into "Container.allocate().equals(\result.c)" does
          @   // establish that \result.c is an instance of Container, but the type system and
          @   // fact that \result.c != null should already establish this
          @*/
//@ assert user instanceof ContainerUser; // passes

//@ assert cont instanceof Container;     // passes

//@ assert user.c.a == 127;               // passes

//@ assert user.c instanceof Container;   // fails - fixed

/*@ private normal_behavior
      @   assignable     othing;
      @*/
/*@ helper @*/
/*@ public normal_behavior
      @   assignable     othing;
      @*/
/*@ pure @*/
/*@ non_null @*/
/*@ private normal_behavior
          @   assignable     othing;
          @*/
/*@ helper @*/
/*@ public normal_behavior
          @   assignable     othing;
          @*/
/*@ private normal_behavior
      @   assignable     othing;
      @*/
/*@ helper @*/
/*@ public normal_behavior
      @   assignable     othing;
      @*/
/*@ pure @*/
/*@ non_null @*/
/*@ private normal_behavior
          @   assignable     othing;
          @*/
/*@ helper @*/
/*@ public normal_behavior
          @   assignable     othing;
          @*/
/*@ non_null @*/
/*@ public normal_behavior
      @   assignable c;
      @*/
//@ assert c instanceof Object;

/*@ non_null @*/
/*@ public normal_behavior
      @   assignable c;
      @*/
//@ assert c instanceof Object;

/*@ public normal_behavior
      @   ensures this.a == a;
      @ pure */
/*@ public normal_behavior
      @   requires a < 1000000; assignable a; // limit just to avoid overflow warnings
      @   ensures this.a == \old(this.a) + 1;
      @   ensures \fresh(\result);
      @   ensures \result.equals(new Initializer(\old(a)));
      @*/
/*@ also public normal_behavior
      @   assignable     othing;
      @   ensures \result <==> obj instanceof Initializer && ((Initializer) obj).a == a;
      @*/
/*@ pure @*/
/*@ public normal_behavior
      @   ensures this.a == a;
      @ pure */
/*@ public normal_behavior
      @   requires a < 1000000; assignable a; // limit just to avoid overflow warnings
      @   ensures this.a == \old(this.a) + 1;
      @   ensures \fresh(\result);
      @   ensures \result.equals(new Initializer(\old(a)));
      @*/
/*@ also public normal_behavior
      @   assignable     othing;
      @   ensures \result <==> obj instanceof Initializer && ((Initializer) obj).a == a;
      @*/
/*@ pure @*/
/*@ public normal_behavior
      @   assignable     othing;
      @   ensures this.a == a;
      @*/
/*@ public normal_behavior
      @   requires a < 1000000; assignable a; // limit just to avoid overflow warnings
      @   ensures this.a == \old(this.a) + 1;
      @   ensures \fresh(\result);
      @   ensures \result.equals(\old(new Initializer(a)));
      @*/
/*@ also public normal_behavior
      @   assignable     othing;
      @   ensures \result <==> obj instanceof Initializer && ((Initializer) obj).a == a;
      @*/
/*@ pure @*/
/*@ public normal_behavior
      @   assignable     othing;
      @   ensures this.a == a;
      @*/
/*@ public normal_behavior
      @   requires a < 1000000; assignable a; // limit just to avoid overflow warnings
      @   ensures this.a == \old(this.a) + 1;
      @   ensures \fresh(\result);
      @   ensures \result.equals(\old(new Initializer(a)));
      @*/
/*@ also public normal_behavior
      @   assignable     othing;
      @   ensures \result <==> obj instanceof Initializer && ((Initializer) obj).a == a;
      @*/
/*@ pure @*/
/*@ public normal_behavior
      @   ensures \result == 4;
      @*/
/*@ public normal_behavior
      @   ensures \result == 4;
      @*/
/*@ public normal_behavior
      @   ensures \result == 7;
      @*/
//@ assert i == 4;

//@ assert j == 3;

/*@ public normal_behavior
      @   ensures \result == 7;
      @*/
//@ assert i == 4;

//@ assert j == 3;

/*@ public normal_behavior
      @   ensures \result == 3;
      @*/
/*@ public normal_behavior
      @   ensures \result == 3;
      @*/
//@ requires length > 0;

//@ requires URANDOM.isOpen;

//@ requires URANDOM.availableBytes > 0;

//@ requires length > 0;

//@ requires URANDOM.isOpen;

//@ requires URANDOM.availableBytes > 0;

/*@ spec_public @*/
//@ assert ptr_ != 0;

/*@ spec_public @*/
//@ assert ptr_ != 0;

/*@ public normal_behavior
      @   assignable     othing;
      @   ensures true;
      @ public function static model pure int chomp(int i);
      @*/
//@ axiom \forall int i, j; 489 <= i && i < 526 && 0 <= j && j < 10; i == j ==> chomp(i) == chomp(j);

//@ ghost int a = chomp(500);

//@ ghost int b = chomp(500);

//@ assert a == b;

/*@ public normal_behavior
      @   assignable     othing;
      @   ensures true;
      @ public function static model pure int chomp(int i);
      @*/
//@ axiom \forall int i, j; 489 <= i && i < 526 && 0 <= j && j < 10; i == j ==> chomp(i) == chomp(j);

//@ ghost int a = chomp(500);

//@ ghost int b = chomp(500);

//@ assert a == b;

//@static invariant TEN == 10;

//@assert TEN > 0;

//@ assert TEN > 0;

//@static invariant TEN == 10;

//@assert TEN > 0;

//@ assert TEN > 0;

//@ assert \elemtype(\typeof(a)) == \type(int);

//@ assert b != a;

//@ assert Arrays.equals(a,b);

//@ assert \elemtype(\typeof(a)) == \type(int);

//@ assert b != a;

//@ assert Arrays.equals(a,b);

/*@
  ensures  Crypto.encrypt(this.Na).equals(\result);  pure // - won't be provable in this simplified example
  @*/
//@ pure

/*@
  ensures  Crypto.encrypt(this.Na).equals(\result);  pure // - won't be provable in this simplified example
  @*/
//@ pure

//@ pure non_null

//@ pure non_null

//@ pure non_null

//@ pure non_null

//@ pure non_null

//@ pure non_null

/*@ spec_public */
/*@ spec_public */
//@ assignable     othing;

//@ ensures this.field == field && this.data != null;

//@ assignable     othing;

//@ ensures this.field == field && this.data != null && \fresh(this.data);

//@ assignable     othing;

//@ ensures this.field == field && this.data != null;

//@ skipesc   // FIXME - timesout

/*@ loop_invariant 0 <= i && i <= data.length;
          @ decreases data.length - i;
          @*/
//@ skipesc // FIXME - tiemsout - possibly because of a method call prior to instance fields being set

//@ skipesc // FIXME timesout

/*@ spec_public */
/*@ spec_public */
//@ assignable     othing;

//@ ensures this.field == field && this.data != null;

//@ assignable     othing;

//@ ensures this.field == field && this.data != null && \fresh(this.data);

//@ assignable     othing;

//@ ensures this.field == field && this.data != null;

//@ skipesc   // FIXME - timesout

/*@ loop_invariant 0 <= i && i <= data.length;
          @ decreases data.length - i;
          @*/
//@ skipesc // FIXME - tiemsout - possibly because of a method call prior to instance fields being set

//@ skipesc // FIXME timesout

/*@ spec_public */
/*@ spec_public */
//@ assignable     othing;

//@ ensures this.field == field && this.data != null;

//@ assignable     othing;

//@ ensures this.field == field && this.data != null && \fresh(this.data);

//@ assignable     othing;

//@ ensures this.field == field && this.data != null;

//@ skipesc   // FIXME - timesout

/*@ loop_invariant 0 <= i && i <= data.length;
          @ decreases data.length - i;
          @*/
//@ skipesc // FIXME - tiemsout - possibly because of a method call prior to instance fields being set

//@ skipesc // FIXME timesout

/*@ spec_public */
/*@ spec_public */
//@ assignable     othing;

//@ ensures this.field == field && this.data != null;

//@ assignable     othing;

//@ ensures this.field == field && this.data != null && \fresh(this.data);

//@ assignable     othing;

//@ ensures this.field == field && this.data != null;

//@ skipesc   // FIXME - timesout

/*@ loop_invariant 0 <= i && i <= data.length;
          @ decreases data.length - i;
          @*/
//@ skipesc // FIXME - tiemsout - possibly because of a method call prior to instance fields being set

//@ skipesc // FIXME timesout

/*@ spec_public */
/*@ spec_public */
//@ assignable     othing;

//@ ensures this.field == field && this.data != null;

//@ assignable     othing;

//@ ensures this.field == field && this.data != null && \fresh(this.data);

//@ assignable     othing;

//@ ensures this.field == field && this.data != null;

//@ skipesc   // FIXME - timesout

/*@ loop_invariant 0 <= i && i <= data.length;
          @ decreases data.length - i;
          @*/
//@ skipesc // FIXME - tiemsout - possibly because of a method call prior to instance fields being set

//@ skipesc // FIXME timesout

/*@ spec_public */
/*@ spec_public */
//@ assignable     othing;

//@ ensures this.field == field && this.data != null;

//@ assignable     othing;

//@ ensures this.field == field && this.data != null && \fresh(this.data);

//@ assignable     othing;

//@ ensures this.field == field && this.data != null;

//@ skipesc   // FIXME - timesout

/*@ loop_invariant 0 <= i && i <= data.length;
          @ decreases data.length - i;
          @*/
//@ skipesc // FIXME - tiemsout - possibly because of a method call prior to instance fields being set

//@ skipesc // FIXME timesout

/*@ spec_public */
/*@ spec_public */
//@ assignable     othing;

//@ ensures this.field == field && this.data != null;

//@ assignable     othing;

//@ ensures this.field == field && this.data != null && \fresh(this.data);

//@ assignable     othing;

//@ ensures this.field == field && this.data != null;

//@ skipesc   // FIXME - timesout

/*@ loop_invariant 0 <= i && i <= data.length;
          @ decreases data.length - i;
          @*/
//@ skipesc // FIXME - tiemsout - possibly because of a method call prior to instance fields being set

//@ skipesc // FIXME timesout















//@ ensures \fresh(\result);

//@ pure

//@ ensures \fresh(\result);

//@ pure

//@ ensures \fresh(\result);

//@ pure

//@ ensures \fresh(\result);

//@ pure

//@ ensures \fresh(\result);

//@ pure

//@ ensures \fresh(\result);

//@ pure

//@ ensures \fresh(\result);

//@ pure

//@ requires (\exists int i; 0 <= i && i < ivec.length; ivec[i] == 0);

/*@ pure @*/
/*@ requires (\exists int i; 0 <= i && i < target.length;
      @                           target[i] == 0
      @         && (\forall int j; 0 <= j && j < src.length;
      @                            j <= i ==> src[j] != 0); @*/
//@ requires true;

/*@ requires (\exists int i; 0 <= i && i < left.length;
      @                           left[i] == 0);
      @       && (\exists int i; 0 <= i && i < right.length;
      @                           right[i] == 0); @*/
//@ requires (\exists int i; 0 <= i && i < ivec.length; ivec[i] == 0);

/*@ pure @*/
/*@ requires (\exists int i; 0 <= i && i < target.length;
      @                           target[i] == 0
      @         && (\forall int j; 0 <= j && j < src.length;
      @                            j <= i ==> src[j] != 0); @*/
//@ requires true;

/*@ requires (\exists int i; 0 <= i && i < left.length;
      @                           left[i] == 0);
      @       && (\exists int i; 0 <= i && i < right.length;
      @                           right[i] == 0); @*/
//@ model import org.jmlspecs.models.JMLObjectBag;

//@ public instance model JMLObjectBag queue;

/*@ public normal_behavior
      @  ensures queue.equals(\old(queue).insert(o));
      @  modifies queue;
      @*/
/*@non_null@*/
/*@ public normal_behavior
      @  requires !isEmpty();
      @  ensures \old(queue).has(\result) &&
      @       queue.equals(\old(queue).remove(\result)) &&
      @   (\forall Comparable o; queue.has(o); \result.compareTo(o) <= 0);
      @  modifies queue;
      @*/
/*@non_null@*/
/*@ public normal_behavior
      @  ensures \result == (queue.isEmpty());
      @*/
/*@pure@*/
//@ model import org.jmlspecs.models.JMLObjectBag;

//@ public instance model JMLObjectBag queue;

/*@ public normal_behavior
      @  ensures queue.equals(\old(queue).insert(o));
      @  modifies queue;
      @*/
/*@non_null@*/
/*@ public normal_behavior
      @  requires !isEmpty();
      @  ensures \old(queue).has(\result) &&
      @       queue.equals(\old(queue).remove(\result)) &&
      @   (\forall Comparable o; queue.has(o); \result.compareTo(o) <= 0);
      @  modifies queue;
      @*/
/*@non_null@*/
/*@ public normal_behavior
      @  ensures \result == (queue.isEmpty());
      @*/
/*@pure@*/
/*@ spec_public @*/
//@ in state;

/*@ spec_public @*/
//@ in state;

//@ public invariant lb <= ub;

//@ public invariant ub == Integer.MAX_VALUE <==> inclusive;

//@ requires l <= u;

//@ assignable state;

//@ ensures lb == l && ub == u;

//@ ensures \result == lb;

/*@ pure @*/
//@ ensures \result == ub;

/*@ pure @*/
//@ also

//@   ensures \result <==> (lb <= i && i < ub) || (inclusive && i == ub);

/*@ pure @*/
//@ assert (i < lb || i >= ub) && (!inclusive || i != ub);

//@ assert i >= ub && (!inclusive || i != ub);

//@ contains(i);

//@ assert lb <= i && i < ub || (inclusive && i == ub);

//@ assert i == ub && ub == Integer.MAX_VALUE;

//@ !contains(i);

/*@ pure @*/
/*@ spec_public @*/
//@ in state;

/*@ spec_public @*/
//@ in state;

//@ public invariant lb <= ub;

//@ public invariant ub == Integer.MAX_VALUE <==> inclusive;

//@ requires l <= u;

//@ assignable state;

//@ ensures lb == l && ub == u;

//@ ensures \result == lb;

/*@ pure @*/
//@ ensures \result == ub;

/*@ pure @*/
//@ also

//@   ensures \result <==> (lb <= i && i < ub) || (inclusive && i == ub);

/*@ pure @*/
//@ assert (i < lb || i >= ub) && (!inclusive || i != ub);

//@ assert i >= ub && (!inclusive || i != ub);

//@ contains(i);

//@ assert lb <= i && i < ub || (inclusive && i == ub);

//@ assert i == ub && ub == Integer.MAX_VALUE;

//@ !contains(i);

/*@ pure @*/
//@ model import org.jmlspecs.lang.JMLDataGroup;

//@ public instance model JMLDataGroup state;

/*@ pure @*/
//@ requires size() > 0;

//@ assignable state;

//@ ensures contains(\result);

//@ assignable state;

//@ ensures contains(i) && size() >= \old(size());

//@ assignable state;

//@ ensures !contains(i) && size() <= \old(size());

//@ ensures \result >= 0;

/*@ pure @*/
//@ model import org.jmlspecs.lang.JMLDataGroup;

//@ public instance model JMLDataGroup state;

/*@ pure @*/
//@ requires size() > 0;

//@ assignable state;

//@ ensures contains(\result);

//@ assignable state;

//@ ensures contains(i) && size() >= \old(size());

//@ assignable state;

//@ ensures !contains(i) && size() <= \old(size());

//@ ensures \result >= 0;

/*@ pure @*/
//@ model import org.jmlspecs.models.JMLObjectBag;

//@ in queue;

//@ in queue;

/*@ private represents queue = computeQueue(); @*/
/*@ private invariant elems != null;
      @ private invariant \typeof(elems) == \type(Comparable[]);
      @ private invariant elems.length > 0;
      @ private invariant 0 <= numElems && numElems <= elems.length;
      @ private invariant
      @   (\forall int i; 0 <= i && i < numElems; elems[i] != null);
      @
      @ private invariant
      @   (\forall int i; 0 <= i && i < numElems;
      @     (2*i+1 < numElems ==> elems[i].compareTo(elems[2*i+1]) <= 0)
      @  && (2*i+2 < numElems ==> elems[i].compareTo(elems[2*i+2]) <= 0));
      @*/
/*@
    private model pure non_null JMLObjectBag computeQueue() {
	JMLObjectBag bag = new JMLObjectBag();
	for (int i= 0; i < numElems; i++)
	    bag = bag.insert(elems[i]);
	return bag;
    }
    @*/
/*@ ensures elems.length > \old(elems.length)
      @       && numElems == \old(numElems);
      @ modifies queue;
      @*/
//@ model import org.jmlspecs.models.JMLObjectBag;

//@ in queue;

//@ in queue;

/*@ private represents queue = computeQueue(); @*/
/*@ private invariant elems != null;
      @ private invariant \typeof(elems) == \type(Comparable[]);
      @ private invariant elems.length > 0;
      @ private invariant 0 <= numElems && numElems <= elems.length;
      @ private invariant
      @   (\forall int i; 0 <= i && i < numElems; elems[i] != null);
      @
      @ private invariant
      @   (\forall int i; 0 <= i && i < numElems;
      @     (2*i+1 < numElems ==> elems[i].compareTo(elems[2*i+1]) <= 0)
      @  && (2*i+2 < numElems ==> elems[i].compareTo(elems[2*i+2]) <= 0));
      @*/
/*@
    private model pure non_null JMLObjectBag computeQueue() {
	JMLObjectBag bag = new JMLObjectBag();
	for (int i= 0; i < numElems; i++)
	    bag = bag.insert(elems[i]);
	return bag;
    }
    @*/
/*@ ensures elems.length > \old(elems.length)
      @       && numElems == \old(numElems);
      @ modifies queue;
      @*/
//@ model import org.jmlspecs.models.JMLObjectBag;

//@ public instance model JMLObjectBag queue;

/*@ public normal_behavior
      @  ensures queue.equals(\old(queue).insert(o));
      @  modifies queue;
      @*/
/*@non_null@*/
/*@ public normal_behavior
      @  requires !isEmpty();
      @  ensures \old(queue).has(\result) &&
      @       queue.equals(\old(queue).remove(\result)) &&
      @   (\forall Comparable o; \old(queue).has(o); \result.compareTo(o) <= 0);
      @  modifies queue;
      @*/
/*@non_null@*/
/*@ public normal_behavior
      @  ensures \result == (queue.isEmpty());
      @*/
/*@pure@*/
//@ model import org.jmlspecs.models.JMLObjectBag;

//@ public instance model JMLObjectBag queue;

/*@ public normal_behavior
      @  ensures queue.equals(\old(queue).insert(o));
      @  modifies queue;
      @*/
/*@non_null@*/
/*@ public normal_behavior
      @  requires !isEmpty();
      @  ensures \old(queue).has(\result) &&
      @       queue.equals(\old(queue).remove(\result)) &&
      @   (\forall Comparable o; \old(queue).has(o); \result.compareTo(o) <= 0);
      @  modifies queue;
      @*/
/*@non_null@*/
/*@ public normal_behavior
      @  ensures \result == (queue.isEmpty());
      @*/
/*@pure@*/
//@ model import org.jmlspecs.models.JMLObjectBag;

//@ in queue;

//@ in queue;

//@ private ghost non_null JMLObjectBag ghostQueue; in queue;

//@ private represents queue <- ghostQueue;

/*@ private invariant elems != null;
      @ private invariant \typeof(elems) == \type(Comparable[]);
      @ private invariant elems.length > 0;
      @ private invariant 0 <= numElems && numElems <= elems.length;
      @ private invariant
      @   (\forall int i; 0 <= i && i < numElems; elems[i] != null);
      @
      @ private invariant
      @   (\forall int i; 0 <= i && i < numElems;
      @     (2*i+1 < numElems ==> elems[i].compareTo(elems[2*i+1]) <= 0)
      @  && (2*i+2 < numElems ==> elems[i].compareTo(elems[2*i+2]) <= 0));
      @*/
//@ set ghostQueue = new JMLObjectBag();

/*@ ensures elems.length > \old(elems.length)
      @       && numElems == \old(numElems);
      @ modifies queue;
      @*/
/*@non_null@*/
//@ set ghostQueue = ghostQueue.insert(o);

/*@non_null@*/
//@ set ghostQueue = ghostQueue.remove(first);

/*@pure@*/
/*@non_null@*/
//@ model import org.jmlspecs.models.JMLObjectBag;

//@ in queue;

//@ in queue;

//@ private ghost non_null JMLObjectBag ghostQueue; in queue;

//@ private represents queue <- ghostQueue;

/*@ private invariant elems != null;
      @ private invariant \typeof(elems) == \type(Comparable[]);
      @ private invariant elems.length > 0;
      @ private invariant 0 <= numElems && numElems <= elems.length;
      @ private invariant
      @   (\forall int i; 0 <= i && i < numElems; elems[i] != null);
      @
      @ private invariant
      @   (\forall int i; 0 <= i && i < numElems;
      @     (2*i+1 < numElems ==> elems[i].compareTo(elems[2*i+1]) <= 0)
      @  && (2*i+2 < numElems ==> elems[i].compareTo(elems[2*i+2]) <= 0));
      @*/
//@ set ghostQueue = new JMLObjectBag();

/*@ ensures elems.length > \old(elems.length)
      @       && numElems == \old(numElems);
      @ modifies queue;
      @*/
/*@non_null@*/
//@ set ghostQueue = ghostQueue.insert(o);

/*@non_null@*/
//@ set ghostQueue = ghostQueue.remove(first);

/*@pure@*/
/*@non_null@*/
//@ model import org.jmlspecs.models.JMLObjectBag;

//@ public instance model JMLObjectBag queue;

/*@ public normal_behavior
      @  ensures queue.equals(\old(queue).insert(o));
      @  modifies queue;
      @*/
/*@non_null@*/
/*@ public normal_behavior
      @  requires !isEmpty();
      @  ensures \old(queue).has(\result) &&
      @       queue.equals(\old(queue).remove(\result)) &&
      @   (\forall Comparable o; queue.has(o); \result.compareTo(o) <= 0);
      @  modifies queue;
      @*/
/*@non_null@*/
/*@ public normal_behavior
      @  ensures \result == (queue.isEmpty());
      @*/
/*@pure@*/
//@ model import org.jmlspecs.models.JMLObjectBag;

//@ public instance model JMLObjectBag queue;

/*@ public normal_behavior
      @  ensures queue.equals(\old(queue).insert(o));
      @  modifies queue;
      @*/
/*@non_null@*/
/*@ public normal_behavior
      @  requires !isEmpty();
      @  ensures \old(queue).has(\result) &&
      @       queue.equals(\old(queue).remove(\result)) &&
      @   (\forall Comparable o; queue.has(o); \result.compareTo(o) <= 0);
      @  modifies queue;
      @*/
/*@non_null@*/
/*@ public normal_behavior
      @  ensures \result == (queue.isEmpty());
      @*/
/*@pure@*/
/*@ private represents size <- numElems; @*/
/*@ ensures elems.length > \old(elems.length)
      @       && numElems == \old(numElems);
      @*/
/*@ private represents size <- numElems; @*/
/*@ ensures elems.length > \old(elems.length)
      @       && numElems == \old(numElems);
      @*/
//@ public instance model int size;

//@ public invariant size >= 0;

/*@ public normal_behavior
      @  ensures size == \old(size) + 1;
      @*/
/*@non_null@*/
/*@ public normal_behavior
      @  requires !isEmpty();
      @  ensures size == \old(size) - 1;
      @*/
/*@non_null@*/
/*@ public normal_behavior
      @  ensures \result == (size == 0);
      @*/
/*@pure@*/
//@ public instance model int size;

//@ public invariant size >= 0;

/*@ public normal_behavior
      @  ensures size == \old(size) + 1;
      @*/
/*@non_null@*/
/*@ public normal_behavior
      @  requires !isEmpty();
      @  ensures size == \old(size) - 1;
      @*/
/*@non_null@*/
/*@ public normal_behavior
      @  ensures \result == (size == 0);
      @*/
/*@pure@*/
//@ reachable;

//@ reachable;

//@ reachable;

//@ reachable;

/*@ spec_public @*/
//@ public invariant 0 <= age && age < 150;

//@ ensures age == 0;

/*@ public normal_behavior
      @   requires 0 <= newAge && newAge < 150;
      @   assignable age;
      @   ensures age == newAge;
      @   ensures \result == this;
//      @ also
//      @ public exceptional_behavior
//      @   requires newAge < 0 || newAge >= 150;
//      @   signals_only Exception;
      @*/
/*@ spec_public @*/
//@ public invariant 0 <= age && age < 150;

//@ ensures age == 0;

/*@ public normal_behavior
      @   requires 0 <= newAge && newAge < 150;
      @   assignable age;
      @   ensures age == newAge;
      @   ensures \result == this;
//      @ also
//      @ public exceptional_behavior
//      @   requires newAge < 0 || newAge >= 150;
//      @   signals_only Exception;
      @*/
//@ @org.jmlspecs.annotation.Options("-checkFeasibility=none")

//@ @org.jmlspecs.annotation.Options("-checkFeasibility=none")

//@ reachable;

//@ reachable;

//@ signals (Exception e) e instanceof NullPointerException;

//@ old boolean e = f == 0;

//@ requires e;

//@ refining signals (Exception e) e instanceof NullPointerException;

//@ refining

//@ old boolean e = f == 0;

//@ ensures e==0;

//@ signals (Exception e) e instanceof NullPointerException;

//@ old boolean e = f == 0;

//@ requires e;

//@ refining signals (Exception e) e instanceof NullPointerException;

//@ refining

//@ old boolean e = f == 0;

//@ ensures e==0;

//@ model import org.jmlspecs.models.JMLObjectBag;

/*@ private invariant elems != null;
      @ private invariant \elemtype(\typeof(elems)) == \type(Comparable<Object>);
      @ private invariant elems.length > 0;
      @ private invariant 0 <= numElems && numElems <= elems.length;
      @ private invariant
      @   (\forall int i; 0 <= i && i < numElems; elems[i] != null);
      @
      @ private invariant
      @   (\forall int i; 0 <= i && i < numElems;
      @     (2*i+1 < numElems ==> elems[i].compareTo(elems[2*i+1]) <= 0)
      @  && (2*i+2 < numElems ==> elems[i].compareTo(elems[2*i+2]) <= 0));
      @*/
/*@
    public model helper pure non_null JMLObjectBag computeQueue() {
	JMLObjectBag bag = new JMLObjectBag();
	for (int i= 0; i < numElems; i++)
	    bag = bag.insert(elems[i]);
	return bag;
    }
    @*/
/*@ ensures elems.length > \old(elems.length)
      @       && numElems == \old(numElems);
      @*/
/*@non_null@*/
/*@non_null@*/
/*@non_null@*/
//@ model import org.jmlspecs.models.JMLObjectBag;

/*@ private invariant elems != null;
      @ private invariant \elemtype(\typeof(elems)) == \type(Comparable<Object>);
      @ private invariant elems.length > 0;
      @ private invariant 0 <= numElems && numElems <= elems.length;
      @ private invariant
      @   (\forall int i; 0 <= i && i < numElems; elems[i] != null);
      @
      @ private invariant
      @   (\forall int i; 0 <= i && i < numElems;
      @     (2*i+1 < numElems ==> elems[i].compareTo(elems[2*i+1]) <= 0)
      @  && (2*i+2 < numElems ==> elems[i].compareTo(elems[2*i+2]) <= 0));
      @*/
/*@
    public model helper pure non_null JMLObjectBag computeQueue() {
	JMLObjectBag bag = new JMLObjectBag();
	for (int i= 0; i < numElems; i++)
	    bag = bag.insert(elems[i]);
	return bag;
    }
    @*/
/*@ ensures elems.length > \old(elems.length)
      @       && numElems == \old(numElems);
      @*/
/*@non_null@*/
/*@non_null@*/
/*@non_null@*/
//@ model import org.jmlspecs.models.JMLObjectBag;

//@ public instance model JMLObjectBag queue;

//@ public represents queue = computeQueue();

//@ helper pure

/*@ public normal_behavior
      @  ensures queue.equals(\old(queue).insert(o));
      @*/
/*@non_null@*/
/*@ public normal_behavior
      @  requires !isEmpty();
      @  ensures \old(queue).has(\result) &&
      @       queue.equals(\old(queue).remove(\result)) &&
      @   (\forall Comparable o; queue.has(o); \result.compareTo(o) <= 0);
      @*/
/*@non_null@*/
/*@ public normal_behavior
      @  ensures \result == (queue.isEmpty());
      @*/
/*@pure@*/
//@ model import org.jmlspecs.models.JMLObjectBag;

//@ public instance model JMLObjectBag queue;

//@ public represents queue = computeQueue();

//@ helper pure

/*@ public normal_behavior
      @  ensures queue.equals(\old(queue).insert(o));
      @*/
/*@non_null@*/
/*@ public normal_behavior
      @  requires !isEmpty();
      @  ensures \old(queue).has(\result) &&
      @       queue.equals(\old(queue).remove(\result)) &&
      @   (\forall Comparable o; queue.has(o); \result.compareTo(o) <= 0);
      @*/
/*@non_null@*/
/*@ public normal_behavior
      @  ensures \result == (queue.isEmpty());
      @*/
/*@pure@*/
//@ ensures \result == a - b;

//@ {|

//@   requires a == b;

//@  also

//@   requires a < b;

//@ |}

//@ ensures \result == a - b;

//@ {|

//@   requires a == b;

//@  also

//@   requires a < b;

//@ |}

/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
//@ ensures \result == (a * c)/(0.06 * b);

/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
//@ ensures \result == (a * c)/(0.06 * b);

//@requires  i *  j *  k <  Integer.MAX_VALUE;

//@requires  i *  j *  k <  Integer.MAX_VALUE;

//@requires (\bigint) i * (\bigint) j * (\bigint) k < (\bigint) Integer.MAX_VALUE;

//@requires (\bigint) i * (\bigint) j * (\bigint) k < (\bigint) Integer.MAX_VALUE;

/*@
	 private static invariant (\sum int i; list.contains(i); i) >= 0;
	 @*/
/*@
	 private static invariant (\sum int i; list.contains(i); i) >= 0;
	 @*/
/*@
	 private invariant (\sum Integer i; list.contains(i); i) >= 0;
	 @*/
/*@
	 private invariant (\sum Integer i; list.contains(i); i) >= 0;
	 @*/
//@ public behavior

//@  ensures true;

//@ public normal_behavior

//@  ensures true;

//@ public behavior

//@  ensures true;

//@  signals_only Exception;

//@ public behavior

//@  ensures true;

//@ public normal_behavior

//@  ensures true;

//@ public behavior

//@  ensures true;

//@  signals_only Exception;

//@requires \forall int i; 0 <= i && i < array.length-1; array[i] <= array[i+1];

//@requires \forall int i; (\bigint)0 <= i && i < array.length-1; array[i] <= array[i+1];

//@requires \forall Integer i; 0 <= i && i < array.length-1; array[i] <= array[i+1];

//@requires \forall Integer i; 0 <= i && i < array.length-1; array[i] <= array[i+1];

//@requires \forall int i; 0 <= i && i < array.length-1; array[i] <= array[i+1];

//@requires \forall int i; (\bigint)0 <= i && i < array.length-1; array[i] <= array[i+1];

//@requires \forall Integer i; 0 <= i && i < array.length-1; array[i] <= array[i+1];

//@requires \forall Integer i; 0 <= i && i < array.length-1; array[i] <= array[i+1];

//@ public invariant n > 0;

//@ public behavior

//@    ensures n == nn;

//@ pure

//@ public invariant n > 0;

//@ public behavior

//@    ensures n == nn;

//@ pure

//@ public normal_behavior

//@   ensures true;

//@ public normal_behavior

//@   ensures true;

//@ also public normal_behavior

//@   ensures \result >= i;

//@ public normal_behavior

//@   ensures \result > i;

//@ public normal_behavior

//@   ensures \result > i;  // FAILS

//@ also public normal_behavior

//@   ensures \result >= i;

//@ public normal_behavior

//@   ensures \result > i;

//@ public normal_behavior

//@   ensures \result > i;  // FAILS

/*@ spec_public @*/
/*@
      public model int countVals;
      represents countVals = (\sum int i; 0<=i && i<vals.length; vals[i]);
      @*/
//@requires countVals > 0;

/*@ spec_public @*/
/*@
      public model int countVals;
      represents countVals = (\sum int i; 0<=i && i<vals.length; vals[i]);
      @*/
//@requires countVals > 0;

_by_default

//@ in buffer;

//@ public represents buffer = buf;

//@   assert (\forall int k; d<=k && k < d+length; buffer[k] == src[s-d+k]);

//@ requires length >= 0;

//@ requires s >= 0;

//@ requires s + length <= src.length;

//@ requires d >= 0;

//@ requires d + length <= buf.length;

//@   assignable buf[d..d+length-1];

//@   ensures (\forall int k; d<=k && k < d+length; buffer[k] == src[s-d+k]);

//@ requires length >= 0;

//@ requires s >= 0;

//@ requires s + length <= src.length;

//@ requires d >= 0;

//@ requires d + length <= buf.length;

//@   assignable buf[d..d+length-1];

//@   ensures java.util.Arrays.equalArrays(buffer,d,src,s,length);

//@ requires length >= 0;

//@ requires s >= 0;

//@ requires s + length <= src.length;

//@ requires d >= 0;

//@ requires d + length <= buf.length;

//@   assignable buf[d..d+length-1];

//@   ensures (\forall int k; s<=k && k < s+length; buffer[d-s+k] == src[k]);

//@ public normal_behavior

//@   requires src.length >= buffer.length;

//@   assignable buffer[*];

//@   ensures (\forall int k; 0<=k && k<buffer.length; buf[k] == src[k]);

//@ public normal_behavior

//@   requires src.length >= buffer.length;

//@   assignable buffer[*];

//@   ensures (\forall int k; 0<=k && k<buffer.length; buffer[k] == src[k]);

//@ requires length >= 0;

//@ requires s >= 0;

//@ requires s + length <= src.length;

//@ requires d >= 0;

//@ requires d + length <= buf.length;

//@ requires d == 0 && s == 0;

//@   assignable \everything;

//@ assume  (\forall int k; 0<=k && k<length; buf[k] == src[k]);

//@ assert  (\forall int k; 0<=k && k<length; buf[k] == src[k]);

//@ requires length >= 0;

//@ requires s >= 0;

//@ requires s + length <= src.length;

//@ requires d >= 0;

//@ requires d + length <= buf.length;

//@   assignable \everything;

//@ assume  (\forall int k; d<=k && k<d+length; buf[k] == src[s-d+k]);

//@ assert  (\forall int k; d<=k && k<d+length; buf[k] == src[s-d+k]);

//@ requires length >= 0;

//@ requires s >= 0;

//@ requires s + length <= src.length;

//@ requires d >= 0;

//@ requires d + length <= buf.length;

//@   assignable \everything;

//@ assume  (\forall int k; 0<=k && k<length; buf[d+k] == src[s+k]);

//@ assert  (\forall int k; 0<=k && k<length; buf[d+k] == src[s+k]);

_by_default

//@ public instance model int[] buffer;

//@ public normal_behavior

//@   requires src.length >= buffer.length;

//@   assignable buffer[*];

//@   ensures (\forall int k; 0<=k && k<buffer.length; buffer[k] == src[k]);

//@ requires length >= 0;

//@ requires s >= 0;

//@ requires s + length <= src.length;

//@ requires d >= 0;

//@ requires d + length <= buffer.length;

//@   assignable buffer[d..d+length-1];

//@   ensures (\forall int k; d<=k && k < d+length; buffer[k] == src[s-d+k]);

_by_default

//@ in buffer;

//@ public represents buffer = buf;

//@   assert (\forall int k; d<=k && k < d+length; buffer[k] == src[s-d+k]);

//@ requires length >= 0;

//@ requires s >= 0;

//@ requires s + length <= src.length;

//@ requires d >= 0;

//@ requires d + length <= buf.length;

//@   assignable buf[d..d+length-1];

//@   ensures (\forall int k; d<=k && k < d+length; buffer[k] == src[s-d+k]);

//@ requires length >= 0;

//@ requires s >= 0;

//@ requires s + length <= src.length;

//@ requires d >= 0;

//@ requires d + length <= buf.length;

//@   assignable buf[d..d+length-1];

//@   ensures java.util.Arrays.equalArrays(buffer,d,src,s,length);

//@ requires length >= 0;

//@ requires s >= 0;

//@ requires s + length <= src.length;

//@ requires d >= 0;

//@ requires d + length <= buf.length;

//@   assignable buf[d..d+length-1];

//@   ensures (\forall int k; s<=k && k < s+length; buffer[d-s+k] == src[k]);

//@ public normal_behavior

//@   requires src.length >= buffer.length;

//@   assignable buffer[*];

//@   ensures (\forall int k; 0<=k && k<buffer.length; buf[k] == src[k]);

//@ public normal_behavior

//@   requires src.length >= buffer.length;

//@   assignable buffer[*];

//@   ensures (\forall int k; 0<=k && k<buffer.length; buffer[k] == src[k]);

//@ requires length >= 0;

//@ requires s >= 0;

//@ requires s + length <= src.length;

//@ requires d >= 0;

//@ requires d + length <= buf.length;

//@ requires d == 0 && s == 0;

//@   assignable \everything;

//@ assume  (\forall int k; 0<=k && k<length; buf[k] == src[k]);

//@ assert  (\forall int k; 0<=k && k<length; buf[k] == src[k]);

//@ requires length >= 0;

//@ requires s >= 0;

//@ requires s + length <= src.length;

//@ requires d >= 0;

//@ requires d + length <= buf.length;

//@   assignable \everything;

//@ assume  (\forall int k; d<=k && k<d+length; buf[k] == src[s-d+k]);

//@ assert  (\forall int k; d<=k && k<d+length; buf[k] == src[s-d+k]);

//@ requires length >= 0;

//@ requires s >= 0;

//@ requires s + length <= src.length;

//@ requires d >= 0;

//@ requires d + length <= buf.length;

//@   assignable \everything;

//@ assume  (\forall int k; 0<=k && k<length; buf[d+k] == src[s+k]);

//@ assert  (\forall int k; 0<=k && k<length; buf[d+k] == src[s+k]);

_by_default

//@ public instance model int[] buffer;

//@ public normal_behavior

//@   requires src.length >= buffer.length;

//@   assignable buffer[*];

//@   ensures (\forall int k; 0<=k && k<buffer.length; buffer[k] == src[k]);

//@ requires length >= 0;

//@ requires s >= 0;

//@ requires s + length <= src.length;

//@ requires d >= 0;

//@ requires d + length <= buffer.length;

//@   assignable buffer[d..d+length-1];

//@   ensures (\forall int k; d<=k && k < d+length; buffer[k] == src[s-d+k]);

//@ requires length >= 0;

//@ requires length >= 0;

_by_default

//@ assert t.get(1) == 1;

//@ requires i == 1;

//@ model public pure int get(int i);

_by_default

//@ assert t.get(1) == 1;

//@ requires i == 1;

//@ model public pure int get(int i);

_by_default

//@ assert t.cget3(30) == 3;  // ERROR

//@ assert t.get2(20) == 2;  // ERROR

//@ assert t.get3(30) == 2;   // ERROR

//@ assert t.get2(2) == 2;

//@ assert t.get3(3) == 3;

//@ assert t.get(1) == 1;

//@ assert t.cget(1) == 1;  // Exception

//@ model public pure int get2(int i) { return i; }

//@ requires i == 1;

//@ model public pure int cget(int i);

//@ requires i == 3;

//@ model public pure int cget3(int i) { return i; }

//@ requires i == 1;

//@ model public pure int get(int i);

//@ requires i == 2;

//@ model public pure int get2(int i);

//@ requires i == 3;

//@ model public pure int get3(int i) { return i; }

_by_default

//@ assert t.cget3(30) == 3;  // ERROR

//@ assert t.get2(20) == 2;  // ERROR

//@ assert t.get3(30) == 2;   // ERROR

//@ assert t.get2(2) == 2;

//@ assert t.get3(3) == 3;

//@ assert t.get(1) == 1;

//@ assert t.cget(1) == 1;  // Exception

//@ model public pure int get2(int i) { return i; }

//@ requires i == 1;

//@ model public pure int cget(int i);

//@ requires i == 3;

//@ model public pure int cget3(int i) { return i; }

//@ requires i == 1;

//@ model public pure int get(int i);

//@ requires i == 2;

//@ model public pure int get2(int i);

//@ requires i == 3;

//@ model public pure int get3(int i) { return i; }

_by_default

//@ assert get() == 1;

//@ assert getd() == 2;

//@ ensures \result == 1;

//@ model public pure int get();

//@ ensures \result == 2;

//@ model public pure int getd();

_by_default

//@ assert get() == 1;

//@ assert getd() == 2;

//@ ensures \result == 1;

//@ model public pure int get();

//@ ensures \result == 2;

//@ model public pure int getd();

//@ public normal_behavior

//@   requires true;

//@   requires System.out.isOpen;

//@ public normal_behavior

//@   requires true;

//@   requires System.out.isOpen;

//@ public normal_behavior

//@ ensures \result == 10;

//@ public normal_behavior

//@ ensures \result == 10;

//@ public normal_behavior

//@ ensures \result == 10;

//@ public normal_behavior

//@ ensures \result == 10;

_by_default

//@ public normal_behavior

//@   ensures \fresh(\result);

//@ assert t != null;

//@ public invariant t != null;

_by_default

//@ public normal_behavior

//@   ensures true;

//@ pure

//@ public normal_behavior

//@   ensures \fresh(\result);

_by_default

//@ ensures \result == null;


_by_default

//@ public normal_behavior

//@   ensures \fresh(\result);

//@ assert t != null;

//@ public invariant t != null;

_by_default

//@ public normal_behavior

//@   ensures true;

//@ pure

//@ public normal_behavior

//@   ensures \fresh(\result);

_by_default

//@ ensures \result == null;


_by_default

_by_default

_by_default

//@ requires ff != null;   // FIXME - sxhouldn't this be nonnull be default?

//@ requires ff.nnn == 29;

//@ ensures gg == ff.nnn;

//@ pure

//@ assert ff.nnn == 29;

//@ assert ff == Test.this.ff;

//@ requires ff.nnn == 29;

_by_default

//@ requires ff != null;   // FIXME - sxhouldn't this be nonnull be default?

//@ requires ff.nnn == 29;

//@ ensures gg == ff.nnn;

//@ pure

//@ assert ff.nnn == 29;

//@ assert ff == Test.this.ff;

//@ requires ff.nnn == 29;

_by_default

_by_default

_by_default

_by_default

_by_default

_by_default

/*@spec_public @*/
/*@spec_public @*/
/*@ ensures (this.first == null ==> \result == 0);
      @ ensures (this.first != null && this.rest == null) ==> \result == 1;
      @ ensures (this.first != null && this.rest != null) ==> \result == (rest.size() + 1);
      @*/
//@ pure

//@ assume rest != null ==> rest.size() < 1000000000; // Just to avoid overflow warnings

/*@spec_public @*/
/*@spec_public @*/
/*@ ensures (this.first == null ==> \result == 0);
      @ ensures (this.first != null && this.rest == null) ==> \result == 1;
      @ ensures (this.first != null && this.rest != null) ==> \result == (rest.size() + 1);
      @*/
//@ pure

//@ assume rest != null ==> rest.size() < 1000000000; // Just to avoid overflow warnings

/*@spec_public nullable @*/
/*@spec_public nullable @*/


/*@ ensures (this.first == null && \result == 0) ||(this.rest == null && \result == 1)  ||
      @ (\result == rest.size() + 1);
      @ pure
      @*/
//@ assume rest != null ==> rest.size() < 1000000000; // Just to avoid overflow warnings

/*@spec_public nullable @*/
/*@spec_public nullable @*/


/*@ ensures (this.first == null && \result == 0) ||(this.rest == null && \result == 1)  ||
      @ (\result == rest.size() + 1);
      @ pure
      @*/
//@ assume rest != null ==> rest.size() < 1000000000; // Just to avoid overflow warnings

//@ assignable k;

//@ ensures k == 1;

/*@{B}*/
//@ public normal_behavior

//@   requires true;

//@   assignable \everything;

/*@ model
class B implements A {

    //@ also public normal_behavior
    //@   requires true;
    //@ pure
    public void m() {}

}
*/
//@ assignable k;

//@ ensures k == 1;

/*@{B}*/
//@ public normal_behavior

//@   requires true;

//@   assignable \everything;

/*@ model
class B implements A {

    //@ also public normal_behavior
    //@   requires true;
    //@ pure
    public void m() {}

}
*/
/*@ spec_public @*/
/*@ spec_public nullable @*/
/*@ normal_behavior
      @ requires rest == null;
      @ ensures \result == 1;
      @
      @ also
      @
      @ normal_behavior
      @ requires rest != null;
      @ ensures \result == 1 + rest.size();
      @*/
/*@ spec_public pure @*/
/*@ spec_public @*/
/*@ spec_public nullable @*/
/*@ normal_behavior
      @ requires rest == null;
      @ ensures \result == 1;
      @
      @ also
      @
      @ normal_behavior
      @ requires rest != null;
      @ ensures \result == 1 + rest.size();
      @*/
/*@ spec_public pure @*/
//@ public invariant cents >= -100;

//@ public invariant cents <= 100;

//@ public invariant euros > 0 ==> cents >= 0;

//@ public invariant euros < 0 ==> cents <= 0;

/*@ spec_public @*/
/*@ spec_public @*/
//@ requires cents >= -100;

//@ requires cents <= 100;

//@ requires euros > 0 ==> cents >= 0;

//@ requires euros < 0 ==> cents <= 0;

//@ ensures this.cents >= -100;

//@ ensures this.cents <= 100;

//@ ensures this.euros > 0 ==> cents >= 0;

//@ ensures this.euros < 0 ==> cents <= 0;

//@ pure

/*@ pure @*/
//@ public invariant cents >= -100;

//@ public invariant cents <= 100;

//@ public invariant euros > 0 ==> cents >= 0;

//@ public invariant euros < 0 ==> cents <= 0;

/*@ spec_public @*/
/*@ spec_public @*/
//@ requires cents >= -100;

//@ requires cents <= 100;

//@ requires euros > 0 ==> cents >= 0;

//@ requires euros < 0 ==> cents <= 0;

//@ ensures this.cents >= -100;

//@ ensures this.cents <= 100;

//@ ensures this.euros > 0 ==> cents >= 0;

//@ ensures this.euros < 0 ==> cents <= 0;

//@ pure

/*@ pure @*/
/*@requires n >= 0
     *@ensures \result == (\product int i; 0 < i && i <= n; i)
     */
/*@ pure @*/
/*@requires n >= 0
     *@ensures \result == (\product int i; 0 < i && i <= n; i)
     */
/*@ pure @*/
//@ requires -1000000 < x & x < 1000000 & -1000000 < y & y < 1000000;

//@ ensures \result == x + y;

//@ maintaining sum == x + y - n && 0 <= n;

//@ decreases n;

//@ maintaining sum == x + y + n && 0 <= n;

//@ decreases n;

//@ requires -1000000 < x & x < 1000000 & -1000000 < y & y < 1000000;

//@ ensures \result == x + y;

//@ maintaining sum == x + y - n && 0 <= n;

//@ decreases n;

//@ maintaining sum == x + y + n && 0 <= n;

//@ decreases n;

//@ requires a.length == 10;

//@ assert a[0] == 4;

//@ assert a[3] == 7;

//@ assert  x == 3;

//@ requires a.length == 10;

//@ assignable x, a[x];

//@ ensures x == 3;

//@ requires a.length == 10;

//@ assert a[0] == 4;

//@ assert a[4] == 8;

//@ assert x == 4;

//@ requires a.length == 10;

//@ assignable x, a[x .. x+1];

//@ ensures x == 4;

//@ requires a.length == 10;

//@ assert a[0] == 4;

//@ assert a[3] == 7;

//@ assert  x == 3;

//@ requires a.length == 10;

//@ assignable x, a[x];

//@ ensures x == 3;

//@ requires a.length == 10;

//@ assert a[0] == 4;

//@ assert a[4] == 8;

//@ assert x == 4;

//@ requires a.length == 10;

//@ assignable x, a[x .. x+1];

//@ ensures x == 4;

//@ public normal_behavior

//@   requires java.math.BigInteger.parseable(s, 10);

//@   old \bigint b = java.math.BigInteger.parse(s,10);

//@ public normal_behavior

//@   old \bigint b = 10;

//@   ensures \result == b;

//@ public normal_behavior

//@   old \real b = 10;

//@   ensures \result == b;

//@ public normal_behavior

//@   old \TYPE b = \type(void);

//@ public normal_behavior

//@   requires java.math.BigInteger.parseable(s, 10);

//@   old \bigint b = java.math.BigInteger.parse(s,10);

//@ public normal_behavior

//@   old \bigint b = 10;

//@   ensures \result == b;

//@ public normal_behavior

//@   old \real b = 10;

//@   ensures \result == b;

//@ public normal_behavior

//@   old \TYPE b = \type(void);

/*@ public normal_behavior
     @ requires y >= 0;
     @ assignable     othing;
     @ ensures 0.0 <= \result
     @         && \result * \result <= y
     @         && ((0 <= (\result + 1) * (\result + 1))
     @            ==> y < (\result + 1) * (\result + 1));
     @*/
/*@ public normal_behavior
     @ requires y >= 0;
     @ assignable     othing;
     @ ensures 0.0 <= \result
     @         && \result * \result <= y
     @         && ((0 <= (\result + 1) * (\result + 1))
     @            ==> y < (\result + 1) * (\result + 1));
     @*/
//@ model public nullable Object content;

//@ in content;

//@ public normal_behavior

//@   ensures true;

//@ pure

//@ public normal_behavior

//@  assignable this.content;

//@ ensures !h.has(o);

//@ assert !h.has(o);

//@ ensures !h.has(o);

//@ assert !h.has(o);

//@ ensures !h.has(o);

//@ assert !h.has(o);

//@ requires !h.has(o);

//@ ensures !h.has(o);

//@ loop_invariant !h.has(o);

//@ assume !h.has(o);

//@ assert !h.has(o);

//@ requires !h.has(o);

//@ ensures !h.has(o);

//@ loop_invariant !h.has(o);

//@ assume !h.has(o);

//@ assert !h.has(o);

//@ model public nullable Object content;

//@ in content;

//@ public normal_behavior

//@   ensures true;

//@ pure

//@ public normal_behavior

//@  assignable this.content;

//@ ensures !h.has(o);

//@ assert !h.has(o);

//@ ensures !h.has(o);

//@ assert !h.has(o);

//@ ensures !h.has(o);

//@ assert !h.has(o);

//@ requires !h.has(o);

//@ ensures !h.has(o);

//@ loop_invariant !h.has(o);

//@ assume !h.has(o);

//@ assert !h.has(o);

//@ requires !h.has(o);

//@ ensures !h.has(o);

//@ loop_invariant !h.has(o);

//@ assume !h.has(o);

//@ assert !h.has(o);

//@ model import org.jmlspecs.models.*;

/*@ spec_public @*/
/*@
    @  public invariant enrolments != null; // enrolments
    @*/
/*@
    @   assignable     othing;
    @   ensures
    @     enrolments != null && enrolments.isEmpty();
    @*/
/*@
    @ requires e != null;
    @ ensures !\old(enrolments).contains(e) ==>
    @            enrolments.equals(\old(enrolments).add(e));
    @*/
/*@
    @ requires e != null;
    @ ensures !enrolments.contains(e);
    @*/
/*@
    @ requires e != null && enrolments.contains(e);
    @*/
//@ model import org.jmlspecs.models.*;

/*@ spec_public @*/
/*@
    @  public invariant enrolments != null; // enrolments
    @*/
/*@
    @   assignable     othing;
    @   ensures
    @     enrolments != null && enrolments.isEmpty();
    @*/
/*@
    @ requires e != null;
    @ ensures !\old(enrolments).contains(e) ==>
    @            enrolments.equals(\old(enrolments).add(e));
    @*/
/*@
    @ requires e != null;
    @ ensures !enrolments.contains(e);
    @*/
/*@
    @ requires e != null && enrolments.contains(e);
    @*/
//@ public model int a;

//@ represents = 1 * 2 + 3;

//@ public model int a;

//@ represents = 1 * 2 + 3;

//@ model import org.jmlspecs.models.JMLObjectSequence;

//@ model instance JMLObjectSequence theSequence;

//@ private represents theSequence <- abstractionFunction();

/*@ pure helper @*/
//@ model import org.jmlspecs.models.JMLObjectSequence;

//@ model instance JMLObjectSequence theSequence;

//@ private represents theSequence <- abstractionFunction();

/*@ pure helper @*/
//@ model import org.jmlspecs.models.JMLObjectSequence;

//@ model instance JMLObjectSequence theSequence;

//@ private represents theSequence <- abstractionFunction();

/*@ pure @*/
//@ model import org.jmlspecs.models.JMLObjectSequence;

//@ model instance JMLObjectSequence theSequence;

//@ private represents theSequence <- abstractionFunction();

/*@ pure @*/
//@ public invariant next >= 0;

/*@ spec_public @*/
/*@ spec_public @*/
/*@ public behavior
@ ensures \result == (\forall int x; (\forall int y; 0 <= x && x < y && y < a.length; a[x] <= a[y]));
@ assignable     othing;
@ pure public static model boolean isSorted(int[] a);
 */
/*@ public normal_behavior
@ ensures next == 0 && this.indices == indices;
@ assignable     othing;
@*/
/*@ public normal_behavior
@   requires isSorted(a);
@   ensures ((\exists int x; 0 <= x && x < a.length; a[x] == v) ?  \result >= 0 && \result < a.length && a[\result] == v : \result == -1);
@	  assignable     othing;
@*/
/*@ pure @*/
/*@ loop_invariant 0 <= l && l < r && r < a.length
    @                && (\forall int x; 0 <= x && x < l; a[x] < v)
    @                && (\forall int x; r < x && x < a.length; v < a[x]);
    @ decreases r - l;
    @*/
/*@ public normal_behavior
@ requires isSorted(a) && a != indices;
@ requires next < indices.length;
@ ensures (\exists int i; i>=0 && i<a.length; a[i] == v) ? indices[\old(next)] == \result : (next == \old(next) && indices[next] == \old(indices[next]));
@ ensures (\exists int i; i>=0 && i<a.length; a[i] == v) ? a[\result] == v  : \result == -1;
@ assignable indices[next], next;
@ */
/*@
@ public exceptional_behavior
@ requires isSorted(a);
@ requires next >= indices.length;
@ requires  (\exists int i; i>=0 && i<a.length; a[i] == v);
@ signals (ArrayIndexOutOfBoundsException) true;
@ assignable     othing;
@*/
//@ public invariant next >= 0;

/*@ spec_public @*/
/*@ spec_public @*/
/*@ public behavior
@ ensures \result == (\forall int x; (\forall int y; 0 <= x && x < y && y < a.length; a[x] <= a[y]));
@ assignable     othing;
@ pure public static model boolean isSorted(int[] a);
 */
/*@ public normal_behavior
@ ensures next == 0 && this.indices == indices;
@ assignable     othing;
@*/
/*@ public normal_behavior
@   requires isSorted(a);
@   ensures ((\exists int x; 0 <= x && x < a.length; a[x] == v) ?  \result >= 0 && \result < a.length && a[\result] == v : \result == -1);
@	  assignable     othing;
@*/
/*@ pure @*/
/*@ loop_invariant 0 <= l && l < r && r < a.length
    @                && (\forall int x; 0 <= x && x < l; a[x] < v)
    @                && (\forall int x; r < x && x < a.length; v < a[x]);
    @ decreases r - l;
    @*/
/*@ public normal_behavior
@ requires isSorted(a) && a != indices;
@ requires next < indices.length;
@ ensures (\exists int i; i>=0 && i<a.length; a[i] == v) ? indices[\old(next)] == \result : (next == \old(next) && indices[next] == \old(indices[next]));
@ ensures (\exists int i; i>=0 && i<a.length; a[i] == v) ? a[\result] == v  : \result == -1;
@ assignable indices[next], next;
@ */
/*@
@ public exceptional_behavior
@ requires isSorted(a);
@ requires next >= indices.length;
@ requires  (\exists int i; i>=0 && i<a.length; a[i] == v);
@ signals (ArrayIndexOutOfBoundsException) true;
@ assignable     othing;
@*/
/*@ private normal_behavior
	  @ 	assignable values[*].x;
	  @*/
/*@
	  @ private normal_behavior
	  @ 	assignable value.*;
	  @*/
/*@
	  @ private normal_behavior
	  @ 	assignable values[*].*;
	  @*/
/*@ private normal_behavior
	  @ 	assignable values[*].x;
	  @*/
/*@
	  @ private normal_behavior
	  @ 	assignable value.*;
	  @*/
/*@
	  @ private normal_behavior
	  @ 	assignable values[*].*;
	  @*/
/*@
   	@   requires array != null;
   	@   assignable     othing;
   	@   ensures ( 0 <= \result
   	@   		&& \result < array.length
   	@   		&& array[\result] == 5)
   	@   		|| \result == array.length ;
   	@   ensures (\forall int j; 0 <= j && j < \result; array[j] != 5);
   	@*/
/*@pure@*/
/*@ loop_invariant
   		@   0 <= k && k <= array.length
   		@   && (\forall int i; 0 <= i && i < k; array[i] != 5);
   		@  decreases array.length - k;
   		@*/
/*@
   	@   requires array != null;
   	@   assignable     othing;
   	@   ensures \result == array.length || ( 0 <= \result
   	@   		&& \result < array.length
   	@   		&& array[\result] == 5)
   	@   		  ;
   	@   ensures (\forall int j; 0 <= j && j < \result; array[j] != 5);
   	@*/
/*@pure@*/
/*@ loop_invariant
   		@   0 <= k && k <= array.length
   		@   && (\forall int i; 0 <= i && i < k; array[i] != 5);
   		@  decreases array.length - k;
   		@*/
/*@
   	@   requires array != null;
   	@   assignable     othing;
   	@   ensures ( 0 <= \result
   	@   		&& \result < array.length
   	@   		&& array[\result] == 5)
   	@   		| \result == array.length ;
   	@   ensures (\forall int j; 0 <= j && j < \result; array[j] != 5);
   	@*/
/*@pure@*/
/*@ loop_invariant
   		@   0 <= k && k <= array.length
   		@   && (\forall int i; 0 <= i && i < k; array[i] != 5);
   		@  decreases array.length - k;
   		@*/
/*@
   	@   requires array != null;
   	@   assignable     othing;
   	@   ensures ( 0 <= \result
   	@   		&& \result < array.length
   	@   		&& array[\result] == 5)
   	@   		|| \result == array.length ;
   	@   ensures (\forall int j; 0 <= j && j < \result; array[j] != 5);
   	@*/
/*@pure@*/
/*@ loop_invariant
   		@   0 <= k && k <= array.length
   		@   && (\forall int i; 0 <= i && i < k; array[i] != 5);
   		@  decreases array.length - k;
   		@*/
/*@
   	@   requires array != null;
   	@   assignable     othing;
   	@   ensures \result == array.length || ( 0 <= \result
   	@   		&& \result < array.length
   	@   		&& array[\result] == 5)
   	@   		  ;
   	@   ensures (\forall int j; 0 <= j && j < \result; array[j] != 5);
   	@*/
/*@pure@*/
/*@ loop_invariant
   		@   0 <= k && k <= array.length
   		@   && (\forall int i; 0 <= i && i < k; array[i] != 5);
   		@  decreases array.length - k;
   		@*/
/*@
   	@   requires array != null;
   	@   assignable     othing;
   	@   ensures ( 0 <= \result
   	@   		&& \result < array.length
   	@   		&& array[\result] == 5)
   	@   		| \result == array.length ;
   	@   ensures (\forall int j; 0 <= j && j < \result; array[j] != 5);
   	@*/
/*@pure@*/
/*@ loop_invariant
   		@   0 <= k && k <= array.length
   		@   && (\forall int i; 0 <= i && i < k; array[i] != 5);
   		@  decreases array.length - k;
   		@*/
//@ requires b >= +a;

//@ requires b >= +a;

//@ requires b >= Math.max(0, -1 * a);

//@ requires b >= Math.max(0, -1 * a);

//@ requires b >= Math.max(0, (int)(-1.0 * a));

//@ requires b >= Math.max(0, (int)(-1.0 * a));

//@ requires b >= Math.max(0, -a);

//@ requires b >= Math.max(0, -a);

/*@ public normal_behaviour
     @  ensures
     @    a[pos1]  == \old(a[pos2]) &&
     @    a[pos2]  == \old(a[pos1]);
     @*/
/*@ public normal_behaviour
     @  ensures
     @    a[pos1]  == \old(a[pos2]) &&
     @    a[pos2]  == \old(a[pos1]);
     @*/
/*@spec_public@*/
/*@
	  @ public invariant i >= 0;
	  @*/
/*@
	  @ assignable i;
	  @*/
/*@helper@*/
/*@
	  @ assignable this.i;
	  @ requires i < Integer.MAX_VALUE;
	  @ ensures \result == i && i == \old(i) + 1;
	  @*/
/*@spec_public@*/
/*@
	  @ public invariant i >= 0;
	  @*/
/*@
	  @ assignable i;
	  @*/
/*@helper@*/
/*@
	  @ assignable this.i;
	  @ requires i < Integer.MAX_VALUE;
	  @ ensures \result == i && i == \old(i) + 1;
	  @*/
/*@spec_public@*/
/*@
	  @ public invariant i >= 0;
	  @*/
/*@
	  @ assignable i;
	  @ signals (Exception e) false;
	  @*/
/*@helper@*/
/*@
	  @ assignable this.i;
	  @ requires i < Integer.MAX_VALUE;
	  @ ensures \result == i && i == \old(i) + 1;
	  @*/
/*@spec_public@*/
/*@
	  @ public invariant i >= 0;
	  @*/
/*@
	  @ assignable i;
	  @ signals (Exception e) false;
	  @*/
/*@helper@*/
/*@
	  @ assignable this.i;
	  @ requires i < Integer.MAX_VALUE;
	  @ ensures \result == i && i == \old(i) + 1;
	  @*/
/*@ spec_public @*/
/*@ public invariant
@ (* A COMPLETER *);
@*/
//@ requires (* A COMPLETER *);

//@ ensures (* A COMPLETER *);

//@ requires (* A COMPLETER *);

//@ ensures (* A COMPLETER *);

//@ ensures (* A COMPLETER *);

/*@ pure @*/
/*@ ensures \result == true <==>
  @   (n > 1 ) && (\forall int d; 2<= d && d<= n-1; n % d != 0);
  @*/
/*@ pure helper @*/
/*@ spec_public @*/
/*@ public invariant
@ (* A COMPLETER *);
@*/
//@ requires (* A COMPLETER *);

//@ ensures (* A COMPLETER *);

//@ requires (* A COMPLETER *);

//@ ensures (* A COMPLETER *);

//@ ensures (* A COMPLETER *);

/*@ pure @*/
/*@ ensures \result == true <==>
  @   (n > 1 ) && (\forall int d; 2<= d && d<= n-1; n % d != 0);
  @*/
/*@ pure helper @*/
//@ requires y != 0;

//@ ensures Math.abs(\result * y) <= Math.abs(x);

//@ ensures Math.abs(x) - Math.abs(\result * y) < Math.abs(y);

//@ ensures \result != 0 ==> ((\result >= 0) <==> (x>= 0 <==> y>=0));

//@ requires y != 0;

//@ ensures Math.abs(\result * y) <= Math.abs(x);

//@ ensures Math.abs(x) - Math.abs(\result * y) < Math.abs(y);

//@ ensures \result != 0 ==> ((\result >= 0) <==> (x>= 0 <==> y>=0));

//@ public normal_behavior

//@   requires n > 0;

/*@ pure helper @*/
//@ assert maxInt * maxInt <= n && n < (maxInt+1)*(maxInt+1);

//@ loop_invariant 1 <= i && i <= maxInt + 1;

//@ loop_invariant (\forall int j; 1 <= j && j < i; (n%j) != 0);

//@ loop_decreases maxInt + 1 - i;

//@ public normal_behavior

//@   requires n > 0;

/*@ pure helper @*/
//@ assert maxInt * maxInt <= n && n < (maxInt+1)*(maxInt+1);

//@ loop_invariant 1 <= i && i <= maxInt + 1;

//@ loop_invariant (\forall int j; 1 <= j && j < i; (n%j) != 0);

//@ loop_decreases maxInt + 1 - i;

//@ requires is.size() > 0;

//@ assert is.contains(k);

//@ requires is.size() > 0;

//@ assert is.contains(k);

//@ model import org.jmlspecs.lang.JMLDataGroup;

//@ public instance model JMLDataGroup state;

/*@ pure @*/
//@ requires size() > 0;

//@ assignable state;

//@ ensures contains(\result);

//@ assignable state;

//@ ensures contains(i) && size() >= \old(size());

//@ assignable state;

//@ ensures !contains(i) && size() <= \old(size());

//@ ensures \result >= 0;

/*@ pure @*/
//@ model import org.jmlspecs.lang.JMLDataGroup;

//@ public instance model JMLDataGroup state;

/*@ pure @*/
//@ requires size() > 0;

//@ assignable state;

//@ ensures contains(\result);

//@ assignable state;

//@ ensures contains(i) && size() >= \old(size());

//@ assignable state;

//@ ensures !contains(i) && size() <= \old(size());

//@ ensures \result >= 0;

/*@ pure @*/
//@ spec_public

//@ in a;

//@ spec_public

//@ in a;

/*@ spec_public @*/
//@ in state;

//@ public invariant Integer.MIN_VALUE <= lb && lb <= Integer.MAX_VALUE;

//@ public invariant lb <= ub+1;

//@ public invariant Integer.MIN_VALUE <= ub+1 && ub <= Integer.MAX_VALUE;

//@ requires l <= ((long)u)+1;

//@ assignable state;

//@ ensures lb == (long)l && ub == (long)u;

//@ also

//@   ensures \result <==> (lb <= i && i <= ub);

/*@ pure @*/
//@ assert (i < lb || i > ub);

//@ assume i <= ub;

//@ assert contains(i);

//@ assert lb < \old(lb) && ub == \old(ub);

//@ assert i > ub && lb <= i;

//@ assert contains(i);

//@ assert ub > \old(ub) &&     ot_assigned(lb);

//@ assert lb <= i && i <= ub;

//@ assert !contains(i);

/*@ also
      @   ensures \result == ub - lb - 1;
      @*/
/*@ pure @*/
/*@ spec_public @*/
//@ in state;

//@ public invariant Integer.MIN_VALUE <= lb && lb <= Integer.MAX_VALUE;

//@ public invariant lb <= ub+1;

//@ public invariant Integer.MIN_VALUE <= ub+1 && ub <= Integer.MAX_VALUE;

//@ requires l <= ((long)u)+1;

//@ assignable state;

//@ ensures lb == (long)l && ub == (long)u;

//@ also

//@   ensures \result <==> (lb <= i && i <= ub);

/*@ pure @*/
//@ assert (i < lb || i > ub);

//@ assume i <= ub;

//@ assert contains(i);

//@ assert lb < \old(lb) && ub == \old(ub);

//@ assert i > ub && lb <= i;

//@ assert contains(i);

//@ assert ub > \old(ub) &&     ot_assigned(lb);

//@ assert lb <= i && i <= ub;

//@ assert !contains(i);

/*@ also
      @   ensures \result == ub - lb - 1;
      @*/
/*@ pure @*/
//@ model import org.jmlspecs.lang.JMLDataGroup;

//@ public instance model JMLDataGroup state;

/*@ pure @*/
//@ requires size() > 0;

//@ assignable state;

//@ ensures contains(\result);

//@ assignable state;

//@ ensures contains(i);

//@ ensures size() >= \old(size());

//@ assignable state;

//@ ensures !contains(i) && size() <= \old(size());

//@ ensures \result >= 0;

/*@ pure @*/
//@ model import org.jmlspecs.lang.JMLDataGroup;

//@ public instance model JMLDataGroup state;

/*@ pure @*/
//@ requires size() > 0;

//@ assignable state;

//@ ensures contains(\result);

//@ assignable state;

//@ ensures contains(i);

//@ ensures size() >= \old(size());

//@ assignable state;

//@ ensures !contains(i) && size() <= \old(size());

//@ ensures \result >= 0;

/*@ pure @*/
/*@ spec_public @*/
/*@ spec_public @*/
//@ public invariant Integer.MIN_VALUE <= lb && lb <= Integer.MAX_VALUE;

//@ requires i < Integer.MAX_VALUE;

//@ assert ib <= i;

//@ assert ib == i+1;

//@ assert ib > i;

//@ requires il < Integer.MAX_VALUE;

//@ assert lb <= il;

//@ assert lb == il+1;

//@ assert lb > il;

/*@ spec_public @*/
/*@ spec_public @*/
//@ public invariant Integer.MIN_VALUE <= lb && lb <= Integer.MAX_VALUE;

//@ requires i < Integer.MAX_VALUE;

//@ assert ib <= i;

//@ assert ib == i+1;

//@ assert ib > i;

//@ requires il < Integer.MAX_VALUE;

//@ assert lb <= il;

//@ assert lb == il+1;

//@ assert lb > il;

/*@ spec_public @*/
//@ public invariant Integer.MIN_VALUE <= lb && lb <= Integer.MAX_VALUE;

//@ public invariant Integer.MIN_VALUE <= ub+1 && ub <= Integer.MAX_VALUE;

//@ public normal_behavior

//@   requires l <= ((long)u)+1;

//@   assignable     othing;

//@   ensures lb == (long)l && ub == (long)u;

//@ ensures \result == ub;

/*@ pure @*/
//@ ensures \result == ub - lb - 1;

/*@ pure @*/
/*@ spec_public @*/
//@ public invariant Integer.MIN_VALUE <= lb && lb <= Integer.MAX_VALUE;

//@ public invariant Integer.MIN_VALUE <= ub+1 && ub <= Integer.MAX_VALUE;

//@ public normal_behavior

//@   requires l <= ((long)u)+1;

//@   assignable     othing;

//@   ensures lb == (long)l && ub == (long)u;

//@ ensures \result == ub;

/*@ pure @*/
//@ ensures \result == ub - lb - 1;

/*@ pure @*/
//@ spec_public

//@ in a;

//@ spec_public

//@ in a;

/*@ requires p instanceof Doctor
    @       || p instanceof Nurse; @*/
/*@ requires p instanceof Doctor
    @       || p instanceof Nurse; @*/
/*@ spec_public @*/
/*@ pure @*/
/*@ spec_public @*/
/*@ pure @*/
//@ public invariant a.length > 1;

//@ requires a[0] < Integer.MAX_VALUE;

//@ requires a[0] < Integer.MAX_VALUE;

//@ public invariant a.length > 1;

//@ requires a[0] < Integer.MAX_VALUE;

//@ requires a[0] < Integer.MAX_VALUE;

/*@ spec_public @*/
//@ requires count < Integer.MAX_VALUE;

//@ requires count < Integer.MAX_VALUE;

/*@ pure @*/
/*@ spec_public @*/
//@ requires count < Integer.MAX_VALUE;

//@ requires count < Integer.MAX_VALUE;

/*@ pure @*/
//@ ensures \result == this.ok(i);

//@ ensures \result == ok(i);

//@ pure

//@ also ensures \result == (i>=lb);

//@ ensures \result == this.ok(i);

//@ ensures \result == ok(i);

//@ pure

//@ also ensures \result == (i>=lb);

_by_default

//@ private static invariant zz == 1;

//@ private invariant aa == 3;

//@ public normal_behavior

//@   requires i >= 0;

//@ also public exceptional_behavior

//@   requires i < 0;

//@   signals_only RuntimeException;

//@ private invariant aa == 3;

//@ public normal_behavior

//@   requires i >= 0;

//@ also public exceptional_behavior

//@   requires i < 0;

//@   signals_only RuntimeException;

//@ pure

//@ private static invariant zz == 1;

//@ private invariant aa == 3;

//@ public normal_behavior

//@   requires i >= 0;

//@ also public exceptional_behavior

//@   requires i < 0;

//@   signals_only RuntimeException;

//@ private invariant aa == 3;

//@ public normal_behavior

//@   requires i >= 0;

//@ pure

//@ private invariant aa == 3;

//@ public normal_behavior

//@   requires i >= 0;

//@ pure

_by_default

//@ private static invariant zz == 1;

//@ private invariant aa == 3;

//@ public normal_behavior

//@   requires i >= 0;

//@ also public exceptional_behavior

//@   requires i < 0;

//@   signals_only RuntimeException;

//@ private invariant aa == 3;

//@ public normal_behavior

//@   requires i >= 0;

//@ also public exceptional_behavior

//@   requires i < 0;

//@   signals_only RuntimeException;

//@ pure

//@ private static invariant zz == 1;

//@ private invariant aa == 3;

//@ public normal_behavior

//@   requires i >= 0;

//@ also public exceptional_behavior

//@   requires i < 0;

//@   signals_only RuntimeException;

//@ private invariant aa == 3;

//@ public normal_behavior

//@   requires i >= 0;

//@ pure

//@ private invariant aa == 3;

//@ public normal_behavior

//@   requires i >= 0;

//@ pure

//@ spec_public

//@ in a;

//@ spec_public

//@ in a;

_by_default immutable

//@ nullable spec_public

//@ public normal_behavior

//@   { return value != null; }

//@ pure function

_by_default immutable

//@ nullable spec_public

//@ public normal_behavior

//@   { return value != null; }

//@ pure function

_by_default immutable

//@ nullable

//@ public normal_behavior

//@   ensures \result == (value != null);

//@ pure function

_by_default immutable

//@ nullable

//@ public normal_behavior

//@   ensures \result == (value != null);

//@ pure function

//@ nullable

//@ public normal_behavior

//@   { return value != null; }

//@ pure

//@ nullable

//@ public normal_behavior

//@   { return value != null; }

//@ pure


//@ assume o.isPresent();

//@ assert o.value != null;


//@ assert o.isPresent() ==> (o.value != null);


//@ assert (o.value != null);


//@ assume (o.value != null);

//@ assert o.isPresent();


//@ assume o.nn();

//@ assert o.value != null;


//@ assert o.nn() ==> (o.value != null);


//@ assert (o.value != null);


//@ assume (o.value != null);

//@ assert o.nn();


//@ assume o.nn();

//@ assert o.value != null;


//@ assert o.nn() ==> (o.value != null);


//@ assert (o.value != null);


//@ assume (o.value != null);

//@ assert o.nn();


//@ assume o.nn();

//@ assert o.value != null;


//@ assert o.nn() ==> (o.value != null);


//@ assert (o.value != null);


//@ assume (o.value != null);

//@ assert o.nn();


//@ assume o.isPresent();

//@ assert o.value != null;


//@ assert o.isPresent() ==> (o.value != null);


//@ assert (o.value != null);


//@ assume (o.value != null);

//@ assert o.isPresent();


//@ assume o.nn();

//@ assert o.value != null;


//@ assert o.nn() ==> (o.value != null);


//@ assert (o.value != null);


//@ assume (o.value != null);

//@ assert o.nn();


//@ assume o.nn();

//@ assert o.value != null;


//@ assert o.nn() ==> (o.value != null);


//@ assert (o.value != null);


//@ assume (o.value != null);

//@ assert o.nn();


//@ assume o.nn();

//@ assert o.value != null;


//@ assert o.nn() ==> (o.value != null);


//@ assert (o.value != null);


//@ assume (o.value != null);

//@ assert o.nn();

//@ public invariant ac.zero() == 0;

//@ public behavior

//@     requires true;

//@ assert 0 <= ac.x;

//@ public invariant 0 <= x;

//@ public normal_behavior

//@   ensures \result == 0;

//@ pure

//@ public invariant ac.zero() == 0;

//@ public behavior

//@     requires true;

//@ assert 0 <= ac.x;

//@ public invariant 0 <= x;

//@ public normal_behavior

//@   ensures \result == 0;

//@ pure

//@ public invariant ac.zero() == 0;

//@ public behavior

//@     requires true;

//@ assert 0 <= ac.x;

//@ public invariant 0 <= x;

//@ public normal_behavior

//@   ensures \result == 0;

//@ pure

//@ public invariant ac.zero() == 0;

//@ public behavior

//@     requires true;

//@ assert 0 <= ac.x;

//@ public invariant 0 <= x;

//@ public normal_behavior

//@   ensures \result == 0;

//@ pure

//@ pure

//@ pure

//@ pure

//@ pure

//@ public normal_behavior

//@      requires i != Integer.MIN_VALUE;

//@   ensures i == F.finverse( F.f( i ) );

//@ model public static pure void testInverse(int i) { }

//@ ensures \result == -i-1; pure

//@  ensures \result == ~i; pure

//@ assert ~i == -i -1;

//@ assert ~0 == -1;

//@ assert ~1 == -2;

//@ assert ~-1 == 0;

//@ assert ~Integer.MIN_VALUE == Integer.MAX_VALUE;

//@ assert Integer.MIN_VALUE == ~Integer.MAX_VALUE;

//@ assert ~~i == i;

//@ assert ~i == -i -1;

//@ assert ~0 == -1;

//@ assert ~1 == -2;

//@ assert ~-1 == 0;

//@ assert ~Long.MIN_VALUE == Long.MAX_VALUE;

//@ assert Long.MIN_VALUE == ~Long.MAX_VALUE;

//@ assert ~~i == i;

//@ public normal_behavior

//@      requires i != Integer.MIN_VALUE;

//@   ensures i == F.finverse( F.f( i ) );

//@ model public static pure void testInverse(int i) { }

//@ ensures \result == -i-1; pure

//@  ensures \result == ~i; pure

//@ assert ~i == -i -1;

//@ assert ~0 == -1;

//@ assert ~1 == -2;

//@ assert ~-1 == 0;

//@ assert ~Integer.MIN_VALUE == Integer.MAX_VALUE;

//@ assert Integer.MIN_VALUE == ~Integer.MAX_VALUE;

//@ assert ~~i == i;

//@ assert ~i == -i -1;

//@ assert ~0 == -1;

//@ assert ~1 == -2;

//@ assert ~-1 == 0;

//@ assert ~Long.MIN_VALUE == Long.MAX_VALUE;

//@ assert Long.MIN_VALUE == ~Long.MAX_VALUE;

//@ assert ~~i == i;

//@requires (x.length==4);

//@ensures (\result>=-1) && (\result<4);

//@ensures (\result>=0)==>x[\result];

//@ensures (\result==-1)==>(\forall int i; (0<=i) && (i<4); !x[i]);

//@loop_invariant 0<=i && i<=4;

//@requires (x.length==4);

//@ensures (\result>=-1) && (\result<4);

//@ensures (\result>=0)==>x[\result];

//@ensures (\result==-1)==>(\forall int i; (0<=i) && (i<4); !x[i]);

//@loop_invariant 0<=i && i<=4;

//@ loop_invariant 10 <= i && i <= 15;

//@ loop_invariant i == \count + 10;

//@ show \old(i,LoopInit), \old(i,LoopBodyBegin);

//@ assert \old(i,LoopInit) == 10;

//@ assert \old(i,LoopBodyBegin) == \count + 10;

//@ loop_invariant 10 <= i && i <= 15;

//@ loop_invariant i == \count + 10;

//@ show \old(i,LoopInit), \old(i,LoopBodyBegin);

//@ assert \old(i,LoopInit) == 10;

//@ assert \old(i,LoopBodyBegin) == \count + 10;

//@ public invariant addresses.length == 100;

//@ ensures (\forall int i; i >= 0 && i < 100; addresses[i] != null);

//@ ensures (\forall int j,k; 0<=j && j<100 && 0<=k && k<j; addresses[j] != addresses[k]);

//@ ensures (\forall int j; 0<=j && j<100; addresses[j].address == j);

//@ maintaining i >= 0 && i <= 100;

//@ loop_invariant (\forall int j; 0<=j && j<i; addresses[j] != null);

//@ loop_invariant (\forall int j; 0<=j && j<i; \fresh(addresses[j],LoopInit));

//@ loop_invariant (\forall int j; 0<=j && j<i; (\forall int k; 0<=k && k<j; addresses[j] != addresses[k]));

//@ decreasing 100 - i;

//@ havoc jj;

//@ assume 0 <= jj && jj < i ;

//@ show jj,i,addresses[jj],addresses[i], \fresh(addresses[jj],LoopBodyBegin), \fresh(addresses[i],LoopBodyBegin);

//@ assert addresses[i] != addresses[jj];

//@ assert !\fresh(addresses[jj], LoopBodyBegin);

//@ assert \fresh(addresses[i], LoopBodyBegin);

//@ assert (\forall int j; 0<=j && j<=i; (\forall int k; 0<=k && k<j; addresses[j] != addresses[k]));

//@ maintaining i >= 0 && i <= 100;

//@ loop_invariant (\forall int j; 0<=j && j<i; addresses[j].address == j);

//@ decreasing 100 - i;

//@ public invariant addresses.length == 100;

//@ ensures (\forall int i; i >= 0 && i < 100; addresses[i] != null);

//@ ensures (\forall int j,k; 0<=j && j<100 && 0<=k && k<j; addresses[j] != addresses[k]);

//@ ensures (\forall int j; 0<=j && j<100; addresses[j].address == j);

//@ maintaining i >= 0 && i <= 100;

//@ loop_invariant (\forall int j; 0<=j && j<i; addresses[j] != null);

//@ loop_invariant (\forall int j; 0<=j && j<i; \fresh(addresses[j],LoopInit));

//@ loop_invariant (\forall int j; 0<=j && j<i; (\forall int k; 0<=k && k<j; addresses[j] != addresses[k]));

//@ decreasing 100 - i;

//@ havoc jj;

//@ assume 0 <= jj && jj < i ;

//@ show jj,i,addresses[jj],addresses[i], \fresh(addresses[jj],LoopBodyBegin), \fresh(addresses[i],LoopBodyBegin);

//@ assert addresses[i] != addresses[jj];

//@ assert !\fresh(addresses[jj], LoopBodyBegin);

//@ assert \fresh(addresses[i], LoopBodyBegin);

//@ assert (\forall int j; 0<=j && j<=i; (\forall int k; 0<=k && k<j; addresses[j] != addresses[k]));

//@ maintaining i >= 0 && i <= 100;

//@ loop_invariant (\forall int j; 0<=j && j<i; addresses[j].address == j);

//@ decreasing 100 - i;

//@ pure

//@ pure

//@ private exceptional_behavior

//@     signals (IndexOutOfBoundsException ex) true;

//@ private behavior

//@     ensures true;

//@ private exceptional_behavior

//@     signals (IndexOutOfBoundsException ex) true;

//@ private behavior

//@     ensures true;

//@ private exceptional_behavior

//@     signals (IndexOutOfBoundsException ex) true;

//@ private behavior

//@     ensures true;

//@ assert ex.toStringDefined;

//@ private exceptional_behavior

//@     signals (IndexOutOfBoundsException ex) true;

//@ private behavior

//@     ensures true;

//@ assert ex.toStringDefined;

_by_default

//@ public normal_behavior

//@   ensures value == v && other == o;

//@ pure

//@ public normal_behavior

//@   assignable value;

//@   ensures value == v;

//@ assume t.value == 1;

//@ assume t.other == 2;

//@ assert t.other == 2;

//@ assert t.value == 3;

//@ assume t.value == 1;

//@ assume t.other == 2;

//@ assert t.other == 2;

//@ assert t.value == 3;

//@ requires t.length > 10;

//@ requires t[0] != null;

//@ assume t[0].value == 1;

//@ assume t[0].other == 2;

//@ assert t[0].other == 2;

//@ assert t[0].value == 3;

//@ requires t.length > 10;

//@ requires t[0] != null;

//@ assume t[0].value == 1;

//@ assume t[0].other == 2;

//@ assert t[0].other == 2;

//@ assert t[0].value == 3;

//@ requires t.length > 10;

//@ requires t[0] != null;

//@ requires t[0].length > 10;

//@ requires t[0][0] != null;

//@ assume t[0][0].value == 1;

//@ assume t[0][0].other == 2;

//@ assert t[0][0].other == 2;

//@ assert t[0][0].value == 3;

//@ requires t.length > 10;

//@ requires t[0] != null;

//@ requires t[0].length > 10;

//@ requires t[0][0] != null;

//@ assume t[0][0].value == 1;

//@ assume t[0][0].other == 2;

//@ assert t[0][0].other == 2;

//@ assert t[0][0].value == 3;

//@ assume t.value == 1;

//@ assume this.value == 1;

//@ assert this.value == 1; // ERROR - should fail

//@ assert t.value == 3;

//@ requires t != this;

//@ assume t.value == 1;

//@ assume this.value == 1;

//@ assert this.value == 1;

//@ assert t.value == 3;

//@ requires t.length > 10;

//@ requires t[0] != null;

//@ requires t[1] != null;

//@ assume t[0].value == 1;

//@ assume t[1].value == 1;

//@ assert t[1].value == 1;  // Fails

//@ assert t[0].value == 3;

//@ requires t.length > 10;

//@ requires t[0] != null;

//@ requires t[1] != null;

//@ assume t[0].value == 1;

//@ assume t[1].value == 1;

//@ assume t[0] != t[1];

//@ assert t[1].value == 1;

//@ assert t[0].value == 3;

//@ requires t.length > 10;

//@ requires t[0] != null;

//@ requires t[1] != null;

//@ assume t[0].value == 1;

//@ assume t[1].value == 2;

//@ assert t[1].value == 2;

//@ assert t[0].value == 3;

_by_default

//@ public normal_behavior

//@   ensures value == v && other == o;

//@ pure

//@ public normal_behavior

//@   assignable value;

//@   ensures value == v;

//@ assume t.value == 1;

//@ assume t.other == 2;

//@ assert t.other == 2;

//@ assert t.value == 3;

//@ assume t.value == 1;

//@ assume t.other == 2;

//@ assert t.other == 2;

//@ assert t.value == 3;

//@ requires t.length > 10;

//@ requires t[0] != null;

//@ assume t[0].value == 1;

//@ assume t[0].other == 2;

//@ assert t[0].other == 2;

//@ assert t[0].value == 3;

//@ requires t.length > 10;

//@ requires t[0] != null;

//@ assume t[0].value == 1;

//@ assume t[0].other == 2;

//@ assert t[0].other == 2;

//@ assert t[0].value == 3;

//@ requires t.length > 10;

//@ requires t[0] != null;

//@ requires t[0].length > 10;

//@ requires t[0][0] != null;

//@ assume t[0][0].value == 1;

//@ assume t[0][0].other == 2;

//@ assert t[0][0].other == 2;

//@ assert t[0][0].value == 3;

//@ requires t.length > 10;

//@ requires t[0] != null;

//@ requires t[0].length > 10;

//@ requires t[0][0] != null;

//@ assume t[0][0].value == 1;

//@ assume t[0][0].other == 2;

//@ assert t[0][0].other == 2;

//@ assert t[0][0].value == 3;

//@ assume t.value == 1;

//@ assume this.value == 1;

//@ assert this.value == 1; // ERROR - should fail

//@ assert t.value == 3;

//@ requires t != this;

//@ assume t.value == 1;

//@ assume this.value == 1;

//@ assert this.value == 1;

//@ assert t.value == 3;

//@ requires t.length > 10;

//@ requires t[0] != null;

//@ requires t[1] != null;

//@ assume t[0].value == 1;

//@ assume t[1].value == 1;

//@ assert t[1].value == 1;  // Fails

//@ assert t[0].value == 3;

//@ requires t.length > 10;

//@ requires t[0] != null;

//@ requires t[1] != null;

//@ assume t[0].value == 1;

//@ assume t[1].value == 1;

//@ assume t[0] != t[1];

//@ assert t[1].value == 1;

//@ assert t[0].value == 3;

//@ requires t.length > 10;

//@ requires t[0] != null;

//@ requires t[1] != null;

//@ assume t[0].value == 1;

//@ assume t[1].value == 2;

//@ assert t[1].value == 2;

//@ assert t[0].value == 3;

//@ model import org.jmlspecs.models.JMLDouble;

/*@ pure @*/
//@ public ghost static final double tolerance = 0.005;

/*@ ensures JMLDouble.approximatelyEqualTo(
      @             magnitude()*StrictMath.cos(angle()),
      @             \result,
      @             tolerance);
      @*/
/*@ ensures JMLDouble.approximatelyEqualTo(
      @             \result,
      @             magnitude()*StrictMath.sin(angle()),
      @             tolerance);
      @*/
/*@ ensures JMLDouble.approximatelyEqualTo(
      @             StrictMath.sqrt(realPart()*realPart()
      @                       + imaginaryPart()*imaginaryPart()),
      @             \result,
      @             tolerance);
      @*/
/*@ ensures JMLDouble.approximatelyEqualTo(
      @             StrictMath.atan2(imaginaryPart(), realPart()),
      @             \result,
      @             tolerance);
      @*/
//@ requires_redundantly b != null;

//@ ensures_redundantly \result != null;

/*@ ensures JMLDouble.approximatelyEqualTo(
      @             this.realPart() + b.realPart(),
      @             \result.realPart(),
      @             tolerance);
      @ ensures JMLDouble.approximatelyEqualTo(
      @             this.imaginaryPart() + b.imaginaryPart(),
      @             \result.imaginaryPart(),
      @             tolerance);
      @*/
//@ requires_redundantly b != null;

//@ ensures_redundantly \result != null;

/*@ ensures JMLDouble.approximatelyEqualTo(
      @             this.realPart() - b.realPart(),
      @             \result.realPart(),
      @             tolerance);
      @ ensures JMLDouble.approximatelyEqualTo(
      @             this.imaginaryPart() - b.imaginaryPart(),
      @             \result.imaginaryPart(),
      @             tolerance);
      @*/
/*@ public model pure boolean similarAngle(double ang1, double ang2) {
      @    ang1 = positiveRemainder(ang1, 2*StrictMath.PI);
      @    ang2 = positiveRemainder(ang2, 2*StrictMath.PI);
      @    return JMLDouble.approximatelyEqualTo(ang1, ang2, tolerance);
      @ }
      @*/
//@ axiom (\forall double d,dd; dd > 0.0; d%dd > -dd && d%dd < dd);

//@ axiom (\forall double d,dd; d > -dd ==> d+dd > 0.0);

/*@ requires d > 0.0;
      @ ensures \result >= 0.0;
      @ public model pure double positiveRemainder(double n, double d) {
      @    n = n % d;
      @    if (n < 0) {
      @       n += d;
      @    }
      @    return n;
      @ }
      @*/
/*@   requires_redundantly b != null;
      @   requires !Double.isNaN(this.magnitude() * b.magnitude());
      @   requires !Double.isNaN(this.angle()) && !Double.isNaN(b.angle());
      @   ensures_redundantly \result != null;
      @   ensures JMLDouble.approximatelyEqualTo(
      @               this.magnitude() * b.magnitude(),
      @               \result.magnitude(),
      @               tolerance);
      @   ensures similarAngle(this.angle() + b.angle(),
      @                        \result.angle());
      @ also
      @   requires_redundantly b != null;
      @   requires Double.isNaN(this.magnitude() * b.magnitude())
      @         || Double.isNaN(this.angle()) || Double.isNaN(b.angle());
      @   ensures Double.isNaN(\result.realPart());
      @   ensures \result.imaginaryPart() == 0.0;
      @*/
/*@   requires_redundantly b != null;
      @   requires !Double.isNaN(this.magnitude() / b.magnitude());
      @   requires !Double.isNaN(this.angle()) && !Double.isNaN(b.angle());
      @   ensures_redundantly \result != null;
      @   ensures JMLDouble.approximatelyEqualTo(
      @               this.magnitude() / b.magnitude(),
      @               \result.magnitude(),
      @               tolerance);
      @   ensures similarAngle(this.angle() - b.angle(),
      @                        \result.angle());
      @ also
      @   requires_redundantly b != null;
      @   requires Double.isNaN(this.magnitude() / b.magnitude())
      @         || Double.isNaN(this.angle()) || Double.isNaN(b.angle());
      @   ensures Double.isNaN(\result.realPart());
      @   ensures \result.imaginaryPart() == 0.0;
      @*/
/*@ also
      @ ensures \result
      @     <==> o instanceof Complex
      @          && this.realPart() == ((Complex)o).realPart()
      @          && this.imaginaryPart() == ((Complex)o).imaginaryPart();
      @ ensures \result
      @     <==> o instanceof Complex
      @          && this.magnitude() == ((Complex)o).magnitude()
      @          && this.angle() == ((Complex)o).angle();
      @*/
/*@ nullable @*/
//@ model import org.jmlspecs.models.JMLDouble;

/*@ pure @*/
//@ public ghost static final double tolerance = 0.005;

/*@ ensures JMLDouble.approximatelyEqualTo(
      @             magnitude()*StrictMath.cos(angle()),
      @             \result,
      @             tolerance);
      @*/
/*@ ensures JMLDouble.approximatelyEqualTo(
      @             \result,
      @             magnitude()*StrictMath.sin(angle()),
      @             tolerance);
      @*/
/*@ ensures JMLDouble.approximatelyEqualTo(
      @             StrictMath.sqrt(realPart()*realPart()
      @                       + imaginaryPart()*imaginaryPart()),
      @             \result,
      @             tolerance);
      @*/
/*@ ensures JMLDouble.approximatelyEqualTo(
      @             StrictMath.atan2(imaginaryPart(), realPart()),
      @             \result,
      @             tolerance);
      @*/
//@ requires_redundantly b != null;

//@ ensures_redundantly \result != null;

/*@ ensures JMLDouble.approximatelyEqualTo(
      @             this.realPart() + b.realPart(),
      @             \result.realPart(),
      @             tolerance);
      @ ensures JMLDouble.approximatelyEqualTo(
      @             this.imaginaryPart() + b.imaginaryPart(),
      @             \result.imaginaryPart(),
      @             tolerance);
      @*/
//@ requires_redundantly b != null;

//@ ensures_redundantly \result != null;

/*@ ensures JMLDouble.approximatelyEqualTo(
      @             this.realPart() - b.realPart(),
      @             \result.realPart(),
      @             tolerance);
      @ ensures JMLDouble.approximatelyEqualTo(
      @             this.imaginaryPart() - b.imaginaryPart(),
      @             \result.imaginaryPart(),
      @             tolerance);
      @*/
/*@ public model pure boolean similarAngle(double ang1, double ang2) {
      @    ang1 = positiveRemainder(ang1, 2*StrictMath.PI);
      @    ang2 = positiveRemainder(ang2, 2*StrictMath.PI);
      @    return JMLDouble.approximatelyEqualTo(ang1, ang2, tolerance);
      @ }
      @*/
//@ axiom (\forall double d,dd; dd > 0.0; d%dd > -dd && d%dd < dd);

//@ axiom (\forall double d,dd; d > -dd ==> d+dd > 0.0);

/*@ requires d > 0.0;
      @ ensures \result >= 0.0;
      @ public model pure double positiveRemainder(double n, double d) {
      @    n = n % d;
      @    if (n < 0) {
      @       n += d;
      @    }
      @    return n;
      @ }
      @*/
/*@   requires_redundantly b != null;
      @   requires !Double.isNaN(this.magnitude() * b.magnitude());
      @   requires !Double.isNaN(this.angle()) && !Double.isNaN(b.angle());
      @   ensures_redundantly \result != null;
      @   ensures JMLDouble.approximatelyEqualTo(
      @               this.magnitude() * b.magnitude(),
      @               \result.magnitude(),
      @               tolerance);
      @   ensures similarAngle(this.angle() + b.angle(),
      @                        \result.angle());
      @ also
      @   requires_redundantly b != null;
      @   requires Double.isNaN(this.magnitude() * b.magnitude())
      @         || Double.isNaN(this.angle()) || Double.isNaN(b.angle());
      @   ensures Double.isNaN(\result.realPart());
      @   ensures \result.imaginaryPart() == 0.0;
      @*/
/*@   requires_redundantly b != null;
      @   requires !Double.isNaN(this.magnitude() / b.magnitude());
      @   requires !Double.isNaN(this.angle()) && !Double.isNaN(b.angle());
      @   ensures_redundantly \result != null;
      @   ensures JMLDouble.approximatelyEqualTo(
      @               this.magnitude() / b.magnitude(),
      @               \result.magnitude(),
      @               tolerance);
      @   ensures similarAngle(this.angle() - b.angle(),
      @                        \result.angle());
      @ also
      @   requires_redundantly b != null;
      @   requires Double.isNaN(this.magnitude() / b.magnitude())
      @         || Double.isNaN(this.angle()) || Double.isNaN(b.angle());
      @   ensures Double.isNaN(\result.realPart());
      @   ensures \result.imaginaryPart() == 0.0;
      @*/
/*@ also
      @ ensures \result
      @     <==> o instanceof Complex
      @          && this.realPart() == ((Complex)o).realPart()
      @          && this.imaginaryPart() == ((Complex)o).imaginaryPart();
      @ ensures \result
      @     <==> o instanceof Complex
      @          && this.magnitude() == ((Complex)o).magnitude()
      @          && this.angle() == ((Complex)o).angle();
      @*/
/*@ nullable @*/
/*@ pure @*/
/*@ nullable @*/
/*@ pure @*/
/*@ nullable @*/
/*@ pure @*/
/*@   requires mag >= 0 && Double.NEGATIVE_INFINITY < ang
      @         && ang < Double.POSITIVE_INFINITY;
      @   ensures this.magnitude() == mag;
      @   ensures this.angle() == standardizeAngle(ang);
      @ also
      @   requires mag < 0 && Double.NEGATIVE_INFINITY < ang
      @         && ang < Double.POSITIVE_INFINITY;
      @   ensures this.magnitude() == - mag;
      @   ensures this.angle() == standardizeAngle(ang+StrictMath.PI);
      @ also
      @   requires Double.isNaN(mag) || Double.isNaN(ang)
      @            || Double.NEGATIVE_INFINITY == ang
      @            || ang == Double.POSITIVE_INFINITY;
      @   signals_only IllegalArgumentException;
      @*/
/*@   requires Double.NEGATIVE_INFINITY < rad
      @            && rad < Double.POSITIVE_INFINITY;
      @   ensures -StrictMath.PI <= \result && \result <= StrictMath.PI;
      @ also
      @   requires Double.isNaN(rad) || Double.NEGATIVE_INFINITY == rad
      @            || rad == Double.POSITIVE_INFINITY;
      @   signals_only IllegalArgumentException;
      @*/
/*@ pure @*/
/*@ pure @*/
/*@   requires mag >= 0 && Double.NEGATIVE_INFINITY < ang
      @         && ang < Double.POSITIVE_INFINITY;
      @   ensures this.magnitude() == mag;
      @   ensures this.angle() == standardizeAngle(ang);
      @ also
      @   requires mag < 0 && Double.NEGATIVE_INFINITY < ang
      @         && ang < Double.POSITIVE_INFINITY;
      @   ensures this.magnitude() == - mag;
      @   ensures this.angle() == standardizeAngle(ang+StrictMath.PI);
      @ also
      @   requires Double.isNaN(mag) || Double.isNaN(ang)
      @            || Double.NEGATIVE_INFINITY == ang
      @            || ang == Double.POSITIVE_INFINITY;
      @   signals_only IllegalArgumentException;
      @*/
/*@   requires Double.NEGATIVE_INFINITY < rad
      @            && rad < Double.POSITIVE_INFINITY;
      @   ensures -StrictMath.PI <= \result && \result <= StrictMath.PI;
      @ also
      @   requires Double.isNaN(rad) || Double.NEGATIVE_INFINITY == rad
      @            || rad == Double.POSITIVE_INFINITY;
      @   signals_only IllegalArgumentException;
      @*/
/*@ pure @*/
/*@ pure @*/
//@ ensures realPart() == 0.0 && imaginaryPart() == 0.0;

/*@   requires !Double.isNaN(re);
      @   ensures realPart() == re && imaginaryPart() == 0.0;
      @ also
      @   requires Double.isNaN(re);
      @   ensures Double.isNaN(realPart()) && imaginaryPart() == 0.0;
      @*/
/*@
      @ ensures !Double.isNaN(re) ==> realPart() == re;
      @ ensures !Double.isNaN(img) ==> imaginaryPart() == img;
      @ ensures Double.isNaN(re) ==> Double.isNaN(realPart());
      @ ensures Double.isNaN(img) ==> Double.isNaN(imaginaryPart());
      @*/
/*@ pure @*/
//@ ensures realPart() == 0.0 && imaginaryPart() == 0.0;

/*@   requires !Double.isNaN(re);
      @   ensures realPart() == re && imaginaryPart() == 0.0;
      @ also
      @   requires Double.isNaN(re);
      @   ensures Double.isNaN(realPart()) && imaginaryPart() == 0.0;
      @*/
/*@
      @ ensures !Double.isNaN(re) ==> realPart() == re;
      @ ensures !Double.isNaN(img) ==> imaginaryPart() == img;
      @ ensures Double.isNaN(re) ==> Double.isNaN(realPart());
      @ ensures Double.isNaN(img) ==> Double.isNaN(imaginaryPart());
      @*/
//@ in NNNN;

//@ in NNNN3;

//@ spec_public

//@ in NNNN2;

//@ public model int NNNN;

//@ private represents NNNN = count;

//@ public model int NNNN2;

//@ private represents NNNN2 = count2;

//@ public model int NNNN3;

//@ private represents NNNN3 \such_that NNNN3 == count3;

//@ public normal_behavior

//@   assignable \everything;

//@   ensures NNNN == \old(NNNN);  // BOGUS! This should not verify, but it does.

//@ public normal_behavior

//@   requires count2 == 120;

//@   assignable \everything;

//@   ensures NNNN2 == \old(NNNN2);

//@ public normal_behavior

//@   assignable NNNN;

//@   ensures NNNN == \old(NNNN);  // BOGUS! This should not verify, but it does.

//@ public normal_behavior

//@   requires count2 == 120;

//@   assignable NNNN2;

//@   ensures NNNN2 == \old(NNNN2);

//@ public normal_behavior

//@   assignable NNNN3;

//@   ensures NNNN3 == \old(NNNN3);  // BOGUS! This should not verify, but it does.

//@ in NNNN;

//@ in NNNN3;

//@ spec_public

//@ in NNNN2;

//@ public model int NNNN;

//@ private represents NNNN = count;

//@ public model int NNNN2;

//@ private represents NNNN2 = count2;

//@ public model int NNNN3;

//@ private represents NNNN3 \such_that NNNN3 == count3;

//@ public normal_behavior

//@   assignable \everything;

//@   ensures NNNN == \old(NNNN);  // BOGUS! This should not verify, but it does.

//@ public normal_behavior

//@   requires count2 == 120;

//@   assignable \everything;

//@   ensures NNNN2 == \old(NNNN2);

//@ public normal_behavior

//@   assignable NNNN;

//@   ensures NNNN == \old(NNNN);  // BOGUS! This should not verify, but it does.

//@ public normal_behavior

//@   requires count2 == 120;

//@   assignable NNNN2;

//@   ensures NNNN2 == \old(NNNN2);

//@ public normal_behavior

//@   assignable NNNN3;

//@   ensures NNNN3 == \old(NNNN3);  // BOGUS! This should not verify, but it does.

//@ private exceptional_behavior

//@   signals_only MyException;

//@ pure

//@ public normal_behavior

//@   ensures false;

//@ private exceptional_behavior

//@   signals_only MyException;

//@ //pure

//@ public normal_behavior

//@   ensures false;

//@ private exceptional_behavior

//@   signals_only MyException;

//@ pure

//@ public normal_behavior

//@   ensures false;

//@ private exceptional_behavior

//@   signals_only MyException;

//@ //pure

//@ public normal_behavior

//@   ensures false;

//@ public normal_behavior

//@   requires new String(s, cs) != null;

//@ public normal_behavior

//@   requires new String(s, cs) != null;

//@ model public int X;

//@ in X;

//@ private represents X = 0;

//@ public behavior

//@   assignable \everything;

//@ assert !b;  // BAD! This does not hold after a call to havocX

//@ public normal_behavior

//@   assignable X;

//@ private normal_behavior

//@ ensures b == \old(b); // This also should not be valid

//@ model public int X;

//@ in X;

//@ private represents X = 0;

//@ public behavior

//@   assignable \everything;

//@ assert !b;  // BAD! This does not hold after a call to havocX

//@ public normal_behavior

//@   assignable X;

//@ private normal_behavior

//@ ensures b == \old(b); // This also should not be valid

//@ public normal_behavior

//@   ensures \result == x;

//@ pure helper

//@ public normal_behavior

//@   requires y == 10;

//@   requires x == 10;

//@ also

//@ public exceptional_behavior

//@ requires size() != 10;

//@ public normal_behavior

//@   ensures \result == x;

//@ pure helper

//@ public normal_behavior

//@   requires y == 10;

//@   requires x == 10;

//@ also

//@ public exceptional_behavior

//@ requires size() != 10;

//@ requires x >= 0 && y > 0;

//@ requires x >= 0;

//@ requires this.x >= 0;

//@ requires x >= 0 && y > 0;

//@ requires x >= 0;

//@ requires this.x >= 0;

//@ requires t != this;

//@ requires x >= 0 && y > 0;

//@ requires x >= 0;

//@ requires this.x >= 0;

//@ requires x >= 0 && y > 0;

//@ requires x >= 0;

//@ requires this.x >= 0;

//@ requires t != this;

//@ refining ensures false;  // statement spec, but no warning about false assertion

//@ refining ensures false;  // statement spec, but no warning about false assertion

//@ public normal_behavior

//@   requires r != null && s != null;

//@ public normal_behavior

//@   requires r != null && s != null;

//@   assignable r.x;

//@   ensures r.x == 10;

//@   ensures s.x == \old(s.x);  // OpenJML warns about this

//@ public normal_behavior

//@   requires r != null && s != null;

//@ public normal_behavior

//@   requires r != null && s != null;

//@   assignable r.x;

//@   ensures r.x == 10;

//@   ensures s.x == \old(s.x);  // OpenJML warns about this

//@ requires i > 0;;

//@ ensures true;

//@ assert i > 0;

//@ requires true;

//@ requires true;

//@ model public int kk;

//@ requires true;

//@ requires true;

//@ model public static class CC{}

//@ requires true;

//@ requires true;

//@ invariant true;

//@ requires true;

//@ constraint true;

//@ requires true;

//@ axiom true;

//@ requires true;

//@ initially true;

//@ requires i > 0;;

//@ ensures true;

//@ assert i > 0;

//@ requires true;

//@ requires true;

//@ model public int kk;

//@ requires true;

//@ requires true;

//@ model public static class CC{}

//@ requires true;

//@ requires true;

//@ invariant true;

//@ requires true;

//@ constraint true;

//@ requires true;

//@ axiom true;

//@ requires true;

//@ initially true;

_by_default

/*@ immutable pure public static model class Content {

       function helper
       public Object mapsObject(nullable Object key);

       function helper
       public Object mapss(nullable Object key);

       function helper
       public boolean hasMapObject(nullable Object key);

       function helper
       public boolean hasMap(nullable Object key);
     }
    @*/
//@ axiom (\forall Content c; (\forall Object o; c.hasMapObject(o) ==> c.mapsObject(o) == c.mapss(o)) && c.hasMapObject(null) ==> c.mapsObject(null) == c.mapss(null));

//@ axiom (\forall Content c; (\forall Object o; o != null; c.hasMapObject(o) ==> c.mapsObject(o) == c.mapss(o)));

//@ axiom (\forall Content c; c.hasMapObject(null) ==> c.mapsObject(null) == c.mapss(null));

_by_default

/*@ immutable pure public static model class Content {

       function helper
       public Object mapsObject(nullable Object key);

       function helper
       public Object mapss(nullable Object key);

       function helper
       public boolean hasMapObject(nullable Object key);

       function helper
       public boolean hasMap(nullable Object key);
     }
    @*/
//@ axiom (\forall Content c; (\forall Object o; c.hasMapObject(o) ==> c.mapsObject(o) == c.mapss(o)) && c.hasMapObject(null) ==> c.mapsObject(null) == c.mapss(null));

//@ axiom (\forall Content c; (\forall Object o; o != null; c.hasMapObject(o) ==> c.mapsObject(o) == c.mapss(o)));

//@ axiom (\forall Content c; c.hasMapObject(null) ==> c.mapsObject(null) == c.mapss(null));

_by_default

/*@ immutable pure public static model class Content {

       function helper
       public Object mapsObject(nullable Object key);

       function helper
       public Object mapss(nullable Object key);

       function helper
       public boolean hasMapObject(nullable Object key);

       function helper
       public boolean hasMap(nullable Object key);
     }
    @*/
//@ axiom (\forall Content c; (\forall Object o; c.hasMapObject(o) ==> c.mapsObject(o) == c.mapss(o)) && c.hasMapObject(null) ==> c.mapsObject(null) == c.mapss(null));

//@ axiom (\forall Content c; (\forall Object o; o != null; c.hasMapObject(o) ==> c.mapsObject(o) == c.mapss(o)));

//@ axiom (\forall Content c; c.hasMapObject(null) ==> c.mapsObject(null) == c.mapss(null));

_by_default

/*@ immutable pure public static model class Content {

       function helper
       public Object mapsObject(nullable Object key);

       function helper
       public Object mapss(nullable Object key);

       function helper
       public boolean hasMapObject(nullable Object key);

       function helper
       public boolean hasMap(nullable Object key);
     }
    @*/
//@ axiom (\forall Content c; (\forall Object o; c.hasMapObject(o) ==> c.mapsObject(o) == c.mapss(o)) && c.hasMapObject(null) ==> c.mapsObject(null) == c.mapss(null));

//@ axiom (\forall Content c; (\forall Object o; o != null; c.hasMapObject(o) ==> c.mapsObject(o) == c.mapss(o)));

//@ axiom (\forall Content c; c.hasMapObject(null) ==> c.mapsObject(null) == c.mapss(null));

_by_default

/*@ immutable pure public static model class Content {

       function helper
       public Object mapsObject(nullable Object key);

       function helper
       public Object mapss(nullable Object key);

       function helper
       public boolean hasMapObject(nullable Object key);

       function helper
       public boolean hasMap(nullable Object key);
     }
    @*/
//@ axiom (\forall Content c; (\forall Object o; c.hasMapObject(o) ==> c.mapsObject(o) == c.mapss(o)) && c.hasMapObject(null) ==> c.mapsObject(null) == c.mapss(null));

//@ axiom (\forall Content c; (\forall Object o; o != null; c.hasMapObject(o) ==> c.mapsObject(o) == c.mapss(o)));

//@ axiom (\forall Content c; c.hasMapObject(null) ==> c.mapsObject(null) == c.mapss(null));

_by_default

/*@ immutable pure public static model class Content {

       function helper
       public Object mapsObject(nullable Object key);

       function helper
       public Object mapss(nullable Object key);

       function helper
       public boolean hasMapObject(nullable Object key);

       function helper
       public boolean hasMap(nullable Object key);
     }
    @*/
//@ axiom (\forall Content c; (\forall Object o; c.hasMapObject(o) ==> c.mapsObject(o) == c.mapss(o)) && c.hasMapObject(null) ==> c.mapsObject(null) == c.mapss(null));

//@ axiom (\forall Content c; (\forall Object o; o != null; c.hasMapObject(o) ==> c.mapsObject(o) == c.mapss(o)));

//@ axiom (\forall Content c; c.hasMapObject(null) ==> c.mapsObject(null) == c.mapss(null));

_by_default

/*@ immutable pure public static model class Content {

       function helper
       public Object mapsObject(nullable Object key);

       function helper
       public Object mapss(nullable Object key);

       function helper
       public boolean hasMapObject(nullable Object key);

       function helper
       public boolean hasMap(nullable Object key);
     }
    @*/
//@ axiom (\forall Content c; (\forall Object o; c.hasMapObject(o) ==> c.mapsObject(o) == c.mapss(o)) && c.hasMapObject(null) ==> c.mapsObject(null) == c.mapss(null));

//@ axiom (\forall Content c; (\forall Object o; o != null; c.hasMapObject(o) ==> c.mapsObject(o) == c.mapss(o)));

//@ axiom (\forall Content c; c.hasMapObject(null) ==> c.mapsObject(null) == c.mapss(null));

_by_default

/*@ immutable pure public static model class Content {

       function helper
       public Object mapsObject(nullable Object key);

       function helper
       public Object mapss(nullable Object key);

       function helper
       public boolean hasMapObject(nullable Object key);

       function helper
       public boolean hasMap(nullable Object key);
     }
    @*/
//@ axiom (\forall Content c; (\forall Object o; c.hasMapObject(o) ==> c.mapsObject(o) == c.mapss(o)) && c.hasMapObject(null) ==> c.mapsObject(null) == c.mapss(null));

//@ axiom (\forall Content c; (\forall Object o; o != null; c.hasMapObject(o) ==> c.mapsObject(o) == c.mapss(o)));

//@ axiom (\forall Content c; c.hasMapObject(null) ==> c.mapsObject(null) == c.mapss(null));

_by_default

//@ spec_public

//@ private normal_behavior

//@   requires true;

//@ pure

_by_default



//@ public normal_behavior

//@   requires true;

//@ pure

//@ assert aaaa.pppp != null;  // OpenJML is OK

//@ assert aaaa.ssss != null;  // OpenJML reports error

//@ assert bbbb.b != null; // should be true

//@ assert bbbb != this;

//@ public normal_behavior

//@   requires true;

//@ pure

//@ assert aaaa.ssss != null;  // fine



//@ public normal_behavior

//@   requires true;

//@ pure

//@ assert cccc != null;

//@ public normal_behavior

//@ assignable cccc;

//@ ensures this.cccc == c.cccc;

//@ assert c.cccc != null; // Not true when called in a constructor with c == this

//@ assert this.cccc != null;

_by_default

//@ spec_public

//@ private normal_behavior

//@   requires true;

//@ pure

_by_default



//@ public normal_behavior

//@   requires true;

//@ pure

//@ assert aaaa.pppp != null;  // OpenJML is OK

//@ assert aaaa.ssss != null;  // OpenJML reports error

//@ assert bbbb.b != null; // should be true

//@ assert bbbb != this;

//@ public normal_behavior

//@   requires true;

//@ pure

//@ assert aaaa.ssss != null;  // fine



//@ public normal_behavior

//@   requires true;

//@ pure

//@ assert cccc != null;

//@ public normal_behavior

//@ assignable cccc;

//@ ensures this.cccc == c.cccc;

//@ assert c.cccc != null; // Not true when called in a constructor with c == this

//@ assert this.cccc != null;

//@ assert x == 701; // FAILS to prove because specs are not visible

//@ public normal_behavior

//@   ensures true;

//@ private normal_behavior

//@   ensures \result == 701;

//@ assert x == 701; // FAILS to prove because specs are not visible

//@ public normal_behavior

//@   ensures true;

//@ private normal_behavior

//@   ensures \result == 701;

//@ public normal_behavior

//@   ensures true;

//@ private normal_behavior

//@   ensures true;

//@ pure

//@ public normal_behavior

//@   ensures true;

//@ private normal_behavior

//@   ensures true;

//@ pure

/*@ immutable pure public static model class Content {
      @     public normal_behavior
      @       ensures true;
      @     function
      @     public boolean P(nullable Object key);

      @ axiom (\forall Content c; (\forall Object o; c.P(o)));

      @ }
      @
      @*/
//@ public model instance non_null Content content;

//@ public invariant content.P(null);




//@ public normal_behavior

//@   ensures true;

/*@ immutable pure public static model class Content {
      @     public normal_behavior
      @       ensures true;
      @     function
      @     public boolean P(nullable Object key);

      @ axiom (\forall Content c; (\forall Object o; c.P(o)));

      @ }
      @
      @*/
//@ public model instance non_null Content content;

//@ public invariant content.P(null);




//@ public normal_behavior

//@   ensures true;

/*@ immutable pure public static model class Content {
      @     axiom (\forall Content c; (\forall Object o; c.P(o)));
      @     public normal_behavior
      @       ensures true;
      @     function
      @     public boolean P(nullable Object key);

      @ }
      @
      @*/
//@ public model instance non_null Content content;

//@ public invariant content.P(null);




//@ public normal_behavior

//@   ensures true;

/*@ immutable pure public static model class Content {
      @     axiom (\forall Content c; (\forall Object o; c.P(o)));
      @     public normal_behavior
      @       ensures true;
      @     function
      @     public boolean P(nullable Object key);

      @ }
      @
      @*/
//@ public model instance non_null Content content;

//@ public invariant content.P(null);




//@ public normal_behavior

//@   ensures true;

/*@ immutable pure public static model class Content {
      @     public normal_behavior
      @       ensures true;
      @     function
      @     public boolean P(nullable Object key);

      @ }
      @
      @ axiom (\forall Content c; (\forall Object o; c.P(o)));
      @*/
//@ public model instance non_null Content content;

//@ public invariant content.P(null);




//@ public normal_behavior

//@   ensures true;

/*@ immutable pure public static model class Content {
      @     public normal_behavior
      @       ensures true;
      @     function
      @     public boolean P(nullable Object key);

      @ }
      @
      @ axiom (\forall Content c; (\forall Object o; c.P(o)));
      @*/
//@ public model instance non_null Content content;

//@ public invariant content.P(null);




//@ public normal_behavior

//@   ensures true;

//@ axiom (\forall Content c; (\forall Object o; c.P(o)));

/*@ immutable pure public static model class Content {
      @     public normal_behavior
      @       ensures true;
      @     function helper
      @     public boolean P(nullable Object key);

      @ }
      @
      @*/
//@ public model instance non_null Content content;

//@ public invariant content.P(null);




//@ public normal_behavior

//@   ensures true;

//@ axiom (\forall Content c; (\forall Object o; c.P(o)));

/*@ immutable pure public static model class Content {
      @     public normal_behavior
      @       ensures true;
      @     function helper
      @     public boolean P(nullable Object key);

      @ }
      @
      @*/
//@ public model instance non_null Content content;

//@ public invariant content.P(null);




//@ public normal_behavior

//@   ensures true;

//@ nullable_by_default

//@ nullable_by_default

//@ nullable

//@ public normal_behavior

//@   ensures true;

//@ public normal_behavior

//@   ensures true; //\result == xyz;

//@ nullable_by_default

//@ public normal_behavior

//@   ensures true;

//@ pure

//@ public normal_behavior

//@   ensures true;

//@ nullable_by_default

//@ nullable_by_default

//@ nullable

//@ public normal_behavior

//@   ensures true;

//@ public normal_behavior

//@   ensures true; //\result == xyz;

//@ nullable_by_default

//@ public normal_behavior

//@   ensures true;

//@ pure

//@ public normal_behavior

//@   ensures true;

//@ public normal_behavior

//@   requires y >= 0;

//@   requires x + y <= Integer.MAX_VALUE;

//@   ensures \result == x + y;

//@ pure

//@ public normal_behavior

//@   requires y >= 0;

//@   requires x >= 0;

//@   requires x * y <= Integer.MAX_VALUE;

//@   ensures \result == x * y;

//@ pure

//@ public normal_behavior

//@   requires x <= 10 && y <= 15;

//@   requires y >= 0 && x >= 1;

//@   ensures \result == (y == 0 ? 1 : y == 1 ? x : x * mpow(x,y-1));

//@ pure

//@ model public static function helper long mpow(long x, long y);

//@ public normal_behavior

//@   requires x <= 10 && y <= 15;

//@   requires y >= 0 && x >= 1;

//@   ensures (\lbl R \result) == (long)(\lbl MP mpow(x,y));

//@ pure

//@ show x, y;

//@ public normal_behavior

//@   requires y >= 0;

//@   requires x + y <= Integer.MAX_VALUE;

//@   ensures \result == x + y;

//@ pure

//@ public normal_behavior

//@   requires y >= 0;

//@   requires x >= 0;

//@   requires x * y <= Integer.MAX_VALUE;

//@   ensures \result == x * y;

//@ pure

//@ public normal_behavior

//@   requires x <= 10 && y <= 15;

//@   requires y >= 0 && x >= 1;

//@   ensures \result == (y == 0 ? 1 : y == 1 ? x : x * mpow(x,y-1));

//@ pure

//@ model public static function helper long mpow(long x, long y);

//@ public normal_behavior

//@   requires x <= 10 && y <= 15;

//@   requires y >= 0 && x >= 1;

//@   ensures (\lbl R \result) == (long)(\lbl MP mpow(x,y));

//@ pure

//@ show x, y;

//@ code_safe_math spec_bigint_math

//@ ensures \result == a;

//@ ensures \result == a;

//@ requires aa.length > 10;

//@ requires aa.length > 10;

//@ requires aa.length > 10;

//@ requires aa.length > 10;

//@ requires aa.length > 10;

//@ code_safe_math spec_bigint_math

//@ ensures \result == a;

//@ ensures \result == a;

//@ requires aa.length > 10;

//@ requires aa.length > 10;

//@ requires aa.length > 10;

//@ requires aa.length > 10;

//@ requires aa.length > 10;

//@ requires a >= 0 && a <= 10;

//@ ensures \result == a + 1;

//@ requires a >= 0 && a <= 10;

//@ ensures \result == a + 1;

/*@ also
	  @ public normal_behavior
	@ ensures \result <0;
		  */
/*@ pure @*/
/*@ also
	  @ public normal_behavior
	@ ensures \result <==> this.size()!=0;
		  */
/*@ pure @*/
/*@ pure @*/
/*@ pure @*/
/*@ also
	  @ public normal_behavior
			 @   requires !this.containsKey(key);
	@	ensures \result == null;
	*/
/*@ pure @*/
/*@ also
  @ public normal_behavior
@ ensures this.isEmpty()==false;
		@ ensures this.size()!=0;
	  */
/*@ also
	  @ public normal_behavior
	@ ensures \result ==null;
		  */
/*@ also
	  @ public normal_behavior
	@ ensures \result ==null;
		  */
/*@ also
	  @ public normal_behavior
	@ ensures \result <0;
		  */
/*@ pure @*/
/*@ also
	  @ public normal_behavior
	@ ensures \result <==> this.size()!=0;
		  */
/*@ pure @*/
/*@ pure @*/
/*@ pure @*/
/*@ also
	  @ public normal_behavior
			 @   requires !this.containsKey(key);
	@	ensures \result == null;
	*/
/*@ pure @*/
/*@ also
  @ public normal_behavior
@ ensures this.isEmpty()==false;
		@ ensures this.size()!=0;
	  */
/*@ also
	  @ public normal_behavior
	@ ensures \result ==null;
		  */
/*@ also
	  @ public normal_behavior
	@ ensures \result ==null;
		  */
/*@ also
	  @ public normal_behavior
	@ ensures \result <0;
		  */
/*@ pure @*/
/*@ also
	  @ public normal_behavior
	@ ensures \result <==> this.size()!=0;
		  */
/*@ pure @*/
/*@ pure @*/
/*@ pure @*/
/*@ also
	  @ public normal_behavior
			 @   requires !this.containsKey(key);
	@	ensures \result == null;
	*/
/*@ pure @*/
/*@ also
  @ public normal_behavior
@ ensures this.isEmpty()==false;
		@ ensures this.size()!=0;
	  */
/*@ also
	  @ public normal_behavior
	@ ensures \result ==null;
		  */
/*@ also
	  @ public normal_behavior
	@ ensures \result ==null;
		  */
/*@ also
	  @ public normal_behavior
	@ ensures \result <0;
		  */
/*@ pure @*/
/*@ also
	  @ public normal_behavior
	@ ensures \result <==> this.size()!=0;
		  */
/*@ pure @*/
/*@ pure @*/
/*@ pure @*/
/*@ also
	  @ public normal_behavior
			 @   requires !this.containsKey(key);
	@	ensures \result == null;
	*/
/*@ pure @*/
/*@ also
  @ public normal_behavior
@ ensures this.isEmpty()==false;
		@ ensures this.size()!=0;
	  */
/*@ also
	  @ public normal_behavior
	@ ensures \result ==null;
		  */
/*@ also
	  @ public normal_behavior
	@ ensures \result ==null;
		  */
/*@ also
	  @ public normal_behavior
	@ ensures \result <0;
		  */
/*@ pure @*/
/*@ also
	  @ public normal_behavior
	@ ensures \result <==> this.size()!=0;
		  */
/*@ pure @*/
/*@ pure @*/
/*@ pure @*/
/*@ also
	  @ public normal_behavior
			 @   requires !this.containsKey(key);
	@	ensures \result == null;
	*/
/*@ pure @*/
/*@ also
  @ public normal_behavior
@ ensures this.isEmpty()==false;
		@ ensures this.size()!=0;
	  */
/*@ also
	  @ public normal_behavior
	@ ensures \result ==null;
		  */
/*@ also
	  @ public normal_behavior
	@ ensures \result ==null;
		  */
/*@ also
	  @ public normal_behavior
	@ ensures \result <0;
		  */
/*@ pure @*/
/*@ also
	  @ public normal_behavior
	@ ensures \result <==> this.size()!=0;
		  */
/*@ pure @*/
/*@ pure @*/
/*@ pure @*/
/*@ also
	  @ public normal_behavior
			 @   requires !this.containsKey(key);
	@	ensures \result == null;
	*/
/*@ pure @*/
/*@ also
  @ public normal_behavior
@ ensures this.isEmpty()==false;
		@ ensures this.size()!=0;
	  */
/*@ also
	  @ public normal_behavior
	@ ensures \result ==null;
		  */
/*@ also
	  @ public normal_behavior
	@ ensures \result ==null;
		  */
/*@ also
	  @ public normal_behavior
	@ ensures \result <0;
		  */
/*@ pure @*/
/*@ also
	  @ public normal_behavior
	@ ensures \result <==> this.size()!=0;
		  */
/*@ pure @*/
/*@ pure @*/
/*@ pure @*/
/*@ also
	  @ public normal_behavior
			 @   requires !this.containsKey(key);
	@	ensures \result == null;
	*/
/*@ pure @*/
/*@ also
  @ public normal_behavior
@ ensures this.isEmpty()==false;
		@ ensures this.size()!=0;
	  */
/*@ also
	  @ public normal_behavior
	@ ensures \result ==null;
		  */
/*@ also
	  @ public normal_behavior
	@ ensures \result ==null;
		  */
/*@ also
	  @ public normal_behavior
	@ ensures \result <0;
		  */
/*@ pure @*/
/*@ also
	  @ public normal_behavior
	@ ensures \result <==> this.size()!=0;
		  */
/*@ pure @*/
/*@ pure @*/
/*@ pure @*/
/*@ also
	  @ public normal_behavior
			 @   requires !this.containsKey(key);
	@	ensures \result == null;
	*/
/*@ pure @*/
/*@ also
  @ public normal_behavior
@ ensures this.isEmpty()==false;
		@ ensures this.size()!=0;
	  */
/*@ also
	  @ public normal_behavior
	@ ensures \result ==null;
		  */
/*@ also
	  @ public normal_behavior
	@ ensures \result ==null;
		  */
/*@ also
	  @ public normal_behavior
	@ ensures \result <0;
		  */
/*@ pure @*/
/*@ also
	  @ public normal_behavior
	@ ensures \result <==> this.size()!=0;
		  */
/*@ pure @*/
/*@ pure @*/
/*@ pure @*/
/*@ also
	  @ public normal_behavior
			 @   requires !this.containsKey(key);
	@	ensures \result == null;
	*/
/*@ pure @*/
/*@ also
  @ public normal_behavior
@ ensures this.isEmpty()==false;
		@ ensures this.size()!=0;
	  */
/*@ also
	  @ public normal_behavior
	@ ensures \result ==null;
		  */
/*@ also
	  @ public normal_behavior
	@ ensures \result ==null;
		  */
/*@ also
	  @ public normal_behavior
	@ ensures \result <0;
		  */
/*@ pure @*/
/*@ also
	  @ public normal_behavior
	@ ensures \result <==> this.size()!=0;
		  */
/*@ pure @*/
/*@ pure @*/
/*@ pure @*/
/*@ also
	  @ public normal_behavior
			 @   requires !this.containsKey(key);
	@	ensures \result == null;
	*/
/*@ pure @*/
/*@ also
  @ public normal_behavior
@ ensures this.isEmpty()==false;
		@ ensures this.size()!=0;
	  */
/*@ also
	  @ public normal_behavior
	@ ensures \result ==null;
		  */
/*@ also
	  @ public normal_behavior
	@ ensures \result ==null;
		  */
//@ model import org.jmlspecs.models.JMLFloat;

/*@ spec_public */
//@ requires Double.isFinite(temperature);

//@ assignable Celsius;

//@ ensures Math.abs(\result - (((temperature - 32)*5)/9)) <= 0.1;

//@ model import org.jmlspecs.models.JMLFloat;

/*@ spec_public */
//@ requires Double.isFinite(temperature);

//@ assignable Celsius;

//@ ensures Math.abs(\result - (((temperature - 32)*5)/9)) <= 0.1;

//@ model import org.jmlspecs.models.JMLFloat;

/*@ spec_public */
//@ requires Float.isFinite(temperature);

//@ assignable Celsius;

//@ ensures Double.isFinite(Celsius) && Float.isFinite(\result);

//@ ensures JMLFloat.approximatelyEqualTo(\result, (((temperature - 32)*5)/9), 0.1f) == true;

//@ model import org.jmlspecs.models.JMLFloat;

/*@ spec_public */
//@ requires Float.isFinite(temperature);

//@ assignable Celsius;

//@ ensures Double.isFinite(Celsius) && Float.isFinite(\result);

//@ ensures JMLFloat.approximatelyEqualTo(\result, (((temperature - 32)*5)/9), 0.1f) == true;

//@ ensures \result >= 0;

//@ ensures \result >= 0;

//@ requires r > 0;

//@ requires 3*r*r <= Integer.MAX_VALUE;

//@ show r, 3*r, 3*r*r;

//@ show area;

//@ requires r > 0;

//@ requires 3*r*r <= Integer.MAX_VALUE;

//@ @org.jmlspecs.annotation.Options("-code-math=java")

//@ show r, 3*r, 3*r*r;

//@ show area;

//@ requires r > 0;

//@ requires 3*r*r <= Integer.MAX_VALUE;

//@ @org.jmlspecs.annotation.Options("-code-math=math")

//@ show r, 3*r, 3*r*r;

//@ show area;

//@ requires r > 0;

//@ requires 3*r*r <= Integer.MAX_VALUE;

//@ show r, 3*r, 3*r*r;

//@ show area;

//@ requires r > 0;

//@ requires 3*r*r <= Integer.MAX_VALUE;

//@ @org.jmlspecs.annotation.Options("-code-math=java")

//@ show r, 3*r, 3*r*r;

//@ show area;

//@ requires r > 0;

//@ requires 3*r*r <= Integer.MAX_VALUE;

//@ @org.jmlspecs.annotation.Options("-code-math=math")

//@ show r, 3*r, 3*r*r;

//@ show area;

//@ requires r > 0;

//@ requires 3*r*r <= Integer.MAX_VALUE;

//@ requires r > 0;

//@ requires 3*r*r <= Integer.MAX_VALUE;

//@ requires System.out.outputText instanceof String; // FIXME - why is this not known

//@ requires System.out.outputText.isEmpty(); // TODO: Could be implied by a system startup property

//@ ensures System.out.outputText == "foo";

//@ requires System.out.outputText instanceof String; // FIXME - why is this not known

//@ requires System.out.outputText.isEmpty(); // TODO: Could be implied by a system startup property

//@ ensures System.out.outputText == "foo";

//@ forall int oldarr;

//@ forall int oldarr;

//@ assert (a && b) == (o != null);

//@ assert (a && b) == (o != null);

//@ loop_modifies q.values;

//@ loop_invariant \invariant_for(q);

//@ loop_modifies q.values;

//@ loop_invariant \invariant_for(q);

//@ in year;

//@ in month;

//@ in day;

//@ private represents year = _year;

//@ private represents month = _month;

//@ private represents day = _day;

//@ public invariant 1 <= year && year <= Integer.MAX_VALUE;

//@ public invariant 1 <= month && month <= 12;

//@ public invariant 1 <= day && day <= 31;

//@ requires 1 <= year && year <= Integer.MAX_VALUE;

//@ requires 1 <= month && month <= 12;

//@ requires 1 <= day && day <= 31;

//@ ensures this.year == year;

//@ ensures this.month == month;

//@ ensures this.day == day;

/*@ pure @*/
/*@ pure @*/
/*@ pure @*/
/*@ pure @*/
/*@ pure @*/
/*@ requires this != birth;
     @ ensures \result == ((this.year > birth.year)
     @                   || (this.year == birth.year && this.month > birth.month)
     @                   || (this.year == birth.year && this.month == birth.month && this.day > birth.day)); @*/
/*@ pure @*/
//@ assert true;

//@ assert this._year == birth._year;

//@ assert this._year == birth._year && this._month == birth._month;

//@ in year;

//@ in month;

//@ in day;

//@ private represents year = _year;

//@ private represents month = _month;

//@ private represents day = _day;

//@ public invariant 1 <= year && year <= Integer.MAX_VALUE;

//@ public invariant 1 <= month && month <= 12;

//@ public invariant 1 <= day && day <= 31;

//@ requires 1 <= year && year <= Integer.MAX_VALUE;

//@ requires 1 <= month && month <= 12;

//@ requires 1 <= day && day <= 31;

//@ ensures this.year == year;

//@ ensures this.month == month;

//@ ensures this.day == day;

/*@ pure @*/
/*@ pure @*/
/*@ pure @*/
/*@ pure @*/
/*@ pure @*/
/*@ requires this != birth;
     @ ensures \result == ((this.year > birth.year)
     @                   || (this.year == birth.year && this.month > birth.month)
     @                   || (this.year == birth.year && this.month == birth.month && this.day > birth.day)); @*/
/*@ pure @*/
//@ assert true;

//@ assert this._year == birth._year;

//@ assert this._year == birth._year && this._month == birth._month;

/*@ model instance int year ;
       model instance int month ;
       model instance int day ; @*/
//@ ensures \result == this.month;

/*@ pure @*/
//@ ensures \result == this.day;

/*@ pure @*/
//@ ensures \result == this.year;

/*@ pure @*/
/*@ ensures \result <==> (this.year == birth.year) && this.month == birth.month && this.day == birth.day; @*/
/*@ pure @*/
/*@ model instance int year ;
       model instance int month ;
       model instance int day ; @*/
//@ ensures \result == this.month;

/*@ pure @*/
//@ ensures \result == this.day;

/*@ pure @*/
//@ ensures \result == this.year;

/*@ pure @*/
/*@ ensures \result <==> (this.year == birth.year) && this.month == birth.month && this.day == birth.day; @*/
/*@ pure @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
//@ public invariant 0 <= seconds && seconds < 60;

//@ public invariant 0 <= minutes && minutes < 60;

//@ public invariant 0 <= hours && hours < 24;

//@ requires 0 <= hours && hours < 24;

//@ requires 0 <= minutes && minutes < 60;

//@ requires 0 <= seconds && seconds < 60;

//@ ensures this.hours == hours;

//@ ensures this.minutes == minutes;

//@ ensures this.seconds == seconds;

//@ pure

//@ ensures \result == this.hours;

/*@ pure @*/
//@ ensures \result == this.minutes;

/*@ pure @*/
//@ ensures \result == this.seconds;

/*@ pure @*/
//@ ensures \result == (a.hours*3600) + (a.minutes*60) + a.seconds;

/*@ pure spec_public@*/
//@ old int diff = secondCalulation(this) - secondCalulation(stop);

//@ old int _final = (diff < 0) ? (-diff) : (diff);

//@ ensures \result == _final;

/*@ pure @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
//@ public invariant 0 <= seconds && seconds < 60;

//@ public invariant 0 <= minutes && minutes < 60;

//@ public invariant 0 <= hours && hours < 24;

//@ requires 0 <= hours && hours < 24;

//@ requires 0 <= minutes && minutes < 60;

//@ requires 0 <= seconds && seconds < 60;

//@ ensures this.hours == hours;

//@ ensures this.minutes == minutes;

//@ ensures this.seconds == seconds;

//@ pure

//@ ensures \result == this.hours;

/*@ pure @*/
//@ ensures \result == this.minutes;

/*@ pure @*/
//@ ensures \result == this.seconds;

/*@ pure @*/
//@ ensures \result == (a.hours*3600) + (a.minutes*60) + a.seconds;

/*@ pure spec_public@*/
//@ old int diff = secondCalulation(this) - secondCalulation(stop);

//@ old int _final = (diff < 0) ? (-diff) : (diff);

//@ ensures \result == _final;

/*@ pure @*/
/*@
//	  behavior
//	    requires size > 0;
//	    ensures size() == size && memoryConsumed() == 0;
//	@*/
/*@
//	  behavior
//	    requires size > 0;
//	    ensures size() == size && memoryConsumed() == 0;
//	@*/
/*@
//	  behavior
//	    requires size > 0;
//	    ensures size() == size && memoryConsumed() == 0;
//	@*/
/*@
//	  behavior
//	    requires size > 0;
//	    ensures size() == size && memoryConsumed() == 0;
//	@*/
/*@
//	  behavior
//	    requires size > 0;
//	    ensures size() == size && memoryConsumed() == 0;
//	@*/
/*@
//	  behavior
//	    requires size > 0;
//	    ensures size() == size && memoryConsumed() == 0;
//	@*/
/*@
	  also public behaviour
	    requires true;
	    assignable     othing;
	    ensures \result.equals(new RelativeTime(0, 0, this));
	  @*/
/*@
	  also public behaviour
	    requires true;
	    assignable     othing;
	    ensures \result.equals(new RelativeTime(0, 0, this));
	  @*/
/*@
	  also public behaviour
	    requires true;
	    assignable     othing;
	    ensures \result.equals(new RelativeTime(0, 0, this));
	  @*/
/*@
	  also public behaviour
	    requires true;
	    assignable     othing;
	    ensures \result.equals(new RelativeTime(0, 0, this));
	  @*/
/*@
	  also public behaviour
	    requires true;
	    assignable     othing;
	    ensures \result.equals(new RelativeTime(0, 0, this));
	  @*/
/*@
	  also public behaviour
	    requires true;
	    assignable     othing;
	    ensures \result.equals(new RelativeTime(0, 0, this));
	  @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@
	  public normal_behavior
	    requires priority != null && release  != null;
	    ensures true;
	  also
	  public exceptional_behavior
	    requires priority == null;
	    signals (IllegalArgumentException) true;
	  also
	  public exceptional_behavior
	    requires release == null;
	    signals (IllegalArgumentException) true;
	@*/
/*@
	  public behavior
	//      requires MissionSequencer.getPhase() == Phase.EXECUTE;
	    requires Mission.getMission().isRegistered(this);

	//      ensures MissionSequencer.getPhase() == Phase.EXECUTE;
	    ensures Mission.getMission().isRegistered(this);
	//      ensures PriorityScheduler.activated(this);
	  @*/
/*@
	  public normal_behavior
	    requires priority != null && release  != null;
	    ensures true;
	  also
	  public exceptional_behavior
	    requires priority == null;
	    signals (IllegalArgumentException) true;
	  also
	  public exceptional_behavior
	    requires release == null;
	    signals (IllegalArgumentException) true;
	@*/
/*@
	  public behavior
	//      requires MissionSequencer.getPhase() == Phase.EXECUTE;
	    requires Mission.getMission().isRegistered(this);

	//      ensures MissionSequencer.getPhase() == Phase.EXECUTE;
	    ensures Mission.getMission().isRegistered(this);
	//      ensures PriorityScheduler.activated(this);
	  @*/
/*@
	  public normal_behavior
	    requires priority != null && release  != null;
	    ensures true;
	  also
	  public exceptional_behavior
	    requires priority == null;
	    signals (IllegalArgumentException) true;
	  also
	  public exceptional_behavior
	    requires release == null;
	    signals (IllegalArgumentException) true;
	@*/
/*@
	  public behavior
	//      requires MissionSequencer.getPhase() == Phase.EXECUTE;
	    requires Mission.getMission().isRegistered(this);

	//      ensures MissionSequencer.getPhase() == Phase.EXECUTE;
	    ensures Mission.getMission().isRegistered(this);
	//      ensures PriorityScheduler.activated(this);
	  @*/
/*@
	  public normal_behavior
	    requires priority != null && release  != null;
	    ensures true;
	  also
	  public exceptional_behavior
	    requires priority == null;
	    signals (IllegalArgumentException) true;
	  also
	  public exceptional_behavior
	    requires release == null;
	    signals (IllegalArgumentException) true;
	@*/
/*@
	  public behavior
	//      requires MissionSequencer.getPhase() == Phase.EXECUTE;
	    requires Mission.getMission().isRegistered(this);

	//      ensures MissionSequencer.getPhase() == Phase.EXECUTE;
	    ensures Mission.getMission().isRegistered(this);
	//      ensures PriorityScheduler.activated(this);
	  @*/
/*@
	  public normal_behavior
	    requires priority != null && release  != null;
	    ensures true;
	  also
	  public exceptional_behavior
	    requires priority == null;
	    signals (IllegalArgumentException) true;
	  also
	  public exceptional_behavior
	    requires release == null;
	    signals (IllegalArgumentException) true;
	@*/
/*@
	  public behavior
	//      requires MissionSequencer.getPhase() == Phase.EXECUTE;
	    requires Mission.getMission().isRegistered(this);

	//      ensures MissionSequencer.getPhase() == Phase.EXECUTE;
	    ensures Mission.getMission().isRegistered(this);
	//      ensures PriorityScheduler.activated(this);
	  @*/
/*@
	  public normal_behavior
	    requires priority != null && release  != null;
	    ensures true;
	  also
	  public exceptional_behavior
	    requires priority == null;
	    signals (IllegalArgumentException) true;
	  also
	  public exceptional_behavior
	    requires release == null;
	    signals (IllegalArgumentException) true;
	@*/
/*@
	  public behavior
	//      requires MissionSequencer.getPhase() == Phase.EXECUTE;
	    requires Mission.getMission().isRegistered(this);

	//      ensures MissionSequencer.getPhase() == Phase.EXECUTE;
	    ensures Mission.getMission().isRegistered(this);
	//      ensures PriorityScheduler.activated(this);
	  @*/
/*@
	  public normal_behavior
	    requires priority != null;
	    requires release != null;

//	    ensures this.getPriorityParam().getPriority() == priority.getPriority();
//	    ensures this.getReleaseParam().getDeadline() == release.getDeadline();
//	    ensures this.getReleaseParam().getMissHandler() == release.getMissHandler();

	  also
	  public exceptional_behavior
	    requires priority == null;
	    signals (IllegalArgumentException) true;
	  also
	  public exceptional_behavior
	    requires release == null;
	    signals (IllegalArgumentException) true;
	  @*/
/*@
	  also public behavior
	    requires true;

//	    ensures javax.realtime.Clock.getRealtimeClock().getTime().compareTo(
//	              getLastReleaseTime().add(release.getDeadline())) <= 0;
	  @*/
//@ also

//@   requires true;

//@   ensures ??;	// something to add?

//@ also

//@   requires true;

//@   ensures ??;	// something to add?

/*@ spec_public @*/
/*@ spec_public @*/
/*@
	  public normal_behavior
	    requires priority != null;
	    requires release != null;

//	    ensures this.getPriorityParam().getPriority() == priority.getPriority();
//	    ensures this.getReleaseParam().getDeadline() == release.getDeadline();
//	    ensures this.getReleaseParam().getMissHandler() == release.getMissHandler();

	  also
	  public exceptional_behavior
	    requires priority == null;
	    signals (IllegalArgumentException) true;
	  also
	  public exceptional_behavior
	    requires release == null;
	    signals (IllegalArgumentException) true;
	  @*/
/*@
	  also public behavior
	    requires true;

//	    ensures javax.realtime.Clock.getRealtimeClock().getTime().compareTo(
//	              getLastReleaseTime().add(release.getDeadline())) <= 0;
	  @*/
//@ also

//@   requires true;

//@   ensures ??;	// something to add?

//@ also

//@   requires true;

//@   ensures ??;	// something to add?

/*@ spec_public @*/
/*@ spec_public @*/
/*@
	  public normal_behavior
	    requires priority != null;
	    requires release != null;

//	    ensures this.getPriorityParam().getPriority() == priority.getPriority();
//	    ensures this.getReleaseParam().getDeadline() == release.getDeadline();
//	    ensures this.getReleaseParam().getMissHandler() == release.getMissHandler();

	  also
	  public exceptional_behavior
	    requires priority == null;
	    signals (IllegalArgumentException) true;
	  also
	  public exceptional_behavior
	    requires release == null;
	    signals (IllegalArgumentException) true;
	  @*/
/*@
	  also public behavior
	    requires true;

//	    ensures javax.realtime.Clock.getRealtimeClock().getTime().compareTo(
//	              getLastReleaseTime().add(release.getDeadline())) <= 0;
	  @*/
//@ also

//@   requires true;

//@   ensures ??;	// something to add?

//@ also

//@   requires true;

//@   ensures ??;	// something to add?

/*@ spec_public @*/
/*@ spec_public @*/
/*@
	  public normal_behavior
	    requires priority != null;
	    requires release != null;

//	    ensures this.getPriorityParam().getPriority() == priority.getPriority();
//	    ensures this.getReleaseParam().getDeadline() == release.getDeadline();
//	    ensures this.getReleaseParam().getMissHandler() == release.getMissHandler();

	  also
	  public exceptional_behavior
	    requires priority == null;
	    signals (IllegalArgumentException) true;
	  also
	  public exceptional_behavior
	    requires release == null;
	    signals (IllegalArgumentException) true;
	  @*/
/*@
	  also public behavior
	    requires true;

//	    ensures javax.realtime.Clock.getRealtimeClock().getTime().compareTo(
//	              getLastReleaseTime().add(release.getDeadline())) <= 0;
	  @*/
//@ also

//@   requires true;

//@   ensures ??;	// something to add?

//@ also

//@   requires true;

//@   ensures ??;	// something to add?

/*@ spec_public @*/
/*@ spec_public @*/
/*@
	  public normal_behavior
	    requires priority != null;
	    requires release != null;

//	    ensures this.getPriorityParam().getPriority() == priority.getPriority();
//	    ensures this.getReleaseParam().getDeadline() == release.getDeadline();
//	    ensures this.getReleaseParam().getMissHandler() == release.getMissHandler();

	  also
	  public exceptional_behavior
	    requires priority == null;
	    signals (IllegalArgumentException) true;
	  also
	  public exceptional_behavior
	    requires release == null;
	    signals (IllegalArgumentException) true;
	  @*/
/*@
	  also public behavior
	    requires true;

//	    ensures javax.realtime.Clock.getRealtimeClock().getTime().compareTo(
//	              getLastReleaseTime().add(release.getDeadline())) <= 0;
	  @*/
//@ also

//@   requires true;

//@   ensures ??;	// something to add?

//@ also

//@   requires true;

//@   ensures ??;	// something to add?

/*@ spec_public @*/
/*@ spec_public @*/
/*@
	  public normal_behavior
	    requires priority != null;
	    requires release != null;

//	    ensures this.getPriorityParam().getPriority() == priority.getPriority();
//	    ensures this.getReleaseParam().getDeadline() == release.getDeadline();
//	    ensures this.getReleaseParam().getMissHandler() == release.getMissHandler();

	  also
	  public exceptional_behavior
	    requires priority == null;
	    signals (IllegalArgumentException) true;
	  also
	  public exceptional_behavior
	    requires release == null;
	    signals (IllegalArgumentException) true;
	  @*/
/*@
	  also public behavior
	    requires true;

//	    ensures javax.realtime.Clock.getRealtimeClock().getTime().compareTo(
//	              getLastReleaseTime().add(release.getDeadline())) <= 0;
	  @*/
//@ also

//@   requires true;

//@   ensures ??;	// something to add?

//@ also

//@   requires true;

//@   ensures ??;	// something to add?

/*@ spec_public @*/
/*@ spec_public @*/
/*@
//	  public static normal_behavior
//	    requires logic != null;
//	    ensures true;  // not finished
//	  also
//	  public static exceptional_behaviour
//	    requires logic == null;
//	    signals (IllegalStateException) true;
//
//	  @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@
//	  public static normal_behavior
//	    requires logic != null;
//	    ensures true;  // not finished
//	  also
//	  public static exceptional_behaviour
//	    requires logic == null;
//	    signals (IllegalStateException) true;
//
//	  @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@
//	  public static normal_behavior
//	    requires logic != null;
//	    ensures true;  // not finished
//	  also
//	  public static exceptional_behaviour
//	    requires logic == null;
//	    signals (IllegalStateException) true;
//
//	  @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@
//	  public static normal_behavior
//	    requires logic != null;
//	    ensures true;  // not finished
//	  also
//	  public static exceptional_behaviour
//	    requires logic == null;
//	    signals (IllegalStateException) true;
//
//	  @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@
//	  public static normal_behavior
//	    requires logic != null;
//	    ensures true;  // not finished
//	  also
//	  public static exceptional_behaviour
//	    requires logic == null;
//	    signals (IllegalStateException) true;
//
//	  @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@
//	  public static normal_behavior
//	    requires logic != null;
//	    ensures true;  // not finished
//	  also
//	  public static exceptional_behaviour
//	    requires logic == null;
//	    signals (IllegalStateException) true;
//
//	  @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@
	public behavior
	  requires Mission.getMission().getPhase() == Phase.INITIALIZE;
	    requires Mission.getMission().inMissionScope(this);
	  requires !Mission.getMission().isRegistered(this);

	    ensures Mission.getMission().isRegistered(this);
	  @*/
/*@
	public behavior
	  requires Mission.getMission().getPhase() == Phase.CLEANUP;
	  requires Mission.getMission().isRegistered(this);

	  ensures !Mission.getMission().isRegistered(this);
	 @*/
/*@
	public behavior
	  requires Mission.getMission().getPhase() == Phase.INITIALIZE;
	    requires Mission.getMission().inMissionScope(this);
	  requires !Mission.getMission().isRegistered(this);

	    ensures Mission.getMission().isRegistered(this);
	  @*/
/*@
	public behavior
	  requires Mission.getMission().getPhase() == Phase.CLEANUP;
	  requires Mission.getMission().isRegistered(this);

	  ensures !Mission.getMission().isRegistered(this);
	 @*/
/*@
	public behavior
	  requires Mission.getMission().getPhase() == Phase.INITIALIZE;
	    requires Mission.getMission().inMissionScope(this);
	  requires !Mission.getMission().isRegistered(this);

	    ensures Mission.getMission().isRegistered(this);
	  @*/
/*@
	public behavior
	  requires Mission.getMission().getPhase() == Phase.CLEANUP;
	  requires Mission.getMission().isRegistered(this);

	  ensures !Mission.getMission().isRegistered(this);
	 @*/
/*@
	public behavior
	  requires Mission.getMission().getPhase() == Phase.INITIALIZE;
	    requires Mission.getMission().inMissionScope(this);
	  requires !Mission.getMission().isRegistered(this);

	    ensures Mission.getMission().isRegistered(this);
	  @*/
/*@
	public behavior
	  requires Mission.getMission().getPhase() == Phase.CLEANUP;
	  requires Mission.getMission().isRegistered(this);

	  ensures !Mission.getMission().isRegistered(this);
	 @*/
/*@
	public behavior
	  requires Mission.getMission().getPhase() == Phase.INITIALIZE;
	    requires Mission.getMission().inMissionScope(this);
	  requires !Mission.getMission().isRegistered(this);

	    ensures Mission.getMission().isRegistered(this);
	  @*/
/*@
	public behavior
	  requires Mission.getMission().getPhase() == Phase.CLEANUP;
	  requires Mission.getMission().isRegistered(this);

	  ensures !Mission.getMission().isRegistered(this);
	 @*/
/*@
	public behavior
	  requires Mission.getMission().getPhase() == Phase.INITIALIZE;
	    requires Mission.getMission().inMissionScope(this);
	  requires !Mission.getMission().isRegistered(this);

	    ensures Mission.getMission().isRegistered(this);
	  @*/
/*@
	public behavior
	  requires Mission.getMission().getPhase() == Phase.CLEANUP;
	  requires Mission.getMission().isRegistered(this);

	  ensures !Mission.getMission().isRegistered(this);
	 @*/
/*@
	  behavior
	    requires ms != null;
	    ensures this.contains(ms);
	  @*/
/*@
	  behavior
	    requires ms != null;
	    ensures this.contains(ms);
	  @*/
/*@
	  behavior
	    requires ms != null;
	    ensures this.contains(ms);
	  @*/
/*@
	  behavior
	    requires ms != null;
	    ensures this.contains(ms);
	  @*/
/*@
	  behavior
	    requires ms != null;
	    ensures this.contains(ms);
	  @*/
/*@
	  behavior
	    requires ms != null;
	    ensures this.contains(ms);
	  @*/
/*@
	//    also
	//    public exceptional_behaviour
	//      requires ??; // not invoked in appropriate phase
	//      signals (IllegalStateException) true;
	//      @*/
//@ also

//@   requires true;

//@   ensures ??;	// something to add?

/*@
	  protected behavior
	    requires true;
	    ensures true;
	  @*/
//@ also

//@   requires true;

//@   ensures ??; // something to add?

/*@ spec_public @*/
/*@
	//    also
	//    public exceptional_behaviour
	//      requires ??; // not invoked in appropriate phase
	//      signals (IllegalStateException) true;
	//      @*/
//@ also

//@   requires true;

//@   ensures ??;	// something to add?

/*@
	  protected behavior
	    requires true;
	    ensures true;
	  @*/
//@ also

//@   requires true;

//@   ensures ??; // something to add?

/*@ spec_public @*/
/*@
	//    also
	//    public exceptional_behaviour
	//      requires ??; // not invoked in appropriate phase
	//      signals (IllegalStateException) true;
	//      @*/
//@ also

//@   requires true;

//@   ensures ??;	// something to add?

/*@
	  protected behavior
	    requires true;
	    ensures true;
	  @*/
//@ also

//@   requires true;

//@   ensures ??; // something to add?

/*@ spec_public @*/
/*@
	//    also
	//    public exceptional_behaviour
	//      requires ??; // not invoked in appropriate phase
	//      signals (IllegalStateException) true;
	//      @*/
//@ also

//@   requires true;

//@   ensures ??;	// something to add?

/*@
	  protected behavior
	    requires true;
	    ensures true;
	  @*/
//@ also

//@   requires true;

//@   ensures ??; // something to add?

/*@ spec_public @*/
/*@
	//    also
	//    public exceptional_behaviour
	//      requires ??; // not invoked in appropriate phase
	//      signals (IllegalStateException) true;
	//      @*/
//@ also

//@   requires true;

//@   ensures ??;	// something to add?

/*@
	  protected behavior
	    requires true;
	    ensures true;
	  @*/
//@ also

//@   requires true;

//@   ensures ??; // something to add?

/*@ spec_public @*/
/*@
	//    also
	//    public exceptional_behaviour
	//      requires ??; // not invoked in appropriate phase
	//      signals (IllegalStateException) true;
	//      @*/
//@ also

//@   requires true;

//@   ensures ??;	// something to add?

/*@
	  protected behavior
	    requires true;
	    ensures true;
	  @*/
//@ also

//@   requires true;

//@   ensures ??; // something to add?

/*@ spec_public @*/
/*@
	public normal_behavior
	  requires priority != null && release  != null;
	  ensures true;
	also
	public exceptional_behavior
	  requires priority == null;
	  signals (IllegalArgumentException) true;
	also
	public exceptional_behavior
	  requires release == null;
	  signals (IllegalArgumentException) true;
	@*/
/*@
	public normal_behavior
	  requires priority != null && release  != null;
	  ensures true;
	also
	public exceptional_behavior
	  requires priority == null;
	  signals (IllegalArgumentException) true;
	also
	public exceptional_behavior
	  requires release == null;
	  signals (IllegalArgumentException) true;
	@*/
/*@
	public normal_behavior
	  requires priority != null && release  != null;
	  ensures true;
	also
	public exceptional_behavior
	  requires priority == null;
	  signals (IllegalArgumentException) true;
	also
	public exceptional_behavior
	  requires release == null;
	  signals (IllegalArgumentException) true;
	@*/
/*@
	public normal_behavior
	  requires priority != null && release  != null;
	  ensures true;
	also
	public exceptional_behavior
	  requires priority == null;
	  signals (IllegalArgumentException) true;
	also
	public exceptional_behavior
	  requires release == null;
	  signals (IllegalArgumentException) true;
	@*/
/*@
	public normal_behavior
	  requires priority != null && release  != null;
	  ensures true;
	also
	public exceptional_behavior
	  requires priority == null;
	  signals (IllegalArgumentException) true;
	also
	public exceptional_behavior
	  requires release == null;
	  signals (IllegalArgumentException) true;
	@*/
/*@
	public normal_behavior
	  requires priority != null && release  != null;
	  ensures true;
	also
	public exceptional_behavior
	  requires priority == null;
	  signals (IllegalArgumentException) true;
	also
	public exceptional_behavior
	  requires release == null;
	  signals (IllegalArgumentException) true;
	@*/
/*@
	  public normal_behavior
	    requires priority != null && release  != null;
	    ensures true;
	  also
	  public exceptional_behavior
	    requires priority == null;
	    signals (IllegalArgumentException) true;
	  also
	  public exceptional_behavior
	    requires release == null;
	    signals (IllegalArgumentException) true;
	@*/
/*@
	  public normal_behavior
	    requires priority != null && release  != null;
	    ensures true;
	  also
	  public exceptional_behavior
	    requires priority == null;
	    signals (IllegalArgumentException) true;
	  also
	  public exceptional_behavior
	    requires release == null;
	    signals (IllegalArgumentException) true;
	@*/
/*@
	  public normal_behavior
	    requires priority != null && release  != null;
	    ensures true;
	  also
	  public exceptional_behavior
	    requires priority == null;
	    signals (IllegalArgumentException) true;
	  also
	  public exceptional_behavior
	    requires release == null;
	    signals (IllegalArgumentException) true;
	@*/
/*@
	  public normal_behavior
	    requires priority != null && release  != null;
	    ensures true;
	  also
	  public exceptional_behavior
	    requires priority == null;
	    signals (IllegalArgumentException) true;
	  also
	  public exceptional_behavior
	    requires release == null;
	    signals (IllegalArgumentException) true;
	@*/
/*@
	  public normal_behavior
	    requires priority != null && release  != null;
	    ensures true;
	  also
	  public exceptional_behavior
	    requires priority == null;
	    signals (IllegalArgumentException) true;
	  also
	  public exceptional_behavior
	    requires release == null;
	    signals (IllegalArgumentException) true;
	@*/
/*@
	  public normal_behavior
	    requires priority != null && release  != null;
	    ensures true;
	  also
	  public exceptional_behavior
	    requires priority == null;
	    signals (IllegalArgumentException) true;
	  also
	  public exceptional_behavior
	    requires release == null;
	    signals (IllegalArgumentException) true;
	@*/
/*@
	  public behaviour
	    requires true;
	    assignable     othing;
	    ensures \result != null ;
	  @*/
/*@
	  public behaviour
	    requires true;
	    assignable     othing;
	    ensures \result != null ;
	  @*/
/*@
	  public behaviour
	    requires true;
	    assignable     othing;
	    ensures \result != null ;
	  @*/
/*@
	  public behaviour
	    requires true;
	    assignable     othing;
	    ensures \result != null ;
	  @*/
/*@
	  public behaviour
	    requires true;
	    assignable     othing;
	    ensures \result != null ;
	  @*/
/*@
	  public behaviour
	    requires true;
	    assignable     othing;
	    ensures \result != null ;
	  @*/
/*@javax.safetycritical.annotate.Scope("cdx.CollisionDetectorHandler")*/
/*@javax.safetycritical.annotate.Scope("cdx.CollisionDetectorHandler")*/
/*@javax.safetycritical.annotate.Scope("cdx.CollisionDetectorHandler")*/
/*@javax.safetycritical.annotate.Scope("cdx.CollisionDetectorHandler")*/
/*@javax.safetycritical.annotate.Scope("cdx.CollisionDetectorHandler")*/
/*@javax.safetycritical.annotate.Scope("cdx.CollisionDetectorHandler")*/
/*@javax.safetycritical.annotate.Scope("cdx.Level0Safelet")*/
/*@javax.safetycritical.annotate.Scope("cdx.Level0Safelet")*/
/*@javax.safetycritical.annotate.Scope("cdx.Level0Safelet")*/
/*@javax.safetycritical.annotate.Scope("cdx.Level0Safelet")*/
/*@javax.safetycritical.annotate.Scope("cdx.Level0Safelet")*/
/*@javax.safetycritical.annotate.Scope("cdx.Level0Safelet")*/
/*@javax.safetycritical.annotate.Scope("cdx.CollisionDetectorHandler")*/
/*@javax.safetycritical.annotate.Scope("cdx.CollisionDetectorHandler")*/
/*@javax.safetycritical.annotate.Scope("cdx.CollisionDetectorHandler")*/
/*@javax.safetycritical.annotate.Scope("cdx.CollisionDetectorHandler")*/
/*@javax.safetycritical.annotate.Scope("cdx.CollisionDetectorHandler")*/
/*@javax.safetycritical.annotate.Scope("cdx.CollisionDetectorHandler")*/
/*@javax.safetycritical.annotate.Scope("cdx.Level0Safelet")*/
/*@javax.safetycritical.annotate.RunsIn("cdx.CollisionDetectorHandler")*/
//@Override

//@Override

//@Override

/*@javax.safetycritical.annotate.Scope("cdx.Level0Safelet")*/
/*@javax.safetycritical.annotate.RunsIn("cdx.CollisionDetectorHandler")*/
//@Override

//@Override

//@Override

/*@javax.safetycritical.annotate.Scope("cdx.Level0Safelet")*/
/*@javax.safetycritical.annotate.RunsIn("cdx.CollisionDetectorHandler")*/
//@Override

//@Override

//@Override

/*@javax.safetycritical.annotate.Scope("cdx.Level0Safelet")*/
/*@javax.safetycritical.annotate.RunsIn("cdx.CollisionDetectorHandler")*/
//@Override

//@Override

//@Override

/*@javax.safetycritical.annotate.Scope("cdx.Level0Safelet")*/
/*@javax.safetycritical.annotate.RunsIn("cdx.CollisionDetectorHandler")*/
//@Override

//@Override

//@Override

/*@javax.safetycritical.annotate.Scope("cdx.Level0Safelet")*/
/*@javax.safetycritical.annotate.RunsIn("cdx.CollisionDetectorHandler")*/
//@Override

//@Override

//@Override

/*@javax.safetycritical.annotate.Scope("cdx.CollisionDetectorHandler")*/
/*@javax.safetycritical.annotate.Scope("cdx.CollisionDetectorHandler")*/
/*@javax.safetycritical.annotate.Scope("cdx.CollisionDetectorHandler")*/
/*@javax.safetycritical.annotate.Scope("cdx.CollisionDetectorHandler")*/
/*@javax.safetycritical.annotate.Scope("cdx.CollisionDetectorHandler")*/
/*@javax.safetycritical.annotate.Scope("cdx.CollisionDetectorHandler")*/
/*@javax.safetycritical.annotate.Scope("immortal")*/
/*@javax.safetycritical.annotate.Scope("immortal")*/
/*@javax.safetycritical.annotate.Scope("immortal")*/
/*@javax.safetycritical.annotate.Scope("immortal")*/
/*@javax.safetycritical.annotate.Scope("immortal")*/
/*@javax.safetycritical.annotate.Scope("immortal")*/
/*@javax.safetycritical.annotate.Scope("immortal")*/
/*@javax.safetycritical.annotate.RunsIn("cdx.Level0Safelet")*/
/*@javax.safetycritical.annotate.Scope("immortal")*/
/*@javax.safetycritical.annotate.RunsIn("cdx.Level0Safelet")*/
/*@javax.safetycritical.annotate.Scope("immortal")*/
/*@javax.safetycritical.annotate.RunsIn("cdx.Level0Safelet")*/
/*@javax.safetycritical.annotate.Scope("immortal")*/
/*@javax.safetycritical.annotate.RunsIn("cdx.Level0Safelet")*/
/*@javax.safetycritical.annotate.Scope("immortal")*/
/*@javax.safetycritical.annotate.RunsIn("cdx.Level0Safelet")*/
/*@javax.safetycritical.annotate.Scope("immortal")*/
/*@javax.safetycritical.annotate.RunsIn("cdx.Level0Safelet")*/
/*@javax.safetycritical.annotate.Scope("cdx.CollisionDetectorHandler")*/
/*@javax.safetycritical.annotate.Scope("cdx.CollisionDetectorHandler")*/
/*@javax.safetycritical.annotate.Scope("cdx.CollisionDetectorHandler")*/
/*@javax.safetycritical.annotate.Scope("cdx.CollisionDetectorHandler")*/
/*@javax.safetycritical.annotate.Scope("cdx.CollisionDetectorHandler")*/
/*@javax.safetycritical.annotate.Scope("cdx.CollisionDetectorHandler")*/
/*@javax.safetycritical.annotate.Scope("cdx.Level0Safelet")*/
/*@javax.safetycritical.annotate.RunsIn("cdx.CollisionDetectorHandler")*/
/*@javax.safetycritical.annotate.Scope("cdx.Level0Safelet")*/
/*@javax.safetycritical.annotate.RunsIn("cdx.CollisionDetectorHandler")*/
/*@javax.safetycritical.annotate.Scope("cdx.Level0Safelet")*/
/*@javax.safetycritical.annotate.RunsIn("cdx.CollisionDetectorHandler")*/
/*@javax.safetycritical.annotate.Scope("cdx.Level0Safelet")*/
/*@javax.safetycritical.annotate.RunsIn("cdx.CollisionDetectorHandler")*/
/*@javax.safetycritical.annotate.Scope("cdx.Level0Safelet")*/
/*@javax.safetycritical.annotate.RunsIn("cdx.CollisionDetectorHandler")*/
/*@javax.safetycritical.annotate.Scope("cdx.Level0Safelet")*/
/*@javax.safetycritical.annotate.RunsIn("cdx.CollisionDetectorHandler")*/
/*@javax.safetycritical.annotate.Scope("immortal")*/
/*@javax.safetycritical.annotate.AllocFree*/
/*@javax.safetycritical.annotate.Scope("immortal")*/
/*@javax.safetycritical.annotate.AllocFree*/
/*@javax.safetycritical.annotate.Scope("immortal")*/
/*@javax.safetycritical.annotate.AllocFree*/
/*@javax.safetycritical.annotate.Scope("immortal")*/
/*@javax.safetycritical.annotate.AllocFree*/
/*@javax.safetycritical.annotate.Scope("immortal")*/
/*@javax.safetycritical.annotate.AllocFree*/
/*@javax.safetycritical.annotate.Scope("immortal")*/
/*@javax.safetycritical.annotate.AllocFree*/
/*@javax.safetycritical.annotate.Scope("cdx.CollisionDetectorHandler")*/
/*@javax.safetycritical.annotate.Scope("cdx.CollisionDetectorHandler")*/
/*@javax.safetycritical.annotate.Scope("cdx.CollisionDetectorHandler")*/
/*@javax.safetycritical.annotate.Scope("cdx.CollisionDetectorHandler")*/
/*@javax.safetycritical.annotate.Scope("cdx.CollisionDetectorHandler")*/
/*@javax.safetycritical.annotate.Scope("cdx.CollisionDetectorHandler")*/
/*@javax.safetycritical.annotate.Scope("cdx.Level0Safelet")*/
/*@javax.safetycritical.annotate.RunsIn("cdx.CollisionDetectorHandler")*/
/*@javax.safetycritical.annotate.RunsIn("cdx.Level0Safelet")*/
/*@javax.safetycritical.annotate.Scope("cdx.Level0Safelet")*/
/*@javax.safetycritical.annotate.RunsIn("cdx.CollisionDetectorHandler")*/
/*@javax.safetycritical.annotate.RunsIn("cdx.Level0Safelet")*/
/*@javax.safetycritical.annotate.Scope("cdx.Level0Safelet")*/
/*@javax.safetycritical.annotate.RunsIn("cdx.CollisionDetectorHandler")*/
/*@javax.safetycritical.annotate.RunsIn("cdx.Level0Safelet")*/
/*@javax.safetycritical.annotate.Scope("cdx.Level0Safelet")*/
/*@javax.safetycritical.annotate.RunsIn("cdx.CollisionDetectorHandler")*/
/*@javax.safetycritical.annotate.RunsIn("cdx.Level0Safelet")*/
/*@javax.safetycritical.annotate.Scope("cdx.Level0Safelet")*/
/*@javax.safetycritical.annotate.RunsIn("cdx.CollisionDetectorHandler")*/
/*@javax.safetycritical.annotate.RunsIn("cdx.Level0Safelet")*/
/*@javax.safetycritical.annotate.Scope("cdx.Level0Safelet")*/
/*@javax.safetycritical.annotate.RunsIn("cdx.CollisionDetectorHandler")*/
/*@javax.safetycritical.annotate.RunsIn("cdx.Level0Safelet")*/
/*@javax.safetycritical.annotate.Scope("cdx.CollisionDetectorHandler")*/
/*@javax.safetycritical.annotate.Scope("cdx.CollisionDetectorHandler")*/
/*@javax.safetycritical.annotate.Scope("cdx.CollisionDetectorHandler")*/
/*@javax.safetycritical.annotate.Scope("cdx.CollisionDetectorHandler")*/
/*@javax.safetycritical.annotate.Scope("cdx.CollisionDetectorHandler")*/
/*@javax.safetycritical.annotate.Scope("cdx.CollisionDetectorHandler")*/
/*@javax.safetycritical.annotate.Scope("cdx.CollisionDetectorHandler")*/
/*@javax.safetycritical.annotate.Scope("cdx.CollisionDetectorHandler")*/
/*@javax.safetycritical.annotate.Scope("cdx.CollisionDetectorHandler")*/
/*@javax.safetycritical.annotate.Scope("cdx.CollisionDetectorHandler")*/
/*@javax.safetycritical.annotate.Scope("cdx.CollisionDetectorHandler")*/
/*@javax.safetycritical.annotate.Scope("cdx.CollisionDetectorHandler")*/
/*@javax.safetycritical.annotate.Scope("immortal")*/
/*@javax.safetycritical.annotate.Scope("immortal")*/
/*@javax.safetycritical.annotate.Scope("immortal")*/
/*@javax.safetycritical.annotate.Scope("immortal")*/
/*@javax.safetycritical.annotate.Scope("immortal")*/
/*@javax.safetycritical.annotate.Scope("immortal")*/
/*@javax.safetycritical.annotate.Scope("immortal")*/
/*@javax.safetycritical.annotate.Scope("immortal")*/
/*@javax.safetycritical.annotate.Scope("immortal")*/
/*@javax.safetycritical.annotate.Scope("immortal")*/
/*@javax.safetycritical.annotate.Scope("immortal")*/
/*@javax.safetycritical.annotate.Scope("immortal")*/
/*@javax.safetycritical.annotate.Scope("immortal")*/
/*@javax.safetycritical.annotate.Scope("immortal")*/
/*@javax.safetycritical.annotate.Scope("cdx.Level0Safelet")*/
/*@javax.safetycritical.annotate.AllocFree*/
/*@javax.safetycritical.annotate.Scope("cdx.Level0Safelet")*/
/*@javax.safetycritical.annotate.AllocFree*/
/*@javax.safetycritical.annotate.Scope("cdx.Level0Safelet")*/
/*@javax.safetycritical.annotate.AllocFree*/
/*@javax.safetycritical.annotate.Scope("cdx.Level0Safelet")*/
/*@javax.safetycritical.annotate.AllocFree*/
/*@javax.safetycritical.annotate.Scope("cdx.Level0Safelet")*/
/*@javax.safetycritical.annotate.AllocFree*/
/*@javax.safetycritical.annotate.Scope("cdx.Level0Safelet")*/
/*@javax.safetycritical.annotate.AllocFree*/
/*@
//    behaviour
//      requires true;
//
//      ensures !failure;
//      ensures
//        (\forall int i; 0 < i && i < SIZE;
//           sample[i-1].compareTo(sample[i]) < 0);
//      ensures
//        (\forall int i; 0 < i && i < SIZE;
//            (sample[i]).subtract(sample[i-1]).
//               compareTo(resolution) >= 0 );
//    @*/
/*@
//    behaviour
//      requires true;
//
//      ensures !failure;
//      ensures
//        (\forall int i; 0 < i && i < SIZE;
//           sample[i-1].compareTo(sample[i]) < 0);
//      ensures
//        (\forall int i; 0 < i && i < SIZE;
//            (sample[i]).subtract(sample[i-1]).
//               compareTo(resolution) >= 0 );
//    @*/
/*@
//    behaviour
//      requires true;
//
//      ensures !failure;
//      ensures
//        (\forall int i; 0 < i && i < SIZE;
//           sample[i-1].compareTo(sample[i]) < 0);
//      ensures
//        (\forall int i; 0 < i && i < SIZE;
//            (sample[i]).subtract(sample[i-1]).
//               compareTo(resolution) >= 0 );
//    @*/
/*@
//    behaviour
//      requires true;
//
//      ensures !failure;
//      ensures
//        (\forall int i; 0 < i && i < SIZE;
//           sample[i-1].compareTo(sample[i]) < 0);
//      ensures
//        (\forall int i; 0 < i && i < SIZE;
//            (sample[i]).subtract(sample[i-1]).
//               compareTo(resolution) >= 0 );
//    @*/
/*@
//    behaviour
//      requires true;
//
//      ensures !failure;
//      ensures
//        (\forall int i; 0 < i && i < SIZE;
//           sample[i-1].compareTo(sample[i]) < 0);
//      ensures
//        (\forall int i; 0 < i && i < SIZE;
//            (sample[i]).subtract(sample[i-1]).
//               compareTo(resolution) >= 0 );
//    @*/
/*@
//    behaviour
//      requires true;
//
//      ensures !failure;
//      ensures
//        (\forall int i; 0 < i && i < SIZE;
//           sample[i-1].compareTo(sample[i]) < 0);
//      ensures
//        (\forall int i; 0 < i && i < SIZE;
//            (sample[i]).subtract(sample[i-1]).
//               compareTo(resolution) >= 0 );
//    @*/
/*@
//    behaviour
//      requires true;
//
//      ensures !failure;
//      ensures
//        (\forall int i; 0 < i && i < SIZE;
//           sample[i-1].compareTo(sample[i]) < 0);
//      ensures
//        (\forall int i; 0 < i && i < SIZE;
//            (sample[i]).subtract(sample[i-1]).
//               compareTo(resolution) >= 0 );
//    @*/
/*@
//    behaviour
//      requires true;
//
//      ensures !failure;
//      ensures
//        (\forall int i; 0 < i && i < SIZE;
//           sample[i-1].compareTo(sample[i]) < 0);
//      ensures
//        (\forall int i; 0 < i && i < SIZE;
//            (sample[i]).subtract(sample[i-1]).
//               compareTo(resolution) >= 0 );
//    @*/
/*@
//    behaviour
//      requires true;
//
//      ensures !failure;
//      ensures
//        (\forall int i; 0 < i && i < SIZE;
//           sample[i-1].compareTo(sample[i]) < 0);
//
//      ensures
//        (\forall int i; 0 < i && i < SIZE;
//           (sample[i]).subtract(sample[i-1]).
//             compareTo(resolution) >= 0 );
//    @*/
/*@
//    behaviour
//      requires true;
//
//      ensures !failure;
//      ensures
//        (\forall int i; 0 < i && i < SIZE;
//           sample[i-1].compareTo(sample[i]) < 0);
//
//      ensures
//        (\forall int i; 0 < i && i < SIZE;
//           (sample[i]).subtract(sample[i-1]).
//             compareTo(resolution) >= 0 );
//    @*/
/*@
//    behaviour
//      requires true;
//
//      ensures !failure;
//      ensures
//        (\forall int i; 0 < i && i < SIZE;
//           sample[i-1].compareTo(sample[i]) < 0);
//
//      ensures
//        (\forall int i; 0 < i && i < SIZE;
//           (sample[i]).subtract(sample[i-1]).
//             compareTo(resolution) >= 0 );
//    @*/
/*@
//    behaviour
//      requires true;
//
//      ensures !failure;
//      ensures
//        (\forall int i; 0 < i && i < SIZE;
//           sample[i-1].compareTo(sample[i]) < 0);
//
//      ensures
//        (\forall int i; 0 < i && i < SIZE;
//           (sample[i]).subtract(sample[i-1]).
//             compareTo(resolution) >= 0 );
//    @*/
/*@
//    behaviour
//      requires true;
//
//      ensures !failure;
//      ensures
//        (\forall int i; 0 < i && i < SIZE;
//           sample[i-1].compareTo(sample[i]) < 0);
//
//      ensures
//        (\forall int i; 0 < i && i < SIZE;
//           (sample[i]).subtract(sample[i-1]).
//             compareTo(resolution) >= 0 );
//    @*/
/*@
//    behaviour
//      requires true;
//
//      ensures !failure;
//      ensures
//        (\forall int i; 0 < i && i < SIZE;
//           sample[i-1].compareTo(sample[i]) < 0);
//
//      ensures
//        (\forall int i; 0 < i && i < SIZE;
//           (sample[i]).subtract(sample[i-1]).
//             compareTo(resolution) >= 0 );
//    @*/
/*@
//    behaviour
//      requires true;
//
//      ensures !failure;
//      ensures
//        (\forall int i; 0 < i && i < SIZE;
//           sample[i-1].compareTo(sample[i]) < 0);
//
//      ensures
//        (\forall int i; 0 < i && i < SIZE;
//           (sample[i]).subtract(sample[i-1]).
//             compareTo(resolution) >= 0 );
//    @*/
/*@
//    behaviour
//      requires true;
//
//      ensures !failure;
//      ensures
//        (\forall int i; 0 < i && i < SIZE;
//           sample[i-1].compareTo(sample[i]) < 0);
//
//      ensures
//        (\forall int i; 0 < i && i < SIZE;
//           (sample[i]).subtract(sample[i-1]).
//             compareTo(resolution) >= 0 );
//    @*/
/*@
      public behavior  // specification from Safelet
        requires true;

        ensures \result != null;
        ensures (MemoryArea.getMemoryArea(\result) instanceof ManagedMemory.ImmortalMemory);

      also  // indicates there are inherited specifications

        requires true;
        ensures MemoryArea.getMemoryArea(\result) instanceof ManagedMemory.ImmortalMemory;
      @*/
/*@
      public behaviour
        requires true;
        ensures MemoryArea.getMemoryArea(\result) instanceof MissionMemory;
      @*/
/*@
      public behaviour
        requires true;
        ensures MemoryArea.getMemoryArea(\result) instanceof PrivateMemory;
      @*/
/*@
      public behavior  // specification from Safelet
        requires true;

        ensures \result != null;
        ensures (MemoryArea.getMemoryArea(\result) instanceof ManagedMemory.ImmortalMemory);

      also  // indicates there are inherited specifications

        requires true;
        ensures MemoryArea.getMemoryArea(\result) instanceof ManagedMemory.ImmortalMemory;
      @*/
/*@
      public behaviour
        requires true;
        ensures MemoryArea.getMemoryArea(\result) instanceof MissionMemory;
      @*/
/*@
      public behaviour
        requires true;
        ensures MemoryArea.getMemoryArea(\result) instanceof PrivateMemory;
      @*/
/*@
      public behavior  // specification from Safelet
        requires true;

        ensures \result != null;
        ensures (MemoryArea.getMemoryArea(\result) instanceof ManagedMemory.ImmortalMemory);

      also  // indicates there are inherited specifications

        requires true;
        ensures MemoryArea.getMemoryArea(\result) instanceof ManagedMemory.ImmortalMemory;
      @*/
/*@
      public behaviour
        requires true;
        ensures MemoryArea.getMemoryArea(\result) instanceof MissionMemory;
      @*/
/*@
      public behaviour
        requires true;
        ensures MemoryArea.getMemoryArea(\result) instanceof PrivateMemory;
      @*/
/*@
      public behavior  // specification from Safelet
        requires true;

        ensures \result != null;
        ensures (MemoryArea.getMemoryArea(\result) instanceof ManagedMemory.ImmortalMemory);

      also  // indicates there are inherited specifications

        requires true;
        ensures MemoryArea.getMemoryArea(\result) instanceof ManagedMemory.ImmortalMemory;
      @*/
/*@
      public behaviour
        requires true;
        ensures MemoryArea.getMemoryArea(\result) instanceof MissionMemory;
      @*/
/*@
      public behaviour
        requires true;
        ensures MemoryArea.getMemoryArea(\result) instanceof PrivateMemory;
      @*/
/*@
      public behavior  // specification from Safelet
        requires true;

        ensures \result != null;
        ensures (MemoryArea.getMemoryArea(\result) instanceof ManagedMemory.ImmortalMemory);

      also  // indicates there are inherited specifications

        requires true;
        ensures MemoryArea.getMemoryArea(\result) instanceof ManagedMemory.ImmortalMemory;
      @*/
/*@
      public behaviour
        requires true;
        ensures MemoryArea.getMemoryArea(\result) instanceof MissionMemory;
      @*/
/*@
      public behaviour
        requires true;
        ensures MemoryArea.getMemoryArea(\result) instanceof PrivateMemory;
      @*/
/*@
      public behavior  // specification from Safelet
        requires true;

        ensures \result != null;
        ensures (MemoryArea.getMemoryArea(\result) instanceof ManagedMemory.ImmortalMemory);

      also  // indicates there are inherited specifications

        requires true;
        ensures MemoryArea.getMemoryArea(\result) instanceof ManagedMemory.ImmortalMemory;
      @*/
/*@
      public behaviour
        requires true;
        ensures MemoryArea.getMemoryArea(\result) instanceof MissionMemory;
      @*/
/*@
      public behaviour
        requires true;
        ensures MemoryArea.getMemoryArea(\result) instanceof PrivateMemory;
      @*/
/*@
      public behavior  // specification from Safelet
        requires true;

        ensures \result != null;
        ensures (MemoryArea.getMemoryArea(\result) instanceof ManagedMemory.ImmortalMemory);

      also  // indicates there are inherited specifications

        requires true;
        ensures MemoryArea.getMemoryArea(\result) instanceof ManagedMemory.ImmortalMemory;
      @*/
/*@
      public behaviour
        requires true;
        ensures MemoryArea.getMemoryArea(\result) instanceof MissionMemory;
      @*/
/*@
      public behaviour
        requires true;
        ensures MemoryArea.getMemoryArea(\result) instanceof PrivateMemory;
      @*/
/*@
      public behavior  // specification from Safelet
        requires true;

        ensures \result != null;
        ensures (MemoryArea.getMemoryArea(\result) instanceof ManagedMemory.ImmortalMemory);

      also  // indicates there are inherited specifications

        requires true;
        ensures MemoryArea.getMemoryArea(\result) instanceof ManagedMemory.ImmortalMemory;
      @*/
/*@
      public behaviour
        requires true;
        ensures MemoryArea.getMemoryArea(\result) instanceof MissionMemory;
      @*/
/*@
      public behaviour
        requires true;
        ensures MemoryArea.getMemoryArea(\result) instanceof PrivateMemory;
      @*/
/*@
      public behaviour
        requires true;

        // evh6.time < evh2.time < evh3.time < evh2.time < evh2.time < evh3.time
        ensures TestCyclicExecutive.timeRecord[0] < TestCyclicExecutive.timeRecord[1];

//          (\forall int i; 0 < i && i < SIZE-2; timeRecord[i] < timeRecord[i + 1]);
//        // frame 0
//        ensures (timeRecord[1] - timeRecord[0] <= 1* minorCycleInNanos);
//        // frame 1
//        ensures (timeRecord[3] - timeRecord[0] <= 2* minorCycleInNanos);
//        // frame 2
//        ensures (timeRecord[4] - timeRecord[0] <= 3* minorCycleInNanos);
//        // frame 4
//        ensures (timeRecord[5] - timeRecord[0] <= 5* minorCycleInNanos);
//        ensures (timeRecord[6] - timeRecord[0] <= 5* minorCycleInNanos);
    @*/
/*@
      public behaviour
        requires true;

        // evh6.time < evh2.time < evh3.time < evh2.time < evh2.time < evh3.time
        ensures TestCyclicExecutive.timeRecord[0] < TestCyclicExecutive.timeRecord[1];

//          (\forall int i; 0 < i && i < SIZE-2; timeRecord[i] < timeRecord[i + 1]);
//        // frame 0
//        ensures (timeRecord[1] - timeRecord[0] <= 1* minorCycleInNanos);
//        // frame 1
//        ensures (timeRecord[3] - timeRecord[0] <= 2* minorCycleInNanos);
//        // frame 2
//        ensures (timeRecord[4] - timeRecord[0] <= 3* minorCycleInNanos);
//        // frame 4
//        ensures (timeRecord[5] - timeRecord[0] <= 5* minorCycleInNanos);
//        ensures (timeRecord[6] - timeRecord[0] <= 5* minorCycleInNanos);
    @*/
/*@
      public behaviour
        requires true;

        // evh6.time < evh2.time < evh3.time < evh2.time < evh2.time < evh3.time
        ensures TestCyclicExecutive.timeRecord[0] < TestCyclicExecutive.timeRecord[1];

//          (\forall int i; 0 < i && i < SIZE-2; timeRecord[i] < timeRecord[i + 1]);
//        // frame 0
//        ensures (timeRecord[1] - timeRecord[0] <= 1* minorCycleInNanos);
//        // frame 1
//        ensures (timeRecord[3] - timeRecord[0] <= 2* minorCycleInNanos);
//        // frame 2
//        ensures (timeRecord[4] - timeRecord[0] <= 3* minorCycleInNanos);
//        // frame 4
//        ensures (timeRecord[5] - timeRecord[0] <= 5* minorCycleInNanos);
//        ensures (timeRecord[6] - timeRecord[0] <= 5* minorCycleInNanos);
    @*/
/*@
      public behaviour
        requires true;

        // evh6.time < evh2.time < evh3.time < evh2.time < evh2.time < evh3.time
        ensures TestCyclicExecutive.timeRecord[0] < TestCyclicExecutive.timeRecord[1];

//          (\forall int i; 0 < i && i < SIZE-2; timeRecord[i] < timeRecord[i + 1]);
//        // frame 0
//        ensures (timeRecord[1] - timeRecord[0] <= 1* minorCycleInNanos);
//        // frame 1
//        ensures (timeRecord[3] - timeRecord[0] <= 2* minorCycleInNanos);
//        // frame 2
//        ensures (timeRecord[4] - timeRecord[0] <= 3* minorCycleInNanos);
//        // frame 4
//        ensures (timeRecord[5] - timeRecord[0] <= 5* minorCycleInNanos);
//        ensures (timeRecord[6] - timeRecord[0] <= 5* minorCycleInNanos);
    @*/
/*@
      public behaviour
        requires true;

        // evh6.time < evh2.time < evh3.time < evh2.time < evh2.time < evh3.time
        ensures TestCyclicExecutive.timeRecord[0] < TestCyclicExecutive.timeRecord[1];

//          (\forall int i; 0 < i && i < SIZE-2; timeRecord[i] < timeRecord[i + 1]);
//        // frame 0
//        ensures (timeRecord[1] - timeRecord[0] <= 1* minorCycleInNanos);
//        // frame 1
//        ensures (timeRecord[3] - timeRecord[0] <= 2* minorCycleInNanos);
//        // frame 2
//        ensures (timeRecord[4] - timeRecord[0] <= 3* minorCycleInNanos);
//        // frame 4
//        ensures (timeRecord[5] - timeRecord[0] <= 5* minorCycleInNanos);
//        ensures (timeRecord[6] - timeRecord[0] <= 5* minorCycleInNanos);
    @*/
/*@
      public behaviour
        requires true;

        // evh6.time < evh2.time < evh3.time < evh2.time < evh2.time < evh3.time
        ensures TestCyclicExecutive.timeRecord[0] < TestCyclicExecutive.timeRecord[1];

//          (\forall int i; 0 < i && i < SIZE-2; timeRecord[i] < timeRecord[i + 1]);
//        // frame 0
//        ensures (timeRecord[1] - timeRecord[0] <= 1* minorCycleInNanos);
//        // frame 1
//        ensures (timeRecord[3] - timeRecord[0] <= 2* minorCycleInNanos);
//        // frame 2
//        ensures (timeRecord[4] - timeRecord[0] <= 3* minorCycleInNanos);
//        // frame 4
//        ensures (timeRecord[5] - timeRecord[0] <= 5* minorCycleInNanos);
//        ensures (timeRecord[6] - timeRecord[0] <= 5* minorCycleInNanos);
    @*/
/*@
      public behaviour
        requires true;

        // evh6.time < evh2.time < evh3.time < evh2.time < evh2.time < evh3.time
        ensures TestCyclicExecutive.timeRecord[0] < TestCyclicExecutive.timeRecord[1];

//          (\forall int i; 0 < i && i < SIZE-2; timeRecord[i] < timeRecord[i + 1]);
//        // frame 0
//        ensures (timeRecord[1] - timeRecord[0] <= 1* minorCycleInNanos);
//        // frame 1
//        ensures (timeRecord[3] - timeRecord[0] <= 2* minorCycleInNanos);
//        // frame 2
//        ensures (timeRecord[4] - timeRecord[0] <= 3* minorCycleInNanos);
//        // frame 4
//        ensures (timeRecord[5] - timeRecord[0] <= 5* minorCycleInNanos);
//        ensures (timeRecord[6] - timeRecord[0] <= 5* minorCycleInNanos);
    @*/
/*@
      public behaviour
        requires true;

        // evh6.time < evh2.time < evh3.time < evh2.time < evh2.time < evh3.time
        ensures TestCyclicExecutive.timeRecord[0] < TestCyclicExecutive.timeRecord[1];

//          (\forall int i; 0 < i && i < SIZE-2; timeRecord[i] < timeRecord[i + 1]);
//        // frame 0
//        ensures (timeRecord[1] - timeRecord[0] <= 1* minorCycleInNanos);
//        // frame 1
//        ensures (timeRecord[3] - timeRecord[0] <= 2* minorCycleInNanos);
//        // frame 2
//        ensures (timeRecord[4] - timeRecord[0] <= 3* minorCycleInNanos);
//        // frame 4
//        ensures (timeRecord[5] - timeRecord[0] <= 5* minorCycleInNanos);
//        ensures (timeRecord[6] - timeRecord[0] <= 5* minorCycleInNanos);
    @*/
/*@
//      protected behaviour
//        requires true;
//
//        // evh6.time < evh2.time < evh3.time < evh2.time < evh2.time < evh3.time
//        ensures timeRecord[0] < timeRecord[1];
//
////          (\forall int i; 0 < i && i < SIZE-2; timeRecord[i] < timeRecord[i + 1]);
////        // frame 0
////        ensures (timeRecord[1] - timeRecord[0] <= 1* minorCycleInNanos);
////        // frame 1
////        ensures (timeRecord[3] - timeRecord[0] <= 2* minorCycleInNanos);
////        // frame 2
////        ensures (timeRecord[4] - timeRecord[0] <= 3* minorCycleInNanos);
////        // frame 4
////        ensures (timeRecord[5] - timeRecord[0] <= 5* minorCycleInNanos);
////        ensures (timeRecord[6] - timeRecord[0] <= 5* minorCycleInNanos);
//    @*/
/*@
//      protected behaviour
//        requires true;
//
//        // evh6.time < evh2.time < evh3.time < evh2.time < evh2.time < evh3.time
//        ensures timeRecord[0] < timeRecord[1];
//
////          (\forall int i; 0 < i && i < SIZE-2; timeRecord[i] < timeRecord[i + 1]);
////        // frame 0
////        ensures (timeRecord[1] - timeRecord[0] <= 1* minorCycleInNanos);
////        // frame 1
////        ensures (timeRecord[3] - timeRecord[0] <= 2* minorCycleInNanos);
////        // frame 2
////        ensures (timeRecord[4] - timeRecord[0] <= 3* minorCycleInNanos);
////        // frame 4
////        ensures (timeRecord[5] - timeRecord[0] <= 5* minorCycleInNanos);
////        ensures (timeRecord[6] - timeRecord[0] <= 5* minorCycleInNanos);
//    @*/
/*@
//      protected behaviour
//        requires true;
//
//        // evh6.time < evh2.time < evh3.time < evh2.time < evh2.time < evh3.time
//        ensures timeRecord[0] < timeRecord[1];
//
////          (\forall int i; 0 < i && i < SIZE-2; timeRecord[i] < timeRecord[i + 1]);
////        // frame 0
////        ensures (timeRecord[1] - timeRecord[0] <= 1* minorCycleInNanos);
////        // frame 1
////        ensures (timeRecord[3] - timeRecord[0] <= 2* minorCycleInNanos);
////        // frame 2
////        ensures (timeRecord[4] - timeRecord[0] <= 3* minorCycleInNanos);
////        // frame 4
////        ensures (timeRecord[5] - timeRecord[0] <= 5* minorCycleInNanos);
////        ensures (timeRecord[6] - timeRecord[0] <= 5* minorCycleInNanos);
//    @*/
/*@
//      protected behaviour
//        requires true;
//
//        // evh6.time < evh2.time < evh3.time < evh2.time < evh2.time < evh3.time
//        ensures timeRecord[0] < timeRecord[1];
//
////          (\forall int i; 0 < i && i < SIZE-2; timeRecord[i] < timeRecord[i + 1]);
////        // frame 0
////        ensures (timeRecord[1] - timeRecord[0] <= 1* minorCycleInNanos);
////        // frame 1
////        ensures (timeRecord[3] - timeRecord[0] <= 2* minorCycleInNanos);
////        // frame 2
////        ensures (timeRecord[4] - timeRecord[0] <= 3* minorCycleInNanos);
////        // frame 4
////        ensures (timeRecord[5] - timeRecord[0] <= 5* minorCycleInNanos);
////        ensures (timeRecord[6] - timeRecord[0] <= 5* minorCycleInNanos);
//    @*/
/*@
//      protected behaviour
//        requires true;
//
//        // evh6.time < evh2.time < evh3.time < evh2.time < evh2.time < evh3.time
//        ensures timeRecord[0] < timeRecord[1];
//
////          (\forall int i; 0 < i && i < SIZE-2; timeRecord[i] < timeRecord[i + 1]);
////        // frame 0
////        ensures (timeRecord[1] - timeRecord[0] <= 1* minorCycleInNanos);
////        // frame 1
////        ensures (timeRecord[3] - timeRecord[0] <= 2* minorCycleInNanos);
////        // frame 2
////        ensures (timeRecord[4] - timeRecord[0] <= 3* minorCycleInNanos);
////        // frame 4
////        ensures (timeRecord[5] - timeRecord[0] <= 5* minorCycleInNanos);
////        ensures (timeRecord[6] - timeRecord[0] <= 5* minorCycleInNanos);
//    @*/
/*@
//      protected behaviour
//        requires true;
//
//        // evh6.time < evh2.time < evh3.time < evh2.time < evh2.time < evh3.time
//        ensures timeRecord[0] < timeRecord[1];
//
////          (\forall int i; 0 < i && i < SIZE-2; timeRecord[i] < timeRecord[i + 1]);
////        // frame 0
////        ensures (timeRecord[1] - timeRecord[0] <= 1* minorCycleInNanos);
////        // frame 1
////        ensures (timeRecord[3] - timeRecord[0] <= 2* minorCycleInNanos);
////        // frame 2
////        ensures (timeRecord[4] - timeRecord[0] <= 3* minorCycleInNanos);
////        // frame 4
////        ensures (timeRecord[5] - timeRecord[0] <= 5* minorCycleInNanos);
////        ensures (timeRecord[6] - timeRecord[0] <= 5* minorCycleInNanos);
//    @*/
/*@
//      protected behaviour
//        requires true;
//
//        // evh6.time < evh2.time < evh3.time < evh2.time < evh2.time < evh3.time
//        ensures timeRecord[0] < timeRecord[1];
//
////          (\forall int i; 0 < i && i < SIZE-2; timeRecord[i] < timeRecord[i + 1]);
////        // frame 0
////        ensures (timeRecord[1] - timeRecord[0] <= 1* minorCycleInNanos);
////        // frame 1
////        ensures (timeRecord[3] - timeRecord[0] <= 2* minorCycleInNanos);
////        // frame 2
////        ensures (timeRecord[4] - timeRecord[0] <= 3* minorCycleInNanos);
////        // frame 4
////        ensures (timeRecord[5] - timeRecord[0] <= 5* minorCycleInNanos);
////        ensures (timeRecord[6] - timeRecord[0] <= 5* minorCycleInNanos);
//    @*/
/*@
//      protected behaviour
//        requires true;
//
//        // evh6.time < evh2.time < evh3.time < evh2.time < evh2.time < evh3.time
//        ensures timeRecord[0] < timeRecord[1];
//
////          (\forall int i; 0 < i && i < SIZE-2; timeRecord[i] < timeRecord[i + 1]);
////        // frame 0
////        ensures (timeRecord[1] - timeRecord[0] <= 1* minorCycleInNanos);
////        // frame 1
////        ensures (timeRecord[3] - timeRecord[0] <= 2* minorCycleInNanos);
////        // frame 2
////        ensures (timeRecord[4] - timeRecord[0] <= 3* minorCycleInNanos);
////        // frame 4
////        ensures (timeRecord[5] - timeRecord[0] <= 5* minorCycleInNanos);
////        ensures (timeRecord[6] - timeRecord[0] <= 5* minorCycleInNanos);
//    @*/
/*@
    public behaviour
      requires true;

      ensures
          (\forall int i; 0 <= i && i < SIZE-1;
             timeRecord[i] < timeRecord[i + 1]);
    @*/
/*@
      protected behaviour
        requires true;

        ensures
          (\forall int i; 0 <= i && i < SIZE-1;
             timeRecord[i] < timeRecord[i + 1]);
    @*/
/*@
    public behaviour
      requires true;

      ensures
          (\forall int i; 0 <= i && i < SIZE-1;
             timeRecord[i] < timeRecord[i + 1]);
    @*/
/*@
      protected behaviour
        requires true;

        ensures
          (\forall int i; 0 <= i && i < SIZE-1;
             timeRecord[i] < timeRecord[i + 1]);
    @*/
/*@
    public behaviour
      requires true;

      ensures
          (\forall int i; 0 <= i && i < SIZE-1;
             timeRecord[i] < timeRecord[i + 1]);
    @*/
/*@
      protected behaviour
        requires true;

        ensures
          (\forall int i; 0 <= i && i < SIZE-1;
             timeRecord[i] < timeRecord[i + 1]);
    @*/
/*@
    public behaviour
      requires true;

      ensures
          (\forall int i; 0 <= i && i < SIZE-1;
             timeRecord[i] < timeRecord[i + 1]);
    @*/
/*@
      protected behaviour
        requires true;

        ensures
          (\forall int i; 0 <= i && i < SIZE-1;
             timeRecord[i] < timeRecord[i + 1]);
    @*/
/*@
    public behaviour
      requires true;

      ensures
          (\forall int i; 0 <= i && i < SIZE-1;
             timeRecord[i] < timeRecord[i + 1]);
    @*/
/*@
      protected behaviour
        requires true;

        ensures
          (\forall int i; 0 <= i && i < SIZE-1;
             timeRecord[i] < timeRecord[i + 1]);
    @*/
/*@
    public behaviour
      requires true;

      ensures
          (\forall int i; 0 <= i && i < SIZE-1;
             timeRecord[i] < timeRecord[i + 1]);
    @*/
/*@
      protected behaviour
        requires true;

        ensures
          (\forall int i; 0 <= i && i < SIZE-1;
             timeRecord[i] < timeRecord[i + 1]);
    @*/
/*@
    public behaviour
      requires true;

      ensures
          (\forall int i; 0 <= i && i < SIZE-1;
             timeRecord[i] < timeRecord[i + 1]);
    @*/
/*@
      protected behaviour
        requires true;

        ensures
          (\forall int i; 0 <= i && i < SIZE-1;
             timeRecord[i] < timeRecord[i + 1]);
    @*/
/*@
    public behaviour
      requires true;

      ensures
          (\forall int i; 0 <= i && i < SIZE-1;
             timeRecord[i] < timeRecord[i + 1]);
    @*/
/*@
      protected behaviour
        requires true;

        ensures
          (\forall int i; 0 <= i && i < SIZE-1;
             timeRecord[i] < timeRecord[i + 1]);
    @*/
/*@
      protected behaviour
        requires true;

        ensures
          (\forall int i; 0 <= i && i < SIZE-1;
             timeRecord[i] < timeRecord[i + 1]);
    @*/
/*@
      protected behaviour
        requires true;

        ensures
          (\forall int i; 0 <= i && i < SIZE-1;
             timeRecord[i] < timeRecord[i + 1]);
    @*/
/*@
      protected behaviour
        requires true;

        ensures
          (\forall int i; 0 <= i && i < SIZE-1;
             timeRecord[i] < timeRecord[i + 1]);
    @*/
/*@
      protected behaviour
        requires true;

        ensures
          (\forall int i; 0 <= i && i < SIZE-1;
             timeRecord[i] < timeRecord[i + 1]);
    @*/
/*@
      protected behaviour
        requires true;

        ensures
          (\forall int i; 0 <= i && i < SIZE-1;
             timeRecord[i] < timeRecord[i + 1]);
    @*/
/*@
      protected behaviour
        requires true;

        ensures
          (\forall int i; 0 <= i && i < SIZE-1;
             timeRecord[i] < timeRecord[i + 1]);
    @*/
/*@
      protected behaviour
        requires true;

        ensures
          (\forall int i; 0 <= i && i < SIZE-1;
             timeRecord[i] < timeRecord[i + 1]);
    @*/
/*@
      protected behaviour
        requires true;

        ensures
          (\forall int i; 0 <= i && i < SIZE-1;
             timeRecord[i] < timeRecord[i + 1]);
    @*/
/*@
      public behaviour
        requires true;

        ensures
          (\forall int i; 0 <= i && i < TestSafelet2.SIZE;
             TestSafelet2.activationOrder[i].missionNo == i % SequencerStub2.missions.length);
      @*/
/*@
      public behaviour
        requires true;

        ensures
          (\forall int i; 0 <= i && i < TestSafelet2.SIZE;
             TestSafelet2.activationOrder[i].missionNo == i % SequencerStub2.missions.length);
      @*/
/*@
      public behaviour
        requires true;

        ensures
          (\forall int i; 0 <= i && i < TestSafelet2.SIZE;
             TestSafelet2.activationOrder[i].missionNo == i % SequencerStub2.missions.length);
      @*/
/*@
      public behaviour
        requires true;

        ensures
          (\forall int i; 0 <= i && i < TestSafelet2.SIZE;
             TestSafelet2.activationOrder[i].missionNo == i % SequencerStub2.missions.length);
      @*/
/*@
      public behaviour
        requires true;

        ensures
          (\forall int i; 0 <= i && i < TestSafelet2.SIZE;
             TestSafelet2.activationOrder[i].missionNo == i % SequencerStub2.missions.length);
      @*/
/*@
      public behaviour
        requires true;

        ensures
          (\forall int i; 0 <= i && i < TestSafelet2.SIZE;
             TestSafelet2.activationOrder[i].missionNo == i % SequencerStub2.missions.length);
      @*/
/*@
      public behaviour
        requires true;

        ensures
          (\forall int i; 0 <= i && i < TestSafelet2.SIZE;
             TestSafelet2.activationOrder[i].missionNo == i % SequencerStub2.missions.length);
      @*/
/*@
      public behaviour
        requires true;

        ensures
          (\forall int i; 0 <= i && i < TestSafelet2.SIZE;
             TestSafelet2.activationOrder[i].missionNo == i % SequencerStub2.missions.length);
      @*/
/*@
	    also
	      ensures true;
	    @*/
/*@
//	    also
//	      ensures true;
//	    @*/
/*@
	    also
	      ensures true;
	    @*/
/*@
//	    also
//	      ensures true;
//	    @*/
/*@
	    also
	      ensures true;
	    @*/
/*@
//	    also
//	      ensures true;
//	    @*/
/*@
	    also
	      ensures true;
	    @*/
/*@
//	    also
//	      ensures true;
//	    @*/
/*@
	    also
	      ensures true;
	    @*/
/*@
//	    also
//	      ensures true;
//	    @*/
/*@
	    also
	      ensures true;
	    @*/
/*@
//	    also
//	      ensures true;
//	    @*/
/*@
	    also
	      ensures true;
	    @*/
/*@
//	    also
//	      ensures true;
//	    @*/
/*@
	    also
	      ensures true;
	    @*/
/*@
//	    also
//	      ensures true;
//	    @*/
/*@
//	      also
//	        requires true;
//	        ensures true;
//	      @*/
/*@
//	      public behaviour
//	        requires true;
//
//	        ensures
//	          (\forall int i; 0 <= i && i < TestSafelet2.SIZE;
//	             TestSafelet2.activationOrder[i].missionNo == i % SequencerStub2.missions.length);
//	      @*/
/*@
		      also
		        requires true;
		        ensures true;
		      @*/
/*@
		      also
		        requires true;

//		        ensures
//		          (\forall int i; 0 <= i && i < TestSafelet2.SIZE;
//		             TestSafelet2.activationOrder[i].missionNo == i % missions.length);
		      @*/
/*@
//	      also
//	        requires true;
//	        ensures true;
//	      @*/
/*@
//	      public behaviour
//	        requires true;
//
//	        ensures
//	          (\forall int i; 0 <= i && i < TestSafelet2.SIZE;
//	             TestSafelet2.activationOrder[i].missionNo == i % SequencerStub2.missions.length);
//	      @*/
/*@
		      also
		        requires true;
		        ensures true;
		      @*/
/*@
		      also
		        requires true;

//		        ensures
//		          (\forall int i; 0 <= i && i < TestSafelet2.SIZE;
//		             TestSafelet2.activationOrder[i].missionNo == i % missions.length);
		      @*/
/*@
//	      also
//	        requires true;
//	        ensures true;
//	      @*/
/*@
//	      public behaviour
//	        requires true;
//
//	        ensures
//	          (\forall int i; 0 <= i && i < TestSafelet2.SIZE;
//	             TestSafelet2.activationOrder[i].missionNo == i % SequencerStub2.missions.length);
//	      @*/
/*@
		      also
		        requires true;
		        ensures true;
		      @*/
/*@
		      also
		        requires true;

//		        ensures
//		          (\forall int i; 0 <= i && i < TestSafelet2.SIZE;
//		             TestSafelet2.activationOrder[i].missionNo == i % missions.length);
		      @*/
/*@
//	      also
//	        requires true;
//	        ensures true;
//	      @*/
/*@
//	      public behaviour
//	        requires true;
//
//	        ensures
//	          (\forall int i; 0 <= i && i < TestSafelet2.SIZE;
//	             TestSafelet2.activationOrder[i].missionNo == i % SequencerStub2.missions.length);
//	      @*/
/*@
		      also
		        requires true;
		        ensures true;
		      @*/
/*@
		      also
		        requires true;

//		        ensures
//		          (\forall int i; 0 <= i && i < TestSafelet2.SIZE;
//		             TestSafelet2.activationOrder[i].missionNo == i % missions.length);
		      @*/
/*@
//	      also
//	        requires true;
//	        ensures true;
//	      @*/
/*@
//	      public behaviour
//	        requires true;
//
//	        ensures
//	          (\forall int i; 0 <= i && i < TestSafelet2.SIZE;
//	             TestSafelet2.activationOrder[i].missionNo == i % SequencerStub2.missions.length);
//	      @*/
/*@
		      also
		        requires true;
		        ensures true;
		      @*/
/*@
		      also
		        requires true;

//		        ensures
//		          (\forall int i; 0 <= i && i < TestSafelet2.SIZE;
//		             TestSafelet2.activationOrder[i].missionNo == i % missions.length);
		      @*/
/*@
//	      also
//	        requires true;
//	        ensures true;
//	      @*/
/*@
//	      public behaviour
//	        requires true;
//
//	        ensures
//	          (\forall int i; 0 <= i && i < TestSafelet2.SIZE;
//	             TestSafelet2.activationOrder[i].missionNo == i % SequencerStub2.missions.length);
//	      @*/
/*@
		      also
		        requires true;
		        ensures true;
		      @*/
/*@
		      also
		        requires true;

//		        ensures
//		          (\forall int i; 0 <= i && i < TestSafelet2.SIZE;
//		             TestSafelet2.activationOrder[i].missionNo == i % missions.length);
		      @*/
/*@
//	      also
//	        requires true;
//	        ensures true;
//	      @*/
/*@
//	      public behaviour
//	        requires true;
//
//	        ensures
//	          (\forall int i; 0 <= i && i < TestSafelet2.SIZE;
//	             TestSafelet2.activationOrder[i].missionNo == i % SequencerStub2.missions.length);
//	      @*/
/*@
		      also
		        requires true;
		        ensures true;
		      @*/
/*@
		      also
		        requires true;

//		        ensures
//		          (\forall int i; 0 <= i && i < TestSafelet2.SIZE;
//		             TestSafelet2.activationOrder[i].missionNo == i % missions.length);
		      @*/
/*@
//	      also
//	        requires true;
//	        ensures true;
//	      @*/
/*@
//	      public behaviour
//	        requires true;
//
//	        ensures
//	          (\forall int i; 0 <= i && i < TestSafelet2.SIZE;
//	             TestSafelet2.activationOrder[i].missionNo == i % SequencerStub2.missions.length);
//	      @*/
/*@
		      also
		        requires true;
		        ensures true;
		      @*/
/*@
		      also
		        requires true;

//		        ensures
//		          (\forall int i; 0 <= i && i < TestSafelet2.SIZE;
//		             TestSafelet2.activationOrder[i].missionNo == i % missions.length);
		      @*/
/*@
	    also
	      ensures true;
	    @*/
/*@
//	    also
//	      ensures true;
//	    @*/
/*@
	    also
	      ensures true;
	    @*/
/*@
//	    also
//	      ensures true;
//	    @*/
/*@
	    also
	      ensures true;
	    @*/
/*@
//	    also
//	      ensures true;
//	    @*/
/*@
	    also
	      ensures true;
	    @*/
/*@
//	    also
//	      ensures true;
//	    @*/
/*@
	    also
	      ensures true;
	    @*/
/*@
//	    also
//	      ensures true;
//	    @*/
/*@
	    also
	      ensures true;
	    @*/
/*@
//	    also
//	      ensures true;
//	    @*/
/*@
	    also
	      ensures true;
	    @*/
/*@
//	    also
//	      ensures true;
//	    @*/
/*@
//      public behaviour
//        requires true;
//        ensures MemoryArea.getMemoryArea(\result) instanceof MissionMemory;
//      @*/
/*@
//      public behaviour
//        requires true;
//        ensures MemoryArea.getMemoryArea(\result) instanceof MissionMemory;
//      @*/
/*@
//      public behaviour
//        requires true;
//        ensures MemoryArea.getMemoryArea(\result) instanceof MissionMemory;
//      @*/
/*@
//      public behaviour
//        requires true;
//        ensures MemoryArea.getMemoryArea(\result) instanceof MissionMemory;
//      @*/
/*@
//      public behaviour
//        requires true;
//        ensures MemoryArea.getMemoryArea(\result) instanceof MissionMemory;
//      @*/
/*@
//	public behaviour
//	requires true;
//	ensures MemoryArea.getMemoryArea(\result) instanceof PrivateMemory;
//	@*/
/*@
//	public behaviour
//	requires true;
//	ensures MemoryArea.getMemoryArea(\result) instanceof PrivateMemory;
//	@*/
/*@
//	public behaviour
//	requires true;
//	ensures MemoryArea.getMemoryArea(\result) instanceof PrivateMemory;
//	@*/
/*@
//	public behaviour
//	requires true;
//	ensures MemoryArea.getMemoryArea(\result) instanceof PrivateMemory;
//	@*/
/*@
//	public behaviour
//	requires true;
//	ensures MemoryArea.getMemoryArea(\result) instanceof PrivateMemory;
//	@*/
/*@
//      public behavior  // specification from Safelet
//        requires true;
//
//        ensures \result != null;
//        ensures (MemoryArea.getMemoryArea(\result) instanceof ManagedMemory.ImmortalMemory);
//
//      also  // indicates there are inherited specifications
//
//        requires true;
//        ensures MemoryArea.getMemoryArea(\result) instanceof ManagedMemory.ImmortalMemory;
//      @*/
/*@
//      public behavior  // specification from Safelet
//        requires true;
//
//        ensures \result != null;
//        ensures (MemoryArea.getMemoryArea(\result) instanceof ManagedMemory.ImmortalMemory);
//
//      also  // indicates there are inherited specifications
//
//        requires true;
//        ensures MemoryArea.getMemoryArea(\result) instanceof ManagedMemory.ImmortalMemory;
//      @*/
/*@
//      public behavior  // specification from Safelet
//        requires true;
//
//        ensures \result != null;
//        ensures (MemoryArea.getMemoryArea(\result) instanceof ManagedMemory.ImmortalMemory);
//
//      also  // indicates there are inherited specifications
//
//        requires true;
//        ensures MemoryArea.getMemoryArea(\result) instanceof ManagedMemory.ImmortalMemory;
//      @*/
/*@
//      public behavior  // specification from Safelet
//        requires true;
//
//        ensures \result != null;
//        ensures (MemoryArea.getMemoryArea(\result) instanceof ManagedMemory.ImmortalMemory);
//
//      also  // indicates there are inherited specifications
//
//        requires true;
//        ensures MemoryArea.getMemoryArea(\result) instanceof ManagedMemory.ImmortalMemory;
//      @*/
/*@
//      public behavior  // specification from Safelet
//        requires true;
//
//        ensures \result != null;
//        ensures (MemoryArea.getMemoryArea(\result) instanceof ManagedMemory.ImmortalMemory);
//
//      also  // indicates there are inherited specifications
//
//        requires true;
//        ensures MemoryArea.getMemoryArea(\result) instanceof ManagedMemory.ImmortalMemory;
//      @*/
/*@
      public behavior  // specification from Safelet
        requires true;

        ensures \result != null;
        ensures (MemoryArea.getMemoryArea(\result) instanceof ManagedMemory.ImmortalMemory);

      also  // indicates there are inherited specifications

        requires true;
        ensures MemoryArea.getMemoryArea(\result) instanceof ManagedMemory.ImmortalMemory;
      @*/
/*@
      public behaviour
        requires true;
        ensures MemoryArea.getMemoryArea(\result) instanceof MissionMemory;
      @*/
/*@
      public behaviour
        requires true;
        ensures MemoryArea.getMemoryArea(\result) instanceof PrivateMemory;
      @*/
/*@
      public behavior  // specification from Safelet
        requires true;

        ensures \result != null;
        ensures (MemoryArea.getMemoryArea(\result) instanceof ManagedMemory.ImmortalMemory);

      also  // indicates there are inherited specifications

        requires true;
        ensures MemoryArea.getMemoryArea(\result) instanceof ManagedMemory.ImmortalMemory;
      @*/
/*@
      public behaviour
        requires true;
        ensures MemoryArea.getMemoryArea(\result) instanceof MissionMemory;
      @*/
/*@
      public behaviour
        requires true;
        ensures MemoryArea.getMemoryArea(\result) instanceof PrivateMemory;
      @*/
/*@
      public behavior  // specification from Safelet
        requires true;

        ensures \result != null;
        ensures (MemoryArea.getMemoryArea(\result) instanceof ManagedMemory.ImmortalMemory);

      also  // indicates there are inherited specifications

        requires true;
        ensures MemoryArea.getMemoryArea(\result) instanceof ManagedMemory.ImmortalMemory;
      @*/
/*@
      public behaviour
        requires true;
        ensures MemoryArea.getMemoryArea(\result) instanceof MissionMemory;
      @*/
/*@
      public behaviour
        requires true;
        ensures MemoryArea.getMemoryArea(\result) instanceof PrivateMemory;
      @*/
/*@
      public behavior  // specification from Safelet
        requires true;

        ensures \result != null;
        ensures (MemoryArea.getMemoryArea(\result) instanceof ManagedMemory.ImmortalMemory);

      also  // indicates there are inherited specifications

        requires true;
        ensures MemoryArea.getMemoryArea(\result) instanceof ManagedMemory.ImmortalMemory;
      @*/
/*@
      public behaviour
        requires true;
        ensures MemoryArea.getMemoryArea(\result) instanceof MissionMemory;
      @*/
/*@
      public behaviour
        requires true;
        ensures MemoryArea.getMemoryArea(\result) instanceof PrivateMemory;
      @*/
/*@
      public behavior  // specification from Safelet
        requires true;

        ensures \result != null;
        ensures (MemoryArea.getMemoryArea(\result) instanceof ManagedMemory.ImmortalMemory);

      also  // indicates there are inherited specifications

        requires true;
        ensures MemoryArea.getMemoryArea(\result) instanceof ManagedMemory.ImmortalMemory;
      @*/
/*@
      public behaviour
        requires true;
        ensures MemoryArea.getMemoryArea(\result) instanceof MissionMemory;
      @*/
/*@
      public behaviour
        requires true;
        ensures MemoryArea.getMemoryArea(\result) instanceof PrivateMemory;
      @*/
//@ assignable allTrue;

//@ ensures allTrue == (\old(allTrue) && v);

//@ loop_invariant allTrue==(\forall int j; 0<=j && j <\count; s.values[j]);

//@ loop_modifies allTrue;

//@ inlined_loop;

//@ assert allTrue==(\forall int j; 0<=j && j <s.count(); s.values[j]);

//@ assert !allTrue;

//@ loop_invariant allTrue==(\forall int j; 0<=j && j <\count; ss.values[j]);

//@ loop_modifies allTrue;

//@ inlined_loop;

//@ assert allTrue==(\forall int j; 0<=j && j <ss.count(); ss.values[j]);

//@ assert allTrue;

//@ assignable allTrue;

//@ ensures allTrue == (\old(allTrue) && v);

//@ loop_invariant allTrue==(\forall int j; 0<=j && j <\count; s.values[j]);

//@ loop_modifies allTrue;

//@ inlined_loop;

//@ assert allTrue==(\forall int j; 0<=j && j <s.count(); s.values[j]);

//@ assert !allTrue;

//@ loop_invariant allTrue==(\forall int j; 0<=j && j <\count; ss.values[j]);

//@ loop_modifies allTrue;

//@ inlined_loop;

//@ assert allTrue==(\forall int j; 0<=j && j <ss.count(); ss.values[j]);

//@ assert allTrue;

//@ nullable_by_default

//@ assignable noNulls;

//@ ensures noNulls == (\old(noNulls) && v!=null);

//@ assignable allTrue;

//@ ensures allTrue == (\old(allTrue) && v);

/*@ non_null*/

//@ loop_invariant noNulls==(\forall int j; 0<=j && j <\count; s.values[j] != null);

//@ loop_modifies noNulls;

//@ inlined_loop;

//@ assert noNulls==(\forall int j; 0<=j && j <s.count(); s.values[j] != null);

//@ assert !noNulls;

//@ assert (\forall int j; 0<=j && j<s.count(); s.values[j] != null);

//@ loop_invariant (boolean)s.values[0] && !(boolean)s.values[1] && (boolean)s.values[2];

//@ loop_invariant allTrue==(\forall int j; 0<=j && j <\count; (boolean)s.values[j]);

//@ loop_modifies allTrue;

//@ inlined_loop;

//@ assert allTrue==(\forall int j; 0<=j && j <s.count(); (boolean)s.values[j]);

//@ assert !allTrue;

//@ nullable_by_default

//@ assignable noNulls;

//@ ensures noNulls == (\old(noNulls) && v!=null);

//@ assignable allTrue;

//@ ensures allTrue == (\old(allTrue) && v);

/*@ non_null*/

//@ loop_invariant noNulls==(\forall int j; 0<=j && j <\count; s.values[j] != null);

//@ loop_modifies noNulls;

//@ inlined_loop;

//@ assert noNulls==(\forall int j; 0<=j && j <s.count(); s.values[j] != null);

//@ assert !noNulls;

//@ assert (\forall int j; 0<=j && j<s.count(); s.values[j] != null);

//@ loop_invariant (boolean)s.values[0] && !(boolean)s.values[1] && (boolean)s.values[2];

//@ loop_invariant allTrue==(\forall int j; 0<=j && j <\count; (boolean)s.values[j]);

//@ loop_modifies allTrue;

//@ inlined_loop;

//@ assert allTrue==(\forall int j; 0<=j && j <s.count(); (boolean)s.values[j]);

//@ assert !allTrue;

//@ static @Model public class MB {  }

//@ model protected static enum mconsts { MEA, MEB }

//@ model public @interface MAnnot {}

//@ static @Model public class MB {  }

//@ model protected static enum mconsts { MEA, MEB }

//@ model public @interface MAnnot {}

//@ static @Model public class MB {  }

//@ model protected static enum mconsts { MEA, MEB }

//@ model public @interface MAnnot {}

//@ requires true;

/*@ nullable*/
//@ requires i == 0;

//@ model public A(int i) {}

//@ requires i == 0.0;

//@ model public A(float i) {}

//@ requires i == null;

//@ model public A(Object i) {}

//@ model public A(int i,int j, @NonNull Object k , non_null Object m) {}

//@ requires j >= 0;

//@ model public A(float nodocs ,int j , int k) {}

//@ invariant true;

//@ constraint false;

//@ initially true;

//@ axiom true;

//@ represents bb_model = 0;

//@ model public @interface MAnnot {}

/*@
 public secret model int i;
 secret represents i = 0;
*/
/*@
 ghost int ghost_i;
*/

//@ in i;

//@ maps a.i \into i;


//@ in i;

//@ in i;

//@ maps a.i \into i;

//@ also requires true;

//@ model @Deprecated Object adl(int i);

//@ model int mdl_nospecs(int i);

//@ requires i == 0;

//@ model void ambig(int i);

//@ requires i == 0.0;

//@ model void ambig(float i);

//@ requires i == null;

//@ model void ambig(Object i);

//@ requires i == "";

//@ model void ambig(String i);

//@ requires true;

//@ ensures \result == 0;

//@ signals (java.io.FileNotFoundException e) true;

//@ signals_only java.io.FileNotFoundException;

//@ requires true;

//@ ensures \result == 0;

//@ modifies a;

//@ signals (java.io.FileNotFoundException e) true;

//@ signals_only java.io.FileNotFoundException;

//@ requires true;

//@ ensures \result == 0;

//@ signals (java.io.FileNotFoundException e) true;

//@ signals_only java.io.FileNotFoundException;



//@ public normal_behavior

//@  requires true;

//@  ensures true;

//@ also public behavior

//@  requires false;

//@  ensures false;



//@invariant false && true;

//@ static @Model public class MB { invariant true;  void qqq() {} }

//@ static model public class MC extends BB {}

/*@ invariant false; */
//@ model public static interface BMInterface {}

/*@ invariant false; */
//@ ensures false;

//@ model Object adl(int i);

//@ ensures false;

/*@ invariant false && false; */
//@ ensures false && false;

//@ model @NonNull Object adl(int i);

//@ ensures false && false;

//@ invariant false;

//@ ensures z_public == 10;

//@ ensures z_public == 11;

//@ public model int mdla();

//@ public model int mdlb();

//@ private model void mdlc();

//@ ghost public int bb_ghost;

//@ model public int bb_model;

//@ ghost private int bb_private;

//@ model static public class BBBM {}

//@ model public CEmpty(Object o) {}

//@ ghost public int ghhost_i;

//@ model public int model_i;

//@ model public int model_m();

//@ model public static class CNested {}

//@ model class CCM {}

//@ requires true;

/*@ nullable*/
//@ requires i == 0;

//@ model public A(int i) {}

//@ requires i == 0.0;

//@ model public A(float i) {}

//@ requires i == null;

//@ model public A(Object i) {}

//@ model public A(int i,int j, @NonNull Object k , non_null Object m) {}

//@ requires j >= 0;

//@ model public A(float nodocs ,int j , int k) {}

//@ invariant true;

//@ constraint false;

//@ initially true;

//@ axiom true;

//@ represents bb_model = 0;

//@ model public @interface MAnnot {}

/*@
 public secret model int i;
 secret represents i = 0;
*/
/*@
 ghost int ghost_i;
*/

//@ in i;

//@ maps a.i \into i;


//@ in i;

//@ in i;

//@ maps a.i \into i;

//@ also requires true;

//@ model @Deprecated Object adl(int i);

//@ model int mdl_nospecs(int i);

//@ requires i == 0;

//@ model void ambig(int i);

//@ requires i == 0.0;

//@ model void ambig(float i);

//@ requires i == null;

//@ model void ambig(Object i);

//@ requires i == "";

//@ model void ambig(String i);

//@ requires true;

//@ ensures \result == 0;

//@ signals (java.io.FileNotFoundException e) true;

//@ signals_only java.io.FileNotFoundException;

//@ requires true;

//@ ensures \result == 0;

//@ modifies a;

//@ signals (java.io.FileNotFoundException e) true;

//@ signals_only java.io.FileNotFoundException;

//@ requires true;

//@ ensures \result == 0;

//@ signals (java.io.FileNotFoundException e) true;

//@ signals_only java.io.FileNotFoundException;



//@ public normal_behavior

//@  requires true;

//@  ensures true;

//@ also public behavior

//@  requires false;

//@  ensures false;



//@invariant false && true;

//@ static @Model public class MB { invariant true;  void qqq() {} }

//@ static model public class MC extends BB {}

/*@ invariant false; */
//@ model public static interface BMInterface {}

/*@ invariant false; */
//@ ensures false;

//@ model Object adl(int i);

//@ ensures false;

/*@ invariant false && false; */
//@ ensures false && false;

//@ model @NonNull Object adl(int i);

//@ ensures false && false;

//@ invariant false;

//@ ensures z_public == 10;

//@ ensures z_public == 11;

//@ public model int mdla();

//@ public model int mdlb();

//@ private model void mdlc();

//@ ghost public int bb_ghost;

//@ model public int bb_model;

//@ ghost private int bb_private;

//@ model static public class BBBM {}

//@ model public CEmpty(Object o) {}

//@ ghost public int ghhost_i;

//@ model public int model_i;

//@ model public int model_m();

//@ model public static class CNested {}

//@ model class CCM {}

//@ requires true;

/*@ nullable*/
//@ requires i == 0;

//@ model public A(int i) {}

//@ requires i == 0.0;

//@ model public A(float i) {}

//@ requires i == null;

//@ model public A(Object i) {}

//@ model public A(int i,int j, @NonNull Object k , non_null Object m) {}

//@ requires j >= 0;

//@ model public A(float nodocs ,int j , int k) {}

//@ invariant true;

//@ constraint false;

//@ initially true;

//@ axiom true;

//@ represents bb_model = 0;

//@ model public @interface MAnnot {}

/*@
 public secret model int i;
 secret represents i = 0;
*/
/*@
 ghost int ghost_i;
*/

//@ in i;

//@ maps a.i \into i;


//@ in i;

//@ in i;

//@ maps a.i \into i;

//@ also requires true;

//@ model @Deprecated Object adl(int i);

//@ model int mdl_nospecs(int i);

//@ requires i == 0;

//@ model void ambig(int i);

//@ requires i == 0.0;

//@ model void ambig(float i);

//@ requires i == null;

//@ model void ambig(Object i);

//@ requires i == "";

//@ model void ambig(String i);

//@ requires true;

//@ ensures \result == 0;

//@ signals (java.io.FileNotFoundException e) true;

//@ signals_only java.io.FileNotFoundException;

//@ requires true;

//@ ensures \result == 0;

//@ modifies a;

//@ signals (java.io.FileNotFoundException e) true;

//@ signals_only java.io.FileNotFoundException;

//@ requires true;

//@ ensures \result == 0;

//@ signals (java.io.FileNotFoundException e) true;

//@ signals_only java.io.FileNotFoundException;



//@ public normal_behavior

//@  requires true;

//@  ensures true;

//@ also public behavior

//@  requires false;

//@  ensures false;



//@invariant false && true;

//@ static @Model public class MB { invariant true;  void qqq() {} }

//@ static model public class MC extends BB {}

/*@ invariant false; */
//@ model public static interface BMInterface {}

/*@ invariant false; */
//@ ensures false;

//@ model Object adl(int i);

//@ ensures false;

/*@ invariant false && false; */
//@ ensures false && false;

//@ model @NonNull Object adl(int i);

//@ ensures false && false;

//@ invariant false;

//@ ensures z_public == 10;

//@ ensures z_public == 11;

//@ public model int mdla();

//@ public model int mdlb();

//@ private model void mdlc();

//@ ghost public int bb_ghost;

//@ model public int bb_model;

//@ ghost private int bb_private;

//@ model static public class BBBM {}

//@ model public CEmpty(Object o) {}

//@ ghost public int ghhost_i;

//@ model public int model_i;

//@ model public int model_m();

//@ model public static class CNested {}

//@ model class CCM {}

//@ ghost public int gp_public;

//@ ghost protected int gp_protected;

//@ ghost int gp_package;

//@ ghost private int gp_private;

//@ model public void qp_public() {};

//@ model protected void qp_protected() {}

//@ model void qp_package() {}

//@ model private void qp_private() {}

//@ model public PVis(Object o) {}

//@ model protected PVis(float i) {}

//@ model PVis(float i, float j) {}

//@ model private PVis(float i, float j, float k) {}

//@ model public static class Dp_public {}

//@ model protected static class Dp_protected {}

//@ model static class Dp_package {}

//@ model private static class Dp_private {}

//@ model public static enum EMp_public { EMAp }

//@ model protected static enum EMp_protected { EMBp }

//@ model static enum EMp_package { EMCp }

//@ model private static enum EMp_private { EMDp }

//@ model public static interface IMp_public {  }

//@ model protected static interface IMp_protected {  }

//@ model static interface IMp_package {  }

//@ model private static interface IMp_private {  }

//@ model public static @interface AMp_public {  }

//@ model protected static @interface AMp_protected {  }

//@ model static @interface AMp_package {  }

//@ model private static @interface AMp_private {  }

//@ ghost public int gp_public;

//@ ghost protected int gp_protected;

//@ ghost int gp_package;

//@ ghost private int gp_private;

//@ model public void qp_public() {};

//@ model protected void qp_protected() {}

//@ model void qp_package() {}

//@ model private void qp_private() {}

//@ model public PVis(Object o) {}

//@ model protected PVis(float i) {}

//@ model PVis(float i, float j) {}

//@ model private PVis(float i, float j, float k) {}

//@ model public static class Dp_public {}

//@ model protected static class Dp_protected {}

//@ model static class Dp_package {}

//@ model private static class Dp_private {}

//@ model public static enum EMp_public { EMAp }

//@ model protected static enum EMp_protected { EMBp }

//@ model static enum EMp_package { EMCp }

//@ model private static enum EMp_private { EMDp }

//@ model public static interface IMp_public {  }

//@ model protected static interface IMp_protected {  }

//@ model static interface IMp_package {  }

//@ model private static interface IMp_private {  }

//@ model public static @interface AMp_public {  }

//@ model protected static @interface AMp_protected {  }

//@ model static @interface AMp_package {  }

//@ model private static @interface AMp_private {  }

//@ ghost public int gp_public;

//@ ghost protected int gp_protected;

//@ ghost int gp_package;

//@ ghost private int gp_private;

//@ model public void qp_public() {};

//@ model protected void qp_protected() {}

//@ model void qp_package() {}

//@ model private void qp_private() {}

//@ model public PVis(Object o) {}

//@ model protected PVis(float i) {}

//@ model PVis(float i, float j) {}

//@ model private PVis(float i, float j, float k) {}

//@ model public static class Dp_public {}

//@ model protected static class Dp_protected {}

//@ model static class Dp_package {}

//@ model private static class Dp_private {}

//@ model public static enum EMp_public { EMAp }

//@ model protected static enum EMp_protected { EMBp }

//@ model static enum EMp_package { EMCp }

//@ model private static enum EMp_private { EMDp }

//@ model public static interface IMp_public {  }

//@ model protected static interface IMp_protected {  }

//@ model static interface IMp_package {  }

//@ model private static interface IMp_private {  }

//@ model public static @interface AMp_public {  }

//@ model protected static @interface AMp_protected {  }

//@ model static @interface AMp_package {  }

//@ model private static @interface AMp_private {  }

//@ ghost public int gp_public;

//@ ghost protected int gp_protected;

//@ ghost int gp_package;

//@ ghost private int gp_private;

//@ model public void qp_public() {};

//@ model protected void qp_protected() {}

//@ model void qp_package() {}

//@ model private void qp_private() {}

//@ model public PVis(Object o) {}

//@ model protected PVis(float i) {}

//@ model PVis(float i, float j) {}

//@ model private PVis(float i, float j, float k) {}

//@ model public static class Dp_public {}

//@ model protected static class Dp_protected {}

//@ model static class Dp_package {}

//@ model private static class Dp_private {}

//@ model public static enum EMp_public { EMAp }

//@ model protected static enum EMp_protected { EMBp }

//@ model static enum EMp_package { EMCp }

//@ model private static enum EMp_private { EMDp }

//@ model public static interface IMp_public {  }

//@ model protected static interface IMp_protected {  }

//@ model static interface IMp_package {  }

//@ model private static interface IMp_private {  }

//@ model public static @interface AMp_public {  }

//@ model protected static @interface AMp_protected {  }

//@ model static @interface AMp_package {  }

//@ model private static @interface AMp_private {  }

//@ ghost public int g_public;

//@ ghost protected int g_protected;

//@ ghost int g_package;

//@ ghost private int g_private;

//@ model public void q_public() {};

//@ model protected void q_protected() {}

//@ model void q_package() {}

//@ model private void q_private() {}

//@ model public Vis(Object o) {}

//@ model protected Vis(float i) {}

//@ model Vis(float i, float j) {}

//@ model private Vis(float i, float j, float k) {}

//@ model public static class D_public {}

//@ model protected static class D_protected {}

//@ model static class D_package {}

//@ model private static class D_private {}

//@ model public static enum EM_public { EMA }

//@ model protected static enum EM_protected { EMB }

//@ model static enum EM_package { EMC }

//@ model private static enum EM_private { EMD }

//@ model public static interface IM_public {  }

//@ model protected static interface IM_protected {  }

//@ model static interface IM_package {  }

//@ model private static interface IM_private {  }

//@ model public static @interface AM_public {  }

//@ model protected static @interface AM_protected {  }

//@ model static @interface AM_package {  }

//@ model private static @interface AM_private {  }

//@ ghost public int gs_public;

//@ ghost protected int gs_protected;

//@ ghost int gs_package;

//@ ghost private int gs_private;

//@ model public void qs_public() {};

//@ model protected void qs_protected() {}

//@ model void qs_package() {}

//@ model private void qs_private() {}

//@ model public SVis(Object o) {}

//@ model protected SVis(float i) {}

//@ model SVis(float i, float j) {}

//@ model private SVis(float i, float j, float k) {}

//@ model public static class Ds_public {}

//@ model protected static class Ds_protected {}

//@ model static class Ds_package {}

//@ model private static class Ds_private {}

//@ model public static enum EMs_public { EMAs }

//@ model protected static enum EMs_protected { EMBs }

//@ model static enum EMs_package { EMCs }

//@ model private static enum EMs_private { EMDs }

//@ model public static interface IMs_public {  }

//@ model protected static interface IMs_protected {  }

//@ model static interface IMs_package {  }

//@ model private static interface IMs_private {  }

//@ model public static @interface AMs_public {  }

//@ model protected static @interface AMs_protected {  }

//@ model static @interface AMs_package {  }

//@ model private static @interface AMs_private {  }

//@ ghost public int g_public;

//@ ghost protected int g_protected;

//@ ghost int g_package;

//@ ghost private int g_private;

//@ model public void q_public() {};

//@ model protected void q_protected() {}

//@ model void q_package() {}

//@ model private void q_private() {}

//@ model public Vis(Object o) {}

//@ model protected Vis(float i) {}

//@ model Vis(float i, float j) {}

//@ model private Vis(float i, float j, float k) {}

//@ model public static class D_public {}

//@ model protected static class D_protected {}

//@ model static class D_package {}

//@ model private static class D_private {}

//@ model public static enum EM_public { EMA }

//@ model protected static enum EM_protected { EMB }

//@ model static enum EM_package { EMC }

//@ model private static enum EM_private { EMD }

//@ model public static interface IM_public {  }

//@ model protected static interface IM_protected {  }

//@ model static interface IM_package {  }

//@ model private static interface IM_private {  }

//@ model public static @interface AM_public {  }

//@ model protected static @interface AM_protected {  }

//@ model static @interface AM_package {  }

//@ model private static @interface AM_private {  }

//@ ghost public int gs_public;

//@ ghost protected int gs_protected;

//@ ghost int gs_package;

//@ ghost private int gs_private;

//@ model public void qs_public() {};

//@ model protected void qs_protected() {}

//@ model void qs_package() {}

//@ model private void qs_private() {}

//@ model public SVis(Object o) {}

//@ model protected SVis(float i) {}

//@ model SVis(float i, float j) {}

//@ model private SVis(float i, float j, float k) {}

//@ model public static class Ds_public {}

//@ model protected static class Ds_protected {}

//@ model static class Ds_package {}

//@ model private static class Ds_private {}

//@ model public static enum EMs_public { EMAs }

//@ model protected static enum EMs_protected { EMBs }

//@ model static enum EMs_package { EMCs }

//@ model private static enum EMs_private { EMDs }

//@ model public static interface IMs_public {  }

//@ model protected static interface IMs_protected {  }

//@ model static interface IMs_package {  }

//@ model private static interface IMs_private {  }

//@ model public static @interface AMs_public {  }

//@ model protected static @interface AMs_protected {  }

//@ model static @interface AMs_package {  }

//@ model private static @interface AMs_private {  }

//@ ghost public int g_public;

//@ ghost protected int g_protected;

//@ ghost int g_package;

//@ ghost private int g_private;

//@ model public void q_public() {};

//@ model protected void q_protected() {}

//@ model void q_package() {}

//@ model private void q_private() {}

//@ model public Vis(Object o) {}

//@ model protected Vis(float i) {}

//@ model Vis(float i, float j) {}

//@ model private Vis(float i, float j, float k) {}

//@ model public static class D_public {}

//@ model protected static class D_protected {}

//@ model static class D_package {}

//@ model private static class D_private {}

//@ model public static enum EM_public { EMA }

//@ model protected static enum EM_protected { EMB }

//@ model static enum EM_package { EMC }

//@ model private static enum EM_private { EMD }

//@ model public static interface IM_public {  }

//@ model protected static interface IM_protected {  }

//@ model static interface IM_package {  }

//@ model private static interface IM_private {  }

//@ model public static @interface AM_public {  }

//@ model protected static @interface AM_protected {  }

//@ model static @interface AM_package {  }

//@ model private static @interface AM_private {  }

//@ ghost public int gs_public;

//@ ghost protected int gs_protected;

//@ ghost int gs_package;

//@ ghost private int gs_private;

//@ model public void qs_public() {};

//@ model protected void qs_protected() {}

//@ model void qs_package() {}

//@ model private void qs_private() {}

//@ model public SVis(Object o) {}

//@ model protected SVis(float i) {}

//@ model SVis(float i, float j) {}

//@ model private SVis(float i, float j, float k) {}

//@ model public static class Ds_public {}

//@ model protected static class Ds_protected {}

//@ model static class Ds_package {}

//@ model private static class Ds_private {}

//@ model public static enum EMs_public { EMAs }

//@ model protected static enum EMs_protected { EMBs }

//@ model static enum EMs_package { EMCs }

//@ model private static enum EMs_private { EMDs }

//@ model public static interface IMs_public {  }

//@ model protected static interface IMs_protected {  }

//@ model static interface IMs_package {  }

//@ model private static interface IMs_private {  }

//@ model public static @interface AMs_public {  }

//@ model protected static @interface AMs_protected {  }

//@ model static @interface AMs_package {  }

//@ model private static @interface AMs_private {  }

/*@ normal_behavior
	  @ requires x != null;
      @ requires x.length >= 1;
	  @  ensures \result == (\forall int k; 0<k && k<x.length; x[k-1] <= x[k]);
	  @*/
//@ loop_invariant 1 <= i && i <= x.length;

//@ loop_invariant result == (\forall int j; 1 <= j && j < i; x[j-1] <= x[j]);

//@ decreasing x.length - i;

/*@ normal_behavior
	  @ requires x >= 0;
	  @ ensures \result == x*(x+1)/2;
	  @*/
//@ assume i*(i+1)/2 == ((i-1)*i/2) + i;

//@ loop_invariant 1 <= i && i <= x + 1;

//@ loop_invariant i*(i+1)/2 == ((i-1)*i/2) + i;

//@ loop_invariant result == (i-1)*i/2;

//@ decreasing (x - i);

//@ assume i*(i+1)/2 == ((i-1)*i/2) + i;

/*@ normal_behavior
	  @ requires x != null;
	  @ ensures (\forall int i; 0 <= i && i < x.length; x[i] <= \result);
	 */
//@ requires x.length > 0;

//@ loop_invariant 1 <= i && i <= x.length;

//@ loop_invariant (\forall int j; 0 <= j && j < i; x[j] <= max);

//@ decreasing x.length - i;

/*@ normal_behavior
	  @ requires x != null;
      @ requires x.length >= 1;
	  @  ensures \result == (\forall int k; 0<k && k<x.length; x[k-1] <= x[k]);
	  @*/
//@ loop_invariant 1 <= i && i <= x.length;

//@ loop_invariant result == (\forall int j; 1 <= j && j < i; x[j-1] <= x[j]);

//@ decreasing x.length - i;

/*@ normal_behavior
	  @ requires x >= 0;
	  @ ensures \result == x*(x+1)/2;
	  @*/
//@ assume i*(i+1)/2 == ((i-1)*i/2) + i;

//@ loop_invariant 1 <= i && i <= x + 1;

//@ loop_invariant i*(i+1)/2 == ((i-1)*i/2) + i;

//@ loop_invariant result == (i-1)*i/2;

//@ decreasing (x - i);

//@ assume i*(i+1)/2 == ((i-1)*i/2) + i;

/*@ normal_behavior
	  @ requires x != null;
	  @ ensures (\forall int i; 0 <= i && i < x.length; x[i] <= \result);
	 */
//@ requires x.length > 0;

//@ loop_invariant 1 <= i && i <= x.length;

//@ loop_invariant (\forall int j; 0 <= j && j < i; x[j] <= max);

//@ decreasing x.length - i;

/*@ public model class MContents {
    public boolean foo() { return true; }
    }
    @*/
/*@ public static model class SMContents {
    public boolean foo() { return true; }
    }
    @*/
/*@ public model class MContents {
    public boolean foo() { return true; }
    }
    @*/
/*@ public static model class SMContents {
    public boolean foo() { return true; }
    }
    @*/
/*@ public model class MIndexedContents extends ModelClassExampleBug<E>.MContents {
          public boolean foo() { return false; }
        }

        public static model class SMIndexedContents extends ModelClassExampleBug<E>.SMContents { // ERROR
          public boolean foo() { return false; }
        }
    @*/
/*@ public model class MIndexedContents extends ModelClassExampleBug<E>.MContents {
          public boolean foo() { return false; }
        }

        public static model class SMIndexedContents extends ModelClassExampleBug<E>.SMContents { // ERROR
          public boolean foo() { return false; }
        }
    @*/
/*@
    public static model class Contents {
          public boolean foo() { return true; }
      }
    @*/
/*@
    public static model class Contents {
          public boolean foo() { return true; }
      }
    @*/
/*@
     public static model class IndexedContents extends NonGenericModelClassExampleBug.Contents {
          public boolean foo() { return false; }
     }
@*/
/*@
     public static model class IndexedContents extends NonGenericModelClassExampleBug.Contents {
          public boolean foo() { return false; }
     }
@*/
//@ old nullable Object o = oo;

//@ requires o != null;


//@ old Object o = oo;

//@ requires o != null;


//@ old nullable Object o = oo;

//@ requires o != null;


//@ old Object o = oo;

//@ requires o != null;


//@ public normal_behavior

//@   requires a.length > 100;

//@   requires i>=0 && i < 5;

//@   old int ii = 2*i;

//@   {|

//@     requires j >= 0 && j < 10;

//@   also

//@     requires j >= 0 && j < 10;

//@   |}

//@   old int iij = ii + j;

//@   assignable a[ii];

//@   ensures \result == iij;

//@ public normal_behavior

//@   requires a.length > 100;

//@   requires i>=0 && i < 5;

//@   old int ii = 2*i;

//@   {|

//@     requires j >= 0 && j < 10;

//@   also

//@     requires j >= 0 && j < 10;

//@   |}

//@   old int iij = ii + j;

//@   assignable a[ii];

//@   ensures \result == iij;

//@ public normal_behavior

//@   requires i >= 42;

//@   ensures \result == 420;

//@ public normal_behavior

//@   requires i >= 42;

//@   ensures \result == 420;

//@ also

//@   requires p >= 0;

//@   requires p >= 10;

//@   requires p >= 20;

//@ also

//@   requires p >= 5;

//@   requires p >= 15;

//@   requires p >= 25;

//@ also

//@   requires p >= 0;

//@   requires p >= 10;

//@   requires p >= 20;

//@ also

//@   requires p >= 5;

//@   requires p >= 15;

//@   requires p >= 25;

//@ also

//@   requires q >= 0 &&  q >= 10 && q >= 20;

//@ also

//@   requires q >= 5 && q >= 15 && q >= 25;

//@ also

//@   requires q >= 0 &&  q >= 10 && q >= 20;

//@ also

//@   requires q >= 5 && q >= 15 && q >= 25;

//@   requires r >= 5;

//@   {|

//@   requires r >= 10;

//@   requires r >= 20;

//@ also

//@   requires r >= 15;

//@   requires r >= 25;

//@   |}

//@   requires r >= 5;

//@   {|

//@   requires r >= 10;

//@   requires r >= 20;

//@ also

//@   requires r >= 15;

//@   requires r >= 25;

//@   |}

//@ also

//@   requires p >= 0;

//@   requires p >= 10;

//@   requires p >= 20;

//@ also

//@   requires p >= 5;

//@   requires p >= 15;

//@   requires p >= 25;








//@ also

//@   requires p >= 0;

//@   requires p >= 10;

//@   requires p >= 20;

//@ also

//@   requires p >= 5;

//@   requires p >= 15;

//@   requires p >= 25;








//@ also

//@   requires q >= 0 &&  q >= 10 && q >= 20;



//@ also

//@   requires q >= 0 &&  q >= 10 && q >= 20;



//@   requires r >= 5;

//@   {|

//@   requires r >= 10;

//@   requires r >= 20;

//@ also

//@   requires r >= 15;

//@   requires r >= 25;

//@   |}



//@   requires r >= 5;

//@   {|

//@   requires r >= 10;

//@   requires r >= 20;

//@ also

//@   requires r >= 15;

//@   requires r >= 25;

//@   |}



//@ public normal_behavior a:

//@  old int y = i + 2;

//@ also public normal_behavior b:

//@  old int x = i - 1;

//@  old int y = i + 1;

//@ requires x >= 0;

//@ assert i - 1 == \old(x,a);

//@ public normal_behavior a:

//@  old int y = i + 2;

//@ also public normal_behavior b:

//@  old int x = i - 1;

//@  old int y = i + 1;

//@ requires x >= 0;

//@ assert i - 1 == \old(x,a);

//@ public normal_behavior a:

//@  old int y = i + 2;

//@ also public normal_behavior b:

//@ old int x = i - 1;

//@ old int y = i + 1;

//@ requires x >= 0;

//@ assert i - 1 == \old(x,b);

//@ assert \old(y,b) == i + 1;

//@ assert \old(y,a) == i + 2;

//@ public normal_behavior a:

//@   requires b;

//@   old int x = i + 1;

//@ also public normal_behavior b:

//@   requires !b;

//@   old int x = i -1;

//@ assert \old(x,a) == i + 1;

//@ assert \old(x,b) == i - 1;

//@ public normal_behavior a:

//@   requires b;

//@   old int x = i + 1;

//@ also public normal_behavior b:

//@   requires !b;

//@   old int x = i -1;

//@ assert \old(x,a) == i + 1;

//@ assert \old(x,b) == i - 1;

//@ public normal_behavior a:

//@   requires b;

//@   old int x = i + 1;

//@ also public normal_behavior b:

//@   requires !b;

//@   old int x = i -1;

//@ assert \old(x,a) == i + 1;

//@ assert \old(x,b) == i - 1;

//@ public normal_behavior a:

//@  old int y = i + 2;

//@ also public normal_behavior b:

//@ old int x = i - 1;

//@ old int y = i + 1;

//@ requires x >= 0;

//@ assert i - 1 == \old(x,b);

//@ assert \old(y,b) == i + 1;

//@ assert \old(y,a) == i + 2;

//@ public normal_behavior a:

//@   requires b;

//@   old int x = i + 1;

//@ also public normal_behavior b:

//@   requires !b;

//@   old int x = i -1;

//@ assert \old(x,a) == i + 1;

//@ assert \old(x,b) == i - 1;

//@ public normal_behavior a:

//@   requires b;

//@   old int x = i + 1;

//@ also public normal_behavior b:

//@   requires !b;

//@   old int x = i -1;

//@ assert \old(x,a) == i + 1;

//@ assert \old(x,b) == i - 1;

//@ public normal_behavior a:

//@   requires b;

//@   old int x = i + 1;

//@ also public normal_behavior b:

//@   requires !b;

//@   old int x = i -1;

//@ assert \old(x,a) == i + 1;

//@ assert \old(x,b) == i - 1;

//@ pure

//@ invariant i + 2 * 3 - 4 / 5 + 6 % i + (i << 5) + (i >> 6) + (i >>> i) == -10;

//@ invariant i > 0 && i < 0 && i == 0 && (i <= +10 ? i >= 0 : i != 0);

//@ invariant b || !b && (b ==> b) && ( b <==> b ) && ( b <=!=> b ) && (b <== b);

//@ invariant (i & 1) + (i ^ 1) + (i | 1) + (~i) == 0;

//@ invariant \type(int) <: \typeof(o);

//@ invariant \type(int) <#= \typeof(o);

//@ invariant \type(int) <# \typeof(o);

//@ invariant o instanceof java.lang.String;

//@ invariant true && false && (i == 10.0) && (i < -10e4) && (i > +.4e+5) && (i > +.4e+50);

//@ invariant "asd" != (Object)null && 'c' != 'd' && 'a' != '\045' && "45" != "    \"'\034";

//@ invariant (int)9 == 9 && (char)3 == 'd' && (float)4 == (double)5 && (short)1 == (byte)(-1) && (long)-13 == -12;

//@ invariant (new int[]{1,2,3}).length == 3 && (new int[]{1,2,3})[0] == 1 && a[3] == 6;

//@ invariant (new PP()).i == 0;

//@ invariant (\forall int i; i != 0) && (\forall int k; k > 0; k >-1);

//@ invariant (\exists int i; i != 0) && (\exists int k; k > 0; k >-1);

//@ invariant (    um_of int i; i == 0) == (    um_of int k; k > 0; k >-1);

//@ invariant (\max int i; i>0 && i<10; i ) == (\min int i; i>0 && i<10; i );

//@ invariant (\sum int i; i>0 && i<10; i ) == (\product int i; i>0 && i<10; i );

//@ invariant this.i == 0 && super.bb() && PP.class != null;

//@ invariant (* informal predicate *) && false && m() == 0 && 0==mq(1,false,new Object());

//@ invariant \is_initialized(PP);

//@ invariant \is_initialized(Integer);

//@ invariant \invariant_for(o);

//@ invariant (\lblpos A true);

//@ invariant (\lblneg A true);

//@ invariant (\lbl A true);

//@ invariant ! \reach(o).isEmpty();

//@ invariant \reach(o) != null;

//@ invariant (new PP() { int m() { return 5; } }) != null;

//@ invariant new JMLSetType { Integer o | list.contains(o) && o > 0 } != null;

//@ constraint i >= \old(i);

//@ axiom true;

//@ initially true;

//@ readable i if true;

//@ writable i if true;

//@ monitors_for i = o;

//@ public invariant false;

//@ public constraint i >= \old(i);

//@ public initially true;

//@ public readable i if true;

//@ public writable i if true;

//@ public monitors_for i = o;

//@ model int modelM;

//@ represents modelM = 20;

//@ model int modelMZ;

//@ private represents modelMZ = 20;

//@ model int modelM2; in modelM;

//@ ensures \result > 0 && !     onnullelements(a) && \elemtype(\typeof(a)) == \type(int);

//@ ensures \duration(m()) > 0 && \space(o) > 0 && \working_space(m()) > 0;

//@ ensures \fresh(a) && \fresh(a,o);

//@ ensures \max(\lockset) == a;

//@ ensures \max(\lockset).hashCode() != 0;

//@ ensures     ot_modified(i,o);

//@ ensures     ot_modified(a[1 ..*]);

//@ ensures     ot_assigned(    othing) || \only_accessed(    othing) || \only_captured(    othing) || \only_assigned(    othing);

//@ ensures     ot_assigned(\everything) || \only_accessed(\everything) || \only_captured(\everything) || \only_assigned(\everything);

//@ ensures     ot_assigned(i) || \only_accessed(i) || \only_captured(i) || \only_assigned(i);

//@ ensures     ot_assigned(i,a[1 ..*]) || \only_accessed(i,a[1 ..]) || \only_captured(i,a[*]) || \only_assigned(i,o.*);

//@ ensures     ot_assigned(    ot_specified) || \only_accessed(    ot_specified) || \only_captured(    ot_specified) || \only_assigned(    ot_specified);

//@ requires \same;

//@ requires true; pre true;

//@ ensures false; post true;

//@ signals (Exception e) true; exsures (Exception) false;

//@ signals_only Exception;

//@ diverges true;

//@ modifies i;

//@ assignable     othing;

//@ assignable p.i,p.*,this.*,super.*,PP.*;

//@ modifiable i,o,a,a[*],a[1],a[1 .. 2],a[1 ..],a[1 ..*];

//@ assignable \everything;

//@ accessible     othing;

//@ accessible \everything;

//@ accessible i, PP.*;

//@ callable     othing;

//@ callable \everything;

//@ callable m, mq, mq(int, boolean, Object), bb, super.bb, o.m();  // FIXME _ more?

//@ measured_by 10;

//@ measured_by 20 if false;

//@ captures i, a[*];

//@ captures     othing;

//@ captures \everything;

//@ duration 0;

//@ duration 0 if true;

//@ working_space 0;

//@ working_space 0 if true;

//@ when false;

//@ signals_only Exception, java.lang.RuntimeException;

//@ signals_only     othing;

//@ requires     ot_specified;

//@ ensures     ot_specified;

//@ diverges     ot_specified;

//@ signals (Exception)     ot_specified;

//@ assignable     ot_specified;

//@ accessible     ot_specified;

//@ callable     ot_specified;

//@ when     ot_specified;

//@ measured_by     ot_specified;

//@ duration     ot_specified;

//@ working_space     ot_specified;

//@ captures     ot_specified;

//@ maps p.i \into modelM;

/*@ public normal_behavior
    @      requires true;
    @      {|
    @          ensures false;
    @          diverges true;
    @      also
    @          ensures true;
    @          diverges true;
    @      |}
    @  also protected exceptional_behavior
    @       forall Object o;
    @       old int j = k+1;
    @      requires false;
    @      signals (Exception) true;
    @  also code behavior
    @      requires false;
    @      signals (Exception) true;
    @  also private code model_program {
        }
    @  also model_program {
            int x = 0;
            x++;
            ++x;
            x--;
            --x;
            x = 1;
            x += 1;
            x -= 1;
            x *= 1;
            x /= 1;
            x %= 1;
            x <<= 1;
            x >>= 1;
            x >>>=1 ;
            x |= 1;
            x &= 1;
            x ^= 1;
            if (true) x = 1;
            if (true) { x = 1; } else { x = 2; }
            while (true) { x = 1; if (x == 2) continue; if (x == 3) break; }
            do x = 1; while (true);
            switch (x) { case 1: x=2; break; default: x=3; }
            ;
            assume true;
            assert true;
            choose { x = 1; } or { x = 2; }
            choose_if { x = 1; } or { x = 2; } else { x = 3; }
            behavior requires true; ensures false;
            abrupt_behavior requires false; continues true; breaks true; returns true;
            invariant false;

            // FIXME - add loop invariants, refining statements, try catch finally blocks,
            // model programs do not need: set, debug, ghost decls
    @  }
   */
//@ requires i > 0;

//@ requires i > 0;

//@ requires i > 0;

//@ requires i > 0;

//@ model public void mq0(int i) {}

//@ model public void mq1(int i) {}

//@ model public void mq2(int i) {}

//@ model public void mq3(int i) {}

//@ requires i > 0;

//@ model public void mq4(int i) {}

//@ requires i > 0;

//@ model public void mq5(int i) {}

//@ requires i > 0;

//@ model public void mq6(int i) {}

//@ requires i > 0;

//@ model public void mq7(int i) {}

//@ requires i > 0;

//@ model public void mmq5(int i) {}

//@ requires i > 0;

//@ model public void mmq6(int i) {}

//@ requires i > 0;

//@ model public void mmq7(int i) {}

//@ pure

//@ invariant i + 2 * 3 - 4 / 5 + 6 % i + (i << 5) + (i >> 6) + (i >>> i) == -10;

//@ invariant i > 0 && i < 0 && i == 0 && (i <= +10 ? i >= 0 : i != 0);

//@ invariant b || !b && (b ==> b) && ( b <==> b ) && ( b <=!=> b ) && (b <== b);

//@ invariant (i & 1) + (i ^ 1) + (i | 1) + (~i) == 0;

//@ invariant \type(int) <: \typeof(o);

//@ invariant \type(int) <#= \typeof(o);

//@ invariant \type(int) <# \typeof(o);

//@ invariant o instanceof java.lang.String;

//@ invariant true && false && (i == 10.0) && (i < -10e4) && (i > +.4e+5) && (i > +.4e+50);

//@ invariant "asd" != (Object)null && 'c' != 'd' && 'a' != '\045' && "45" != "    \"'\034";

//@ invariant (int)9 == 9 && (char)3 == 'd' && (float)4 == (double)5 && (short)1 == (byte)(-1) && (long)-13 == -12;

//@ invariant (new int[]{1,2,3}).length == 3 && (new int[]{1,2,3})[0] == 1 && a[3] == 6;

//@ invariant (new PP()).i == 0;

//@ invariant (\forall int i; i != 0) && (\forall int k; k > 0; k >-1);

//@ invariant (\exists int i; i != 0) && (\exists int k; k > 0; k >-1);

//@ invariant (    um_of int i; i == 0) == (    um_of int k; k > 0; k >-1);

//@ invariant (\max int i; i>0 && i<10; i ) == (\min int i; i>0 && i<10; i );

//@ invariant (\sum int i; i>0 && i<10; i ) == (\product int i; i>0 && i<10; i );

//@ invariant this.i == 0 && super.bb() && PP.class != null;

//@ invariant (* informal predicate *) && false && m() == 0 && 0==mq(1,false,new Object());

//@ invariant \is_initialized(PP);

//@ invariant \is_initialized(Integer);

//@ invariant \invariant_for(o);

//@ invariant (\lblpos A true);

//@ invariant (\lblneg A true);

//@ invariant (\lbl A true);

//@ invariant ! \reach(o).isEmpty();

//@ invariant \reach(o) != null;

//@ invariant (new PP() { int m() { return 5; } }) != null;

//@ invariant new JMLSetType { Integer o | list.contains(o) && o > 0 } != null;

//@ constraint i >= \old(i);

//@ axiom true;

//@ initially true;

//@ readable i if true;

//@ writable i if true;

//@ monitors_for i = o;

//@ public invariant false;

//@ public constraint i >= \old(i);

//@ public initially true;

//@ public readable i if true;

//@ public writable i if true;

//@ public monitors_for i = o;

//@ model int modelM;

//@ represents modelM = 20;

//@ model int modelMZ;

//@ private represents modelMZ = 20;

//@ model int modelM2; in modelM;

//@ ensures \result > 0 && !     onnullelements(a) && \elemtype(\typeof(a)) == \type(int);

//@ ensures \duration(m()) > 0 && \space(o) > 0 && \working_space(m()) > 0;

//@ ensures \fresh(a) && \fresh(a,o);

//@ ensures \max(\lockset) == a;

//@ ensures \max(\lockset).hashCode() != 0;

//@ ensures     ot_modified(i,o);

//@ ensures     ot_modified(a[1 ..*]);

//@ ensures     ot_assigned(    othing) || \only_accessed(    othing) || \only_captured(    othing) || \only_assigned(    othing);

//@ ensures     ot_assigned(\everything) || \only_accessed(\everything) || \only_captured(\everything) || \only_assigned(\everything);

//@ ensures     ot_assigned(i) || \only_accessed(i) || \only_captured(i) || \only_assigned(i);

//@ ensures     ot_assigned(i,a[1 ..*]) || \only_accessed(i,a[1 ..]) || \only_captured(i,a[*]) || \only_assigned(i,o.*);

//@ ensures     ot_assigned(    ot_specified) || \only_accessed(    ot_specified) || \only_captured(    ot_specified) || \only_assigned(    ot_specified);

//@ requires \same;

//@ requires true; pre true;

//@ ensures false; post true;

//@ signals (Exception e) true; exsures (Exception) false;

//@ signals_only Exception;

//@ diverges true;

//@ modifies i;

//@ assignable     othing;

//@ assignable p.i,p.*,this.*,super.*,PP.*;

//@ modifiable i,o,a,a[*],a[1],a[1 .. 2],a[1 ..],a[1 ..*];

//@ assignable \everything;

//@ accessible     othing;

//@ accessible \everything;

//@ accessible i, PP.*;

//@ callable     othing;

//@ callable \everything;

//@ callable m, mq, mq(int, boolean, Object), bb, super.bb, o.m();  // FIXME _ more?

//@ measured_by 10;

//@ measured_by 20 if false;

//@ captures i, a[*];

//@ captures     othing;

//@ captures \everything;

//@ duration 0;

//@ duration 0 if true;

//@ working_space 0;

//@ working_space 0 if true;

//@ when false;

//@ signals_only Exception, java.lang.RuntimeException;

//@ signals_only     othing;

//@ requires     ot_specified;

//@ ensures     ot_specified;

//@ diverges     ot_specified;

//@ signals (Exception)     ot_specified;

//@ assignable     ot_specified;

//@ accessible     ot_specified;

//@ callable     ot_specified;

//@ when     ot_specified;

//@ measured_by     ot_specified;

//@ duration     ot_specified;

//@ working_space     ot_specified;

//@ captures     ot_specified;

//@ maps p.i \into modelM;

/*@ public normal_behavior
    @      requires true;
    @      {|
    @          ensures false;
    @          diverges true;
    @      also
    @          ensures true;
    @          diverges true;
    @      |}
    @  also protected exceptional_behavior
    @       forall Object o;
    @       old int j = k+1;
    @      requires false;
    @      signals (Exception) true;
    @  also code behavior
    @      requires false;
    @      signals (Exception) true;
    @  also private code model_program {
        }
    @  also model_program {
            int x = 0;
            x++;
            ++x;
            x--;
            --x;
            x = 1;
            x += 1;
            x -= 1;
            x *= 1;
            x /= 1;
            x %= 1;
            x <<= 1;
            x >>= 1;
            x >>>=1 ;
            x |= 1;
            x &= 1;
            x ^= 1;
            if (true) x = 1;
            if (true) { x = 1; } else { x = 2; }
            while (true) { x = 1; if (x == 2) continue; if (x == 3) break; }
            do x = 1; while (true);
            switch (x) { case 1: x=2; break; default: x=3; }
            ;
            assume true;
            assert true;
            choose { x = 1; } or { x = 2; }
            choose_if { x = 1; } or { x = 2; } else { x = 3; }
            behavior requires true; ensures false;
            abrupt_behavior requires false; continues true; breaks true; returns true;
            invariant false;

            // FIXME - add loop invariants, refining statements, try catch finally blocks,
            // model programs do not need: set, debug, ghost decls
    @  }
   */
//@ requires i > 0;

//@ requires i > 0;

//@ requires i > 0;

//@ requires i > 0;

//@ model public void mq0(int i) {}

//@ model public void mq1(int i) {}

//@ model public void mq2(int i) {}

//@ model public void mq3(int i) {}

//@ requires i > 0;

//@ model public void mq4(int i) {}

//@ requires i > 0;

//@ model public void mq5(int i) {}

//@ requires i > 0;

//@ model public void mq6(int i) {}

//@ requires i > 0;

//@ model public void mq7(int i) {}

//@ requires i > 0;

//@ model public void mmq5(int i) {}

//@ requires i > 0;

//@ model public void mmq6(int i) {}

//@ requires i > 0;

//@ model public void mmq7(int i) {}

//@ pure

//@ invariant i + 2 * 3 - 4 / 5 + 6 % i + (i << 5) + (i >> 6) + (i >>> i) == -10;

//@ invariant i > 0 && i < 0 && i == 0 && (i <= +10 ? i >= 0 : i != 0);

//@ invariant b || !b && (b ==> b) && ( b <==> b ) && ( b <=!=> b ) && (b <== b);

//@ invariant (i & 1) + (i ^ 1) + (i | 1) + (~i) == 0;

//@ invariant \type(int) <: \typeof(o);

//@ invariant \type(int) <#= \typeof(o);

//@ invariant \type(int) <# \typeof(o);

//@ invariant o instanceof java.lang.String;

//@ invariant true && false && (i == 10.0) && (i < -10e4) && (i > +.4e+5) && (i > +.4e+50);

//@ invariant "asd" != (Object)null && 'c' != 'd' && 'a' != '\045' && "45" != "    \"'\034";

//@ invariant (int)9 == 9 && (char)3 == 'd' && (float)4 == (double)5 && (short)1 == (byte)(-1) && (long)-13 == -12;

//@ invariant (new int[]{1,2,3}).length == 3 && (new int[]{1,2,3})[0] == 1 && a[3] == 6;

//@ invariant (new PP()).i == 0;

//@ invariant (\forall int i; i != 0) && (\forall int k; k > 0; k >-1);

//@ invariant (\exists int i; i != 0) && (\exists int k; k > 0; k >-1);

//@ invariant (    um_of int i; i == 0) == (    um_of int k; k > 0; k >-1);

//@ invariant (\max int i; i>0 && i<10; i ) == (\min int i; i>0 && i<10; i );

//@ invariant (\sum int i; i>0 && i<10; i ) == (\product int i; i>0 && i<10; i );

//@ invariant this.i == 0 && super.bb() && PP.class != null;

//@ invariant (* informal predicate *) && false && m() == 0 && 0==mq(1,false,new Object());

//@ invariant \is_initialized(PP);

//@ invariant \is_initialized(Integer);

//@ invariant \invariant_for(o);

//@ invariant (\lblpos A true);

//@ invariant (\lblneg A true);

//@ invariant (\lbl A true);

//@ invariant ! \reach(o).isEmpty();

//@ invariant \reach(o) != null;

//@ invariant (new PP() { int m() { return 5; } }) != null;

//@ invariant new JMLSetType { Integer o | list.contains(o) && o > 0 } != null;

//@ constraint i >= \old(i);

//@ axiom true;

//@ initially true;

//@ readable i if true;

//@ writable i if true;

//@ monitors_for i = o;

//@ public invariant false;

//@ public constraint i >= \old(i);

//@ public initially true;

//@ public readable i if true;

//@ public writable i if true;

//@ public monitors_for i = o;

//@ model int modelM;

//@ represents modelM = 20;

//@ model int modelMZ;

//@ private represents modelMZ = 20;

//@ model int modelM2; in modelM;

//@ ensures \result > 0 && !     onnullelements(a) && \elemtype(\typeof(a)) == \type(int);

//@ ensures \duration(m()) > 0 && \space(o) > 0 && \working_space(m()) > 0;

//@ ensures \fresh(a) && \fresh(a,o);

//@ ensures \max(\lockset) == a;

//@ ensures \max(\lockset).hashCode() != 0;

//@ ensures     ot_modified(i,o);

//@ ensures     ot_modified(a[1 ..*]);

//@ ensures     ot_assigned(    othing) || \only_accessed(    othing) || \only_captured(    othing) || \only_assigned(    othing);

//@ ensures     ot_assigned(\everything) || \only_accessed(\everything) || \only_captured(\everything) || \only_assigned(\everything);

//@ ensures     ot_assigned(i) || \only_accessed(i) || \only_captured(i) || \only_assigned(i);

//@ ensures     ot_assigned(i,a[1 ..*]) || \only_accessed(i,a[1 ..]) || \only_captured(i,a[*]) || \only_assigned(i,o.*);

//@ ensures     ot_assigned(    ot_specified) || \only_accessed(    ot_specified) || \only_captured(    ot_specified) || \only_assigned(    ot_specified);

//@ requires \same;

//@ requires true; pre true;

//@ ensures false; post true;

//@ signals (Exception e) true; exsures (Exception) false;

//@ signals_only Exception;

//@ diverges true;

//@ modifies i;

//@ assignable     othing;

//@ assignable p.i,p.*,this.*,super.*,PP.*;

//@ modifiable i,o,a,a[*],a[1],a[1 .. 2],a[1 ..],a[1 ..*];

//@ assignable \everything;

//@ accessible     othing;

//@ accessible \everything;

//@ accessible i, PP.*;

//@ callable     othing;

//@ callable \everything;

//@ callable m, mq, mq(int, boolean, Object), bb, super.bb, o.m();  // FIXME _ more?

//@ measured_by 10;

//@ measured_by 20 if false;

//@ captures i, a[*];

//@ captures     othing;

//@ captures \everything;

//@ duration 0;

//@ duration 0 if true;

//@ working_space 0;

//@ working_space 0 if true;

//@ when false;

//@ signals_only Exception, java.lang.RuntimeException;

//@ signals_only     othing;

//@ requires     ot_specified;

//@ ensures     ot_specified;

//@ diverges     ot_specified;

//@ signals (Exception)     ot_specified;

//@ assignable     ot_specified;

//@ accessible     ot_specified;

//@ callable     ot_specified;

//@ when     ot_specified;

//@ measured_by     ot_specified;

//@ duration     ot_specified;

//@ working_space     ot_specified;

//@ captures     ot_specified;

//@ maps p.i \into modelM;

/*@ public normal_behavior
    @      requires true;
    @      {|
    @          ensures false;
    @          diverges true;
    @      also
    @          ensures true;
    @          diverges true;
    @      |}
    @  also protected exceptional_behavior
    @       forall Object o;
    @       old int j = k+1;
    @      requires false;
    @      signals (Exception) true;
    @  also code behavior
    @      requires false;
    @      signals (Exception) true;
    @  also private code model_program {
        }
    @  also model_program {
            int x = 0;
            x++;
            ++x;
            x--;
            --x;
            x = 1;
            x += 1;
            x -= 1;
            x *= 1;
            x /= 1;
            x %= 1;
            x <<= 1;
            x >>= 1;
            x >>>=1 ;
            x |= 1;
            x &= 1;
            x ^= 1;
            if (true) x = 1;
            if (true) { x = 1; } else { x = 2; }
            while (true) { x = 1; if (x == 2) continue; if (x == 3) break; }
            do x = 1; while (true);
            switch (x) { case 1: x=2; break; default: x=3; }
            ;
            assume true;
            assert true;
            choose { x = 1; } or { x = 2; }
            choose_if { x = 1; } or { x = 2; } else { x = 3; }
            behavior requires true; ensures false;
            abrupt_behavior requires false; continues true; breaks true; returns true;
            invariant false;

            // FIXME - add loop invariants, refining statements, try catch finally blocks,
            // model programs do not need: set, debug, ghost decls
    @  }
   */
//@ requires i > 0;

//@ requires i > 0;

//@ requires i > 0;

//@ requires i > 0;

//@ model public void mq0(int i) {}

//@ model public void mq1(int i) {}

//@ model public void mq2(int i) {}

//@ model public void mq3(int i) {}

//@ requires i > 0;

//@ model public void mq4(int i) {}

//@ requires i > 0;

//@ model public void mq5(int i) {}

//@ requires i > 0;

//@ model public void mq6(int i) {}

//@ requires i > 0;

//@ model public void mq7(int i) {}

//@ requires i > 0;

//@ model public void mmq5(int i) {}

//@ requires i > 0;

//@ model public void mmq6(int i) {}

//@ requires i > 0;

//@ model public void mmq7(int i) {}

/*@ spec_public nullable@*/
//@ requires n >= 1;

//@ assignable primeArray;

//@ ensures primeArray != null;

//@ ensures primeArray.length == n;

//@ ensures (\forall int i, j; i >= 0 && i < primeArray.length && j >= 2 && j <= primeArray[i]/2; primeArray[i]%j != 0);

//@ ghost int maxnumber = Integer.MAX_VALUE;

//@ maintaining 2 <= count <= n + 1;

//@ maintaining primeArray[count-2] < num <= maxnumber;

//@ maintaining status == 1;

//@ maintaining (\forall int i, k; 0 <= i < count-1 && 2 <= k <= primeArray[i]/2; primeArray[i]%k != 0);

//@ decreases maxnumber - num;

//@ split

//@ maintaining 2 <= j <= num/2 + 1;

//@ maintaining status != 0 && (\forall int jj; 2 <= jj <= j; num%jj != 0);

//@ decreases num - j;

//@ assert num%j == 0;

//@ assert num%j != 0;

//@ assert status != 0 ==> (\forall int jj; 2 <= jj <= num/2; num%jj != 0);

//@ assert status != 0;

//@ assert (\forall int i; 2 <= i <= num/2; num%i != 0);

//@ assume count == primeArray.length + 1;

/*@ spec_public nullable@*/
//@ requires n >= 1;

//@ assignable primeArray;

//@ ensures primeArray != null;

//@ ensures primeArray.length == n;

//@ ensures (\forall int i, j; i >= 0 && i < primeArray.length && j >= 2 && j <= primeArray[i]/2; primeArray[i]%j != 0);

//@ ghost int maxnumber = Integer.MAX_VALUE;

//@ maintaining 2 <= count <= n + 1;

//@ maintaining primeArray[count-2] < num <= maxnumber;

//@ maintaining status == 1;

//@ maintaining (\forall int i, k; 0 <= i < count-1 && 2 <= k <= primeArray[i]/2; primeArray[i]%k != 0);

//@ decreases maxnumber - num;

//@ split

//@ maintaining 2 <= j <= num/2 + 1;

//@ maintaining status != 0 && (\forall int jj; 2 <= jj <= j; num%jj != 0);

//@ decreases num - j;

//@ assert num%j == 0;

//@ assert num%j != 0;

//@ assert status != 0 ==> (\forall int jj; 2 <= jj <= num/2; num%jj != 0);

//@ assert status != 0;

//@ assert (\forall int i; 2 <= i <= num/2; num%i != 0);

//@ assume count == primeArray.length + 1;

//@ pure immutable nullable_by_default

//@ axiom (\forall T t;; !testcol.<T>empty().contains(t));

//@ axiom (\forall testcol<T> c; (\forall T t;; c.add(t).contains(t)));

//@ axiom (\forall testcol<T> c; (\forall T t, tt; t != tt; c.add(t).contains(tt) == c.contains(tt)));

//@ model public \bigint size;

//@ public normal_behavior

//@   ensures \result.size() == 0;

//@ skipesc

//@ model public static <S> testcol<S> empty();

//@ public normal_behavior

//@   ensures \result == size;

//@ helper function

//@ model abstract public \bigint size();

//@ public normal_behavior

//@   ensures \result.size == \old(size) + 1;

//@ helper function

//@ public normal_behavior

//@ helper function

//@ ensures (testcol.<X>empty().size() == 0);

//@ ensures c.add(x).add(xx).contains(x);

//@ ghost testtype tt = t;

//@ assert tt.suc() == t.suc();

//@ pure immutable nullable_by_default

//@ axiom (\forall T t;; !testcol.<T>empty().contains(t));

//@ axiom (\forall testcol<T> c; (\forall T t;; c.add(t).contains(t)));

//@ axiom (\forall testcol<T> c; (\forall T t, tt; t != tt; c.add(t).contains(tt) == c.contains(tt)));

//@ model public \bigint size;

//@ public normal_behavior

//@   ensures \result.size() == 0;

//@ skipesc

//@ model public static <S> testcol<S> empty();

//@ public normal_behavior

//@   ensures \result == size;

//@ helper function

//@ model abstract public \bigint size();

//@ public normal_behavior

//@   ensures \result.size == \old(size) + 1;

//@ helper function

//@ public normal_behavior

//@ helper function

//@ ensures (testcol.<X>empty().size() == 0);

//@ ensures c.add(x).add(xx).contains(x);

//@ ghost testtype tt = t;

//@ assert tt.suc() == t.suc();

//@ pure immutable nullable_by_default

//@ axiom (\forall testtype t;; t.suc().prev() == t);

//@ skipesc

//@ ensures \result == zero;

//@ helper function

//@ ensures \result != this;

//@ helper function

//@ ensures \result != this;

//@ helper function

//@ ensures t.suc() != t;

//@ ensures t.suc().prev() == t;

//@ ghost testtype tt = t;

//@ assert tt.suc() == t.suc();

//@ pure immutable nullable_by_default

//@ axiom (\forall testtype t;; t.suc().prev() == t);

//@ skipesc

//@ ensures \result == zero;

//@ helper function

//@ ensures \result != this;

//@ helper function

//@ ensures \result != this;

//@ helper function

//@ ensures t.suc() != t;

//@ ensures t.suc().prev() == t;

//@ ghost testtype tt = t;

//@ assert tt.suc() == t.suc();

//@ ghost \TYPE t = \elemtype(\typeof(a));

//@ assert (\lbl TY t) == \type(LinkedList<Boolean>);

//@ assert (\lbl TY2 \typeof(k)) == \type(int);

//@ set  t = (\lbl TY3 \elemtype(\typeof(k)));

//@ set  t = (\lbl TY4 \elemtype(\typeof(o)));

//@ ghost \TYPE t = \elemtype(\typeof(a));

//@ assert (\lbl TY t) == \type(LinkedList<Boolean>);

//@ assert (\lbl TY2 \typeof(k)) == \type(int);

//@ set  t = (\lbl TY3 \elemtype(\typeof(k)));

//@ set  t = (\lbl TY4 \elemtype(\typeof(o)));

//@ public invariant x() + y() > 0;

/*@ spec_public */
/*@ spec_public */
//@ requires the_x + the_y > 0;

//@ ensures x() == the_x && y() == the_y;

//@ ensures \result == my_x;

/*@ pure helper @*/
//@ ensures \result == my_y;

/*@ pure helper @*/
//@ ensures \result == x() + y() + the_operand;

/*@ pure @*/
//@ public invariant x() + y() > 0;

/*@ spec_public */
/*@ spec_public */
//@ requires the_x + the_y > 0;

//@ ensures x() == the_x && y() == the_y;

//@ ensures \result == my_x;

/*@ pure helper @*/
//@ ensures \result == my_y;

/*@ pure helper @*/
//@ ensures \result == x() + y() + the_operand;

/*@ pure @*/
//@ ghost \bigint b = 20;

//@ ghost \bigint bb = -b;

//@ ghost \bigint zero = 0;

//@ ghost \bigint prod = -400;

//@ assert b + bb == zero;

//@ assert b * bb == prod;

//@ assert b + 0 == b;

//@ assert b > 0;

//@ assert zero == 0L;

//@ set zero = 0L;

//@ assert zero >= 0;

//@ assert 0L + b == b;

//@ assert b * (short)0 == zero;

//@ ghost int i = (int)b;

//@ ghost long l = (long)b;

//@ assert b == zero;

//@ ghost BigInteger bi = bb;

//@ ghost \bigint bbb = bi;

//@ assert bbb == bb;

//@ set bbb = prod + bi;

//@ assert (\lbl BBB bbb) == -420;

//@ ghost \bigint x = new BigInteger("123456789012345678901234567890");

//@ ghost \bigint xx = (\lbl XX x*10);

//@ set bb = bb / zero;

//@ set prod = prod / 0;

//@ set i += 1;

//@ set ++i;

//@ set bbb += 1;

//@ set ++bbb;

//@ set bbb++;

//@ assert (\lbl BBB bbb) == -417;

//@ assert (\lbl TRUE bx != bxx);   // This is an object comparison

//@ ghost \bigint bix = bx;

//@ assert (\lbl TRUE bix == bxx);

//@ assert (\lbl TRUE ((\bigint)bx) == bxx);

//@ assert (\lbl TRUE bx == (\bigint)bxx);

//@ ghost \bigint b = 20;

//@ ghost \bigint bb = -b;

//@ ghost \bigint zero = 0;

//@ ghost \bigint prod = -400;

//@ assert b + bb == zero;

//@ assert b * bb == prod;

//@ assert b + 0 == b;

//@ assert b > 0;

//@ assert zero == 0L;

//@ set zero = 0L;

//@ assert zero >= 0;

//@ assert 0L + b == b;

//@ assert b * (short)0 == zero;

//@ ghost int i = (int)b;

//@ ghost long l = (long)b;

//@ assert b == zero;

//@ ghost BigInteger bi = bb;

//@ ghost \bigint bbb = bi;

//@ assert bbb == bb;

//@ set bbb = prod + bi;

//@ assert (\lbl BBB bbb) == -420;

//@ ghost \bigint x = new BigInteger("123456789012345678901234567890");

//@ ghost \bigint xx = (\lbl XX x*10);

//@ set bb = bb / zero;

//@ set prod = prod / 0;

//@ set i += 1;

//@ set ++i;

//@ set bbb += 1;

//@ set ++bbb;

//@ set bbb++;

//@ assert (\lbl BBB bbb) == -417;

//@ assert (\lbl TRUE bx != bxx);   // This is an object comparison

//@ ghost \bigint bix = bx;

//@ assert (\lbl TRUE bix == bxx);

//@ assert (\lbl TRUE ((\bigint)bx) == bxx);

//@ assert (\lbl TRUE bx == (\bigint)bxx);

//@ public invariant x() + y() > 0;

//@ requires the_x + the_y > 0;

//@ assignable \everything;

//@ ensures x() == the_x && y() == the_y;

/*@ pure @*/
/*@ pure @*/
//@ ensures \result == x() + y() + the_operand;

/*@ pure @*/
//@ public invariant x() + y() > 0;

//@ requires the_x + the_y > 0;

//@ assignable \everything;

//@ ensures x() == the_x && y() == the_y;

/*@ pure @*/
/*@ pure @*/
//@ ensures \result == x() + y() + the_operand;

/*@ pure @*/
//@ requires I1 >= 0 && I2>=0;

//@ ensures \result > 0.0;

//@ requires I2 > 0;

//@ ensures \result < 0;

//@ requires I1 > I2;

//@ ensures \result > 0;

//@ requires I1 > 0 && I2 > 0;

//@ ensures \result >0;

//@ requires I1 > 0 && I2 > 0;

//@ ensures \result > 0;

//@ requires I1 > 0 && I2 >= 0 ;

//@ ensures \result >0;

//@ requires I1 >= 0 && I2>=0;

//@ ensures \result > 0.0;

//@ requires I2 > 0;

//@ ensures \result < 0;

//@ requires I1 > I2;

//@ ensures \result > 0;

//@ requires I1 > 0 && I2 > 0;

//@ ensures \result >0;

//@ requires I1 > 0 && I2 > 0;

//@ ensures \result > 0;

//@ requires I1 > 0 && I2 >= 0 ;

//@ ensures \result >0;

/*@ normal_behavior
	  @ ensures \result == 42;
	  @*/
/*@ normal_behavior
	  @ ensures \result == 42;
	  @*/
/*@ spec_public */
//@ ensures \old(someArray[\result]) == 4;

//@ ensures \old(someArray[\result] + 2) == 6;

//@ ensures \old(someArray[\result])+ 2 == 6;

/*@ spec_public */
//@ ensures \old(someArray[\result]) == 4;

//@ ensures \old(someArray[\result] + 2) == 6;

//@ ensures \old(someArray[\result])+ 2 == 6;

/*@ requires the_system == CoordinateSystem.CARTESIAN |
               the_system == CoordinateSystem.POLAR; */
/*@ requires the_system == CoordinateSystem.POLAR ==>
                 0 <= coord_1 & 0 <= coord_2 & coord_2 < 2 * Math.PI; */
//@ requires isFinite(coord_1) & isFinite(coord_2);

/*@ ensures the_system == CoordinateSystem.CARTESIAN ==>
                x() == coord_1 & y() == coord_2; */
/*@ ensures the_system == CoordinateSystem.POLAR ==>
                approxEquals(rho(), coord_1) & approxEquals(theta(), coord_2); */
//@ ensures \result <==> Math.abs(number_1 - number_2) < ERROR_MARGIN;

/*@ pure */
/*@ ensures \result <==> the_number != Double.NEGATIVE_INFINITY &
                           the_number != Double.POSITIVE_INFINITY &
                           !Double.isNaN(the_number); */
/*@ pure */
/*@ pure */
/*@ pure */
/*@ pure */
/*@ pure */
/*@ pure */
/*@ requires the_system == CoordinateSystem.CARTESIAN |
               the_system == CoordinateSystem.POLAR; */
/*@ requires the_system == CoordinateSystem.POLAR ==>
                 0 <= coord_1 & 0 <= coord_2 & coord_2 < 2 * Math.PI; */
//@ requires isFinite(coord_1) & isFinite(coord_2);

/*@ ensures the_system == CoordinateSystem.CARTESIAN ==>
                x() == coord_1 & y() == coord_2; */
/*@ ensures the_system == CoordinateSystem.POLAR ==>
                approxEquals(rho(), coord_1) & approxEquals(theta(), coord_2); */
//@ ensures \result <==> Math.abs(number_1 - number_2) < ERROR_MARGIN;

/*@ pure */
/*@ ensures \result <==> the_number != Double.NEGATIVE_INFINITY &
                           the_number != Double.POSITIVE_INFINITY &
                           !Double.isNaN(the_number); */
/*@ pure */
/*@ pure */
/*@ pure */
/*@ pure */
/*@ pure */
/*@ pure */
/*@ requires the_system == CoordinateSystem.CARTESIAN |
               the_system == CoordinateSystem.POLAR; */
/*@ requires the_system == CoordinateSystem.POLAR ==>
                 0 <= coord_1 & 0 <= coord_2 & coord_2 < 2 * Math.PI; */
//@ requires isFinite(coord_1) & isFinite(coord_2);

/*@ ensures the_system == CoordinateSystem.CARTESIAN ==>
                x() == coord_1 & y() == coord_2; */
/*@ ensures the_system == CoordinateSystem.POLAR ==>
                approxEquals(rho(), coord_1) & approxEquals(theta(), coord_2); */
//@ ensures \result <==> Math.abs(number_1 - number_2) < ERROR_MARGIN;

/*@ pure */
/*@ ensures \result <==> the_number != Double.NEGATIVE_INFINITY &
                           the_number != Double.POSITIVE_INFINITY &
                           !Double.isNaN(the_number); */
/*@ pure */
/*@ pure */
/*@ pure */
/*@ pure */
/*@ pure */
/*@ pure */
/*@ requires the_system == CoordinateSystem.CARTESIAN |
               the_system == CoordinateSystem.POLAR; */
/*@ requires the_system == CoordinateSystem.POLAR ==>
                 0 <= coord_1 & 0 <= coord_2 & coord_2 < 2 * Math.PI; */
//@ requires isFinite(coord_1) & isFinite(coord_2);

/*@ ensures the_system == CoordinateSystem.CARTESIAN ==>
                x() == coord_1 & y() == coord_2; */
/*@ ensures the_system == CoordinateSystem.POLAR ==>
                approxEquals(rho(), coord_1) & approxEquals(theta(), coord_2); */
//@ ensures \result <==> Math.abs(number_1 - number_2) < ERROR_MARGIN;

/*@ pure */
/*@ ensures \result <==> the_number != Double.NEGATIVE_INFINITY &
                           the_number != Double.POSITIVE_INFINITY &
                           !Double.isNaN(the_number); */
/*@ pure */
/*@ pure */
/*@ pure */
/*@ pure */
/*@ pure */
/*@ pure */
//@ ghost \real b = 20;

//@ ghost \real bb = -b;

//@ ghost \real zero = 0;

//@ ghost \real prod = -400;

//@ assert b + bb == zero;

//@ assert b * bb == prod;

//@ assert b + 0 == b;

//@ assert b > 0;

//@ assert zero == 0L;

//@ set zero = 0L;

//@ assert zero >= 0;

//@ assert 0.0 + b == b;

//@ assert b * (double)0 == zero;

//@ ghost float i = (float)b;

//@ ghost double l = (double)b;

//@ assert b == zero;

//@ ghost Real bi = bb;

//@ ghost \real bbb = bi;

//@ assert bbb == bb;

//@ set bbb = prod + bi;

//@ assert (\lbl BBB bbb) == -420;

//@ ghost \real x = new Real(10.30);

//@ ghost \real xx = (\lbl XX x*10);

//@ set bb = bb / zero;

//@ set prod /= 0;

//@ set i += 1;

//@ set ++i;

//@ set bbb += 1;

//@ set ++bbb;

//@ set bbb++;

//@ assert (\lbl BBB bbb) == -417;

//@ ghost \real b = 20;

//@ ghost \real bb = -b;

//@ ghost \real zero = 0;

//@ ghost \real prod = -400;

//@ assert b + bb == zero;

//@ assert b * bb == prod;

//@ assert b + 0 == b;

//@ assert b > 0;

//@ assert zero == 0L;

//@ set zero = 0L;

//@ assert zero >= 0;

//@ assert 0.0 + b == b;

//@ assert b * (double)0 == zero;

//@ ghost float i = (float)b;

//@ ghost double l = (double)b;

//@ assert b == zero;

//@ ghost Real bi = bb;

//@ ghost \real bbb = bi;

//@ assert bbb == bb;

//@ set bbb = prod + bi;

//@ assert (\lbl BBB bbb) == -420;

//@ ghost \real x = new Real(10.30);

//@ ghost \real xx = (\lbl XX x*10);

//@ set bb = bb / zero;

//@ set prod /= 0;

//@ set i += 1;

//@ set ++i;

//@ set bbb += 1;

//@ set ++bbb;

//@ set bbb++;

//@ assert (\lbl BBB bbb) == -417;

/*@ spec_public @*/
/*@ public behaviour
	      @ requires 0 < l && l <= r && r < a.length;
	      @ assignable a[*];
	      @ ensures (\forall int i; l <= i && i < r; a[i] <= a[i + 1]);
	      @*/
/*@ loop_modifies a[*];
			  @ decreases right + 1 - left;
			  @ loop_invariant l <= k && k <= right;
			  @ loop_invariant l <= left && left <= right + 1 && right == r;
			  @ loop_invariant (\forall int i; l <= i && i < left; a[i] <= a[i + 1]);
			  @*/
/*@
		      @ loop_modifies a[*];
		      @ decreases k;
		      @ loop_invariant l <= k && k < r;
		      @ loop_invariant (\forall int i; l <= i && i < k-1; a[i] <= a[i + 1]);
		      @*/
/*@
		      @ loop_modifies a[*];
		      @ decreases k;
		      @ loop_invariant l <= k && k < r;
		      @ loop_invariant (\forall int i; l <= i && i < k-1; a[i] <= a[i + 1]);
		      @*/
/*@
		  @ loop_modifies a[*];
		  @ decreases right;
		  @ loop_invariant l <= right && right < r;
		  @ loop_invariant right <= left + 1;
		  @ loop_invariant (\forall int i; right <= i && i <= r; last <= a[i]);
		  @ loop_invariant (\forall int i; l <= i && i < right - 1; a[i] <= a[i + 1]);
		  @ loop_invariant (\forall int i; right < i && i < r-1; a[i] <= a[i + 1]);
		  @*/
/*@ spec_public @*/
/*@ public behaviour
	      @ requires 0 < l && l <= r && r < a.length;
	      @ assignable a[*];
	      @ ensures (\forall int i; l <= i && i < r; a[i] <= a[i + 1]);
	      @*/
/*@ loop_modifies a[*];
			  @ decreases right + 1 - left;
			  @ loop_invariant l <= k && k <= right;
			  @ loop_invariant l <= left && left <= right + 1 && right == r;
			  @ loop_invariant (\forall int i; l <= i && i < left; a[i] <= a[i + 1]);
			  @*/
/*@
		      @ loop_modifies a[*];
		      @ decreases k;
		      @ loop_invariant l <= k && k < r;
		      @ loop_invariant (\forall int i; l <= i && i < k-1; a[i] <= a[i + 1]);
		      @*/
/*@
		      @ loop_modifies a[*];
		      @ decreases k;
		      @ loop_invariant l <= k && k < r;
		      @ loop_invariant (\forall int i; l <= i && i < k-1; a[i] <= a[i + 1]);
		      @*/
/*@
		  @ loop_modifies a[*];
		  @ decreases right;
		  @ loop_invariant l <= right && right < r;
		  @ loop_invariant right <= left + 1;
		  @ loop_invariant (\forall int i; right <= i && i <= r; last <= a[i]);
		  @ loop_invariant (\forall int i; l <= i && i < right - 1; a[i] <= a[i + 1]);
		  @ loop_invariant (\forall int i; right < i && i < r-1; a[i] <= a[i + 1]);
		  @*/
/*@ public normal_behaviour
	    requires 0 <= i && i < a.length;
	    requires 0 <= j && j < a.length;
	    ensures \old(a[i]) == a[j];
	    ensures \old(a[j]) == a[i];
	    assignable a[i], a[j];
	    @*/
/*@ public normal_behaviour
		    ensures (\forall int j; 0 <= j && j < a.length-1; a[j] <= a[j+1]);
		    diverges true;
		@*/
/*@
				  @ loop_modifies a[*];
				  @ loop_invariant 1 <= j && (j <= a.length || a.length == 0);
				  @ loop_invariant sorted ==> (\forall int i; 0 <= i && 1 + 2 * i < j; a[2*i+1] <= a[2*i+2]);

				 @*/
/*@ public normal_behaviour
	    requires 0 <= i && i < a.length;
	    requires 0 <= j && j < a.length;
	    ensures \old(a[i]) == a[j];
	    ensures \old(a[j]) == a[i];
	    assignable a[i], a[j];
	    @*/
/*@ public normal_behaviour
		    ensures (\forall int j; 0 <= j && j < a.length-1; a[j] <= a[j+1]);
		    diverges true;
		@*/
/*@
				  @ loop_modifies a[*];
				  @ loop_invariant 1 <= j && (j <= a.length || a.length == 0);
				  @ loop_invariant sorted ==> (\forall int i; 0 <= i && 1 + 2 * i < j; a[2*i+1] <= a[2*i+2]);

				 @*/
//@ begin

//@ end

//@ refining ensures true;

//@ begin

//@ refining ensures true;

//@ end

//@ refining ensures true;

//@ begin

//@ end

//@ refining ensures true;

//@ begin

//@ refining ensures true;

//@ end

//@ refining ensures true;

//@ requires 0 <= i <= 100;

//@ ensures \result >= 11;

//@ refining

//@ assignable j;

//@ ensures j >= 11; // OK

//@ begin

//@ end

//@ requires 0 <= i <= 100;

//@ ensures \result >= 12;

//@ refining

//@ assignable j;

//@ ensures j >= 11;  // ERROR

//@ requires 0 <= i <= 100;

//@ ensures \result >= 11;

//@ refining : j;

//@ assignable j;

//@ ensures j >= 11; // OK

//@ begin

//@ end

//@ requires 0 <= i <= 100;

//@ ensures \result >= 11;

//@ refining : j;

//@ assignable j;

//@ ensures j >= 11;

//@ begin

//@ end

//@ public normal_behavior

//@   ensures \fresh(\result);

//@ refining : o;

//@  ensures \fresh(o);

//@ begin

//@ end

//@ assert o != null;

//@ public normal_behavior

//@   ensures \fresh(\result);

//@ pure

//@ requires 0 <= i <= 100;

//@ ensures \result >= 11;

//@ refining

//@ assignable j;

//@ ensures j >= 11; // OK

//@ begin

//@ end

//@ requires 0 <= i <= 100;

//@ ensures \result >= 12;

//@ refining

//@ assignable j;

//@ ensures j >= 11;  // ERROR

//@ requires 0 <= i <= 100;

//@ ensures \result >= 11;

//@ refining : j;

//@ assignable j;

//@ ensures j >= 11; // OK

//@ begin

//@ end

//@ requires 0 <= i <= 100;

//@ ensures \result >= 11;

//@ refining : j;

//@ assignable j;

//@ ensures j >= 11;

//@ begin

//@ end

//@ public normal_behavior

//@   ensures \fresh(\result);

//@ refining : o;

//@  ensures \fresh(o);

//@ begin

//@ end

//@ assert o != null;

//@ public normal_behavior

//@   ensures \fresh(\result);

//@ pure

//@ nullable_by_default

//@ recommends o != null else NullPointerException;

//@ recommends o != null else NullPointerException;

//@ requires i >= 0;

//@ recommends o != null else NullPointerException;

//@ recommends i < 10 else ArrayIndexOutOfBoundsException;

//@ recommends o != null else NullPointerException;

//@ recommends i != null else NullPointerException;

//@ recommends o != null else NullPointerException;

//@ recommends i != null else RuntimeException;

//@ recommends o != null else RuntimeException;

//@ recommends i != null else NullPointerException;

//@ recommends o != null else RuntimeException;

//@ recommends o != null else RuntimeException;

//@ recommends i != null else NullPointerException;

//@ recommends o != null else NullPointerException;

//@ recommends i != null else NullPointerException;

//@ ensures 0 <= o.f < 10 && i.f < 10 ==> \result < 20;

//@ nullable_by_default

//@ recommends o != null else NullPointerException;

//@ recommends o != null else NullPointerException;

//@ requires i >= 0;

//@ recommends o != null else NullPointerException;

//@ recommends i < 10 else ArrayIndexOutOfBoundsException;

//@ recommends o != null else NullPointerException;

//@ recommends i != null else NullPointerException;

//@ recommends o != null else NullPointerException;

//@ recommends i != null else RuntimeException;

//@ recommends o != null else RuntimeException;

//@ recommends i != null else NullPointerException;

//@ recommends o != null else RuntimeException;

//@ recommends o != null else RuntimeException;

//@ recommends i != null else NullPointerException;

//@ recommends o != null else NullPointerException;

//@ recommends i != null else NullPointerException;

//@ ensures 0 <= o.f < 10 && i.f < 10 ==> \result < 20;

//@ requires true;

//@ ensures \result == x + y;

//@ code_bigint_math

//@ maintaining sum == x + y - n && 0 <= n;

//@ decreases n;

//@ maintaining sum == x + y + n && 0 <= n;

//@ decreases n;

//@ requires true;

//@ ensures \result == x + y;

//@ code_bigint_math

//@ maintaining sum == x + y - n && 0 <= n;

//@ decreases n;

//@ maintaining sum == x + y + n && 0 <= n;

//@ decreases n;

//@ requires (\forall int i, j; 0 <= i && i < j && j < arr.length; arr[i] <= arr[j]);

//@ ensures \result == -1 ==> (\forall int i; 0 <= i && i < arr.length; arr[i] != key);

//@ ensures 0 <= \result && \result < arr.length ==> arr[\result] == key;

//@ maintaining 0 <= low && low <= high  && high <= arr.length && mid == low + (high - low) / 2;

//@ maintaining (\forall int i; 0 <= i && i < low; arr[i] < key);

//@ maintaining (\forall int i; high <= i && i < arr.length ==> key < arr[i]);

//@ decreases high - low;

//@ requires (\forall int i, j; 0 <= i && i < j && j < arr.length; arr[i] <= arr[j]);

//@ ensures \result == -1 ==> (\forall int i; 0 <= i && i < arr.length; arr[i] != key);

//@ ensures 0 <= \result && \result < arr.length ==> arr[\result] == key;

//@ maintaining 0 <= low && low <= high  && high <= arr.length && mid == low + (high - low) / 2;

//@ maintaining (\forall int i; 0 <= i && i < low; arr[i] < key);

//@ maintaining (\forall int i; high <= i && i < arr.length ==> key < arr[i]);

//@ decreases high - low;

//@ requires a.length == b.length;

//@ requires 0 <= iBegin && iBegin < a.length && 0 <= iEnd && iEnd < a.length && iBegin <= iEnd;

//@ ensures (\forall int i; iBegin <= i && i < iEnd; a[i] == b[i]);

//@ maintaining iBegin <= k && k <= iEnd;

//@ maintaining (\forall int i; iBegin <= i && i < k; a[i] == b[i]);

//@ decreases iEnd  - k;

//@ requires a.length == b.length;

//@ requires 0 <= iBegin && iBegin < a.length && 0 <= iEnd && iEnd < a.length && iBegin <= iEnd;

//@ ensures (\forall int i; iBegin <= i && i < iEnd; a[i] == b[i]);

//@ maintaining iBegin <= k && k <= iEnd;

//@ maintaining (\forall int i; iBegin <= i && i < k; a[i] == b[i]);

//@ decreases iEnd  - k;

//@ requires true;

//@ ensures \result == -1 ==> (\forall int i; 0 <= i && i < x.length; x[i] != 0);

//@ ensures 0 <= \result && \result < x.length ==> x[\result] == 0 && (\forall int i; 0 <= i && i < \result; x[i] != 0);

//@ maintaining (\forall int i; 0 <= i && i < index; x[i] != 0);

//@ maintaining (0 <= index && index <= x.length);

//@ decreases x.length - index;

//@ requires true;

//@ ensures \result == -1 ==> (\forall int i; 0 <= i && i < x.length; x[i] != 0);

//@ ensures 0 <= \result && \result < x.length ==> x[\result] == 0 && (\forall int i; 0 <= i && i < \result; x[i] != 0);

//@ maintaining (\forall int i; 0 <= i && i < index; x[i] != 0);

//@ maintaining (0 <= index && index <= x.length);

//@ decreases x.length - index;

//@ requires true;

//@ ensures \result == false ==> ((x.length != y.length) || (\exists int i; 0 <= i && i < x.length; x[i] != y[x.length - 1 -i]));

//@ ensures \result == true ==> x.length == y.length && (\forall int i; 0 <= i && i < x.length; x[i] == y[x.length - 1 - i]);

//@ maintaining 0 <= index && index <= x.length && x.length == y.length;

//@ maintaining (\forall int i; 0 <= i && i < index; x[i] == y[x.length -1 - i]);

//@ decreases x.length - index;

//@ requires true;

//@ ensures \result == false ==> ((x.length != y.length) || (\exists int i; 0 <= i && i < x.length; x[i] != y[x.length - 1 -i]));

//@ ensures \result == true ==> x.length == y.length && (\forall int i; 0 <= i && i < x.length; x[i] == y[x.length - 1 - i]);

//@ maintaining 0 <= index && index <= x.length && x.length == y.length;

//@ maintaining (\forall int i; 0 <= i && i < index; x[i] == y[x.length -1 - i]);

//@ decreases x.length - index;

//@ requires a > 0;

//@ requires b > 0;

//@ ensures \result == a-b;

//@ requires a > 0;

//@ requires b > 0;

//@ ensures \result == a-b;

//@ requires a > 0;

//@ requires b > 0;

//@ ensures \result == a+b;

//@ requires a > 0;

//@ requires b > 0;

//@ ensures \result == a+b;

//@ requires true;

//@ ensures \result == -1 ==> a.length == 0;

//@ ensures \result > -1 ==> (\forall int i; 0 <= i && i < a.length; a[\result] <= a[i]);

//@ maintaining 0 <= index && index <= a.length;

//@ maintaining 0 <= smallest && smallest < a.length;

//@ maintaining (\forall int i; 0 <= i && i < index; a[smallest] <= a[i]);

//@ decreases a.length - index;

//@ requires true;

//@ ensures \result == -1 ==> a.length == 0;

//@ ensures \result > -1 ==> (\forall int i; 0 <= i && i < a.length; a[\result] <= a[i]);

//@ maintaining 0 <= index && index <= a.length;

//@ maintaining 0 <= smallest && smallest < a.length;

//@ maintaining (\forall int i; 0 <= i && i < index; a[smallest] <= a[i]);

//@ decreases a.length - index;

/*@ spec_public */
/*@ spec_public */
/*@
      @ public invariant age + 15 <= father.getAge();
      @ public invariant age + 15 <= mother.getAge();
      @ public invariant name.equals(father.getName()) | name.equals(mother.getName());
      @*/
/*@
      @ requires !fath.equals(moth);
      @ ensures !this.equals(fath);
      @ ensures !this.equals(moth);
      @*/
/*@ also
      @ requires \typeof(this) == \type(Child);
      @ requires age < AGE_MAX;
      @ requires father.age < AGE_MAX;
      @ requires mother.age < AGE_MAX;
      @ ensures age == \old(age) + 1;
      @ ensures father.age == \old(father.age) + 1;
      @ ensures mother.age == \old(mother.age) + 1;
      @*/
/*@ also
      @ ensures \result != null;
      @*/
/*@ spec_public */
/*@ spec_public */
/*@
      @ public invariant age + 15 <= father.getAge();
      @ public invariant age + 15 <= mother.getAge();
      @ public invariant name.equals(father.getName()) | name.equals(mother.getName());
      @*/
/*@
      @ requires !fath.equals(moth);
      @ ensures !this.equals(fath);
      @ ensures !this.equals(moth);
      @*/
/*@ also
      @ requires \typeof(this) == \type(Child);
      @ requires age < AGE_MAX;
      @ requires father.age < AGE_MAX;
      @ requires mother.age < AGE_MAX;
      @ ensures age == \old(age) + 1;
      @ ensures father.age == \old(father.age) + 1;
      @ ensures mother.age == \old(mother.age) + 1;
      @*/
/*@ also
      @ ensures \result != null;
      @*/
/*@ spec_public */
/*@ spec_public */
/*@ spec_public */
/*@ spec_public */
/*@ spec_public */
/*@
      @ public invariant !name.equals("");
      @ public invariant !firstname.equals("");
      @ public invariant age >= 0
      @        && age <= AGE_MAX;
      @ public constraint age >= \old(age);
      @ public invariant weight > 0;
      @ public invariant (gender == MASC) | (gender == FEMI);
      @ public constraint gender == \old(gender);
      @*/
/*@
      @ requires !name.equals("");
      @ requires !firstname.equals("");
      @ requires age >= 0 && age <= AGE_MAX;
      @ requires weight > 0;
      @ requires (gender == MASC) | (gender == FEMI);
      @*/
/*@
      @ ensures name.equals(\result);
      @*/
/*@ pure */
/*@
      @ ensures firstname.equals(\result);
      @*/
/*@ pure */
/*@
      @ ensures age == \result;
      @*/
/*@ pure */
/*@
      @ ensures weight == \result;
      @*/
/*@ pure */
/*@
      @ requires \typeof(this) == \type(Person) ;
      @ requires age < AGE_MAX;
      @ ensures age == \old(age) + 1;
      @*/
/*@
//      @ normal_behavior
//      @   requires kgs >= 0;
//      @   assignable weight;
//      @   ensures weight == \old(weight) + kgs;
//      @   ensures weight >= \old(weight);
//      @ also
//      @ normal_behavior
//      @   requires kgs < 0;
//      @   requires weight + kgs > 0;
//      @   assignable weight;
//      @   ensures weight == \old(weight) + kgs;
//      @   ensures weight < \old(weight);
//      @ also
//      @ exceptional_behavior
//      @   requires weight + kgs <= 0;
//      @   assignable     othing;
//      @   signals (WeightNegatifException) weight == \old(weight);
//      @*/
/*@ also
      @ ensures \result != null;
      @*/
/*@ spec_public */
/*@ spec_public */
/*@ spec_public */
/*@ spec_public */
/*@ spec_public */
/*@
      @ public invariant !name.equals("");
      @ public invariant !firstname.equals("");
      @ public invariant age >= 0
      @        && age <= AGE_MAX;
      @ public constraint age >= \old(age);
      @ public invariant weight > 0;
      @ public invariant (gender == MASC) | (gender == FEMI);
      @ public constraint gender == \old(gender);
      @*/
/*@
      @ requires !name.equals("");
      @ requires !firstname.equals("");
      @ requires age >= 0 && age <= AGE_MAX;
      @ requires weight > 0;
      @ requires (gender == MASC) | (gender == FEMI);
      @*/
/*@
      @ ensures name.equals(\result);
      @*/
/*@ pure */
/*@
      @ ensures firstname.equals(\result);
      @*/
/*@ pure */
/*@
      @ ensures age == \result;
      @*/
/*@ pure */
/*@
      @ ensures weight == \result;
      @*/
/*@ pure */
/*@
      @ requires \typeof(this) == \type(Person) ;
      @ requires age < AGE_MAX;
      @ ensures age == \old(age) + 1;
      @*/
/*@
//      @ normal_behavior
//      @   requires kgs >= 0;
//      @   assignable weight;
//      @   ensures weight == \old(weight) + kgs;
//      @   ensures weight >= \old(weight);
//      @ also
//      @ normal_behavior
//      @   requires kgs < 0;
//      @   requires weight + kgs > 0;
//      @   assignable weight;
//      @   ensures weight == \old(weight) + kgs;
//      @   ensures weight < \old(weight);
//      @ also
//      @ exceptional_behavior
//      @   requires weight + kgs <= 0;
//      @   assignable     othing;
//      @   signals (WeightNegatifException) weight == \old(weight);
//      @*/
/*@ also
      @ ensures \result != null;
      @*/
//@ public invariant data.length > 0;

//@ requires d.length > 0;

//@ requires src.length > 0;

//@ public invariant data.length > 0;

//@ requires d.length > 0;

//@ requires src.length > 0;

//@ requires me != null;

/*@ spec_public @*/
//@ ensures this.value == value;

//@ ensures this.value != null;

//@ requires value != null;

//@ assignable     othing;

//@ ensures \result == this.value;

/*@ pure @*/
//@ requires me != null;

/*@ spec_public @*/
//@ ensures this.value == value;

//@ ensures this.value != null;

//@ requires value != null;

//@ assignable     othing;

//@ ensures \result == this.value;

/*@ pure @*/
/*@ non_null @*/
/*@ private invariant 1 <= pos;
      @ private invariant pos <= length() + 1;
     */
/*@ non_null @*/
//@ pure helper

/*@ non_null @*/
/*@ private invariant 1 <= pos;
      @ private invariant pos <= length() + 1;
     */
/*@ non_null @*/
//@ pure helper

/*@
      @ ensures !pastEnd() <==> ( pos().equals( \old(pos()) + 1) );
      @ ensures pastEnd() <==> ( \old(pos()).equals(length()) );
      @*/
/*@
      @ requires !pastEnd();
      @ ensures 1 <= \result;
      @ ensures \result <= length();
      @*/
/*@ non_null pure @*/
/*@
      @ requires !pastEnd();
      @*/
/*@ non_null @*/
/*@
      @ ensures 0 <= \result;
      @*/
/*@ non_null pure @*/
/*@ non_null pure @*/
/*@
      @ ensures !pastEnd() <==> ( pos().equals( \old(pos()) + 1) );
      @ ensures pastEnd() <==> ( \old(pos()).equals(length()) );
      @*/
/*@
      @ requires !pastEnd();
      @ ensures 1 <= \result;
      @ ensures \result <= length();
      @*/
/*@ non_null pure @*/
/*@
      @ requires !pastEnd();
      @*/
/*@ non_null @*/
/*@
      @ ensures 0 <= \result;
      @*/
/*@ non_null pure @*/
/*@ non_null pure @*/
//@ assignable elements.objectState;

//@ ensures (elements.contains(s));

//@ reachable;

//@ reachable;

//@ assignable elements.objectState;

//@ ensures (elements.contains(s));

//@ reachable;

//@ reachable;

//@ public model instance int balance_;

//@ public instance invariant balance_ >= 0;

//@ public model instance int balance_;

//@ public instance invariant balance_ >= 0;

/*@spec_public*/
//@ represents balance_ = balance;

/*@spec_public*/
//@ represents balance_ = balanceX;

//@ public model instance int balance_;

//@ public instance invariant balance_ >= 0;

//@ public model instance int balance_;

//@ public instance invariant balance_ >= 0;

/*@spec_public*/
//@ represents balance_ = balance;

/*@spec_public*/
//@ represents balance_ = balanceX;

//@ assert false;

//@ unreachable;

//@ assert false;

//@ unreachable;

//@ code_bigint_math spec_bigint_math

//@ ensures \result == 1;

//@ requires b != null;

//@ requires b.i != null;

//@ assert b.i == \old(b.i) + 1;

//@ requires a.length > 1;

//@ requires a[0] != null;

//@ requires a[0] == 5;

//@ assert a[0] == 6;

//@ ensures \result == false;

//@ code_bigint_math spec_bigint_math

//@ ensures \result == 1;

//@ requires b != null;

//@ requires b.i != null;

//@ assert b.i == \old(b.i) + 1;

//@ requires a.length > 1;

//@ requires a[0] != null;

//@ requires a[0] == 5;

//@ assert a[0] == 6;

//@ ensures \result == false;

//@ ghost public static double eps = 0.00001;

/*@
@ requires x >= 0.0;
@ //ensures org.jmlspecs.models.JMLDouble.approximatelyEqualTo(x, \result * \result, eps);
@*/
//@ assert b >= x;

//@ assert x >= a;

//@ assert b >= a;

//@ loop_invariant b >= a;

//@ assert b >= m && m >= a;

//@ assert b >= a;

//@ assert b*b >= m*m && m*m >= a*a;

//@ ghost public static double eps = 0.00001;

/*@
@ requires x >= 0.0;
@ //ensures org.jmlspecs.models.JMLDouble.approximatelyEqualTo(x, \result * \result, eps);
@*/
//@ assert b >= x;

//@ assert x >= a;

//@ assert b >= a;

//@ loop_invariant b >= a;

//@ assert b >= m && m >= a;

//@ assert b >= a;

//@ assert b*b >= m*m && m*m >= a*a;

/*@ spec_public */
/*@ spec_public */
//@ also ensures \result == stackCounter;

//@ pure

//@ helper

//@ pure

//@ pure

/*@ spec_public */
/*@ spec_public */
//@ also ensures \result == stackCounter;

//@ pure

//@ helper

//@ pure

//@ pure

/*@
	  @public invariant count()>=0;
	  @*/
//@ pure

//@ helper

//@ requires i>=1 && i<=count();

//@ pure

//@ ensures \result==(count()==0);

//@ pure

//@ ensures \result ==> count() == \old(count()) + 1;

//@ ensures \result ==> item==(top());

//@ ensures (\forall int i; 1<=i && i<=\old(count()); itemAt(i)==\old(itemAt(i)));

//@ pure;

/*@
	  @public invariant count()>=0;
	  @*/
//@ pure

//@ helper

//@ requires i>=1 && i<=count();

//@ pure

//@ ensures \result==(count()==0);

//@ pure

//@ ensures \result ==> count() == \old(count()) + 1;

//@ ensures \result ==> item==(top());

//@ ensures (\forall int i; 1<=i && i<=\old(count()); itemAt(i)==\old(itemAt(i)));

//@ pure;

/*@ spec_public */
/*@ spec_public */
//@ also ensures \result == stackCounter;

//@ pure

//@ helper

//@ pure

//@ pure

/*@ spec_public */
/*@ spec_public */
//@ also ensures \result == stackCounter;

//@ pure

//@ helper

//@ pure

//@ pure

/*@
	  @public invariant count()>=0;
	  @*/
//@ pure

//@ helper

//@ requires i>=1 && i<=count();

//@ pure

//@ ensures \result==(count()==0);

//@ pure

//@ ensures \result ==> count() == \old(count()) + 1;

//@ ensures \result ==> item==(top());

//@ ensures (\forall int i; 1<=i && i<=\old(count()); itemAt(i)==\old(itemAt(i)));

//@ pure;

/*@
	  @public invariant count()>=0;
	  @*/
//@ pure

//@ helper

//@ requires i>=1 && i<=count();

//@ pure

//@ ensures \result==(count()==0);

//@ pure

//@ ensures \result ==> count() == \old(count()) + 1;

//@ ensures \result ==> item==(top());

//@ ensures (\forall int i; 1<=i && i<=\old(count()); itemAt(i)==\old(itemAt(i)));

//@ pure;

/*@ spec_public */
/*@ spec_public */
//@ also ensures \result == stackCounter;

//@ pure

//@ helper

//@ pure

//@ pure

/*@ spec_public */
/*@ spec_public */
//@ also ensures \result == stackCounter;

//@ pure

//@ helper

//@ pure

//@ pure

/*@
	  @public invariant count()>=0;
	  @*/
//@ pure

//@ helper

//@ requires i>=1 && i<=count();

//@ pure

//@ ensures \result==(count()==0);

//@ pure

//@ ensures \result ==> item==(top());

//@ ensures (\forall int i; 1<=i && i<=\old(count()); itemAt(i)==\old(itemAt(i)));

//@ pure;

/*@
	  @public invariant count()>=0;
	  @*/
//@ pure

//@ helper

//@ requires i>=1 && i<=count();

//@ pure

//@ ensures \result==(count()==0);

//@ pure

//@ ensures \result ==> item==(top());

//@ ensures (\forall int i; 1<=i && i<=\old(count()); itemAt(i)==\old(itemAt(i)));

//@ pure;

/*@ spec_public */
/*@ spec_public */
//@ also ensures \result == stackCounter;

//@ pure

//@ helper

//@ pure

//@ pure

/*@ spec_public */
/*@ spec_public */
//@ also ensures \result == stackCounter;

//@ pure

//@ helper

//@ pure

//@ pure

/*@
	  @public invariant count()>=0;
	  @*/
//@ pure

//@ helper

//@ requires i>=1 && i<=count();

//@ pure

//@ ensures \result==(count()==0);

//@ pure

//@ ensures \result ==> count() == \old(count()) + 1;

//@ ensures \result ==> item==(top());

//@ ensures (\forall int i; 1<=i && i<=\old(count()); itemAt(i)==\old(itemAt(i)));

//@ pure;

/*@
	  @public invariant count()>=0;
	  @*/
//@ pure

//@ helper

//@ requires i>=1 && i<=count();

//@ pure

//@ ensures \result==(count()==0);

//@ pure

//@ ensures \result ==> count() == \old(count()) + 1;

//@ ensures \result ==> item==(top());

//@ ensures (\forall int i; 1<=i && i<=\old(count()); itemAt(i)==\old(itemAt(i)));

//@ pure;

/*@ spec_public */
/*@ spec_public */
//@ also ensures \result == stackCounter;

//@ pure

//@ helper

//@ pure

//@ pure

/*@ spec_public */
/*@ spec_public */
//@ also ensures \result == stackCounter;

//@ pure

//@ helper

//@ pure

//@ pure

/*@
	  @public invariant count()>=0;
	  @*/
//@ pure

//@ helper

//@ requires i>=1 && i<=count();

//@ pure

//@ ensures \result==(count()==0);

//@ pure

//@ ensures \result ==> count() == \old(count()) + 1;

//@ ensures \result ==> item==(top());

//@ ensures (\forall int i; 1<=i && i<=\old(count()); itemAt(i)==\old(itemAt(i)));

//@ pure;

/*@
	  @public invariant count()>=0;
	  @*/
//@ pure

//@ helper

//@ requires i>=1 && i<=count();

//@ pure

//@ ensures \result==(count()==0);

//@ pure

//@ ensures \result ==> count() == \old(count()) + 1;

//@ ensures \result ==> item==(top());

//@ ensures (\forall int i; 1<=i && i<=\old(count()); itemAt(i)==\old(itemAt(i)));

//@ pure;

/*@ spec_public */
/*@ spec_public */
//@ also ensures \result == stackCounter;

//@ pure

//@ helper

//@ pure

//@ pure

/*@ spec_public */
/*@ spec_public */
//@ also ensures \result == stackCounter;

//@ pure

//@ helper

//@ pure

//@ pure

/*@
	  @public invariant count()>=0;
	  @*/
//@ pure

//@ helper

//@ requires i>=1 && i<=count();

//@ pure

//@ ensures \result==(count()==0);

//@ pure

//@ ensures \result ==> count() == \old(count()) + 1;

//@ ensures \result ==> item==(top());

//@ ensures (\forall int i; 1<=i && i<=\old(count()); itemAt(i)==\old(itemAt(i)));

//@ pure;

/*@
	  @public invariant count()>=0;
	  @*/
//@ pure

//@ helper

//@ requires i>=1 && i<=count();

//@ pure

//@ ensures \result==(count()==0);

//@ pure

//@ ensures \result ==> count() == \old(count()) + 1;

//@ ensures \result ==> item==(top());

//@ ensures (\forall int i; 1<=i && i<=\old(count()); itemAt(i)==\old(itemAt(i)));

//@ pure;

/*@ spec_public */
/*@ spec_public */
//@ also ensures \result == stackCounter;

//@ pure

//@ helper

//@ pure

//@ pure

/*@ spec_public */
/*@ spec_public */
//@ also ensures \result == stackCounter;

//@ pure

//@ helper

//@ pure

//@ pure

/*@
	  @public invariant count()>=0;
	  @*/
//@ pure

//@ helper

//@ requires i>=1 && i<=count();

//@ pure

//@ ensures \result==(count()==0);

//@ pure

//@ ensures \result ==> count() == \old(count()) + 1;

//@ ensures \result ==> item==(top());

//@ ensures (\forall int i; 1<=i && i<=\old(count()); itemAt(i)==\old(itemAt(i)));

//@ pure;

/*@
	  @public invariant count()>=0;
	  @*/
//@ pure

//@ helper

//@ requires i>=1 && i<=count();

//@ pure

//@ ensures \result==(count()==0);

//@ pure

//@ ensures \result ==> count() == \old(count()) + 1;

//@ ensures \result ==> item==(top());

//@ ensures (\forall int i; 1<=i && i<=\old(count()); itemAt(i)==\old(itemAt(i)));

//@ pure;

/*@ spec_public */
/*@ spec_public */
/*@ spec_public */
//@ in count;

//@ public represents count = stackCounter;

//@ public invariant stackCounter <= internalStack.length;

//@ public invariant internalStack.length >= maxSize;

//@ ensures count == 0;

//@ ensures stackCounter == 0;

//@ ensures count() == 0;

//@ also ensures \result == stackCounter;

//@ pure

//@ helper

//@ also requires 1 <= i && i <= count();

//@ ensures \result == internalStack[i-1];

//@ pure

//@ pure

//@ assert s.count == 0;

//@ assert s.count() == 3;

//@ assert s.count == 3;

//@ assert s.count == 0;

//@ assert s.count() == 3;

//@ assert s.count == 3;

//@ assert s.stackCounter == 3;

/*@ spec_public */
/*@ spec_public */
/*@ spec_public */
//@ in count;

//@ public represents count = stackCounter;

//@ public invariant stackCounter <= internalStack.length;

//@ public invariant internalStack.length >= maxSize;

//@ ensures count == 0;

//@ ensures stackCounter == 0;

//@ ensures count() == 0;

//@ also ensures \result == stackCounter;

//@ pure

//@ helper

//@ also requires 1 <= i && i <= count();

//@ ensures \result == internalStack[i-1];

//@ pure

//@ pure

//@ assert s.count == 0;

//@ assert s.count() == 3;

//@ assert s.count == 3;

//@ assert s.count == 0;

//@ assert s.count() == 3;

//@ assert s.count == 3;

//@ assert s.stackCounter == 3;

/*@
	  @public invariant count()>=0;
	  @*/
//@ pure

//@ helper

//@ requires i>=1 && i<=count();

//@ pure

//@ ensures \result==(count()==0);

//@ pure

//@ ensures \result ==> count() == \old(count()) + 1;

//@ ensures \result ==> item==(top());

//@ ensures (\forall int i; 1<=i && i<=\old(count()); itemAt(i)==\old(itemAt(i)));

//@ requires count() >= 1;

//@ ensures \result == itemAt(count);

//@ pure

//@ ensures \result == (\old(count) != 0);

/*@
	  @public invariant count()>=0;
	  @*/
//@ pure

//@ helper

//@ requires i>=1 && i<=count();

//@ pure

//@ ensures \result==(count()==0);

//@ pure

//@ ensures \result ==> count() == \old(count()) + 1;

//@ ensures \result ==> item==(top());

//@ ensures (\forall int i; 1<=i && i<=\old(count()); itemAt(i)==\old(itemAt(i)));

//@ requires count() >= 1;

//@ ensures \result == itemAt(count);

//@ pure

//@ ensures \result == (\old(count) != 0);

//@ ensures false;



//@ ensures false;



_by_default

//@ also

//@   requires x > 0;

//@   assignable     othing;

//@   ensures \result != null && \result > 0;

//@   requires z > 0; // FAILS because there are no specs to say that apply is pure

//@   assignable     othing;

//@ nullable

//@   requires z > 0;

//@   ensures \result != null && \result > 0; // FAILS becuse no specs give info about postcondition

//@ nullable

//@   requires z > 0;

//@   assignable f.applyFrame;

//@   ensures \result != null && \result > 0;

/*@{ PositivePureFunction }@*/
//@ assert zz == 0;

//@   requires z > 0;

/*@{ PositivePureFunction }@*/
//@ assert zz == 0; // OK because apply is known to be pure

_by_default

//@ also

//@   requires x > 0;

//@   assignable     othing;

//@   ensures \result != null && \result > 0;

//@   requires z > 0; // FAILS because there are no specs to say that apply is pure

//@   assignable     othing;

//@ nullable

//@   requires z > 0;

//@   ensures \result != null && \result > 0; // FAILS becuse no specs give info about postcondition

//@ nullable

//@   requires z > 0;

//@   assignable f.applyFrame;

//@   ensures \result != null && \result > 0;

/*@{ PositivePureFunction }@*/
//@ assert zz == 0;

//@   requires z > 0;

/*@{ PositivePureFunction }@*/
//@ assert zz == 0; // OK because apply is known to be pure

//@ requires k >= 0;

//@ loop_invariant 0 <= i <= k;

//@ loop_invariant \index == k-i;

//@ split

//@ assert i == 0;

//@ split

//@ assert i < -1; // Split A

//@ loop_invariant -1 <= j <= i;

//@ split

//@ loop_invariant 0 <= k <= 10;

//@ split

//@ assert k < 0; // FAILS - BAA

//@ split

//@ assert i < 1; // FAILS - BABA

//@ assert i < 2; // FAILS - BABB

//@ loop_invariant 0 <= j <= 10;

//@ split

//@ assert i < 3; // FAILS - BBA

//@ assert j < 0; // FAILS - BBB

//@ requires k >= 0;

//@ loop_invariant 0 <= i <= k;

//@ loop_invariant j == k-i;

//@ loop_invariant \index == k-i;

//@ split

//@ assert j == k;

//@ loop_invariant j == \count;

//@ loop_invariant 0 <= \count <= k.length;

//@ loop_writes j;

//@ split

//@ show j, k.length;

//@ assert j == k.length;

//@ requires k >= 0;

//@ loop_invariant 0 <= i <= k;

//@ loop_invariant \index == k-i;

//@ split

//@ assert i == 0;

//@ split

//@ assert i < -1; // Split A

//@ loop_invariant -1 <= j <= i;

//@ split

//@ loop_invariant 0 <= k <= 10;

//@ split

//@ assert k < 0; // FAILS - BAA

//@ split

//@ assert i < 1; // FAILS - BABA

//@ assert i < 2; // FAILS - BABB

//@ loop_invariant 0 <= j <= 10;

//@ split

//@ assert i < 3; // FAILS - BBA

//@ assert j < 0; // FAILS - BBB

//@ requires k >= 0;

//@ loop_invariant 0 <= i <= k;

//@ loop_invariant j == k-i;

//@ loop_invariant \index == k-i;

//@ split

//@ assert j == k;

//@ loop_invariant j == \count;

//@ loop_invariant 0 <= \count <= k.length;

//@ loop_writes j;

//@ split

//@ show j, k.length;

//@ assert j == k.length;

//@ ensures \result;

//@ ensures \result;

//@ split

//@ ensures \result;

//@ split;

//@ requires i <= 2;

//@ ensures \result;

//@ split

//@ split

//@ split

//@ ensures \result;

//@ split i > 0;

//@ ensures \result;

//@ split

//@ split i >= 0;

//@ split

//@ ensures i>0 ==> \result == 10 * 10101;

//@ ensures i<=0 ==> \result == 20 * 10101;

//@ @org.jmlspecs.annotation.Options("-split=A")

//@ split

//@ requires i < 1000;

//@ ensures j == i + 1;

//@ requires i < 1000;

//@ ensures j == i + 1;

//@ requires i < 1000;

//@ ensures (\lbl J j) == i + 1;

//@ show i;

//@ requires i < 1000;

//@ ensures j == i + 1;

//@ halt

//@ assert j == 11; // IGNORED

//@ assert i < 0; // FAILS

//@ halt

//@ assert j == 11; // IGNORED

//@ assert i <= 0; // SUCCEEDS

//@ halt

//@ assert j == 11; // IGNORED

//@ halt

//@ assert false; // IGNORED

//@ ensures \result;

//@ ensures \result;

//@ split

//@ ensures \result;

//@ split;

//@ requires i <= 2;

//@ ensures \result;

//@ split

//@ split

//@ split

//@ ensures \result;

//@ split i > 0;

//@ ensures \result;

//@ split

//@ split i >= 0;

//@ split

//@ ensures i>0 ==> \result == 10 * 10101;

//@ ensures i<=0 ==> \result == 20 * 10101;

//@ @org.jmlspecs.annotation.Options("-split=A")

//@ split

//@ requires i < 1000;

//@ ensures j == i + 1;

//@ requires i < 1000;

//@ ensures j == i + 1;

//@ requires i < 1000;

//@ ensures (\lbl J j) == i + 1;

//@ show i;

//@ requires i < 1000;

//@ ensures j == i + 1;

//@ halt

//@ assert j == 11; // IGNORED

//@ assert i < 0; // FAILS

//@ halt

//@ assert j == 11; // IGNORED

//@ assert i <= 0; // SUCCEEDS

//@ halt

//@ assert j == 11; // IGNORED

//@ halt

//@ assert false; // IGNORED

//@ old static Object o = oo;

//@ old static Object o = oo;

//@ old Object o = oo;

//@ old static Object o = oo;

//@ old static Object o = oo;

//@ old Object o = oo;

//@ reachable;

//@ assert Arrays.equalElements(s.values,a);

//@ reachable;

//@ assert coll == Collectors.<Integer>toList();

//@ reachable;

//@ reachable;

//@ assert r.values == s.values;

//@ assert Arrays.equalElements(r.values,s.values);

//@ reachable;

//@ assert Arrays.equalElements(s.values,a);

//@ reachable;

//@ assert coll == Collectors.<Integer>toList();

//@ reachable;

//@ reachable;

//@ assert r.values == s.values;

//@ assert Arrays.equalElements(r.values,s.values);

//@ requires true;

//@ requires true;

//@ requires true;

/*@ spec_public */
//@ requires true;

/*@ spec_public */
//@ requires true;

/*@ spec_public */
//@ requires true;

//@ requires a > 100;

//@ requires a > 100;

//@ requires a > 100;

//@ requires true;

//@ requires true;

//@ requires true;

//@ requires true;

//@ requires true;

//@ requires true;

//@ requires true;

//@ requires true;

//@ requires true;

//@ requires true;

//@ requires true;

//@ requires true;

//@ requires true;

//@ requires true;

//@ requires true;

//@ requires true;

//@ requires true;

//@ requires true;

//@ requires true;

//@ requires true;

//@ requires true;

//@ requires true;

//@ requires true;

//@ requires true;

//@ requires true;

//@ requires true;

//@ requires true;

//@ requires true;

//@ requires true;

//@ requires true;

//@ requires true;

//@ requires true;

//@ requires true;

//@ requires true;

//@ requires true;

//@ requires true;

//@ requires true;

//@ requires true;

//@ requires true;

//@ requires true;

//@ requires true;

//@ requires true;

//@ requires true;

//@ requires true;

//@ requires true;

//@ requires true;

//@ requires true;

//@ requires true;

/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
//@ requires true;

/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
//@ requires true;

/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
//@ requires true;

/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
//@ requires true;

//@ ensures \result == (eof && !usePrevious);

//@ requires this.reader != null;

/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
//@ requires true;

//@ ensures \result == (eof && !usePrevious);

//@ requires this.reader != null;

/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
//@ requires true;

//@ ensures \result == (eof && !usePrevious);

//@ requires this.reader != null;

/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
//@ requires this.reader != null;

/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
//@ requires this.reader != null;

/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
//@ requires this.reader != null;

//@ requires true;

//@ requires true;

//@ requires true;

//@ requires true;

//@ requires true;

//@ requires true;

//@ requires true;

//@ ensures this.FIELD==3;

//@ ensures \result == a + b;

//@ assignable this.FIELD;

//@ requires true;

//@ requires true;

//@ ensures this.FIELD==3;

//@ ensures \result == a + b;

//@ assignable this.FIELD;

//@ requires true;

//@ requires true;

//@ ensures this.FIELD==3;

//@ ensures \result == a + b;

//@ assignable this.FIELD;

//@ requires true;

//@ requires true;

//@ ensures this.FIELD==3;

//@ ensures \result == a + b;

//@ assignable this.FIELD;

//@ requires true;

//@ requires true;

//@ ensures this.FIELD==3;

//@ ensures \result == a + b;

//@ assignable this.FIELD;

//@ requires true;

//@ requires true;

//@ ensures this.FIELD==3;

//@ ensures \result == a + b;

//@ assignable this.FIELD;

//@ requires true;

//@ requires true;

//@ ensures this.FIELD==3;

//@ ensures \result == a + b;

//@ assignable this.FIELD;

//@ requires true;

//@ requires true;

//@ ensures this.FIELD==3;

//@ ensures \result == a + b;

//@ assignable this.FIELD;

//@ requires true;

//@ requires true;

//@ ensures this.FIELD==3;

//@ ensures \result == a + b;

//@ assignable this.FIELD;

//@ requires true;

//@ requires true;

//@ ensures this.FIELD==3;

//@ ensures \result == a + b;

//@ assignable this.FIELD;

//@ requires true;

//@ requires true;

//@ ensures this.FIELD==3;

//@ ensures \result == a + b;

//@ assignable this.FIELD;

//@ requires true;

//@ requires true;

//@ ensures this.FIELD==3;

//@ ensures \result == a + b;

//@ assignable this.FIELD;

//@ requires true;

/*@
      public normal_behavior
      requires true;
      {|
         ensures a==b ==> \result == true;
        also
         ensures a!=b ==> \result == false;
       |}
     */
//@ requires true;

/*@
      public normal_behavior
      requires true;
      {|
         ensures a==b ==> \result == true;
        also
         ensures a!=b ==> \result == false;
       |}
     */
//@ requires true;

/*@
      public normal_behavior
      requires true;
      {|
         ensures a==b ==> \result == true;
        also
         ensures a!=b ==> \result == false;
       |}
     */
//@ requires true;

//@ requires ar!=null;

/*@
          @ maintaining -1 < i && i <= ar.length;
          @ maintaining sum == i;
          @ decreasing ar.length - i;
          @*/
//@ requires ar!=null;

/*@
          @ maintaining -1 < i && i <= ar.length;
          @ maintaining sum == i;
          @ decreasing ar.length - i;
          @*/
//@ requires ar!=null;

/*@
          @ maintaining -1 < i && i <= ar.length;
          @ maintaining sum == i;
          @ decreasing ar.length - i;
          @*/
//@ assignable     othing;

//@ assignable     othing;

//@ assignable     othing;

/*@ spec_public */
/*@
      public invariant decPart >= 0 && decPart < PRECISION ;
      public invariant intPart >= 0 && intPart <= MAX_DECIMAL_NUMBER;
      public invariant intPart == MAX_DECIMAL_NUMBER ==> decPart == 0;
    */
/*@ spec_public */
/*@ spec_public */
/*@
      public invariant decPart_ >= 0 && decPart_ < PRECISION ;
      public invariant intPart_ >= 0 ;
      public invariant intPart_ == MAX_DECIMAL_NUMBER ==> decPart_ == 0;
    */
/*@ spec_public */
/*@ spec_public */
/*@ spec_public */
/*@
      requires true;
      ensures intPart == 0 && decPart == 0;
//      ensures \fresh(this);
    */
/*@
      requires v >= 0;
      ensures intPart == v && decPart == 0;
//      ensures \fresh(this);
      exsures (ISOException) false;
    */
//@ unreachable;

/*@
      requires i >= 0 && d >= 0 && d < PRECISION;
      requires i == MAX_DECIMAL_NUMBER ==> d == 0;
      ensures intPart == i && decPart == d;
//      ensures \fresh(this);
      exsures (ISOException) false; assignable \everything;
    */
//@ unreachable;

/*@
      requires d != null; assignable \everything;
      ensures intPart == d.intPart && decPart == d.decPart;
//      ensures \fresh(this);
      exsures (ISOException) false;
    */
//@ unreachable;

/*@
      modifies intPart, decPart;
      requires d != null;
//       ensures intPart * PRECISION + decPart ==
//                 \old(intPart * PRECISION + decPart) +
//                 d.intPart * PRECISION + d.decPart;
      ensures \result == this ;
      exsures (DecimalException) intPart < 0 ;
     */
/*@
      requires d != null;
      modifies intPart, decPart;
//       ensures intPart * PRECISION + decPart ==
//                 \old(intPart * PRECISION + decPart) -
//                 d.intPart * PRECISION + d.decPart;
      ensures \result == this;
      exsures (DecimalException) intPart < 0;
    */
/*@
      modifies intPart, decPart;
      requires d != null ;
//       ensures intPart * PRECISION + decPart ==
//                 \old(intPart * PRECISION + decPart) *
//                 (d.intPart * PRECISION + d.decPart);
      ensures \result == this ;
      exsures (DecimalException) intPart < 0 ;
    */
/*@
      modifies intPart, decPart;
      requires true;
      ensures intPart == \old((short)-intPart);
      ensures decPart == \old((short)-decPart);
      ensures \result == this;
      //exsures (RuntimeException) false
    */
/*@ helper */
/*@
      modifies intPart, decPart;
      requires true;
      ensures \result == this;
      ensures decPart == 0;
      ensures intPart == (\old(decPart) >= (PRECISION/2) ?
                              (short)(\old(intPart) + 1) :
                                 (short)(\old(intPart)));
      //exsures (RuntimeException)false
    */
/*@
      //modifies     othing
      requires 0 <= ref && ref <= MAX_DECIMAL_NUMBER;
      ensures \result == (intPart == ref ? ((decPart == 0) ? 0 : 1)
                                         : ((intPart < ref) ? -1 : 1));
      //exsures (RuntimeException)false
    */
/*@
      //modifies     othing
      requires true;
      ensures \result == (intPart == 0 && decPart == 0);
      //exsures (RuntimeException)false
    */
/*@
      //modifies     othing
      requires true;
      ensures \result;
      //exsures (RuntimeException)false
    */
/*@
      //modifies     othing
      requires true;
      ensures \result == false;
      //exsures (RuntimeException)false
    */
/*@
      //modifies     othing
      requires d != null;
      ensures \result == ((intPart * PRECISION + decPart >
                           d.intPart * PRECISION + d.decPart) ||
                          (intPart * PRECISION + decPart ==
                           d.intPart * PRECISION + d.decPart));
      //exsures (RuntimeException)false
    */
/*@
      //modifies     othing
      requires d != null;
//       ensures \result == (intPart * PRECISION + decPart <=
//                           d.intPart * PRECISION + d.decPart);
      //exsures (RuntimeException)false
    */
/*@
      //modifies     othing
      requires d != null;
//       ensures \result == (intPart * PRECISION + decPart >
//                           d.intPart * PRECISION + d.decPart);
      //exsures (RuntimeException)false
    */
/*@
      //modifies     othing
      requires d != null;
//       ensures \result == (d.intPart * PRECISION + d.decPart >
//                           intPart * PRECISION + decPart);
      //exsures (RuntimeException)false
    */
/*@
      //modifies     othing
      requires d != null;
      ensures \result == (intPart == d.intPart &&
                          decPart == d.decPart);
      //exsures (RuntimeException)false
    */
/*@
      requires true;
      ensures intPart == v ;
      ensures decPart == (short) 0 ;
      ensures \result == this;
      exsures (DecimalException) v < 0;
    */
/*@
      requires true;
      ensures intPart == i && decPart == d ;
      ensures \result == this;
      exsures (DecimalException) i < 0 || d < 0 || d >= PRECISION ||
                                 (i == MAX_DECIMAL_NUMBER && d != 0);
    */
/*@
      requires d != null ;
      ensures intPart == d.intPart ;
      ensures decPart == d.decPart ;
      ensures \result == this ;
      exsures (DecimalException) false ;
    */
/*@
      //modifies     othing
      requires true;
      ensures \result == intPart;
      //exsures (RuntimeException)false
      pure */
/*@
      //modifies     othing;
      requires true ;
      ensures \result == decPart;
      //exsures (RuntimeException)false
      pure */
/*@
      modifies intPart, decPart;
      requires true;
      ensures intPart == \old(intPart) && decPart == \old(decPart);
      ensures \result == (decPart >= PRECISION/2 ?
                          intPart + 1:
                          intPart);
      //exsures (RuntimeException)false
    */
/*@
      modifies bArray[off], bArray[off+1], bArray[off+2], bArray[off+3];
      requires bArray != null ;
      requires off >= 0;
      requires off + 3 < bArray.length;
      ensures \result == off+4 ;
      exsures (ArrayIndexOutOfBoundsException) false;
    */
/*@
      modifies intPart_, decPart_, depth;
      requires true;
      ensures (depth < MAX_DEPTH) ==> (intPart_ == intPart &&
                                       decPart_ == decPart &&
                                       depth == (byte) (\old(depth) + 1));
      //exsures (RuntimeException)false
    */
/*@
      modifies intPart, decPart, depth;
      requires true;
      ensures (depth > 0) ==> (intPart == intPart_ &&
                               decPart == decPart_ &&
                               depth == (byte)(\old(depth) - 1));
      //exsures (RuntimeException)false
    */
/*@
      modifies intPart, decPart ;
      requires true ;
//       ensures intPart * PRECISION + decPart ==
//                \old(intPart * PRECISION + decPart) + (e * PRECISION + f);
      //exsures (RuntimeException)false;
    */
//@ nowarn;

/*@
      modifies intPart, decPart;
      requires true ;
//       ensures intPart * PRECISION + decPart ==
//               \old(intPart * PRECISION + decPart) * (e * PRECISION + f);
      // exsures (RuntimeException)false;
    */
//@ assume aux != 0;

//@ nowarn;

/*@ spec_public */
/*@
      public invariant decPart >= 0 && decPart < PRECISION ;
      public invariant intPart >= 0 && intPart <= MAX_DECIMAL_NUMBER;
      public invariant intPart == MAX_DECIMAL_NUMBER ==> decPart == 0;
    */
/*@ spec_public */
/*@ spec_public */
/*@
      public invariant decPart_ >= 0 && decPart_ < PRECISION ;
      public invariant intPart_ >= 0 ;
      public invariant intPart_ == MAX_DECIMAL_NUMBER ==> decPart_ == 0;
    */
/*@ spec_public */
/*@ spec_public */
/*@ spec_public */
/*@
      requires true;
      ensures intPart == 0 && decPart == 0;
//      ensures \fresh(this);
    */
/*@
      requires v >= 0;
      ensures intPart == v && decPart == 0;
//      ensures \fresh(this);
      exsures (ISOException) false;
    */
//@ unreachable;

/*@
      requires i >= 0 && d >= 0 && d < PRECISION;
      requires i == MAX_DECIMAL_NUMBER ==> d == 0;
      ensures intPart == i && decPart == d;
//      ensures \fresh(this);
      exsures (ISOException) false; assignable \everything;
    */
//@ unreachable;

/*@
      requires d != null; assignable \everything;
      ensures intPart == d.intPart && decPart == d.decPart;
//      ensures \fresh(this);
      exsures (ISOException) false;
    */
//@ unreachable;

/*@
      modifies intPart, decPart;
      requires d != null;
//       ensures intPart * PRECISION + decPart ==
//                 \old(intPart * PRECISION + decPart) +
//                 d.intPart * PRECISION + d.decPart;
      ensures \result == this ;
      exsures (DecimalException) intPart < 0 ;
     */
/*@
      requires d != null;
      modifies intPart, decPart;
//       ensures intPart * PRECISION + decPart ==
//                 \old(intPart * PRECISION + decPart) -
//                 d.intPart * PRECISION + d.decPart;
      ensures \result == this;
      exsures (DecimalException) intPart < 0;
    */
/*@
      modifies intPart, decPart;
      requires d != null ;
//       ensures intPart * PRECISION + decPart ==
//                 \old(intPart * PRECISION + decPart) *
//                 (d.intPart * PRECISION + d.decPart);
      ensures \result == this ;
      exsures (DecimalException) intPart < 0 ;
    */
/*@
      modifies intPart, decPart;
      requires true;
      ensures intPart == \old((short)-intPart);
      ensures decPart == \old((short)-decPart);
      ensures \result == this;
      //exsures (RuntimeException) false
    */
/*@ helper */
/*@
      modifies intPart, decPart;
      requires true;
      ensures \result == this;
      ensures decPart == 0;
      ensures intPart == (\old(decPart) >= (PRECISION/2) ?
                              (short)(\old(intPart) + 1) :
                                 (short)(\old(intPart)));
      //exsures (RuntimeException)false
    */
/*@
      //modifies     othing
      requires 0 <= ref && ref <= MAX_DECIMAL_NUMBER;
      ensures \result == (intPart == ref ? ((decPart == 0) ? 0 : 1)
                                         : ((intPart < ref) ? -1 : 1));
      //exsures (RuntimeException)false
    */
/*@
      //modifies     othing
      requires true;
      ensures \result == (intPart == 0 && decPart == 0);
      //exsures (RuntimeException)false
    */
/*@
      //modifies     othing
      requires true;
      ensures \result;
      //exsures (RuntimeException)false
    */
/*@
      //modifies     othing
      requires true;
      ensures \result == false;
      //exsures (RuntimeException)false
    */
/*@
      //modifies     othing
      requires d != null;
      ensures \result == ((intPart * PRECISION + decPart >
                           d.intPart * PRECISION + d.decPart) ||
                          (intPart * PRECISION + decPart ==
                           d.intPart * PRECISION + d.decPart));
      //exsures (RuntimeException)false
    */
/*@
      //modifies     othing
      requires d != null;
//       ensures \result == (intPart * PRECISION + decPart <=
//                           d.intPart * PRECISION + d.decPart);
      //exsures (RuntimeException)false
    */
/*@
      //modifies     othing
      requires d != null;
//       ensures \result == (intPart * PRECISION + decPart >
//                           d.intPart * PRECISION + d.decPart);
      //exsures (RuntimeException)false
    */
/*@
      //modifies     othing
      requires d != null;
//       ensures \result == (d.intPart * PRECISION + d.decPart >
//                           intPart * PRECISION + decPart);
      //exsures (RuntimeException)false
    */
/*@
      //modifies     othing
      requires d != null;
      ensures \result == (intPart == d.intPart &&
                          decPart == d.decPart);
      //exsures (RuntimeException)false
    */
/*@
      requires true;
      ensures intPart == v ;
      ensures decPart == (short) 0 ;
      ensures \result == this;
      exsures (DecimalException) v < 0;
    */
/*@
      requires true;
      ensures intPart == i && decPart == d ;
      ensures \result == this;
      exsures (DecimalException) i < 0 || d < 0 || d >= PRECISION ||
                                 (i == MAX_DECIMAL_NUMBER && d != 0);
    */
/*@
      requires d != null ;
      ensures intPart == d.intPart ;
      ensures decPart == d.decPart ;
      ensures \result == this ;
      exsures (DecimalException) false ;
    */
/*@
      //modifies     othing
      requires true;
      ensures \result == intPart;
      //exsures (RuntimeException)false
      pure */
/*@
      //modifies     othing;
      requires true ;
      ensures \result == decPart;
      //exsures (RuntimeException)false
      pure */
/*@
      modifies intPart, decPart;
      requires true;
      ensures intPart == \old(intPart) && decPart == \old(decPart);
      ensures \result == (decPart >= PRECISION/2 ?
                          intPart + 1:
                          intPart);
      //exsures (RuntimeException)false
    */
/*@
      modifies bArray[off], bArray[off+1], bArray[off+2], bArray[off+3];
      requires bArray != null ;
      requires off >= 0;
      requires off + 3 < bArray.length;
      ensures \result == off+4 ;
      exsures (ArrayIndexOutOfBoundsException) false;
    */
/*@
      modifies intPart_, decPart_, depth;
      requires true;
      ensures (depth < MAX_DEPTH) ==> (intPart_ == intPart &&
                                       decPart_ == decPart &&
                                       depth == (byte) (\old(depth) + 1));
      //exsures (RuntimeException)false
    */
/*@
      modifies intPart, decPart, depth;
      requires true;
      ensures (depth > 0) ==> (intPart == intPart_ &&
                               decPart == decPart_ &&
                               depth == (byte)(\old(depth) - 1));
      //exsures (RuntimeException)false
    */
/*@
      modifies intPart, decPart ;
      requires true ;
//       ensures intPart * PRECISION + decPart ==
//                \old(intPart * PRECISION + decPart) + (e * PRECISION + f);
      //exsures (RuntimeException)false;
    */
//@ nowarn;

/*@
      modifies intPart, decPart;
      requires true ;
//       ensures intPart * PRECISION + decPart ==
//               \old(intPart * PRECISION + decPart) * (e * PRECISION + f);
      // exsures (RuntimeException)false;
    */
//@ assume aux != 0;

//@ nowarn;

/*@ spec_public */
/*@
      public invariant decPart >= 0 && decPart < PRECISION ;
      public invariant intPart >= 0 && intPart <= MAX_DECIMAL_NUMBER;
      public invariant intPart == MAX_DECIMAL_NUMBER ==> decPart == 0;
    */
/*@ spec_public */
/*@ spec_public */
/*@
      public invariant decPart_ >= 0 && decPart_ < PRECISION ;
      public invariant intPart_ >= 0 ;
      public invariant intPart_ == MAX_DECIMAL_NUMBER ==> decPart_ == 0;
    */
/*@ spec_public */
/*@ spec_public */
/*@ spec_public */
/*@
      requires true;
      ensures intPart == 0 && decPart == 0;
//      ensures \fresh(this);
    */
/*@
      requires v >= 0;
      ensures intPart == v && decPart == 0;
//      ensures \fresh(this);
      exsures (ISOException) false;
    */
//@ unreachable;

/*@
      requires i >= 0 && d >= 0 && d < PRECISION;
      requires i == MAX_DECIMAL_NUMBER ==> d == 0;
      ensures intPart == i && decPart == d;
//      ensures \fresh(this);
      exsures (ISOException) false; assignable \everything;
    */
//@ unreachable;

/*@
      requires d != null; assignable \everything;
      ensures intPart == d.intPart && decPart == d.decPart;
//      ensures \fresh(this);
      exsures (ISOException) false;
    */
//@ unreachable;

/*@
      modifies intPart, decPart;
      requires d != null;
//       ensures intPart * PRECISION + decPart ==
//                 \old(intPart * PRECISION + decPart) +
//                 d.intPart * PRECISION + d.decPart;
      ensures \result == this ;
      exsures (DecimalException) intPart < 0 ;
     */
/*@
      requires d != null;
      modifies intPart, decPart;
//       ensures intPart * PRECISION + decPart ==
//                 \old(intPart * PRECISION + decPart) -
//                 d.intPart * PRECISION + d.decPart;
      ensures \result == this;
      exsures (DecimalException) intPart < 0;
    */
/*@
      modifies intPart, decPart;
      requires d != null ;
//       ensures intPart * PRECISION + decPart ==
//                 \old(intPart * PRECISION + decPart) *
//                 (d.intPart * PRECISION + d.decPart);
      ensures \result == this ;
      exsures (DecimalException) intPart < 0 ;
    */
/*@
      modifies intPart, decPart;
      requires true;
      ensures intPart == \old((short)-intPart);
      ensures decPart == \old((short)-decPart);
      ensures \result == this;
      //exsures (RuntimeException) false
    */
/*@ helper */
/*@
      modifies intPart, decPart;
      requires true;
      ensures \result == this;
      ensures decPart == 0;
      ensures intPart == (\old(decPart) >= (PRECISION/2) ?
                              (short)(\old(intPart) + 1) :
                                 (short)(\old(intPart)));
      //exsures (RuntimeException)false
    */
/*@
      //modifies     othing
      requires 0 <= ref && ref <= MAX_DECIMAL_NUMBER;
      ensures \result == (intPart == ref ? ((decPart == 0) ? 0 : 1)
                                         : ((intPart < ref) ? -1 : 1));
      //exsures (RuntimeException)false
    */
/*@
      //modifies     othing
      requires true;
      ensures \result == (intPart == 0 && decPart == 0);
      //exsures (RuntimeException)false
    */
/*@
      //modifies     othing
      requires true;
      ensures \result;
      //exsures (RuntimeException)false
    */
/*@
      //modifies     othing
      requires true;
      ensures \result == false;
      //exsures (RuntimeException)false
    */
/*@
      //modifies     othing
      requires d != null;
      ensures \result == ((intPart * PRECISION + decPart >
                           d.intPart * PRECISION + d.decPart) ||
                          (intPart * PRECISION + decPart ==
                           d.intPart * PRECISION + d.decPart));
      //exsures (RuntimeException)false
    */
/*@
      //modifies     othing
      requires d != null;
//       ensures \result == (intPart * PRECISION + decPart <=
//                           d.intPart * PRECISION + d.decPart);
      //exsures (RuntimeException)false
    */
/*@
      //modifies     othing
      requires d != null;
//       ensures \result == (intPart * PRECISION + decPart >
//                           d.intPart * PRECISION + d.decPart);
      //exsures (RuntimeException)false
    */
/*@
      //modifies     othing
      requires d != null;
//       ensures \result == (d.intPart * PRECISION + d.decPart >
//                           intPart * PRECISION + decPart);
      //exsures (RuntimeException)false
    */
/*@
      //modifies     othing
      requires d != null;
      ensures \result == (intPart == d.intPart &&
                          decPart == d.decPart);
      //exsures (RuntimeException)false
    */
/*@
      requires true;
      ensures intPart == v ;
      ensures decPart == (short) 0 ;
      ensures \result == this;
      exsures (DecimalException) v < 0;
    */
/*@
      requires true;
      ensures intPart == i && decPart == d ;
      ensures \result == this;
      exsures (DecimalException) i < 0 || d < 0 || d >= PRECISION ||
                                 (i == MAX_DECIMAL_NUMBER && d != 0);
    */
/*@
      requires d != null ;
      ensures intPart == d.intPart ;
      ensures decPart == d.decPart ;
      ensures \result == this ;
      exsures (DecimalException) false ;
    */
/*@
      //modifies     othing
      requires true;
      ensures \result == intPart;
      //exsures (RuntimeException)false
      pure */
/*@
      //modifies     othing;
      requires true ;
      ensures \result == decPart;
      //exsures (RuntimeException)false
      pure */
/*@
      modifies intPart, decPart;
      requires true;
      ensures intPart == \old(intPart) && decPart == \old(decPart);
      ensures \result == (decPart >= PRECISION/2 ?
                          intPart + 1:
                          intPart);
      //exsures (RuntimeException)false
    */
/*@
      modifies bArray[off], bArray[off+1], bArray[off+2], bArray[off+3];
      requires bArray != null ;
      requires off >= 0;
      requires off + 3 < bArray.length;
      ensures \result == off+4 ;
      exsures (ArrayIndexOutOfBoundsException) false;
    */
/*@
      modifies intPart_, decPart_, depth;
      requires true;
      ensures (depth < MAX_DEPTH) ==> (intPart_ == intPart &&
                                       decPart_ == decPart &&
                                       depth == (byte) (\old(depth) + 1));
      //exsures (RuntimeException)false
    */
/*@
      modifies intPart, decPart, depth;
      requires true;
      ensures (depth > 0) ==> (intPart == intPart_ &&
                               decPart == decPart_ &&
                               depth == (byte)(\old(depth) - 1));
      //exsures (RuntimeException)false
    */
/*@
      modifies intPart, decPart ;
      requires true ;
//       ensures intPart * PRECISION + decPart ==
//                \old(intPart * PRECISION + decPart) + (e * PRECISION + f);
      //exsures (RuntimeException)false;
    */
//@ nowarn;

/*@
      modifies intPart, decPart;
      requires true ;
//       ensures intPart * PRECISION + decPart ==
//               \old(intPart * PRECISION + decPart) * (e * PRECISION + f);
      // exsures (RuntimeException)false;
    */
//@ assume aux != 0;

//@ nowarn;

/*@ spec_public */
/*@
      public invariant decPart >= 0 && decPart < PRECISION ;
      public invariant intPart >= 0 && intPart <= MAX_DECIMAL_NUMBER;
      public invariant intPart == MAX_DECIMAL_NUMBER ==> decPart == 0;
    */
/*@ spec_public */
/*@ spec_public */
/*@
      public invariant decPart_ >= 0 && decPart_ < PRECISION ;
      public invariant intPart_ >= 0 ;
      public invariant intPart_ == MAX_DECIMAL_NUMBER ==> decPart_ == 0;
    */
/*@ spec_public */
/*@ spec_public */
/*@ spec_public */
/*@
      requires true;
      ensures intPart == 0 && decPart == 0;
      ensures \fresh(this);
    */
/*@
      requires v >= 0;
      ensures intPart == v && decPart == 0;
      ensures \fresh(this);
      exsures (ISOException) false;
    */
//@ unreachable;

/*@
      requires i >= 0 && d >= 0 && d < PRECISION;
      requires i == MAX_DECIMAL_NUMBER ==> d == 0;
      ensures intPart == i && decPart == d;
      ensures \fresh(this);
      exsures (ISOException) false; assignable \everything;
    */
//@ unreachable;

/*@
      requires d != null;
      ensures intPart == d.intPart && decPart == d.decPart;
      ensures \fresh(this);
      exsures (ISOException) false;
    */
//@ unreachable;

/*@
      modifies intPart, decPart;
      requires d != null;
//       ensures intPart * PRECISION + decPart ==
//                 \old(intPart * PRECISION + decPart) +
//                 d.intPart * PRECISION + d.decPart;
      ensures \result == this ;
      exsures (DecimalException) intPart < 0 ;
     */
/*@
      requires d != null;
      modifies intPart, decPart;
//       ensures intPart * PRECISION + decPart ==
//                 \old(intPart * PRECISION + decPart) -
//                 d.intPart * PRECISION + d.decPart;
      ensures \result == this;
      exsures (DecimalException) intPart < 0;
    */
/*@
      modifies intPart, decPart;
      requires d != null ;
//       ensures intPart * PRECISION + decPart ==
//                 \old(intPart * PRECISION + decPart) *
//                 (d.intPart * PRECISION + d.decPart);
      ensures \result == this ;
      exsures (DecimalException) intPart < 0 ;
    */
/*@
      modifies intPart, decPart;
      requires true;
      ensures intPart == \old((short)-intPart);
      ensures decPart == \old((short)-decPart);
      ensures \result == this;
      //exsures (RuntimeException) false
    */
/*@ helper */
/*@
      modifies intPart, decPart;
      requires true;
      ensures \result == this;
      ensures decPart == 0;
      ensures intPart == (\old(decPart) >= (PRECISION/2) ?
                              (short)(\old(intPart) + 1) :
                                 (short)(\old(intPart)));
      //exsures (RuntimeException)false
    */
/*@
      //modifies     othing
      requires 0 <= ref && ref <= MAX_DECIMAL_NUMBER;
      ensures \result == (intPart == ref ? ((decPart == 0) ? 0 : 1)
                                         : ((intPart < ref) ? -1 : 1));
      //exsures (RuntimeException)false
    */
/*@
      //modifies     othing
      requires true;
      ensures \result == (intPart == 0 && decPart == 0);
      //exsures (RuntimeException)false
    */
/*@
      //modifies     othing
      requires true;
      ensures \result;
      //exsures (RuntimeException)false
    */
/*@
      //modifies     othing
      requires true;
      ensures \result == false;
      //exsures (RuntimeException)false
    */
/*@
      //modifies     othing
      requires d != null;
      ensures \result == ((intPart * PRECISION + decPart >
                           d.intPart * PRECISION + d.decPart) ||
                          (intPart * PRECISION + decPart ==
                           d.intPart * PRECISION + d.decPart));
      //exsures (RuntimeException)false
    */
/*@
      //modifies     othing
      requires d != null;
//       ensures \result == (intPart * PRECISION + decPart <=
//                           d.intPart * PRECISION + d.decPart);
      //exsures (RuntimeException)false
    */
/*@
      //modifies     othing
      requires d != null;
//       ensures \result == (intPart * PRECISION + decPart >
//                           d.intPart * PRECISION + d.decPart);
      //exsures (RuntimeException)false
    */
/*@
      //modifies     othing
      requires d != null;
//       ensures \result == (d.intPart * PRECISION + d.decPart >
//                           intPart * PRECISION + decPart);
      //exsures (RuntimeException)false
    */
/*@
      //modifies     othing
      requires d != null;
      ensures \result == (intPart == d.intPart &&
                          decPart == d.decPart);
      //exsures (RuntimeException)false
    */
/*@
      requires true;
      ensures intPart == v ;
      ensures decPart == (short) 0 ;
      ensures \result == this;
      exsures (DecimalException) v < 0;
    */
/*@
      requires true;
      ensures intPart == i && decPart == d ;
      ensures \result == this;
      exsures (DecimalException) i < 0 || d < 0 || d >= PRECISION ||
                                 (i == MAX_DECIMAL_NUMBER && d != 0);
    */
/*@
      requires d != null ;
      ensures intPart == d.intPart ;
      ensures decPart == d.decPart ;
      ensures \result == this ;
      exsures (DecimalException) false ;
    */
/*@
      //modifies     othing
      requires true;
      ensures \result == intPart;
      //exsures (RuntimeException)false
    */
/*@
      //modifies     othing;
      requires true ;
      ensures \result == decPart;
      //exsures (RuntimeException)false
    */
/*@
      modifies intPart, decPart;
      requires true;
      ensures intPart == \old(intPart) && decPart == \old(decPart);
      ensures \result == (decPart >= PRECISION/2 ?
                          intPart + 1:
                          intPart);
      //exsures (RuntimeException)false
    */
/*@
      modifies bArray[off], bArray[off+1], bArray[off+2], bArray[off+3];
      requires bArray != null ;
      requires off >= 0;
      requires off + 3 < bArray.length;
      ensures \result == off+4 ;
      exsures (ArrayIndexOutOfBoundsException) false;
    */
/*@
      modifies intPart_, decPart_, depth;
      requires true;
      ensures (depth < MAX_DEPTH) ==> (intPart_ == intPart &&
                                       decPart_ == decPart &&
                                       depth == (byte) (\old(depth) + 1));
      //exsures (RuntimeException)false
    */
/*@
      modifies intPart, decPart, depth;
      requires true;
      ensures (depth > 0) ==> (intPart == intPart_ &&
                               decPart == decPart_ &&
                               depth == (byte)(\old(depth) - 1));
      //exsures (RuntimeException)false
    */
/*@
      modifies intPart, decPart ;
      requires true ;
//       ensures intPart * PRECISION + decPart ==
//                \old(intPart * PRECISION + decPart) + (e * PRECISION + f);
      //exsures (RuntimeException)false;
    */
//@ nowarn;

/*@
      modifies intPart, decPart;
      requires true ;
//       ensures intPart * PRECISION + decPart ==
//               \old(intPart * PRECISION + decPart) * (e * PRECISION + f);
      // exsures (RuntimeException)false;
    */
//@ assume aux != 0;

//@ nowarn;

/*@ spec_public */
/*@
      public invariant decPart >= 0 && decPart < PRECISION ;
      public invariant intPart >= 0 && intPart <= MAX_DECIMAL_NUMBER;
      public invariant intPart == MAX_DECIMAL_NUMBER ==> decPart == 0;
    */
/*@ spec_public */
/*@ spec_public */
/*@
      public invariant decPart_ >= 0 && decPart_ < PRECISION ;
      public invariant intPart_ >= 0 ;
      public invariant intPart_ == MAX_DECIMAL_NUMBER ==> decPart_ == 0;
    */
/*@ spec_public */
/*@ spec_public */
/*@ spec_public */
/*@
      requires true;
      ensures intPart == 0 && decPart == 0;
      ensures \fresh(this);
    */
/*@
      requires v >= 0;
      ensures intPart == v && decPart == 0;
      ensures \fresh(this);
      exsures (ISOException) false;
    */
//@ unreachable;

/*@
      requires i >= 0 && d >= 0 && d < PRECISION;
      requires i == MAX_DECIMAL_NUMBER ==> d == 0;
      ensures intPart == i && decPart == d;
      ensures \fresh(this);
      exsures (ISOException) false; assignable \everything;
    */
//@ unreachable;

/*@
      requires d != null;
      ensures intPart == d.intPart && decPart == d.decPart;
      ensures \fresh(this);
      exsures (ISOException) false;
    */
//@ unreachable;

/*@
      modifies intPart, decPart;
      requires d != null;
//       ensures intPart * PRECISION + decPart ==
//                 \old(intPart * PRECISION + decPart) +
//                 d.intPart * PRECISION + d.decPart;
      ensures \result == this ;
      exsures (DecimalException) intPart < 0 ;
     */
/*@
      requires d != null;
      modifies intPart, decPart;
//       ensures intPart * PRECISION + decPart ==
//                 \old(intPart * PRECISION + decPart) -
//                 d.intPart * PRECISION + d.decPart;
      ensures \result == this;
      exsures (DecimalException) intPart < 0;
    */
/*@
      modifies intPart, decPart;
      requires d != null ;
//       ensures intPart * PRECISION + decPart ==
//                 \old(intPart * PRECISION + decPart) *
//                 (d.intPart * PRECISION + d.decPart);
      ensures \result == this ;
      exsures (DecimalException) intPart < 0 ;
    */
/*@
      modifies intPart, decPart;
      requires true;
      ensures intPart == \old((short)-intPart);
      ensures decPart == \old((short)-decPart);
      ensures \result == this;
      //exsures (RuntimeException) false
    */
/*@ helper */
/*@
      modifies intPart, decPart;
      requires true;
      ensures \result == this;
      ensures decPart == 0;
      ensures intPart == (\old(decPart) >= (PRECISION/2) ?
                              (short)(\old(intPart) + 1) :
                                 (short)(\old(intPart)));
      //exsures (RuntimeException)false
    */
/*@
      //modifies     othing
      requires 0 <= ref && ref <= MAX_DECIMAL_NUMBER;
      ensures \result == (intPart == ref ? ((decPart == 0) ? 0 : 1)
                                         : ((intPart < ref) ? -1 : 1));
      //exsures (RuntimeException)false
    */
/*@
      //modifies     othing
      requires true;
      ensures \result == (intPart == 0 && decPart == 0);
      //exsures (RuntimeException)false
    */
/*@
      //modifies     othing
      requires true;
      ensures \result;
      //exsures (RuntimeException)false
    */
/*@
      //modifies     othing
      requires true;
      ensures \result == false;
      //exsures (RuntimeException)false
    */
/*@
      //modifies     othing
      requires d != null;
      ensures \result == ((intPart * PRECISION + decPart >
                           d.intPart * PRECISION + d.decPart) ||
                          (intPart * PRECISION + decPart ==
                           d.intPart * PRECISION + d.decPart));
      //exsures (RuntimeException)false
    */
/*@
      //modifies     othing
      requires d != null;
//       ensures \result == (intPart * PRECISION + decPart <=
//                           d.intPart * PRECISION + d.decPart);
      //exsures (RuntimeException)false
    */
/*@
      //modifies     othing
      requires d != null;
//       ensures \result == (intPart * PRECISION + decPart >
//                           d.intPart * PRECISION + d.decPart);
      //exsures (RuntimeException)false
    */
/*@
      //modifies     othing
      requires d != null;
//       ensures \result == (d.intPart * PRECISION + d.decPart >
//                           intPart * PRECISION + decPart);
      //exsures (RuntimeException)false
    */
/*@
      //modifies     othing
      requires d != null;
      ensures \result == (intPart == d.intPart &&
                          decPart == d.decPart);
      //exsures (RuntimeException)false
    */
/*@
      requires true;
      ensures intPart == v ;
      ensures decPart == (short) 0 ;
      ensures \result == this;
      exsures (DecimalException) v < 0;
    */
/*@
      requires true;
      ensures intPart == i && decPart == d ;
      ensures \result == this;
      exsures (DecimalException) i < 0 || d < 0 || d >= PRECISION ||
                                 (i == MAX_DECIMAL_NUMBER && d != 0);
    */
/*@
      requires d != null ;
      ensures intPart == d.intPart ;
      ensures decPart == d.decPart ;
      ensures \result == this ;
      exsures (DecimalException) false ;
    */
/*@
      //modifies     othing
      requires true;
      ensures \result == intPart;
      //exsures (RuntimeException)false
    */
/*@
      //modifies     othing;
      requires true ;
      ensures \result == decPart;
      //exsures (RuntimeException)false
    */
/*@
      modifies intPart, decPart;
      requires true;
      ensures intPart == \old(intPart) && decPart == \old(decPart);
      ensures \result == (decPart >= PRECISION/2 ?
                          intPart + 1:
                          intPart);
      //exsures (RuntimeException)false
    */
/*@
      modifies bArray[off], bArray[off+1], bArray[off+2], bArray[off+3];
      requires bArray != null ;
      requires off >= 0;
      requires off + 3 < bArray.length;
      ensures \result == off+4 ;
      exsures (ArrayIndexOutOfBoundsException) false;
    */
/*@
      modifies intPart_, decPart_, depth;
      requires true;
      ensures (depth < MAX_DEPTH) ==> (intPart_ == intPart &&
                                       decPart_ == decPart &&
                                       depth == (byte) (\old(depth) + 1));
      //exsures (RuntimeException)false
    */
/*@
      modifies intPart, decPart, depth;
      requires true;
      ensures (depth > 0) ==> (intPart == intPart_ &&
                               decPart == decPart_ &&
                               depth == (byte)(\old(depth) - 1));
      //exsures (RuntimeException)false
    */
/*@
      modifies intPart, decPart ;
      requires true ;
//       ensures intPart * PRECISION + decPart ==
//                \old(intPart * PRECISION + decPart) + (e * PRECISION + f);
      //exsures (RuntimeException)false;
    */
//@ nowarn;

/*@
      modifies intPart, decPart;
      requires true ;
//       ensures intPart * PRECISION + decPart ==
//               \old(intPart * PRECISION + decPart) * (e * PRECISION + f);
      // exsures (RuntimeException)false;
    */
//@ assume aux != 0;

//@ nowarn;

/*@ spec_public */
/*@
      public invariant decPart >= 0 && decPart < PRECISION ;
      public invariant intPart >= 0 && intPart <= MAX_DECIMAL_NUMBER;
      public invariant intPart == MAX_DECIMAL_NUMBER ==> decPart == 0;
    */
/*@ spec_public */
/*@ spec_public */
/*@
      public invariant decPart_ >= 0 && decPart_ < PRECISION ;
      public invariant intPart_ >= 0 ;
      public invariant intPart_ == MAX_DECIMAL_NUMBER ==> decPart_ == 0;
    */
/*@ spec_public */
/*@ spec_public */
/*@ spec_public */
/*@
      requires true;
      ensures intPart == 0 && decPart == 0;
      ensures \fresh(this);
    */
/*@
      requires v >= 0;
      ensures intPart == v && decPart == 0;
      ensures \fresh(this);
      exsures (ISOException) false;
    */
//@ unreachable;

/*@
      requires i >= 0 && d >= 0 && d < PRECISION;
      requires i == MAX_DECIMAL_NUMBER ==> d == 0;
      ensures intPart == i && decPart == d;
      ensures \fresh(this);
      exsures (ISOException) false; assignable \everything;
    */
//@ unreachable;

/*@
      requires d != null;
      ensures intPart == d.intPart && decPart == d.decPart;
      ensures \fresh(this);
      exsures (ISOException) false;
    */
//@ unreachable;

/*@
      modifies intPart, decPart;
      requires d != null;
//       ensures intPart * PRECISION + decPart ==
//                 \old(intPart * PRECISION + decPart) +
//                 d.intPart * PRECISION + d.decPart;
      ensures \result == this ;
      exsures (DecimalException) intPart < 0 ;
     */
/*@
      requires d != null;
      modifies intPart, decPart;
//       ensures intPart * PRECISION + decPart ==
//                 \old(intPart * PRECISION + decPart) -
//                 d.intPart * PRECISION + d.decPart;
      ensures \result == this;
      exsures (DecimalException) intPart < 0;
    */
/*@
      modifies intPart, decPart;
      requires d != null ;
//       ensures intPart * PRECISION + decPart ==
//                 \old(intPart * PRECISION + decPart) *
//                 (d.intPart * PRECISION + d.decPart);
      ensures \result == this ;
      exsures (DecimalException) intPart < 0 ;
    */
/*@
      modifies intPart, decPart;
      requires true;
      ensures intPart == \old((short)-intPart);
      ensures decPart == \old((short)-decPart);
      ensures \result == this;
      //exsures (RuntimeException) false
    */
/*@ helper */
/*@
      modifies intPart, decPart;
      requires true;
      ensures \result == this;
      ensures decPart == 0;
      ensures intPart == (\old(decPart) >= (PRECISION/2) ?
                              (short)(\old(intPart) + 1) :
                                 (short)(\old(intPart)));
      //exsures (RuntimeException)false
    */
/*@
      //modifies     othing
      requires 0 <= ref && ref <= MAX_DECIMAL_NUMBER;
      ensures \result == (intPart == ref ? ((decPart == 0) ? 0 : 1)
                                         : ((intPart < ref) ? -1 : 1));
      //exsures (RuntimeException)false
    */
/*@
      //modifies     othing
      requires true;
      ensures \result == (intPart == 0 && decPart == 0);
      //exsures (RuntimeException)false
    */
/*@
      //modifies     othing
      requires true;
      ensures \result;
      //exsures (RuntimeException)false
    */
/*@
      //modifies     othing
      requires true;
      ensures \result == false;
      //exsures (RuntimeException)false
    */
/*@
      //modifies     othing
      requires d != null;
      ensures \result == ((intPart * PRECISION + decPart >
                           d.intPart * PRECISION + d.decPart) ||
                          (intPart * PRECISION + decPart ==
                           d.intPart * PRECISION + d.decPart));
      //exsures (RuntimeException)false
    */
/*@
      //modifies     othing
      requires d != null;
//       ensures \result == (intPart * PRECISION + decPart <=
//                           d.intPart * PRECISION + d.decPart);
      //exsures (RuntimeException)false
    */
/*@
      //modifies     othing
      requires d != null;
//       ensures \result == (intPart * PRECISION + decPart >
//                           d.intPart * PRECISION + d.decPart);
      //exsures (RuntimeException)false
    */
/*@
      //modifies     othing
      requires d != null;
//       ensures \result == (d.intPart * PRECISION + d.decPart >
//                           intPart * PRECISION + decPart);
      //exsures (RuntimeException)false
    */
/*@
      //modifies     othing
      requires d != null;
      ensures \result == (intPart == d.intPart &&
                          decPart == d.decPart);
      //exsures (RuntimeException)false
    */
/*@
      requires true;
      ensures intPart == v ;
      ensures decPart == (short) 0 ;
      ensures \result == this;
      exsures (DecimalException) v < 0;
    */
/*@
      requires true;
      ensures intPart == i && decPart == d ;
      ensures \result == this;
      exsures (DecimalException) i < 0 || d < 0 || d >= PRECISION ||
                                 (i == MAX_DECIMAL_NUMBER && d != 0);
    */
/*@
      requires d != null ;
      ensures intPart == d.intPart ;
      ensures decPart == d.decPart ;
      ensures \result == this ;
      exsures (DecimalException) false ;
    */
/*@
      //modifies     othing
      requires true;
      ensures \result == intPart;
      //exsures (RuntimeException)false
    */
/*@
      //modifies     othing;
      requires true ;
      ensures \result == decPart;
      //exsures (RuntimeException)false
    */
/*@
      modifies intPart, decPart;
      requires true;
      ensures intPart == \old(intPart) && decPart == \old(decPart);
      ensures \result == (decPart >= PRECISION/2 ?
                          intPart + 1:
                          intPart);
      //exsures (RuntimeException)false
    */
/*@
      modifies bArray[off], bArray[off+1], bArray[off+2], bArray[off+3];
      requires bArray != null ;
      requires off >= 0;
      requires off + 3 < bArray.length;
      ensures \result == off+4 ;
      exsures (ArrayIndexOutOfBoundsException) false;
    */
/*@
      modifies intPart_, decPart_, depth;
      requires true;
      ensures (depth < MAX_DEPTH) ==> (intPart_ == intPart &&
                                       decPart_ == decPart &&
                                       depth == (byte) (\old(depth) + 1));
      //exsures (RuntimeException)false
    */
/*@
      modifies intPart, decPart, depth;
      requires true;
      ensures (depth > 0) ==> (intPart == intPart_ &&
                               decPart == decPart_ &&
                               depth == (byte)(\old(depth) - 1));
      //exsures (RuntimeException)false
    */
/*@
      modifies intPart, decPart ;
      requires true ;
//       ensures intPart * PRECISION + decPart ==
//                \old(intPart * PRECISION + decPart) + (e * PRECISION + f);
      //exsures (RuntimeException)false;
    */
//@ nowarn;

/*@
      modifies intPart, decPart;
      requires true ;
//       ensures intPart * PRECISION + decPart ==
//               \old(intPart * PRECISION + decPart) * (e * PRECISION + f);
      // exsures (RuntimeException)false;
    */
//@ assume aux != 0;

//@ nowarn;

//@ assert false;

//@ assert false;

//@ assert true;

//@ assert true;

//@ ghost int i = 0; // No errors

//@ ghost int i = 0; // No errors

//@ ghost int i = true; // Error to provoke a message

//@ ghost int i = true; // Error to provoke a message

//@ ghost int i = ; // Parse error to provoke a message

//@ ghost int i = ; // Parse error to provoke a message

//@ ghost int i = 0; // No errors

//@ ghost int i = 0; // No errors

//@ ghost int i = 0; // No errors

//@ ghost int i = 0; // No errors

//@ requires z ; // BAD

//@ requires z ; // BAD

//@ requires z ; // BAD

//@ loop_invariant 0 <= j && j <= 10;

//@ loop_decreases 10 - j;

//@ loop_invariant 0 <= i && i <= 10;

//@ loop_decreases 10 - i;

//@ loop_invariant 0 <= i && i <= 10;

//@ loop_decreases 10 - i;

//@ loop_invariant 0 <= i && i <= 10;

//@ loop_decreases 10 - i;

//@ loop_invariant 0 <= j && j <= 10;

//@ loop_decreases 10 - j;

//@ loop_invariant 0 <= i && i <= 10;

//@ loop_decreases 10 - i;

//@ loop_invariant 0 <= i && i <= 10;

//@ loop_decreases 10 - i;

//@ loop_invariant 0 <= i && i <= 10;

//@ loop_decreases 10 - i;

//@ ensures \result == (\sum int i; 0 <= i && i < a.length; a[i]);

//@ loop_invariant 0 <= \count && \count <= a.length;

//@ loop_invariant sum == (\sum int j; 0<=j && j<\count; a[j]);

//@ ensures \result == (\sum int i; 0 <= i && i < a.length; a[i]);

//@ loop_invariant 0 <= \count && \count <= a.length;

//@ loop_invariant sum == (\sum int j; 0<=j && j<\count; a[j]);

//@ assert args.length != 2;

//@ assert args.length != 2;

//@ ghost int t = (1,e,4). 1;

//@ ghost int v = (1,e,4).3;

//@ set (t,v) = (2,3);

//@ set (t,v) = (2,e);

//@ set (t,v) = (e,e);

//@ set (t,v) = (2,3,4);

//@ set (t,v) = 2;

//@ ghost Integer w = (1,e,4).2;

//@ ghost String s;

//@ ghost Boolean ss;

//@ set (t,ss,w,s) = 2;

//@ set v = (1,e,4).0;

//@ set v = (1,e,4).4;

//@ set v = (1,e,4).a;

//@ set v = e.4;

//@ ghost int t = (1,e,4). 1;

//@ ghost int v = (1,e,4).3;

//@ set (t,v) = (2,3);

//@ set (t,v) = (2,e);

//@ set (t,v) = (e,e);

//@ set (t,v) = (2,3,4);

//@ set (t,v) = 2;

//@ ghost Integer w = (1,e,4).2;

//@ ghost String s;

//@ ghost Boolean ss;

//@ set (t,ss,w,s) = 2;

//@ set v = (1,e,4).0;

//@ set v = (1,e,4).4;

//@ set v = (1,e,4).a;

//@ set v = e.4;

//@ ghost int t = 1;

//@ ghost int v = 2;

//@ set (t,v) = (v+10,t+20);

//@ assert t == 12;

//@ assert v == 21;

//@ set (t,v) = t+10;

//@ assert t == 22;

//@ assert v == 22;

//@ ghost int t = 1;

//@ ghost int v = 2;

//@ set (t,v) = (v+10,t+20);

//@ assert t == 12;

//@ assert v == 21;

//@ set (t,v) = t+10;

//@ assert t == 22;

//@ assert v == 22;

/*@ spec_public */
/*@ spec_public */
/*@ requires length < 10;
	  @ requires !contains(value);
	  @ ensures length == \old(length) + 1;
	  @*/
/*@ requires index < length;
	  @ ensures \result == values[index];
	  @*/
/*@ pure */
/*@
	  @ requires index1 < length;
	  @ requires index2 < length;
	  @ ensures values[index1] == \old(values[index2]);
	  @ ensures values[index2] == \old(values[index1]);
	  @ pure
	  @*/
/*@
	  @ requires contains(value);
	  @ ensures !contains(value);
	  @ ensures \old(values)[\result] == value;
	  @ ensures \result == \old(find(value));
	  @ ensures length == \old(length) - 1;
	  @*/
/*@
	  @ ensures \result >= 0;
	  @ ensures \result <= length;
	  @ ensures contains(value) ==> value == values[\result];
	  @ ensures !contains(value) ==> \result == length;
      @ pure
	  @*/
/*@
	  @ ensures \result == (\exists int i; 0 <= i && i < length; value == values[i]);
      @ pure
	  @*/
/*@ spec_public */
/*@ spec_public */
/*@ requires length < 10;
	  @ requires !contains(value);
	  @ ensures length == \old(length) + 1;
	  @*/
/*@ requires index < length;
	  @ ensures \result == values[index];
	  @*/
/*@ pure */
/*@
	  @ requires index1 < length;
	  @ requires index2 < length;
	  @ ensures values[index1] == \old(values[index2]);
	  @ ensures values[index2] == \old(values[index1]);
	  @ pure
	  @*/
/*@
	  @ requires contains(value);
	  @ ensures !contains(value);
	  @ ensures \old(values)[\result] == value;
	  @ ensures \result == \old(find(value));
	  @ ensures length == \old(length) - 1;
	  @*/
/*@
	  @ ensures \result >= 0;
	  @ ensures \result <= length;
	  @ ensures contains(value) ==> value == values[\result];
	  @ ensures !contains(value) ==> \result == length;
      @ pure
	  @*/
/*@
	  @ ensures \result == (\exists int i; 0 <= i && i < length; value == values[i]);
      @ pure
	  @*/
/*@ spec_public */
/*@ spec_public */
/*@ requires length < 10;
	  @ requires !contains(value);
	  @ ensures length == \old(length) + 1;
	  @*/
/*@ requires index < length;
	  @ ensures \result == values[index];
	  @*/
/*@ pure */
/*@
	  @ requires index1 < length;
	  @ requires index2 < length;
	  @ ensures values[index1] == \old(values[index2]);
	  @ ensures values[index2] == \old(values[index1]);
	  @*/
/*@
	  @ requires contains(value);
	  @ ensures !contains(value);
	  @ ensures \old(values)[\result] == value;
	  @ ensures \result == \old(find(value));
	  @ ensures length == \old(length) - 1;
	  @*/
/*@
	  @ ensures \result >= 0;
	  @ ensures \result <= length;
	  @ ensures contains(value) ==> value == values[\result];
	  @ ensures !contains(value) ==> \result == length;
      @ pure
	  @*/
/*@
	  @ ensures \result == (\exists int i; 0 <= i && i < length; value == values[i]);
      @ pure
	  @*/
/*@ spec_public */
/*@ spec_public */
/*@ requires length < 10;
	  @ requires !contains(value);
	  @ ensures length == \old(length) + 1;
	  @*/
/*@ requires index < length;
	  @ ensures \result == values[index];
	  @*/
/*@ pure */
/*@
	  @ requires index1 < length;
	  @ requires index2 < length;
	  @ ensures values[index1] == \old(values[index2]);
	  @ ensures values[index2] == \old(values[index1]);
	  @*/
/*@
	  @ requires contains(value);
	  @ ensures !contains(value);
	  @ ensures \old(values)[\result] == value;
	  @ ensures \result == \old(find(value));
	  @ ensures length == \old(length) - 1;
	  @*/
/*@
	  @ ensures \result >= 0;
	  @ ensures \result <= length;
	  @ ensures contains(value) ==> value == values[\result];
	  @ ensures !contains(value) ==> \result == length;
      @ pure
	  @*/
/*@
	  @ ensures \result == (\exists int i; 0 <= i && i < length; value == values[i]);
      @ pure
	  @*/
/*@ spec_public */
/*@ spec_public */
/*@ requires length < 10;
	  @ ensures length == \old(length) + 1;
	  @ requires (\forall int i; 0 <= i && i < length; values[i] != value);
	  @*/
/*@ requires index < length;
	  @ ensures \result == values[index];
	  @*/
/*@ pure */
/*@
	  @ requires index1 < length;
	  @ requires index2 < length;
	  @ ensures values[index1] == \old(values[index2]);
	  @ ensures values[index2] == \old(values[index1]);
	  @*/
/*@ spec_public */
/*@ spec_public */
/*@ requires length < 10;
	  @ ensures length == \old(length) + 1;
	  @ requires (\forall int i; 0 <= i && i < length; values[i] != value);
	  @*/
/*@ requires index < length;
	  @ ensures \result == values[index];
	  @*/
/*@ pure */
/*@
	  @ requires index1 < length;
	  @ requires index2 < length;
	  @ ensures values[index1] == \old(values[index2]);
	  @ ensures values[index2] == \old(values[index1]);
	  @*/
//@ pure

//@ public normal_behavior

//@ ensures string.empty().isEmpty();

//@ ensures string.empty().size() == 0;

//@ model public static void newStringIsEmpty() {}

//@ public normal_behavior

//@ ensures string.string("abc").size() == 3;

//@ model public static void newStringFromString() {}  // FIXME - does not yet work

//@ public normal_behavior

//@ ensures s.add('c').size() == 1 + s.size();

//@ model public static void addBumpsSize(string s) {}

//@ public normal_behavior

//@ requires 0 <= i && i <= s.size();

//@ ensures s.add(i,'c').size() == 1 + s.size();

//@ model public static void addBumpsSize(string s, \bigint i) {}

//@ public normal_behavior

//@ requires 0 <= k && k < s.size();

//@ ensures s.remove(k).size() == s.size() - 1;

//@ model public static <T> void removeLowersSize(string s, int k) {}

//@ public normal_behavior

//@   requires i >= 0 && i <= s.size();

//@   ensures string.equals(s.add(i,'c').remove(i), s);

//@ model public static void addRemove(string s, \bigint i) { show i, s.size(); }

//@ public normal_behavior

//@   requires i >= 0 && i <= s.size();

//@   requires 0 <= k && k < i;

//@   ensures s.add(i,'c').get(k) == s.get(k);

//@ model public static void addGet1(string s, \bigint i, \bigint k) { }

//@ public normal_behavior

//@   requires i >= 0 && i <= s.size();

//@   requires i < k && k <= s.size();

//@   ensures s.add(i,'c').get(k) == s.get(k-1);

//@ model public static void addGet2(string s, \bigint i, \bigint k) { show i, k, s.size();  }

//@ public normal_behavior

//@   requires i >= 0 && i <= s.size();

//@   ensures s.add(i,c).get(i) == c;

//@ model public static void addGet(string s, \bigint i, char c) {}

//@ ensures string.string("abc").get(1) == 'b';

//@ model public static void character() {}  // FIXME - does not yet work

//@ pure

//@ public normal_behavior

//@ ensures string.empty().isEmpty();

//@ ensures string.empty().size() == 0;

//@ model public static void newStringIsEmpty() {}

//@ public normal_behavior

//@ ensures string.string("abc").size() == 3;

//@ model public static void newStringFromString() {}  // FIXME - does not yet work

//@ public normal_behavior

//@ ensures s.add('c').size() == 1 + s.size();

//@ model public static void addBumpsSize(string s) {}

//@ public normal_behavior

//@ requires 0 <= i && i <= s.size();

//@ ensures s.add(i,'c').size() == 1 + s.size();

//@ model public static void addBumpsSize(string s, \bigint i) {}

//@ public normal_behavior

//@ requires 0 <= k && k < s.size();

//@ ensures s.remove(k).size() == s.size() - 1;

//@ model public static <T> void removeLowersSize(string s, int k) {}

//@ public normal_behavior

//@   requires i >= 0 && i <= s.size();

//@   ensures string.equals(s.add(i,'c').remove(i), s);

//@ model public static void addRemove(string s, \bigint i) { show i, s.size(); }

//@ public normal_behavior

//@   requires i >= 0 && i <= s.size();

//@   requires 0 <= k && k < i;

//@   ensures s.add(i,'c').get(k) == s.get(k);

//@ model public static void addGet1(string s, \bigint i, \bigint k) { }

//@ public normal_behavior

//@   requires i >= 0 && i <= s.size();

//@   requires i < k && k <= s.size();

//@   ensures s.add(i,'c').get(k) == s.get(k-1);

//@ model public static void addGet2(string s, \bigint i, \bigint k) { show i, k, s.size();  }

//@ public normal_behavior

//@   requires i >= 0 && i <= s.size();

//@   ensures s.add(i,c).get(i) == c;

//@ model public static void addGet(string s, \bigint i, char c) {}

//@ ensures string.string("abc").get(1) == 'b';

//@ model public static void character() {}  // FIXME - does not yet work

//@ model import org.jmlspecs.lang.set;

//@ pure

//@ public normal_behavior

//@ ensures locset.locset().empty();

//@ model public static void newLocSetIsEmpty() {}

//@ public normal_behavior

//@ ensures locset.locset().add(o).size() == 1;

//@ model public static void singleton(location o) {}

//@ public normal_behavior

//@ ensures !s.contains(o) ==> s.add(o).size() == 1 + s.size();

//@ model public static void addBumpsSize(locset s, location o) {}

//@ public normal_behavior

//@ ensures s.contains(o) ==> s == s.add(o);

//@ ensures s.contains(o) ==> s.add(o).size() == s.size();

//@ model public static void addDoesNotChangeSize(locset s, location o) {}

//@ public normal_behavior

//@ ensures !s.contains(o) ==> locset.equals(s.add(o).remove(o), s);

//@ model public static void addRemove(locset s, location o) {}

//@ public normal_behavior

//@ ensures s.contains(o) ==> locset.equals(s.add(o), s);

//@ model public static void addNoChange(locset s, location o) {}

//@ public normal_behavior

//@ ensures !s.contains(o) ==> locset.equals(s, s.remove(o));

//@ model public static void addRemoveA(locset s, location o) {}

//@ public normal_behavior

//@ ensures s.contains(o) ==> s.remove(o).size() == s.size() - 1;

//@ model public static void addRemoveB(locset s, location o) {}

//@ ghost locset s = locset.locset();

//@ ghost locset ss = s;

//@ ghost \locset sss = s;

//@ assert s == ss;

//@ assert ss == sss;

//@ model import org.jmlspecs.lang.set;

//@ pure

//@ public normal_behavior

//@ ensures locset.locset().empty();

//@ model public static void newLocSetIsEmpty() {}

//@ public normal_behavior

//@ ensures locset.locset().add(o).size() == 1;

//@ model public static void singleton(location o) {}

//@ public normal_behavior

//@ ensures !s.contains(o) ==> s.add(o).size() == 1 + s.size();

//@ model public static void addBumpsSize(locset s, location o) {}

//@ public normal_behavior

//@ ensures s.contains(o) ==> s == s.add(o);

//@ ensures s.contains(o) ==> s.add(o).size() == s.size();

//@ model public static void addDoesNotChangeSize(locset s, location o) {}

//@ public normal_behavior

//@ ensures !s.contains(o) ==> locset.equals(s.add(o).remove(o), s);

//@ model public static void addRemove(locset s, location o) {}

//@ public normal_behavior

//@ ensures s.contains(o) ==> locset.equals(s.add(o), s);

//@ model public static void addNoChange(locset s, location o) {}

//@ public normal_behavior

//@ ensures !s.contains(o) ==> locset.equals(s, s.remove(o));

//@ model public static void addRemoveA(locset s, location o) {}

//@ public normal_behavior

//@ ensures s.contains(o) ==> s.remove(o).size() == s.size() - 1;

//@ model public static void addRemoveB(locset s, location o) {}

//@ ghost locset s = locset.locset();

//@ ghost locset ss = s;

//@ ghost \locset sss = s;

//@ assert s == ss;

//@ assert ss == sss;

//@ ghost array<Short> arx = args.array; // ERROR

//@ ghost array<Integer> ar = a.array; // OK

//@ ghost int kk = this.array;

//@ ghost array<Short> arx = args.array; // ERROR

//@ ghost array<Integer> ar = a.array; // OK

//@ ghost int kk = this.array;

//@ pure

//@ ensures map.<K,V>empty().isEmpty();

//@ ensures map.<K,V>empty().size() == 0;

//@ model public static <K,V> void newMapIsEmpty() {}

//@ ensures !s.containsKey(k) ==> s.put(k,v).size() == 1 + s.size();

//@ model public static <K,V> void putBumpsSize(map<K,V> s, K k, V v) {}

//@ ensures s.containsKey(k) ==> s.put(k,v).size() == s.size();

//@ model public static <K,V> void putDoesNotChangeSize(map<K,V> s, K k, V v) {}

//@ public normal_behavior

//@   requires !s.containsKey(k);

//@   requires k != kk;

//@   ensures !s.put(k,v).remove(k).containsKey(k);

//@   ensures s.size() == s.put(k,v).remove(k).size();

//@   ensures s.put(k,v).remove(k).containsKey(kk) == s.containsKey(kk);

//@   ensures map.equals(s, s.put(k,v).remove(k));

//@ model public static <K,V> void putRemove(map<K,V> s, K k, V v, K kk) {}

//@ public normal_behavior

//@   requires !s.containsKey(k);

//@   ensures !s.put(k,v).remove(k).containsKey(k);

//@   ensures s.size() == s.put(k,v).remove(k).size();

//@   ensures (\forall K kk; k != kk ; s.put(k,v).remove(k).containsKey(kk) == s.containsKey(kk));

//@   ensures map.equals(s, s.put(k,v).remove(k));

//@ model public static <K,V> void putRemoveA(map<K,V> s, K k, V v) {}

//@ public normal_behavior

//@   ensures s.keySet().contains(k) == s.containsKey(k);

//@ model public static <K,V> void keyset(map<K,V> s, K k) {}

//@ public normal_behavior

//@   ensures s.containsKey(k) ==> map.equals(s, s.put(k,s.get(k)));

//@ model public static <K,V> void putNoChange(map<K,V> s, K k) {}

//@ public normal_behavior

//@   ensures !s.containsKey(k) ==> (s == s.remove(k));

//@ model public static <K,V> void addRemove(map<K,V> s, K k) {}

//@ public normal_behavior

//@   ensures s.containsKey(o) ==> s.remove(o).size() == s.size() - 1;

//@ model public static <K,V> void addRemoveB(map<K,V> s, K o) {}

//@ pure

//@ ensures map.<K,V>empty().isEmpty();

//@ ensures map.<K,V>empty().size() == 0;

//@ model public static <K,V> void newMapIsEmpty() {}

//@ ensures !s.containsKey(k) ==> s.put(k,v).size() == 1 + s.size();

//@ model public static <K,V> void putBumpsSize(map<K,V> s, K k, V v) {}

//@ ensures s.containsKey(k) ==> s.put(k,v).size() == s.size();

//@ model public static <K,V> void putDoesNotChangeSize(map<K,V> s, K k, V v) {}

//@ public normal_behavior

//@   requires !s.containsKey(k);

//@   requires k != kk;

//@   ensures !s.put(k,v).remove(k).containsKey(k);

//@   ensures s.size() == s.put(k,v).remove(k).size();

//@   ensures s.put(k,v).remove(k).containsKey(kk) == s.containsKey(kk);

//@   ensures map.equals(s, s.put(k,v).remove(k));

//@ model public static <K,V> void putRemove(map<K,V> s, K k, V v, K kk) {}

//@ public normal_behavior

//@   requires !s.containsKey(k);

//@   ensures !s.put(k,v).remove(k).containsKey(k);

//@   ensures s.size() == s.put(k,v).remove(k).size();

//@   ensures (\forall K kk; k != kk ; s.put(k,v).remove(k).containsKey(kk) == s.containsKey(kk));

//@   ensures map.equals(s, s.put(k,v).remove(k));

//@ model public static <K,V> void putRemoveA(map<K,V> s, K k, V v) {}

//@ public normal_behavior

//@   ensures s.keySet().contains(k) == s.containsKey(k);

//@ model public static <K,V> void keyset(map<K,V> s, K k) {}

//@ public normal_behavior

//@   ensures s.containsKey(k) ==> map.equals(s, s.put(k,s.get(k)));

//@ model public static <K,V> void putNoChange(map<K,V> s, K k) {}

//@ public normal_behavior

//@   ensures !s.containsKey(k) ==> (s == s.remove(k));

//@ model public static <K,V> void addRemove(map<K,V> s, K k) {}

//@ public normal_behavior

//@   ensures s.containsKey(o) ==> s.remove(o).size() == s.size() - 1;

//@ model public static <K,V> void addRemoveB(map<K,V> s, K o) {}

//@ pure

//@ ensures seq.<T>empty().isEmpty();

//@ ensures seq.<T>empty().size() == 0;

//@ model public static <T> void newSeqIsEmpty() {}

//@ ensures s.add(k).size() == 1 + s.size();

//@ model public static <T> void addBumpsSize(seq<T> s, T k) {}

//@ requires 0 <= i && i <= s.size();

//@ ensures s.add(i,k).size() == 1 + s.size();

//@ model public static <T> void addBumpsSize(seq<T> s, T k, \bigint i) {}

//@ requires 0 <= k && k < s.size();

//@ ensures (\lbl RS s.remove(k).size()) == s.size() - 1;

//@ model public static <T> void removeLowersSize(seq<T> s, int k) { show s.size(), k; }

//@ public normal_behavior

//@   requires i >= 0 && i <= s.size();

//@   ensures seq.equals(s.add(i,t).remove(i), s);

//@ model public static <T> void addRemove(seq<T> s, T t, \bigint i) {}

//@ requires s.size() > 100;

/*@ model public void m(seq<\bigint> s) {
//        //@ ghost \bigint b1 = s.get(0);
//        //@ ghost \bigint b2 = s.get(0);
//        //@ assert b1 == b2;
//    }*/
//@ requires s.size() > 100;

/*@ model public void mm(seq<long> s) {
//        //@ ghost long b1 = s.get(0);
//        //@ ghost long b2 = s.get(0);
//        //@ assert b1 == b2;
//    }*/
//@ pure

//@ ensures seq.<T>empty().isEmpty();

//@ ensures seq.<T>empty().size() == 0;

//@ model public static <T> void newSeqIsEmpty() {}

//@ ensures s.add(k).size() == 1 + s.size();

//@ model public static <T> void addBumpsSize(seq<T> s, T k) {}

//@ requires 0 <= i && i <= s.size();

//@ ensures s.add(i,k).size() == 1 + s.size();

//@ model public static <T> void addBumpsSize(seq<T> s, T k, \bigint i) {}

//@ requires 0 <= k && k < s.size();

//@ ensures (\lbl RS s.remove(k).size()) == s.size() - 1;

//@ model public static <T> void removeLowersSize(seq<T> s, int k) { show s.size(), k; }

//@ public normal_behavior

//@   requires i >= 0 && i <= s.size();

//@   ensures seq.equals(s.add(i,t).remove(i), s);

//@ model public static <T> void addRemove(seq<T> s, T t, \bigint i) {}

//@ requires s.size() > 100;

/*@ model public void m(seq<\bigint> s) {
//        //@ ghost \bigint b1 = s.get(0);
//        //@ ghost \bigint b2 = s.get(0);
//        //@ assert b1 == b2;
//    }*/
//@ requires s.size() > 100;

/*@ model public void mm(seq<long> s) {
//        //@ ghost long b1 = s.get(0);
//        //@ ghost long b2 = s.get(0);
//        //@ assert b1 == b2;
//    }*/
//@ model import org.jmlspecs.lang.set;

//@ pure

//@ public normal_behavior

//@ ensures set.<T>set().empty();

//@ model public static <T> void newSetIsEmpty() {}

//@ public normal_behavior

//@ ensures set.<T>set().add(o).size() == 1;

//@ model public static <T> void singleton(T o) {}

//@ public normal_behavior

//@ ensures !s.contains(o) ==> s.add(o).size() == 1 + s.size();

//@ model public static <T> void addBumpsSize(set<T> s, T o) {}

//@ public normal_behavior

//@ ensures s.contains(o) ==> s.add(o).size() == s.size();

//@ model public static <T> void addDoesNotChangeSize(set<T> s, T o) {}

//@ public normal_behavior

//@ ensures !s.contains(o) ==> set.equals(s.add(o).remove(o), s);

//@ model public static <T> void addRemove(set<T> s, T o) {}

//@ public normal_behavior

//@ ensures s.contains(o) ==> set.equals(s.add(o), s);

//@ model public static <T> void addNoChange(set<T> s, T o) {}

//@ public normal_behavior

//@ ensures !s.contains(o) ==> set.equals(s, s.remove(o));

//@ model public static <T> void addRemoveA(set<T> s, T o) {}

//@ public normal_behavior

//@ ensures s.contains(o) ==> s.remove(o).size() == s.size() - 1;

//@ model public static <T> void addRemoveB(set<T> s, T o) {}

//@ model import org.jmlspecs.lang.set;

//@ pure

//@ public normal_behavior

//@ ensures set.<T>set().empty();

//@ model public static <T> void newSetIsEmpty() {}

//@ public normal_behavior

//@ ensures set.<T>set().add(o).size() == 1;

//@ model public static <T> void singleton(T o) {}

//@ public normal_behavior

//@ ensures !s.contains(o) ==> s.add(o).size() == 1 + s.size();

//@ model public static <T> void addBumpsSize(set<T> s, T o) {}

//@ public normal_behavior

//@ ensures s.contains(o) ==> s.add(o).size() == s.size();

//@ model public static <T> void addDoesNotChangeSize(set<T> s, T o) {}

//@ public normal_behavior

//@ ensures !s.contains(o) ==> set.equals(s.add(o).remove(o), s);

//@ model public static <T> void addRemove(set<T> s, T o) {}

//@ public normal_behavior

//@ ensures s.contains(o) ==> set.equals(s.add(o), s);

//@ model public static <T> void addNoChange(set<T> s, T o) {}

//@ public normal_behavior

//@ ensures !s.contains(o) ==> set.equals(s, s.remove(o));

//@ model public static <T> void addRemoveA(set<T> s, T o) {}

//@ public normal_behavior

//@ ensures s.contains(o) ==> s.remove(o).size() == s.size() - 1;

//@ model public static <T> void addRemoveB(set<T> s, T o) {}

_by_default

//@ public normal_behavior

//@   ensures \result == oo.length;

//@ pure

//@ public normal_behavior

//@   requires oo.length > 1;

//@   requires     onnullelements(oo);

//@   ensures \result == oo[0];

//@ pure

//@ assert p == o2;

//@ assert p == o2;

//@ assert p == o2;

//@ assert i == 0;

//@ assert i == 2;

_by_default

//@ public normal_behavior

//@   ensures \result == oo.length;

//@ pure

//@ public normal_behavior

//@   requires oo.length > 1;

//@   requires     onnullelements(oo);

//@   ensures \result == oo[0];

//@ pure

//@ assert p == o2;

//@ assert p == o2;

//@ assert p == o2;

//@ assert i == 0;

//@ assert i == 2;

//@ public normal_behavior

//@ assigns     othing;

//@ ensures \result.length <= a.length/2 + 2; // non-empty

//@ ensures \result[0] == 0 && \result[\result.length-1] == a.length; // begin-to-end

//@ ensures \forall int i; 0 <= i < \result.length; 0 <= \result[i] <= a.length; // within-bounds

//@ ensures \forall int i,j; 0 <= i < \result.length-1 && \result[i] <= j < \result[i+1] - 1; a[\result[i]] < a[\result[i]+1] <==> a[j] < a[j+1]; // monotonic

//@ ensures \forall int i; 0 <= i < \result.length-1; \result[i+1] < a.length ==> (a[\result[i]] < a[\result[i]+1] <=!=> a[\result[i+1]-1] < a[\result[i+1]]); // maximal

//@ ensures \forall int i; 0 <= i < \result.length-1; \result[i] > 0 ==> (a[\result[i]] < a[\result[i]+1] <=!=> a[\result[i]-1] < a[\result[i]]); // maximal

//@ loop_invariant 0 < lengthcut <= y/2+2;

//@ loop_invariant cut[0] == 0; // begin-to-end so far

//@ loop_invariant y == x+1; // initial conditions for modified variables

//@ loop_invariant x == cut[lengthcut-1]; // initial conditions for modified variables

//@ loop_invariant \forall int i; 0 <= i < lengthcut; 0 <= cut[i] <= y; // within bounds so far

//@ loop_invariant \forall int i,j; 0 <= i < lengthcut-1 && cut[i] <= j < cut[i+1] - 1; a[cut[i]] < a[cut[i]+1] <==> a[j] < a[j+1]; // monotonic so far

//@ loop_invariant \forall int i; 0 <= i < lengthcut-1; cut[i+1] < a.length ==> (a[cut[i]] < a[cut[i]+1] <=!=> a[cut[i+1]-1] < a[cut[i+1]]); // maximal so far

//@ loop_invariant \forall int i; 0 <= i < lengthcut-1; cut[i] > 0 ==> (a[cut[i]] < a[cut[i]+1] <=!=> a[cut[i]-1] < a[cut[i]]); // maximal so far

//@ loop_decreases n - y;

//@ loop_invariant x < y <= a.length;  // initial conditions for modified variables

//@ loop_invariant 0 < lengthcut <= y/2+2;

//@ loop_invariant cut[0] == 0; // begin-to-end so far

//@ loop_invariant x == cut[lengthcut-1];  // initial conditions for modified variables

//@ loop_invariant \forall int i; 0 <= i < lengthcut; 0 <= cut[i] <= y; // within bounds so far

//@ loop_invariant \forall int i,j; 0 <= i < lengthcut-1 && cut[i] <= j < cut[i+1] - 1; a[cut[i]] < a[cut[i]+1] <==> a[j] < a[j+1]; // monotonic so far

//@ loop_invariant \forall int j; x <= j < y-1; a[x] < a[x+1] <==> a[j] < a[j+1]; // last segment monotonic so far

//@ loop_invariant \forall int i; 0 <= i < lengthcut-1; cut[i+1] < a.length ==> (a[cut[i]] < a[cut[i]+1] <=!=> a[cut[i+1]-1] < a[cut[i+1]]); // maximal so far

//@ loop_invariant \forall int i; 0 <= i < lengthcut-1; cut[i] > 0 ==> (a[cut[i]] < a[cut[i]+1] <=!=> a[cut[i]-1] < a[cut[i]]); // maximal so far

//@ loop_invariant x > 0 ==> (a[x] < a[x+1] <=!=> a[x-1] < a[x]); // last segment maximal so far

//@ loop_decreases n - y;

//@ public normal_behavior

//@ assigns     othing;

//@ ensures \result.length <= a.length/2 + 2; // non-empty

//@ ensures \result[0] == 0 && \result[\result.length-1] == a.length; // begin-to-end

//@ ensures \forall int i; 0 <= i < \result.length; 0 <= \result[i] <= a.length; // within-bounds

//@ ensures \forall int i,j; 0 <= i < \result.length-1 && \result[i] <= j < \result[i+1] - 1; a[\result[i]] < a[\result[i]+1] <==> a[j] < a[j+1]; // monotonic

//@ ensures \forall int i; 0 <= i < \result.length-1; \result[i+1] < a.length ==> (a[\result[i]] < a[\result[i]+1] <=!=> a[\result[i+1]-1] < a[\result[i+1]]); // maximal

//@ ensures \forall int i; 0 <= i < \result.length-1; \result[i] > 0 ==> (a[\result[i]] < a[\result[i]+1] <=!=> a[\result[i]-1] < a[\result[i]]); // maximal

//@ loop_invariant 0 < lengthcut <= y/2+2;

//@ loop_invariant cut[0] == 0; // begin-to-end so far

//@ loop_invariant y == x+1; // initial conditions for modified variables

//@ loop_invariant x == cut[lengthcut-1]; // initial conditions for modified variables

//@ loop_invariant \forall int i; 0 <= i < lengthcut; 0 <= cut[i] <= y; // within bounds so far

//@ loop_invariant \forall int i,j; 0 <= i < lengthcut-1 && cut[i] <= j < cut[i+1] - 1; a[cut[i]] < a[cut[i]+1] <==> a[j] < a[j+1]; // monotonic so far

//@ loop_invariant \forall int i; 0 <= i < lengthcut-1; cut[i+1] < a.length ==> (a[cut[i]] < a[cut[i]+1] <=!=> a[cut[i+1]-1] < a[cut[i+1]]); // maximal so far

//@ loop_invariant \forall int i; 0 <= i < lengthcut-1; cut[i] > 0 ==> (a[cut[i]] < a[cut[i]+1] <=!=> a[cut[i]-1] < a[cut[i]]); // maximal so far

//@ loop_decreases n - y;

//@ loop_invariant x < y <= a.length;  // initial conditions for modified variables

//@ loop_invariant 0 < lengthcut <= y/2+2;

//@ loop_invariant cut[0] == 0; // begin-to-end so far

//@ loop_invariant x == cut[lengthcut-1];  // initial conditions for modified variables

//@ loop_invariant \forall int i; 0 <= i < lengthcut; 0 <= cut[i] <= y; // within bounds so far

//@ loop_invariant \forall int i,j; 0 <= i < lengthcut-1 && cut[i] <= j < cut[i+1] - 1; a[cut[i]] < a[cut[i]+1] <==> a[j] < a[j+1]; // monotonic so far

//@ loop_invariant \forall int j; x <= j < y-1; a[x] < a[x+1] <==> a[j] < a[j+1]; // last segment monotonic so far

//@ loop_invariant \forall int i; 0 <= i < lengthcut-1; cut[i+1] < a.length ==> (a[cut[i]] < a[cut[i]+1] <=!=> a[cut[i+1]-1] < a[cut[i+1]]); // maximal so far

//@ loop_invariant \forall int i; 0 <= i < lengthcut-1; cut[i] > 0 ==> (a[cut[i]] < a[cut[i]+1] <=!=> a[cut[i]-1] < a[cut[i]]); // maximal so far

//@ loop_invariant x > 0 ==> (a[x] < a[x+1] <=!=> a[x-1] < a[x]); // last segment maximal so far

//@ loop_decreases n - y;

//@ public normal_behavior

//@ assigns     othing;

//@ ensures \result.length == input.length;

//@ ensures \forall int i; 0 <= i < \result.length; \result[i] < i; // left-neighbor is to the left

//@ ensures \forall int i; 0 <= i < \result.length; \result[i] != -1 ==> input[\result[i]] < input[i]; // LN has smaller value

//@ ensures \forall int i; 0 <= i < \result.length; \forall int j; \result[i] < j < i; input[j] >= input[i]; // LN is closest smaller value

//@ loop_invariant 0 <= x <= input.length;

//@ loop_invariant 0 <= height <= x;

//@ loop_invariant \forall int i; 0 <= i < x; left[i] < i;  // so far, all left-neighbors are to the left

//@ loop_invariant \forall int i; 0 <= i < x; left[i] != -1 ==> input[left[i]] < input[i]; // so far, all LNs have smaller values

//@ loop_invariant \forall int i; 0 <= i < x; \forall int j; left[i] < j < i; input[j] >= input[i]; // so far, all LNs are closest smaller values

//@ loop_invariant \forall int i; 0 <= i < height; 0 <= stack[i] < x; // all stack values are legitimate positions

//@ loop_invariant x > 0 ==> height > 0;

//@ loop_invariant height > 0 ==> stack[height-1] == x-1; // x is always one more than top of stack (after the first iteration)

//@ loop_invariant \forall int i; 1 <= i < height; \forall int j; stack[i-1] < j < stack[i]; input[j] >= input[stack[i]]; // items missing from stack are larger than something to their right

//@ loop_invariant height > 0 ==> \forall int j; 0 <= j < stack[0]; input[j] >= input[stack[0]]; // items missing from the stack in the first segment are larger than stack[0]

//@ loop_decreases input.length - x;

//@ loop_invariant 0 <= height <= x;

//@ loop_invariant \forall int i; 0 <= i < x; left[i] < i;   // so far, all left-neighbors are to the left

//@ loop_invariant \forall int i; 0 <= i < height; 0 <= stack[i] < x;  // so far, all LNs have smaller values

//@ loop_invariant \forall int i; 1 <= i < height; \forall int j; stack[i-1] < j < stack[i]; input[j] >= input[stack[i]];  // so far, all LNs are closest smaller values

//@ loop_invariant height > 0 ==> \forall int j; stack[height-1] < j < x; input[j] >= input[x]; // Everything between top of stack and x is larger than va

//@ loop_invariant height == 0 ==> \forall int j; 0 <= j < x; input[j] >= input[x]; // If height is 0, everything to the left is smaller than value at current position

//@ loop_decreases height;

//@ public normal_behavior

//@ assigns     othing;

//@ ensures \result.length == input.length;

//@ ensures \forall int i; 0 <= i < \result.length; \result[i] < i; // left-neighbor is to the left

//@ ensures \forall int i; 0 <= i < \result.length; \result[i] != -1 ==> input[\result[i]] < input[i]; // LN has smaller value

//@ ensures \forall int i; 0 <= i < \result.length; \forall int j; \result[i] < j < i; input[j] >= input[i]; // LN is closest smaller value

//@ loop_invariant 0 <= x <= input.length;

//@ loop_invariant 0 <= height <= x;

//@ loop_invariant \forall int i; 0 <= i < x; left[i] < i;  // so far, all left-neighbors are to the left

//@ loop_invariant \forall int i; 0 <= i < x; left[i] != -1 ==> input[left[i]] < input[i]; // so far, all LNs have smaller values

//@ loop_invariant \forall int i; 0 <= i < x; \forall int j; left[i] < j < i; input[j] >= input[i]; // so far, all LNs are closest smaller values

//@ loop_invariant \forall int i; 0 <= i < height; 0 <= stack[i] < x; // all stack values are legitimate positions

//@ loop_invariant x > 0 ==> height > 0;

//@ loop_invariant height > 0 ==> stack[height-1] == x-1; // x is always one more than top of stack (after the first iteration)

//@ loop_invariant \forall int i; 1 <= i < height; \forall int j; stack[i-1] < j < stack[i]; input[j] >= input[stack[i]]; // items missing from stack are larger than something to their right

//@ loop_invariant height > 0 ==> \forall int j; 0 <= j < stack[0]; input[j] >= input[stack[0]]; // items missing from the stack in the first segment are larger than stack[0]

//@ loop_decreases input.length - x;

//@ loop_invariant 0 <= height <= x;

//@ loop_invariant \forall int i; 0 <= i < x; left[i] < i;   // so far, all left-neighbors are to the left

//@ loop_invariant \forall int i; 0 <= i < height; 0 <= stack[i] < x;  // so far, all LNs have smaller values

//@ loop_invariant \forall int i; 1 <= i < height; \forall int j; stack[i-1] < j < stack[i]; input[j] >= input[stack[i]];  // so far, all LNs are closest smaller values

//@ loop_invariant height > 0 ==> \forall int j; stack[height-1] < j < x; input[j] >= input[x]; // Everything between top of stack and x is larger than va

//@ loop_invariant height == 0 ==> \forall int j; 0 <= j < x; input[j] >= input[x]; // If height is 0, everything to the left is smaller than value at current position

//@ loop_decreases height;





/*@ nonnullelements */





/*@ nonnullelements */





/*@ nonnullelements */





/*@ nonnullelements */











/*@ spec_public */
//@ assume A.b;       }}"

/*@ spec_public */
/*@ spec_protected */
//@ assume A.b;       }}"

/*@ spec_protected */
/*@ spec_public spec_protected */
/*@ spec_public spec_public */
/*@ spec_protected spec_protected */
/*@ spec_public */
/*@ spec_public */
/*@ spec_protected */
/*@ spec_protected */
/*@ spec_public */
/*@ spec_public spec_protected */
/*@ spec_public spec_public */
/*@ spec_protected spec_protected */
/*@ spec_public */
/*@ spec_public */
/*@ spec_protected */
/*@ spec_protected */
/*@ spec_public */
/*@ spec_public spec_protected */
/*@ spec_public spec_public */
/*@ spec_protected spec_protected */
/*@ spec_public */
/*@ spec_public */
/*@ spec_protected */
/*@ spec_protected */
/*@ spec_public */
/*@ spec_public */
//@ assume A.b;       }}"

/*@ spec_public */
/*@ spec_protected */
//@ assume A.b;       }}"

/*@ spec_protected */
/*@ spec_public spec_protected */
/*@ spec_public spec_public */
/*@ spec_protected spec_protected */
/*@ spec_public */
/*@ spec_public */
/*@ spec_protected */
/*@ spec_protected */
/*@ spec_public */
/*@ spec_public spec_protected */
/*@ spec_public spec_public */
/*@ spec_protected spec_protected */
/*@ spec_public */
/*@ spec_public */
/*@ spec_protected */
/*@ spec_protected */
/*@ spec_public */
/*@ spec_public spec_protected */
/*@ spec_public spec_public */
/*@ spec_protected spec_protected */
/*@ spec_public */
/*@ spec_public */
/*@ spec_protected */
/*@ spec_protected */
/*@ spec_public */
/*@ spec_public */
//@ assume A.b;       }}"

/*@ spec_public */
/*@ spec_protected */
//@ assume A.b;       }}"

/*@ spec_protected */
/*@ spec_public spec_protected */
/*@ spec_public spec_public */
/*@ spec_protected spec_protected */
/*@ spec_public */
/*@ spec_public */
/*@ spec_protected */
/*@ spec_protected */
/*@ spec_public */
/*@ spec_public spec_protected */
/*@ spec_public spec_public */
/*@ spec_protected spec_protected */
/*@ spec_public */
/*@ spec_public */
/*@ spec_protected */
/*@ spec_protected */
/*@ spec_public */
/*@ spec_public spec_protected */
/*@ spec_public spec_public */
/*@ spec_protected spec_protected */
/*@ spec_public */
/*@ spec_public */
/*@ spec_protected */
/*@ spec_protected */
/*@ spec_public */
/*@ spec_public */
//@ assume A.b;       }}"

/*@ spec_public */
/*@ spec_protected */
//@ assume A.b;       }}"

/*@ spec_protected */
/*@ spec_public spec_protected */
/*@ spec_public spec_public */
/*@ spec_protected spec_protected */
/*@ spec_public */
/*@ spec_public */
/*@ spec_protected */
/*@ spec_protected */
/*@ spec_public */
/*@ spec_public spec_protected */
/*@ spec_public spec_public */
/*@ spec_protected spec_protected */
/*@ spec_public */
/*@ spec_public */
/*@ spec_protected */
/*@ spec_protected */
/*@ spec_public */
/*@ spec_public spec_protected */
/*@ spec_public spec_public */
/*@ spec_protected spec_protected */
/*@ spec_public */
/*@ spec_public */
/*@ spec_protected */
/*@ spec_protected */
/*@ spec_public */
/*@ spec_public */
//@ assume A.b;       }}"

/*@ spec_public */
/*@ spec_protected */
//@ assume A.b;       }}"

/*@ spec_protected */
/*@ spec_public spec_protected */
/*@ spec_public spec_public */
/*@ spec_protected spec_protected */
/*@ spec_public */
/*@ spec_public */
/*@ spec_protected */
/*@ spec_protected */
/*@ spec_public */
/*@ spec_public spec_protected */
/*@ spec_public spec_public */
/*@ spec_protected spec_protected */
/*@ spec_public */
/*@ spec_public */
/*@ spec_protected */
/*@ spec_protected */
/*@ spec_public */
/*@ spec_public spec_protected */
/*@ spec_public spec_public */
/*@ spec_protected spec_protected */
/*@ spec_public */
/*@ spec_public */
/*@ spec_protected */
/*@ spec_protected */
/*@ spec_public */
/*@ ghost */
/*@ ghost */
/*@ ghost */
/*@ ghost */
/*@ ensures X;*/
/*@ requires Z; ensures Y;*/
/*@ ensures X;*/
/*@ requires Z; ensures Y;*/
/*@ ensures true;*/
//@ ghost int i=0;     }";

//@ ghost int i=0;     }";

//@ ensures \\forall int i; i > 0; i < 0;     void m(){}}";

/*@"+Strings.eol+"      ensures \\forall int i; i > 0; i < 0; "+Strings.eol+"   */
/*@ assert i < 10;*/
/*@ assert i < 10;*/
/*@ assert i >= 0;*/
/*@ requires i > 0;*/
/*@ ghost */
/*@ ghost */
/*@ ghost */
/*@ ghost */
/*@ ensures X;*/
/*@ requires Z; ensures Y;*/
/*@ ensures X;*/
/*@ requires Z; ensures Y;*/
/*@ ensures true;*/
//@ ghost int i=0;     }";

//@ ghost int i=0;     }";

//@ ensures \\forall int i; i > 0; i < 0;     void m(){}}";

/*@"+Strings.eol+"      ensures \\forall int i; i > 0; i < 0; "+Strings.eol+"   */
/*@ assert i < 10;*/
/*@ assert i < 10;*/
/*@ assert i >= 0;*/
/*@ requires i > 0;*/
/*@ ghost */
/*@ ghost */
/*@ ghost */
/*@ ghost */
/*@ ensures X;*/
/*@ requires Z; ensures Y;*/
/*@ ensures X;*/
/*@ requires Z; ensures Y;*/
/*@ ensures true;*/
//@ ghost int i=0;     }";

//@ ghost int i=0;     }";

//@ ensures \\forall int i; i > 0; i < 0;     void m(){}}";

/*@"+Strings.eol+"      ensures \\forall int i; i > 0; i < 0; "+Strings.eol+"   */
/*@ assert i < 10;*/
/*@ assert i < 10;*/
/*@ assert i >= 0;*/
/*@ requires i > 0;*/
/*@ ghost */
/*@ ghost */
/*@ ghost */
/*@ ghost */
/*@ ensures X;*/
/*@ requires Z; ensures Y;*/
/*@ ensures X;*/
/*@ requires Z; ensures Y;*/
/*@ ensures true;*/
//@ ghost int i=0;     }";

//@ ghost int i=0;     }";

//@ ensures \\forall int i; i > 0; i < 0;     void m(){}}";

/*@"+Strings.eol+"      ensures \\forall int i; i > 0; i < 0; "+Strings.eol+"   */
/*@ assert i < 10;*/
/*@ assert i < 10;*/
/*@ assert i >= 0;*/
/*@ requires i > 0;*/
/*@ ghost */
/*@ ghost */
/*@ ghost */
/*@ ghost */
/*@ ensures X;*/
/*@ requires Z; ensures Y;*/
/*@ ensures X;*/
/*@ requires Z; ensures Y;*/
/*@ ensures true;*/
//@ ghost int i=0;     }";

//@ ghost int i=0;     }";

//@ ensures \\forall int i; i > 0; i < 0;     void m(){}}";

/*@"+Strings.eol+"      ensures \\forall int i; i > 0; i < 0; "+Strings.eol+"   */
/*@ assert i < 10;*/
/*@ assert i < 10;*/
/*@ assert i >= 0;*/
/*@ requires i > 0;*/
//@ assignable \    othing;     void m(){} }");

//@ assignable \\everything;     void m(){} }");

//@ assignable k;     void m(){} }");

//@ assignable m;     void m(){} 

//@ assignable A.k;     void m(){} }"

//@ assignable o.*;     void m(){} }");

//@ assignable bb.p;     void m(){} }");

//@ assignable bb.*;     void m(){} }");

//@ assignable A.*;     void m(){} }");

//@ assignable k[0],k[*],k[2 .. 3], k[3 ..], k[3 .. *];     void m(){} }");

//@ assignable k[2.. 3], k[3..], k[3.. *];     void m(){} }");

//@ assignable o[0],o[*],o[2 .. 3], o[3 ..], o[3 .. *];     void m(){} }");

//@ assignable o[2.. 3], o[3..], o[3.. *];     void m(){} }");

//@ assignable o[(i-1)..(i+1)], o[(i+1)..], o[(i+1).. *];     void m(int i){} }");

//@ assignable o[2..3], o[2..*];     void m(){} }");

//@ assignable k[true],k[true .. false], k[false ..], k[false .. *];     void m() {} }"

//@ assignable k[b];     void m(boolean b) {} }"

//@ assignable this.k, this.*;     void m(boolean b) {} }"

//@ assignable this.x;     void m(boolean b) {} }"

//@ assignable super.kk, super.*;     void m(boolean b) {} }  class B{ int kk; }"

//@ assignable super.b, super.x;     void m(boolean b) {} }  class B{ int kk; }"

//@ assignable this, super;     void m(boolean b) {} }"

//@ assignable k[, k[*, k[i, k[], b., this., super.;     void m(boolean b) {} }"

//@ assignable super.;     void m(boolean b) {} }"

//@ assignable this.;     void m(boolean b) {} }"

//@ assignable super;     void m(boolean b) {} }"

//@ assignable this;     void m(boolean b) {} }"

//@ assignable k b, this.;     void m(boolean b) {} }"

//@ assignable ;     void m(boolean b) {} }"

//@ assignable .;     void m(boolean b) {} }"

//@ assignable k[*], this.*.x;     void m(boolean b) {} }"

//@ assignable o[*].kk;     void m(boolean b) {} }  class B{ int kk; }"

//@ assignable o     void m(boolean b) {} }  class B{ int kk; }"

//@ assignable j;    "

//@ assignable \\everything;    "

//@ assignable \    othing;    "

//@ assignable \\everything;    "

//@ assignable \\everything;    "

//@ requires true;     " // default assignable

//@ assignable \\everything;    "

//@ accessible k;     void m(){} }");

//@ accessible m;     void m(){} 

//@ captures k;     void m(){} }");

//@ captures m;     void m(){} 

//@ assignable \    othing;     void m(){} }");

//@ assignable \\everything;     void m(){} }");

//@ assignable k;     void m(){} }");

//@ assignable m;     void m(){} 

//@ assignable A.k;     void m(){} }"

//@ assignable o.*;     void m(){} }");

//@ assignable bb.p;     void m(){} }");

//@ assignable bb.*;     void m(){} }");

//@ assignable A.*;     void m(){} }");

//@ assignable k[0],k[*],k[2 .. 3], k[3 ..], k[3 .. *];     void m(){} }");

//@ assignable k[2.. 3], k[3..], k[3.. *];     void m(){} }");

//@ assignable o[0],o[*],o[2 .. 3], o[3 ..], o[3 .. *];     void m(){} }");

//@ assignable o[2.. 3], o[3..], o[3.. *];     void m(){} }");

//@ assignable o[(i-1)..(i+1)], o[(i+1)..], o[(i+1).. *];     void m(int i){} }");

//@ assignable o[2..3], o[2..*];     void m(){} }");

//@ assignable k[true],k[true .. false], k[false ..], k[false .. *];     void m() {} }"

//@ assignable k[b];     void m(boolean b) {} }"

//@ assignable this.k, this.*;     void m(boolean b) {} }"

//@ assignable this.x;     void m(boolean b) {} }"

//@ assignable super.kk, super.*;     void m(boolean b) {} }  class B{ int kk; }"

//@ assignable super.b, super.x;     void m(boolean b) {} }  class B{ int kk; }"

//@ assignable this, super;     void m(boolean b) {} }"

//@ assignable k[, k[*, k[i, k[], b., this., super.;     void m(boolean b) {} }"

//@ assignable super.;     void m(boolean b) {} }"

//@ assignable this.;     void m(boolean b) {} }"

//@ assignable super;     void m(boolean b) {} }"

//@ assignable this;     void m(boolean b) {} }"

//@ assignable k b, this.;     void m(boolean b) {} }"

//@ assignable ;     void m(boolean b) {} }"

//@ assignable .;     void m(boolean b) {} }"

//@ assignable k[*], this.*.x;     void m(boolean b) {} }"

//@ assignable o[*].kk;     void m(boolean b) {} }  class B{ int kk; }"

//@ assignable o     void m(boolean b) {} }  class B{ int kk; }"

//@ assignable j;    "

//@ assignable \\everything;    "

//@ assignable \    othing;    "

//@ assignable \\everything;    "

//@ assignable \\everything;    "

//@ requires true;     " // default assignable

//@ assignable \\everything;    "

//@ accessible k;     void m(){} }");

//@ accessible m;     void m(){} 

//@ captures k;     void m(){} }");

//@ captures m;     void m(){} 

//@ assignable \    othing;     void m(){} }");

//@ assignable \\everything;     void m(){} }");

//@ assignable k;     void m(){} }");

//@ assignable m;     void m(){} 

//@ assignable A.k;     void m(){} }"

//@ assignable o.*;     void m(){} }");

//@ assignable bb.p;     void m(){} }");

//@ assignable bb.*;     void m(){} }");

//@ assignable A.*;     void m(){} }");

//@ assignable k[0],k[*],k[2 .. 3], k[3 ..], k[3 .. *];     void m(){} }");

//@ assignable k[2.. 3], k[3..], k[3.. *];     void m(){} }");

//@ assignable o[0],o[*],o[2 .. 3], o[3 ..], o[3 .. *];     void m(){} }");

//@ assignable o[2.. 3], o[3..], o[3.. *];     void m(){} }");

//@ assignable o[(i-1)..(i+1)], o[(i+1)..], o[(i+1).. *];     void m(int i){} }");

//@ assignable o[2..3], o[2..*];     void m(){} }");

//@ assignable k[true],k[true .. false], k[false ..], k[false .. *];     void m() {} }"

//@ assignable k[b];     void m(boolean b) {} }"

//@ assignable this.k, this.*;     void m(boolean b) {} }"

//@ assignable this.x;     void m(boolean b) {} }"

//@ assignable super.kk, super.*;     void m(boolean b) {} }  class B{ int kk; }"

//@ assignable super.b, super.x;     void m(boolean b) {} }  class B{ int kk; }"

//@ assignable this, super;     void m(boolean b) {} }"

//@ assignable k[, k[*, k[i, k[], b., this., super.;     void m(boolean b) {} }"

//@ assignable super.;     void m(boolean b) {} }"

//@ assignable this.;     void m(boolean b) {} }"

//@ assignable super;     void m(boolean b) {} }"

//@ assignable this;     void m(boolean b) {} }"

//@ assignable k b, this.;     void m(boolean b) {} }"

//@ assignable ;     void m(boolean b) {} }"

//@ assignable .;     void m(boolean b) {} }"

//@ assignable k[*], this.*.x;     void m(boolean b) {} }"

//@ assignable o[*].kk;     void m(boolean b) {} }  class B{ int kk; }"

//@ assignable o     void m(boolean b) {} }  class B{ int kk; }"

//@ assignable j;    "

//@ assignable \\everything;    "

//@ assignable \    othing;    "

//@ assignable \\everything;    "

//@ assignable \\everything;    "

//@ requires true;     " // default assignable

//@ assignable \\everything;    "

//@ accessible k;     void m(){} }");

//@ accessible m;     void m(){} 

//@ captures k;     void m(){} }");

//@ captures m;     void m(){} 

//@ assignable \    othing;     void m(){} }");

//@ assignable \\everything;     void m(){} }");

//@ assignable k;     void m(){} }");

//@ assignable m;     void m(){} 

//@ assignable A.k;     void m(){} }"

//@ assignable o.*;     void m(){} }");

//@ assignable bb.p;     void m(){} }");

//@ assignable bb.*;     void m(){} }");

//@ assignable A.*;     void m(){} }");

//@ assignable k[0],k[*],k[2 .. 3], k[3 ..], k[3 .. *];     void m(){} }");

//@ assignable k[2.. 3], k[3..], k[3.. *];     void m(){} }");

//@ assignable o[0],o[*],o[2 .. 3], o[3 ..], o[3 .. *];     void m(){} }");

//@ assignable o[2.. 3], o[3..], o[3.. *];     void m(){} }");

//@ assignable o[(i-1)..(i+1)], o[(i+1)..], o[(i+1).. *];     void m(int i){} }");

//@ assignable o[2..3], o[2..*];     void m(){} }");

//@ assignable k[true],k[true .. false], k[false ..], k[false .. *];     void m() {} }"

//@ assignable k[b];     void m(boolean b) {} }"

//@ assignable this.k, this.*;     void m(boolean b) {} }"

//@ assignable this.x;     void m(boolean b) {} }"

//@ assignable super.kk, super.*;     void m(boolean b) {} }  class B{ int kk; }"

//@ assignable super.b, super.x;     void m(boolean b) {} }  class B{ int kk; }"

//@ assignable this, super;     void m(boolean b) {} }"

//@ assignable k[, k[*, k[i, k[], b., this., super.;     void m(boolean b) {} }"

//@ assignable super.;     void m(boolean b) {} }"

//@ assignable this.;     void m(boolean b) {} }"

//@ assignable super;     void m(boolean b) {} }"

//@ assignable this;     void m(boolean b) {} }"

//@ assignable k b, this.;     void m(boolean b) {} }"

//@ assignable ;     void m(boolean b) {} }"

//@ assignable .;     void m(boolean b) {} }"

//@ assignable k[*], this.*.x;     void m(boolean b) {} }"

//@ assignable o[*].kk;     void m(boolean b) {} }  class B{ int kk; }"

//@ assignable o     void m(boolean b) {} }  class B{ int kk; }"

//@ assignable j;    "

//@ assignable \\everything;    "

//@ assignable \    othing;    "

//@ assignable \\everything;    "

//@ assignable \\everything;    "

//@ requires true;     " // default assignable

//@ assignable \\everything;    "

//@ accessible k;     void m(){} }");

//@ accessible m;     void m(){} 

//@ captures k;     void m(){} }");

//@ captures m;     void m(){} 

//@ assignable \    othing;     void m(){} }");

//@ assignable \\everything;     void m(){} }");

//@ assignable k;     void m(){} }");

//@ assignable m;     void m(){} 

//@ assignable A.k;     void m(){} }"

//@ assignable o.*;     void m(){} }");

//@ assignable bb.p;     void m(){} }");

//@ assignable bb.*;     void m(){} }");

//@ assignable A.*;     void m(){} }");

//@ assignable k[0],k[*],k[2 .. 3], k[3 ..], k[3 .. *];     void m(){} }");

//@ assignable k[2.. 3], k[3..], k[3.. *];     void m(){} }");

//@ assignable o[0],o[*],o[2 .. 3], o[3 ..], o[3 .. *];     void m(){} }");

//@ assignable o[2.. 3], o[3..], o[3.. *];     void m(){} }");

//@ assignable o[(i-1)..(i+1)], o[(i+1)..], o[(i+1).. *];     void m(int i){} }");

//@ assignable o[2..3], o[2..*];     void m(){} }");

//@ assignable k[true],k[true .. false], k[false ..], k[false .. *];     void m() {} }"

//@ assignable k[b];     void m(boolean b) {} }"

//@ assignable this.k, this.*;     void m(boolean b) {} }"

//@ assignable this.x;     void m(boolean b) {} }"

//@ assignable super.kk, super.*;     void m(boolean b) {} }  class B{ int kk; }"

//@ assignable super.b, super.x;     void m(boolean b) {} }  class B{ int kk; }"

//@ assignable this, super;     void m(boolean b) {} }"

//@ assignable k[, k[*, k[i, k[], b., this., super.;     void m(boolean b) {} }"

//@ assignable super.;     void m(boolean b) {} }"

//@ assignable this.;     void m(boolean b) {} }"

//@ assignable super;     void m(boolean b) {} }"

//@ assignable this;     void m(boolean b) {} }"

//@ assignable k b, this.;     void m(boolean b) {} }"

//@ assignable ;     void m(boolean b) {} }"

//@ assignable .;     void m(boolean b) {} }"

//@ assignable k[*], this.*.x;     void m(boolean b) {} }"

//@ assignable o[*].kk;     void m(boolean b) {} }  class B{ int kk; }"

//@ assignable o     void m(boolean b) {} }  class B{ int kk; }"

//@ assignable j;    "

//@ assignable \\everything;    "

//@ assignable \    othing;    "

//@ assignable \\everything;    "

//@ assignable \\everything;    "

//@ requires true;     " // default assignable

//@ assignable \\everything;    "

//@ accessible k;     void m(){} }");

//@ accessible m;     void m(){} 

//@ captures k;     void m(){} }");

//@ captures m;     void m(){} 

//@ model class VVV{}     public class File implements Serializable, Comparable<File> {     //@model static public class TTT {}      }");

//@ model class VVV{ static int i; }    " +

//@model static class TTT { static int j; } " +

//@ model class VVV{ static int i; }    " +

/*@ assert true; assume true; */
//@model static class TTT { static int j; } " +

//@ model class VVV{ public static int i; }    " +

/*@ public invariant VVV.i; public invariant TTT.j; */
//@model static class TTT { public static int j; }     " +

/*@ assert java.io.VVV.i; assume java.io.File.TTT.j; */
//@ ghost static public int k;     " +

/*@ assert java.io.File.j; assume java.io.File.k; */
//@ model class VVV{}     public class File implements Serializable, Comparable<File> {     //@model static public class TTT {}      }");

//@ model class VVV{ static int i; }    " +

//@model static class TTT { static int j; } " +

//@ model class VVV{ static int i; }    " +

/*@ assert true; assume true; */
//@model static class TTT { static int j; } " +

//@ model class VVV{ public static int i; }    " +

/*@ public invariant VVV.i; public invariant TTT.j; */
//@model static class TTT { public static int j; }     " +

/*@ assert java.io.VVV.i; assume java.io.File.TTT.j; */
//@ ghost static public int k;     " +

/*@ assert java.io.File.j; assume java.io.File.k; */
//@ model class VVV{}     public class File implements Serializable, Comparable<File> {     //@model static public class TTT {}      }");

//@ model class VVV{ static int i; }    " +

//@model static class TTT { static int j; } " +

//@ model class VVV{ static int i; }    " +

/*@ assert true; assume true; */
//@model static class TTT { static int j; } " +

//@ model class VVV{ public static int i; }    " +

/*@ public invariant VVV.i; public invariant TTT.j; */
//@model static class TTT { public static int j; }     " +

/*@ assert java.io.VVV.i; assume java.io.File.TTT.j; */
//@ ghost static public int k;     " +

/*@ assert java.io.File.j; assume java.io.File.k; */
//@ model class VVV{}     public class File implements Serializable, Comparable<File> {     //@model static public class TTT {}      }");

//@ model class VVV{ static int i; }    " +

//@model static class TTT { static int j; } " +

//@ model class VVV{ static int i; }    " +

/*@ assert true; assume true; */
//@model static class TTT { static int j; } " +

//@ model class VVV{ public static int i; }    " +

/*@ public invariant VVV.i; public invariant TTT.j; */
//@model static class TTT { public static int j; }     " +

/*@ assert java.io.VVV.i; assume java.io.File.TTT.j; */
//@ ghost static public int k;     " +

/*@ assert java.io.File.j; assume java.io.File.k; */
//@ model class VVV{}     public class File implements Serializable, Comparable<File> {     //@model static public class TTT {}      }");

//@ model class VVV{ static int i; }    " +

//@model static class TTT { static int j; } " +

//@ model class VVV{ static int i; }    " +

/*@ assert true; assume true; */
//@model static class TTT { static int j; } " +

//@ model class VVV{ public static int i; }    " +

/*@ public invariant VVV.i; public invariant TTT.j; */
//@model static class TTT { public static int j; }     " +

/*@ assert java.io.VVV.i; assume java.io.File.TTT.j; */
//@ ghost static public int k;     " +

/*@ assert java.io.File.j; assume java.io.File.k; */
//@ ensures \\result[1].equals(b(c));      Object[] m(int j) { return null; } String N; StringBuffer a; int[] q; }"

//@ ensures equals(\\result.equals(b).c(p(0)));      Object m(int j) { return null; } String b; StringBuffer a; int[] q; /*@pure*/int p(int i) { return 0; }}"

/*@ set a = null; set a = null; */
//@ requires '\\t' != '\    ';      void p() {  }}"

//@ requires \"\\tA\\\\B\" != null;      void p() {  }}"

//@ requires true ==> false <== true;      void p() {  }}"

//@ ensures \\typeof(this) == \\type(A);      void p();}"

//@ instance ghost int i;      } class B implements A { void p(A a) { //@ set a.i = 0;     }}"

/*@ spec_public */
//@ public invariant pending.elementCount == 0;     } "

//@ ensures \\old(a) == null;       abstract void m(A a);      } "

//@ signals (Exception) true; signals (Exception) true;       void m(A a) {}      } "

//@ signals (Exception e) true; signals (Exception e) true;       void m(A a) {}      } "

//@ public model void m();           } class B implements A {}"

//@ in j; model int j;     } "

//@ ghost int i = j; ghost int j = 0;     } "

/*@ public non_null */
//@ invariant mm() && \type(Short) <: \type(java.lang.Long);    "

/*@ pure */
/*@ pure */
//@ public invariant m(java.lang.Long.TYPE) && m(java.lang.Long);    "

/*@ pure */
//@ ensures \\result[1].equals(b(c));      Object[] m(int j) { return null; } String N; StringBuffer a; int[] q; }"

//@ ensures equals(\\result.equals(b).c(p(0)));      Object m(int j) { return null; } String b; StringBuffer a; int[] q; /*@pure*/int p(int i) { return 0; }}"

/*@ set a = null; set a = null; */
//@ requires '\\t' != '\    ';      void p() {  }}"

//@ requires \"\\tA\\\\B\" != null;      void p() {  }}"

//@ requires true ==> false <== true;      void p() {  }}"

//@ ensures \\typeof(this) == \\type(A);      void p();}"

//@ instance ghost int i;      } class B implements A { void p(A a) { //@ set a.i = 0;     }}"

/*@ spec_public */
//@ public invariant pending.elementCount == 0;     } "

//@ ensures \\old(a) == null;       abstract void m(A a);      } "

//@ signals (Exception) true; signals (Exception) true;       void m(A a) {}      } "

//@ signals (Exception e) true; signals (Exception e) true;       void m(A a) {}      } "

//@ public model void m();           } class B implements A {}"

//@ in j; model int j;     } "

//@ ghost int i = j; ghost int j = 0;     } "

/*@ public non_null */
//@ invariant mm() && \type(Short) <: \type(java.lang.Long);    "

/*@ pure */
/*@ pure */
//@ public invariant m(java.lang.Long.TYPE) && m(java.lang.Long);    "

/*@ pure */
//@ ensures \\result[1].equals(b(c));      Object[] m(int j) { return null; } String N; StringBuffer a; int[] q; }"

//@ ensures equals(\\result.equals(b).c(p(0)));      Object m(int j) { return null; } String b; StringBuffer a; int[] q; /*@pure*/int p(int i) { return 0; }}"

/*@ set a = null; set a = null; */
//@ requires '\\t' != '\    ';      void p() {  }}"

//@ requires \"\\tA\\\\B\" != null;      void p() {  }}"

//@ requires true ==> false <== true;      void p() {  }}"

//@ ensures \\typeof(this) == \\type(A);      void p();}"

//@ instance ghost int i;      } class B implements A { void p(A a) { //@ set a.i = 0;     }}"

/*@ spec_public */
//@ public invariant pending.elementCount == 0;     } "

//@ ensures \\old(a) == null;       abstract void m(A a);      } "

//@ signals (Exception) true; signals (Exception) true;       void m(A a) {}      } "

//@ signals (Exception e) true; signals (Exception e) true;       void m(A a) {}      } "

//@ public model void m();           } class B implements A {}"

//@ in j; model int j;     } "

//@ ghost int i = j; ghost int j = 0;     } "

/*@ public non_null */
//@ invariant mm() && \type(Short) <: \type(java.lang.Long);    "

/*@ pure */
/*@ pure */
//@ public invariant m(java.lang.Long.TYPE) && m(java.lang.Long);    "

/*@ pure */
//@ ensures \\result[1].equals(b(c));      Object[] m(int j) { return null; } String N; StringBuffer a; int[] q; }"

//@ ensures equals(\\result.equals(b).c(p(0)));      Object m(int j) { return null; } String b; StringBuffer a; int[] q; /*@pure*/int p(int i) { return 0; }}"

/*@ set a = null; set a = null; */
//@ requires '\\t' != '\    ';      void p() {  }}"

//@ requires \"\\tA\\\\B\" != null;      void p() {  }}"

//@ requires true ==> false <== true;      void p() {  }}"

//@ ensures \\typeof(this) == \\type(A);      void p();}"

//@ instance ghost int i;      } class B implements A { void p(A a) { //@ set a.i = 0;     }}"

/*@ spec_public */
//@ public invariant pending.elementCount == 0;     } "

//@ ensures \\old(a) == null;       abstract void m(A a);      } "

//@ signals (Exception) true; signals (Exception) true;       void m(A a) {}      } "

//@ signals (Exception e) true; signals (Exception e) true;       void m(A a) {}      } "

//@ public model void m();           } class B implements A {}"

//@ in j; model int j;     } "

//@ ghost int i = j; ghost int j = 0;     } "

/*@ public non_null */
//@ invariant mm() && \type(Short) <: \type(java.lang.Long);    "

/*@ pure */
/*@ pure */
//@ public invariant m(java.lang.Long.TYPE) && m(java.lang.Long);    "

/*@ pure */
//@ ensures \\result[1].equals(b(c));      Object[] m(int j) { return null; } String N; StringBuffer a; int[] q; }"

//@ ensures equals(\\result.equals(b).c(p(0)));      Object m(int j) { return null; } String b; StringBuffer a; int[] q; /*@pure*/int p(int i) { return 0; }}"

/*@ set a = null; set a = null; */
//@ requires '\\t' != '\    ';      void p() {  }}"

//@ requires \"\\tA\\\\B\" != null;      void p() {  }}"

//@ requires true ==> false <== true;      void p() {  }}"

//@ ensures \\typeof(this) == \\type(A);      void p();}"

//@ instance ghost int i;      } class B implements A { void p(A a) { //@ set a.i = 0;     }}"

/*@ spec_public */
//@ public invariant pending.elementCount == 0;     } "

//@ ensures \\old(a) == null;       abstract void m(A a);      } "

//@ signals (Exception) true; signals (Exception) true;       void m(A a) {}      } "

//@ signals (Exception e) true; signals (Exception e) true;       void m(A a) {}      } "

//@ public model void m();           } class B implements A {}"

//@ in j; model int j;     } "

//@ ghost int i = j; ghost int j = 0;     } "

/*@ public non_null */
//@ invariant mm() && \type(Short) <: \type(java.lang.Long);    "

/*@ pure */
/*@ pure */
//@ public invariant m(java.lang.Long.TYPE) && m(java.lang.Long);    "

/*@ pure */
/*@ refines \"A.xxx\"; */
/*@ pure */
/*@ refining requires true; ensures true; */
/*@        recommends true else NullPointerException; ensures true; */
/*@ requires true; requires \    ot_specified; */
/*@ ensures  true; ensures  \    ot_specified; */
/*@ callable \    othing   ; */
/*@ callable \\everything; */
/*@ refines \"A.xxx\"; */
/*@ pure */
/*@ refining requires true; ensures true; */
/*@        recommends true else NullPointerException; ensures true; */
/*@ requires true; requires \    ot_specified; */
/*@ ensures  true; ensures  \    ot_specified; */
/*@ callable \    othing   ; */
/*@ callable \\everything; */
/*@ refines \"A.xxx\"; */
/*@ pure */
/*@ refining requires true; ensures true; */
/*@        recommends true else NullPointerException; ensures true; */
/*@ requires true; requires \    ot_specified; */
/*@ ensures  true; ensures  \    ot_specified; */
/*@ callable \    othing   ; */
/*@ callable \\everything; */
/*@ refines \"A.xxx\"; */
/*@ pure */
/*@ refining requires true; ensures true; */
/*@        recommends true else NullPointerException; ensures true; */
/*@ requires true; requires \    ot_specified; */
/*@ ensures  true; ensures  \    ot_specified; */
/*@ callable \    othing   ; */
/*@ callable \\everything; */
/*@ refines \"A.xxx\"; */
/*@ pure */
/*@ refining requires true; ensures true; */
/*@        recommends true else NullPointerException; ensures true; */
/*@ requires true; requires \    ot_specified; */
/*@ ensures  true; ensures  \    ot_specified; */
/*@ callable \    othing   ; */
/*@ callable \\everything; */
//@ loop_invariant i == /count && 0 <= i <= values.length;    "

//@Test  // FIXME - try running the build programmatically

//@ ghost int i = true; // Error to provoke a message" + eol

//@ loop_invariant i == /count && 0 <= i <= values.length;    "

//@ loop_invariant i == /count && 0 <= i <= values.length;    "

//@Test  // FIXME - try running the build programmatically

//@ ghost int i = true; // Error to provoke a message" + eol

//@ loop_invariant i == /count && 0 <= i <= values.length;    "

//@ loop_invariant i == /count && 0 <= i <= values.length;    "

//@Test  // FIXME - try running the build programmatically

//@ ghost int i = true; // Error to provoke a message" + eol

//@ loop_invariant i == /count && 0 <= i <= values.length;    "

//@ loop_invariant i == /count && 0 <= i <= values.length;    "

//@Test  // FIXME - try running the build programmatically

//@ ghost int i = true; // Error to provoke a message" + eol

//@ loop_invariant i == /count && 0 <= i <= values.length;    "

//@ loop_invariant i == /count && 0 <= i <= values.length;    "

//@Test  // FIXME - try running the build programmatically

//@ ghost int i = true; // Error to provoke a message" + eol

//@ loop_invariant i == /count && 0 <= i <= values.length;    "

//@ model int i;    " +

//@ represents i <- 0;     }"

//@ model int i;    " +

//@ represents i <- 0;     }"

//@ model int i;    " +

//@ represents i <- 0;     }"

//@ model int i;    " +

//@ represents i <- 0;     }"

//@ model int i;    " +

//@ represents i <- 0;     }"

//@ model int i;    " +

//@ represents i <- 0;     }"

//@ model int i;    " +

//@ represents i <- 0;     }"

//@ model int i;    " +

//@ represents i <- 0;     }"

//@ model int i;    " +

//@ represents i <- 0;     }"

//@ model int i;    " +

//@ represents i <- 0;     }"

//@ accessible \    othing;    "

//@ accessible \    othing;    "

//@ accessible \    othing;    "

//@ accessible \    othing;    "

//@ accessible i;    "

//@ accessible this.i;    "

//@ accessible j;    "

//@ accessible a,a.i;    "

//@ accessible a,a.j;    "

//@ requires b == a;    "

//@ accessible b.i,a;    "

//@ accessible a,b.i;    "

//@ requires a != null && 0 <= i && i < a.length;    "

//@ accessible a,i,a[*];    "

//@ requires a != null && 0 <= i && i < a.length;    "

//@ accessible \\everything;    "

//@ requires a != null && 0 <= i && i < a.length;    "

//@ accessible a,i;    "

//@ accessible i;    "

//@ accessible i;    "

//@ accessible i;    "

//@ accessible i;    "

//@ accessible \    othing;    "

//@ accessible i;    "

//@ accessible \\everything;    "

//@ accessible \    othing;    "

//@ requires b;    "

//@ accessible i;    "

//@ also requires !b;    "

//@ accessible j;    "

//@ accessible i,j;    "

//@ requires b;    "

//@ accessible i;    "

//@ also requires !b;    "

//@ accessible i;    "

//@ accessible \    othing;    "

//@ accessible \    othing;    "

//@ accessible \    othing;    "

//@ accessible \    othing;    "

//@ accessible i;    "

//@ accessible this.i;    "

//@ accessible j;    "

//@ accessible a,a.i;    "

//@ accessible a,a.j;    "

//@ requires b == a;    "

//@ accessible b.i,a;    "

//@ accessible a,b.i;    "

//@ requires a != null && 0 <= i && i < a.length;    "

//@ accessible a,i,a[*];    "

//@ requires a != null && 0 <= i && i < a.length;    "

//@ accessible \\everything;    "

//@ requires a != null && 0 <= i && i < a.length;    "

//@ accessible a,i;    "

//@ accessible i;    "

//@ accessible i;    "

//@ accessible i;    "

//@ accessible i;    "

//@ accessible \    othing;    "

//@ accessible i;    "

//@ accessible \\everything;    "

//@ accessible \    othing;    "

//@ requires b;    "

//@ accessible i;    "

//@ also requires !b;    "

//@ accessible j;    "

//@ accessible i,j;    "

//@ requires b;    "

//@ accessible i;    "

//@ also requires !b;    "

//@ accessible i;    "

//@ accessible \    othing;    "

//@ accessible \    othing;    "

//@ accessible \    othing;    "

//@ accessible \    othing;    "

//@ accessible i;    "

//@ accessible this.i;    "

//@ accessible j;    "

//@ accessible a,a.i;    "

//@ accessible a,a.j;    "

//@ requires b == a;    "

//@ accessible b.i,a;    "

//@ accessible a,b.i;    "

//@ requires a != null && 0 <= i && i < a.length;    "

//@ accessible a,i,a[*];    "

//@ requires a != null && 0 <= i && i < a.length;    "

//@ accessible \\everything;    "

//@ requires a != null && 0 <= i && i < a.length;    "

//@ accessible a,i;    "

//@ accessible i;    "

//@ accessible i;    "

//@ accessible i;    "

//@ accessible i;    "

//@ accessible \    othing;    "

//@ accessible i;    "

//@ accessible \\everything;    "

//@ accessible \    othing;    "

//@ requires b;    "

//@ accessible i;    "

//@ also requires !b;    "

//@ accessible j;    "

//@ accessible i,j;    "

//@ requires b;    "

//@ accessible i;    "

//@ also requires !b;    "

//@ accessible i;    "

//@ accessible \    othing;    "

//@ accessible \    othing;    "

//@ accessible \    othing;    "

//@ accessible \    othing;    "

//@ accessible i;    "

//@ accessible this.i;    "

//@ accessible j;    "

//@ accessible a,a.i;    "

//@ accessible a,a.j;    "

//@ requires b == a;    "

//@ accessible b.i,a;    "

//@ accessible a,b.i;    "

//@ requires a != null && 0 <= i && i < a.length;    "

//@ accessible a,i,a[*];    "

//@ requires a != null && 0 <= i && i < a.length;    "

//@ accessible \\everything;    "

//@ requires a != null && 0 <= i && i < a.length;    "

//@ accessible a,i;    "

//@ accessible i;    "

//@ accessible i;    "

//@ accessible i;    "

//@ accessible i;    "

//@ accessible \    othing;    "

//@ accessible i;    "

//@ accessible \\everything;    "

//@ accessible \    othing;    "

//@ requires b;    "

//@ accessible i;    "

//@ also requires !b;    "

//@ accessible j;    "

//@ accessible i,j;    "

//@ requires b;    "

//@ accessible i;    "

//@ also requires !b;    "

//@ accessible i;    "

//@ accessible \    othing;    "

//@ accessible \    othing;    "

//@ accessible \    othing;    "

//@ accessible \    othing;    "

//@ accessible i;    "

//@ accessible this.i;    "

//@ accessible j;    "

//@ accessible a,a.i;    "

//@ accessible a,a.j;    "

//@ requires b == a;    "

//@ accessible b.i,a;    "

//@ accessible a,b.i;    "

//@ requires a != null && 0 <= i && i < a.length;    "

//@ accessible a,i,a[*];    "

//@ requires a != null && 0 <= i && i < a.length;    "

//@ accessible \\everything;    "

//@ requires a != null && 0 <= i && i < a.length;    "

//@ accessible a,i;    "

//@ accessible i;    "

//@ accessible i;    "

//@ accessible i;    "

//@ accessible i;    "

//@ accessible \    othing;    "

//@ accessible i;    "

//@ accessible \\everything;    "

//@ accessible \    othing;    "

//@ requires b;    "

//@ accessible i;    "

//@ also requires !b;    "

//@ accessible j;    "

//@ accessible i,j;    "

//@ requires b;    "

//@ accessible i;    "

//@ also requires !b;    "

//@ accessible i;    "

/*@ assignable A.*; */
/*@ assignable A.*; */
/*@ assignable A.*; */
//@ assert \\invariant_for(this);    " // OK - invariant is true

//@ public invariant f >= 0;     "

//@ assert \\invariant_for(this);    " // OK - does not see invariant

//@ private invariant false;     "

//@ assert \\invariant_for(this);    " // OK - sees invariant

//@ public invariant true;     "

//@ assert \\invariant_for(this);    " // ERROR - should see inherited invariant and fail

//@ public invariant f >= 0;     "

//@ assert \\invariant_for(this);    " // ERROR - should see static invariant

//@ static public invariant f >= 0;     "

//@ assert \\invariant_for(TestJava);    " // OK - sees only static invariants

//@ public invariant f >= 0;     "

//@ static public invariant f >= 0;     "

//@ assert \\invariant_for(TestJava);    " // ERROR - should see static invariant

//@ static public invariant f >= 0;     "

//@ assert \\invariant_for(P);    " // OK

//@ public invariant i >= 0;    "

//@ static public invariant ii >= 0;    "

//@ assignable \\everything;     "

//@ assignable \\everything;     "

//@ assignable \\everything;     "

//@ requires i < Integer.MAX_VALUE;    "

//@ assignable \\everything;     "

//@ requires ii < Integer.MAX_VALUE;    "

//@ assignable \\everything;     "

//@ requires ii < Integer.MAX_VALUE;    "

//@ assignable \\everything;     "

//@ public constraint i >= \\old(i);    "

//@ static public constraint ii >= \\old(ii);    "

//@ assignable \\everything;     "

//@ assume i > -2147483648;    "

//@ assignable \\everything;     "

//@ assume ii > -2147483648;    "

//@ assignable \\everything;     "

//@ assume ii > -2147483648;    "

//@ requires i < Integer.MAX_VALUE;    "

//@ assignable \\everything;     "

//@ requires ii < Integer.MAX_VALUE;    "

//@ assignable \\everything;     "

//@ requires ii < Integer.MAX_VALUE;    "

//@ assignable \\everything;     "

//@ axiom (\\forall TestJava o; o.i == o.ii);    "

//@ axiom i == ii;    "

//@ assignable \\everything;     "

//@ assert i == ii;    "

//@ axiom (\\forall TestJava o; o.i == o.ii);    "

//@ assignable \    othing;     "

//@ assert i == ii;    "

//@ assignable this.a;    "

//@ assignable \    othing;    "

//@ assignable \\everything;    "

//@ assignable this.a;    "

//@ assignable TestJava.b;    "

//@ assignable this.b;    "

//@ assignable this.a;    "

//@ assignable this.a;    "

//@ assume this == o;     "

//@ assignable this.a;    " // Line 40

//@ assignable a;    "

//@ assignable \    othing;    "

//@ assignable \    othing;    "

//@ assignable o.*;    "

//@ assume this == o;     "

//@ assignable this.*;    "

//@ public normal_behavior requires b; ensures \\result == 5;     "

//@ also public normal_behavior requires !b; ensures \\result == 7;     "

//@ assert m(true) == 5;     "

//@ assert m(false) == 7;     "

//@ assert m(bb) == 6;     "

//@ public normal_behavior requires b; ensures \\result == 5;     "

//@ assert m(true) == 5;     "

//@ assert m(false) == 5;     "

//@ assert m(bb) == 5;     "

//@ assert m(true) == 7;     "

/*@ assignable A.*; */
/*@ assignable A.*; */
/*@ assignable A.*; */
//@ assert \\invariant_for(this);    " // OK - invariant is true

//@ public invariant f >= 0;     "

//@ assert \\invariant_for(this);    " // OK - does not see invariant

//@ private invariant false;     "

//@ assert \\invariant_for(this);    " // OK - sees invariant

//@ public invariant true;     "

//@ assert \\invariant_for(this);    " // ERROR - should see inherited invariant and fail

//@ public invariant f >= 0;     "

//@ assert \\invariant_for(this);    " // ERROR - should see static invariant

//@ static public invariant f >= 0;     "

//@ assert \\invariant_for(TestJava);    " // OK - sees only static invariants

//@ public invariant f >= 0;     "

//@ static public invariant f >= 0;     "

//@ assert \\invariant_for(TestJava);    " // ERROR - should see static invariant

//@ static public invariant f >= 0;     "

//@ assert \\invariant_for(P);    " // OK

//@ public invariant i >= 0;    "

//@ static public invariant ii >= 0;    "

//@ assignable \\everything;     "

//@ assignable \\everything;     "

//@ assignable \\everything;     "

//@ requires i < Integer.MAX_VALUE;    "

//@ assignable \\everything;     "

//@ requires ii < Integer.MAX_VALUE;    "

//@ assignable \\everything;     "

//@ requires ii < Integer.MAX_VALUE;    "

//@ assignable \\everything;     "

//@ public constraint i >= \\old(i);    "

//@ static public constraint ii >= \\old(ii);    "

//@ assignable \\everything;     "

//@ assume i > -2147483648;    "

//@ assignable \\everything;     "

//@ assume ii > -2147483648;    "

//@ assignable \\everything;     "

//@ assume ii > -2147483648;    "

//@ requires i < Integer.MAX_VALUE;    "

//@ assignable \\everything;     "

//@ requires ii < Integer.MAX_VALUE;    "

//@ assignable \\everything;     "

//@ requires ii < Integer.MAX_VALUE;    "

//@ assignable \\everything;     "

//@ axiom (\\forall TestJava o; o.i == o.ii);    "

//@ axiom i == ii;    "

//@ assignable \\everything;     "

//@ assert i == ii;    "

//@ axiom (\\forall TestJava o; o.i == o.ii);    "

//@ assignable \    othing;     "

//@ assert i == ii;    "

//@ assignable this.a;    "

//@ assignable \    othing;    "

//@ assignable \\everything;    "

//@ assignable this.a;    "

//@ assignable TestJava.b;    "

//@ assignable this.b;    "

//@ assignable this.a;    "

//@ assignable this.a;    "

//@ assume this == o;     "

//@ assignable this.a;    " // Line 40

//@ assignable a;    "

//@ assignable \    othing;    "

//@ assignable \    othing;    "

//@ assignable o.*;    "

//@ assume this == o;     "

//@ assignable this.*;    "

//@ public normal_behavior requires b; ensures \\result == 5;     "

//@ also public normal_behavior requires !b; ensures \\result == 7;     "

//@ assert m(true) == 5;     "

//@ assert m(false) == 7;     "

//@ assert m(bb) == 6;     "

//@ public normal_behavior requires b; ensures \\result == 5;     "

//@ assert m(true) == 5;     "

//@ assert m(false) == 5;     "

//@ assert m(bb) == 5;     "

//@ assert m(true) == 7;     "

/*@ assignable A.*; */
/*@ assignable A.*; */
/*@ assignable A.*; */
//@ assert \\invariant_for(this);    " // OK - invariant is true

//@ public invariant f >= 0;     "

//@ assert \\invariant_for(this);    " // OK - does not see invariant

//@ private invariant false;     "

//@ assert \\invariant_for(this);    " // OK - sees invariant

//@ public invariant true;     "

//@ assert \\invariant_for(this);    " // ERROR - should see inherited invariant and fail

//@ public invariant f >= 0;     "

//@ assert \\invariant_for(this);    " // ERROR - should see static invariant

//@ static public invariant f >= 0;     "

//@ assert \\invariant_for(TestJava);    " // OK - sees only static invariants

//@ public invariant f >= 0;     "

//@ static public invariant f >= 0;     "

//@ assert \\invariant_for(TestJava);    " // ERROR - should see static invariant

//@ static public invariant f >= 0;     "

//@ assert \\invariant_for(P);    " // OK

//@ public invariant i >= 0;    "

//@ static public invariant ii >= 0;    "

//@ assignable \\everything;     "

//@ assignable \\everything;     "

//@ assignable \\everything;     "

//@ requires i < Integer.MAX_VALUE;    "

//@ assignable \\everything;     "

//@ requires ii < Integer.MAX_VALUE;    "

//@ assignable \\everything;     "

//@ requires ii < Integer.MAX_VALUE;    "

//@ assignable \\everything;     "

//@ public constraint i >= \\old(i);    "

//@ static public constraint ii >= \\old(ii);    "

//@ assignable \\everything;     "

//@ assume i > -2147483648;    "

//@ assignable \\everything;     "

//@ assume ii > -2147483648;    "

//@ assignable \\everything;     "

//@ assume ii > -2147483648;    "

//@ requires i < Integer.MAX_VALUE;    "

//@ assignable \\everything;     "

//@ requires ii < Integer.MAX_VALUE;    "

//@ assignable \\everything;     "

//@ requires ii < Integer.MAX_VALUE;    "

//@ assignable \\everything;     "

//@ axiom (\\forall TestJava o; o.i == o.ii);    "

//@ axiom i == ii;    "

//@ assignable \\everything;     "

//@ assert i == ii;    "

//@ axiom (\\forall TestJava o; o.i == o.ii);    "

//@ assignable \    othing;     "

//@ assert i == ii;    "

//@ assignable this.a;    "

//@ assignable \    othing;    "

//@ assignable \\everything;    "

//@ assignable this.a;    "

//@ assignable TestJava.b;    "

//@ assignable this.b;    "

//@ assignable this.a;    "

//@ assignable this.a;    "

//@ assume this == o;     "

//@ assignable this.a;    " // Line 40

//@ assignable a;    "

//@ assignable \    othing;    "

//@ assignable \    othing;    "

//@ assignable o.*;    "

//@ assume this == o;     "

//@ assignable this.*;    "

//@ public normal_behavior requires b; ensures \\result == 5;     "

//@ also public normal_behavior requires !b; ensures \\result == 7;     "

//@ assert m(true) == 5;     "

//@ assert m(false) == 7;     "

//@ assert m(bb) == 6;     "

//@ public normal_behavior requires b; ensures \\result == 5;     "

//@ assert m(true) == 5;     "

//@ assert m(false) == 5;     "

//@ assert m(bb) == 5;     "

//@ assert m(true) == 7;     "

/*@ assignable A.*; */
/*@ assignable A.*; */
/*@ assignable A.*; */
//@ assert \\invariant_for(this);    " // OK - invariant is true

//@ public invariant f >= 0;     "

//@ assert \\invariant_for(this);    " // OK - does not see invariant

//@ private invariant false;     "

//@ assert \\invariant_for(this);    " // OK - sees invariant

//@ public invariant true;     "

//@ assert \\invariant_for(this);    " // ERROR - should see inherited invariant and fail

//@ public invariant f >= 0;     "

//@ assert \\invariant_for(this);    " // ERROR - should see static invariant

//@ static public invariant f >= 0;     "

//@ assert \\invariant_for(TestJava);    " // OK - sees only static invariants

//@ public invariant f >= 0;     "

//@ static public invariant f >= 0;     "

//@ assert \\invariant_for(TestJava);    " // ERROR - should see static invariant

//@ static public invariant f >= 0;     "

//@ assert \\invariant_for(P);    " // OK

//@ public invariant i >= 0;    "

//@ static public invariant ii >= 0;    "

//@ assignable \\everything;     "

//@ assignable \\everything;     "

//@ assignable \\everything;     "

//@ requires i < Integer.MAX_VALUE;    "

//@ assignable \\everything;     "

//@ requires ii < Integer.MAX_VALUE;    "

//@ assignable \\everything;     "

//@ requires ii < Integer.MAX_VALUE;    "

//@ assignable \\everything;     "

//@ public constraint i >= \\old(i);    "

//@ static public constraint ii >= \\old(ii);    "

//@ assignable \\everything;     "

//@ assume i > -2147483648;    "

//@ assignable \\everything;     "

//@ assume ii > -2147483648;    "

//@ assignable \\everything;     "

//@ assume ii > -2147483648;    "

//@ requires i < Integer.MAX_VALUE;    "

//@ assignable \\everything;     "

//@ requires ii < Integer.MAX_VALUE;    "

//@ assignable \\everything;     "

//@ requires ii < Integer.MAX_VALUE;    "

//@ assignable \\everything;     "

//@ axiom (\\forall TestJava o; o.i == o.ii);    "

//@ axiom i == ii;    "

//@ assignable \\everything;     "

//@ assert i == ii;    "

//@ axiom (\\forall TestJava o; o.i == o.ii);    "

//@ assignable \    othing;     "

//@ assert i == ii;    "

//@ assignable this.a;    "

//@ assignable \    othing;    "

//@ assignable \\everything;    "

//@ assignable this.a;    "

//@ assignable TestJava.b;    "

//@ assignable this.b;    "

//@ assignable this.a;    "

//@ assignable this.a;    "

//@ assume this == o;     "

//@ assignable this.a;    " // Line 40

//@ assignable a;    "

//@ assignable \    othing;    "

//@ assignable \    othing;    "

//@ assignable o.*;    "

//@ assume this == o;     "

//@ assignable this.*;    "

//@ public normal_behavior requires b; ensures \\result == 5;     "

//@ also public normal_behavior requires !b; ensures \\result == 7;     "

//@ assert m(true) == 5;     "

//@ assert m(false) == 7;     "

//@ assert m(bb) == 6;     "

//@ public normal_behavior requires b; ensures \\result == 5;     "

//@ assert m(true) == 5;     "

//@ assert m(false) == 5;     "

//@ assert m(bb) == 5;     "

//@ assert m(true) == 7;     "

/*@ assignable A.*; */
/*@ assignable A.*; */
/*@ assignable A.*; */
//@ assert \\invariant_for(this);    " // OK - invariant is true

//@ public invariant f >= 0;     "

//@ assert \\invariant_for(this);    " // OK - does not see invariant

//@ private invariant false;     "

//@ assert \\invariant_for(this);    " // OK - sees invariant

//@ public invariant true;     "

//@ assert \\invariant_for(this);    " // ERROR - should see inherited invariant and fail

//@ public invariant f >= 0;     "

//@ assert \\invariant_for(this);    " // ERROR - should see static invariant

//@ static public invariant f >= 0;     "

//@ assert \\invariant_for(TestJava);    " // OK - sees only static invariants

//@ public invariant f >= 0;     "

//@ static public invariant f >= 0;     "

//@ assert \\invariant_for(TestJava);    " // ERROR - should see static invariant

//@ static public invariant f >= 0;     "

//@ assert \\invariant_for(P);    " // OK

//@ public invariant i >= 0;    "

//@ static public invariant ii >= 0;    "

//@ assignable \\everything;     "

//@ assignable \\everything;     "

//@ assignable \\everything;     "

//@ requires i < Integer.MAX_VALUE;    "

//@ assignable \\everything;     "

//@ requires ii < Integer.MAX_VALUE;    "

//@ assignable \\everything;     "

//@ requires ii < Integer.MAX_VALUE;    "

//@ assignable \\everything;     "

//@ public constraint i >= \\old(i);    "

//@ static public constraint ii >= \\old(ii);    "

//@ assignable \\everything;     "

//@ assume i > -2147483648;    "

//@ assignable \\everything;     "

//@ assume ii > -2147483648;    "

//@ assignable \\everything;     "

//@ assume ii > -2147483648;    "

//@ requires i < Integer.MAX_VALUE;    "

//@ assignable \\everything;     "

//@ requires ii < Integer.MAX_VALUE;    "

//@ assignable \\everything;     "

//@ requires ii < Integer.MAX_VALUE;    "

//@ assignable \\everything;     "

//@ axiom (\\forall TestJava o; o.i == o.ii);    "

//@ axiom i == ii;    "

//@ assignable \\everything;     "

//@ assert i == ii;    "

//@ axiom (\\forall TestJava o; o.i == o.ii);    "

//@ assignable \    othing;     "

//@ assert i == ii;    "

//@ assignable this.a;    "

//@ assignable \    othing;    "

//@ assignable \\everything;    "

//@ assignable this.a;    "

//@ assignable TestJava.b;    "

//@ assignable this.b;    "

//@ assignable this.a;    "

//@ assignable this.a;    "

//@ assume this == o;     "

//@ assignable this.a;    " // Line 40

//@ assignable a;    "

//@ assignable \    othing;    "

//@ assignable \    othing;    "

//@ assignable o.*;    "

//@ assume this == o;     "

//@ assignable this.*;    "

//@ public normal_behavior requires b; ensures \\result == 5;     "

//@ also public normal_behavior requires !b; ensures \\result == 7;     "

//@ assert m(true) == 5;     "

//@ assert m(false) == 7;     "

//@ assert m(bb) == 6;     "

//@ public normal_behavior requires b; ensures \\result == 5;     "

//@ assert m(true) == 5;     "

//@ assert m(false) == 5;     "

//@ assert m(bb) == 5;     "

//@ assert m(true) == 7;     "

//@ assert i>0 ;    "

//@ requires i>=0;    "

//@ assert i>0 ;    "

//@ requires i>=0;    "

//@ ensures \\result>0;    "

//@ assume i>0 ;    "

//@ assert i>0 ;    "

//@ requires i>0;    "

//@ assert i>=0 ;    "

//@ requires i>=0;    "

//@ ensures \\result>=0;    "

//@ requires i>0;    "

//@ also    "

//@ requires i==0;    "

//@ assert i>=0 ;    "

//@ assume o.f >0 ;    "

//@ assert f > 0 ;    "

//@ assume o.f >0 ;    "

//@ assume o.f >0 ;    "

//@ assume o == this ;    "

//@ assert f > 0 ;    "

//@ requires a.length > 5;     "

//@ assume a[1] == 0 ;    "

//@ requires a != null;     "

//@ assume a[1] == 0 ;    "

//@ requires a != null;     "

//@ requires a.length > 5;     "

//@ assume a[-1] == 0 ;    "

//@ requires a != null;     "

//@ requires a.length > 5;     "

//@ requires b.length > 5;     "

//@ assume a[1] == 5 ;    "

//@ assert b[1] == 5 ;    "

//@ requires a != null;     "

//@ requires a.length > 5;     "

//@ assume a[1] == 5 ;    "

//@ assume a == b ;    "

//@ assert b[1] ==5 ;    "

//@ assert c != null;    "

//@ assert c.length >= 0;     "

//@ requires a.length > 5;     "

//@ requires a != null;     "

//@ requires a != null;     "

//@ requires a.length > 5;     "

//@ requires a != null;     "

//@ requires a.length > 5;     "

//@ requires b.length > 5;     "

//@ assert b[1] ==5 ;    "

//@ requires a != null;     "

//@ requires a.length > 5;     " // Line 25

//@ assume a == b ;    "

//@ assert b[1] ==5 ;    "

//@ requires a.length > 3;     "

//@ assignable \\everything;     "

//@ requires a != null;     "

//@ assignable \\everything;     "

//@ requires a != null && a.length > 3;     "

//@ assignable \\everything;     "

//@ ensures \\result == \\old(a[0]);     "

//@ requires a != null && a.length > 3;     "

//@ assignable \\everything;     "

//@ ensures \\result == \\old(a[0]);     " // Line 26

//@ requires a != null && a.length > 3 && i >= 0 && i <= 1;     "

//@ assignable \\everything;     "

//@ ensures \\result == \\old(a[0]);     "

//@ assert f > 0 ;    "

//@ assume o == this ;    "

//@ assert f > 0 ;    "

//@ assignable \\everything;     "

//@ ensures \\result == 2;     "

//@ assignable \\everything;     "

//@ ensures \\result == 10;     "

//@ requires o != null;     "

//@ assignable \\everything;     "

//@ ensures \\result == 1;     "

//@ assignable \\everything;     "

//@ ensures b ==> \\result == 2;     "

//@ assignable \\everything;     "

//@ ensures b ==> \\result == 10;     "

//@ requires this != o && o != null;     "

//@ assignable \\everything;     "

//@ ensures \\result == 1;     "

//@ ensures (\\let int k = i; \\result == k);    "

//@ ensures (\\let int k = 1; \\result == k);    "

//@ requires i >= 0;    "

//@ requires i >= 0;    "

//@ ensures (\\let int k = i, int j = k; \\result == j);    "

//@ ensures (\\let int k = 1, int j = k; \\result == j);    "


//@ requires i != 0;     "

//@ requires i != 0;     "


//@ requires a.length == 10;    "

//@ requires a.length == 10;    "

//@ requires a.length == 10 && i >= 0;    "

//@ requires a.length == 10;    "

//@ requires a.length == 10;    "

//@ requires a.length == 10;    "

//@ requires i >= 3;    "

//@ requires i <= 8;    "

//@ requires a.length == 10;    "

//@ requires a.length == 10;    "

//@ requires i > 1 && a.length == 10;    "

//@ requires i < 5 && a.length == 10;    "

//@ requires a.length == 10;    "

//@ requires a.length == 10;    "

//@ requires a.length == 10;    "

//@ requires i >= 3;    "

//@ requires i <= 8;    "

//@ requires a.length == 10;    "

//@ ensures \\result == a[1];    "

//@ requires a.length == 10;    "

//@ ensures \\result == a[0];    "

/*@ nullable_by_default*/



//@ assert ooo != null;    "

//@ assert ooo instanceof TestJava;    "

/*@ nullable_by_default*/



//@ assert ooo != null;    "

//@ assert ooo instanceof TestJava;    "

//@ assignable ooo;    "

//@ assert x < 3 ;    "

//@ assert x < 4 ;    "

//@ assert x == 13 ;    "

//@ assert y == 11 ;    "

//@ requires j < 1000 && -1000 < j; ensures \\result == j+j+1;    "

//@ requires j != 0;    "

//@ requires t != null;    "

//@ requires i != 0;    "

//@ requires t != null;    "

//@ requires i != 0;    "

//@ assignable \\everything;    "

//@ ensures \\result == j;    "

//@ assignable t.f;    "

//@ requires t != null;    "

//@ requires i != 0;    "

//@ assignable \\everything;    "

//@ requires i != 0;    "

//@ assignable \\everything;    "

//@ requires a.length == 4;    "

//@ requires i != 0;    "

//@ assignable \\everything;    "

//@ requires a.length == 4;    "

//@ requires i != 0;    "

//@ assignable \\everything;    "

//@ requires a.length == 4;    "

//@ assignable \\everything;    "

//@ requires a.length == 4;    "

//@ requires i != 0;    "

//@ assignable \\everything;    "

//@ assert x == 33 ;    "

//@ assert y == 31 ;    "

/*@ nullable*/
//@ requires i < a.length;     "

//@ requires i >= 0;     "

//@ requires i >= 0 && i < a.length;     "

//@ assume a != null && a.length > 1;    "

//@ assume a != null && a.length > 1 && i != null;    "

//@ assume a != null && a.length > 1 && i != null;    "

//@ assume \\elemtype(\\typeof(a)) == \\type(Integer);    "

//@ assume a != null && a.length > 1 && i != null;    "

//@ assume a != null && a.length > 1;    "

//@ assume a != null && a.length > 1 && i != null;    "

//@ assume a != null && a.length > 1 && i != null;    "

//@ assume \\elemtype(\\typeof(a)) == \\type(String);    "

//@ assume a != null && a.length > 1 && i != null;    "

//@ assume a != null && a.length > 1 && i != null;    "

//@ assume a != null && a.length > 1 && i != null;    "

//@ assume a != null && a.length > 1 && i != null;    "

//@ assume \\type(B) <: \\elemtype(\\typeof(a));    "

//@ assume a != null && a.length > 1 && i != null;    "

//@ public invariant b != null && b.length == 20;    "

//@ assert e instanceof NullPointerException || e instanceof ArithmeticException;    "

//@ signals_only NullPointerException, ArithmeticException;    "

//@ signals_only NullPointerException;    "

//@ public invariant b != null && b.length == 20;    "

//@ public invariant b != null && b.length == 20;    "

//@ public invariant b != null && b.length == 20;    "

//@ also public normal_behavior    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 2;    "

//@ assert TestJava.flag == 1;    "

//@ also    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 2;    "

//@ assert TestJava.flag == 1;    "

/*@ pure */
//@ also    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 1;    "

//@ signals (Exception e) TestJava.flag == 10;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 2;    "

//@ assert (\\lbl FLAG TestJava.flag) == 0 || TestJava.flag == 1|| TestJava.flag == 10;    "

//@ also    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 1;    "

//@ signals (Exception e) TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 2;    "

//@ assert TestJava.flag == 1;    "

//@ also public normal_behavior    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 1;    "

//@ also public normal_behavior    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 2;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;    "

/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ signals_only EE1;    "

//@ signals (Exception e) TestJava.flag == 1;    "

/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ signals_only EE2;    "

//@ signals (Exception e) TestJava.flag == 2;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 1;    " // not feasible line 34

//@ assert TestJava.flag == 1;    "

//@ assert e instanceof EE3 ;    " // Line 37

/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ signals_only EE1;    "

//@ signals (Exception e) TestJava.flag == 1;    "

/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ signals_only EE2;    "

//@ signals (Exception e) TestJava.flag == 2;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;    " // not feasible

//@ assert e instanceof EE3 ;    " // Line 36

/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
//@     "

/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag,this.autocloseableContent;    "

//@ signals_only EE1;    "

//@ signals (Exception e) TestJava.flag == 1;    "

//@     "

/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag,this.autocloseableContent;    "

//@ signals_only EE2;    "

//@ signals (Exception e) TestJava.flag == 2;    "

//@ requires flag == 0;    " // Line 23

//@ assignable flag;    "

//@ assert TestJava.flag == 0;      "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;    "  // Not feasible

//@ assert TestJava.flag == 2;    "  // Line 34 // SHould be OK

//@ assert e instanceof EE1;    "  // Line 35 // Should be OK

//@ also public normal_behavior    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;    "

//@ also public normal_behavior    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert normal ==> flag == 1;    "

//@ assert !normal ==> flag == 2;    "

//@ also public normal_behavior    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;    "  // FIXME - should not be able to skip the catch block

//@ also    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;    "  // FIXME - should not be able to skip the catch block

//@ also public normal_behavior    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;     "

//@ also    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 5;    "

//@ assert i>0 ;    "

//@ requires i>=0;    "

//@ assert i>0 ;    "

//@ requires i>=0;    "

//@ ensures \\result>0;    "

//@ assume i>0 ;    "

//@ assert i>0 ;    "

//@ requires i>0;    "

//@ assert i>=0 ;    "

//@ requires i>=0;    "

//@ ensures \\result>=0;    "

//@ requires i>0;    "

//@ also    "

//@ requires i==0;    "

//@ assert i>=0 ;    "

//@ assume o.f >0 ;    "

//@ assert f > 0 ;    "

//@ assume o.f >0 ;    "

//@ assume o.f >0 ;    "

//@ assume o == this ;    "

//@ assert f > 0 ;    "

//@ requires a.length > 5;     "

//@ assume a[1] == 0 ;    "

//@ requires a != null;     "

//@ assume a[1] == 0 ;    "

//@ requires a != null;     "

//@ requires a.length > 5;     "

//@ assume a[-1] == 0 ;    "

//@ requires a != null;     "

//@ requires a.length > 5;     "

//@ requires b.length > 5;     "

//@ assume a[1] == 5 ;    "

//@ assert b[1] == 5 ;    "

//@ requires a != null;     "

//@ requires a.length > 5;     "

//@ assume a[1] == 5 ;    "

//@ assume a == b ;    "

//@ assert b[1] ==5 ;    "

//@ assert c != null;    "

//@ assert c.length >= 0;     "

//@ requires a.length > 5;     "

//@ requires a != null;     "

//@ requires a != null;     "

//@ requires a.length > 5;     "

//@ requires a != null;     "

//@ requires a.length > 5;     "

//@ requires b.length > 5;     "

//@ assert b[1] ==5 ;    "

//@ requires a != null;     "

//@ requires a.length > 5;     " // Line 25

//@ assume a == b ;    "

//@ assert b[1] ==5 ;    "

//@ requires a.length > 3;     "

//@ assignable \\everything;     "

//@ requires a != null;     "

//@ assignable \\everything;     "

//@ requires a != null && a.length > 3;     "

//@ assignable \\everything;     "

//@ ensures \\result == \\old(a[0]);     "

//@ requires a != null && a.length > 3;     "

//@ assignable \\everything;     "

//@ ensures \\result == \\old(a[0]);     " // Line 26

//@ requires a != null && a.length > 3 && i >= 0 && i <= 1;     "

//@ assignable \\everything;     "

//@ ensures \\result == \\old(a[0]);     "

//@ assert f > 0 ;    "

//@ assume o == this ;    "

//@ assert f > 0 ;    "

//@ assignable \\everything;     "

//@ ensures \\result == 2;     "

//@ assignable \\everything;     "

//@ ensures \\result == 10;     "

//@ requires o != null;     "

//@ assignable \\everything;     "

//@ ensures \\result == 1;     "

//@ assignable \\everything;     "

//@ ensures b ==> \\result == 2;     "

//@ assignable \\everything;     "

//@ ensures b ==> \\result == 10;     "

//@ requires this != o && o != null;     "

//@ assignable \\everything;     "

//@ ensures \\result == 1;     "

//@ ensures (\\let int k = i; \\result == k);    "

//@ ensures (\\let int k = 1; \\result == k);    "

//@ requires i >= 0;    "

//@ requires i >= 0;    "

//@ ensures (\\let int k = i, int j = k; \\result == j);    "

//@ ensures (\\let int k = 1, int j = k; \\result == j);    "


//@ requires i != 0;     "

//@ requires i != 0;     "


//@ requires a.length == 10;    "

//@ requires a.length == 10;    "

//@ requires a.length == 10 && i >= 0;    "

//@ requires a.length == 10;    "

//@ requires a.length == 10;    "

//@ requires a.length == 10;    "

//@ requires i >= 3;    "

//@ requires i <= 8;    "

//@ requires a.length == 10;    "

//@ requires a.length == 10;    "

//@ requires i > 1 && a.length == 10;    "

//@ requires i < 5 && a.length == 10;    "

//@ requires a.length == 10;    "

//@ requires a.length == 10;    "

//@ requires a.length == 10;    "

//@ requires i >= 3;    "

//@ requires i <= 8;    "

//@ requires a.length == 10;    "

//@ ensures \\result == a[1];    "

//@ requires a.length == 10;    "

//@ ensures \\result == a[0];    "

/*@ nullable_by_default*/



//@ assert ooo != null;    "

//@ assert ooo instanceof TestJava;    "

/*@ nullable_by_default*/



//@ assert ooo != null;    "

//@ assert ooo instanceof TestJava;    "

//@ assignable ooo;    "

//@ assert x < 3 ;    "

//@ assert x < 4 ;    "

//@ assert x == 13 ;    "

//@ assert y == 11 ;    "

//@ requires j < 1000 && -1000 < j; ensures \\result == j+j+1;    "

//@ requires j != 0;    "

//@ requires t != null;    "

//@ requires i != 0;    "

//@ requires t != null;    "

//@ requires i != 0;    "

//@ assignable \\everything;    "

//@ ensures \\result == j;    "

//@ assignable t.f;    "

//@ requires t != null;    "

//@ requires i != 0;    "

//@ assignable \\everything;    "

//@ requires i != 0;    "

//@ assignable \\everything;    "

//@ requires a.length == 4;    "

//@ requires i != 0;    "

//@ assignable \\everything;    "

//@ requires a.length == 4;    "

//@ requires i != 0;    "

//@ assignable \\everything;    "

//@ requires a.length == 4;    "

//@ assignable \\everything;    "

//@ requires a.length == 4;    "

//@ requires i != 0;    "

//@ assignable \\everything;    "

//@ assert x == 33 ;    "

//@ assert y == 31 ;    "

/*@ nullable*/
//@ requires i < a.length;     "

//@ requires i >= 0;     "

//@ requires i >= 0 && i < a.length;     "

//@ assume a != null && a.length > 1;    "

//@ assume a != null && a.length > 1 && i != null;    "

//@ assume a != null && a.length > 1 && i != null;    "

//@ assume \\elemtype(\\typeof(a)) == \\type(Integer);    "

//@ assume a != null && a.length > 1 && i != null;    "

//@ assume a != null && a.length > 1;    "

//@ assume a != null && a.length > 1 && i != null;    "

//@ assume a != null && a.length > 1 && i != null;    "

//@ assume \\elemtype(\\typeof(a)) == \\type(String);    "

//@ assume a != null && a.length > 1 && i != null;    "

//@ assume a != null && a.length > 1 && i != null;    "

//@ assume a != null && a.length > 1 && i != null;    "

//@ assume a != null && a.length > 1 && i != null;    "

//@ assume \\type(B) <: \\elemtype(\\typeof(a));    "

//@ assume a != null && a.length > 1 && i != null;    "

//@ public invariant b != null && b.length == 20;    "

//@ assert e instanceof NullPointerException || e instanceof ArithmeticException;    "

//@ signals_only NullPointerException, ArithmeticException;    "

//@ signals_only NullPointerException;    "

//@ public invariant b != null && b.length == 20;    "

//@ public invariant b != null && b.length == 20;    "

//@ public invariant b != null && b.length == 20;    "

//@ also public normal_behavior    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 2;    "

//@ assert TestJava.flag == 1;    "

//@ also    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 2;    "

//@ assert TestJava.flag == 1;    "

/*@ pure */
//@ also    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 1;    "

//@ signals (Exception e) TestJava.flag == 10;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 2;    "

//@ assert (\\lbl FLAG TestJava.flag) == 0 || TestJava.flag == 1|| TestJava.flag == 10;    "

//@ also    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 1;    "

//@ signals (Exception e) TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 2;    "

//@ assert TestJava.flag == 1;    "

//@ also public normal_behavior    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 1;    "

//@ also public normal_behavior    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 2;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;    "

/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ signals_only EE1;    "

//@ signals (Exception e) TestJava.flag == 1;    "

/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ signals_only EE2;    "

//@ signals (Exception e) TestJava.flag == 2;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 1;    " // not feasible line 34

//@ assert TestJava.flag == 1;    "

//@ assert e instanceof EE3 ;    " // Line 37

/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ signals_only EE1;    "

//@ signals (Exception e) TestJava.flag == 1;    "

/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ signals_only EE2;    "

//@ signals (Exception e) TestJava.flag == 2;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;    " // not feasible

//@ assert e instanceof EE3 ;    " // Line 36

/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
//@     "

/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag,this.autocloseableContent;    "

//@ signals_only EE1;    "

//@ signals (Exception e) TestJava.flag == 1;    "

//@     "

/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag,this.autocloseableContent;    "

//@ signals_only EE2;    "

//@ signals (Exception e) TestJava.flag == 2;    "

//@ requires flag == 0;    " // Line 23

//@ assignable flag;    "

//@ assert TestJava.flag == 0;      "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;    "  // Not feasible

//@ assert TestJava.flag == 2;    "  // Line 34 // SHould be OK

//@ assert e instanceof EE1;    "  // Line 35 // Should be OK

//@ also public normal_behavior    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;    "

//@ also public normal_behavior    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert normal ==> flag == 1;    "

//@ assert !normal ==> flag == 2;    "

//@ also public normal_behavior    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;    "  // FIXME - should not be able to skip the catch block

//@ also    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;    "  // FIXME - should not be able to skip the catch block

//@ also public normal_behavior    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;     "

//@ also    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 5;    "

//@ assert i>0 ;    "

//@ requires i>=0;    "

//@ assert i>0 ;    "

//@ requires i>=0;    "

//@ ensures \\result>0;    "

//@ assume i>0 ;    "

//@ assert i>0 ;    "

//@ requires i>0;    "

//@ assert i>=0 ;    "

//@ requires i>=0;    "

//@ ensures \\result>=0;    "

//@ requires i>0;    "

//@ also    "

//@ requires i==0;    "

//@ assert i>=0 ;    "

//@ assume o.f >0 ;    "

//@ assert f > 0 ;    "

//@ assume o.f >0 ;    "

//@ assume o.f >0 ;    "

//@ assume o == this ;    "

//@ assert f > 0 ;    "

//@ requires a.length > 5;     "

//@ assume a[1] == 0 ;    "

//@ requires a != null;     "

//@ assume a[1] == 0 ;    "

//@ requires a != null;     "

//@ requires a.length > 5;     "

//@ assume a[-1] == 0 ;    "

//@ requires a != null;     "

//@ requires a.length > 5;     "

//@ requires b.length > 5;     "

//@ assume a[1] == 5 ;    "

//@ assert b[1] == 5 ;    "

//@ requires a != null;     "

//@ requires a.length > 5;     "

//@ assume a[1] == 5 ;    "

//@ assume a == b ;    "

//@ assert b[1] ==5 ;    "

//@ assert c != null;    "

//@ assert c.length >= 0;     "

//@ requires a.length > 5;     "

//@ requires a != null;     "

//@ requires a != null;     "

//@ requires a.length > 5;     "

//@ requires a != null;     "

//@ requires a.length > 5;     "

//@ requires b.length > 5;     "

//@ assert b[1] ==5 ;    "

//@ requires a != null;     "

//@ requires a.length > 5;     " // Line 25

//@ assume a == b ;    "

//@ assert b[1] ==5 ;    "

//@ requires a.length > 3;     "

//@ assignable \\everything;     "

//@ requires a != null;     "

//@ assignable \\everything;     "

//@ requires a != null && a.length > 3;     "

//@ assignable \\everything;     "

//@ ensures \\result == \\old(a[0]);     "

//@ requires a != null && a.length > 3;     "

//@ assignable \\everything;     "

//@ ensures \\result == \\old(a[0]);     " // Line 26

//@ requires a != null && a.length > 3 && i >= 0 && i <= 1;     "

//@ assignable \\everything;     "

//@ ensures \\result == \\old(a[0]);     "

//@ assert f > 0 ;    "

//@ assume o == this ;    "

//@ assert f > 0 ;    "

//@ assignable \\everything;     "

//@ ensures \\result == 2;     "

//@ assignable \\everything;     "

//@ ensures \\result == 10;     "

//@ requires o != null;     "

//@ assignable \\everything;     "

//@ ensures \\result == 1;     "

//@ assignable \\everything;     "

//@ ensures b ==> \\result == 2;     "

//@ assignable \\everything;     "

//@ ensures b ==> \\result == 10;     "

//@ requires this != o && o != null;     "

//@ assignable \\everything;     "

//@ ensures \\result == 1;     "

//@ ensures (\\let int k = i; \\result == k);    "

//@ ensures (\\let int k = 1; \\result == k);    "

//@ requires i >= 0;    "

//@ requires i >= 0;    "

//@ ensures (\\let int k = i, int j = k; \\result == j);    "

//@ ensures (\\let int k = 1, int j = k; \\result == j);    "


//@ requires i != 0;     "

//@ requires i != 0;     "


//@ requires a.length == 10;    "

//@ requires a.length == 10;    "

//@ requires a.length == 10 && i >= 0;    "

//@ requires a.length == 10;    "

//@ requires a.length == 10;    "

//@ requires a.length == 10;    "

//@ requires i >= 3;    "

//@ requires i <= 8;    "

//@ requires a.length == 10;    "

//@ requires a.length == 10;    "

//@ requires i > 1 && a.length == 10;    "

//@ requires i < 5 && a.length == 10;    "

//@ requires a.length == 10;    "

//@ requires a.length == 10;    "

//@ requires a.length == 10;    "

//@ requires i >= 3;    "

//@ requires i <= 8;    "

//@ requires a.length == 10;    "

//@ ensures \\result == a[1];    "

//@ requires a.length == 10;    "

//@ ensures \\result == a[0];    "

/*@ nullable_by_default*/



//@ assert ooo != null;    "

//@ assert ooo instanceof TestJava;    "

/*@ nullable_by_default*/



//@ assert ooo != null;    "

//@ assert ooo instanceof TestJava;    "

//@ assignable ooo;    "

//@ assert x < 3 ;    "

//@ assert x < 4 ;    "

//@ assert x == 13 ;    "

//@ assert y == 11 ;    "

//@ requires j < 1000 && -1000 < j; ensures \\result == j+j+1;    "

//@ requires j != 0;    "

//@ requires t != null;    "

//@ requires i != 0;    "

//@ requires t != null;    "

//@ requires i != 0;    "

//@ assignable \\everything;    "

//@ ensures \\result == j;    "

//@ assignable t.f;    "

//@ requires t != null;    "

//@ requires i != 0;    "

//@ assignable \\everything;    "

//@ requires i != 0;    "

//@ assignable \\everything;    "

//@ requires a.length == 4;    "

//@ requires i != 0;    "

//@ assignable \\everything;    "

//@ requires a.length == 4;    "

//@ requires i != 0;    "

//@ assignable \\everything;    "

//@ requires a.length == 4;    "

//@ assignable \\everything;    "

//@ requires a.length == 4;    "

//@ requires i != 0;    "

//@ assignable \\everything;    "

//@ assert x == 33 ;    "

//@ assert y == 31 ;    "

/*@ nullable*/
//@ requires i < a.length;     "

//@ requires i >= 0;     "

//@ requires i >= 0 && i < a.length;     "

//@ assume a != null && a.length > 1;    "

//@ assume a != null && a.length > 1 && i != null;    "

//@ assume a != null && a.length > 1 && i != null;    "

//@ assume \\elemtype(\\typeof(a)) == \\type(Integer);    "

//@ assume a != null && a.length > 1 && i != null;    "

//@ assume a != null && a.length > 1;    "

//@ assume a != null && a.length > 1 && i != null;    "

//@ assume a != null && a.length > 1 && i != null;    "

//@ assume \\elemtype(\\typeof(a)) == \\type(String);    "

//@ assume a != null && a.length > 1 && i != null;    "

//@ assume a != null && a.length > 1 && i != null;    "

//@ assume a != null && a.length > 1 && i != null;    "

//@ assume a != null && a.length > 1 && i != null;    "

//@ assume \\type(B) <: \\elemtype(\\typeof(a));    "

//@ assume a != null && a.length > 1 && i != null;    "

//@ public invariant b != null && b.length == 20;    "

//@ assert e instanceof NullPointerException || e instanceof ArithmeticException;    "

//@ signals_only NullPointerException, ArithmeticException;    "

//@ signals_only NullPointerException;    "

//@ public invariant b != null && b.length == 20;    "

//@ public invariant b != null && b.length == 20;    "

//@ public invariant b != null && b.length == 20;    "

//@ also public normal_behavior    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 2;    "

//@ assert TestJava.flag == 1;    "

//@ also    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 2;    "

//@ assert TestJava.flag == 1;    "

/*@ pure */
//@ also    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 1;    "

//@ signals (Exception e) TestJava.flag == 10;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 2;    "

//@ assert (\\lbl FLAG TestJava.flag) == 0 || TestJava.flag == 1|| TestJava.flag == 10;    "

//@ also    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 1;    "

//@ signals (Exception e) TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 2;    "

//@ assert TestJava.flag == 1;    "

//@ also public normal_behavior    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 1;    "

//@ also public normal_behavior    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 2;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;    "

/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ signals_only EE1;    "

//@ signals (Exception e) TestJava.flag == 1;    "

/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ signals_only EE2;    "

//@ signals (Exception e) TestJava.flag == 2;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 1;    " // not feasible line 34

//@ assert TestJava.flag == 1;    "

//@ assert e instanceof EE3 ;    " // Line 37

/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ signals_only EE1;    "

//@ signals (Exception e) TestJava.flag == 1;    "

/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ signals_only EE2;    "

//@ signals (Exception e) TestJava.flag == 2;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;    " // not feasible

//@ assert e instanceof EE3 ;    " // Line 36

/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
//@     "

/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag,this.autocloseableContent;    "

//@ signals_only EE1;    "

//@ signals (Exception e) TestJava.flag == 1;    "

//@     "

/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag,this.autocloseableContent;    "

//@ signals_only EE2;    "

//@ signals (Exception e) TestJava.flag == 2;    "

//@ requires flag == 0;    " // Line 23

//@ assignable flag;    "

//@ assert TestJava.flag == 0;      "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;    "  // Not feasible

//@ assert TestJava.flag == 2;    "  // Line 34 // SHould be OK

//@ assert e instanceof EE1;    "  // Line 35 // Should be OK

//@ also public normal_behavior    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;    "

//@ also public normal_behavior    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert normal ==> flag == 1;    "

//@ assert !normal ==> flag == 2;    "

//@ also public normal_behavior    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;    "  // FIXME - should not be able to skip the catch block

//@ also    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;    "  // FIXME - should not be able to skip the catch block

//@ also public normal_behavior    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;     "

//@ also    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 5;    "

//@ assert i>0 ;    "

//@ requires i>=0;    "

//@ assert i>0 ;    "

//@ requires i>=0;    "

//@ ensures \\result>0;    "

//@ assume i>0 ;    "

//@ assert i>0 ;    "

//@ requires i>0;    "

//@ assert i>=0 ;    "

//@ requires i>=0;    "

//@ ensures \\result>=0;    "

//@ requires i>0;    "

//@ also    "

//@ requires i==0;    "

//@ assert i>=0 ;    "

//@ assume o.f >0 ;    "

//@ assert f > 0 ;    "

//@ assume o.f >0 ;    "

//@ assume o.f >0 ;    "

//@ assume o == this ;    "

//@ assert f > 0 ;    "

//@ requires a.length > 5;     "

//@ assume a[1] == 0 ;    "

//@ requires a != null;     "

//@ assume a[1] == 0 ;    "

//@ requires a != null;     "

//@ requires a.length > 5;     "

//@ assume a[-1] == 0 ;    "

//@ requires a != null;     "

//@ requires a.length > 5;     "

//@ requires b.length > 5;     "

//@ assume a[1] == 5 ;    "

//@ assert b[1] == 5 ;    "

//@ requires a != null;     "

//@ requires a.length > 5;     "

//@ assume a[1] == 5 ;    "

//@ assume a == b ;    "

//@ assert b[1] ==5 ;    "

//@ assert c != null;    "

//@ assert c.length >= 0;     "

//@ requires a.length > 5;     "

//@ requires a != null;     "

//@ requires a != null;     "

//@ requires a.length > 5;     "

//@ requires a != null;     "

//@ requires a.length > 5;     "

//@ requires b.length > 5;     "

//@ assert b[1] ==5 ;    "

//@ requires a != null;     "

//@ requires a.length > 5;     " // Line 25

//@ assume a == b ;    "

//@ assert b[1] ==5 ;    "

//@ requires a.length > 3;     "

//@ assignable \\everything;     "

//@ requires a != null;     "

//@ assignable \\everything;     "

//@ requires a != null && a.length > 3;     "

//@ assignable \\everything;     "

//@ ensures \\result == \\old(a[0]);     "

//@ requires a != null && a.length > 3;     "

//@ assignable \\everything;     "

//@ ensures \\result == \\old(a[0]);     " // Line 26

//@ requires a != null && a.length > 3 && i >= 0 && i <= 1;     "

//@ assignable \\everything;     "

//@ ensures \\result == \\old(a[0]);     "

//@ assert f > 0 ;    "

//@ assume o == this ;    "

//@ assert f > 0 ;    "

//@ assignable \\everything;     "

//@ ensures \\result == 2;     "

//@ assignable \\everything;     "

//@ ensures \\result == 10;     "

//@ requires o != null;     "

//@ assignable \\everything;     "

//@ ensures \\result == 1;     "

//@ assignable \\everything;     "

//@ ensures b ==> \\result == 2;     "

//@ assignable \\everything;     "

//@ ensures b ==> \\result == 10;     "

//@ requires this != o && o != null;     "

//@ assignable \\everything;     "

//@ ensures \\result == 1;     "

//@ ensures (\\let int k = i; \\result == k);    "

//@ ensures (\\let int k = 1; \\result == k);    "

//@ requires i >= 0;    "

//@ requires i >= 0;    "

//@ ensures (\\let int k = i, int j = k; \\result == j);    "

//@ ensures (\\let int k = 1, int j = k; \\result == j);    "


//@ requires i != 0;     "

//@ requires i != 0;     "


//@ requires a.length == 10;    "

//@ requires a.length == 10;    "

//@ requires a.length == 10 && i >= 0;    "

//@ requires a.length == 10;    "

//@ requires a.length == 10;    "

//@ requires a.length == 10;    "

//@ requires i >= 3;    "

//@ requires i <= 8;    "

//@ requires a.length == 10;    "

//@ requires a.length == 10;    "

//@ requires i > 1 && a.length == 10;    "

//@ requires i < 5 && a.length == 10;    "

//@ requires a.length == 10;    "

//@ requires a.length == 10;    "

//@ requires a.length == 10;    "

//@ requires i >= 3;    "

//@ requires i <= 8;    "

//@ requires a.length == 10;    "

//@ ensures \\result == a[1];    "

//@ requires a.length == 10;    "

//@ ensures \\result == a[0];    "

/*@ nullable_by_default*/



//@ assert ooo != null;    "

//@ assert ooo instanceof TestJava;    "

/*@ nullable_by_default*/



//@ assert ooo != null;    "

//@ assert ooo instanceof TestJava;    "

//@ assignable ooo;    "

//@ assert x < 3 ;    "

//@ assert x < 4 ;    "

//@ assert x == 13 ;    "

//@ assert y == 11 ;    "

//@ requires j < 1000 && -1000 < j; ensures \\result == j+j+1;    "

//@ requires j != 0;    "

//@ requires t != null;    "

//@ requires i != 0;    "

//@ requires t != null;    "

//@ requires i != 0;    "

//@ assignable \\everything;    "

//@ ensures \\result == j;    "

//@ assignable t.f;    "

//@ requires t != null;    "

//@ requires i != 0;    "

//@ assignable \\everything;    "

//@ requires i != 0;    "

//@ assignable \\everything;    "

//@ requires a.length == 4;    "

//@ requires i != 0;    "

//@ assignable \\everything;    "

//@ requires a.length == 4;    "

//@ requires i != 0;    "

//@ assignable \\everything;    "

//@ requires a.length == 4;    "

//@ assignable \\everything;    "

//@ requires a.length == 4;    "

//@ requires i != 0;    "

//@ assignable \\everything;    "

//@ assert x == 33 ;    "

//@ assert y == 31 ;    "

/*@ nullable*/
//@ requires i < a.length;     "

//@ requires i >= 0;     "

//@ requires i >= 0 && i < a.length;     "

//@ assume a != null && a.length > 1;    "

//@ assume a != null && a.length > 1 && i != null;    "

//@ assume a != null && a.length > 1 && i != null;    "

//@ assume \\elemtype(\\typeof(a)) == \\type(Integer);    "

//@ assume a != null && a.length > 1 && i != null;    "

//@ assume a != null && a.length > 1;    "

//@ assume a != null && a.length > 1 && i != null;    "

//@ assume a != null && a.length > 1 && i != null;    "

//@ assume \\elemtype(\\typeof(a)) == \\type(String);    "

//@ assume a != null && a.length > 1 && i != null;    "

//@ assume a != null && a.length > 1 && i != null;    "

//@ assume a != null && a.length > 1 && i != null;    "

//@ assume a != null && a.length > 1 && i != null;    "

//@ assume \\type(B) <: \\elemtype(\\typeof(a));    "

//@ assume a != null && a.length > 1 && i != null;    "

//@ public invariant b != null && b.length == 20;    "

//@ assert e instanceof NullPointerException || e instanceof ArithmeticException;    "

//@ signals_only NullPointerException, ArithmeticException;    "

//@ signals_only NullPointerException;    "

//@ public invariant b != null && b.length == 20;    "

//@ public invariant b != null && b.length == 20;    "

//@ public invariant b != null && b.length == 20;    "

//@ also public normal_behavior    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 2;    "

//@ assert TestJava.flag == 1;    "

//@ also    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 2;    "

//@ assert TestJava.flag == 1;    "

/*@ pure */
//@ also    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 1;    "

//@ signals (Exception e) TestJava.flag == 10;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 2;    "

//@ assert (\\lbl FLAG TestJava.flag) == 0 || TestJava.flag == 1|| TestJava.flag == 10;    "

//@ also    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 1;    "

//@ signals (Exception e) TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 2;    "

//@ assert TestJava.flag == 1;    "

//@ also public normal_behavior    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 1;    "

//@ also public normal_behavior    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 2;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;    "

/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ signals_only EE1;    "

//@ signals (Exception e) TestJava.flag == 1;    "

/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ signals_only EE2;    "

//@ signals (Exception e) TestJava.flag == 2;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 1;    " // not feasible line 34

//@ assert TestJava.flag == 1;    "

//@ assert e instanceof EE3 ;    " // Line 37

/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ signals_only EE1;    "

//@ signals (Exception e) TestJava.flag == 1;    "

/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ signals_only EE2;    "

//@ signals (Exception e) TestJava.flag == 2;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;    " // not feasible

//@ assert e instanceof EE3 ;    " // Line 36

/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
//@     "

/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag,this.autocloseableContent;    "

//@ signals_only EE1;    "

//@ signals (Exception e) TestJava.flag == 1;    "

//@     "

/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag,this.autocloseableContent;    "

//@ signals_only EE2;    "

//@ signals (Exception e) TestJava.flag == 2;    "

//@ requires flag == 0;    " // Line 23

//@ assignable flag;    "

//@ assert TestJava.flag == 0;      "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;    "  // Not feasible

//@ assert TestJava.flag == 2;    "  // Line 34 // SHould be OK

//@ assert e instanceof EE1;    "  // Line 35 // Should be OK

//@ also public normal_behavior    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;    "

//@ also public normal_behavior    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert normal ==> flag == 1;    "

//@ assert !normal ==> flag == 2;    "

//@ also public normal_behavior    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;    "  // FIXME - should not be able to skip the catch block

//@ also    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;    "  // FIXME - should not be able to skip the catch block

//@ also public normal_behavior    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;     "

//@ also    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 5;    "

//@ assert i>0 ;    "

//@ requires i>=0;    "

//@ assert i>0 ;    "

//@ requires i>=0;    "

//@ ensures \\result>0;    "

//@ assume i>0 ;    "

//@ assert i>0 ;    "

//@ requires i>0;    "

//@ assert i>=0 ;    "

//@ requires i>=0;    "

//@ ensures \\result>=0;    "

//@ requires i>0;    "

//@ also    "

//@ requires i==0;    "

//@ assert i>=0 ;    "

//@ assume o.f >0 ;    "

//@ assert f > 0 ;    "

//@ assume o.f >0 ;    "

//@ assume o.f >0 ;    "

//@ assume o == this ;    "

//@ assert f > 0 ;    "

//@ requires a.length > 5;     "

//@ assume a[1] == 0 ;    "

//@ requires a != null;     "

//@ assume a[1] == 0 ;    "

//@ requires a != null;     "

//@ requires a.length > 5;     "

//@ assume a[-1] == 0 ;    "

//@ requires a != null;     "

//@ requires a.length > 5;     "

//@ requires b.length > 5;     "

//@ assume a[1] == 5 ;    "

//@ assert b[1] == 5 ;    "

//@ requires a != null;     "

//@ requires a.length > 5;     "

//@ assume a[1] == 5 ;    "

//@ assume a == b ;    "

//@ assert b[1] ==5 ;    "

//@ assert c != null;    "

//@ assert c.length >= 0;     "

//@ requires a.length > 5;     "

//@ requires a != null;     "

//@ requires a != null;     "

//@ requires a.length > 5;     "

//@ requires a != null;     "

//@ requires a.length > 5;     "

//@ requires b.length > 5;     "

//@ assert b[1] ==5 ;    "

//@ requires a != null;     "

//@ requires a.length > 5;     " // Line 25

//@ assume a == b ;    "

//@ assert b[1] ==5 ;    "

//@ requires a.length > 3;     "

//@ assignable \\everything;     "

//@ requires a != null;     "

//@ assignable \\everything;     "

//@ requires a != null && a.length > 3;     "

//@ assignable \\everything;     "

//@ ensures \\result == \\old(a[0]);     "

//@ requires a != null && a.length > 3;     "

//@ assignable \\everything;     "

//@ ensures \\result == \\old(a[0]);     " // Line 26

//@ requires a != null && a.length > 3 && i >= 0 && i <= 1;     "

//@ assignable \\everything;     "

//@ ensures \\result == \\old(a[0]);     "

//@ assert f > 0 ;    "

//@ assume o == this ;    "

//@ assert f > 0 ;    "

//@ assignable \\everything;     "

//@ ensures \\result == 2;     "

//@ assignable \\everything;     "

//@ ensures \\result == 10;     "

//@ requires o != null;     "

//@ assignable \\everything;     "

//@ ensures \\result == 1;     "

//@ assignable \\everything;     "

//@ ensures b ==> \\result == 2;     "

//@ assignable \\everything;     "

//@ ensures b ==> \\result == 10;     "

//@ requires this != o && o != null;     "

//@ assignable \\everything;     "

//@ ensures \\result == 1;     "

//@ ensures (\\let int k = i; \\result == k);    "

//@ ensures (\\let int k = 1; \\result == k);    "

//@ requires i >= 0;    "

//@ requires i >= 0;    "

//@ ensures (\\let int k = i, int j = k; \\result == j);    "

//@ ensures (\\let int k = 1, int j = k; \\result == j);    "


//@ requires i != 0;     "

//@ requires i != 0;     "


//@ requires a.length == 10;    "

//@ requires a.length == 10;    "

//@ requires a.length == 10 && i >= 0;    "

//@ requires a.length == 10;    "

//@ requires a.length == 10;    "

//@ requires a.length == 10;    "

//@ requires i >= 3;    "

//@ requires i <= 8;    "

//@ requires a.length == 10;    "

//@ requires a.length == 10;    "

//@ requires i > 1 && a.length == 10;    "

//@ requires i < 5 && a.length == 10;    "

//@ requires a.length == 10;    "

//@ requires a.length == 10;    "

//@ requires a.length == 10;    "

//@ requires i >= 3;    "

//@ requires i <= 8;    "

//@ requires a.length == 10;    "

//@ ensures \\result == a[1];    "

//@ requires a.length == 10;    "

//@ ensures \\result == a[0];    "

/*@ nullable_by_default*/



//@ assert ooo != null;    "

//@ assert ooo instanceof TestJava;    "

/*@ nullable_by_default*/



//@ assert ooo != null;    "

//@ assert ooo instanceof TestJava;    "

//@ assignable ooo;    "

//@ assert x < 3 ;    "

//@ assert x < 4 ;    "

//@ assert x == 13 ;    "

//@ assert y == 11 ;    "

//@ requires j < 1000 && -1000 < j; ensures \\result == j+j+1;    "

//@ requires j != 0;    "

//@ requires t != null;    "

//@ requires i != 0;    "

//@ requires t != null;    "

//@ requires i != 0;    "

//@ assignable \\everything;    "

//@ ensures \\result == j;    "

//@ assignable t.f;    "

//@ requires t != null;    "

//@ requires i != 0;    "

//@ assignable \\everything;    "

//@ requires i != 0;    "

//@ assignable \\everything;    "

//@ requires a.length == 4;    "

//@ requires i != 0;    "

//@ assignable \\everything;    "

//@ requires a.length == 4;    "

//@ requires i != 0;    "

//@ assignable \\everything;    "

//@ requires a.length == 4;    "

//@ assignable \\everything;    "

//@ requires a.length == 4;    "

//@ requires i != 0;    "

//@ assignable \\everything;    "

//@ assert x == 33 ;    "

//@ assert y == 31 ;    "

/*@ nullable*/
//@ requires i < a.length;     "

//@ requires i >= 0;     "

//@ requires i >= 0 && i < a.length;     "

//@ assume a != null && a.length > 1;    "

//@ assume a != null && a.length > 1 && i != null;    "

//@ assume a != null && a.length > 1 && i != null;    "

//@ assume \\elemtype(\\typeof(a)) == \\type(Integer);    "

//@ assume a != null && a.length > 1 && i != null;    "

//@ assume a != null && a.length > 1;    "

//@ assume a != null && a.length > 1 && i != null;    "

//@ assume a != null && a.length > 1 && i != null;    "

//@ assume \\elemtype(\\typeof(a)) == \\type(String);    "

//@ assume a != null && a.length > 1 && i != null;    "

//@ assume a != null && a.length > 1 && i != null;    "

//@ assume a != null && a.length > 1 && i != null;    "

//@ assume a != null && a.length > 1 && i != null;    "

//@ assume \\type(B) <: \\elemtype(\\typeof(a));    "

//@ assume a != null && a.length > 1 && i != null;    "

//@ public invariant b != null && b.length == 20;    "

//@ assert e instanceof NullPointerException || e instanceof ArithmeticException;    "

//@ signals_only NullPointerException, ArithmeticException;    "

//@ signals_only NullPointerException;    "

//@ public invariant b != null && b.length == 20;    "

//@ public invariant b != null && b.length == 20;    "

//@ public invariant b != null && b.length == 20;    "

//@ also public normal_behavior    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 2;    "

//@ assert TestJava.flag == 1;    "

//@ also    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 2;    "

//@ assert TestJava.flag == 1;    "

/*@ pure */
//@ also    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 1;    "

//@ signals (Exception e) TestJava.flag == 10;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 2;    "

//@ assert (\\lbl FLAG TestJava.flag) == 0 || TestJava.flag == 1|| TestJava.flag == 10;    "

//@ also    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 1;    "

//@ signals (Exception e) TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 2;    "

//@ assert TestJava.flag == 1;    "

//@ also public normal_behavior    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 1;    "

//@ also public normal_behavior    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 2;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;    "

/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ signals_only EE1;    "

//@ signals (Exception e) TestJava.flag == 1;    "

/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ signals_only EE2;    "

//@ signals (Exception e) TestJava.flag == 2;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 1;    " // not feasible line 34

//@ assert TestJava.flag == 1;    "

//@ assert e instanceof EE3 ;    " // Line 37

/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ signals_only EE1;    "

//@ signals (Exception e) TestJava.flag == 1;    "

/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ signals_only EE2;    "

//@ signals (Exception e) TestJava.flag == 2;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;    " // not feasible

//@ assert e instanceof EE3 ;    " // Line 36

/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
//@     "

/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag,this.autocloseableContent;    "

//@ signals_only EE1;    "

//@ signals (Exception e) TestJava.flag == 1;    "

//@     "

/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag,this.autocloseableContent;    "

//@ signals_only EE2;    "

//@ signals (Exception e) TestJava.flag == 2;    "

//@ requires flag == 0;    " // Line 23

//@ assignable flag;    "

//@ assert TestJava.flag == 0;      "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;    "  // Not feasible

//@ assert TestJava.flag == 2;    "  // Line 34 // SHould be OK

//@ assert e instanceof EE1;    "  // Line 35 // Should be OK

//@ also public normal_behavior    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;    "

//@ also public normal_behavior    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert normal ==> flag == 1;    "

//@ assert !normal ==> flag == 2;    "

//@ also public normal_behavior    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;    "  // FIXME - should not be able to skip the catch block

//@ also    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;    "  // FIXME - should not be able to skip the catch block

//@ also public normal_behavior    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;     "

//@ also    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 5;    "

//@ assert i == m && q == qq ;    "

//@ assert (k%j) == m && (k/j) == qq;    "

//@ assert i == -m && q == -qq;    "

//@ assert ((-k)%j) == -m && ((-k)/j) == -qq;    "   // Line 15

//@ assert i == m && q == -qq;    "

//@ assert (k%-j) == m && (k/-j) == -qq;    "

//@ assert i == -m && q == qq;    "

//@ assert (-k%-j) == -m && ((-k)/-j) == qq;    "

//@ assert i == m && q == qq ;    "

//@ assert (k%j) == m && (k/j) == qq;    "

//@ assert i == -m && q == -qq;    "

//@ assert ((-k)%j) == -m && ((-k)/j) == -qq;    "   // Line 15

//@ assert i == m && q == -qq;    "

//@ assert (k%-j) == m && (k/-j) == -qq;    "

//@ assert i == -m && q == qq;    "

//@ assert (-k%-j) == -m && ((-k)/-j) == qq;    "

//@ assert i == m && q == qq ;    "

//@ assert (k%j) == m && (k/j) == qq;    "

//@ requires j != 0;    "

//@ requires j != -1 || i != 0x80000000;    "

//@ show i, j, q, r, k;    "

//@ assert (\\lbl KK (q * j + r)) == i;     "

//@ assert k == i;     "

//@ assert (\\lbl QQ (i/j)) * j + (\\lbl RR (i%j)) == i;     "

//@ requires i == 0x80000000 && j == -8322579;     public void mm(int i, int j) { int q = i/j; int r = i%j; //@ show q, r; assert false;     }    "

//@ assert i == m && q == qq ;    "

//@ assert (k%j) == m && (k/j) == qq;    "

//@ assert i == -m && q == -qq;    "

//@ assert ((-k)%j) == -m && ((-k)/j) == -qq;    "   // Line 15

//@ assert i == m && q == -qq;    "

//@ assert (k%-j) == m && (k/-j) == -qq;    "

//@ assert i == -m && q == qq;    "

//@ assert (-k%-j) == -m && ((-k)/-j) == qq;    "

//@ assert i == m && q == qq ;    "

//@ assert (k%j) == m && (k/j) == qq;    "

//@ assert i == -m && q == -qq;    "

//@ assert ((-k)%j) == -m && ((-k)/j) == -qq;    "   // Line 15

//@ assert i == m && q == -qq;    "

//@ assert (k%-j) == m && (k/-j) == -qq;    "

//@ assert i == -m && q == qq;    "

//@ assert (-k%-j) == -m && ((-k)/-j) == qq;    "

//@ requires j != 0 && i > 0 && j > 0;    "

//@ requires j != -1 || i != 0x80000000;    "

//@ show i, j;     "

//@ show q, m;     "

//@ assert (\\lbl K k) == (\\lbl I i);     "

//@ assert (\\lbl SUM (\\lbl PROD (\\lbl D ((\\lbl I i)/(\\lbl J j)))*(\\lbl JJ j)) + (\\lbl M (i%j))) == i;     "  // not OK for i = MIN && j = -1

//@ requires j != 0;    "

//@ show i,j, k, i/j, i%j, (i/j) * j + (i%j);     "

//@ assert k == i;     "

//@ assert (i/j) * j + (i%j) == i;     "

//@ assert i == m && q == qq ;    "

//@ assert (k%j) == m && (k/j) == qq;    "

//@ assert i == -m && q == -qq;    "

//@ assert ((-k)%j) == -m && ((-k)/j) == -qq;    "   // Line 15

//@ assert i == m && q == -qq;    "

//@ assert (k%-j) == m && (k/-j) == -qq;    "

//@ assert i == -m && q == qq;    "

//@ assert (-k%-j) == -m && ((-k)/-j) == qq;    "

//@ assert i == m && q == qq ;    "

//@ assert (k%j) == m && (k/j) == qq;    "

//@ assert i == -m && q == -qq;    "

//@ assert ((-k)%j) == -m && ((-k)/j) == -qq;    "   // Line 15

//@ assert i == m && q == -qq;    "

//@ assert (k%-j) == m && (k/-j) == -qq;    "

//@ assert i == -m && q == qq;    "

//@ assert (-k%-j) == -m && ((-k)/-j) == qq;    "

//@ requires j != 0;    "

//@ show i,j,k,q,m,i/j,i%j; assert k == i;     "

//@ assert (i/j) * j + (i%j) == i;     "

//@ requires j != 0;    "

//@ assert (i%j) == (\\lbl K k);     "  // OK

//@ assert (\\lbl D ((\\lbl I i)/(\\lbl J j))) == (\\lbl M m);     "  // mnot OK for i = MIN && j = -1

//@ requires j != 0;    "

//@ requires i != 0x80000000 || j != -1;    "

//@ assert (i%j) == (\\lbl K k);     "  // OK

//@ assert (i/j) == (\\lbl M m);     "  // OK for i = MIN && j = -1

//@ requires j != 0;    "

//@ assert (i%j) == (\\lbl K k);     "  // OK

//@ assert (\\lbl D ((\\lbl I i)/(\\lbl J j))) == (\\lbl M m);     "  // mnot OK for i = MIN && j = -1

//@ requires j != 0;    "

//@ requires i != 0x8000000000000000L || j != -1;    "

//@ assert (i%j) == (\\lbl K k);     "  // OK

//@ assert (i/j) == (\\lbl M m);     "  // OK for i = MIN && j = -1

//@ requires j != 0;    "

//@ requires i * j <= Integer.MAX_VALUE && i*j >= Integer.MIN_VALUE;    "

//@ show i,j,i*j,(i*j)/j;    "

//@ assert (i*j)/j == i;    "

//@ assert b;    "

//@ requires j != 0;    "

//@ requires i * j <= Long.MAX_VALUE && i*j >= Long.MIN_VALUE;    "

//@ show i,j,i*j,(i*j)/j;    "

//@ assert (i*j)/j == i;    "

//@ assert b;    "

//@ requires j != 0;    "

//@ requires i * j <= Integer.MAX_VALUE && i*j >= Integer.MIN_VALUE;    "

//@ show i,j,i*j,(i*j)/j;    "

//@ assert (i*j)/j == i;    "

//@ assert b;    "

//@ requires j != 0;    "

//@ requires i * j <= Long.MAX_VALUE && i*j >= Long.MIN_VALUE;    "

//@ show i,j,i*j,(i*j)/j;    "

//@ assert (i*j)/j == i;    "

//@ assert b;    "

//@ requires j != 0;    "

//@ requires i * j <= Integer.MAX_VALUE && i*j >= Integer.MIN_VALUE;    "

//@ show i,j,i*j,(i*j)/j;    "

//@ assert (i*j)/j == i;    "

//@ assert b;    "

//@ requires j != 0;    "

//@ requires i * j <= Long.MAX_VALUE && i*j >= Long.MIN_VALUE;    "

//@ show i,j,i*j,(i*j)/j;    "

//@ assert (i*j)/j == i;    "

//@ assert b;    "

//@ requires j != 0;    "

//@ ghost int qq = i/j;     "

//@ show i,j,q,qq,m,i/j,i%j,j*q,j*(q+1),j*(q-1),j*q+m;    "

/*@ assert q >= 0; assert i >= j*q; assert i-j < j*(q+1); assert m >= 0 && m < j; assert i == (j*q) + m; */
/*@ assert q <= 0; assert i >= j*q; assert i < j*(q-1);  assert m >= 0 && m < -j; assert i == (j*q) + m; */
/*@ assert q <= 0; assert i <= j*q; assert i > j*(q-1); assert m <= 0 && m > -j; assert i == (j*q) + m; */
/*@ assert q >= 0; assert i <= j*q; assert i > j*(q+1); assert m <= 0 && m > j; assert i == (j*q) + m; */
//@ requires j != 0;    "

//@ requires i != Integer.MIN_VALUE || j != -1;    "

//@ show i,j,q,m,j*q,j*(q+1),j*(q-1),j*q+m;    "

/*@ assert q >= 0; assert i >= j*q; assert i < j*(q+1); assert m >= 0 && m < j; assert i == (j*q) + m; */
/*@ assert q <= 0; assert i >= j*q; assert i < j*(q-1);  assert m >= 0 && m < -j; assert i == (j*q) + m; */
/*@ assert q <= 0; assert i <= j*q; assert i > j*(q-1); assert m <= 0 && m < -j; assert i == (j*q) + m; */
/*@ assert q >= 0; assert i <= j*q; assert i > j*(q+1); assert m <= 0 && m > j; assert i == (j*q) + m; */
//@ requires j != 0;    "

//@ requires i != Integer.MIN_VALUE || j != -1;    "

//@ show i,j;    "

//@ show q,m,j*q,j*(q+1),j*(q-1),j*q+m;    "

/*@ assert q >= 0; assert i >= j*q; assert m >= 0 && m < j; assert i == (j*q) + m; */
/*@ assert q <= 0; assert i >= j*q;  assert m >= 0 && m < -j; assert i == (j*q) + m; */
/*@ assert q <= 0; assert i <= j*q; assert m <= 0 && m < -j; assert i == (j*q) + m; */
/*@ assert q >= 0; assert i <= j*q; assert m <= 0 && m > j; assert i == (j*q) + m; */
//@ assert i == m && q == qq ;    "

//@ assert (k%j) == m && (k/j) == qq;    "

//@ assert i == -m && q == -qq;    "

//@ assert ((-k)%j) == -m && ((-k)/j) == -qq;    "   // Line 15

//@ assert i == m && q == -qq;    "

//@ assert (k%-j) == m && (k/-j) == -qq;    "

//@ assert i == -m && q == qq;    "

//@ assert (-k%-j) == -m && ((-k)/-j) == qq;    "

//@ assert i == m && q == qq ;    "

//@ assert (k%j) == m && (k/j) == qq;    "

//@ assert i == -m && q == -qq;    "

//@ assert ((-k)%j) == -m && ((-k)/j) == -qq;    "   // Line 15

//@ assert i == m && q == -qq;    "

//@ assert (k%-j) == m && (k/-j) == -qq;    "

//@ assert i == -m && q == qq;    "

//@ assert (-k%-j) == -m && ((-k)/-j) == qq;    "

//@ assert i == m && q == qq ;    "

//@ assert (k%j) == m && (k/j) == qq;    "

//@ requires j != 0;    "

//@ requires j != -1 || i != 0x80000000;    "

//@ show i, j, q, r, k;    "

//@ assert (\\lbl KK (q * j + r)) == i;     "

//@ assert k == i;     "

//@ assert (\\lbl QQ (i/j)) * j + (\\lbl RR (i%j)) == i;     "

//@ requires i == 0x80000000 && j == -8322579;     public void mm(int i, int j) { int q = i/j; int r = i%j; //@ show q, r; assert false;     }    "

//@ assert i == m && q == qq ;    "

//@ assert (k%j) == m && (k/j) == qq;    "

//@ assert i == -m && q == -qq;    "

//@ assert ((-k)%j) == -m && ((-k)/j) == -qq;    "   // Line 15

//@ assert i == m && q == -qq;    "

//@ assert (k%-j) == m && (k/-j) == -qq;    "

//@ assert i == -m && q == qq;    "

//@ assert (-k%-j) == -m && ((-k)/-j) == qq;    "

//@ assert i == m && q == qq ;    "

//@ assert (k%j) == m && (k/j) == qq;    "

//@ assert i == -m && q == -qq;    "

//@ assert ((-k)%j) == -m && ((-k)/j) == -qq;    "   // Line 15

//@ assert i == m && q == -qq;    "

//@ assert (k%-j) == m && (k/-j) == -qq;    "

//@ assert i == -m && q == qq;    "

//@ assert (-k%-j) == -m && ((-k)/-j) == qq;    "

//@ requires j != 0 && i > 0 && j > 0;    "

//@ requires j != -1 || i != 0x80000000;    "

//@ show i, j;     "

//@ show q, m;     "

//@ assert (\\lbl K k) == (\\lbl I i);     "

//@ assert (\\lbl SUM (\\lbl PROD (\\lbl D ((\\lbl I i)/(\\lbl J j)))*(\\lbl JJ j)) + (\\lbl M (i%j))) == i;     "  // not OK for i = MIN && j = -1

//@ requires j != 0;    "

//@ show i,j, k, i/j, i%j, (i/j) * j + (i%j);     "

//@ assert k == i;     "

//@ assert (i/j) * j + (i%j) == i;     "

//@ assert i == m && q == qq ;    "

//@ assert (k%j) == m && (k/j) == qq;    "

//@ assert i == -m && q == -qq;    "

//@ assert ((-k)%j) == -m && ((-k)/j) == -qq;    "   // Line 15

//@ assert i == m && q == -qq;    "

//@ assert (k%-j) == m && (k/-j) == -qq;    "

//@ assert i == -m && q == qq;    "

//@ assert (-k%-j) == -m && ((-k)/-j) == qq;    "

//@ assert i == m && q == qq ;    "

//@ assert (k%j) == m && (k/j) == qq;    "

//@ assert i == -m && q == -qq;    "

//@ assert ((-k)%j) == -m && ((-k)/j) == -qq;    "   // Line 15

//@ assert i == m && q == -qq;    "

//@ assert (k%-j) == m && (k/-j) == -qq;    "

//@ assert i == -m && q == qq;    "

//@ assert (-k%-j) == -m && ((-k)/-j) == qq;    "

//@ requires j != 0;    "

//@ show i,j,k,q,m,i/j,i%j; assert k == i;     "

//@ assert (i/j) * j + (i%j) == i;     "

//@ requires j != 0;    "

//@ assert (i%j) == (\\lbl K k);     "  // OK

//@ assert (\\lbl D ((\\lbl I i)/(\\lbl J j))) == (\\lbl M m);     "  // mnot OK for i = MIN && j = -1

//@ requires j != 0;    "

//@ requires i != 0x80000000 || j != -1;    "

//@ assert (i%j) == (\\lbl K k);     "  // OK

//@ assert (i/j) == (\\lbl M m);     "  // OK for i = MIN && j = -1

//@ requires j != 0;    "

//@ assert (i%j) == (\\lbl K k);     "  // OK

//@ assert (\\lbl D ((\\lbl I i)/(\\lbl J j))) == (\\lbl M m);     "  // mnot OK for i = MIN && j = -1

//@ requires j != 0;    "

//@ requires i != 0x8000000000000000L || j != -1;    "

//@ assert (i%j) == (\\lbl K k);     "  // OK

//@ assert (i/j) == (\\lbl M m);     "  // OK for i = MIN && j = -1

//@ requires j != 0;    "

//@ requires i * j <= Integer.MAX_VALUE && i*j >= Integer.MIN_VALUE;    "

//@ show i,j,i*j,(i*j)/j;    "

//@ assert (i*j)/j == i;    "

//@ assert b;    "

//@ requires j != 0;    "

//@ requires i * j <= Long.MAX_VALUE && i*j >= Long.MIN_VALUE;    "

//@ show i,j,i*j,(i*j)/j;    "

//@ assert (i*j)/j == i;    "

//@ assert b;    "

//@ requires j != 0;    "

//@ requires i * j <= Integer.MAX_VALUE && i*j >= Integer.MIN_VALUE;    "

//@ show i,j,i*j,(i*j)/j;    "

//@ assert (i*j)/j == i;    "

//@ assert b;    "

//@ requires j != 0;    "

//@ requires i * j <= Long.MAX_VALUE && i*j >= Long.MIN_VALUE;    "

//@ show i,j,i*j,(i*j)/j;    "

//@ assert (i*j)/j == i;    "

//@ assert b;    "

//@ requires j != 0;    "

//@ requires i * j <= Integer.MAX_VALUE && i*j >= Integer.MIN_VALUE;    "

//@ show i,j,i*j,(i*j)/j;    "

//@ assert (i*j)/j == i;    "

//@ assert b;    "

//@ requires j != 0;    "

//@ requires i * j <= Long.MAX_VALUE && i*j >= Long.MIN_VALUE;    "

//@ show i,j,i*j,(i*j)/j;    "

//@ assert (i*j)/j == i;    "

//@ assert b;    "

//@ requires j != 0;    "

//@ ghost int qq = i/j;     "

//@ show i,j,q,qq,m,i/j,i%j,j*q,j*(q+1),j*(q-1),j*q+m;    "

/*@ assert q >= 0; assert i >= j*q; assert i-j < j*(q+1); assert m >= 0 && m < j; assert i == (j*q) + m; */
/*@ assert q <= 0; assert i >= j*q; assert i < j*(q-1);  assert m >= 0 && m < -j; assert i == (j*q) + m; */
/*@ assert q <= 0; assert i <= j*q; assert i > j*(q-1); assert m <= 0 && m > -j; assert i == (j*q) + m; */
/*@ assert q >= 0; assert i <= j*q; assert i > j*(q+1); assert m <= 0 && m > j; assert i == (j*q) + m; */
//@ requires j != 0;    "

//@ requires i != Integer.MIN_VALUE || j != -1;    "

//@ show i,j,q,m,j*q,j*(q+1),j*(q-1),j*q+m;    "

/*@ assert q >= 0; assert i >= j*q; assert i < j*(q+1); assert m >= 0 && m < j; assert i == (j*q) + m; */
/*@ assert q <= 0; assert i >= j*q; assert i < j*(q-1);  assert m >= 0 && m < -j; assert i == (j*q) + m; */
/*@ assert q <= 0; assert i <= j*q; assert i > j*(q-1); assert m <= 0 && m < -j; assert i == (j*q) + m; */
/*@ assert q >= 0; assert i <= j*q; assert i > j*(q+1); assert m <= 0 && m > j; assert i == (j*q) + m; */
//@ requires j != 0;    "

//@ requires i != Integer.MIN_VALUE || j != -1;    "

//@ show i,j;    "

//@ show q,m,j*q,j*(q+1),j*(q-1),j*q+m;    "

/*@ assert q >= 0; assert i >= j*q; assert m >= 0 && m < j; assert i == (j*q) + m; */
/*@ assert q <= 0; assert i >= j*q;  assert m >= 0 && m < -j; assert i == (j*q) + m; */
/*@ assert q <= 0; assert i <= j*q; assert m <= 0 && m < -j; assert i == (j*q) + m; */
/*@ assert q >= 0; assert i <= j*q; assert m <= 0 && m > j; assert i == (j*q) + m; */
//@ assert i == m && q == qq ;    "

//@ assert (k%j) == m && (k/j) == qq;    "

//@ assert i == -m && q == -qq;    "

//@ assert ((-k)%j) == -m && ((-k)/j) == -qq;    "   // Line 15

//@ assert i == m && q == -qq;    "

//@ assert (k%-j) == m && (k/-j) == -qq;    "

//@ assert i == -m && q == qq;    "

//@ assert (-k%-j) == -m && ((-k)/-j) == qq;    "

//@ assert i == m && q == qq ;    "

//@ assert (k%j) == m && (k/j) == qq;    "

//@ assert i == -m && q == -qq;    "

//@ assert ((-k)%j) == -m && ((-k)/j) == -qq;    "   // Line 15

//@ assert i == m && q == -qq;    "

//@ assert (k%-j) == m && (k/-j) == -qq;    "

//@ assert i == -m && q == qq;    "

//@ assert (-k%-j) == -m && ((-k)/-j) == qq;    "

//@ assert i == m && q == qq ;    "

//@ assert (k%j) == m && (k/j) == qq;    "

//@ requires j != 0;    "

//@ requires j != -1 || i != 0x80000000;    "

//@ show i, j, q, r, k;    "

//@ assert (\\lbl KK (q * j + r)) == i;     "

//@ assert k == i;     "

//@ assert (\\lbl QQ (i/j)) * j + (\\lbl RR (i%j)) == i;     "

//@ requires i == 0x80000000 && j == -8322579;     public void mm(int i, int j) { int q = i/j; int r = i%j; //@ show q, r; assert false;     }    "

//@ assert i == m && q == qq ;    "

//@ assert (k%j) == m && (k/j) == qq;    "

//@ assert i == -m && q == -qq;    "

//@ assert ((-k)%j) == -m && ((-k)/j) == -qq;    "   // Line 15

//@ assert i == m && q == -qq;    "

//@ assert (k%-j) == m && (k/-j) == -qq;    "

//@ assert i == -m && q == qq;    "

//@ assert (-k%-j) == -m && ((-k)/-j) == qq;    "

//@ assert i == m && q == qq ;    "

//@ assert (k%j) == m && (k/j) == qq;    "

//@ assert i == -m && q == -qq;    "

//@ assert ((-k)%j) == -m && ((-k)/j) == -qq;    "   // Line 15

//@ assert i == m && q == -qq;    "

//@ assert (k%-j) == m && (k/-j) == -qq;    "

//@ assert i == -m && q == qq;    "

//@ assert (-k%-j) == -m && ((-k)/-j) == qq;    "

//@ requires j != 0 && i > 0 && j > 0;    "

//@ requires j != -1 || i != 0x80000000;    "

//@ show i, j;     "

//@ show q, m;     "

//@ assert (\\lbl K k) == (\\lbl I i);     "

//@ assert (\\lbl SUM (\\lbl PROD (\\lbl D ((\\lbl I i)/(\\lbl J j)))*(\\lbl JJ j)) + (\\lbl M (i%j))) == i;     "  // not OK for i = MIN && j = -1

//@ requires j != 0;    "

//@ show i,j, k, i/j, i%j, (i/j) * j + (i%j);     "

//@ assert k == i;     "

//@ assert (i/j) * j + (i%j) == i;     "

//@ assert i == m && q == qq ;    "

//@ assert (k%j) == m && (k/j) == qq;    "

//@ assert i == -m && q == -qq;    "

//@ assert ((-k)%j) == -m && ((-k)/j) == -qq;    "   // Line 15

//@ assert i == m && q == -qq;    "

//@ assert (k%-j) == m && (k/-j) == -qq;    "

//@ assert i == -m && q == qq;    "

//@ assert (-k%-j) == -m && ((-k)/-j) == qq;    "

//@ assert i == m && q == qq ;    "

//@ assert (k%j) == m && (k/j) == qq;    "

//@ assert i == -m && q == -qq;    "

//@ assert ((-k)%j) == -m && ((-k)/j) == -qq;    "   // Line 15

//@ assert i == m && q == -qq;    "

//@ assert (k%-j) == m && (k/-j) == -qq;    "

//@ assert i == -m && q == qq;    "

//@ assert (-k%-j) == -m && ((-k)/-j) == qq;    "

//@ requires j != 0;    "

//@ show i,j,k,q,m,i/j,i%j; assert k == i;     "

//@ assert (i/j) * j + (i%j) == i;     "

//@ requires j != 0;    "

//@ assert (i%j) == (\\lbl K k);     "  // OK

//@ assert (\\lbl D ((\\lbl I i)/(\\lbl J j))) == (\\lbl M m);     "  // mnot OK for i = MIN && j = -1

//@ requires j != 0;    "

//@ requires i != 0x80000000 || j != -1;    "

//@ assert (i%j) == (\\lbl K k);     "  // OK

//@ assert (i/j) == (\\lbl M m);     "  // OK for i = MIN && j = -1

//@ requires j != 0;    "

//@ assert (i%j) == (\\lbl K k);     "  // OK

//@ assert (\\lbl D ((\\lbl I i)/(\\lbl J j))) == (\\lbl M m);     "  // mnot OK for i = MIN && j = -1

//@ requires j != 0;    "

//@ requires i != 0x8000000000000000L || j != -1;    "

//@ assert (i%j) == (\\lbl K k);     "  // OK

//@ assert (i/j) == (\\lbl M m);     "  // OK for i = MIN && j = -1

//@ requires j != 0;    "

//@ requires i * j <= Integer.MAX_VALUE && i*j >= Integer.MIN_VALUE;    "

//@ show i,j,i*j,(i*j)/j;    "

//@ assert (i*j)/j == i;    "

//@ assert b;    "

//@ requires j != 0;    "

//@ requires i * j <= Long.MAX_VALUE && i*j >= Long.MIN_VALUE;    "

//@ show i,j,i*j,(i*j)/j;    "

//@ assert (i*j)/j == i;    "

//@ assert b;    "

//@ requires j != 0;    "

//@ requires i * j <= Integer.MAX_VALUE && i*j >= Integer.MIN_VALUE;    "

//@ show i,j,i*j,(i*j)/j;    "

//@ assert (i*j)/j == i;    "

//@ assert b;    "

//@ requires j != 0;    "

//@ requires i * j <= Long.MAX_VALUE && i*j >= Long.MIN_VALUE;    "

//@ show i,j,i*j,(i*j)/j;    "

//@ assert (i*j)/j == i;    "

//@ assert b;    "

//@ requires j != 0;    "

//@ requires i * j <= Integer.MAX_VALUE && i*j >= Integer.MIN_VALUE;    "

//@ show i,j,i*j,(i*j)/j;    "

//@ assert (i*j)/j == i;    "

//@ assert b;    "

//@ requires j != 0;    "

//@ requires i * j <= Long.MAX_VALUE && i*j >= Long.MIN_VALUE;    "

//@ show i,j,i*j,(i*j)/j;    "

//@ assert (i*j)/j == i;    "

//@ assert b;    "

//@ requires j != 0;    "

//@ ghost int qq = i/j;     "

//@ show i,j,q,qq,m,i/j,i%j,j*q,j*(q+1),j*(q-1),j*q+m;    "

/*@ assert q >= 0; assert i >= j*q; assert i-j < j*(q+1); assert m >= 0 && m < j; assert i == (j*q) + m; */
/*@ assert q <= 0; assert i >= j*q; assert i < j*(q-1);  assert m >= 0 && m < -j; assert i == (j*q) + m; */
/*@ assert q <= 0; assert i <= j*q; assert i > j*(q-1); assert m <= 0 && m > -j; assert i == (j*q) + m; */
/*@ assert q >= 0; assert i <= j*q; assert i > j*(q+1); assert m <= 0 && m > j; assert i == (j*q) + m; */
//@ requires j != 0;    "

//@ requires i != Integer.MIN_VALUE || j != -1;    "

//@ show i,j,q,m,j*q,j*(q+1),j*(q-1),j*q+m;    "

/*@ assert q >= 0; assert i >= j*q; assert i < j*(q+1); assert m >= 0 && m < j; assert i == (j*q) + m; */
/*@ assert q <= 0; assert i >= j*q; assert i < j*(q-1);  assert m >= 0 && m < -j; assert i == (j*q) + m; */
/*@ assert q <= 0; assert i <= j*q; assert i > j*(q-1); assert m <= 0 && m < -j; assert i == (j*q) + m; */
/*@ assert q >= 0; assert i <= j*q; assert i > j*(q+1); assert m <= 0 && m > j; assert i == (j*q) + m; */
//@ requires j != 0;    "

//@ requires i != Integer.MIN_VALUE || j != -1;    "

//@ show i,j;    "

//@ show q,m,j*q,j*(q+1),j*(q-1),j*q+m;    "

/*@ assert q >= 0; assert i >= j*q; assert m >= 0 && m < j; assert i == (j*q) + m; */
/*@ assert q <= 0; assert i >= j*q;  assert m >= 0 && m < -j; assert i == (j*q) + m; */
/*@ assert q <= 0; assert i <= j*q; assert m <= 0 && m < -j; assert i == (j*q) + m; */
/*@ assert q >= 0; assert i <= j*q; assert m <= 0 && m > j; assert i == (j*q) + m; */
//@ assert i == m && q == qq ;    "

//@ assert (k%j) == m && (k/j) == qq;    "

//@ assert i == -m && q == -qq;    "

//@ assert ((-k)%j) == -m && ((-k)/j) == -qq;    "   // Line 15

//@ assert i == m && q == -qq;    "

//@ assert (k%-j) == m && (k/-j) == -qq;    "

//@ assert i == -m && q == qq;    "

//@ assert (-k%-j) == -m && ((-k)/-j) == qq;    "

//@ assert i == m && q == qq ;    "

//@ assert (k%j) == m && (k/j) == qq;    "

//@ assert i == -m && q == -qq;    "

//@ assert ((-k)%j) == -m && ((-k)/j) == -qq;    "   // Line 15

//@ assert i == m && q == -qq;    "

//@ assert (k%-j) == m && (k/-j) == -qq;    "

//@ assert i == -m && q == qq;    "

//@ assert (-k%-j) == -m && ((-k)/-j) == qq;    "

//@ assert i == m && q == qq ;    "

//@ assert (k%j) == m && (k/j) == qq;    "

//@ requires j != 0;    "

//@ requires j != -1 || i != 0x80000000;    "

//@ show i, j, q, r, k;    "

//@ assert (\\lbl KK (q * j + r)) == i;     "

//@ assert k == i;     "

//@ assert (\\lbl QQ (i/j)) * j + (\\lbl RR (i%j)) == i;     "

//@ requires i == 0x80000000 && j == -8322579;     public void mm(int i, int j) { int q = i/j; int r = i%j; //@ show q, r; assert false;     }    "

//@ assert i == m && q == qq ;    "

//@ assert (k%j) == m && (k/j) == qq;    "

//@ assert i == -m && q == -qq;    "

//@ assert ((-k)%j) == -m && ((-k)/j) == -qq;    "   // Line 15

//@ assert i == m && q == -qq;    "

//@ assert (k%-j) == m && (k/-j) == -qq;    "

//@ assert i == -m && q == qq;    "

//@ assert (-k%-j) == -m && ((-k)/-j) == qq;    "

//@ assert i == m && q == qq ;    "

//@ assert (k%j) == m && (k/j) == qq;    "

//@ assert i == -m && q == -qq;    "

//@ assert ((-k)%j) == -m && ((-k)/j) == -qq;    "   // Line 15

//@ assert i == m && q == -qq;    "

//@ assert (k%-j) == m && (k/-j) == -qq;    "

//@ assert i == -m && q == qq;    "

//@ assert (-k%-j) == -m && ((-k)/-j) == qq;    "

//@ requires j != 0 && i > 0 && j > 0;    "

//@ requires j != -1 || i != 0x80000000;    "

//@ show i, j;     "

//@ show q, m;     "

//@ assert (\\lbl K k) == (\\lbl I i);     "

//@ assert (\\lbl SUM (\\lbl PROD (\\lbl D ((\\lbl I i)/(\\lbl J j)))*(\\lbl JJ j)) + (\\lbl M (i%j))) == i;     "  // not OK for i = MIN && j = -1

//@ requires j != 0;    "

//@ show i,j, k, i/j, i%j, (i/j) * j + (i%j);     "

//@ assert k == i;     "

//@ assert (i/j) * j + (i%j) == i;     "

//@ assert i == m && q == qq ;    "

//@ assert (k%j) == m && (k/j) == qq;    "

//@ assert i == -m && q == -qq;    "

//@ assert ((-k)%j) == -m && ((-k)/j) == -qq;    "   // Line 15

//@ assert i == m && q == -qq;    "

//@ assert (k%-j) == m && (k/-j) == -qq;    "

//@ assert i == -m && q == qq;    "

//@ assert (-k%-j) == -m && ((-k)/-j) == qq;    "

//@ assert i == m && q == qq ;    "

//@ assert (k%j) == m && (k/j) == qq;    "

//@ assert i == -m && q == -qq;    "

//@ assert ((-k)%j) == -m && ((-k)/j) == -qq;    "   // Line 15

//@ assert i == m && q == -qq;    "

//@ assert (k%-j) == m && (k/-j) == -qq;    "

//@ assert i == -m && q == qq;    "

//@ assert (-k%-j) == -m && ((-k)/-j) == qq;    "

//@ requires j != 0;    "

//@ show i,j,k,q,m,i/j,i%j; assert k == i;     "

//@ assert (i/j) * j + (i%j) == i;     "

//@ requires j != 0;    "

//@ assert (i%j) == (\\lbl K k);     "  // OK

//@ assert (\\lbl D ((\\lbl I i)/(\\lbl J j))) == (\\lbl M m);     "  // mnot OK for i = MIN && j = -1

//@ requires j != 0;    "

//@ requires i != 0x80000000 || j != -1;    "

//@ assert (i%j) == (\\lbl K k);     "  // OK

//@ assert (i/j) == (\\lbl M m);     "  // OK for i = MIN && j = -1

//@ requires j != 0;    "

//@ assert (i%j) == (\\lbl K k);     "  // OK

//@ assert (\\lbl D ((\\lbl I i)/(\\lbl J j))) == (\\lbl M m);     "  // mnot OK for i = MIN && j = -1

//@ requires j != 0;    "

//@ requires i != 0x8000000000000000L || j != -1;    "

//@ assert (i%j) == (\\lbl K k);     "  // OK

//@ assert (i/j) == (\\lbl M m);     "  // OK for i = MIN && j = -1

//@ requires j != 0;    "

//@ requires i * j <= Integer.MAX_VALUE && i*j >= Integer.MIN_VALUE;    "

//@ show i,j,i*j,(i*j)/j;    "

//@ assert (i*j)/j == i;    "

//@ assert b;    "

//@ requires j != 0;    "

//@ requires i * j <= Long.MAX_VALUE && i*j >= Long.MIN_VALUE;    "

//@ show i,j,i*j,(i*j)/j;    "

//@ assert (i*j)/j == i;    "

//@ assert b;    "

//@ requires j != 0;    "

//@ requires i * j <= Integer.MAX_VALUE && i*j >= Integer.MIN_VALUE;    "

//@ show i,j,i*j,(i*j)/j;    "

//@ assert (i*j)/j == i;    "

//@ assert b;    "

//@ requires j != 0;    "

//@ requires i * j <= Long.MAX_VALUE && i*j >= Long.MIN_VALUE;    "

//@ show i,j,i*j,(i*j)/j;    "

//@ assert (i*j)/j == i;    "

//@ assert b;    "

//@ requires j != 0;    "

//@ requires i * j <= Integer.MAX_VALUE && i*j >= Integer.MIN_VALUE;    "

//@ show i,j,i*j,(i*j)/j;    "

//@ assert (i*j)/j == i;    "

//@ assert b;    "

//@ requires j != 0;    "

//@ requires i * j <= Long.MAX_VALUE && i*j >= Long.MIN_VALUE;    "

//@ show i,j,i*j,(i*j)/j;    "

//@ assert (i*j)/j == i;    "

//@ assert b;    "

//@ requires j != 0;    "

//@ ghost int qq = i/j;     "

//@ show i,j,q,qq,m,i/j,i%j,j*q,j*(q+1),j*(q-1),j*q+m;    "

/*@ assert q >= 0; assert i >= j*q; assert i-j < j*(q+1); assert m >= 0 && m < j; assert i == (j*q) + m; */
/*@ assert q <= 0; assert i >= j*q; assert i < j*(q-1);  assert m >= 0 && m < -j; assert i == (j*q) + m; */
/*@ assert q <= 0; assert i <= j*q; assert i > j*(q-1); assert m <= 0 && m > -j; assert i == (j*q) + m; */
/*@ assert q >= 0; assert i <= j*q; assert i > j*(q+1); assert m <= 0 && m > j; assert i == (j*q) + m; */
//@ requires j != 0;    "

//@ requires i != Integer.MIN_VALUE || j != -1;    "

//@ show i,j,q,m,j*q,j*(q+1),j*(q-1),j*q+m;    "

/*@ assert q >= 0; assert i >= j*q; assert i < j*(q+1); assert m >= 0 && m < j; assert i == (j*q) + m; */
/*@ assert q <= 0; assert i >= j*q; assert i < j*(q-1);  assert m >= 0 && m < -j; assert i == (j*q) + m; */
/*@ assert q <= 0; assert i <= j*q; assert i > j*(q-1); assert m <= 0 && m < -j; assert i == (j*q) + m; */
/*@ assert q >= 0; assert i <= j*q; assert i > j*(q+1); assert m <= 0 && m > j; assert i == (j*q) + m; */
//@ requires j != 0;    "

//@ requires i != Integer.MIN_VALUE || j != -1;    "

//@ show i,j;    "

//@ show q,m,j*q,j*(q+1),j*(q-1),j*q+m;    "

/*@ assert q >= 0; assert i >= j*q; assert m >= 0 && m < j; assert i == (j*q) + m; */
/*@ assert q <= 0; assert i >= j*q;  assert m >= 0 && m < -j; assert i == (j*q) + m; */
/*@ assert q <= 0; assert i <= j*q; assert m <= 0 && m < -j; assert i == (j*q) + m; */
/*@ assert q >= 0; assert i <= j*q; assert m <= 0 && m > j; assert i == (j*q) + m; */
//@ assert i == m && q == qq ;    "

//@ assert (k%j) == m && (k/j) == qq;    "

//@ assert i == -m && q == -qq;    "

//@ assert ((-k)%j) == -m && ((-k)/j) == -qq;    "   // Line 15

//@ assert i == m && q == -qq;    "

//@ assert (k%-j) == m && (k/-j) == -qq;    "

//@ assert i == -m && q == qq;    "

//@ assert (-k%-j) == -m && ((-k)/-j) == qq;    "

//@ assert i == m && q == qq ;    "

//@ assert (k%j) == m && (k/j) == qq;    "

//@ assert i == -m && q == -qq;    "

//@ assert ((-k)%j) == -m && ((-k)/j) == -qq;    "   // Line 15

//@ assert i == m && q == -qq;    "

//@ assert (k%-j) == m && (k/-j) == -qq;    "

//@ assert i == -m && q == qq;    "

//@ assert (-k%-j) == -m && ((-k)/-j) == qq;    "

//@ assert i == m && q == qq ;    "

//@ assert (k%j) == m && (k/j) == qq;    "

//@ requires j != 0;    "

//@ requires j != -1 || i != 0x80000000;    "

//@ show i, j, q, r, k;    "

//@ assert (\\lbl KK (q * j + r)) == i;     "

//@ assert k == i;     "

//@ assert (\\lbl QQ (i/j)) * j + (\\lbl RR (i%j)) == i;     "

//@ requires i == 0x80000000 && j == -8322579;     public void mm(int i, int j) { int q = i/j; int r = i%j; //@ show q, r; assert false;     }    "

//@ assert i == m && q == qq ;    "

//@ assert (k%j) == m && (k/j) == qq;    "

//@ assert i == -m && q == -qq;    "

//@ assert ((-k)%j) == -m && ((-k)/j) == -qq;    "   // Line 15

//@ assert i == m && q == -qq;    "

//@ assert (k%-j) == m && (k/-j) == -qq;    "

//@ assert i == -m && q == qq;    "

//@ assert (-k%-j) == -m && ((-k)/-j) == qq;    "

//@ assert i == m && q == qq ;    "

//@ assert (k%j) == m && (k/j) == qq;    "

//@ assert i == -m && q == -qq;    "

//@ assert ((-k)%j) == -m && ((-k)/j) == -qq;    "   // Line 15

//@ assert i == m && q == -qq;    "

//@ assert (k%-j) == m && (k/-j) == -qq;    "

//@ assert i == -m && q == qq;    "

//@ assert (-k%-j) == -m && ((-k)/-j) == qq;    "

//@ requires j != 0 && i > 0 && j > 0;    "

//@ requires j != -1 || i != 0x80000000;    "

//@ show i, j;     "

//@ show q, m;     "

//@ assert (\\lbl K k) == (\\lbl I i);     "

//@ assert (\\lbl SUM (\\lbl PROD (\\lbl D ((\\lbl I i)/(\\lbl J j)))*(\\lbl JJ j)) + (\\lbl M (i%j))) == i;     "  // not OK for i = MIN && j = -1

//@ requires j != 0;    "

//@ show i,j, k, i/j, i%j, (i/j) * j + (i%j);     "

//@ assert k == i;     "

//@ assert (i/j) * j + (i%j) == i;     "

//@ assert i == m && q == qq ;    "

//@ assert (k%j) == m && (k/j) == qq;    "

//@ assert i == -m && q == -qq;    "

//@ assert ((-k)%j) == -m && ((-k)/j) == -qq;    "   // Line 15

//@ assert i == m && q == -qq;    "

//@ assert (k%-j) == m && (k/-j) == -qq;    "

//@ assert i == -m && q == qq;    "

//@ assert (-k%-j) == -m && ((-k)/-j) == qq;    "

//@ assert i == m && q == qq ;    "

//@ assert (k%j) == m && (k/j) == qq;    "

//@ assert i == -m && q == -qq;    "

//@ assert ((-k)%j) == -m && ((-k)/j) == -qq;    "   // Line 15

//@ assert i == m && q == -qq;    "

//@ assert (k%-j) == m && (k/-j) == -qq;    "

//@ assert i == -m && q == qq;    "

//@ assert (-k%-j) == -m && ((-k)/-j) == qq;    "

//@ requires j != 0;    "

//@ show i,j,k,q,m,i/j,i%j; assert k == i;     "

//@ assert (i/j) * j + (i%j) == i;     "

//@ requires j != 0;    "

//@ assert (i%j) == (\\lbl K k);     "  // OK

//@ assert (\\lbl D ((\\lbl I i)/(\\lbl J j))) == (\\lbl M m);     "  // mnot OK for i = MIN && j = -1

//@ requires j != 0;    "

//@ requires i != 0x80000000 || j != -1;    "

//@ assert (i%j) == (\\lbl K k);     "  // OK

//@ assert (i/j) == (\\lbl M m);     "  // OK for i = MIN && j = -1

//@ requires j != 0;    "

//@ assert (i%j) == (\\lbl K k);     "  // OK

//@ assert (\\lbl D ((\\lbl I i)/(\\lbl J j))) == (\\lbl M m);     "  // mnot OK for i = MIN && j = -1

//@ requires j != 0;    "

//@ requires i != 0x8000000000000000L || j != -1;    "

//@ assert (i%j) == (\\lbl K k);     "  // OK

//@ assert (i/j) == (\\lbl M m);     "  // OK for i = MIN && j = -1

//@ requires j != 0;    "

//@ requires i * j <= Integer.MAX_VALUE && i*j >= Integer.MIN_VALUE;    "

//@ show i,j,i*j,(i*j)/j;    "

//@ assert (i*j)/j == i;    "

//@ assert b;    "

//@ requires j != 0;    "

//@ requires i * j <= Long.MAX_VALUE && i*j >= Long.MIN_VALUE;    "

//@ show i,j,i*j,(i*j)/j;    "

//@ assert (i*j)/j == i;    "

//@ assert b;    "

//@ requires j != 0;    "

//@ requires i * j <= Integer.MAX_VALUE && i*j >= Integer.MIN_VALUE;    "

//@ show i,j,i*j,(i*j)/j;    "

//@ assert (i*j)/j == i;    "

//@ assert b;    "

//@ requires j != 0;    "

//@ requires i * j <= Long.MAX_VALUE && i*j >= Long.MIN_VALUE;    "

//@ show i,j,i*j,(i*j)/j;    "

//@ assert (i*j)/j == i;    "

//@ assert b;    "

//@ requires j != 0;    "

//@ requires i * j <= Integer.MAX_VALUE && i*j >= Integer.MIN_VALUE;    "

//@ show i,j,i*j,(i*j)/j;    "

//@ assert (i*j)/j == i;    "

//@ assert b;    "

//@ requires j != 0;    "

//@ requires i * j <= Long.MAX_VALUE && i*j >= Long.MIN_VALUE;    "

//@ show i,j,i*j,(i*j)/j;    "

//@ assert (i*j)/j == i;    "

//@ assert b;    "

//@ requires j != 0;    "

//@ ghost int qq = i/j;     "

//@ show i,j,q,qq,m,i/j,i%j,j*q,j*(q+1),j*(q-1),j*q+m;    "

/*@ assert q >= 0; assert i >= j*q; assert i-j < j*(q+1); assert m >= 0 && m < j; assert i == (j*q) + m; */
/*@ assert q <= 0; assert i >= j*q; assert i < j*(q-1);  assert m >= 0 && m < -j; assert i == (j*q) + m; */
/*@ assert q <= 0; assert i <= j*q; assert i > j*(q-1); assert m <= 0 && m > -j; assert i == (j*q) + m; */
/*@ assert q >= 0; assert i <= j*q; assert i > j*(q+1); assert m <= 0 && m > j; assert i == (j*q) + m; */
//@ requires j != 0;    "

//@ requires i != Integer.MIN_VALUE || j != -1;    "

//@ show i,j,q,m,j*q,j*(q+1),j*(q-1),j*q+m;    "

/*@ assert q >= 0; assert i >= j*q; assert i < j*(q+1); assert m >= 0 && m < j; assert i == (j*q) + m; */
/*@ assert q <= 0; assert i >= j*q; assert i < j*(q-1);  assert m >= 0 && m < -j; assert i == (j*q) + m; */
/*@ assert q <= 0; assert i <= j*q; assert i > j*(q-1); assert m <= 0 && m < -j; assert i == (j*q) + m; */
/*@ assert q >= 0; assert i <= j*q; assert i > j*(q+1); assert m <= 0 && m > j; assert i == (j*q) + m; */
//@ requires j != 0;    "

//@ requires i != Integer.MIN_VALUE || j != -1;    "

//@ show i,j;    "

//@ show q,m,j*q,j*(q+1),j*(q-1),j*q+m;    "

/*@ assert q >= 0; assert i >= j*q; assert m >= 0 && m < j; assert i == (j*q) + m; */
/*@ assert q <= 0; assert i >= j*q;  assert m >= 0 && m < -j; assert i == (j*q) + m; */
/*@ assert q <= 0; assert i <= j*q; assert m <= 0 && m < -j; assert i == (j*q) + m; */
/*@ assert q >= 0; assert i <= j*q; assert m <= 0 && m > j; assert i == (j*q) + m; */
//@ requires i >= 0;    "

//@ ensures \\result == i;    "

//@ ensures i != 0x80000000 ==> \\safe_math(\\result + i) == 0;    "

//@ ensures i == 0x80000000 ==> \\result == i;    "

/*@ code_java_math spec_bigint_math */
//@ ensures i != 0x8000000000000000L ==> \\safe_math(\\result + i) == 0;    "

//@ ensures i == 0x8000000000000000L ==> \\result == i;    "

/*@ code_java_math */
//@ ensures i != 0x80000000 ==> \\safe_math(\\result + i) == 0;    "

//@ ensures i == 0x80000000 ==> \\result == i;    "

//@ ensures i != 0x8000000000000000L ==> \\safe_math(\\result + i) == 0;    "

//@ ensures i == 0x8000000000000000L ==> \\result == i;    "

//@ ensures \\safe_math(\\result + i) == 0;    "

//@ ensures \\safe_math(\\result + i) == 0;    "

//@ ensures \\safe_math(\\result + i) == 0;    "

//@ ensures \\safe_math(\\result + i) == 0;    "

//@ assume i <= 0x3FFFFFFF;    "

//@ assume i >= (int)(0xC0000000);    "

//@ assume i <= 0x3FFFFFFF;    "

//@ assume i >= (int)(0xC0000000);    "

//@ assume (i < 0) != (j < 0);    "

//@ assume i >= 0;    "

//@ assert k >= 0;    " // Error

//@ assume i >= 0;    "

//@ assert k >= 0;    "

//@ assume i >= 0;    "

//@ assert k >= 0;    "

//@ assume i >= 0;    "

//@ assert k >= 0;    "

//@ requires j !=0 ;     "

//@ requires j !=0;    "

//@ requires j !=0;    "

//@ assume i <= 30000 && i >= -30000;    "

//@ requires i == 70000;    "

//@ ensures \\result == 605032704;    "

//@ requires i == 30000;    "

//@ ensures \\result == 900000000L;    "

//@ assume i <= 30000 && i >= -30000;    "

//@ requires i == 70000;    "

//@ ensures \\result == 605032704L;    "

//@ requires i == 70000;    "

//@ ensures \\result == -605032704L;    "

//@ requires i == 70000;    "

//@ ensures \\result == -605032704L;    "

//@ requires i == 30000;    "

//@ ensures \\result == 900000000L;    "

//@ assume i <= 30000 && i >= -30000;    "

//@ requires i == 70000;    "

//@ ensures \\result == 4900000000L;    "

//@ requires i == 70000;    "

//@ ensures \\result == -4900000000L;    "

//@ requires i == 70000;    "

//@ ensures \\result == 4900000000L;    "

//@ requires i >= 0;    "

//@ ensures \\result == i;    "

//@ ensures i != 0x80000000 ==> \\safe_math(\\result + i) == 0;    "

//@ ensures i == 0x80000000 ==> \\result == i;    "

/*@ code_java_math spec_bigint_math */
//@ ensures i != 0x8000000000000000L ==> \\safe_math(\\result + i) == 0;    "

//@ ensures i == 0x8000000000000000L ==> \\result == i;    "

/*@ code_java_math */
//@ ensures i != 0x80000000 ==> \\safe_math(\\result + i) == 0;    "

//@ ensures i == 0x80000000 ==> \\result == i;    "

//@ ensures i != 0x8000000000000000L ==> \\safe_math(\\result + i) == 0;    "

//@ ensures i == 0x8000000000000000L ==> \\result == i;    "

//@ ensures \\safe_math(\\result + i) == 0;    "

//@ ensures \\safe_math(\\result + i) == 0;    "

//@ ensures \\safe_math(\\result + i) == 0;    "

//@ ensures \\safe_math(\\result + i) == 0;    "

//@ assume i <= 0x3FFFFFFF;    "

//@ assume i >= (int)(0xC0000000);    "

//@ assume i <= 0x3FFFFFFF;    "

//@ assume i >= (int)(0xC0000000);    "

//@ assume (i < 0) != (j < 0);    "

//@ assume i >= 0;    "

//@ assert k >= 0;    " // Error

//@ assume i >= 0;    "

//@ assert k >= 0;    "

//@ assume i >= 0;    "

//@ assert k >= 0;    "

//@ assume i >= 0;    "

//@ assert k >= 0;    "

//@ requires j !=0 ;     "

//@ requires j !=0;    "

//@ requires j !=0;    "

//@ assume i <= 30000 && i >= -30000;    "

//@ requires i == 70000;    "

//@ ensures \\result == 605032704;    "

//@ requires i == 30000;    "

//@ ensures \\result == 900000000L;    "

//@ assume i <= 30000 && i >= -30000;    "

//@ requires i == 70000;    "

//@ ensures \\result == 605032704L;    "

//@ requires i == 70000;    "

//@ ensures \\result == -605032704L;    "

//@ requires i == 70000;    "

//@ ensures \\result == -605032704L;    "

//@ requires i == 30000;    "

//@ ensures \\result == 900000000L;    "

//@ assume i <= 30000 && i >= -30000;    "

//@ requires i == 70000;    "

//@ ensures \\result == 4900000000L;    "

//@ requires i == 70000;    "

//@ ensures \\result == -4900000000L;    "

//@ requires i == 70000;    "

//@ ensures \\result == 4900000000L;    "

//@ requires i >= 0;    "

//@ ensures \\result == i;    "

//@ ensures i != 0x80000000 ==> \\safe_math(\\result + i) == 0;    "

//@ ensures i == 0x80000000 ==> \\result == i;    "

/*@ code_java_math spec_bigint_math */
//@ ensures i != 0x8000000000000000L ==> \\safe_math(\\result + i) == 0;    "

//@ ensures i == 0x8000000000000000L ==> \\result == i;    "

/*@ code_java_math */
//@ ensures i != 0x80000000 ==> \\safe_math(\\result + i) == 0;    "

//@ ensures i == 0x80000000 ==> \\result == i;    "

//@ ensures i != 0x8000000000000000L ==> \\safe_math(\\result + i) == 0;    "

//@ ensures i == 0x8000000000000000L ==> \\result == i;    "

//@ ensures \\safe_math(\\result + i) == 0;    "

//@ ensures \\safe_math(\\result + i) == 0;    "

//@ ensures \\safe_math(\\result + i) == 0;    "

//@ ensures \\safe_math(\\result + i) == 0;    "

//@ assume i <= 0x3FFFFFFF;    "

//@ assume i >= (int)(0xC0000000);    "

//@ assume i <= 0x3FFFFFFF;    "

//@ assume i >= (int)(0xC0000000);    "

//@ assume (i < 0) != (j < 0);    "

//@ assume i >= 0;    "

//@ assert k >= 0;    " // Error

//@ assume i >= 0;    "

//@ assert k >= 0;    "

//@ assume i >= 0;    "

//@ assert k >= 0;    "

//@ assume i >= 0;    "

//@ assert k >= 0;    "

//@ requires j !=0 ;     "

//@ requires j !=0;    "

//@ requires j !=0;    "

//@ assume i <= 30000 && i >= -30000;    "

//@ requires i == 70000;    "

//@ ensures \\result == 605032704;    "

//@ requires i == 30000;    "

//@ ensures \\result == 900000000L;    "

//@ assume i <= 30000 && i >= -30000;    "

//@ requires i == 70000;    "

//@ ensures \\result == 605032704L;    "

//@ requires i == 70000;    "

//@ ensures \\result == -605032704L;    "

//@ requires i == 70000;    "

//@ ensures \\result == -605032704L;    "

//@ requires i == 30000;    "

//@ ensures \\result == 900000000L;    "

//@ assume i <= 30000 && i >= -30000;    "

//@ requires i == 70000;    "

//@ ensures \\result == 4900000000L;    "

//@ requires i == 70000;    "

//@ ensures \\result == -4900000000L;    "

//@ requires i == 70000;    "

//@ ensures \\result == 4900000000L;    "

//@ requires i >= 0;    "

//@ ensures \\result == i;    "

//@ ensures i != 0x80000000 ==> \\safe_math(\\result + i) == 0;    "

//@ ensures i == 0x80000000 ==> \\result == i;    "

/*@ code_java_math spec_bigint_math */
//@ ensures i != 0x8000000000000000L ==> \\safe_math(\\result + i) == 0;    "

//@ ensures i == 0x8000000000000000L ==> \\result == i;    "

/*@ code_java_math */
//@ ensures i != 0x80000000 ==> \\safe_math(\\result + i) == 0;    "

//@ ensures i == 0x80000000 ==> \\result == i;    "

//@ ensures i != 0x8000000000000000L ==> \\safe_math(\\result + i) == 0;    "

//@ ensures i == 0x8000000000000000L ==> \\result == i;    "

//@ ensures \\safe_math(\\result + i) == 0;    "

//@ ensures \\safe_math(\\result + i) == 0;    "

//@ ensures \\safe_math(\\result + i) == 0;    "

//@ ensures \\safe_math(\\result + i) == 0;    "

//@ assume i <= 0x3FFFFFFF;    "

//@ assume i >= (int)(0xC0000000);    "

//@ assume i <= 0x3FFFFFFF;    "

//@ assume i >= (int)(0xC0000000);    "

//@ assume (i < 0) != (j < 0);    "

//@ assume i >= 0;    "

//@ assert k >= 0;    " // Error

//@ assume i >= 0;    "

//@ assert k >= 0;    "

//@ assume i >= 0;    "

//@ assert k >= 0;    "

//@ assume i >= 0;    "

//@ assert k >= 0;    "

//@ requires j !=0 ;     "

//@ requires j !=0;    "

//@ requires j !=0;    "

//@ assume i <= 30000 && i >= -30000;    "

//@ requires i == 70000;    "

//@ ensures \\result == 605032704;    "

//@ requires i == 30000;    "

//@ ensures \\result == 900000000L;    "

//@ assume i <= 30000 && i >= -30000;    "

//@ requires i == 70000;    "

//@ ensures \\result == 605032704L;    "

//@ requires i == 70000;    "

//@ ensures \\result == -605032704L;    "

//@ requires i == 70000;    "

//@ ensures \\result == -605032704L;    "

//@ requires i == 30000;    "

//@ ensures \\result == 900000000L;    "

//@ assume i <= 30000 && i >= -30000;    "

//@ requires i == 70000;    "

//@ ensures \\result == 4900000000L;    "

//@ requires i == 70000;    "

//@ ensures \\result == -4900000000L;    "

//@ requires i == 70000;    "

//@ ensures \\result == 4900000000L;    "

//@ requires i >= 0;    "

//@ ensures \\result == i;    "

//@ ensures i != 0x80000000 ==> \\safe_math(\\result + i) == 0;    "

//@ ensures i == 0x80000000 ==> \\result == i;    "

/*@ code_java_math spec_bigint_math */
//@ ensures i != 0x8000000000000000L ==> \\safe_math(\\result + i) == 0;    "

//@ ensures i == 0x8000000000000000L ==> \\result == i;    "

/*@ code_java_math */
//@ ensures i != 0x80000000 ==> \\safe_math(\\result + i) == 0;    "

//@ ensures i == 0x80000000 ==> \\result == i;    "

//@ ensures i != 0x8000000000000000L ==> \\safe_math(\\result + i) == 0;    "

//@ ensures i == 0x8000000000000000L ==> \\result == i;    "

//@ ensures \\safe_math(\\result + i) == 0;    "

//@ ensures \\safe_math(\\result + i) == 0;    "

//@ ensures \\safe_math(\\result + i) == 0;    "

//@ ensures \\safe_math(\\result + i) == 0;    "

//@ assume i <= 0x3FFFFFFF;    "

//@ assume i >= (int)(0xC0000000);    "

//@ assume i <= 0x3FFFFFFF;    "

//@ assume i >= (int)(0xC0000000);    "

//@ assume (i < 0) != (j < 0);    "

//@ assume i >= 0;    "

//@ assert k >= 0;    " // Error

//@ assume i >= 0;    "

//@ assert k >= 0;    "

//@ assume i >= 0;    "

//@ assert k >= 0;    "

//@ assume i >= 0;    "

//@ assert k >= 0;    "

//@ requires j !=0 ;     "

//@ requires j !=0;    "

//@ requires j !=0;    "

//@ assume i <= 30000 && i >= -30000;    "

//@ requires i == 70000;    "

//@ ensures \\result == 605032704;    "

//@ requires i == 30000;    "

//@ ensures \\result == 900000000L;    "

//@ assume i <= 30000 && i >= -30000;    "

//@ requires i == 70000;    "

//@ ensures \\result == 605032704L;    "

//@ requires i == 70000;    "

//@ ensures \\result == -605032704L;    "

//@ requires i == 70000;    "

//@ ensures \\result == -605032704L;    "

//@ requires i == 30000;    "

//@ ensures \\result == 900000000L;    "

//@ assume i <= 30000 && i >= -30000;    "

//@ requires i == 70000;    "

//@ ensures \\result == 4900000000L;    "

//@ requires i == 70000;    "

//@ ensures \\result == -4900000000L;    "

//@ requires i == 70000;    "

//@ ensures \\result == 4900000000L;    "

//@ requires n <= 0x7ffffff0;    "

//@ ensures n <= \\result;    "

//@ ensures \\result <= n+15;    "

//@ ensures (\\result&15) == 0;    "

//@ pure    "

//@ code_java_math spec_java_math    "

//@ requires n <= 0x7ffffff0;    "

//@ ensures n <= \\result;    "

//@ ensures \\result <= n+15;    "

//@ ensures (\\result&15) == 0;    "

//@ pure    "

//@ code_java_math spec_java_math    "

//@ requires n <= 0x7ffffff0;    "

//@ ensures n <= \\result;    "

//@ ensures \\result <= n+15;    "

//@ ensures (\\result%16) == 0;    "

//@ pure    "

//@ code_java_math spec_java_math    "

//@ ensures n <= \\result;    "

//@ ensures \\result <= n+15;    "

//@ ensures (\\result&15) == 0;    "  // FAILS for very large n, e.g. Integer.MAX_VALUE

//@ pure    "

//@ code_java_math spec_java_math    "

//@ requires n <= Integer.MAX_VALUE-15;    "

//@ ensures n <= \\result;    "

//@ ensures \\result <= n+15;    "

//@ ensures (\\result&15) == 0;    "

//@ pure    "

//@ code_java_math spec_java_math    "

//@ requires true;    "

//@ code_java_math spec_java_math    "

//@ requires true;    "

//@ code_java_math spec_java_math    "

//@ requires n <= 0x7ffffff0;    "

//@ ensures n <= \\result;    "

//@ ensures \\result <= n+15;    "

//@ ensures (\\result&15) == 0;    "

//@ pure    "

//@ code_java_math spec_java_math    "

//@ requires n <= 0x7ffffff0;    "

//@ ensures n <= \\result;    "

//@ ensures \\result <= n+15;    "

//@ ensures (\\result&15) == 0;    "

//@ pure    "

//@ code_java_math spec_java_math    "

//@ requires (i&5) == 1; pure     "

//@ requires A.mm(1);    "

//@ requires (i&5) == 1; pure     "

//@ requires A.mm(1);    "

//@ requires (i&5) == 1; pure     "

//@ requires A.mm(1);    "

//@ requires n <= 0x7ffffff0;    "

//@ ensures n <= \\result;    "

//@ ensures \\result <= n+15;    "

//@ ensures (\\result&15) == 0;    "

//@ pure    "

//@ code_java_math spec_java_math    "

//@ requires n <= 0x7ffffff0;    "

//@ ensures n <= \\result;    "

//@ ensures \\result <= n+15;    "

//@ ensures (\\result&15) == 0;    "

//@ pure    "

//@ code_java_math spec_java_math    "

//@ requires n <= 0x7ffffff0;    "

//@ ensures n <= \\result;    "

//@ ensures \\result <= n+15;    "

//@ ensures (\\result%16) == 0;    "

//@ pure    "

//@ code_java_math spec_java_math    "

//@ ensures n <= \\result;    "

//@ ensures \\result <= n+15;    "

//@ ensures (\\result&15) == 0;    "  // FAILS for very large n, e.g. Integer.MAX_VALUE

//@ pure    "

//@ code_java_math spec_java_math    "

//@ requires n <= Integer.MAX_VALUE-15;    "

//@ ensures n <= \\result;    "

//@ ensures \\result <= n+15;    "

//@ ensures (\\result&15) == 0;    "

//@ pure    "

//@ code_java_math spec_java_math    "

//@ requires true;    "

//@ code_java_math spec_java_math    "

//@ requires true;    "

//@ code_java_math spec_java_math    "

//@ requires n <= 0x7ffffff0;    "

//@ ensures n <= \\result;    "

//@ ensures \\result <= n+15;    "

//@ ensures (\\result&15) == 0;    "

//@ pure    "

//@ code_java_math spec_java_math    "

//@ requires n <= 0x7ffffff0;    "

//@ ensures n <= \\result;    "

//@ ensures \\result <= n+15;    "

//@ ensures (\\result&15) == 0;    "

//@ pure    "

//@ code_java_math spec_java_math    "

//@ requires (i&5) == 1; pure     "

//@ requires A.mm(1);    "

//@ requires (i&5) == 1; pure     "

//@ requires A.mm(1);    "

//@ requires (i&5) == 1; pure     "

//@ requires A.mm(1);    "

//@ requires n <= 0x7ffffff0;    "

//@ ensures n <= \\result;    "

//@ ensures \\result <= n+15;    "

//@ ensures (\\result&15) == 0;    "

//@ pure    "

//@ code_java_math spec_java_math    "

//@ requires n <= 0x7ffffff0;    "

//@ ensures n <= \\result;    "

//@ ensures \\result <= n+15;    "

//@ ensures (\\result&15) == 0;    "

//@ pure    "

//@ code_java_math spec_java_math    "

//@ requires n <= 0x7ffffff0;    "

//@ ensures n <= \\result;    "

//@ ensures \\result <= n+15;    "

//@ ensures (\\result%16) == 0;    "

//@ pure    "

//@ code_java_math spec_java_math    "

//@ ensures n <= \\result;    "

//@ ensures \\result <= n+15;    "

//@ ensures (\\result&15) == 0;    "  // FAILS for very large n, e.g. Integer.MAX_VALUE

//@ pure    "

//@ code_java_math spec_java_math    "

//@ requires n <= Integer.MAX_VALUE-15;    "

//@ ensures n <= \\result;    "

//@ ensures \\result <= n+15;    "

//@ ensures (\\result&15) == 0;    "

//@ pure    "

//@ code_java_math spec_java_math    "

//@ requires true;    "

//@ code_java_math spec_java_math    "

//@ requires true;    "

//@ code_java_math spec_java_math    "

//@ requires n <= 0x7ffffff0;    "

//@ ensures n <= \\result;    "

//@ ensures \\result <= n+15;    "

//@ ensures (\\result&15) == 0;    "

//@ pure    "

//@ code_java_math spec_java_math    "

//@ requires n <= 0x7ffffff0;    "

//@ ensures n <= \\result;    "

//@ ensures \\result <= n+15;    "

//@ ensures (\\result&15) == 0;    "

//@ pure    "

//@ code_java_math spec_java_math    "

//@ requires (i&5) == 1; pure     "

//@ requires A.mm(1);    "

//@ requires (i&5) == 1; pure     "

//@ requires A.mm(1);    "

//@ requires (i&5) == 1; pure     "

//@ requires A.mm(1);    "

//@ requires n <= 0x7ffffff0;    "

//@ ensures n <= \\result;    "

//@ ensures \\result <= n+15;    "

//@ ensures (\\result&15) == 0;    "

//@ pure    "

//@ code_java_math spec_java_math    "

//@ requires n <= 0x7ffffff0;    "

//@ ensures n <= \\result;    "

//@ ensures \\result <= n+15;    "

//@ ensures (\\result&15) == 0;    "

//@ pure    "

//@ code_java_math spec_java_math    "

//@ requires n <= 0x7ffffff0;    "

//@ ensures n <= \\result;    "

//@ ensures \\result <= n+15;    "

//@ ensures (\\result%16) == 0;    "

//@ pure    "

//@ code_java_math spec_java_math    "

//@ ensures n <= \\result;    "

//@ ensures \\result <= n+15;    "

//@ ensures (\\result&15) == 0;    "  // FAILS for very large n, e.g. Integer.MAX_VALUE

//@ pure    "

//@ code_java_math spec_java_math    "

//@ requires n <= Integer.MAX_VALUE-15;    "

//@ ensures n <= \\result;    "

//@ ensures \\result <= n+15;    "

//@ ensures (\\result&15) == 0;    "

//@ pure    "

//@ code_java_math spec_java_math    "

//@ requires true;    "

//@ code_java_math spec_java_math    "

//@ requires true;    "

//@ code_java_math spec_java_math    "

//@ requires n <= 0x7ffffff0;    "

//@ ensures n <= \\result;    "

//@ ensures \\result <= n+15;    "

//@ ensures (\\result&15) == 0;    "

//@ pure    "

//@ code_java_math spec_java_math    "

//@ requires n <= 0x7ffffff0;    "

//@ ensures n <= \\result;    "

//@ ensures \\result <= n+15;    "

//@ ensures (\\result&15) == 0;    "

//@ pure    "

//@ code_java_math spec_java_math    "

//@ requires (i&5) == 1; pure     "

//@ requires A.mm(1);    "

//@ requires (i&5) == 1; pure     "

//@ requires A.mm(1);    "

//@ requires (i&5) == 1; pure     "

//@ requires A.mm(1);    "

//@ requires n <= 0x7ffffff0;    "

//@ ensures n <= \\result;    "

//@ ensures \\result <= n+15;    "

//@ ensures (\\result&15) == 0;    "

//@ pure    "

//@ code_java_math spec_java_math    "

//@ requires n <= 0x7ffffff0;    "

//@ ensures n <= \\result;    "

//@ ensures \\result <= n+15;    "

//@ ensures (\\result&15) == 0;    "

//@ pure    "

//@ code_java_math spec_java_math    "

//@ requires n <= 0x7ffffff0;    "

//@ ensures n <= \\result;    "

//@ ensures \\result <= n+15;    "

//@ ensures (\\result%16) == 0;    "

//@ pure    "

//@ code_java_math spec_java_math    "

//@ ensures n <= \\result;    "

//@ ensures \\result <= n+15;    "

//@ ensures (\\result&15) == 0;    "  // FAILS for very large n, e.g. Integer.MAX_VALUE

//@ pure    "

//@ code_java_math spec_java_math    "

//@ requires n <= Integer.MAX_VALUE-15;    "

//@ ensures n <= \\result;    "

//@ ensures \\result <= n+15;    "

//@ ensures (\\result&15) == 0;    "

//@ pure    "

//@ code_java_math spec_java_math    "

//@ requires true;    "

//@ code_java_math spec_java_math    "

//@ requires true;    "

//@ code_java_math spec_java_math    "

//@ requires n <= 0x7ffffff0;    "

//@ ensures n <= \\result;    "

//@ ensures \\result <= n+15;    "

//@ ensures (\\result&15) == 0;    "

//@ pure    "

//@ code_java_math spec_java_math    "

//@ requires n <= 0x7ffffff0;    "

//@ ensures n <= \\result;    "

//@ ensures \\result <= n+15;    "

//@ ensures (\\result&15) == 0;    "

//@ pure    "

//@ code_java_math spec_java_math    "

//@ requires (i&5) == 1; pure     "

//@ requires A.mm(1);    "

//@ requires (i&5) == 1; pure     "

//@ requires A.mm(1);    "

//@ requires (i&5) == 1; pure     "

//@ requires A.mm(1);    "

//@ callable \    othing;    "

//@ callable n;    "

//@ callable \    othing;    "

//@ callable \    othing;    "

//@ callable n;    "

//@ callable n;    "

//@ callable TestJava.n;    "

//@ callable TestJava.n;    "

//@ nowarn Callable;    "

//@ callable TestJava.n; //@ nowarn Callable;    "

//@ callable TestJava.n;    "

//@ nowarn Callable;    "

//@ nowarn Callable;    "

//@ callable B.n;    "

//@ callable \    othing;    "

//@ callable n(int);    "

//@ callable \    othing;    "

//@ callable n(Object);    "

//@ callable \    othing;    "

//@ callable \    othing;    "

//@ callable n(int);    "

//@ callable n(Object);    "

//@ callable n(int),n(Object);    "

//@ callable n(Object);    "

//@ callable n(int),n(Object);    "

//@ callable \\everything;    "

//@ callable \\everything;    "

//@ callable \\everything;    "

//@ callable \    othing;    "

//@ callable \\everything;    "

//@ callable \    othing;    "

//@ callable n(int);    "

//@ callable \\everything;    "

//@ callable n();    "

//@ callable \    othing;    "

//@ callable n(Object,Object);    "

//@ callable \    othing;    "

//@ callable n(Object[]);    "

//@ callable \    othing;    "

//@ callable n(Object[]);    "

//@ callable \    othing;    "

//@ callable n(Object[]);    "

//@ callable \    othing;    "

//@ callable n(Object[]);    "

//@ callable \    othing;    "

//@ requires b;    "

//@ callable n();    "

//@ also requires !b;    "

//@ callable \    othing;    "

//@ callable \    othing;    "

//@ requires b;    "

//@ callable n();    "

//@ also requires !b;    "

//@ callable \    othing;    "

//@ callable \    othing;    "

//@ requires b;    "

//@ callable n();    "

//@ also requires !b;    "

//@ callable \    othing;    "

//@ requires b;    "

//@ callable n();    "

//@ also requires !b;    "

//@ callable \    othing;    "

//@ requires b;    "

//@ callable n();    "

//@ also requires !b;    "

//@ callable \\everything;    "

//@ requires b;    "

//@ callable n(boolean);    "

//@ also requires !b;    "

//@ callable \    othing;    "

//@ requires q; callable p();    "

//@ also requires !q; callable \    othing;    "

//@ callable \    othing;    "

//@ callable n;    "

//@ callable \    othing;    "

//@ callable \    othing;    "

//@ callable n;    "

//@ callable n;    "

//@ callable TestJava.n;    "

//@ callable TestJava.n;    "

//@ nowarn Callable;    "

//@ callable TestJava.n; //@ nowarn Callable;    "

//@ callable TestJava.n;    "

//@ nowarn Callable;    "

//@ nowarn Callable;    "

//@ callable B.n;    "

//@ callable \    othing;    "

//@ callable n(int);    "

//@ callable \    othing;    "

//@ callable n(Object);    "

//@ callable \    othing;    "

//@ callable \    othing;    "

//@ callable n(int);    "

//@ callable n(Object);    "

//@ callable n(int),n(Object);    "

//@ callable n(Object);    "

//@ callable n(int),n(Object);    "

//@ callable \\everything;    "

//@ callable \\everything;    "

//@ callable \\everything;    "

//@ callable \    othing;    "

//@ callable \\everything;    "

//@ callable \    othing;    "

//@ callable n(int);    "

//@ callable \\everything;    "

//@ callable n();    "

//@ callable \    othing;    "

//@ callable n(Object,Object);    "

//@ callable \    othing;    "

//@ callable n(Object[]);    "

//@ callable \    othing;    "

//@ callable n(Object[]);    "

//@ callable \    othing;    "

//@ callable n(Object[]);    "

//@ callable \    othing;    "

//@ callable n(Object[]);    "

//@ callable \    othing;    "

//@ requires b;    "

//@ callable n();    "

//@ also requires !b;    "

//@ callable \    othing;    "

//@ callable \    othing;    "

//@ requires b;    "

//@ callable n();    "

//@ also requires !b;    "

//@ callable \    othing;    "

//@ callable \    othing;    "

//@ requires b;    "

//@ callable n();    "

//@ also requires !b;    "

//@ callable \    othing;    "

//@ requires b;    "

//@ callable n();    "

//@ also requires !b;    "

//@ callable \    othing;    "

//@ requires b;    "

//@ callable n();    "

//@ also requires !b;    "

//@ callable \\everything;    "

//@ requires b;    "

//@ callable n(boolean);    "

//@ also requires !b;    "

//@ callable \    othing;    "

//@ requires q; callable p();    "

//@ also requires !q; callable \    othing;    "

//@ callable \    othing;    "

//@ callable n;    "

//@ callable \    othing;    "

//@ callable \    othing;    "

//@ callable n;    "

//@ callable n;    "

//@ callable TestJava.n;    "

//@ callable TestJava.n;    "

//@ nowarn Callable;    "

//@ callable TestJava.n; //@ nowarn Callable;    "

//@ callable TestJava.n;    "

//@ nowarn Callable;    "

//@ nowarn Callable;    "

//@ callable B.n;    "

//@ callable \    othing;    "

//@ callable n(int);    "

//@ callable \    othing;    "

//@ callable n(Object);    "

//@ callable \    othing;    "

//@ callable \    othing;    "

//@ callable n(int);    "

//@ callable n(Object);    "

//@ callable n(int),n(Object);    "

//@ callable n(Object);    "

//@ callable n(int),n(Object);    "

//@ callable \\everything;    "

//@ callable \\everything;    "

//@ callable \\everything;    "

//@ callable \    othing;    "

//@ callable \\everything;    "

//@ callable \    othing;    "

//@ callable n(int);    "

//@ callable \\everything;    "

//@ callable n();    "

//@ callable \    othing;    "

//@ callable n(Object,Object);    "

//@ callable \    othing;    "

//@ callable n(Object[]);    "

//@ callable \    othing;    "

//@ callable n(Object[]);    "

//@ callable \    othing;    "

//@ callable n(Object[]);    "

//@ callable \    othing;    "

//@ callable n(Object[]);    "

//@ callable \    othing;    "

//@ requires b;    "

//@ callable n();    "

//@ also requires !b;    "

//@ callable \    othing;    "

//@ callable \    othing;    "

//@ requires b;    "

//@ callable n();    "

//@ also requires !b;    "

//@ callable \    othing;    "

//@ callable \    othing;    "

//@ requires b;    "

//@ callable n();    "

//@ also requires !b;    "

//@ callable \    othing;    "

//@ requires b;    "

//@ callable n();    "

//@ also requires !b;    "

//@ callable \    othing;    "

//@ requires b;    "

//@ callable n();    "

//@ also requires !b;    "

//@ callable \\everything;    "

//@ requires b;    "

//@ callable n(boolean);    "

//@ also requires !b;    "

//@ callable \    othing;    "

//@ requires q; callable p();    "

//@ also requires !q; callable \    othing;    "

//@ callable \    othing;    "

//@ callable n;    "

//@ callable \    othing;    "

//@ callable \    othing;    "

//@ callable n;    "

//@ callable n;    "

//@ callable TestJava.n;    "

//@ callable TestJava.n;    "

//@ nowarn Callable;    "

//@ callable TestJava.n; //@ nowarn Callable;    "

//@ callable TestJava.n;    "

//@ nowarn Callable;    "

//@ nowarn Callable;    "

//@ callable B.n;    "

//@ callable \    othing;    "

//@ callable n(int);    "

//@ callable \    othing;    "

//@ callable n(Object);    "

//@ callable \    othing;    "

//@ callable \    othing;    "

//@ callable n(int);    "

//@ callable n(Object);    "

//@ callable n(int),n(Object);    "

//@ callable n(Object);    "

//@ callable n(int),n(Object);    "

//@ callable \\everything;    "

//@ callable \\everything;    "

//@ callable \\everything;    "

//@ callable \    othing;    "

//@ callable \\everything;    "

//@ callable \    othing;    "

//@ callable n(int);    "

//@ callable \\everything;    "

//@ callable n();    "

//@ callable \    othing;    "

//@ callable n(Object,Object);    "

//@ callable \    othing;    "

//@ callable n(Object[]);    "

//@ callable \    othing;    "

//@ callable n(Object[]);    "

//@ callable \    othing;    "

//@ callable n(Object[]);    "

//@ callable \    othing;    "

//@ callable n(Object[]);    "

//@ callable \    othing;    "

//@ requires b;    "

//@ callable n();    "

//@ also requires !b;    "

//@ callable \    othing;    "

//@ callable \    othing;    "

//@ requires b;    "

//@ callable n();    "

//@ also requires !b;    "

//@ callable \    othing;    "

//@ callable \    othing;    "

//@ requires b;    "

//@ callable n();    "

//@ also requires !b;    "

//@ callable \    othing;    "

//@ requires b;    "

//@ callable n();    "

//@ also requires !b;    "

//@ callable \    othing;    "

//@ requires b;    "

//@ callable n();    "

//@ also requires !b;    "

//@ callable \\everything;    "

//@ requires b;    "

//@ callable n(boolean);    "

//@ also requires !b;    "

//@ callable \    othing;    "

//@ requires q; callable p();    "

//@ also requires !q; callable \    othing;    "

//@ callable \    othing;    "

//@ callable n;    "

//@ callable \    othing;    "

//@ callable \    othing;    "

//@ callable n;    "

//@ callable n;    "

//@ callable TestJava.n;    "

//@ callable TestJava.n;    "

//@ nowarn Callable;    "

//@ callable TestJava.n; //@ nowarn Callable;    "

//@ callable TestJava.n;    "

//@ nowarn Callable;    "

//@ nowarn Callable;    "

//@ callable B.n;    "

//@ callable \    othing;    "

//@ callable n(int);    "

//@ callable \    othing;    "

//@ callable n(Object);    "

//@ callable \    othing;    "

//@ callable \    othing;    "

//@ callable n(int);    "

//@ callable n(Object);    "

//@ callable n(int),n(Object);    "

//@ callable n(Object);    "

//@ callable n(int),n(Object);    "

//@ callable \\everything;    "

//@ callable \\everything;    "

//@ callable \\everything;    "

//@ callable \    othing;    "

//@ callable \\everything;    "

//@ callable \    othing;    "

//@ callable n(int);    "

//@ callable \\everything;    "

//@ callable n();    "

//@ callable \    othing;    "

//@ callable n(Object,Object);    "

//@ callable \    othing;    "

//@ callable n(Object[]);    "

//@ callable \    othing;    "

//@ callable n(Object[]);    "

//@ callable \    othing;    "

//@ callable n(Object[]);    "

//@ callable \    othing;    "

//@ callable n(Object[]);    "

//@ callable \    othing;    "

//@ requires b;    "

//@ callable n();    "

//@ also requires !b;    "

//@ callable \    othing;    "

//@ callable \    othing;    "

//@ requires b;    "

//@ callable n();    "

//@ also requires !b;    "

//@ callable \    othing;    "

//@ callable \    othing;    "

//@ requires b;    "

//@ callable n();    "

//@ also requires !b;    "

//@ callable \    othing;    "

//@ requires b;    "

//@ callable n();    "

//@ also requires !b;    "

//@ callable \    othing;    "

//@ requires b;    "

//@ callable n();    "

//@ also requires !b;    "

//@ callable \\everything;    "

//@ requires b;    "

//@ callable n(boolean);    "

//@ also requires !b;    "

//@ callable \    othing;    "

//@ requires q; callable p();    "

//@ also requires !q; callable \    othing;    "

//@ also public normal_behavior    "

//@    ensures \\result > 0;    "

//@ public normal_behavior    "

//@    ensures \\result > 10;    "

//@ also public normal_behavior    "

//@    ensures \\result > 0;    "

//@ public code normal_behavior    "

//@    ensures \\result > 10;    "

//@ also public normal_behavior    "

//@    ensures \\result > 0;    "

//@ public code normal_behavior    "

//@    ensures \\result > 10;    "

//@ also public code normal_behavior    "

//@    ensures \\result > 0;    "

//@ public code normal_behavior    "

//@    ensures \\result > 10;    "

//@ public code normal_behavior    "

//@    ensures \\result > 10;    "

//@ also public code normal_behavior    "

//@    ensures true;    "

//@ public code normal_behavior    "

//@    ensures \\result > 10;    "

//@ public code normal_behavior    "

//@    ensures \\result > 10;    "

//@ public normal_behavior    "

//@    ensures \\result > 10;    "

//@ public code normal_behavior    "

//@    ensures \\result >= 10;    "

//@ also public code normal_behavior    "

//@    ensures \\result >= 10;    "

//@ public code normal_behavior    "

//@    ensures true;    "

//@ public code normal_behavior    "

//@    ensures \\result >= 10;    "

//@ also public normal_behavior    "

//@    ensures \\result >= 10;    "

//@ public code normal_behavior    "

//@    ensures true;    "

//@ public code normal_behavior    "

//@    ensures \\result > 10;    "

//@ public code normal_behavior    "

//@    ensures \\result > 10;    "

//@ also public normal_behavior    "

//@    ensures \\result > 0;    "

//@ public normal_behavior    "

//@    ensures \\result > 10;    "

//@ also public normal_behavior    "

//@    ensures \\result > 0;    "

//@ public code normal_behavior    "

//@    ensures \\result > 10;    "

//@ also public normal_behavior    "

//@    ensures \\result > 0;    "

//@ public code normal_behavior    "

//@    ensures \\result > 10;    "

//@ also public code normal_behavior    "

//@    ensures \\result > 0;    "

//@ public code normal_behavior    "

//@    ensures \\result > 10;    "

//@ public code normal_behavior    "

//@    ensures \\result > 10;    "

//@ also public code normal_behavior    "

//@    ensures true;    "

//@ public code normal_behavior    "

//@    ensures \\result > 10;    "

//@ public code normal_behavior    "

//@    ensures \\result > 10;    "

//@ public normal_behavior    "

//@    ensures \\result > 10;    "

//@ public code normal_behavior    "

//@    ensures \\result >= 10;    "

//@ also public code normal_behavior    "

//@    ensures \\result >= 10;    "

//@ public code normal_behavior    "

//@    ensures true;    "

//@ public code normal_behavior    "

//@    ensures \\result >= 10;    "

//@ also public normal_behavior    "

//@    ensures \\result >= 10;    "

//@ public code normal_behavior    "

//@    ensures true;    "

//@ public code normal_behavior    "

//@    ensures \\result > 10;    "

//@ public code normal_behavior    "

//@    ensures \\result > 10;    "

//@ also public normal_behavior    "

//@    ensures \\result > 0;    "

//@ public normal_behavior    "

//@    ensures \\result > 10;    "

//@ also public normal_behavior    "

//@    ensures \\result > 0;    "

//@ public code normal_behavior    "

//@    ensures \\result > 10;    "

//@ also public normal_behavior    "

//@    ensures \\result > 0;    "

//@ public code normal_behavior    "

//@    ensures \\result > 10;    "

//@ also public code normal_behavior    "

//@    ensures \\result > 0;    "

//@ public code normal_behavior    "

//@    ensures \\result > 10;    "

//@ public code normal_behavior    "

//@    ensures \\result > 10;    "

//@ also public code normal_behavior    "

//@    ensures true;    "

//@ public code normal_behavior    "

//@    ensures \\result > 10;    "

//@ public code normal_behavior    "

//@    ensures \\result > 10;    "

//@ public normal_behavior    "

//@    ensures \\result > 10;    "

//@ public code normal_behavior    "

//@    ensures \\result >= 10;    "

//@ also public code normal_behavior    "

//@    ensures \\result >= 10;    "

//@ public code normal_behavior    "

//@    ensures true;    "

//@ public code normal_behavior    "

//@    ensures \\result >= 10;    "

//@ also public normal_behavior    "

//@    ensures \\result >= 10;    "

//@ public code normal_behavior    "

//@    ensures true;    "

//@ public code normal_behavior    "

//@    ensures \\result > 10;    "

//@ public code normal_behavior    "

//@    ensures \\result > 10;    "

//@ also public normal_behavior    "

//@    ensures \\result > 0;    "

//@ public normal_behavior    "

//@    ensures \\result > 10;    "

//@ also public normal_behavior    "

//@    ensures \\result > 0;    "

//@ public code normal_behavior    "

//@    ensures \\result > 10;    "

//@ also public normal_behavior    "

//@    ensures \\result > 0;    "

//@ public code normal_behavior    "

//@    ensures \\result > 10;    "

//@ also public code normal_behavior    "

//@    ensures \\result > 0;    "

//@ public code normal_behavior    "

//@    ensures \\result > 10;    "

//@ public code normal_behavior    "

//@    ensures \\result > 10;    "

//@ also public code normal_behavior    "

//@    ensures true;    "

//@ public code normal_behavior    "

//@    ensures \\result > 10;    "

//@ public code normal_behavior    "

//@    ensures \\result > 10;    "

//@ public normal_behavior    "

//@    ensures \\result > 10;    "

//@ public code normal_behavior    "

//@    ensures \\result >= 10;    "

//@ also public code normal_behavior    "

//@    ensures \\result >= 10;    "

//@ public code normal_behavior    "

//@    ensures true;    "

//@ public code normal_behavior    "

//@    ensures \\result >= 10;    "

//@ also public normal_behavior    "

//@    ensures \\result >= 10;    "

//@ public code normal_behavior    "

//@    ensures true;    "

//@ public code normal_behavior    "

//@    ensures \\result > 10;    "

//@ public code normal_behavior    "

//@    ensures \\result > 10;    "

//@ also public normal_behavior    "

//@    ensures \\result > 0;    "

//@ public normal_behavior    "

//@    ensures \\result > 10;    "

//@ also public normal_behavior    "

//@    ensures \\result > 0;    "

//@ public code normal_behavior    "

//@    ensures \\result > 10;    "

//@ also public normal_behavior    "

//@    ensures \\result > 0;    "

//@ public code normal_behavior    "

//@    ensures \\result > 10;    "

//@ also public code normal_behavior    "

//@    ensures \\result > 0;    "

//@ public code normal_behavior    "

//@    ensures \\result > 10;    "

//@ public code normal_behavior    "

//@    ensures \\result > 10;    "

//@ also public code normal_behavior    "

//@    ensures true;    "

//@ public code normal_behavior    "

//@    ensures \\result > 10;    "

//@ public code normal_behavior    "

//@    ensures \\result > 10;    "

//@ public normal_behavior    "

//@    ensures \\result > 10;    "

//@ public code normal_behavior    "

//@    ensures \\result >= 10;    "

//@ also public code normal_behavior    "

//@    ensures \\result >= 10;    "

//@ public code normal_behavior    "

//@    ensures true;    "

//@ public code normal_behavior    "

//@    ensures \\result >= 10;    "

//@ also public normal_behavior    "

//@    ensures \\result >= 10;    "

//@ public code normal_behavior    "

//@    ensures true;    "

//@ public code normal_behavior    "

//@    ensures \\result > 10;    "

//@ public code normal_behavior    "

//@    ensures \\result > 10;    "

//@ ensures J == 2;    "

//@ ensures J == 2;    "

//@ ensures J == 2;    "

//@ ghost public final static int I = 1;    "

//@ ghost public final static int J = 1 + I;    "

//@ ensures J == 2;    "

//@ ensures J == 2;    "

//@ ensures J == 2;    "

//@ ghost public final static int J = 1 + I;    "

//@ assert I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    "

//@ assignable \\everything;    "

//@ ghost public static int J = 1 + I;    "

//@ public static invariant I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    "

//@ ensures J == 2;    "

//@ assert I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    "

//@ assignable \\everything;    "

//@ ghost public final static int J = 1 + I;    "

//@ public static invariant I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assignable \\everything;    "

//@ ghost public final static int J = 1 + z();    "

//@ assert I == 10 && J == 11;    " // Fails since we don't have a static invariant

//@ assert I == 10 && J == 11;    " // Fails since we don't have a static invariant

//@ assignable \\everything;    "

//@ ensures \\result == 10;    "

//@ ghost public final static int J = 1 + I;    "

//@ public static invariant I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assignable \\everything;    "

/*@ helper */
//@ ghost public final int J = 1 + I;    "

//@ assert I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    "

//@ assignable \\everything;    "

//@ ghost public final int J = 1 + I;    "

//@ assert I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    " // but OK because final constant fields are not modified by \everything

//@ assert I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    " // but OK because final fields are not modified by \everything

//@ assignable \\everything;    "

//@ ghost public int J = 1 + I;    "

//@ public invariant I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    " // OK

//@ assert I == 1 && J == 2;    " // Should be OK because of invariant on n()

//@ assert I == 1 && J == 2;    " // OK because of invariant

//@ assert I == 1 && J == 2;    " // Should be OK because of invariant on n()

//@ assignable \\everything;    "   // FIXME _ why does this reestablish invariant?

//@ ghost public int J = 1 + I;    "

//@ public invariant I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    " // OK

//@ assert I == 1 && J == 2;    " // Fails because n is static and so does not establish the invariant

//@ assert I == 1 && J == 2;    " // OK because of invariant

//@ assert I == 1 && J == 2;    " // Fails because n is static and so does not establish the invariant

//@ public normal_behavior assignable \\everything;    "

//@ ghost public final int J = 1 + I;    "

//@ public invariant I == 10 && J == 11;    " // FIXME - check that this is required

//@ assert I == 10 && J == 11;    " // OK because of invariant

//@ assert I == 10 && J == 11;    " // Should be OK because of invariant on n()

//@ assert I == 10 && J == 11;    " // OK because of invariant

//@ assert I == 10 && J == 11;    " // Should be OK because of invariant on n()

//@ assignable \\everything;    "

//@ public normal_behavior ensures \\result == 10;    "

//@ ghost public final int J = 1 + I;    "

//@ public invariant I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    " // OK because of invariant

//@ assert I == 10 && J == 11;    " // Should be OK because final fields are not modified

//@ assert I == 10 && J == 11;    " // OK because of invariant

//@ assert I == 10 && J == 11;    " // Should be OK because final fields are not modified

//@ assignable \\everything;    "

//@ public normal_behavior ensures \\result == 10;    "

//@ ghost public final int J = 1 + I;    "

//@ public invariant I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assignable \\everything;    "

//@ private normal_behavior ensures \\result == 10;    "

/*@ helper */
//@ assert H.CON1 == 50 ;    "

//@ assert H.CON2 == 51 ;    "

//@ assert H.CON2 == H.CON1 + 1 ;    "

//@ assert H.CON3 == 0x7fffffff ;    "

//@ assert H.CON1 == 50 ;    "

//@ assert H.CON2 == 51 ;    "

//@ assert H.CON2 == H.CON1 + 1 ;    "

//@ assert H.CON3 == 0x7fffffff ;    "

//@ assert H.CON1 == 50 ;    "

//@ assert H.CON2 == 51 ;    "

//@ assert H.CON2 == H.CON1 + 1 ;    "

//@ assert H.CON3 == 0x7fffffff ;    "

//@ assert H.CON1 == 50 ;    "

//@ assert H.CON2 == 51 ;    "

//@ assert H.CON2 == H.CON1 + 1 ;    "

//@ assert H.CON3 == 0x7fffffff ;    "

//@ assignable \\everything;    "

//@ ensures J == 2;    "

//@ ensures J == 2;    "

//@ ensures J == 2;    "

//@ ghost public final static int I = 1;    "

//@ ghost public final static int J = 1 + I;    "

//@ ensures J == 2;    "

//@ ensures J == 2;    "

//@ ensures J == 2;    "

//@ ghost public final static int J = 1 + I;    "

//@ assert I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    "

//@ assignable \\everything;    "

//@ ghost public static int J = 1 + I;    "

//@ public static invariant I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    "

//@ ensures J == 2;    "

//@ assert I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    "

//@ assignable \\everything;    "

//@ ghost public final static int J = 1 + I;    "

//@ public static invariant I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assignable \\everything;    "

//@ ghost public final static int J = 1 + z();    "

//@ assert I == 10 && J == 11;    " // Fails since we don't have a static invariant

//@ assert I == 10 && J == 11;    " // Fails since we don't have a static invariant

//@ assignable \\everything;    "

//@ ensures \\result == 10;    "

//@ ghost public final static int J = 1 + I;    "

//@ public static invariant I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assignable \\everything;    "

/*@ helper */
//@ ghost public final int J = 1 + I;    "

//@ assert I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    "

//@ assignable \\everything;    "

//@ ghost public final int J = 1 + I;    "

//@ assert I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    " // but OK because final constant fields are not modified by \everything

//@ assert I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    " // but OK because final fields are not modified by \everything

//@ assignable \\everything;    "

//@ ghost public int J = 1 + I;    "

//@ public invariant I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    " // OK

//@ assert I == 1 && J == 2;    " // Should be OK because of invariant on n()

//@ assert I == 1 && J == 2;    " // OK because of invariant

//@ assert I == 1 && J == 2;    " // Should be OK because of invariant on n()

//@ assignable \\everything;    "   // FIXME _ why does this reestablish invariant?

//@ ghost public int J = 1 + I;    "

//@ public invariant I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    " // OK

//@ assert I == 1 && J == 2;    " // Fails because n is static and so does not establish the invariant

//@ assert I == 1 && J == 2;    " // OK because of invariant

//@ assert I == 1 && J == 2;    " // Fails because n is static and so does not establish the invariant

//@ public normal_behavior assignable \\everything;    "

//@ ghost public final int J = 1 + I;    "

//@ public invariant I == 10 && J == 11;    " // FIXME - check that this is required

//@ assert I == 10 && J == 11;    " // OK because of invariant

//@ assert I == 10 && J == 11;    " // Should be OK because of invariant on n()

//@ assert I == 10 && J == 11;    " // OK because of invariant

//@ assert I == 10 && J == 11;    " // Should be OK because of invariant on n()

//@ assignable \\everything;    "

//@ public normal_behavior ensures \\result == 10;    "

//@ ghost public final int J = 1 + I;    "

//@ public invariant I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    " // OK because of invariant

//@ assert I == 10 && J == 11;    " // Should be OK because final fields are not modified

//@ assert I == 10 && J == 11;    " // OK because of invariant

//@ assert I == 10 && J == 11;    " // Should be OK because final fields are not modified

//@ assignable \\everything;    "

//@ public normal_behavior ensures \\result == 10;    "

//@ ghost public final int J = 1 + I;    "

//@ public invariant I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assignable \\everything;    "

//@ private normal_behavior ensures \\result == 10;    "

/*@ helper */
//@ assert H.CON1 == 50 ;    "

//@ assert H.CON2 == 51 ;    "

//@ assert H.CON2 == H.CON1 + 1 ;    "

//@ assert H.CON3 == 0x7fffffff ;    "

//@ assert H.CON1 == 50 ;    "

//@ assert H.CON2 == 51 ;    "

//@ assert H.CON2 == H.CON1 + 1 ;    "

//@ assert H.CON3 == 0x7fffffff ;    "

//@ assert H.CON1 == 50 ;    "

//@ assert H.CON2 == 51 ;    "

//@ assert H.CON2 == H.CON1 + 1 ;    "

//@ assert H.CON3 == 0x7fffffff ;    "

//@ assert H.CON1 == 50 ;    "

//@ assert H.CON2 == 51 ;    "

//@ assert H.CON2 == H.CON1 + 1 ;    "

//@ assert H.CON3 == 0x7fffffff ;    "

//@ assignable \\everything;    "

//@ ensures J == 2;    "

//@ ensures J == 2;    "

//@ ensures J == 2;    "

//@ ghost public final static int I = 1;    "

//@ ghost public final static int J = 1 + I;    "

//@ ensures J == 2;    "

//@ ensures J == 2;    "

//@ ensures J == 2;    "

//@ ghost public final static int J = 1 + I;    "

//@ assert I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    "

//@ assignable \\everything;    "

//@ ghost public static int J = 1 + I;    "

//@ public static invariant I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    "

//@ ensures J == 2;    "

//@ assert I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    "

//@ assignable \\everything;    "

//@ ghost public final static int J = 1 + I;    "

//@ public static invariant I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assignable \\everything;    "

//@ ghost public final static int J = 1 + z();    "

//@ assert I == 10 && J == 11;    " // Fails since we don't have a static invariant

//@ assert I == 10 && J == 11;    " // Fails since we don't have a static invariant

//@ assignable \\everything;    "

//@ ensures \\result == 10;    "

//@ ghost public final static int J = 1 + I;    "

//@ public static invariant I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assignable \\everything;    "

/*@ helper */
//@ ghost public final int J = 1 + I;    "

//@ assert I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    "

//@ assignable \\everything;    "

//@ ghost public final int J = 1 + I;    "

//@ assert I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    " // but OK because final constant fields are not modified by \everything

//@ assert I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    " // but OK because final fields are not modified by \everything

//@ assignable \\everything;    "

//@ ghost public int J = 1 + I;    "

//@ public invariant I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    " // OK

//@ assert I == 1 && J == 2;    " // Should be OK because of invariant on n()

//@ assert I == 1 && J == 2;    " // OK because of invariant

//@ assert I == 1 && J == 2;    " // Should be OK because of invariant on n()

//@ assignable \\everything;    "   // FIXME _ why does this reestablish invariant?

//@ ghost public int J = 1 + I;    "

//@ public invariant I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    " // OK

//@ assert I == 1 && J == 2;    " // Fails because n is static and so does not establish the invariant

//@ assert I == 1 && J == 2;    " // OK because of invariant

//@ assert I == 1 && J == 2;    " // Fails because n is static and so does not establish the invariant

//@ public normal_behavior assignable \\everything;    "

//@ ghost public final int J = 1 + I;    "

//@ public invariant I == 10 && J == 11;    " // FIXME - check that this is required

//@ assert I == 10 && J == 11;    " // OK because of invariant

//@ assert I == 10 && J == 11;    " // Should be OK because of invariant on n()

//@ assert I == 10 && J == 11;    " // OK because of invariant

//@ assert I == 10 && J == 11;    " // Should be OK because of invariant on n()

//@ assignable \\everything;    "

//@ public normal_behavior ensures \\result == 10;    "

//@ ghost public final int J = 1 + I;    "

//@ public invariant I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    " // OK because of invariant

//@ assert I == 10 && J == 11;    " // Should be OK because final fields are not modified

//@ assert I == 10 && J == 11;    " // OK because of invariant

//@ assert I == 10 && J == 11;    " // Should be OK because final fields are not modified

//@ assignable \\everything;    "

//@ public normal_behavior ensures \\result == 10;    "

//@ ghost public final int J = 1 + I;    "

//@ public invariant I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assignable \\everything;    "

//@ private normal_behavior ensures \\result == 10;    "

/*@ helper */
//@ assert H.CON1 == 50 ;    "

//@ assert H.CON2 == 51 ;    "

//@ assert H.CON2 == H.CON1 + 1 ;    "

//@ assert H.CON3 == 0x7fffffff ;    "

//@ assert H.CON1 == 50 ;    "

//@ assert H.CON2 == 51 ;    "

//@ assert H.CON2 == H.CON1 + 1 ;    "

//@ assert H.CON3 == 0x7fffffff ;    "

//@ assert H.CON1 == 50 ;    "

//@ assert H.CON2 == 51 ;    "

//@ assert H.CON2 == H.CON1 + 1 ;    "

//@ assert H.CON3 == 0x7fffffff ;    "

//@ assert H.CON1 == 50 ;    "

//@ assert H.CON2 == 51 ;    "

//@ assert H.CON2 == H.CON1 + 1 ;    "

//@ assert H.CON3 == 0x7fffffff ;    "

//@ assignable \\everything;    "

//@ ensures J == 2;    "

//@ ensures J == 2;    "

//@ ensures J == 2;    "

//@ ghost public final static int I = 1;    "

//@ ghost public final static int J = 1 + I;    "

//@ ensures J == 2;    "

//@ ensures J == 2;    "

//@ ensures J == 2;    "

//@ ghost public final static int J = 1 + I;    "

//@ assert I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    "

//@ assignable \\everything;    "

//@ ghost public static int J = 1 + I;    "

//@ public static invariant I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    "

//@ ensures J == 2;    "

//@ assert I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    "

//@ assignable \\everything;    "

//@ ghost public final static int J = 1 + I;    "

//@ public static invariant I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assignable \\everything;    "

//@ ghost public final static int J = 1 + z();    "

//@ assert I == 10 && J == 11;    " // Fails since we don't have a static invariant

//@ assert I == 10 && J == 11;    " // Fails since we don't have a static invariant

//@ assignable \\everything;    "

//@ ensures \\result == 10;    "

//@ ghost public final static int J = 1 + I;    "

//@ public static invariant I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assignable \\everything;    "

/*@ helper */
//@ ghost public final int J = 1 + I;    "

//@ assert I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    "

//@ assignable \\everything;    "

//@ ghost public final int J = 1 + I;    "

//@ assert I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    " // but OK because final constant fields are not modified by \everything

//@ assert I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    " // but OK because final fields are not modified by \everything

//@ assignable \\everything;    "

//@ ghost public int J = 1 + I;    "

//@ public invariant I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    " // OK

//@ assert I == 1 && J == 2;    " // Should be OK because of invariant on n()

//@ assert I == 1 && J == 2;    " // OK because of invariant

//@ assert I == 1 && J == 2;    " // Should be OK because of invariant on n()

//@ assignable \\everything;    "   // FIXME _ why does this reestablish invariant?

//@ ghost public int J = 1 + I;    "

//@ public invariant I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    " // OK

//@ assert I == 1 && J == 2;    " // Fails because n is static and so does not establish the invariant

//@ assert I == 1 && J == 2;    " // OK because of invariant

//@ assert I == 1 && J == 2;    " // Fails because n is static and so does not establish the invariant

//@ public normal_behavior assignable \\everything;    "

//@ ghost public final int J = 1 + I;    "

//@ public invariant I == 10 && J == 11;    " // FIXME - check that this is required

//@ assert I == 10 && J == 11;    " // OK because of invariant

//@ assert I == 10 && J == 11;    " // Should be OK because of invariant on n()

//@ assert I == 10 && J == 11;    " // OK because of invariant

//@ assert I == 10 && J == 11;    " // Should be OK because of invariant on n()

//@ assignable \\everything;    "

//@ public normal_behavior ensures \\result == 10;    "

//@ ghost public final int J = 1 + I;    "

//@ public invariant I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    " // OK because of invariant

//@ assert I == 10 && J == 11;    " // Should be OK because final fields are not modified

//@ assert I == 10 && J == 11;    " // OK because of invariant

//@ assert I == 10 && J == 11;    " // Should be OK because final fields are not modified

//@ assignable \\everything;    "

//@ public normal_behavior ensures \\result == 10;    "

//@ ghost public final int J = 1 + I;    "

//@ public invariant I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assignable \\everything;    "

//@ private normal_behavior ensures \\result == 10;    "

/*@ helper */
//@ assert H.CON1 == 50 ;    "

//@ assert H.CON2 == 51 ;    "

//@ assert H.CON2 == H.CON1 + 1 ;    "

//@ assert H.CON3 == 0x7fffffff ;    "

//@ assert H.CON1 == 50 ;    "

//@ assert H.CON2 == 51 ;    "

//@ assert H.CON2 == H.CON1 + 1 ;    "

//@ assert H.CON3 == 0x7fffffff ;    "

//@ assert H.CON1 == 50 ;    "

//@ assert H.CON2 == 51 ;    "

//@ assert H.CON2 == H.CON1 + 1 ;    "

//@ assert H.CON3 == 0x7fffffff ;    "

//@ assert H.CON1 == 50 ;    "

//@ assert H.CON2 == 51 ;    "

//@ assert H.CON2 == H.CON1 + 1 ;    "

//@ assert H.CON3 == 0x7fffffff ;    "

//@ assignable \\everything;    "

//@ ensures J == 2;    "

//@ ensures J == 2;    "

//@ ensures J == 2;    "

//@ ghost public final static int I = 1;    "

//@ ghost public final static int J = 1 + I;    "

//@ ensures J == 2;    "

//@ ensures J == 2;    "

//@ ensures J == 2;    "

//@ ghost public final static int J = 1 + I;    "

//@ assert I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    "

//@ assignable \\everything;    "

//@ ghost public static int J = 1 + I;    "

//@ public static invariant I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    "

//@ ensures J == 2;    "

//@ assert I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    "

//@ assignable \\everything;    "

//@ ghost public final static int J = 1 + I;    "

//@ public static invariant I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assignable \\everything;    "

//@ ghost public final static int J = 1 + z();    "

//@ assert I == 10 && J == 11;    " // Fails since we don't have a static invariant

//@ assert I == 10 && J == 11;    " // Fails since we don't have a static invariant

//@ assignable \\everything;    "

//@ ensures \\result == 10;    "

//@ ghost public final static int J = 1 + I;    "

//@ public static invariant I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assignable \\everything;    "

/*@ helper */
//@ ghost public final int J = 1 + I;    "

//@ assert I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    "

//@ assignable \\everything;    "

//@ ghost public final int J = 1 + I;    "

//@ assert I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    " // but OK because final constant fields are not modified by \everything

//@ assert I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    " // but OK because final fields are not modified by \everything

//@ assignable \\everything;    "

//@ ghost public int J = 1 + I;    "

//@ public invariant I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    " // OK

//@ assert I == 1 && J == 2;    " // Should be OK because of invariant on n()

//@ assert I == 1 && J == 2;    " // OK because of invariant

//@ assert I == 1 && J == 2;    " // Should be OK because of invariant on n()

//@ assignable \\everything;    "   // FIXME _ why does this reestablish invariant?

//@ ghost public int J = 1 + I;    "

//@ public invariant I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    " // OK

//@ assert I == 1 && J == 2;    " // Fails because n is static and so does not establish the invariant

//@ assert I == 1 && J == 2;    " // OK because of invariant

//@ assert I == 1 && J == 2;    " // Fails because n is static and so does not establish the invariant

//@ public normal_behavior assignable \\everything;    "

//@ ghost public final int J = 1 + I;    "

//@ public invariant I == 10 && J == 11;    " // FIXME - check that this is required

//@ assert I == 10 && J == 11;    " // OK because of invariant

//@ assert I == 10 && J == 11;    " // Should be OK because of invariant on n()

//@ assert I == 10 && J == 11;    " // OK because of invariant

//@ assert I == 10 && J == 11;    " // Should be OK because of invariant on n()

//@ assignable \\everything;    "

//@ public normal_behavior ensures \\result == 10;    "

//@ ghost public final int J = 1 + I;    "

//@ public invariant I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    " // OK because of invariant

//@ assert I == 10 && J == 11;    " // Should be OK because final fields are not modified

//@ assert I == 10 && J == 11;    " // OK because of invariant

//@ assert I == 10 && J == 11;    " // Should be OK because final fields are not modified

//@ assignable \\everything;    "

//@ public normal_behavior ensures \\result == 10;    "

//@ ghost public final int J = 1 + I;    "

//@ public invariant I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assignable \\everything;    "

//@ private normal_behavior ensures \\result == 10;    "

/*@ helper */
//@ assert H.CON1 == 50 ;    "

//@ assert H.CON2 == 51 ;    "

//@ assert H.CON2 == H.CON1 + 1 ;    "

//@ assert H.CON3 == 0x7fffffff ;    "

//@ assert H.CON1 == 50 ;    "

//@ assert H.CON2 == 51 ;    "

//@ assert H.CON2 == H.CON1 + 1 ;    "

//@ assert H.CON3 == 0x7fffffff ;    "

//@ assert H.CON1 == 50 ;    "

//@ assert H.CON2 == 51 ;    "

//@ assert H.CON2 == H.CON1 + 1 ;    "

//@ assert H.CON3 == 0x7fffffff ;    "

//@ assert H.CON1 == 50 ;    "

//@ assert H.CON2 == 51 ;    "

//@ assert H.CON2 == H.CON1 + 1 ;    "

//@ assert H.CON3 == 0x7fffffff ;    "

//@ assignable \\everything;    "

//@ assignable \    othing;     "

//@ assignable \    othing;     "

//@ ghost public int d = 20;    "

//@ initially a == 0 && b == 0 && c == 10 && cc == 15 && d == 20;"

//@ assignable \    othing;     "

//@ ensures a == 0 && b == 0 && c == 10 && cc == 15;     "

//@ assert a == 0;     "

//@ assert b == 0;     "

//@ assert c == 10;     "

//@ public invariant b == 10;    "

//@ assignable \    othing;     "

//@ assert arg != this;     "

//@ assert b == 10;     "

//@ assert arg.b == 10;     "

//@ assignable \    othing;     "

//@ assignable \    othing;     "

//@ ghost public int d = 20;    "

//@ initially a == 0 && b == 0 && c == 10 && cc == 15 && d == 20;"

//@ assignable \    othing;     "

//@ ensures a == 0 && b == 0 && c == 10 && cc == 15;     "

//@ assert a == 0;     "

//@ assert b == 0;     "

//@ assert c == 10;     "

//@ public invariant b == 10;    "

//@ assignable \    othing;     "

//@ assert arg != this;     "

//@ assert b == 10;     "

//@ assert arg.b == 10;     "

//@ assignable \    othing;     "

//@ assignable \    othing;     "

//@ ghost public int d = 20;    "

//@ initially a == 0 && b == 0 && c == 10 && cc == 15 && d == 20;"

//@ assignable \    othing;     "

//@ ensures a == 0 && b == 0 && c == 10 && cc == 15;     "

//@ assert a == 0;     "

//@ assert b == 0;     "

//@ assert c == 10;     "

//@ public invariant b == 10;    "

//@ assignable \    othing;     "

//@ assert arg != this;     "

//@ assert b == 10;     "

//@ assert arg.b == 10;     "

//@ assignable \    othing;     "

//@ assignable \    othing;     "

//@ ghost public int d = 20;    "

//@ initially a == 0 && b == 0 && c == 10 && cc == 15 && d == 20;"

//@ assignable \    othing;     "

//@ ensures a == 0 && b == 0 && c == 10 && cc == 15;     "

//@ assert a == 0;     "

//@ assert b == 0;     "

//@ assert c == 10;     "

//@ public invariant b == 10;    "

//@ assignable \    othing;     "

//@ assert arg != this;     "

//@ assert b == 10;     "

//@ assert arg.b == 10;     "

//@ assignable \    othing;     "

//@ assignable \    othing;     "

//@ ghost public int d = 20;    "

//@ initially a == 0 && b == 0 && c == 10 && cc == 15 && d == 20;"

//@ assignable \    othing;     "

//@ ensures a == 0 && b == 0 && c == 10 && cc == 15;     "

//@ assert a == 0;     "

//@ assert b == 0;     "

//@ assert c == 10;     "

//@ public invariant b == 10;    "

//@ assignable \    othing;     "

//@ assert arg != this;     "

//@ assert b == 10;     "

//@ assert arg.b == 10;     "

//@ requires k > 0;    "

//@ assert k == 0;    "

//@ requires k > 0;    "

//@ ensures \\result < 0;    "

//@ requires k == 0;    "

//@ requires t != null; requires \\elemtype(\\typeof(c)) == \\type(Object);     "

//@ assume c != null && c.length == 10;    "

//@ assert false;    "

//@ requires j == 0;    "

//@ assert false;    "

//@ requires j > 0;    "

//@ loop_invariant 0<=i && i <=j;    "

//@ loop_invariant n == i;    "

//@ assert n != 20;    "

//@ requires j > 0;    "

//@ loop_invariant 0<=i && i <=j;    "

//@ loop_invariant n == i;    "

//@ assert n == -10;    "

//@ assert c(2) != -2;    " // ERROR - c(2) can be any negative number

//@ assert cc(2) != -3;    " // OK - we know cc(2) is -2

//@ assert b();    " // ERROR - b() can be anything

//@ assert bb(0);    " // ERROR - bb(0) ncan be anything - is this any different from m3?

//@ normal_behavior requires z > 0; ensures \\result < 0;    "

/*@ pure */
//@ public normal_behavior requires z > 0; ensures \\result == -z;    "

/*@ pure */
//@ normal_behavior requires true;     "

/*@ pure */
//@ normal_behavior requires true;     "

/*@ pure */
//@ requires i>=0; ensures \\result==0;    "

//@ requires i>=0; ensures k == 0;    "

//@ requires i>=0; ensures \\result==0;    "

//@ requires i>=0; ensures \\result==0;    "

//@ public normal_behavior requires i>=0; ensures k==0;    "

//@ requires i>=0; ensures k==1;    "

//@ requires i>0;     "

//@ ensures k==0;    "

//@ signals (Exception e) false;    "

//@ also requires i==0;     "

//@ ensures false;    "

//@ signals (RuntimeException e) k==1;    "

//@ signals_only RuntimeException;    "

//@ assert k != 9;    "

//@ signals (Exception) false;    "

//@ assert true;    "

//@ ensures \\result == i+10;    "

//@ assert false;    "

//@ assert false;    "

//@ assume k == 98;     "

//@ ghost int kk = 0;    "

//@ set kk = 5;    "

//@ debug kk = 7;    "

//@ set kk = \\old(k) - k;    "

//@ assume (k==k) && (\\lblpos X (k == 65));    "

//@ assume o!= null && \\typeof(o) <: \\type(Object);    "

//@ unreachable;    "

//@ ensures false;     "

//@ requires i != 0; ensures false;     " //Line 19

//@ requires i == 0; ensures false;     " // Line 40

//@ ensures \\result != 10;     "

//@ requires k > 0;    "

//@ assert k == 0;    "

//@ requires k > 0;    "

//@ ensures \\result < 0;    "

//@ requires k == 0;    "

//@ requires t != null; requires \\elemtype(\\typeof(c)) == \\type(Object);     "

//@ assume c != null && c.length == 10;    "

//@ assert false;    "

//@ requires j == 0;    "

//@ assert false;    "

//@ requires j > 0;    "

//@ loop_invariant 0<=i && i <=j;    "

//@ loop_invariant n == i;    "

//@ assert n != 20;    "

//@ requires j > 0;    "

//@ loop_invariant 0<=i && i <=j;    "

//@ loop_invariant n == i;    "

//@ assert n == -10;    "

//@ assert c(2) != -2;    " // ERROR - c(2) can be any negative number

//@ assert cc(2) != -3;    " // OK - we know cc(2) is -2

//@ assert b();    " // ERROR - b() can be anything

//@ assert bb(0);    " // ERROR - bb(0) ncan be anything - is this any different from m3?

//@ normal_behavior requires z > 0; ensures \\result < 0;    "

/*@ pure */
//@ public normal_behavior requires z > 0; ensures \\result == -z;    "

/*@ pure */
//@ normal_behavior requires true;     "

/*@ pure */
//@ normal_behavior requires true;     "

/*@ pure */
//@ requires i>=0; ensures \\result==0;    "

//@ requires i>=0; ensures k == 0;    "

//@ requires i>=0; ensures \\result==0;    "

//@ requires i>=0; ensures \\result==0;    "

//@ public normal_behavior requires i>=0; ensures k==0;    "

//@ requires i>=0; ensures k==1;    "

//@ requires i>0;     "

//@ ensures k==0;    "

//@ signals (Exception e) false;    "

//@ also requires i==0;     "

//@ ensures false;    "

//@ signals (RuntimeException e) k==1;    "

//@ signals_only RuntimeException;    "

//@ assert k != 9;    "

//@ signals (Exception) false;    "

//@ assert true;    "

//@ ensures \\result == i+10;    "

//@ assert false;    "

//@ assert false;    "

//@ assume k == 98;     "

//@ ghost int kk = 0;    "

//@ set kk = 5;    "

//@ debug kk = 7;    "

//@ set kk = \\old(k) - k;    "

//@ assume (k==k) && (\\lblpos X (k == 65));    "

//@ assume o!= null && \\typeof(o) <: \\type(Object);    "

//@ unreachable;    "

//@ ensures false;     "

//@ requires i != 0; ensures false;     " //Line 19

//@ requires i == 0; ensures false;     " // Line 40

//@ ensures \\result != 10;     "

//@ requires k > 0;    "

//@ assert k == 0;    "

//@ requires k > 0;    "

//@ ensures \\result < 0;    "

//@ requires k == 0;    "

//@ requires t != null; requires \\elemtype(\\typeof(c)) == \\type(Object);     "

//@ assume c != null && c.length == 10;    "

//@ assert false;    "

//@ requires j == 0;    "

//@ assert false;    "

//@ requires j > 0;    "

//@ loop_invariant 0<=i && i <=j;    "

//@ loop_invariant n == i;    "

//@ assert n != 20;    "

//@ requires j > 0;    "

//@ loop_invariant 0<=i && i <=j;    "

//@ loop_invariant n == i;    "

//@ assert n == -10;    "

//@ assert c(2) != -2;    " // ERROR - c(2) can be any negative number

//@ assert cc(2) != -3;    " // OK - we know cc(2) is -2

//@ assert b();    " // ERROR - b() can be anything

//@ assert bb(0);    " // ERROR - bb(0) ncan be anything - is this any different from m3?

//@ normal_behavior requires z > 0; ensures \\result < 0;    "

/*@ pure */
//@ public normal_behavior requires z > 0; ensures \\result == -z;    "

/*@ pure */
//@ normal_behavior requires true;     "

/*@ pure */
//@ normal_behavior requires true;     "

/*@ pure */
//@ requires i>=0; ensures \\result==0;    "

//@ requires i>=0; ensures k == 0;    "

//@ requires i>=0; ensures \\result==0;    "

//@ requires i>=0; ensures \\result==0;    "

//@ public normal_behavior requires i>=0; ensures k==0;    "

//@ requires i>=0; ensures k==1;    "

//@ requires i>0;     "

//@ ensures k==0;    "

//@ signals (Exception e) false;    "

//@ also requires i==0;     "

//@ ensures false;    "

//@ signals (RuntimeException e) k==1;    "

//@ signals_only RuntimeException;    "

//@ assert k != 9;    "

//@ signals (Exception) false;    "

//@ assert true;    "

//@ ensures \\result == i+10;    "

//@ assert false;    "

//@ assert false;    "

//@ assume k == 98;     "

//@ ghost int kk = 0;    "

//@ set kk = 5;    "

//@ debug kk = 7;    "

//@ set kk = \\old(k) - k;    "

//@ assume (k==k) && (\\lblpos X (k == 65));    "

//@ assume o!= null && \\typeof(o) <: \\type(Object);    "

//@ unreachable;    "

//@ ensures false;     "

//@ requires i != 0; ensures false;     " //Line 19

//@ requires i == 0; ensures false;     " // Line 40

//@ ensures \\result != 10;     "

//@ requires k > 0;    "

//@ assert k == 0;    "

//@ requires k > 0;    "

//@ ensures \\result < 0;    "

//@ requires k == 0;    "

//@ requires t != null; requires \\elemtype(\\typeof(c)) == \\type(Object);     "

//@ assume c != null && c.length == 10;    "

//@ assert false;    "

//@ requires j == 0;    "

//@ assert false;    "

//@ requires j > 0;    "

//@ loop_invariant 0<=i && i <=j;    "

//@ loop_invariant n == i;    "

//@ assert n != 20;    "

//@ requires j > 0;    "

//@ loop_invariant 0<=i && i <=j;    "

//@ loop_invariant n == i;    "

//@ assert n == -10;    "

//@ assert c(2) != -2;    " // ERROR - c(2) can be any negative number

//@ assert cc(2) != -3;    " // OK - we know cc(2) is -2

//@ assert b();    " // ERROR - b() can be anything

//@ assert bb(0);    " // ERROR - bb(0) ncan be anything - is this any different from m3?

//@ normal_behavior requires z > 0; ensures \\result < 0;    "

/*@ pure */
//@ public normal_behavior requires z > 0; ensures \\result == -z;    "

/*@ pure */
//@ normal_behavior requires true;     "

/*@ pure */
//@ normal_behavior requires true;     "

/*@ pure */
//@ requires i>=0; ensures \\result==0;    "

//@ requires i>=0; ensures k == 0;    "

//@ requires i>=0; ensures \\result==0;    "

//@ requires i>=0; ensures \\result==0;    "

//@ public normal_behavior requires i>=0; ensures k==0;    "

//@ requires i>=0; ensures k==1;    "

//@ requires i>0;     "

//@ ensures k==0;    "

//@ signals (Exception e) false;    "

//@ also requires i==0;     "

//@ ensures false;    "

//@ signals (RuntimeException e) k==1;    "

//@ signals_only RuntimeException;    "

//@ assert k != 9;    "

//@ signals (Exception) false;    "

//@ assert true;    "

//@ ensures \\result == i+10;    "

//@ assert false;    "

//@ assert false;    "

//@ assume k == 98;     "

//@ ghost int kk = 0;    "

//@ set kk = 5;    "

//@ debug kk = 7;    "

//@ set kk = \\old(k) - k;    "

//@ assume (k==k) && (\\lblpos X (k == 65));    "

//@ assume o!= null && \\typeof(o) <: \\type(Object);    "

//@ unreachable;    "

//@ ensures false;     "

//@ requires i != 0; ensures false;     " //Line 19

//@ requires i == 0; ensures false;     " // Line 40

//@ ensures \\result != 10;     "

//@ requires k > 0;    "

//@ assert k == 0;    "

//@ requires k > 0;    "

//@ ensures \\result < 0;    "

//@ requires k == 0;    "

//@ requires t != null; requires \\elemtype(\\typeof(c)) == \\type(Object);     "

//@ assume c != null && c.length == 10;    "

//@ assert false;    "

//@ requires j == 0;    "

//@ assert false;    "

//@ requires j > 0;    "

//@ loop_invariant 0<=i && i <=j;    "

//@ loop_invariant n == i;    "

//@ assert n != 20;    "

//@ requires j > 0;    "

//@ loop_invariant 0<=i && i <=j;    "

//@ loop_invariant n == i;    "

//@ assert n == -10;    "

//@ assert c(2) != -2;    " // ERROR - c(2) can be any negative number

//@ assert cc(2) != -3;    " // OK - we know cc(2) is -2

//@ assert b();    " // ERROR - b() can be anything

//@ assert bb(0);    " // ERROR - bb(0) ncan be anything - is this any different from m3?

//@ normal_behavior requires z > 0; ensures \\result < 0;    "

/*@ pure */
//@ public normal_behavior requires z > 0; ensures \\result == -z;    "

/*@ pure */
//@ normal_behavior requires true;     "

/*@ pure */
//@ normal_behavior requires true;     "

/*@ pure */
//@ requires i>=0; ensures \\result==0;    "

//@ requires i>=0; ensures k == 0;    "

//@ requires i>=0; ensures \\result==0;    "

//@ requires i>=0; ensures \\result==0;    "

//@ public normal_behavior requires i>=0; ensures k==0;    "

//@ requires i>=0; ensures k==1;    "

//@ requires i>0;     "

//@ ensures k==0;    "

//@ signals (Exception e) false;    "

//@ also requires i==0;     "

//@ ensures false;    "

//@ signals (RuntimeException e) k==1;    "

//@ signals_only RuntimeException;    "

//@ assert k != 9;    "

//@ signals (Exception) false;    "

//@ assert true;    "

//@ ensures \\result == i+10;    "

//@ assert false;    "

//@ assert false;    "

//@ assume k == 98;     "

//@ ghost int kk = 0;    "

//@ set kk = 5;    "

//@ debug kk = 7;    "

//@ set kk = \\old(k) - k;    "

//@ assume (k==k) && (\\lblpos X (k == 65));    "

//@ assume o!= null && \\typeof(o) <: \\type(Object);    "

//@ unreachable;    "

//@ ensures false;     "

//@ requires i != 0; ensures false;     " //Line 19

//@ requires i == 0; ensures false;     " // Line 40

//@ ensures \\result != 10;     "

//@ assert Z.AA != Z.BB;     "

//@ assert Z.AA == ee;     "

//@ assert Z.AA == ee && ee != Z.BB;     "

//@ assert Z.AA == Z.AA;     "

//@ assert Z.AA != null;     "

//@ assert Z.AA instanceof Z;     "

//@ assert Z.AA != Z.BB;     "

//@ assert ee == null || ee == Z.AA || ee == Z.BB || ee == Z.CC;     "

//@ assume ee != Z.AA ;     "

//@ assume ee != Z.CC ;     "

//@ assert ee == Z.BB ;     "

//@ assume ee != Z.AA ;     "

//@ assume ee != Z.CC ;     "

//@ assert ee != Z.BB ;     " // ERROR

//@ assert o instanceof Z ;     "

//@ assert o instanceof Integer ;     " // ERROR

//@ assert Z.AA != o;     "

//@ assume !(o instanceof Z) ;    "

//@ assert Z.AA != o;     "

//@ assume (o instanceof Z) ;    "

//@ assert o == Z.AA || o == Z.CC || o == Z.BB;     "

//@ assert Z.AA != o;     "

//@ ensures \\result > 0;    "

//@ ensures the_value == MyEnum.ONE ==> \\result == 2;    "

//@ ensures the_value == MyEnum.TWO ==> \\result == 4;    "

//@ ensures the_value == MyEnum.THREE ==> \\result == 8;    "

//@ assert Z.AA != Z.BB;     "

//@ assert Z.AA == ee;     "

//@ assert Z.AA == ee && ee != Z.BB;     "

//@ assert Z.AA == Z.AA;     "

//@ assert Z.AA != null;     "

//@ assert Z.AA instanceof Z;     "

//@ assert Z.AA != Z.BB;     "

//@ assert ee == null || ee == Z.AA || ee == Z.BB || ee == Z.CC;     "

//@ assume ee != Z.AA ;     "

//@ assume ee != Z.CC ;     "

//@ assert ee == Z.BB ;     "

//@ assume ee != Z.AA ;     "

//@ assume ee != Z.CC ;     "

//@ assert ee != Z.BB ;     " // ERROR

//@ assert o instanceof Z ;     "

//@ assert o instanceof Integer ;     " // ERROR

//@ assert Z.AA != o;     "

//@ assume !(o instanceof Z) ;    "

//@ assert Z.AA != o;     "

//@ assume (o instanceof Z) ;    "

//@ assert o == Z.AA || o == Z.CC || o == Z.BB;     "

//@ assert Z.AA != o;     "

//@ ensures \\result > 0;    "

//@ ensures the_value == MyEnum.ONE ==> \\result == 2;    "

//@ ensures the_value == MyEnum.TWO ==> \\result == 4;    "

//@ ensures the_value == MyEnum.THREE ==> \\result == 8;    "

//@ assert Z.AA != Z.BB;     "

//@ assert Z.AA == ee;     "

//@ assert Z.AA == ee && ee != Z.BB;     "

//@ assert Z.AA == Z.AA;     "

//@ assert Z.AA != null;     "

//@ assert Z.AA instanceof Z;     "

//@ assert Z.AA != Z.BB;     "

//@ assert ee == null || ee == Z.AA || ee == Z.BB || ee == Z.CC;     "

//@ assume ee != Z.AA ;     "

//@ assume ee != Z.CC ;     "

//@ assert ee == Z.BB ;     "

//@ assume ee != Z.AA ;     "

//@ assume ee != Z.CC ;     "

//@ assert ee != Z.BB ;     " // ERROR

//@ assert o instanceof Z ;     "

//@ assert o instanceof Integer ;     " // ERROR

//@ assert Z.AA != o;     "

//@ assume !(o instanceof Z) ;    "

//@ assert Z.AA != o;     "

//@ assume (o instanceof Z) ;    "

//@ assert o == Z.AA || o == Z.CC || o == Z.BB;     "

//@ assert Z.AA != o;     "

//@ ensures \\result > 0;    "

//@ ensures the_value == MyEnum.ONE ==> \\result == 2;    "

//@ ensures the_value == MyEnum.TWO ==> \\result == 4;    "

//@ ensures the_value == MyEnum.THREE ==> \\result == 8;    "

//@ assert Z.AA != Z.BB;     "

//@ assert Z.AA == ee;     "

//@ assert Z.AA == ee && ee != Z.BB;     "

//@ assert Z.AA == Z.AA;     "

//@ assert Z.AA != null;     "

//@ assert Z.AA instanceof Z;     "

//@ assert Z.AA != Z.BB;     "

//@ assert ee == null || ee == Z.AA || ee == Z.BB || ee == Z.CC;     "

//@ assume ee != Z.AA ;     "

//@ assume ee != Z.CC ;     "

//@ assert ee == Z.BB ;     "

//@ assume ee != Z.AA ;     "

//@ assume ee != Z.CC ;     "

//@ assert ee != Z.BB ;     " // ERROR

//@ assert o instanceof Z ;     "

//@ assert o instanceof Integer ;     " // ERROR

//@ assert Z.AA != o;     "

//@ assume !(o instanceof Z) ;    "

//@ assert Z.AA != o;     "

//@ assume (o instanceof Z) ;    "

//@ assert o == Z.AA || o == Z.CC || o == Z.BB;     "

//@ assert Z.AA != o;     "

//@ ensures \\result > 0;    "

//@ ensures the_value == MyEnum.ONE ==> \\result == 2;    "

//@ ensures the_value == MyEnum.TWO ==> \\result == 4;    "

//@ ensures the_value == MyEnum.THREE ==> \\result == 8;    "

//@ assert Z.AA != Z.BB;     "

//@ assert Z.AA == ee;     "

//@ assert Z.AA == ee && ee != Z.BB;     "

//@ assert Z.AA == Z.AA;     "

//@ assert Z.AA != null;     "

//@ assert Z.AA instanceof Z;     "

//@ assert Z.AA != Z.BB;     "

//@ assert ee == null || ee == Z.AA || ee == Z.BB || ee == Z.CC;     "

//@ assume ee != Z.AA ;     "

//@ assume ee != Z.CC ;     "

//@ assert ee == Z.BB ;     "

//@ assume ee != Z.AA ;     "

//@ assume ee != Z.CC ;     "

//@ assert ee != Z.BB ;     " // ERROR

//@ assert o instanceof Z ;     "

//@ assert o instanceof Integer ;     " // ERROR

//@ assert Z.AA != o;     "

//@ assume !(o instanceof Z) ;    "

//@ assert Z.AA != o;     "

//@ assume (o instanceof Z) ;    "

//@ assert o == Z.AA || o == Z.CC || o == Z.BB;     "

//@ assert Z.AA != o;     "

//@ ensures \\result > 0;    "

//@ ensures the_value == MyEnum.ONE ==> \\result == 2;    "

//@ ensures the_value == MyEnum.TWO ==> \\result == 4;    "

//@ ensures the_value == MyEnum.THREE ==> \\result == 8;    "

//@ code_java_math spec_java_math     "

//@ normal_behavior     "

//@ ensures \\result == (i > 0 && i < 10);    "

//@ pure    "

//@ model public boolean m(int i);    "

//@ assert (\\forall int k; 3<k && k <7; m(k));    "

//@ assert (\\forall int k; 3<k && k <7; m(k-1));    "

//@ assert !(\\forall int k; -3<k && k <7; m(k));    "

//@ code_java_math spec_java_math     "

//@ normal_behavior     "

//@ ensures \\result == (i > 0 && i < 10);    "

//@ pure    "

//@ model public boolean m(int i);    "

//@ pure    "

//@ assert !(\\forall int k; 3<k && k <11; m(k));    "

//@ normal_behavior     "

//@ ensures \\result == (i > 0 && i < 10);    "

//@ model public boolean mfunc(int i);    "

//@ assert mfunc(5);    "

//@ assert !mfunc(0);    "

//@ normal_behavior     "

//@ assignable n;     "

//@ ensures \\result == (i > 0 && i < 10);    "

//@ model public boolean mfunc(int i);    "

//@ assert mfunc(5);    "

//@ assert !mfunc(0);    "

//@ normal_behavior     "

//@ assignable n;     "

//@ ensures \\result == (i > 0 && i < 10);    "

//@ model public boolean mfunc(int i);    "

//@ assert mfunc(5);    "

//@ assert !mfunc(0);    "

//@ normal_behavior     "

//@ assignable n;     "

//@ ensures \\result == (i > 0 && i < 10);    "

//@ model function public boolean mfunc(int i);    "

//@ assert mfunc(5);    "

//@ assert !mfunc(n);    "

//@ normal_behavior     "

//@ ensures \\result == (i > 0 && i < 10);    "

//@ static model public boolean mfunc(int i);    "

//@ assert mfunc(5);    "

//@ assert !mfunc(n);    "

//@ code_java_math spec_java_math     "

//@ normal_behavior     "

//@ ensures \\result == (i > 0 && i < 10);    "

//@ pure    "

//@ model public boolean m(int i);    "

//@ assert (\\forall int k; 3<k && k <7; m(k));    "

//@ assert (\\forall int k; 3<k && k <7; m(k-1));    "

//@ assert !(\\forall int k; -3<k && k <7; m(k));    "

//@ code_java_math spec_java_math     "

//@ normal_behavior     "

//@ ensures \\result == (i > 0 && i < 10);    "

//@ pure    "

//@ model public boolean m(int i);    "

//@ pure    "

//@ assert !(\\forall int k; 3<k && k <11; m(k));    "

//@ normal_behavior     "

//@ ensures \\result == (i > 0 && i < 10);    "

//@ model public boolean mfunc(int i);    "

//@ assert mfunc(5);    "

//@ assert !mfunc(0);    "

//@ normal_behavior     "

//@ assignable n;     "

//@ ensures \\result == (i > 0 && i < 10);    "

//@ model public boolean mfunc(int i);    "

//@ assert mfunc(5);    "

//@ assert !mfunc(0);    "

//@ normal_behavior     "

//@ assignable n;     "

//@ ensures \\result == (i > 0 && i < 10);    "

//@ model public boolean mfunc(int i);    "

//@ assert mfunc(5);    "

//@ assert !mfunc(0);    "

//@ normal_behavior     "

//@ assignable n;     "

//@ ensures \\result == (i > 0 && i < 10);    "

//@ model function public boolean mfunc(int i);    "

//@ assert mfunc(5);    "

//@ assert !mfunc(n);    "

//@ normal_behavior     "

//@ ensures \\result == (i > 0 && i < 10);    "

//@ static model public boolean mfunc(int i);    "

//@ assert mfunc(5);    "

//@ assert !mfunc(n);    "

//@ code_java_math spec_java_math     "

//@ normal_behavior     "

//@ ensures \\result == (i > 0 && i < 10);    "

//@ pure    "

//@ model public boolean m(int i);    "

//@ assert (\\forall int k; 3<k && k <7; m(k));    "

//@ assert (\\forall int k; 3<k && k <7; m(k-1));    "

//@ assert !(\\forall int k; -3<k && k <7; m(k));    "

//@ code_java_math spec_java_math     "

//@ normal_behavior     "

//@ ensures \\result == (i > 0 && i < 10);    "

//@ pure    "

//@ model public boolean m(int i);    "

//@ pure    "

//@ assert !(\\forall int k; 3<k && k <11; m(k));    "

//@ normal_behavior     "

//@ ensures \\result == (i > 0 && i < 10);    "

//@ model public boolean mfunc(int i);    "

//@ assert mfunc(5);    "

//@ assert !mfunc(0);    "

//@ normal_behavior     "

//@ assignable n;     "

//@ ensures \\result == (i > 0 && i < 10);    "

//@ model public boolean mfunc(int i);    "

//@ assert mfunc(5);    "

//@ assert !mfunc(0);    "

//@ normal_behavior     "

//@ assignable n;     "

//@ ensures \\result == (i > 0 && i < 10);    "

//@ model public boolean mfunc(int i);    "

//@ assert mfunc(5);    "

//@ assert !mfunc(0);    "

//@ normal_behavior     "

//@ assignable n;     "

//@ ensures \\result == (i > 0 && i < 10);    "

//@ model function public boolean mfunc(int i);    "

//@ assert mfunc(5);    "

//@ assert !mfunc(n);    "

//@ normal_behavior     "

//@ ensures \\result == (i > 0 && i < 10);    "

//@ static model public boolean mfunc(int i);    "

//@ assert mfunc(5);    "

//@ assert !mfunc(n);    "

//@ code_java_math spec_java_math     "

//@ normal_behavior     "

//@ ensures \\result == (i > 0 && i < 10);    "

//@ pure    "

//@ model public boolean m(int i);    "

//@ assert (\\forall int k; 3<k && k <7; m(k));    "

//@ assert (\\forall int k; 3<k && k <7; m(k-1));    "

//@ assert !(\\forall int k; -3<k && k <7; m(k));    "

//@ code_java_math spec_java_math     "

//@ normal_behavior     "

//@ ensures \\result == (i > 0 && i < 10);    "

//@ pure    "

//@ model public boolean m(int i);    "

//@ pure    "

//@ assert !(\\forall int k; 3<k && k <11; m(k));    "

//@ normal_behavior     "

//@ ensures \\result == (i > 0 && i < 10);    "

//@ model public boolean mfunc(int i);    "

//@ assert mfunc(5);    "

//@ assert !mfunc(0);    "

//@ normal_behavior     "

//@ assignable n;     "

//@ ensures \\result == (i > 0 && i < 10);    "

//@ model public boolean mfunc(int i);    "

//@ assert mfunc(5);    "

//@ assert !mfunc(0);    "

//@ normal_behavior     "

//@ assignable n;     "

//@ ensures \\result == (i > 0 && i < 10);    "

//@ model public boolean mfunc(int i);    "

//@ assert mfunc(5);    "

//@ assert !mfunc(0);    "

//@ normal_behavior     "

//@ assignable n;     "

//@ ensures \\result == (i > 0 && i < 10);    "

//@ model function public boolean mfunc(int i);    "

//@ assert mfunc(5);    "

//@ assert !mfunc(n);    "

//@ normal_behavior     "

//@ ensures \\result == (i > 0 && i < 10);    "

//@ static model public boolean mfunc(int i);    "

//@ assert mfunc(5);    "

//@ assert !mfunc(n);    "

//@ code_java_math spec_java_math     "

//@ normal_behavior     "

//@ ensures \\result == (i > 0 && i < 10);    "

//@ pure    "

//@ model public boolean m(int i);    "

//@ assert (\\forall int k; 3<k && k <7; m(k));    "

//@ assert (\\forall int k; 3<k && k <7; m(k-1));    "

//@ assert !(\\forall int k; -3<k && k <7; m(k));    "

//@ code_java_math spec_java_math     "

//@ normal_behavior     "

//@ ensures \\result == (i > 0 && i < 10);    "

//@ pure    "

//@ model public boolean m(int i);    "

//@ pure    "

//@ assert !(\\forall int k; 3<k && k <11; m(k));    "

//@ normal_behavior     "

//@ ensures \\result == (i > 0 && i < 10);    "

//@ model public boolean mfunc(int i);    "

//@ assert mfunc(5);    "

//@ assert !mfunc(0);    "

//@ normal_behavior     "

//@ assignable n;     "

//@ ensures \\result == (i > 0 && i < 10);    "

//@ model public boolean mfunc(int i);    "

//@ assert mfunc(5);    "

//@ assert !mfunc(0);    "

//@ normal_behavior     "

//@ assignable n;     "

//@ ensures \\result == (i > 0 && i < 10);    "

//@ model public boolean mfunc(int i);    "

//@ assert mfunc(5);    "

//@ assert !mfunc(0);    "

//@ normal_behavior     "

//@ assignable n;     "

//@ ensures \\result == (i > 0 && i < 10);    "

//@ model function public boolean mfunc(int i);    "

//@ assert mfunc(5);    "

//@ assert !mfunc(n);    "

//@ normal_behavior     "

//@ ensures \\result == (i > 0 && i < 10);    "

//@ static model public boolean mfunc(int i);    "

//@ assert mfunc(5);    "

//@ assert !mfunc(n);    "

//@ requires \\type(E) != \\type(Integer) ;    "

//@ assert \\typeof(this) <: \\type(TestJava);    "

//@ assume \\typeof(this) == \\type(Object);    "

//@ assert false;    " // should not trigger

//@ assert \\typeof(this) == \\type(Object);    "

//@ assume i != null;    "

//@ assert i instanceof Object;    "

//@ assert \\typeof(i) <: \\type(Object);    " // Line 6

//@ assert \\erasure(\\typeof(i)) <: \\erasure(\\type(Object));    "

//@ assert \\typeof(i) <: \\type(T);    "

//@ assert i instanceof B;    "

//@ assert \\erasure(\\typeof(i)) <: \\erasure(\\type(B));    "

//@ assert \\typeof(i) <: \\type(B);    " // Line 11

//@ assert \\erasure(\\typeof(i)) <: \\erasure(\\type(C));    " // false

/*@ public normal_behavior ensures true; pure */
//@ assume i != null;    "

//@ assert i instanceof Object;    "

//@ assert \\typeof(i) <: \\type(C);    " // false

/*@ public normal_behavior ensures true; pure */
//@ assume i != null;    "

//@ assert i instanceof Object;    "

//@ assert \\type(T) <: \\type(B);    " // true

//@ assert \\type(T) <: \\type(C);    " // false

/*@ public normal_behavior ensures true; pure */
//@ assert Object.class == java.lang.Object.class;    "

//@ assert \\type(TestJava<Integer>) != \\type(Object);    "

//@ assert \\type(TestJava<Integer>) != \\type(TestJava<Object>);    "

//@ assert Object.class == \\erasure(\\type(T));    " // NO

//@ assert \\type(TestJava<Integer>) == \\type(TestJava<T>);    "  // NO

//@ assert \\typeof(this) == \\type(Object);    "  // NO

//@ assert \\type(TestJava<Integer>) == \\type(TestJava<Object>);    "  // NO

//@ assert Object.class != \\erasure(\\type(T));    "  // OK because T extends B so can't be Object

//@ requires \\type(E) != \\type(Integer) ;    "

//@ requires \\type(E) != \\type(Integer) ;    "

//@ requires \\type(E) == \\type(Integer) ;    "

//@ requires \\type(E) == \\type(Integer) ;    "

/*@ non_null*/
/*@ non_null*/
//@ requires \\type(E) != \\type(Integer);    "

/*@ non_null*/
/*@ non_null*/
/*@ non_null*/
//@ requires \\type(E) != \\type(Integer);    "

/*@non_null*/
/*@ assume ooo >= 0; */
//@ assert sum >= 0;     "

/*@ code_bigint_math spec_bigint_math */
/*@non_null*/
//@ loop_invariant sum >= 0;     "

/*@ assume o != null && o >= 0; */
//@ assert sum >= 0;     "

/*@ code_bigint_math spec_bigint_math */
/*@non_null*/
//@ loop_invariant sum >= 0;     "

/*@ assume o >= 0; */
//@ assert sum >= 0;     "

/*@ code_bigint_math spec_bigint_math */
/*@non_null*/
//@ loop_invariant sum >= 0;     "

/*@ assume o >= 0; */
//@ assert sum >= 0;     "


//@ assert \\elemtype(\\typeof(a)) == \\type(char);     "


//@ assert \\elemtype(\\typeof(a)) == \\type(int);     "

//@ public exceptional_behavior     "

//@   requires true;     "  // FIXME - should be t instanceof T

/*@ non_null*/
//@ requires \\type(E) != \\type(Integer) ;    "

//@ assert \\typeof(this) <: \\type(TestJava);    "

//@ assume \\typeof(this) == \\type(Object);    "

//@ assert false;    " // should not trigger

//@ assert \\typeof(this) == \\type(Object);    "

//@ assume i != null;    "

//@ assert i instanceof Object;    "

//@ assert \\typeof(i) <: \\type(Object);    " // Line 6

//@ assert \\erasure(\\typeof(i)) <: \\erasure(\\type(Object));    "

//@ assert \\typeof(i) <: \\type(T);    "

//@ assert i instanceof B;    "

//@ assert \\erasure(\\typeof(i)) <: \\erasure(\\type(B));    "

//@ assert \\typeof(i) <: \\type(B);    " // Line 11

//@ assert \\erasure(\\typeof(i)) <: \\erasure(\\type(C));    " // false

/*@ public normal_behavior ensures true; pure */
//@ assume i != null;    "

//@ assert i instanceof Object;    "

//@ assert \\typeof(i) <: \\type(C);    " // false

/*@ public normal_behavior ensures true; pure */
//@ assume i != null;    "

//@ assert i instanceof Object;    "

//@ assert \\type(T) <: \\type(B);    " // true

//@ assert \\type(T) <: \\type(C);    " // false

/*@ public normal_behavior ensures true; pure */
//@ assert Object.class == java.lang.Object.class;    "

//@ assert \\type(TestJava<Integer>) != \\type(Object);    "

//@ assert \\type(TestJava<Integer>) != \\type(TestJava<Object>);    "

//@ assert Object.class == \\erasure(\\type(T));    " // NO

//@ assert \\type(TestJava<Integer>) == \\type(TestJava<T>);    "  // NO

//@ assert \\typeof(this) == \\type(Object);    "  // NO

//@ assert \\type(TestJava<Integer>) == \\type(TestJava<Object>);    "  // NO

//@ assert Object.class != \\erasure(\\type(T));    "  // OK because T extends B so can't be Object

//@ requires \\type(E) != \\type(Integer) ;    "

//@ requires \\type(E) != \\type(Integer) ;    "

//@ requires \\type(E) == \\type(Integer) ;    "

//@ requires \\type(E) == \\type(Integer) ;    "

/*@ non_null*/
/*@ non_null*/
//@ requires \\type(E) != \\type(Integer);    "

/*@ non_null*/
/*@ non_null*/
/*@ non_null*/
//@ requires \\type(E) != \\type(Integer);    "

/*@non_null*/
/*@ assume ooo >= 0; */
//@ assert sum >= 0;     "

/*@ code_bigint_math spec_bigint_math */
/*@non_null*/
//@ loop_invariant sum >= 0;     "

/*@ assume o != null && o >= 0; */
//@ assert sum >= 0;     "

/*@ code_bigint_math spec_bigint_math */
/*@non_null*/
//@ loop_invariant sum >= 0;     "

/*@ assume o >= 0; */
//@ assert sum >= 0;     "

/*@ code_bigint_math spec_bigint_math */
/*@non_null*/
//@ loop_invariant sum >= 0;     "

/*@ assume o >= 0; */
//@ assert sum >= 0;     "


//@ assert \\elemtype(\\typeof(a)) == \\type(char);     "


//@ assert \\elemtype(\\typeof(a)) == \\type(int);     "

//@ public exceptional_behavior     "

//@   requires true;     "  // FIXME - should be t instanceof T

/*@ non_null*/
//@ requires \\type(E) != \\type(Integer) ;    "

//@ assert \\typeof(this) <: \\type(TestJava);    "

//@ assume \\typeof(this) == \\type(Object);    "

//@ assert false;    " // should not trigger

//@ assert \\typeof(this) == \\type(Object);    "

//@ assume i != null;    "

//@ assert i instanceof Object;    "

//@ assert \\typeof(i) <: \\type(Object);    " // Line 6

//@ assert \\erasure(\\typeof(i)) <: \\erasure(\\type(Object));    "

//@ assert \\typeof(i) <: \\type(T);    "

//@ assert i instanceof B;    "

//@ assert \\erasure(\\typeof(i)) <: \\erasure(\\type(B));    "

//@ assert \\typeof(i) <: \\type(B);    " // Line 11

//@ assert \\erasure(\\typeof(i)) <: \\erasure(\\type(C));    " // false

/*@ public normal_behavior ensures true; pure */
//@ assume i != null;    "

//@ assert i instanceof Object;    "

//@ assert \\typeof(i) <: \\type(C);    " // false

/*@ public normal_behavior ensures true; pure */
//@ assume i != null;    "

//@ assert i instanceof Object;    "

//@ assert \\type(T) <: \\type(B);    " // true

//@ assert \\type(T) <: \\type(C);    " // false

/*@ public normal_behavior ensures true; pure */
//@ assert Object.class == java.lang.Object.class;    "

//@ assert \\type(TestJava<Integer>) != \\type(Object);    "

//@ assert \\type(TestJava<Integer>) != \\type(TestJava<Object>);    "

//@ assert Object.class == \\erasure(\\type(T));    " // NO

//@ assert \\type(TestJava<Integer>) == \\type(TestJava<T>);    "  // NO

//@ assert \\typeof(this) == \\type(Object);    "  // NO

//@ assert \\type(TestJava<Integer>) == \\type(TestJava<Object>);    "  // NO

//@ assert Object.class != \\erasure(\\type(T));    "  // OK because T extends B so can't be Object

//@ requires \\type(E) != \\type(Integer) ;    "

//@ requires \\type(E) != \\type(Integer) ;    "

//@ requires \\type(E) == \\type(Integer) ;    "

//@ requires \\type(E) == \\type(Integer) ;    "

/*@ non_null*/
/*@ non_null*/
//@ requires \\type(E) != \\type(Integer);    "

/*@ non_null*/
/*@ non_null*/
/*@ non_null*/
//@ requires \\type(E) != \\type(Integer);    "

/*@non_null*/
/*@ assume ooo >= 0; */
//@ assert sum >= 0;     "

/*@ code_bigint_math spec_bigint_math */
/*@non_null*/
//@ loop_invariant sum >= 0;     "

/*@ assume o != null && o >= 0; */
//@ assert sum >= 0;     "

/*@ code_bigint_math spec_bigint_math */
/*@non_null*/
//@ loop_invariant sum >= 0;     "

/*@ assume o >= 0; */
//@ assert sum >= 0;     "

/*@ code_bigint_math spec_bigint_math */
/*@non_null*/
//@ loop_invariant sum >= 0;     "

/*@ assume o >= 0; */
//@ assert sum >= 0;     "


//@ assert \\elemtype(\\typeof(a)) == \\type(char);     "


//@ assert \\elemtype(\\typeof(a)) == \\type(int);     "

//@ public exceptional_behavior     "

//@   requires true;     "  // FIXME - should be t instanceof T

/*@ non_null*/
//@ requires \\type(E) != \\type(Integer) ;    "

//@ assert \\typeof(this) <: \\type(TestJava);    "

//@ assume \\typeof(this) == \\type(Object);    "

//@ assert false;    " // should not trigger

//@ assert \\typeof(this) == \\type(Object);    "

//@ assume i != null;    "

//@ assert i instanceof Object;    "

//@ assert \\typeof(i) <: \\type(Object);    " // Line 6

//@ assert \\erasure(\\typeof(i)) <: \\erasure(\\type(Object));    "

//@ assert \\typeof(i) <: \\type(T);    "

//@ assert i instanceof B;    "

//@ assert \\erasure(\\typeof(i)) <: \\erasure(\\type(B));    "

//@ assert \\typeof(i) <: \\type(B);    " // Line 11

//@ assert \\erasure(\\typeof(i)) <: \\erasure(\\type(C));    " // false

/*@ public normal_behavior ensures true; pure */
//@ assume i != null;    "

//@ assert i instanceof Object;    "

//@ assert \\typeof(i) <: \\type(C);    " // false

/*@ public normal_behavior ensures true; pure */
//@ assume i != null;    "

//@ assert i instanceof Object;    "

//@ assert \\type(T) <: \\type(B);    " // true

//@ assert \\type(T) <: \\type(C);    " // false

/*@ public normal_behavior ensures true; pure */
//@ assert Object.class == java.lang.Object.class;    "

//@ assert \\type(TestJava<Integer>) != \\type(Object);    "

//@ assert \\type(TestJava<Integer>) != \\type(TestJava<Object>);    "

//@ assert Object.class == \\erasure(\\type(T));    " // NO

//@ assert \\type(TestJava<Integer>) == \\type(TestJava<T>);    "  // NO

//@ assert \\typeof(this) == \\type(Object);    "  // NO

//@ assert \\type(TestJava<Integer>) == \\type(TestJava<Object>);    "  // NO

//@ assert Object.class != \\erasure(\\type(T));    "  // OK because T extends B so can't be Object

//@ requires \\type(E) != \\type(Integer) ;    "

//@ requires \\type(E) != \\type(Integer) ;    "

//@ requires \\type(E) == \\type(Integer) ;    "

//@ requires \\type(E) == \\type(Integer) ;    "

/*@ non_null*/
/*@ non_null*/
//@ requires \\type(E) != \\type(Integer);    "

/*@ non_null*/
/*@ non_null*/
/*@ non_null*/
//@ requires \\type(E) != \\type(Integer);    "

/*@non_null*/
/*@ assume ooo >= 0; */
//@ assert sum >= 0;     "

/*@ code_bigint_math spec_bigint_math */
/*@non_null*/
//@ loop_invariant sum >= 0;     "

/*@ assume o != null && o >= 0; */
//@ assert sum >= 0;     "

/*@ code_bigint_math spec_bigint_math */
/*@non_null*/
//@ loop_invariant sum >= 0;     "

/*@ assume o >= 0; */
//@ assert sum >= 0;     "

/*@ code_bigint_math spec_bigint_math */
/*@non_null*/
//@ loop_invariant sum >= 0;     "

/*@ assume o >= 0; */
//@ assert sum >= 0;     "


//@ assert \\elemtype(\\typeof(a)) == \\type(char);     "


//@ assert \\elemtype(\\typeof(a)) == \\type(int);     "

//@ public exceptional_behavior     "

//@   requires true;     "  // FIXME - should be t instanceof T

/*@ non_null*/
//@ requires \\type(E) != \\type(Integer) ;    "

//@ assert \\typeof(this) <: \\type(TestJava);    "

//@ assume \\typeof(this) == \\type(Object);    "

//@ assert false;    " // should not trigger

//@ assert \\typeof(this) == \\type(Object);    "

//@ assume i != null;    "

//@ assert i instanceof Object;    "

//@ assert \\typeof(i) <: \\type(Object);    " // Line 6

//@ assert \\erasure(\\typeof(i)) <: \\erasure(\\type(Object));    "

//@ assert \\typeof(i) <: \\type(T);    "

//@ assert i instanceof B;    "

//@ assert \\erasure(\\typeof(i)) <: \\erasure(\\type(B));    "

//@ assert \\typeof(i) <: \\type(B);    " // Line 11

//@ assert \\erasure(\\typeof(i)) <: \\erasure(\\type(C));    " // false

/*@ public normal_behavior ensures true; pure */
//@ assume i != null;    "

//@ assert i instanceof Object;    "

//@ assert \\typeof(i) <: \\type(C);    " // false

/*@ public normal_behavior ensures true; pure */
//@ assume i != null;    "

//@ assert i instanceof Object;    "

//@ assert \\type(T) <: \\type(B);    " // true

//@ assert \\type(T) <: \\type(C);    " // false

/*@ public normal_behavior ensures true; pure */
//@ assert Object.class == java.lang.Object.class;    "

//@ assert \\type(TestJava<Integer>) != \\type(Object);    "

//@ assert \\type(TestJava<Integer>) != \\type(TestJava<Object>);    "

//@ assert Object.class == \\erasure(\\type(T));    " // NO

//@ assert \\type(TestJava<Integer>) == \\type(TestJava<T>);    "  // NO

//@ assert \\typeof(this) == \\type(Object);    "  // NO

//@ assert \\type(TestJava<Integer>) == \\type(TestJava<Object>);    "  // NO

//@ assert Object.class != \\erasure(\\type(T));    "  // OK because T extends B so can't be Object

//@ requires \\type(E) != \\type(Integer) ;    "

//@ requires \\type(E) != \\type(Integer) ;    "

//@ requires \\type(E) == \\type(Integer) ;    "

//@ requires \\type(E) == \\type(Integer) ;    "

/*@ non_null*/
/*@ non_null*/
//@ requires \\type(E) != \\type(Integer);    "

/*@ non_null*/
/*@ non_null*/
/*@ non_null*/
//@ requires \\type(E) != \\type(Integer);    "

/*@non_null*/
/*@ assume ooo >= 0; */
//@ assert sum >= 0;     "

/*@ code_bigint_math spec_bigint_math */
/*@non_null*/
//@ loop_invariant sum >= 0;     "

/*@ assume o != null && o >= 0; */
//@ assert sum >= 0;     "

/*@ code_bigint_math spec_bigint_math */
/*@non_null*/
//@ loop_invariant sum >= 0;     "

/*@ assume o >= 0; */
//@ assert sum >= 0;     "

/*@ code_bigint_math spec_bigint_math */
/*@non_null*/
//@ loop_invariant sum >= 0;     "

/*@ assume o >= 0; */
//@ assert sum >= 0;     "


//@ assert \\elemtype(\\typeof(a)) == \\type(char);     "


//@ assert \\elemtype(\\typeof(a)) == \\type(int);     "

//@ public exceptional_behavior     "

//@   requires true;     "  // FIXME - should be t instanceof T

/*@ non_null*/
//@ model public int mx;    "

//@ in mx;     "

//@ assignable mx;     "

//@ assignable mx;     "

//@ model public int mx;    "

//@ in mx;     "

//@ assignable mx;     "

//@ assignable mx;     "

//@ model public int mx;    "

//@ in mx;     "

//@ assignable mx;     "

//@ assignable mx;     "

//@ model public int mx;    "

//@ in mx;     "

//@ assignable mx;     "

//@ assignable mx;     "

//@ model public int mx;    "

//@ in mx;     "

//@ assignable mx;     "

//@ assignable mx;     "

//@ code_java_math spec_java_math     "

//@ ensures j + 1 ==  \\old(j);    "

//@ ensures  \\result == ii + 1;    "

//@ ensures j + \\result == ii + \\old(j);    "

//@ assignable j;    "

//@ assignable j;    "

//@ assignable \    othing;    " // ERROR

//@ code_java_math spec_java_math     "

//@ ensures j ==  \\old(j) + ii;    "

//@ assignable j;    "

//@ assignable \    othing;    " // ERROR

//@ code_java_math spec_java_math     "

//@ code_java_math spec_java_math     "

//@ ensures m.j + 1  ==  \\old(m.j) ;    "   // Line 13

//@ ensures  \\result == ii + 1;    "

//@ assignable m.j;    "

//@ assignable m.j;    "

//@ assignable \    othing;    " // ERROR

//@ code_bigint_math spec_bigint_math     "

//@ code_bigint_math spec_bigint_math     "

//@ ensures m.j + 1 ==  \\old(m.j);    "   // Line 13

//@ ensures  \\result == ii + 1;    "

//@ assignable m.j;    "

//@ assignable m.j;    "

//@ assignable \    othing;    " // ERROR

//@ code_java_math spec_java_math     "

//@ code_java_math spec_java_math     "

//@ code_java_math spec_java_math     "

//@ ensures j + 1 ==  \\old(j);    "

//@ ensures  \\result == ii + 1;    "

//@ ensures j + \\result == ii + \\old(j);    "

//@ assignable j;    "

//@ assignable j;    "

//@ assignable \    othing;    " // ERROR

//@ code_java_math spec_java_math     "

//@ ensures j ==  \\old(j) + ii;    "

//@ assignable j;    "

//@ assignable \    othing;    " // ERROR

//@ code_java_math spec_java_math     "

//@ code_java_math spec_java_math     "

//@ ensures m.j + 1  ==  \\old(m.j) ;    "   // Line 13

//@ ensures  \\result == ii + 1;    "

//@ assignable m.j;    "

//@ assignable m.j;    "

//@ assignable \    othing;    " // ERROR

//@ code_bigint_math spec_bigint_math     "

//@ code_bigint_math spec_bigint_math     "

//@ ensures m.j + 1 ==  \\old(m.j);    "   // Line 13

//@ ensures  \\result == ii + 1;    "

//@ assignable m.j;    "

//@ assignable m.j;    "

//@ assignable \    othing;    " // ERROR

//@ code_java_math spec_java_math     "

//@ code_java_math spec_java_math     "

//@ code_java_math spec_java_math     "

//@ ensures j + 1 ==  \\old(j);    "

//@ ensures  \\result == ii + 1;    "

//@ ensures j + \\result == ii + \\old(j);    "

//@ assignable j;    "

//@ assignable j;    "

//@ assignable \    othing;    " // ERROR

//@ code_java_math spec_java_math     "

//@ ensures j ==  \\old(j) + ii;    "

//@ assignable j;    "

//@ assignable \    othing;    " // ERROR

//@ code_java_math spec_java_math     "

//@ code_java_math spec_java_math     "

//@ ensures m.j + 1  ==  \\old(m.j) ;    "   // Line 13

//@ ensures  \\result == ii + 1;    "

//@ assignable m.j;    "

//@ assignable m.j;    "

//@ assignable \    othing;    " // ERROR

//@ code_bigint_math spec_bigint_math     "

//@ code_bigint_math spec_bigint_math     "

//@ ensures m.j + 1 ==  \\old(m.j);    "   // Line 13

//@ ensures  \\result == ii + 1;    "

//@ assignable m.j;    "

//@ assignable m.j;    "

//@ assignable \    othing;    " // ERROR

//@ code_java_math spec_java_math     "

//@ code_java_math spec_java_math     "

//@ code_java_math spec_java_math     "

//@ ensures j + 1 ==  \\old(j);    "

//@ ensures  \\result == ii + 1;    "

//@ ensures j + \\result == ii + \\old(j);    "

//@ assignable j;    "

//@ assignable j;    "

//@ assignable \    othing;    " // ERROR

//@ code_java_math spec_java_math     "

//@ ensures j ==  \\old(j) + ii;    "

//@ assignable j;    "

//@ assignable \    othing;    " // ERROR

//@ code_java_math spec_java_math     "

//@ code_java_math spec_java_math     "

//@ ensures m.j + 1  ==  \\old(m.j) ;    "   // Line 13

//@ ensures  \\result == ii + 1;    "

//@ assignable m.j;    "

//@ assignable m.j;    "

//@ assignable \    othing;    " // ERROR

//@ code_bigint_math spec_bigint_math     "

//@ code_bigint_math spec_bigint_math     "

//@ ensures m.j + 1 ==  \\old(m.j);    "   // Line 13

//@ ensures  \\result == ii + 1;    "

//@ assignable m.j;    "

//@ assignable m.j;    "

//@ assignable \    othing;    " // ERROR

//@ code_java_math spec_java_math     "

//@ code_java_math spec_java_math     "

//@ code_java_math spec_java_math     "

//@ ensures j + 1 ==  \\old(j);    "

//@ ensures  \\result == ii + 1;    "

//@ ensures j + \\result == ii + \\old(j);    "

//@ assignable j;    "

//@ assignable j;    "

//@ assignable \    othing;    " // ERROR

//@ code_java_math spec_java_math     "

//@ ensures j ==  \\old(j) + ii;    "

//@ assignable j;    "

//@ assignable \    othing;    " // ERROR

//@ code_java_math spec_java_math     "

//@ code_java_math spec_java_math     "

//@ ensures m.j + 1  ==  \\old(m.j) ;    "   // Line 13

//@ ensures  \\result == ii + 1;    "

//@ assignable m.j;    "

//@ assignable m.j;    "

//@ assignable \    othing;    " // ERROR

//@ code_bigint_math spec_bigint_math     "

//@ code_bigint_math spec_bigint_math     "

//@ ensures m.j + 1 ==  \\old(m.j);    "   // Line 13

//@ ensures  \\result == ii + 1;    "

//@ assignable m.j;    "

//@ assignable m.j;    "

//@ assignable \    othing;    " // ERROR

//@ code_java_math spec_java_math     "

//@ code_java_math spec_java_math     "

/*@ pure */
//@ assert \\count >= 0;    " // OK

//@ assert \\count < a.length;    " // OK

//@ assert \\count >= 1;    " // BAD

//@ ghost int i = \\count;    " // OK

//@ assert \\count >= 0;    " // OK

//@ assert \\count < 2;    " // OK

//@ assert \\count == i;    " // OK

//@ ghost int i = \\count;    " + "      for (long kk: b) {    "

//@ assert \\count == i;    " // BAD

//@ loop_invariant \\count >= 0 && \\count <= a.length;    " // OK

//@ decreases a.length - \\count;    " // OK

//@ loop_invariant \\count >= 0 && \\count <= a.length;    " // OK

//@ loop_decreases a.length - \\count;    " // OK

//@ decreases a.length - \\count -1;    " // 0 on last

//@ decreases a.length - \\count -2;    " // BAD - last time through

//@ decreases \\count+10;    " // BAD - loop does not decrease variant

//@ loop_invariant \\count > 0 && \\count <= a.length;    " // BAD - first time through loop

//@ loop_invariant \\count >= 0 && \\count < a.length;    " // BAD - laswt time through loop

//@ assert \\count >= 0;    " // OK

//@ assert \\count < a.length;    " // OK

//@ ghost int i = \\count;    " // OK

//@ assert \\count >= 0;    " // OK

//@ assert \\count < 2;    " // OK

//@ assert \\count == i;    " // OK

//@ reachable;    " // knows that the loop is not

//@ loop_invariant \\values.size() == \\count;    " + "    for (Integer k: a) {    " + "    }    "

//@ loop_invariant \\values.size() == \\count;    " + "    for (Integer k: a) {    "

//@ assert \\values.size() == \\count;    " + "    }    " + "  }    "

//@ assert \\values.size() == \\count;    " + "    }    " + "  }    "

//@ assert \\count >= 1;    " // BAD

//@ public normal_behavior  ensures true;    " + "  public void m2() {    "

//@ assume a != null;     "

//@ assume it != null;     "

//@ public normal_behavior  ensures true;    " + "  public void m2bad() {    "

//@ assume a != null;     "

//@ assume it != null;     "

//@ public normal_behavior  ensures true;    "

//@ public normal_behavior  ensures true;    "

//@ assume values != null; set values.containsNull = true;     "

//@ assert values.content.owner == values;    "

//@ assume a != null;     "

//@ assume values.content.owner == values;    "

//@ assume it != null;     "

//@ assume values.content.owner == values;    "

//@ assert values.content.owner == values;    "

//@ ghost List<Map.Entry<String,String>> v = values;    "

//@ loop_invariant values == v && values.content.owner == values;     "

//@ assume k != null && \\typeof(k) <: \\type(Map.Entry<String,String>);     "

//@ public normal_behavior  ensures true;    "

//@ assume values != null; set values.containsNull = true;     "

//@ assert values.content.owner == values;    "

//@ assume a != null;     "

//@ assume values.content.owner == values;    "

//@ assume it != null;     "

//@ assume values.content.owner == values;    "

//@ assert values.content.owner == values;    "

//@ ghost List<Map.Entry<String,String>> v = values;    "

//@ assert values.content.owner == values;    "

//@ assume k != null &&  \\typeof(k) <: \\type(Map.Entry<String,String>);     "

//@ assert values.content.owner == values;    "

//@ public normal_behavior  ensures true;    "

//@ set values.containsNull = true;     "

//@ public normal_behavior  ensures true;    "

//@ set values.containsNull = true;     "

//@ ghost int i = \\count;    " // Out of scope

//@ ghost int i = \\count;    " // Out of scope

//@ set \\count = 6;    " // Syntax error

//@ ghost org.jmlspecs.lang.JMLList i = \\values;    " // Out

//@ ghost org.jmlspecs.lang.JMLList i = \\values;    " // Out

//@ set \\values = null;    " // Syntax error

//@ ghost org.jmlspecs.lang.JMLList i = \\values;    " // OK

//@ modifies \\everything;    "

//@ assume \    onnullelements(a);    "

//@ assume a.length > 1;    "

//@ assert a[0] != null;    " // OK

//@ modifies \\everything;    "

//@ assume \    onnullelements(a);    "

//@ assert a != null;    " // OK

//@ modifies \\everything;    "


//@ assume \    onnullelements(a);    "

//@ assert a == null;    " // BAD

//@ modifies \\everything;    "

//@ assume a != null && a.length > 1;    "

//@ assert a[0] != null;    " // BAD

//@ modifies \\everything;    "

//@ assume a != null && a.length == 0;    "

//@ assert \    onnullelements(a);    " // OK

//@ modifies \\everything;    "

//@ assume a != null && a.length == 0;    "

//@ assert (\\forall int i; 0<=i && i<a.length; a[i] != null);    " // OK

//@ requires \\elemtype(\\typeof(a)) == \\type(Object); modifies \\everything;    "

//@ assume a != null && a.length == 1;    "

//@ assert \    onnullelements(a);    " // OK

//@ modifies \\everything;    "

//@ assume a != null && a.length == 1;    "

//@ assume a[0] != null;    "

//@ assert \    onnullelements(a);    " // OK

//@ requires \\elemtype(\\typeof(a)) == \\type(Object); modifies \\everything;    "

//@ assume a != null && a.length == 2;    "

//@ assert \    onnullelements(a);    " // OK

//@ modifies \\everything;    "

//@ assume a != null && a.length == 2;    "

//@ assume a[0] != null;    "

//@ assume a[1] != null;    "

//@ assert \    onnullelements(a);    " // OK

//@ requires \\elemtype(\\typeof(a)) == \\type(Object); modifies \\everything;    "

//@ assume a != null && a.length == 3;    "

//@ assert \    onnullelements(a);    " // BAD

//@ requires \\elemtype(\\typeof(a)) == \\type(Object); modifies \\everything;    "

//@ assume \    onnullelements(a) && a.length == 3;    "

//@ assert \    onnullelements(a);    " // OK

//@ modifies \\everything;    "

//@ assume a != null && a.length == 3;    "

//@ assert \    onnullelements(a);    " // BAD

//@ requires i == 5;    " + "  //@ modifies \\everything;    " + "  public void m1(int i) {    "

//@ assert \    ot_modified(i);    " // OK

//@ modifies \\everything;    " + "  public void m1a(int i) {    " + "    i = 5;    "

//@ assert \    ot_modified(i);    " // BAD

//@ ghost public int gi;    "

//@ requires i == 5;    " + "  //@ modifies \\everything;    " + "  public void m2() {    "

//@ assert \    ot_modified(i);    " // OK

//@ modifies \\everything;    " + "  public void m2a() {    " + "    i = 5;    "

//@ assert \    ot_modified(i);    " // BAD

//@ requires si == 5;    " + "  //@ modifies \\everything;    " + "  public void m3() {    "

//@ assert \    ot_modified(si);    " // OK

//@ modifies \\everything;    " + "  public void m3a() {    " + "    si = 5;    "

//@ assert \    ot_modified(si);    " // BAD

//@ requires gi == 5;    " + "  //@ modifies \\everything;    " + "  public void m4() {    "

//@ set gi = 5;    " + "    //@ assert \    ot_modified(gi);    " // OK

//@ modifies \\everything;    " + "  public void m4a() {    " + "    //@ set gi = 5;    "

//@ assert \    ot_modified(gi);    " // BAD


//@ requires t != null;    "

//@ modifies \\everything;    "

//@ assert \    ot_modified(t.i);    " // OK

//@ requires t != null;    "

//@ modifies \\everything;    "

//@ assert \    ot_modified(t.i) ? true: true;    " // BAD

//@ requires t == null;    "

//@ modifies \\everything;    "

//@ assert \    ot_modified(t.i) ? true: true;    " // OK

//@ modifies \\everything;    "

//@ assert \    ot_modified(t.i) ? true: true;    " // BAD

//@ requires p != null && p != this;    "

//@ modifies \\everything;    "

//@ assert pp != p;    " // OK

//@ assert pp != this;    " // OK

//@ requires p != null && p != this;    " + "  //@ modifies \\everything;    "

//@ assert pp != p;    " // BAD

//@ requires p != null && p != this;    " + "  //@ modifies \\everything;    "

//@ assert pp != this;    " // BAD

//@ requires p != null && p != this;    " + "  //@ modifies \\everything;    "

//@ assert pp != q;    " // OK

//@ requires p != null && p != this;    "

//@ modifies \\everything;    " // Line 30                                                                                                // 30

//@ assert pp != q;    " // OK

//@ modifies \\everything;    " + "  //@ ensures \\result != null && \\fresh(\\result);    "

//@ ensures \\result != p && \\result != this;    " + "  public Object m6(Object p) {    "

//@ modifies \\everything;    " + "  //@ ensures \\result == null;    " // BAD

//@ modifies \\everything;    " + "  //@ ensures \\result != null && \\fresh(\\result);    "

//@ ensures \\result == p || \\result == this;    " // BAD

//@ modifies \\everything;    "

//@ ensures \\result != null && !\\fresh(\\result);    " // BAD

//@ ghost Object oo;    "

//@ static ghost Object soo;    "

//@ modifies \    othing;    "

//@ assert pp != o && pp != oo;    " // OK

//@ modifies \    othing;    "

//@ assert pp != o;    " // BAD

//@ modifies \    othing;    "

//@ assert pp != oo;    " // BAD

//@ modifies \\everything;    "

//@ assert pp != oo;    " // OK

//@ modifies \\everything;    "

//@ assert pp != o;    " // BAD

//@ modifies \    othing;    "

//@ assert pp != so && pp != soo;    " // OK

//@ modifies \    othing;    "

//@ assert pp != so;    " // BAD

//@ modifies \    othing;    "

//@ assert pp != soo;    " // BAD

//@ modifies \\everything;    "

//@ assert pp != soo;    " // OK

//@ modifies \\everything;    "

//@ assert pp != so;    " // OK

//@ modifies \    othing;    "

//@ assert pp != o && pp != oo;    " // BAD

//@ modifies \    othing;    " + "  public void m9b(Object p) {    " + "    Object pp = c1n(p);    "

//@ assert pp != so && pp != soo;    " // BAD

//@ modifies \    othing;    "

//@ ensures \\fresh(\\result);    "

//@ modifies \    othing;    "

//@ ensures \\result == null || \\fresh(\\result);    "

//@ modifies \    othing;    "

//@ ensures true;    "

//@ modifies \\everything;    "

//@ ensures \\result != null && \\fresh(\\result);    "

//@ modifies \\everything;    "

//@ ensures true;    "

//@ requires p != null && p != this;    " + "  //@ modifies \\everything;    "

//@ assume this.k == 0;    " + "    c1(p);    " // havoc

//@ assert this.k == 0;    " // OK

//@ requires p != null && p != this;    " + "  //@ modifies \\everything;    "

//@ assume sk == 0;    " + "    c1(p);    " // havoc

//@ assert sk == 0;    " // OK

//@ requires o != null;    " + "  //@ modifies o.*;    " + "  public void c1(TestJava o) { }     "

//@ requires o != null;    " + "  //@ modifies TestJava.*;    " + "  public void c2(TestJava o) { }     "

//@ requires p != null && p != this;    " + "  //@ modifies \\everything;    "

//@ assume k == 0;    " + "    c1(this);    " // havoc

//@ assert k == 0;    " // FAILS

//@ requires p != null && p != this;    " + "  //@ modifies \\everything;    "

//@ assume sk == 0;    " + "    c1(this);    " // havoc

//@ assert sk == 0;    " // OK

//@ requires o != null;    " + "  //@ modifies o.*;    " + "  public void c1(TestJava o) { }     "

//@ requires o != null;    " + "  //@ modifies TestJava.*;    " + "  public void c2(TestJava o) { }     "

//@ requires p != null && p != this;    " + "  //@ modifies \\everything;    "

//@ assume k == 0;    " + "    c2(this);    " // havoc

//@ assert k == 0;    " // OK

//@ requires p != null && p != this;    " + "  //@ modifies \\everything;    "

//@ assume sk == 0;    " + "    c2(this);    " // havoc

//@ assert sk == 0;    " // FAILS

//@ requires o != null;    " + "  //@ modifies o.*;    " + "  public void c1(TestJava o) { }     "

//@ requires o != null;    " + "  //@ modifies TestJava.*;    " + "  public void c2(TestJava o) { }     "

//@ modifies \\everything;    "

//@ assume k == 0;    "

//@ assert k == 0;    "

//@ requires i == 0;    "

//@ modifies \\everything;    "

//@ also requires i > 0;    "

//@ modifies \    othing;    "

//@ modifies \\everything;    " + "  public void m1a() {    " + "    //@ assume k == 0;    "

//@ assert k == 0;    " // FAILS

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "

//@ modifies \\everything;    " + "  public void m2() {    " + "    //@ assume sk == 0;    "

//@ assert sk == 0;    " + "  }    "

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "}");

//@ modifies \\everything;    " + "  public void m2a() {    " + "    //@ assume sk == 0;    "

//@ assert sk == 0;    " // FAILS

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "

//@ requires a != null && a.length > 10;    " + "  //@ modifies \\everything;    "

//@ assume a[0] == 0;    " + "    c1(1);    "

//@ assert a[0] == 0;    " + "  }    "

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "}");

//@ requires a != null && a.length > 10;    " + "  //@ modifies \\everything;    "

//@ assume a[0] == 0;    " + "    c1(0);    " // modifies

//@ assert a[0] == 0;    " // FAILS

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "

//@ requires sa != null && sa.length > 10;    " + "  //@ modifies \\everything;    "

//@ assume sa[0] == 0;    " + "    c1(1);    "

//@ assert sa[0] == 0;    " + "  }    "

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "}");

//@ requires sa != null && sa.length > 10;    " + "  //@ modifies \\everything;    "

//@ assume sa[0] == 0;    " + "    c1(0);    "

//@ assert sa[0] == 0;    " // FAILS

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "}"

//@ requires sa != null && sa.length > 10;    " + "  //@ modifies \\everything;    "

//@ assume a == \\old(a);    " + "    c1(1);    "

//@ assert a == \\old(a);    " + "  }    "

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "}");

//@ requires sa != null && sa.length > 10;    " + "  //@ modifies \\everything;    "

//@ assume a == \\old(a);    " + "    c1(0);    "

//@ assert a == \\old(a);    " // FAILS

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "

//@ modifies \\everything;    " + "  public void m6(/*@ non_null*/TestJava t) {    "

//@ assume t.k == 0;    " + "    c1(1);    " + "    //@ assert t.k == 0;    " + "  }    "

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "}");

//@ modifies \\everything;    " + "  public void m6a(/*@ non_null*/TestJava t) {    "

//@ assume t.k == 0;    " + "    c1(0);    " + "    //@ assert t.k == 0;    " // FAILS

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "

//@ modifies \\everything;    " + "  public void m7() {    " + "    c1(1);    "

//@ assert sk == \\old(sk);    " // Should be OK

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "}");

//@ modifies \\everything;    " + "  public void m7a() {    " + "    c1(0);    "

//@ assert sk == \\old(sk);    " // FAILS

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "

//@ modifies k,sk;    "

//@ assume k == 0 && sk == 0;    "

//@ assert sk == 0;    "

//@ modifies k,sk;    "

//@ assume k == 0 && sk == 0;    "

//@ assert sk == 0;    " // FAILS

//@ modifies k,sk;    "

//@ assume k == 0 && sk == 0;    "

//@ assert k == 0;    " + "  }    "

//@ modifies k,sk;    "

//@ assume k == 0 && sk == 0;    "

//@ assert k == 0;    " // FAILS

//@ requires i == 0;    "

//@ modifies k;    "

//@ also requires i > 0;    "

//@ modifies sk;    "

//@ requires i == 10;    "

//@ modifies t.k;    "

//@ also requires i == 0;    "

//@ modifies \    othing;    "

//@ requires a!=null && 0<=i && i<a.length;    "

//@ modifies a[i];    "

//@ requires b!=null && 0<=i && i<b.length;    "

//@ modifies b[i];    "

//@ modifies k,sk;    " + "  public void m3() {    " + "    //@ assume k == 0 && sk == 0;    "

//@ assert k == 0;    " + "  }    "

//@ modifies k,sk;    " + "  public void m3a() {    " + "    //@ assume k == 0 && sk == 0;    "

//@ assert k == 0;    " // FAILS

//@ requires a != null && a.length == 5;    "

//@ modifies a[0];    " + "  public void m4() {    "

//@ assume a[0] == 0 && a[1] == 1;    " + "    c3(0);    " + "    //@ assert a[1] == 1;    "

//@ requires a != null && a.length == 5;    " + "  //@ modifies a[0];    "

//@ assume a[0] == 0 && a[1] == 1;    " + "    c3(0);    "

//@ assert a[0] == 0;    " // FAILS

//@ requires i == 0;    " + "  //@ modifies k;    " + "  //@ also requires i > 0;    "

//@ modifies sk;    " + "  public void c1(int i) { }     "

//@ requires i == 10;    " + "  //@ modifies t.k;    " + "  //@ also requires i == 0;    "

//@ modifies \    othing;    " + "  public void c2(int i, TestJava t) {}    "

//@ requires a!=null && 0<=i && i<a.length;    " + "  //@ modifies a[i];    "

//@ requires b!=null && 0<=i && i<b.length;    "

//@ modifies b[i];    " + "  public void c4(int i) {}    " + "

//@ requires b != null && b.length == 5;    "

//@ modifies b[0];    "

//@ assume b[0] == 0 && b[1] == 1;    "

//@ assert b[1] == 1;    "

//@ requires b != null && b.length == 5;    "

//@ modifies b[0];    "

//@ assume b[0] == 0 && b[1] == 1;    "

//@ assert b[0] == 0;    " // FAILS

//@ requires b != null && b.length == 5;    "

//@ modifies b[0];    "

//@ assume b[0] == 0 && b[1] == 1;    "

//@ requires a != null && b != null && b.length == 5  && a.length ==5;    "

//@ modifies a[0],b[0];    "

//@ assume b[0] == 0 && b[1] == 1;    "

//@ assert b[1] == 1;    "

//@ requires i == 0;    "

//@ modifies k;    "

//@ also requires i > 0;    "

//@ modifies sk;    "

//@ requires i == 10;    "

//@ modifies t.k;    "

//@ also requires i == 0;    "

//@ modifies \    othing;    "

//@ requires a!=null && 0<=i && i<a.length;    "

//@ modifies a[i];    "

//@ requires b!=null && 0<=i && i<b.length;    "

//@ modifies b[i];    "

//@ public invariant a != null && a.length == 10;    "

/*@ assignable a; */
//@ modifies a[*];    "

//@ assume a[0] == 0 && a[2] == 2;    "

//@ assert a[0] == 0;    "

//@ modifies a[*];    "

//@ assume a[0] == 0 && a[2] == 2;    "

//@ assert a[2] == 3;    " // FAILS

//@ modifies a[2 .. 4];    "

//@ modifies a[*];    "

//@ modifies a[2 .. ];    "

//@ public invariant a != null && a.length == 10;    "

//@ assignable a;    "

//@ modifies a[*];    "

//@ assume a[0] == 0 && a[2] == 2;    "

//@ assert a[0] == 0;    " // FAILS

//@ modifies a[*];    "

//@ assume a[0] == 0 && a[2] == 2;    "

//@ assert a[2] == 2;    " // FAILS

//@ modifies a[2 .. 4];    "

//@ modifies a[*];    "

//@ modifies a[2 .. ];    "

//@ public invariant a != null && a.length == 10;    "

//@ assignable a;    "

//@ modifies a[*];    "

//@ assume a[0] == 0 && a[2] == 2;    "

//@ assert a[0] == 0;    "

//@ modifies a[*];    "

//@ assume a[0] == 0 && a[9] == 2;    "

//@ assert a[9] == 2;    " // FAILS

//@ modifies a[2 .. 4];    "

//@ modifies a[*];    "

//@ modifies a[2 .. ];    "

//@ modifies \\everything;    " + "  public void z() {    " + "  }    "

//@ modifies \\everything;    " + "  public void m1() {    " + "    //@ assume a == 15 && fa == 13;    "

//@ assert fa == 13;    " // Should be OK

//@ assert a == 15;    " // Should fail

//@ assert fsa == 13;    " // OK

//@ assert fa == 15;    " // OK

//@ modifies \\everything;    " + "  public void m1() {    " + "    //@ assert fsa == 13;    " // Should

//@ assert fa == 15;    " // Should be OK

//@ modifies \\everything;    " + "  public void m2() {    " + "    //@ assert a == 17;    " // Not

//@ modifies \\everything;    " + "  public void m3() {    " + "    //@ assert fb == 16;    " // Not

/*@ code_bigint_math*/
//@ requires i >= 0;    " + "  //@ modifies k;    " + "  //@ ensures k == 10;    "

//@ signals (Exception e) k<0; signals_only Exception;    "

//@ requires i >= 0;    " + "  //@ modifies k;    " + "  //@ ensures k == 10;    "

//@ signals (Exception e) k==-11;    " + "  //@ signals_only Exception;    "

//@ requires i >= 0;    " + "  //@ modifies k;    " + "  //@ ensures k == 10;    "

//@ signals (Exception e) k==-12;    " + "  //@ signals_only Exception;    "

//@ requires i >= 0;    " + "  //@ modifies k;    " + "  //@ ensures k == 10;    "

//@ signals (Exception e) k==-13;    " // FAILS

//@ signals_only Exception;    " + "  public void m3a(int i) {    " + "    m(0);    "

//@ requires i >= 0;    " + "  //@ modifies k;    " + "  //@ ensures \\result == 12;    "

//@ signals (Exception e) false;    " + "  public int m4(int i) {    "

//@ requires i >= 0;    " + "  //@ modifies k;    " // Line

//@ ensures false;    " + "  //@ signals (Exception e) k == -11;    "

//@ signals_only Exception;    " + "  public int m5(int i) {    "

//@ requires i >= 0;    " + "  //@ modifies k;    " + "  //@ ensures false;    "

//@ signals (Exception e) k == -12;    " // Line 60

//@ signals_only Exception;    " + "  public int m6(int i) {    "

//@ requires i == 0;    " + "  //@ modifies k;    " + "  //@ ensures k>0 && \\result == i+1;    "

//@ signals (Exception e) false;    " + "  //@ also     " + "  //@ requires i > 0;    " // Line

//@ modifies k;    " + "  //@ ensures false;    " + "  //@ signals (Exception e) k == -10-i;    "

//@ signals_only Exception;    " + "  public int m(int i) {    " + "    if (i > 0) {    "

//@ code_bigint_math     " + "public class TestJava {     "

/*@ non_null*/
//@ requires false;    " + "  public static boolean bf(boolean bb) { return true; }    "

//@ requires true;    " + "  public static boolean bt(boolean bb) { return true; }    "

//@ static public invariant b;    "

//@ requires !b;    " + "  public static boolean bq(boolean bb) { return true; }    " + "


//@ ghost nullable Object oo;    " + "  //@ public static invariant bstatic;    "

//@ public invariant binstance;    " + "  //@ public initially binstance2;    "

//@ public constraint binstance2 == \\old(binstance2);    "

//@ public static constraint bstatic == \\old(bstatic);    "

/*@ non_null*/
//@ requires true;    " + "  //@ ensures \\result;    "

//@ requires false;    " + "  //@ ensures true;    " + "  public static int i(int ii) { return 0; }    "

//@ requires ii == 10;    " + "  //@ ensures true;    "

/*@ set oo = null;*/
//@ requires ii == 10;    " + "  //@ ensures true;    "


/*@ set oo = null;*/
//@ requires ii == 10;    " + "  //@ ensures true;    "

//@ requires ii == 10;    " + "  //@ ensures true;    "

//@ requires bb;    "

//@ ensures true;    "

/*@ assume b; */
/*@assert false;*/
//@ requires bb;    " + "  //@ ensures true;    "

/*@ assume b; */
/*@assert !bb;*/
//@ requires bb;    " + "  //@ ensures true;    "

/*@ assume bb; */
/*@assert b;*/
//@ requires bb;    "

//@ ensures true;    "

/*@assume z==1 ;*/
/*@ assert false; */
//@ requires bbb;    "

/*@assume true;*/
/*@assume !b;*/
/*@ assert !bb; */
//@ requires b;    "

/*@assume true;*/
/*@assume !b;*/
/*@ assert !bb; */
//@ requires bb;    "

//@ ensures true;    "

/*@assume 0==x ;*/
/*@ assert true; */
/*@ assume !bb; assume bb;*/
/*@assume bb; assume !bb; */
/*@assume bb; assume !bb; */
/*@assume bb; assume !bb; */
/*@ assume b; */
/*@ assume !b; */
/*@ assert k == 0; */
/*@ assert k != 0; */
/*@ assert i == 10; assert k == 16; */
/*@ assert k == 10; */
/*@ assert k == 11; */
/*@ assert k == 11; */
/*@ code_java_math*/
//@ static public constraint i > \\old(i);    "

//@ modifies i;    "

//@ ensures true;    "

/*@ code_bigint_math*/
//@ modifies i;    " + "  //@ ensures i == \\old(i)+2;    "

//@ modifies i;    "

//@ ensures i == \\old(i+1);    " + "  public static void bbad() { i = i - 1; }    " + "

/*@ code_java_math spec_java_math*/
//@ modifies i;    "

//@ ensures i == \\old(i)+2;    "

//@ modifies i;    "

//@ ensures i == \\old(i+1);    "

/*@ code_java_math spec_java_math*/
//@ modifies i;    "

//@ ensures i == \\old(i)+2;    "

/*@ assert i == i@x + 1 && i == (i+1)@x; */
//@ modifies i;    "

//@ ensures i == \\old(i+1);    "

/*@ assert i == i@x + 1; */
//@ modifies i;    "

/*@ assert i == this.i@x + 1; */
//@ requires a.length > 10 && a[0] >= 0;    "

//@ modifies i;    "

/*@ assert a[0]@x > -1; */
/*@ code_java_math spec_java_math*/
/*@ assert i <<< i || true; */
/*@ assert i <<<= i || true; */
//@ requires 0<=ii && ii <=3;    "

//@ ensures ii<=0 ==> \\result ==-ii;    "

//@ requires ii > -2147483648;    " // Not using

//@ ensures \\result == -ii;    "

/*@ assert i!=0; */
/*@ assert i==0; */
//@ requires ii == 10;    " + "  //@ ensures true;    "


//@ requires ii == 10;    "

//@ ensures true;    " + "  public @NonNull Object inst2(int ii) {  return null; }    " + "

//@ requires ii == 10;    " + "  //@ ensures true;    "

//@ requires ii == 10;    "

//@ ensures true;    " + "  public          Object inst2(int ii) {  return null; }    " + "

//@ requires ii == 10;    " + "  //@ ensures true;    "

//@ requires ii == 10;    " + "  //@ ensures true;    "

//@ requires ii == 10;    " + "  //@ ensures true;    "

//@ requires ii == 10;    "

//@ ensures true;    " + "  public          Object inst2(int ii) {  return null; }    " + "

/*@ non_null*/

/*@ non_null*/

/*@ non_null*/
/*@ non_null*/
//@ ensures \\result != null;    "


//@ ensures \\result != null;    "


//@ ensures \\result != null;    "

//@ ensures \\result != null;    "



//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ requires i>0;    " + "  //@ modifies j;    "

//@ ensures j == -i;    " + "  static public void m(int i) { j = -i; }    " + "  //@ requires i>1;     "

//@ modifies j;    " + "  //@ ensures \\result == -i;    "

//@ modifies j;    "

//@ ensures \\result == j;    " + "  public int instbad(boolean b, int i) { m(i); return j; }    "

//@ modifies j;    " + "  //@ ensures \\result == i;    "

//@ requires i>0;    "

//@ modifies j;    "

//@ ensures j == -i;    "

//@ requires i>1;     "

//@ modifies j;    "

//@ ensures \\result == -i;    "

//@ modifies j;    "

//@ ensures \\result == j;    "

//@ modifies j;    "

//@ ensures \\result == i;    "

/*@ code_bigint_math*/
//@ requires i>0;    "

//@ modifies j;    "

//@ ensures j == i+1 && \\result == j;    "

//@ requires i>1;     "

//@ modifies j;    "

//@ ensures \\result == \\old(i)+1;    "

//@ requires i>1;     "

//@ modifies j;    "

//@ ensures \\result == \\old(i)+3;    "

//@ requires i>1;     "

//@ modifies j;    "

//@ ensures \\result == 3*i+4;    "

//@ ensures j == i + 1;    "

//@ requires i>1;     "

//@ modifies j;    "

//@ ensures \\result == \\old(i);    "

//@ requires i>1;     "

//@ modifies j;    "

//@ ensures \\result == \\old(i)+4;    "

//@ requires i>1;     "

//@ modifies j;    " // Line 30

//@ ensures \\result == 3*i+4;    "

//@ ensures j == i + 2;    "

/*@ code_java_math*/
//@ assignable \    othing; ensures \\result == j;    "

//@ modifies j,sj;    "

//@ ensures \\result == \\old(j);    "

//@ modifies j,sj;    "

//@ ensures \\result == j;    "

//@ modifies j,sj;    "

//@ ensures \\result == sj;    "

//@ requires o!=null && p != null && o.j == 1 && p.j == 2 && j == 3;    "

//@ modifies j,sj,o.j,o.sj,p.j,p.sj;    "

//@ ensures \\result == 6;    "

//@ requires o!=null && p != null && o.j == 1 && p.j == 2 && j == 3 && o!=this && p!= this;    "

//@ modifies j,sj,o.j,o.sj,p.j,p.sj;    "

//@ ensures \\result == 6;    "

/*@ assert (\\lbl OJ o.j) + (\\lbl PJ p.j) + (\\lbl JJ j) == 6; */
//@ requires o!=null && p != null && o.j == 1 && p.j == 2 && j == 3;    "

//@ modifies j,sj,o.j,o.sj,p.j,p.sj;    "

//@ ensures \\result == 6;    "

//@ modifies j,sj;    " + "  //@ ensures \\result == 6;    "

//@ requires o!=null && p != null && sj == 3;    "

//@ modifies j,sj,o.j,o.sj,p.j,p.sj;    "

//@ ensures \\result == 9;    "

//@ assume a != null && a.length > 2 && a[0] == 1;    "

//@ loop_invariant (\\forall int k; 0<=k && k < \\count; b ==> a[k] > 0);    "

//@ assert b ==> a[1] > 0;    " + "  }    " + "}");

/*@ loop_invariant 0<=i && i<=5 && n==i; decreases 5-i; */
/*@ assert n == 5; */
/*@ loop_invariant 0<=i && i<=5 && n==i; decreases 3-i; */
/*@ assert n == 5; */
/*@ loop_invariant 0<=i && i<5 && n==i; decreases 5-i; */
/*@ assert n == 5; */
/*@ loop_invariant 0<=i && i<=5 && n==i-1; decreases 5-i; */
/*@ loop_invariant i>0; decreases i; */
/*@ reachable; */
/*@ loop_invariant i>=0; decreases i-2; */
/*@ assert i == 0; */
/*@ loop_invariant i>=0; decreases i; */
/*@ assert i == 0; */
/*@ code_java_math */
/*@ loop_invariant  i>0; decreases i; */
/*@ assert i == 0; */
/*@ code_bigint_math */
/*@ loop_invariant i>=0; decreases i-2; */
/*@ assert i == 0; */
/*@ code_bigint_math */
/*@ loop_invariant i>=0; decreases i; */
/*@ assert i == 0; */
/*@ code_bigint_math*/
/*@ loop_invariant i<=5 && i>=0; decreases i; */
/*@ assert i == 0; */
/*@ loop_invariant i<=5 && i>=0; decreases i-2; */
/*@ assert i == 0; */
/*@ loop_invariant i<=5 && i>=0; decreases i; */
/*@ assert i == 0; */
/*@ loop_invariant i<=5 && i>0; decreases i; */
/*@ assert i == 0; */
/*@ loop_invariant i>=0; decreases i; */
/*@ assert i == 0; */
/*@ loop_invariant i>=0; decreases i; */
/*@ assert i == 0; */
/*@ loop_invariant i>=0; decreases i; */
/*@ assert i == 0; */
/*@ assert i == 6; */
/*@ assert i == 5; */
/*@ assert i == 4; */
/*@ assert i == 5; */
/*@ assert i == 6; */
/*@ assert i == 5; */
/*@ assert i == 4; */
/*@ assert i == 5; */
/*@ assert j == 5; */
/*@ assert j == 6; */
/*@ assert j == 5; */
/*@ assert j == 4; */
/*@ assert j == 6; */
/*@ assert j == 5; */
/*@ assert j == 4; */
/*@ assert j == 5; */
/*@ assert i == 12; */
/*@ assert i == 5; */
/*@ assert i == 12 && i == j; */
/*@ assert i == 5; */
/*@ assert i == -2; */
/*@ assert i == 5; */
/*@ assert i == -2 && i == j; */
/*@ assert i == 5; */
/*@ assert i == 5*7; */
/*@ assert i == 5; */
/*@ assert i == 5*7 && i == j; */
/*@ assert i == 5; */
/*@ assert i == 5/7; */
/*@ assert i == 5; */
/*@ assert i == 5/7 && i == j; */
/*@ assert i == 5; */
//@ requires i > -2147483648;    "

/*@ assert j >= 0; */
//@ requires i > -2147483648;    "

/*@ assert j == -1; */
/*@ assume i > 0; */
/*@ assert (\\lblpos ISP i>0); */
/*@ assume i > 0; */
/*@ assert (\\lblneg ISN i<0); */
/*@ assume i > 0; */
/*@ assert !(\\lblneg ISN2 i>0); */
/*@ assume i > 0; */
/*@ assert (\\lblpos ISP i<0); */
/*@ assume i > 0; */
/*@ assert !(\\lblpos ISP2 i>0); */
/*@ assert o != oo;*/
/*@ assert o == oo;*/
/*@ assert o != null;*/
/*@ assert o == null;*/
/*@ assert o != oo;*/
/*@ assert o == oo;*/
/*@ assert o != null; assert o.length == 5; */
/*@ assert o.length == 6;*/
/*@non_null*/
/*@ assert a.length >= 0;*/
/*@ assert o != oo;*/
/*@ assert o == oo;*/
/*@ assert o.length == 3; assert o[1] == 11;*/
/*@ assert o.length == 4; */
/*@ assert o.length == 3; assert o[1] == 10;*/
/*@ assert o != null; assert o.length == 3; assert o[1] == 11;*/
/*@ assert o.length == 3; assert o[1] != null; assert o[1].length == 3; assert o[1][2] == 14; assert o[0] != null; assert o[0].length == 2; assert o[0][1] == 11; */
/*@ assert o.length == 3; assert o[1] != null; assert o[1].length == 3; assert o[1][2] == 14; assert o[0] != null; assert o[0].length == 2; assert o[0][1] == 11; */
/*@ assert o.length == 3; assert o[1] == null; assert o[2] != null; assert o[2].length == 1; assert o[2][0] == 15; */
/*@ assert oo[0] != oo[1]; */
/*@ assert o != oo;*/
/*@ assert o == oo;*/
/*@ assert o.length == 5; assert o[1].length == 3; */
/*@ assert o.length == 6;*/
/*@ assert o[1].length == 4;*/
/*@non_null*/
/*@ assert a.length >= 0;*/
/*@ assert o.length == 3; */
/*@ assert o.length == 2; */
/*@ assert o[1][2] == 14; */
/*@ assert o[2].length == 1; */
/*@ assert o[0].length == 2; */
/*@ assert o != null; assert o.length == 5; assert o[1] == null; */
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assume a[1] == 2; */
/*@ assert a[1] == 2; */
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assume a[1] == 2; */
/*@ assert a[1] == 3; */
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assume a[1] == 2; */
/*@ assert a[1] == 3; */
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assume a[1] == 2; */
/*@ assert a[1] == 4; */
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assume a[0] == 2; */
/*@ assert a[0] == 2; */
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assume a[0] == 2; */
/*@ assert a[0] == 4; */
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assume a[1] == 2; */
/*@ assert a[1] == 3; */
/*@ assert a[1] == 4; */
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assume a[1] == 2; */
/*@ assert a[1] == 3; */
/*@ assert a[1] == 5; */
/*@non_null*/
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assert a[0] == b[0]; */
/*@non_null*/
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assert a[0] != b[0]; */
/*@non_null*/
/*@non_null*/
/*@ assume b.length == 10 && a.length == 10;*/
/*@ assert b[0] == 7; */
/*@non_null*/
/*@non_null*/
/*@ assume b.length == 10 && a.length == 10;*/
/*@ assert b[0] == 8; */
/*@non_null*/
/*@non_null*/
/*@ assume b.length == 10 && a.length == 12;*/
/*@ assert b != null; assert a != null; assert b.length == 12; assert a.length == 12; */
/*@non_null*/
/*@assume a.length == 10; assume a[1] != null; assume a[1].length == 5; */
/*@ assume a[1][2]; */
/*@ assert a[1][2]; */
/*@non_null*/
/*@assume a.length == 10; assume a[1] != null; assume a[1].length == 5; */
/*@ assume a[1][2]; */
/*@ assert !a[1][2]; */
/*@non_null*/
/*@assume a.length == 10; assume a[1] != null; assume a[1].length == 5; */
/*@ assume a[1][2]; */
/*@ assert !a[1][2]; */
/*@non_null*/
/*@assume a.length == 10; assume a[1] != null; assume a[1].length == 5; */
/*@ assume a[1][2]; */
/*@ assert a[1][3]; */
/*@non_null*/
/*@assume a.length == 10; assume a[1] != null; assume a[1].length == 5; */
/*@ assume a[1][2]; */
/*@ assert a[0][2]; */
/*@non_null*/
/*@assume a.length == 10; assume a[1] != null; assume a[1].length == 5; */
/*@ assume a[1][2]; assume a[0] != null; */
/*@ assert a[0][2]; */
/*@non_null*/
/*@assume a.length == 10; assume a[1] != null; assume a[1].length == 5; */
/*@ assume a[1][2]; assume a[0] != null; assume a[0].length > 5; */
/*@ assert a[0][2]; */
/*@non_null*/
/*@assume a.length == 10; assume a[1] != null; assume a[0] != null; assume a[1].length == 5; assume a[0].length == 3; */
/*@ assume a[0][0]; */
/*@ assert a[0][0]; */
/*@non_null*/
/*@assume a.length == 10; assume a[1] != null; assume a[0] != null; assume a[1].length == 5; assume a[0].length == 3; */
/*@ assume a[0][0]; */
/*@ assert !a[0][0]; */
/*@non_null*/
/*@assume a.length == 10; assume a[1] != null; assume a[1].length == 5; */
/*@ assert a[0][3] == a[1][3]; */
/*@non_null*/
/*@assume a.length == 10; assume a[1] != null; assume a[1].length == 5; */
/*@ assert a[0][3] != a[1][3]; ; */
/*@non_null*/
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assert a[0] == b[0]; */
/*@non_null*/
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assert a[0] != b[0]; */
/*@non_null*/
/*@non_null*/
/*@ assume b.length == 10 && a.length == 10 && b[0] != null && a[0] != null && b[0].length == 5 && a[0].length==6;*/
/*@ assert !b[0][0]; */
/*@non_null*/
/*@non_null*/
/*@ assume b.length == 10 && a.length == 10 && b[0] != null && a[0] != null && b[0].length == 5 && a[0].length==6;*/
/*@ assert b[0][0]; */
/*@non_null*/
/*@non_null*/
/*@ assume b.length == 10 && a.length == 12;*/
/*@ assert b != null; assert a != null; assert b.length == 12; assert a.length == 12; */
/*@ nullable_by_default */
//@ public static invariant t != null;     "

/*@non_null*/
/*@ assume t.f == 2; */
/*@ assert t.f == 2; */
/*@non_null*/
/*@ assume t.f == 2; */
/*@ assert t.f == 3; */
/*@non_null*/
/*@ assume t.f == 2; */
/*@ assert t.f == 3; */
/*@non_null*/
/*@ assume t.f == 2; */
/*@ assert t.f == 4; */
/*@non_null*/
/*@ assume t.g == 2; */
/*@ assert t.g == 2; */
/*@non_null*/
/*@ assume t.g == 2; */
/*@ assert t.g == 4; */
/*@non_null*/
/*@ assume t.f == 2; */
/*@ assert t.f == 3; */
/*@ assert t.f == 4; */
/*@non_null*/
/*@ assume t.f == 2; */
/*@ assert t.f == 3; */
/*@ assert t.f == 5; */
/*@non_null*/
/*@non_null*/
/*@ assert a.f == b.f; */
/*@non_null*/
/*@non_null*/
/*@ assert a.f != b.f; */
/*@non_null*/
/*@non_null*/
/*@ assert b.f == 7; */
/*@non_null*/
/*@non_null*/
/*@ assert b.f == 8; */
/*@non_null*/
/*@non_null*/
/*@ assert a.sf == b.sf; */
/*@non_null*/
/*@non_null*/
/*@ assert a.sf != b.sf; */
/*@non_null*/
/*@non_null*/
/*@ assert 3 == b.sf; */
/*@non_null*/
/*@non_null*/
/*@ assert 3 != b.sf; */
/*@non_null*/
/*@ assert f == this.f; */
/*@ assert a == this ==> a.f == f; */
/*@non_null*/
/*@ assert f == this.f; */
/*@ assert a.f == f; */
/*@non_null*/
/*@ assert sf == this.sf; */
/*@ assert a.sf == sf; */
/*@ assume i>=-1 && i <=1; */
/*@ assert j!=0; */
/*@ assume i>=-1 && i <=1; */
/*@ assert j==1; */
/*@ assume i>=-1 && i <=1; */
/*@ assert j>0; */
/*@ assume i>=-1 && i <=1; */
/*@ assert i==0 ==> j==-1; */
/*@ assume i>=-1 && i <=1; */
/*@ assert j>=0; */
/*@ assume i>=-1 && i <=1; */
/*@ assert j>0; */
/*@ assume i>=-1 && i <=1; */
/*@ assert j>=0; */
//@ ensures i == 2;    "

//@ ensures i == 1;    "

//@ public exceptional_behavior requires b;  signals (Exception e) true; signals (RuntimeException e) true;    "

//@ also    " + "//@ public normal_behavior requires !b; ensures true;    "

//@ requires k < 0;    " + "//@ ensures true;    " + "//@ also    " + "//@ requires k > 0;    "

//@ ensures \\result == 1;    " + "public int m1() {    " + "    int i = 1;    " + "    try {    "

//@ assert e != null;    " + "        i = 2;    " + "    }    "

//@ requires k < 0;    " + "//@ ensures true;    " + "//@ also    " // Line

//@ requires k > 0;    " + "//@ ensures \\result == 1;    " + "public int m2() {    " + "    int i = 1;    "

//@ assert e != null;    " + "        i = 1;    " // Line

//@ requires i > 0;    " + "  //@ ensures i > 0;    "

/*@ assert a*2 == a + a; */
/*@ assert a * b ==
                // a *(b-1) + a; */
/*@ assert (2*a)/2 == a; */
/*@ assert a >= 0 ==> (a%3) < 3; */
/*@ assert a >= 0 ==> (a%3) >= 0; */
/*@ assert (a >= 0
                // && b > 0) ==> (a%b) >= 0; */
/*@ assert (a >= 0
                // && b > 0) ==> ((a*b)%b) == 0; */
/*@ assert (a >= 0 ) ==> ((5*a)%5) == 0; */
//@ requires i < 1000; ensures \\result == i+1;    "

//@ pure     "

/*@ assume a < 100; */
/*@ assert k == m(a); */
/*@ assume a < 100; */
/*@ assert k == m(a); */
/*@ assume a < 100; */
/*@ assert k == m(a) + m(a); */
/*@ assume a < 100; */
/*@ assert k == 1 + m(a) + m(a); */
/*@ assume a < 100; */
/*@ assert k == m(m(a+1)); */
/*@ assume a < 100; */
/*@ assert k == m(m(a+1)); */
//@ requires i < 1000; ensures \\result == i+1;    "

//@ pure     "

/*@ assume a < 100; */
/*@ assert k == m(a); */
/*@ assume a < 100; */
/*@ assert k == m(a); */
/*@ assume a < 100; */
/*@ assert k == m(a) + m(a); */
/*@ assume a < 100; */
/*@ assert k == 1 + m(a) + m(a); */
/*@ assume a < 100; */
/*@ assert k == m(m(a+1)); */
/*@ assume a < 100; */
/*@ assert k == m(m(a+1)); */
/*@ code_bigint_math*/
//@ ensures \\result == z+1;    " + "  //@ pure     "

/*@ assert k == m(); */
/*@ assert k == m(); */
/*@ assert k == m() + m(); */
/*@ assert k == 1 + m() + m(); */
/*@ assert k == m(); */
/*@ assert k == m(); */
/*@ code_bigint_math*/
//@ ensures \\result == z+1;    "

//@ pure     "

/*@ assert k == m(); */
/*@ assert k == m(); */
/*@ assert k == m() + m(); */
/*@ assert k == 1 + m() + m(); */
//@ ensures \\result > 0;    "

//@ also    "

//@ ensures \\result > ii;    "

/*@ code_bigint_math*/
//@ also public normal_behavior    "

//@ ensures \\result == i+1;    "

//@ pure    "

//@ requires a >= 0;    "

//@ ensures \\result == a+1;    "

//@ requires iii > 0;    " + "  //@ ensures \\result > 0;    " + "  abstract public int m(int iii);    "

//@ also    "

//@ ensures \\result > ii;    " + "  abstract public int m(int ii);    " + "}    "

/*@ code_bigint_math*/
//@ also    "

//@ ensures \\result == i+1;    " + "  //@ pure    " + "  public int m(int i) { return i+1; }    "

//@ ensures \\result == a+1;    " + "  public int n1(int a) { return m(a); }    "

//@ requires iii > 0;    " + "  //@ ensures \\result > 0;    " + "  abstract public int m(int iii);    "

//@ also    "

//@ requires ii > 0;    " + "  //@ ensures \\result > ii;    " + "  abstract public int m(int ii);    "

/*@ code_bigint_math*/
//@ also    "

//@ requires i > 0;    " + "  //@ ensures \\result == i+1;    " + "  //@ pure    "

//@ requires iii == 1;    "

//@ ensures \\result == iii;    "

//@ also    "

//@ requires ii == 2;    "

//@ ensures \\result == ii;    "

/*@ code_bigint_math*/
//@ also    "

//@ requires i == 3;    "

//@ ensures \\result == i;    "

//@ pure    "

//@ requires a >= 1 && a <= 3;    "

//@ ensures \\result == a;    "

//@ ensures \\result == a;    "

//@ requires 0<=ii && ii <=3;    "

//@ ensures \\result < 0;    " + "  public static int m(int ii) {     "

//@ requires ii == 2;    " + "  //@ ensures \\result == 0;    "

//@ ensures is == 6;    "

//@ ensures \\result == 1;    " + "  public static int m4(int ii) {     " + "    try { ii = 0;     "

//@ assert c == 1;     " + "    return c;     " + "  }    " + "

//@ ghost int d = c+1;    " + "    //@ assert d + c == 9;     " + "    return c;     "

//@ ghost int d = c+1;    " + "    //@ assert d + c == 10;     " + "    return c;     "

//@ ghost int d = c+1;    " + "    //@ set d = 10;    " + "    //@ assert d + c == 14;     "

//@ ghost int d = c+1;    " + "    //@ set d = 10;    " + "    //@ assert d + c == 15;     "

//@ ghost int d = c+1;    " + "    //@ debug d = 10;    " + "    //@ assert d + c == 14;     "

//@ ghost int d = c+1;    " + "    //@ debug d = 10;    " + "    //@ assert d + c == 15;     "

/*@ nullable_by_default */
/*@non_null*/
//@ requires o != null;    "

//@ public normal_behavior  ensures \\result == (oo != null);    "

/*@ nullable_by_default */
/*@non_null*/
//@ requires o != null;    " + "  public static void m2(TestJava o) {     " + "    int i = o.z();     "

//@ public normal_behavior  ensures \\result == (oo != null);    "

//@ signals_only \    othing;      public int z() { return 0; }    " + "

/*@non_null*/
//@ requires o != null;    " + "  public static void m2(TestJava o) {     " + "    int i = o.z();     "

//@ public normal_behavior  ensures \\result == (oo != null);    "

//@ signals_only \    othing;      public static int z() { return 0; }    " + "}");

/*@ nullable_by_default */
/*@ code_java_math spec_java_math*/
//@ requires a != null;    "

//@ requires a != null;    "

//@ assume a.length == 1;     "

/*@ non_null*/
/*@ non_null*/
/*@ nullable_by_default */
//@ assume o.j == 1;     " + "  }    "

/*@non_null*/
//@ assume o.j == 1;     " + "  }    "

//@ requires o != null;    " + "  public static void m2(TestJava o) {     "

//@ assume o.j == 1;     " + "  }    " + "  public static void m3(TestJava o) {     "

//@ assume o != null && o.j == 1;     " + "  }    " + "  public static void m4(TestJava o) {     "

//@ assume o == null || o.j == 1;     " + "  }    " + "  public static void m5(TestJava o) {     "

//@ assume o != null ==> o.j == 1;     " + "  }    " + "

/*@ nullable_by_default */
//@ assume o.j == 1;     " + "  }      "

//@ assume a[0] == 1;     " + "  }    "

//@ requires a != null;    " + "  public static void m2(int[] a) {     "

//@ assume a[-1] == 1;     " + "  }    " + "  //@ requires a != null;    "

//@ assume a.length == 1;     "

//@ assume a[1] == 1;     " + "  }    " + "  public static void m4(int i, int j) {     "

//@ assume i/j == 4;     " + "  }    " + "  public static void m5(int i, int j) {     "

//@ assume i%j == 4;     " + "  }    " + "  public static void m6(RuntimeException r) {     "

//@ assume ((Exception)t) != null ? true : true;     " // OK

//@ assume ((RuntimeException)t) != null ? true : true ;     " + "  }    "

/*@ non_null*/
//@ assume ((Exception)t) != null ? true : true;     " + "  }    "

/*@ non_null*/
//@ assume ((RuntimeException)t) != null ? true : true ;     " + "  }    " + "

/*@ nullable_by_default */
//@ assume o.j == 1;     "

//@ assert o.j == 1 ? true : true;     "

//@ ghost int i = o.j;     "

//@ ghost int i; debug i = o.j;     "

//@ requires o.j == 1;    "

//@ ensures t.j == 1 ? true : true;    "

//@ ghost int i; set i = o.j;     "

/*@ nullable_by_default */
//@ assume o.j == 1;     "

/*@ nullable_by_default */
//@ public invariant t.j ==1 ? true: true;    " + "

/*@ nullable_by_default */
//@ public initially t.j ? true : true;    " + "

/*@ nullable_by_default */
//@ public constraint t.j ==1 ? true: true;    " + "

/*@ nullable_by_default */
//@ assert i == 1;    "

//@ assert i == 2;    "

//@ assert i == 2;    " + "  }    " + "  public void mp() {    "

//@ assert i == 2 && j == 3;    " + "  }    " + "  public void ma() {    " + "    int i = 0;    "

//@ assert i == 1;    " + "  }    " + "  public void m1(int k) {    "

//@ assume k == 0;     " + "    try {    " + "      try {    "

//@ assert i == 2 && j == 50;    "

//@ assume k == 0;     " + "    try {    " + "    try {    " + "      try {    "

//@ assert i == 2 && j == 50;    " + "    }    "

//@ assert i == 0;    " + "  }    "

//@ assert i == 0;    "

//@ public normal_behavior     "

//@   requires i != 1 & i != 2;    "

//@   ensures \\result == 0;    "

//@ also public exceptional_behavior     "

//@   requires i == 2 && ee != null;     "

//@   signals (ArrayIndexOutOfBoundsException ex) true;     "

_by_default     "

//@ public normal_behavior     "

//@   requires i != 1 & i != 2;    "

//@   ensures \\result == 0;    "

//@ also public exceptional_behavior     "

//@   requires i == 2;     "

//@   signals (ArrayIndexOutOfBoundsException ex) true;     "

//@ public normal_behavior     "

//@   requires e != null & ee != null & ae != null;    "

//@   requires i != 1 & i != 2;    "

//@   ensures \\result == 0;    "

//@ also public exceptional_behavior     "

//@   requires e != null & ee != null & ae != null;    "

//@   requires i == 2;     "

//@   signals (ArrayIndexOutOfBoundsException ex) true;     "

/*@non_null*/
//@ assume \\typeof(o) == \\type(Object);    "

//@ assert \\typeof(o) == \\typeof(o);    "

//@ assert \\typeof(o) == \\type(Object);    "

//@ assert \\typeof(o) <: \\type(Object);    "

//@ assert \\typeof(o) <:= \\type(Object);    "

/*@non_null*/
//@ assume \\typeof(o) == \\type(Object);    "

//@ assert \\typeof(o) != \\type(Object);    "

/*@non_null*/
//@ assume \\typeof(o) == \\type(Object);    "

//@ assert \\typeof(o) == \\type(Object);    "

/*@non_null*/
//@ assume \\typeof(o) == \\type(Object);    "

//@ assert \\typeof(o) == \\type(TestJava);    "

/*@non_null*/
//@ assume \\typeof(o) == \\type(Object);    "

//@ assert \\type(TestJava) <: \\typeof(o);    "

//@ assert \\type(TestJava) <:= \\typeof(o);    "

/*@non_null*/
//@ assume \\typeof(o) == \\type(TestJava);    "

//@ assert \\typeof(o) <: \\type(Object);    " + "  }    "

/*@non_null*/
//@ assert \\typeof(o) <: \\type(Object);    " + "  }    " + "}");

/*@non_null*/
//@ assert JML.erasure(\\typeof(o)) == o.getClass();    "

//@ requires i >= 0;    " + "  //@ ensures i>0;    " + "  //@ signals (Exception e) i == 0;    "

//@ requires i >= 0;    " + "  //@ ensures i>0;    " + "  //@ signals (Exception e) i == 1;    " // FAILS

//@ requires i >= 0;    " + "  //@ ensures i>0;    " + "  //@ signals (Exception e) i == 0;    " // OK

//@ requires i >= 0;    " + "  //@ ensures i>0;    " + "  //@ signals (RuntimeException e) i == 1;    " // FAILS

//@ requires i >= 0;    " + "  //@ ensures i>0;    " + "  //@ signals (Exception e) i == 0;    "

//@ requires i >= 0;    "

//@ ensures i>0;    " + "  //@ signals (Exception e) i == 1;    " // FAILS

//@ requires i >= 0;    " + "  //@ ensures i>0;    " + "  //@ signals (RuntimeException e) i == 1;    " // OK

//@ signals_only java.io.IOException;    " // FAILS

//@ signals_only \    othing;    " // FAILS

//@ signals_only Exception;    " // OK

//@ public constraint i > \\old(i) for m1();    " + "  public void m1() {    " + "  }    "

//@ public constraint i > \\old(i) for ! m1();    " + "  public void m1() {    " + "  }    "

//@ public constraint i > \\old(i) for \\everything;    " + "  public void m1() {    "

//@ public constraint i > \\old(i) for !\    othing;    " + "  public void m1() {    " + "  }    "

//@ public constraint i > \\old(i) for \    othing;    " + "  public void m1() {    " + "  }    "

//@ public constraint i > \\old(i) for !\\everything;    " + "  public void m1() {    "

//@ public constraint i > \\old(i);    " + "  public void m1() {    " + "  }    "

//@ public constraint i > \\old(i) for m1(), m1(int);    " + "  public void m1() {    "

//@ public constraint i > \\old(i) for m1(), m1(int);    " + "  public static void m1() {    "

//@ public constraint i > \\old(i) for ! m1(), m1(int);    " + "  public void m1() {    "

//@ public constraint i > \\old(i) for TestJava();    " + "  public TestJava() {    " + "  }    " + "

//@ public constraint i > \\old(i);    " + "  public TestJava() {    " + "  }    " + "}");

//@ public static constraint i > \\old(i) for TestJava();    " + "  public TestJava() {    "

//@ public static constraint i > \\old(i);    " + "  public TestJava() {    " + "  }    " + "

//@ ghost static public int i = 0;    "

//@ public static constraint i > \\old(i);    " + "}    "

//@ ghost static public int i = 0;    "

//@ public constraint i > \\old(i);    " + "}    " + "public class TestJava implements A {     "

//@ normal_behavior     "

//@ ensures \\result == (i > 0 && i < 10);    "

//@ pure    "

//@ model public boolean m(int i);    "

//@ assert (\\forall int k; 3<k && k <7; m(k));    "

//@ assert (\\forall int k; 3<k && k <7; m(k-1));    "

//@ assert !(\\forall int k; -3<k && k <7; m(k));    "

//@ normal_behavior     "

//@ ensures \\result == (i > 0 && i < 10);    "

//@ pure function    "

//@ model public static boolean m(int i);    "

//@ pure    "

//@ assert !(\\forall int k; 3<k && k <11; m(k));    "

//@ normal_behavior     "

//@ ensures \\result == (i > 0 && i < 10);    "

//@ pure    "

//@ model public boolean m(int i);    "

//@ pure    "

//@ assert !(\\forall int k; 3<k && k <11; m(k));    "

/*@ spec_public */
//@ assignable \\everything;     "


/*@ spec_public */
//@ assignable \\everything;     "


/*@ spec_public */
/*@ spec_public */
//@ assignable \\everything;     "


//@ assert array.length >= 0;     "

//@ assert array.length <= Integer.MAX_VALUE;     "

//@ requires k >= 0;    "

//@ assert array.length >= 0;     "

//@ assert array.length <= Integer.MAX_VALUE;     "

//@ assert array.length == k;     "

//@ assert array.length >= 0;     "

//@ assert array.length <= Integer.MAX_VALUE;     "

//@ assert array.length >= 0;     "

//@ assert array.length <= Integer.MAX_VALUE;     "

//@ requires (\\forall int i; 0 <= i && i < args.length; args[i] >= 0);    "

//@ requires (\\forall int i; 0 <= i && i < args.length; args[i] >= 0); requires n == -2;    "

//@ requires (\\forall int i; 0 <= i && i < args.length; args[i] >= 0);    "

//@ requires (\\forall int i; 0 <= i && i < args.length; args[i] >= 0);"

//@ assert (\\lbl I i) + \\lbl(J j) == 0;     "

//@ assert (\\lbl I i) + \\lbl(J,j) == 0;     "

//@ nullable_by_default     "

/*@ requires o != null;     "
                        + "      ensures \\result == (j>=0);     "
                        + "     pure function */
//@ signals (NullPointerException e) positive(null,j);     "

//@ signals (NegativeArraySizeException e) positive(null,j);     "

//@ ensures j >= 0;     "

//@ ensures ii == 19; static_initializer "

//@ public final invariant ii == 19;     "

//@ public normal_behavior ensures \\result == 10 + 9; pure    "

//@ public normal_behavior ensures \\result == 19; pure    "

//@ ensures ii == 19 && jj == 21; static_initializer "

//@ public final invariant ii == 19;     "

//@ public normal_behavior ensures \\result == 10 + 9; pure    "

//@ public normal_behavior ensures \\result == 21; pure    "

//@ ensures ii == mm(); static_initializer "

//@ public final invariant ii == 19;     "

//@ public normal_behavior ensures \\result == 10 + 9; pure    "

//@ public normal_behavior ensures \\result == 19; pure    "

//@ public final invariant ii == 19;     "

//@ public normal_behavior ensures \\result == 10 + 9; pure    "

/*@ spec_public */
//@ public normal_behavior     "

//@   ensures num == 10;     "

//@   ensures A.bit == 1;     "

//@   ensures B.bit == 2;     "

//@ static_initializer     "

/*@ spec_public */
/*@ spec_public */
//@ public normal_behavior     "

//@   ensures num == 10;     "

//@   ensures A.bit == 1;     "

//@   ensures B.bit == 2;     "

//@ static_initializer     "

//@ public normal_behavior     "

//@   requires \    onnullelements(arr);     "

//@ public normal_behavior     "

//@   requires true;     "

//@ show i, j+1;    "

//@ show k;    "

//@ assert k > 0;    "

//@ show m,k;    "

//@ assert m > 0;    "

//@ public normal_behavior     "

//@   requires true;     "

//@ show i;    "

//@ public normal_behavior     "

//@   requires true;     "

//@ show i;    "

//@ show     "

//@ show i i;    "

//@ show;    "

//@ show i    "

//@ show %;    "

//@ public normal_behavior     "

//@   requires k != null && \    onnullelements(k) && \\elemtype(\\typeof(k)) <: \\type(Key);     "

//@ assert kk != null;    "

//@ assert \    onnullelements(kk);    "

//@ assert \\elemtype(\\typeof(kk)) == \\type(Key);    "

//@ public normal_behavior     "

//@   requires k != null && \    onnullelements(k) && \\elemtype(\\typeof(k)) <: \\type(Key);     "

//@ assert kk != null;    "

//@ assert \    onnullelements(kk);    "

//@ assert \\elemtype(\\typeof(kk)) == \\type(Key);    "

//@ ghost int k = 1;    "

//@ ghost int k = 2;    "

//@ ghost int i = 2;    "

//@ assert 0 <= i < 10 < 12;    "

//@ set i = 10;    "

//@ assert !(0 <= i < 10);    "

//@ assert 0 <= i < 11 == 2 <= i <= 12;    "

//@ assert 11 >= i+1 > 1 == 12 >= i > 2;    "

//@ assert 11 >= i+1 < 12;    "

//@ assert 11 >= i+1 < 12 == true;    "

//@ assert 11 >= i+1 > 1 != 12 <= i <= 22;    "

//@ signals_only \    othing;    "


//@ allow NullPointerException;     "


//@ forbid NullPointerException;     "



//@ ignore NullPointerException;     "



//@ ignore java.lang.XX;     "


//@ allow NullPointerException;     "

//@ forbid NullPointerException;     "

//@ forbid X;     "

//@ forbid ;     "

//@ forbid NullPointerException     "

//@ forbid NullPointerException, ArrayIndexOutOfBoundsException;     "

//@ forbid NullPointerException ArrayIndexOutOfBoundsException;     "

//@ forbid NullPointerException; allow NullPointerException     "

//@ ignore NullPointerException; allow NullPointerException     "

//@ ignore NullPointerException; forbid NullPointerException     "

//@ forbid java.lang.NullPointerException     "

//@ forbid java.lang.     "

/*@ pure */
//@ assert \\count >= 0;    " // OK

//@ assert \\count < a.length;    " // OK

//@ assert \\count >= 1;    " // BAD

//@ ghost int i = \\count;    " // OK

//@ assert \\count >= 0;    " // OK

//@ assert \\count < 2;    " // OK

//@ assert \\count == i;    " // OK

//@ ghost int i = \\count;    " + "      for (long kk: b) {    "

//@ assert \\count == i;    " // BAD

//@ loop_invariant \\count >= 0 && \\count <= a.length;    " // OK

//@ decreases a.length - \\count;    " // OK

//@ loop_invariant \\count >= 0 && \\count <= a.length;    " // OK

//@ loop_decreases a.length - \\count;    " // OK

//@ decreases a.length - \\count -1;    " // 0 on last

//@ decreases a.length - \\count -2;    " // BAD - last time through

//@ decreases \\count+10;    " // BAD - loop does not decrease variant

//@ loop_invariant \\count > 0 && \\count <= a.length;    " // BAD - first time through loop

//@ loop_invariant \\count >= 0 && \\count < a.length;    " // BAD - laswt time through loop

//@ assert \\count >= 0;    " // OK

//@ assert \\count < a.length;    " // OK

//@ ghost int i = \\count;    " // OK

//@ assert \\count >= 0;    " // OK

//@ assert \\count < 2;    " // OK

//@ assert \\count == i;    " // OK

//@ reachable;    " // knows that the loop is not

//@ loop_invariant \\values.size() == \\count;    " + "    for (Integer k: a) {    " + "    }    "

//@ loop_invariant \\values.size() == \\count;    " + "    for (Integer k: a) {    "

//@ assert \\values.size() == \\count;    " + "    }    " + "  }    "

//@ assert \\values.size() == \\count;    " + "    }    " + "  }    "

//@ assert \\count >= 1;    " // BAD

//@ public normal_behavior  ensures true;    " + "  public void m2() {    "

//@ assume a != null;     "

//@ assume it != null;     "

//@ public normal_behavior  ensures true;    " + "  public void m2bad() {    "

//@ assume a != null;     "

//@ assume it != null;     "

//@ public normal_behavior  ensures true;    "

//@ public normal_behavior  ensures true;    "

//@ assume values != null; set values.containsNull = true;     "

//@ assert values.content.owner == values;    "

//@ assume a != null;     "

//@ assume values.content.owner == values;    "

//@ assume it != null;     "

//@ assume values.content.owner == values;    "

//@ assert values.content.owner == values;    "

//@ ghost List<Map.Entry<String,String>> v = values;    "

//@ loop_invariant values == v && values.content.owner == values;     "

//@ assume k != null && \\typeof(k) <: \\type(Map.Entry<String,String>);     "

//@ public normal_behavior  ensures true;    "

//@ assume values != null; set values.containsNull = true;     "

//@ assert values.content.owner == values;    "

//@ assume a != null;     "

//@ assume values.content.owner == values;    "

//@ assume it != null;     "

//@ assume values.content.owner == values;    "

//@ assert values.content.owner == values;    "

//@ ghost List<Map.Entry<String,String>> v = values;    "

//@ assert values.content.owner == values;    "

//@ assume k != null &&  \\typeof(k) <: \\type(Map.Entry<String,String>);     "

//@ assert values.content.owner == values;    "

//@ public normal_behavior  ensures true;    "

//@ set values.containsNull = true;     "

//@ public normal_behavior  ensures true;    "

//@ set values.containsNull = true;     "

//@ ghost int i = \\count;    " // Out of scope

//@ ghost int i = \\count;    " // Out of scope

//@ set \\count = 6;    " // Syntax error

//@ ghost org.jmlspecs.lang.JMLList i = \\values;    " // Out

//@ ghost org.jmlspecs.lang.JMLList i = \\values;    " // Out

//@ set \\values = null;    " // Syntax error

//@ ghost org.jmlspecs.lang.JMLList i = \\values;    " // OK

//@ modifies \\everything;    "

//@ assume \    onnullelements(a);    "

//@ assume a.length > 1;    "

//@ assert a[0] != null;    " // OK

//@ modifies \\everything;    "

//@ assume \    onnullelements(a);    "

//@ assert a != null;    " // OK

//@ modifies \\everything;    "


//@ assume \    onnullelements(a);    "

//@ assert a == null;    " // BAD

//@ modifies \\everything;    "

//@ assume a != null && a.length > 1;    "

//@ assert a[0] != null;    " // BAD

//@ modifies \\everything;    "

//@ assume a != null && a.length == 0;    "

//@ assert \    onnullelements(a);    " // OK

//@ modifies \\everything;    "

//@ assume a != null && a.length == 0;    "

//@ assert (\\forall int i; 0<=i && i<a.length; a[i] != null);    " // OK

//@ requires \\elemtype(\\typeof(a)) == \\type(Object); modifies \\everything;    "

//@ assume a != null && a.length == 1;    "

//@ assert \    onnullelements(a);    " // OK

//@ modifies \\everything;    "

//@ assume a != null && a.length == 1;    "

//@ assume a[0] != null;    "

//@ assert \    onnullelements(a);    " // OK

//@ requires \\elemtype(\\typeof(a)) == \\type(Object); modifies \\everything;    "

//@ assume a != null && a.length == 2;    "

//@ assert \    onnullelements(a);    " // OK

//@ modifies \\everything;    "

//@ assume a != null && a.length == 2;    "

//@ assume a[0] != null;    "

//@ assume a[1] != null;    "

//@ assert \    onnullelements(a);    " // OK

//@ requires \\elemtype(\\typeof(a)) == \\type(Object); modifies \\everything;    "

//@ assume a != null && a.length == 3;    "

//@ assert \    onnullelements(a);    " // BAD

//@ requires \\elemtype(\\typeof(a)) == \\type(Object); modifies \\everything;    "

//@ assume \    onnullelements(a) && a.length == 3;    "

//@ assert \    onnullelements(a);    " // OK

//@ modifies \\everything;    "

//@ assume a != null && a.length == 3;    "

//@ assert \    onnullelements(a);    " // BAD

//@ requires i == 5;    " + "  //@ modifies \\everything;    " + "  public void m1(int i) {    "

//@ assert \    ot_modified(i);    " // OK

//@ modifies \\everything;    " + "  public void m1a(int i) {    " + "    i = 5;    "

//@ assert \    ot_modified(i);    " // BAD

//@ ghost public int gi;    "

//@ requires i == 5;    " + "  //@ modifies \\everything;    " + "  public void m2() {    "

//@ assert \    ot_modified(i);    " // OK

//@ modifies \\everything;    " + "  public void m2a() {    " + "    i = 5;    "

//@ assert \    ot_modified(i);    " // BAD

//@ requires si == 5;    " + "  //@ modifies \\everything;    " + "  public void m3() {    "

//@ assert \    ot_modified(si);    " // OK

//@ modifies \\everything;    " + "  public void m3a() {    " + "    si = 5;    "

//@ assert \    ot_modified(si);    " // BAD

//@ requires gi == 5;    " + "  //@ modifies \\everything;    " + "  public void m4() {    "

//@ set gi = 5;    " + "    //@ assert \    ot_modified(gi);    " // OK

//@ modifies \\everything;    " + "  public void m4a() {    " + "    //@ set gi = 5;    "

//@ assert \    ot_modified(gi);    " // BAD


//@ requires t != null;    "

//@ modifies \\everything;    "

//@ assert \    ot_modified(t.i);    " // OK

//@ requires t != null;    "

//@ modifies \\everything;    "

//@ assert \    ot_modified(t.i) ? true: true;    " // BAD

//@ requires t == null;    "

//@ modifies \\everything;    "

//@ assert \    ot_modified(t.i) ? true: true;    " // OK

//@ modifies \\everything;    "

//@ assert \    ot_modified(t.i) ? true: true;    " // BAD

//@ requires p != null && p != this;    "

//@ modifies \\everything;    "

//@ assert pp != p;    " // OK

//@ assert pp != this;    " // OK

//@ requires p != null && p != this;    " + "  //@ modifies \\everything;    "

//@ assert pp != p;    " // BAD

//@ requires p != null && p != this;    " + "  //@ modifies \\everything;    "

//@ assert pp != this;    " // BAD

//@ requires p != null && p != this;    " + "  //@ modifies \\everything;    "

//@ assert pp != q;    " // OK

//@ requires p != null && p != this;    "

//@ modifies \\everything;    " // Line 30                                                                                                // 30

//@ assert pp != q;    " // OK

//@ modifies \\everything;    " + "  //@ ensures \\result != null && \\fresh(\\result);    "

//@ ensures \\result != p && \\result != this;    " + "  public Object m6(Object p) {    "

//@ modifies \\everything;    " + "  //@ ensures \\result == null;    " // BAD

//@ modifies \\everything;    " + "  //@ ensures \\result != null && \\fresh(\\result);    "

//@ ensures \\result == p || \\result == this;    " // BAD

//@ modifies \\everything;    "

//@ ensures \\result != null && !\\fresh(\\result);    " // BAD

//@ ghost Object oo;    "

//@ static ghost Object soo;    "

//@ modifies \    othing;    "

//@ assert pp != o && pp != oo;    " // OK

//@ modifies \    othing;    "

//@ assert pp != o;    " // BAD

//@ modifies \    othing;    "

//@ assert pp != oo;    " // BAD

//@ modifies \\everything;    "

//@ assert pp != oo;    " // OK

//@ modifies \\everything;    "

//@ assert pp != o;    " // BAD

//@ modifies \    othing;    "

//@ assert pp != so && pp != soo;    " // OK

//@ modifies \    othing;    "

//@ assert pp != so;    " // BAD

//@ modifies \    othing;    "

//@ assert pp != soo;    " // BAD

//@ modifies \\everything;    "

//@ assert pp != soo;    " // OK

//@ modifies \\everything;    "

//@ assert pp != so;    " // OK

//@ modifies \    othing;    "

//@ assert pp != o && pp != oo;    " // BAD

//@ modifies \    othing;    " + "  public void m9b(Object p) {    " + "    Object pp = c1n(p);    "

//@ assert pp != so && pp != soo;    " // BAD

//@ modifies \    othing;    "

//@ ensures \\fresh(\\result);    "

//@ modifies \    othing;    "

//@ ensures \\result == null || \\fresh(\\result);    "

//@ modifies \    othing;    "

//@ ensures true;    "

//@ modifies \\everything;    "

//@ ensures \\result != null && \\fresh(\\result);    "

//@ modifies \\everything;    "

//@ ensures true;    "

//@ requires p != null && p != this;    " + "  //@ modifies \\everything;    "

//@ assume this.k == 0;    " + "    c1(p);    " // havoc

//@ assert this.k == 0;    " // OK

//@ requires p != null && p != this;    " + "  //@ modifies \\everything;    "

//@ assume sk == 0;    " + "    c1(p);    " // havoc

//@ assert sk == 0;    " // OK

//@ requires o != null;    " + "  //@ modifies o.*;    " + "  public void c1(TestJava o) { }     "

//@ requires o != null;    " + "  //@ modifies TestJava.*;    " + "  public void c2(TestJava o) { }     "

//@ requires p != null && p != this;    " + "  //@ modifies \\everything;    "

//@ assume k == 0;    " + "    c1(this);    " // havoc

//@ assert k == 0;    " // FAILS

//@ requires p != null && p != this;    " + "  //@ modifies \\everything;    "

//@ assume sk == 0;    " + "    c1(this);    " // havoc

//@ assert sk == 0;    " // OK

//@ requires o != null;    " + "  //@ modifies o.*;    " + "  public void c1(TestJava o) { }     "

//@ requires o != null;    " + "  //@ modifies TestJava.*;    " + "  public void c2(TestJava o) { }     "

//@ requires p != null && p != this;    " + "  //@ modifies \\everything;    "

//@ assume k == 0;    " + "    c2(this);    " // havoc

//@ assert k == 0;    " // OK

//@ requires p != null && p != this;    " + "  //@ modifies \\everything;    "

//@ assume sk == 0;    " + "    c2(this);    " // havoc

//@ assert sk == 0;    " // FAILS

//@ requires o != null;    " + "  //@ modifies o.*;    " + "  public void c1(TestJava o) { }     "

//@ requires o != null;    " + "  //@ modifies TestJava.*;    " + "  public void c2(TestJava o) { }     "

//@ modifies \\everything;    "

//@ assume k == 0;    "

//@ assert k == 0;    "

//@ requires i == 0;    "

//@ modifies \\everything;    "

//@ also requires i > 0;    "

//@ modifies \    othing;    "

//@ modifies \\everything;    " + "  public void m1a() {    " + "    //@ assume k == 0;    "

//@ assert k == 0;    " // FAILS

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "

//@ modifies \\everything;    " + "  public void m2() {    " + "    //@ assume sk == 0;    "

//@ assert sk == 0;    " + "  }    "

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "}");

//@ modifies \\everything;    " + "  public void m2a() {    " + "    //@ assume sk == 0;    "

//@ assert sk == 0;    " // FAILS

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "

//@ requires a != null && a.length > 10;    " + "  //@ modifies \\everything;    "

//@ assume a[0] == 0;    " + "    c1(1);    "

//@ assert a[0] == 0;    " + "  }    "

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "}");

//@ requires a != null && a.length > 10;    " + "  //@ modifies \\everything;    "

//@ assume a[0] == 0;    " + "    c1(0);    " // modifies

//@ assert a[0] == 0;    " // FAILS

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "

//@ requires sa != null && sa.length > 10;    " + "  //@ modifies \\everything;    "

//@ assume sa[0] == 0;    " + "    c1(1);    "

//@ assert sa[0] == 0;    " + "  }    "

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "}");

//@ requires sa != null && sa.length > 10;    " + "  //@ modifies \\everything;    "

//@ assume sa[0] == 0;    " + "    c1(0);    "

//@ assert sa[0] == 0;    " // FAILS

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "}"

//@ requires sa != null && sa.length > 10;    " + "  //@ modifies \\everything;    "

//@ assume a == \\old(a);    " + "    c1(1);    "

//@ assert a == \\old(a);    " + "  }    "

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "}");

//@ requires sa != null && sa.length > 10;    " + "  //@ modifies \\everything;    "

//@ assume a == \\old(a);    " + "    c1(0);    "

//@ assert a == \\old(a);    " // FAILS

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "

//@ modifies \\everything;    " + "  public void m6(/*@ non_null*/TestJava t) {    "

//@ assume t.k == 0;    " + "    c1(1);    " + "    //@ assert t.k == 0;    " + "  }    "

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "}");

//@ modifies \\everything;    " + "  public void m6a(/*@ non_null*/TestJava t) {    "

//@ assume t.k == 0;    " + "    c1(0);    " + "    //@ assert t.k == 0;    " // FAILS

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "

//@ modifies \\everything;    " + "  public void m7() {    " + "    c1(1);    "

//@ assert sk == \\old(sk);    " // Should be OK

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "}");

//@ modifies \\everything;    " + "  public void m7a() {    " + "    c1(0);    "

//@ assert sk == \\old(sk);    " // FAILS

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "

//@ modifies k,sk;    "

//@ assume k == 0 && sk == 0;    "

//@ assert sk == 0;    "

//@ modifies k,sk;    "

//@ assume k == 0 && sk == 0;    "

//@ assert sk == 0;    " // FAILS

//@ modifies k,sk;    "

//@ assume k == 0 && sk == 0;    "

//@ assert k == 0;    " + "  }    "

//@ modifies k,sk;    "

//@ assume k == 0 && sk == 0;    "

//@ assert k == 0;    " // FAILS

//@ requires i == 0;    "

//@ modifies k;    "

//@ also requires i > 0;    "

//@ modifies sk;    "

//@ requires i == 10;    "

//@ modifies t.k;    "

//@ also requires i == 0;    "

//@ modifies \    othing;    "

//@ requires a!=null && 0<=i && i<a.length;    "

//@ modifies a[i];    "

//@ requires b!=null && 0<=i && i<b.length;    "

//@ modifies b[i];    "

//@ modifies k,sk;    " + "  public void m3() {    " + "    //@ assume k == 0 && sk == 0;    "

//@ assert k == 0;    " + "  }    "

//@ modifies k,sk;    " + "  public void m3a() {    " + "    //@ assume k == 0 && sk == 0;    "

//@ assert k == 0;    " // FAILS

//@ requires a != null && a.length == 5;    "

//@ modifies a[0];    " + "  public void m4() {    "

//@ assume a[0] == 0 && a[1] == 1;    " + "    c3(0);    " + "    //@ assert a[1] == 1;    "

//@ requires a != null && a.length == 5;    " + "  //@ modifies a[0];    "

//@ assume a[0] == 0 && a[1] == 1;    " + "    c3(0);    "

//@ assert a[0] == 0;    " // FAILS

//@ requires i == 0;    " + "  //@ modifies k;    " + "  //@ also requires i > 0;    "

//@ modifies sk;    " + "  public void c1(int i) { }     "

//@ requires i == 10;    " + "  //@ modifies t.k;    " + "  //@ also requires i == 0;    "

//@ modifies \    othing;    " + "  public void c2(int i, TestJava t) {}    "

//@ requires a!=null && 0<=i && i<a.length;    " + "  //@ modifies a[i];    "

//@ requires b!=null && 0<=i && i<b.length;    "

//@ modifies b[i];    " + "  public void c4(int i) {}    " + "

//@ requires b != null && b.length == 5;    "

//@ modifies b[0];    "

//@ assume b[0] == 0 && b[1] == 1;    "

//@ assert b[1] == 1;    "

//@ requires b != null && b.length == 5;    "

//@ modifies b[0];    "

//@ assume b[0] == 0 && b[1] == 1;    "

//@ assert b[0] == 0;    " // FAILS

//@ requires b != null && b.length == 5;    "

//@ modifies b[0];    "

//@ assume b[0] == 0 && b[1] == 1;    "

//@ requires a != null && b != null && b.length == 5  && a.length ==5;    "

//@ modifies a[0],b[0];    "

//@ assume b[0] == 0 && b[1] == 1;    "

//@ assert b[1] == 1;    "

//@ requires i == 0;    "

//@ modifies k;    "

//@ also requires i > 0;    "

//@ modifies sk;    "

//@ requires i == 10;    "

//@ modifies t.k;    "

//@ also requires i == 0;    "

//@ modifies \    othing;    "

//@ requires a!=null && 0<=i && i<a.length;    "

//@ modifies a[i];    "

//@ requires b!=null && 0<=i && i<b.length;    "

//@ modifies b[i];    "

//@ public invariant a != null && a.length == 10;    "

/*@ assignable a; */
//@ modifies a[*];    "

//@ assume a[0] == 0 && a[2] == 2;    "

//@ assert a[0] == 0;    "

//@ modifies a[*];    "

//@ assume a[0] == 0 && a[2] == 2;    "

//@ assert a[2] == 3;    " // FAILS

//@ modifies a[2 .. 4];    "

//@ modifies a[*];    "

//@ modifies a[2 .. ];    "

//@ public invariant a != null && a.length == 10;    "

//@ assignable a;    "

//@ modifies a[*];    "

//@ assume a[0] == 0 && a[2] == 2;    "

//@ assert a[0] == 0;    " // FAILS

//@ modifies a[*];    "

//@ assume a[0] == 0 && a[2] == 2;    "

//@ assert a[2] == 2;    " // FAILS

//@ modifies a[2 .. 4];    "

//@ modifies a[*];    "

//@ modifies a[2 .. ];    "

//@ public invariant a != null && a.length == 10;    "

//@ assignable a;    "

//@ modifies a[*];    "

//@ assume a[0] == 0 && a[2] == 2;    "

//@ assert a[0] == 0;    "

//@ modifies a[*];    "

//@ assume a[0] == 0 && a[9] == 2;    "

//@ assert a[9] == 2;    " // FAILS

//@ modifies a[2 .. 4];    "

//@ modifies a[*];    "

//@ modifies a[2 .. ];    "

//@ modifies \\everything;    " + "  public void z() {    " + "  }    "

//@ modifies \\everything;    " + "  public void m1() {    " + "    //@ assume a == 15 && fa == 13;    "

//@ assert fa == 13;    " // Should be OK

//@ assert a == 15;    " // Should fail

//@ assert fsa == 13;    " // OK

//@ assert fa == 15;    " // OK

//@ modifies \\everything;    " + "  public void m1() {    " + "    //@ assert fsa == 13;    " // Should

//@ assert fa == 15;    " // Should be OK

//@ modifies \\everything;    " + "  public void m2() {    " + "    //@ assert a == 17;    " // Not

//@ modifies \\everything;    " + "  public void m3() {    " + "    //@ assert fb == 16;    " // Not

/*@ code_bigint_math*/
//@ requires i >= 0;    " + "  //@ modifies k;    " + "  //@ ensures k == 10;    "

//@ signals (Exception e) k<0; signals_only Exception;    "

//@ requires i >= 0;    " + "  //@ modifies k;    " + "  //@ ensures k == 10;    "

//@ signals (Exception e) k==-11;    " + "  //@ signals_only Exception;    "

//@ requires i >= 0;    " + "  //@ modifies k;    " + "  //@ ensures k == 10;    "

//@ signals (Exception e) k==-12;    " + "  //@ signals_only Exception;    "

//@ requires i >= 0;    " + "  //@ modifies k;    " + "  //@ ensures k == 10;    "

//@ signals (Exception e) k==-13;    " // FAILS

//@ signals_only Exception;    " + "  public void m3a(int i) {    " + "    m(0);    "

//@ requires i >= 0;    " + "  //@ modifies k;    " + "  //@ ensures \\result == 12;    "

//@ signals (Exception e) false;    " + "  public int m4(int i) {    "

//@ requires i >= 0;    " + "  //@ modifies k;    " // Line

//@ ensures false;    " + "  //@ signals (Exception e) k == -11;    "

//@ signals_only Exception;    " + "  public int m5(int i) {    "

//@ requires i >= 0;    " + "  //@ modifies k;    " + "  //@ ensures false;    "

//@ signals (Exception e) k == -12;    " // Line 60

//@ signals_only Exception;    " + "  public int m6(int i) {    "

//@ requires i == 0;    " + "  //@ modifies k;    " + "  //@ ensures k>0 && \\result == i+1;    "

//@ signals (Exception e) false;    " + "  //@ also     " + "  //@ requires i > 0;    " // Line

//@ modifies k;    " + "  //@ ensures false;    " + "  //@ signals (Exception e) k == -10-i;    "

//@ signals_only Exception;    " + "  public int m(int i) {    " + "    if (i > 0) {    "

//@ code_bigint_math     " + "public class TestJava {     "

/*@ non_null*/
//@ requires false;    " + "  public static boolean bf(boolean bb) { return true; }    "

//@ requires true;    " + "  public static boolean bt(boolean bb) { return true; }    "

//@ static public invariant b;    "

//@ requires !b;    " + "  public static boolean bq(boolean bb) { return true; }    " + "


//@ ghost nullable Object oo;    " + "  //@ public static invariant bstatic;    "

//@ public invariant binstance;    " + "  //@ public initially binstance2;    "

//@ public constraint binstance2 == \\old(binstance2);    "

//@ public static constraint bstatic == \\old(bstatic);    "

/*@ non_null*/
//@ requires true;    " + "  //@ ensures \\result;    "

//@ requires false;    " + "  //@ ensures true;    " + "  public static int i(int ii) { return 0; }    "

//@ requires ii == 10;    " + "  //@ ensures true;    "

/*@ set oo = null;*/
//@ requires ii == 10;    " + "  //@ ensures true;    "


/*@ set oo = null;*/
//@ requires ii == 10;    " + "  //@ ensures true;    "

//@ requires ii == 10;    " + "  //@ ensures true;    "

//@ requires bb;    "

//@ ensures true;    "

/*@ assume b; */
/*@assert false;*/
//@ requires bb;    " + "  //@ ensures true;    "

/*@ assume b; */
/*@assert !bb;*/
//@ requires bb;    " + "  //@ ensures true;    "

/*@ assume bb; */
/*@assert b;*/
//@ requires bb;    "

//@ ensures true;    "

/*@assume z==1 ;*/
/*@ assert false; */
//@ requires bbb;    "

/*@assume true;*/
/*@assume !b;*/
/*@ assert !bb; */
//@ requires b;    "

/*@assume true;*/
/*@assume !b;*/
/*@ assert !bb; */
//@ requires bb;    "

//@ ensures true;    "

/*@assume 0==x ;*/
/*@ assert true; */
/*@ assume !bb; assume bb;*/
/*@assume bb; assume !bb; */
/*@assume bb; assume !bb; */
/*@assume bb; assume !bb; */
/*@ assume b; */
/*@ assume !b; */
/*@ assert k == 0; */
/*@ assert k != 0; */
/*@ assert i == 10; assert k == 16; */
/*@ assert k == 10; */
/*@ assert k == 11; */
/*@ assert k == 11; */
/*@ code_java_math*/
//@ static public constraint i > \\old(i);    "

//@ modifies i;    "

//@ ensures true;    "

/*@ code_bigint_math*/
//@ modifies i;    " + "  //@ ensures i == \\old(i)+2;    "

//@ modifies i;    "

//@ ensures i == \\old(i+1);    " + "  public static void bbad() { i = i - 1; }    " + "

/*@ code_java_math spec_java_math*/
//@ modifies i;    "

//@ ensures i == \\old(i)+2;    "

//@ modifies i;    "

//@ ensures i == \\old(i+1);    "

/*@ code_java_math spec_java_math*/
//@ modifies i;    "

//@ ensures i == \\old(i)+2;    "

/*@ assert i == i@x + 1 && i == (i+1)@x; */
//@ modifies i;    "

//@ ensures i == \\old(i+1);    "

/*@ assert i == i@x + 1; */
//@ modifies i;    "

/*@ assert i == this.i@x + 1; */
//@ requires a.length > 10 && a[0] >= 0;    "

//@ modifies i;    "

/*@ assert a[0]@x > -1; */
/*@ code_java_math spec_java_math*/
/*@ assert i <<< i || true; */
/*@ assert i <<<= i || true; */
//@ requires 0<=ii && ii <=3;    "

//@ ensures ii<=0 ==> \\result ==-ii;    "

//@ requires ii > -2147483648;    " // Not using

//@ ensures \\result == -ii;    "

/*@ assert i!=0; */
/*@ assert i==0; */
//@ requires ii == 10;    " + "  //@ ensures true;    "


//@ requires ii == 10;    "

//@ ensures true;    " + "  public @NonNull Object inst2(int ii) {  return null; }    " + "

//@ requires ii == 10;    " + "  //@ ensures true;    "

//@ requires ii == 10;    "

//@ ensures true;    " + "  public          Object inst2(int ii) {  return null; }    " + "

//@ requires ii == 10;    " + "  //@ ensures true;    "

//@ requires ii == 10;    " + "  //@ ensures true;    "

//@ requires ii == 10;    " + "  //@ ensures true;    "

//@ requires ii == 10;    "

//@ ensures true;    " + "  public          Object inst2(int ii) {  return null; }    " + "

/*@ non_null*/

/*@ non_null*/

/*@ non_null*/
/*@ non_null*/
//@ ensures \\result != null;    "


//@ ensures \\result != null;    "


//@ ensures \\result != null;    "

//@ ensures \\result != null;    "



//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ requires i>0;    " + "  //@ modifies j;    "

//@ ensures j == -i;    " + "  static public void m(int i) { j = -i; }    " + "  //@ requires i>1;     "

//@ modifies j;    " + "  //@ ensures \\result == -i;    "

//@ modifies j;    "

//@ ensures \\result == j;    " + "  public int instbad(boolean b, int i) { m(i); return j; }    "

//@ modifies j;    " + "  //@ ensures \\result == i;    "

//@ requires i>0;    "

//@ modifies j;    "

//@ ensures j == -i;    "

//@ requires i>1;     "

//@ modifies j;    "

//@ ensures \\result == -i;    "

//@ modifies j;    "

//@ ensures \\result == j;    "

//@ modifies j;    "

//@ ensures \\result == i;    "

/*@ code_bigint_math*/
//@ requires i>0;    "

//@ modifies j;    "

//@ ensures j == i+1 && \\result == j;    "

//@ requires i>1;     "

//@ modifies j;    "

//@ ensures \\result == \\old(i)+1;    "

//@ requires i>1;     "

//@ modifies j;    "

//@ ensures \\result == \\old(i)+3;    "

//@ requires i>1;     "

//@ modifies j;    "

//@ ensures \\result == 3*i+4;    "

//@ ensures j == i + 1;    "

//@ requires i>1;     "

//@ modifies j;    "

//@ ensures \\result == \\old(i);    "

//@ requires i>1;     "

//@ modifies j;    "

//@ ensures \\result == \\old(i)+4;    "

//@ requires i>1;     "

//@ modifies j;    " // Line 30

//@ ensures \\result == 3*i+4;    "

//@ ensures j == i + 2;    "

/*@ code_java_math*/
//@ assignable \    othing; ensures \\result == j;    "

//@ modifies j,sj;    "

//@ ensures \\result == \\old(j);    "

//@ modifies j,sj;    "

//@ ensures \\result == j;    "

//@ modifies j,sj;    "

//@ ensures \\result == sj;    "

//@ requires o!=null && p != null && o.j == 1 && p.j == 2 && j == 3;    "

//@ modifies j,sj,o.j,o.sj,p.j,p.sj;    "

//@ ensures \\result == 6;    "

//@ requires o!=null && p != null && o.j == 1 && p.j == 2 && j == 3 && o!=this && p!= this;    "

//@ modifies j,sj,o.j,o.sj,p.j,p.sj;    "

//@ ensures \\result == 6;    "

/*@ assert (\\lbl OJ o.j) + (\\lbl PJ p.j) + (\\lbl JJ j) == 6; */
//@ requires o!=null && p != null && o.j == 1 && p.j == 2 && j == 3;    "

//@ modifies j,sj,o.j,o.sj,p.j,p.sj;    "

//@ ensures \\result == 6;    "

//@ modifies j,sj;    " + "  //@ ensures \\result == 6;    "

//@ requires o!=null && p != null && sj == 3;    "

//@ modifies j,sj,o.j,o.sj,p.j,p.sj;    "

//@ ensures \\result == 9;    "

//@ assume a != null && a.length > 2 && a[0] == 1;    "

//@ loop_invariant (\\forall int k; 0<=k && k < \\count; b ==> a[k] > 0);    "

//@ assert b ==> a[1] > 0;    " + "  }    " + "}");

/*@ loop_invariant 0<=i && i<=5 && n==i; decreases 5-i; */
/*@ assert n == 5; */
/*@ loop_invariant 0<=i && i<=5 && n==i; decreases 3-i; */
/*@ assert n == 5; */
/*@ loop_invariant 0<=i && i<5 && n==i; decreases 5-i; */
/*@ assert n == 5; */
/*@ loop_invariant 0<=i && i<=5 && n==i-1; decreases 5-i; */
/*@ loop_invariant i>0; decreases i; */
/*@ reachable; */
/*@ loop_invariant i>=0; decreases i-2; */
/*@ assert i == 0; */
/*@ loop_invariant i>=0; decreases i; */
/*@ assert i == 0; */
/*@ code_java_math */
/*@ loop_invariant  i>0; decreases i; */
/*@ assert i == 0; */
/*@ code_bigint_math */
/*@ loop_invariant i>=0; decreases i-2; */
/*@ assert i == 0; */
/*@ code_bigint_math */
/*@ loop_invariant i>=0; decreases i; */
/*@ assert i == 0; */
/*@ code_bigint_math*/
/*@ loop_invariant i<=5 && i>=0; decreases i; */
/*@ assert i == 0; */
/*@ loop_invariant i<=5 && i>=0; decreases i-2; */
/*@ assert i == 0; */
/*@ loop_invariant i<=5 && i>=0; decreases i; */
/*@ assert i == 0; */
/*@ loop_invariant i<=5 && i>0; decreases i; */
/*@ assert i == 0; */
/*@ loop_invariant i>=0; decreases i; */
/*@ assert i == 0; */
/*@ loop_invariant i>=0; decreases i; */
/*@ assert i == 0; */
/*@ loop_invariant i>=0; decreases i; */
/*@ assert i == 0; */
/*@ assert i == 6; */
/*@ assert i == 5; */
/*@ assert i == 4; */
/*@ assert i == 5; */
/*@ assert i == 6; */
/*@ assert i == 5; */
/*@ assert i == 4; */
/*@ assert i == 5; */
/*@ assert j == 5; */
/*@ assert j == 6; */
/*@ assert j == 5; */
/*@ assert j == 4; */
/*@ assert j == 6; */
/*@ assert j == 5; */
/*@ assert j == 4; */
/*@ assert j == 5; */
/*@ assert i == 12; */
/*@ assert i == 5; */
/*@ assert i == 12 && i == j; */
/*@ assert i == 5; */
/*@ assert i == -2; */
/*@ assert i == 5; */
/*@ assert i == -2 && i == j; */
/*@ assert i == 5; */
/*@ assert i == 5*7; */
/*@ assert i == 5; */
/*@ assert i == 5*7 && i == j; */
/*@ assert i == 5; */
/*@ assert i == 5/7; */
/*@ assert i == 5; */
/*@ assert i == 5/7 && i == j; */
/*@ assert i == 5; */
//@ requires i > -2147483648;    "

/*@ assert j >= 0; */
//@ requires i > -2147483648;    "

/*@ assert j == -1; */
/*@ assume i > 0; */
/*@ assert (\\lblpos ISP i>0); */
/*@ assume i > 0; */
/*@ assert (\\lblneg ISN i<0); */
/*@ assume i > 0; */
/*@ assert !(\\lblneg ISN2 i>0); */
/*@ assume i > 0; */
/*@ assert (\\lblpos ISP i<0); */
/*@ assume i > 0; */
/*@ assert !(\\lblpos ISP2 i>0); */
/*@ assert o != oo;*/
/*@ assert o == oo;*/
/*@ assert o != null;*/
/*@ assert o == null;*/
/*@ assert o != oo;*/
/*@ assert o == oo;*/
/*@ assert o != null; assert o.length == 5; */
/*@ assert o.length == 6;*/
/*@non_null*/
/*@ assert a.length >= 0;*/
/*@ assert o != oo;*/
/*@ assert o == oo;*/
/*@ assert o.length == 3; assert o[1] == 11;*/
/*@ assert o.length == 4; */
/*@ assert o.length == 3; assert o[1] == 10;*/
/*@ assert o != null; assert o.length == 3; assert o[1] == 11;*/
/*@ assert o.length == 3; assert o[1] != null; assert o[1].length == 3; assert o[1][2] == 14; assert o[0] != null; assert o[0].length == 2; assert o[0][1] == 11; */
/*@ assert o.length == 3; assert o[1] != null; assert o[1].length == 3; assert o[1][2] == 14; assert o[0] != null; assert o[0].length == 2; assert o[0][1] == 11; */
/*@ assert o.length == 3; assert o[1] == null; assert o[2] != null; assert o[2].length == 1; assert o[2][0] == 15; */
/*@ assert oo[0] != oo[1]; */
/*@ assert o != oo;*/
/*@ assert o == oo;*/
/*@ assert o.length == 5; assert o[1].length == 3; */
/*@ assert o.length == 6;*/
/*@ assert o[1].length == 4;*/
/*@non_null*/
/*@ assert a.length >= 0;*/
/*@ assert o.length == 3; */
/*@ assert o.length == 2; */
/*@ assert o[1][2] == 14; */
/*@ assert o[2].length == 1; */
/*@ assert o[0].length == 2; */
/*@ assert o != null; assert o.length == 5; assert o[1] == null; */
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assume a[1] == 2; */
/*@ assert a[1] == 2; */
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assume a[1] == 2; */
/*@ assert a[1] == 3; */
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assume a[1] == 2; */
/*@ assert a[1] == 3; */
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assume a[1] == 2; */
/*@ assert a[1] == 4; */
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assume a[0] == 2; */
/*@ assert a[0] == 2; */
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assume a[0] == 2; */
/*@ assert a[0] == 4; */
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assume a[1] == 2; */
/*@ assert a[1] == 3; */
/*@ assert a[1] == 4; */
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assume a[1] == 2; */
/*@ assert a[1] == 3; */
/*@ assert a[1] == 5; */
/*@non_null*/
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assert a[0] == b[0]; */
/*@non_null*/
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assert a[0] != b[0]; */
/*@non_null*/
/*@non_null*/
/*@ assume b.length == 10 && a.length == 10;*/
/*@ assert b[0] == 7; */
/*@non_null*/
/*@non_null*/
/*@ assume b.length == 10 && a.length == 10;*/
/*@ assert b[0] == 8; */
/*@non_null*/
/*@non_null*/
/*@ assume b.length == 10 && a.length == 12;*/
/*@ assert b != null; assert a != null; assert b.length == 12; assert a.length == 12; */
/*@non_null*/
/*@assume a.length == 10; assume a[1] != null; assume a[1].length == 5; */
/*@ assume a[1][2]; */
/*@ assert a[1][2]; */
/*@non_null*/
/*@assume a.length == 10; assume a[1] != null; assume a[1].length == 5; */
/*@ assume a[1][2]; */
/*@ assert !a[1][2]; */
/*@non_null*/
/*@assume a.length == 10; assume a[1] != null; assume a[1].length == 5; */
/*@ assume a[1][2]; */
/*@ assert !a[1][2]; */
/*@non_null*/
/*@assume a.length == 10; assume a[1] != null; assume a[1].length == 5; */
/*@ assume a[1][2]; */
/*@ assert a[1][3]; */
/*@non_null*/
/*@assume a.length == 10; assume a[1] != null; assume a[1].length == 5; */
/*@ assume a[1][2]; */
/*@ assert a[0][2]; */
/*@non_null*/
/*@assume a.length == 10; assume a[1] != null; assume a[1].length == 5; */
/*@ assume a[1][2]; assume a[0] != null; */
/*@ assert a[0][2]; */
/*@non_null*/
/*@assume a.length == 10; assume a[1] != null; assume a[1].length == 5; */
/*@ assume a[1][2]; assume a[0] != null; assume a[0].length > 5; */
/*@ assert a[0][2]; */
/*@non_null*/
/*@assume a.length == 10; assume a[1] != null; assume a[0] != null; assume a[1].length == 5; assume a[0].length == 3; */
/*@ assume a[0][0]; */
/*@ assert a[0][0]; */
/*@non_null*/
/*@assume a.length == 10; assume a[1] != null; assume a[0] != null; assume a[1].length == 5; assume a[0].length == 3; */
/*@ assume a[0][0]; */
/*@ assert !a[0][0]; */
/*@non_null*/
/*@assume a.length == 10; assume a[1] != null; assume a[1].length == 5; */
/*@ assert a[0][3] == a[1][3]; */
/*@non_null*/
/*@assume a.length == 10; assume a[1] != null; assume a[1].length == 5; */
/*@ assert a[0][3] != a[1][3]; ; */
/*@non_null*/
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assert a[0] == b[0]; */
/*@non_null*/
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assert a[0] != b[0]; */
/*@non_null*/
/*@non_null*/
/*@ assume b.length == 10 && a.length == 10 && b[0] != null && a[0] != null && b[0].length == 5 && a[0].length==6;*/
/*@ assert !b[0][0]; */
/*@non_null*/
/*@non_null*/
/*@ assume b.length == 10 && a.length == 10 && b[0] != null && a[0] != null && b[0].length == 5 && a[0].length==6;*/
/*@ assert b[0][0]; */
/*@non_null*/
/*@non_null*/
/*@ assume b.length == 10 && a.length == 12;*/
/*@ assert b != null; assert a != null; assert b.length == 12; assert a.length == 12; */
/*@ nullable_by_default */
//@ public static invariant t != null;     "

/*@non_null*/
/*@ assume t.f == 2; */
/*@ assert t.f == 2; */
/*@non_null*/
/*@ assume t.f == 2; */
/*@ assert t.f == 3; */
/*@non_null*/
/*@ assume t.f == 2; */
/*@ assert t.f == 3; */
/*@non_null*/
/*@ assume t.f == 2; */
/*@ assert t.f == 4; */
/*@non_null*/
/*@ assume t.g == 2; */
/*@ assert t.g == 2; */
/*@non_null*/
/*@ assume t.g == 2; */
/*@ assert t.g == 4; */
/*@non_null*/
/*@ assume t.f == 2; */
/*@ assert t.f == 3; */
/*@ assert t.f == 4; */
/*@non_null*/
/*@ assume t.f == 2; */
/*@ assert t.f == 3; */
/*@ assert t.f == 5; */
/*@non_null*/
/*@non_null*/
/*@ assert a.f == b.f; */
/*@non_null*/
/*@non_null*/
/*@ assert a.f != b.f; */
/*@non_null*/
/*@non_null*/
/*@ assert b.f == 7; */
/*@non_null*/
/*@non_null*/
/*@ assert b.f == 8; */
/*@non_null*/
/*@non_null*/
/*@ assert a.sf == b.sf; */
/*@non_null*/
/*@non_null*/
/*@ assert a.sf != b.sf; */
/*@non_null*/
/*@non_null*/
/*@ assert 3 == b.sf; */
/*@non_null*/
/*@non_null*/
/*@ assert 3 != b.sf; */
/*@non_null*/
/*@ assert f == this.f; */
/*@ assert a == this ==> a.f == f; */
/*@non_null*/
/*@ assert f == this.f; */
/*@ assert a.f == f; */
/*@non_null*/
/*@ assert sf == this.sf; */
/*@ assert a.sf == sf; */
/*@ assume i>=-1 && i <=1; */
/*@ assert j!=0; */
/*@ assume i>=-1 && i <=1; */
/*@ assert j==1; */
/*@ assume i>=-1 && i <=1; */
/*@ assert j>0; */
/*@ assume i>=-1 && i <=1; */
/*@ assert i==0 ==> j==-1; */
/*@ assume i>=-1 && i <=1; */
/*@ assert j>=0; */
/*@ assume i>=-1 && i <=1; */
/*@ assert j>0; */
/*@ assume i>=-1 && i <=1; */
/*@ assert j>=0; */
//@ ensures i == 2;    "

//@ ensures i == 1;    "

//@ public exceptional_behavior requires b;  signals (Exception e) true; signals (RuntimeException e) true;    "

//@ also    " + "//@ public normal_behavior requires !b; ensures true;    "

//@ requires k < 0;    " + "//@ ensures true;    " + "//@ also    " + "//@ requires k > 0;    "

//@ ensures \\result == 1;    " + "public int m1() {    " + "    int i = 1;    " + "    try {    "

//@ assert e != null;    " + "        i = 2;    " + "    }    "

//@ requires k < 0;    " + "//@ ensures true;    " + "//@ also    " // Line

//@ requires k > 0;    " + "//@ ensures \\result == 1;    " + "public int m2() {    " + "    int i = 1;    "

//@ assert e != null;    " + "        i = 1;    " // Line

//@ requires i > 0;    " + "  //@ ensures i > 0;    "

/*@ assert a*2 == a + a; */
/*@ assert a * b ==
                // a *(b-1) + a; */
/*@ assert (2*a)/2 == a; */
/*@ assert a >= 0 ==> (a%3) < 3; */
/*@ assert a >= 0 ==> (a%3) >= 0; */
/*@ assert (a >= 0
                // && b > 0) ==> (a%b) >= 0; */
/*@ assert (a >= 0
                // && b > 0) ==> ((a*b)%b) == 0; */
/*@ assert (a >= 0 ) ==> ((5*a)%5) == 0; */
//@ requires i < 1000; ensures \\result == i+1;    "

//@ pure     "

/*@ assume a < 100; */
/*@ assert k == m(a); */
/*@ assume a < 100; */
/*@ assert k == m(a); */
/*@ assume a < 100; */
/*@ assert k == m(a) + m(a); */
/*@ assume a < 100; */
/*@ assert k == 1 + m(a) + m(a); */
/*@ assume a < 100; */
/*@ assert k == m(m(a+1)); */
/*@ assume a < 100; */
/*@ assert k == m(m(a+1)); */
//@ requires i < 1000; ensures \\result == i+1;    "

//@ pure     "

/*@ assume a < 100; */
/*@ assert k == m(a); */
/*@ assume a < 100; */
/*@ assert k == m(a); */
/*@ assume a < 100; */
/*@ assert k == m(a) + m(a); */
/*@ assume a < 100; */
/*@ assert k == 1 + m(a) + m(a); */
/*@ assume a < 100; */
/*@ assert k == m(m(a+1)); */
/*@ assume a < 100; */
/*@ assert k == m(m(a+1)); */
/*@ code_bigint_math*/
//@ ensures \\result == z+1;    " + "  //@ pure     "

/*@ assert k == m(); */
/*@ assert k == m(); */
/*@ assert k == m() + m(); */
/*@ assert k == 1 + m() + m(); */
/*@ assert k == m(); */
/*@ assert k == m(); */
/*@ code_bigint_math*/
//@ ensures \\result == z+1;    "

//@ pure     "

/*@ assert k == m(); */
/*@ assert k == m(); */
/*@ assert k == m() + m(); */
/*@ assert k == 1 + m() + m(); */
//@ ensures \\result > 0;    "

//@ also    "

//@ ensures \\result > ii;    "

/*@ code_bigint_math*/
//@ also public normal_behavior    "

//@ ensures \\result == i+1;    "

//@ pure    "

//@ requires a >= 0;    "

//@ ensures \\result == a+1;    "

//@ requires iii > 0;    " + "  //@ ensures \\result > 0;    " + "  abstract public int m(int iii);    "

//@ also    "

//@ ensures \\result > ii;    " + "  abstract public int m(int ii);    " + "}    "

/*@ code_bigint_math*/
//@ also    "

//@ ensures \\result == i+1;    " + "  //@ pure    " + "  public int m(int i) { return i+1; }    "

//@ ensures \\result == a+1;    " + "  public int n1(int a) { return m(a); }    "

//@ requires iii > 0;    " + "  //@ ensures \\result > 0;    " + "  abstract public int m(int iii);    "

//@ also    "

//@ requires ii > 0;    " + "  //@ ensures \\result > ii;    " + "  abstract public int m(int ii);    "

/*@ code_bigint_math*/
//@ also    "

//@ requires i > 0;    " + "  //@ ensures \\result == i+1;    " + "  //@ pure    "

//@ requires iii == 1;    "

//@ ensures \\result == iii;    "

//@ also    "

//@ requires ii == 2;    "

//@ ensures \\result == ii;    "

/*@ code_bigint_math*/
//@ also    "

//@ requires i == 3;    "

//@ ensures \\result == i;    "

//@ pure    "

//@ requires a >= 1 && a <= 3;    "

//@ ensures \\result == a;    "

//@ ensures \\result == a;    "

//@ requires 0<=ii && ii <=3;    "

//@ ensures \\result < 0;    " + "  public static int m(int ii) {     "

//@ requires ii == 2;    " + "  //@ ensures \\result == 0;    "

//@ ensures is == 6;    "

//@ ensures \\result == 1;    " + "  public static int m4(int ii) {     " + "    try { ii = 0;     "

//@ assert c == 1;     " + "    return c;     " + "  }    " + "

//@ ghost int d = c+1;    " + "    //@ assert d + c == 9;     " + "    return c;     "

//@ ghost int d = c+1;    " + "    //@ assert d + c == 10;     " + "    return c;     "

//@ ghost int d = c+1;    " + "    //@ set d = 10;    " + "    //@ assert d + c == 14;     "

//@ ghost int d = c+1;    " + "    //@ set d = 10;    " + "    //@ assert d + c == 15;     "

//@ ghost int d = c+1;    " + "    //@ debug d = 10;    " + "    //@ assert d + c == 14;     "

//@ ghost int d = c+1;    " + "    //@ debug d = 10;    " + "    //@ assert d + c == 15;     "

/*@ nullable_by_default */
/*@non_null*/
//@ requires o != null;    "

//@ public normal_behavior  ensures \\result == (oo != null);    "

/*@ nullable_by_default */
/*@non_null*/
//@ requires o != null;    " + "  public static void m2(TestJava o) {     " + "    int i = o.z();     "

//@ public normal_behavior  ensures \\result == (oo != null);    "

//@ signals_only \    othing;      public int z() { return 0; }    " + "

/*@non_null*/
//@ requires o != null;    " + "  public static void m2(TestJava o) {     " + "    int i = o.z();     "

//@ public normal_behavior  ensures \\result == (oo != null);    "

//@ signals_only \    othing;      public static int z() { return 0; }    " + "}");

/*@ nullable_by_default */
/*@ code_java_math spec_java_math*/
//@ requires a != null;    "

//@ requires a != null;    "

//@ assume a.length == 1;     "

/*@ non_null*/
/*@ non_null*/
/*@ nullable_by_default */
//@ assume o.j == 1;     " + "  }    "

/*@non_null*/
//@ assume o.j == 1;     " + "  }    "

//@ requires o != null;    " + "  public static void m2(TestJava o) {     "

//@ assume o.j == 1;     " + "  }    " + "  public static void m3(TestJava o) {     "

//@ assume o != null && o.j == 1;     " + "  }    " + "  public static void m4(TestJava o) {     "

//@ assume o == null || o.j == 1;     " + "  }    " + "  public static void m5(TestJava o) {     "

//@ assume o != null ==> o.j == 1;     " + "  }    " + "

/*@ nullable_by_default */
//@ assume o.j == 1;     " + "  }      "

//@ assume a[0] == 1;     " + "  }    "

//@ requires a != null;    " + "  public static void m2(int[] a) {     "

//@ assume a[-1] == 1;     " + "  }    " + "  //@ requires a != null;    "

//@ assume a.length == 1;     "

//@ assume a[1] == 1;     " + "  }    " + "  public static void m4(int i, int j) {     "

//@ assume i/j == 4;     " + "  }    " + "  public static void m5(int i, int j) {     "

//@ assume i%j == 4;     " + "  }    " + "  public static void m6(RuntimeException r) {     "

//@ assume ((Exception)t) != null ? true : true;     " // OK

//@ assume ((RuntimeException)t) != null ? true : true ;     " + "  }    "

/*@ non_null*/
//@ assume ((Exception)t) != null ? true : true;     " + "  }    "

/*@ non_null*/
//@ assume ((RuntimeException)t) != null ? true : true ;     " + "  }    " + "

/*@ nullable_by_default */
//@ assume o.j == 1;     "

//@ assert o.j == 1 ? true : true;     "

//@ ghost int i = o.j;     "

//@ ghost int i; debug i = o.j;     "

//@ requires o.j == 1;    "

//@ ensures t.j == 1 ? true : true;    "

//@ ghost int i; set i = o.j;     "

/*@ nullable_by_default */
//@ assume o.j == 1;     "

/*@ nullable_by_default */
//@ public invariant t.j ==1 ? true: true;    " + "

/*@ nullable_by_default */
//@ public initially t.j ? true : true;    " + "

/*@ nullable_by_default */
//@ public constraint t.j ==1 ? true: true;    " + "

/*@ nullable_by_default */
//@ assert i == 1;    "

//@ assert i == 2;    "

//@ assert i == 2;    " + "  }    " + "  public void mp() {    "

//@ assert i == 2 && j == 3;    " + "  }    " + "  public void ma() {    " + "    int i = 0;    "

//@ assert i == 1;    " + "  }    " + "  public void m1(int k) {    "

//@ assume k == 0;     " + "    try {    " + "      try {    "

//@ assert i == 2 && j == 50;    "

//@ assume k == 0;     " + "    try {    " + "    try {    " + "      try {    "

//@ assert i == 2 && j == 50;    " + "    }    "

//@ assert i == 0;    " + "  }    "

//@ assert i == 0;    "

//@ public normal_behavior     "

//@   requires i != 1 & i != 2;    "

//@   ensures \\result == 0;    "

//@ also public exceptional_behavior     "

//@   requires i == 2 && ee != null;     "

//@   signals (ArrayIndexOutOfBoundsException ex) true;     "

_by_default     "

//@ public normal_behavior     "

//@   requires i != 1 & i != 2;    "

//@   ensures \\result == 0;    "

//@ also public exceptional_behavior     "

//@   requires i == 2;     "

//@   signals (ArrayIndexOutOfBoundsException ex) true;     "

//@ public normal_behavior     "

//@   requires e != null & ee != null & ae != null;    "

//@   requires i != 1 & i != 2;    "

//@   ensures \\result == 0;    "

//@ also public exceptional_behavior     "

//@   requires e != null & ee != null & ae != null;    "

//@   requires i == 2;     "

//@   signals (ArrayIndexOutOfBoundsException ex) true;     "

/*@non_null*/
//@ assume \\typeof(o) == \\type(Object);    "

//@ assert \\typeof(o) == \\typeof(o);    "

//@ assert \\typeof(o) == \\type(Object);    "

//@ assert \\typeof(o) <: \\type(Object);    "

//@ assert \\typeof(o) <:= \\type(Object);    "

/*@non_null*/
//@ assume \\typeof(o) == \\type(Object);    "

//@ assert \\typeof(o) != \\type(Object);    "

/*@non_null*/
//@ assume \\typeof(o) == \\type(Object);    "

//@ assert \\typeof(o) == \\type(Object);    "

/*@non_null*/
//@ assume \\typeof(o) == \\type(Object);    "

//@ assert \\typeof(o) == \\type(TestJava);    "

/*@non_null*/
//@ assume \\typeof(o) == \\type(Object);    "

//@ assert \\type(TestJava) <: \\typeof(o);    "

//@ assert \\type(TestJava) <:= \\typeof(o);    "

/*@non_null*/
//@ assume \\typeof(o) == \\type(TestJava);    "

//@ assert \\typeof(o) <: \\type(Object);    " + "  }    "

/*@non_null*/
//@ assert \\typeof(o) <: \\type(Object);    " + "  }    " + "}");

/*@non_null*/
//@ assert JML.erasure(\\typeof(o)) == o.getClass();    "

//@ requires i >= 0;    " + "  //@ ensures i>0;    " + "  //@ signals (Exception e) i == 0;    "

//@ requires i >= 0;    " + "  //@ ensures i>0;    " + "  //@ signals (Exception e) i == 1;    " // FAILS

//@ requires i >= 0;    " + "  //@ ensures i>0;    " + "  //@ signals (Exception e) i == 0;    " // OK

//@ requires i >= 0;    " + "  //@ ensures i>0;    " + "  //@ signals (RuntimeException e) i == 1;    " // FAILS

//@ requires i >= 0;    " + "  //@ ensures i>0;    " + "  //@ signals (Exception e) i == 0;    "

//@ requires i >= 0;    "

//@ ensures i>0;    " + "  //@ signals (Exception e) i == 1;    " // FAILS

//@ requires i >= 0;    " + "  //@ ensures i>0;    " + "  //@ signals (RuntimeException e) i == 1;    " // OK

//@ signals_only java.io.IOException;    " // FAILS

//@ signals_only \    othing;    " // FAILS

//@ signals_only Exception;    " // OK

//@ public constraint i > \\old(i) for m1();    " + "  public void m1() {    " + "  }    "

//@ public constraint i > \\old(i) for ! m1();    " + "  public void m1() {    " + "  }    "

//@ public constraint i > \\old(i) for \\everything;    " + "  public void m1() {    "

//@ public constraint i > \\old(i) for !\    othing;    " + "  public void m1() {    " + "  }    "

//@ public constraint i > \\old(i) for \    othing;    " + "  public void m1() {    " + "  }    "

//@ public constraint i > \\old(i) for !\\everything;    " + "  public void m1() {    "

//@ public constraint i > \\old(i);    " + "  public void m1() {    " + "  }    "

//@ public constraint i > \\old(i) for m1(), m1(int);    " + "  public void m1() {    "

//@ public constraint i > \\old(i) for m1(), m1(int);    " + "  public static void m1() {    "

//@ public constraint i > \\old(i) for ! m1(), m1(int);    " + "  public void m1() {    "

//@ public constraint i > \\old(i) for TestJava();    " + "  public TestJava() {    " + "  }    " + "

//@ public constraint i > \\old(i);    " + "  public TestJava() {    " + "  }    " + "}");

//@ public static constraint i > \\old(i) for TestJava();    " + "  public TestJava() {    "

//@ public static constraint i > \\old(i);    " + "  public TestJava() {    " + "  }    " + "

//@ ghost static public int i = 0;    "

//@ public static constraint i > \\old(i);    " + "}    "

//@ ghost static public int i = 0;    "

//@ public constraint i > \\old(i);    " + "}    " + "public class TestJava implements A {     "

//@ normal_behavior     "

//@ ensures \\result == (i > 0 && i < 10);    "

//@ pure    "

//@ model public boolean m(int i);    "

//@ assert (\\forall int k; 3<k && k <7; m(k));    "

//@ assert (\\forall int k; 3<k && k <7; m(k-1));    "

//@ assert !(\\forall int k; -3<k && k <7; m(k));    "

//@ normal_behavior     "

//@ ensures \\result == (i > 0 && i < 10);    "

//@ pure function    "

//@ model public static boolean m(int i);    "

//@ pure    "

//@ assert !(\\forall int k; 3<k && k <11; m(k));    "

//@ normal_behavior     "

//@ ensures \\result == (i > 0 && i < 10);    "

//@ pure    "

//@ model public boolean m(int i);    "

//@ pure    "

//@ assert !(\\forall int k; 3<k && k <11; m(k));    "

/*@ spec_public */
//@ assignable \\everything;     "


/*@ spec_public */
//@ assignable \\everything;     "


/*@ spec_public */
/*@ spec_public */
//@ assignable \\everything;     "


//@ assert array.length >= 0;     "

//@ assert array.length <= Integer.MAX_VALUE;     "

//@ requires k >= 0;    "

//@ assert array.length >= 0;     "

//@ assert array.length <= Integer.MAX_VALUE;     "

//@ assert array.length == k;     "

//@ assert array.length >= 0;     "

//@ assert array.length <= Integer.MAX_VALUE;     "

//@ assert array.length >= 0;     "

//@ assert array.length <= Integer.MAX_VALUE;     "

//@ requires (\\forall int i; 0 <= i && i < args.length; args[i] >= 0);    "

//@ requires (\\forall int i; 0 <= i && i < args.length; args[i] >= 0); requires n == -2;    "

//@ requires (\\forall int i; 0 <= i && i < args.length; args[i] >= 0);    "

//@ requires (\\forall int i; 0 <= i && i < args.length; args[i] >= 0);"

//@ assert (\\lbl I i) + \\lbl(J j) == 0;     "

//@ assert (\\lbl I i) + \\lbl(J,j) == 0;     "

//@ nullable_by_default     "

/*@ requires o != null;     "
                        + "      ensures \\result == (j>=0);     "
                        + "     pure function */
//@ signals (NullPointerException e) positive(null,j);     "

//@ signals (NegativeArraySizeException e) positive(null,j);     "

//@ ensures j >= 0;     "

//@ ensures ii == 19; static_initializer "

//@ public final invariant ii == 19;     "

//@ public normal_behavior ensures \\result == 10 + 9; pure    "

//@ public normal_behavior ensures \\result == 19; pure    "

//@ ensures ii == 19 && jj == 21; static_initializer "

//@ public final invariant ii == 19;     "

//@ public normal_behavior ensures \\result == 10 + 9; pure    "

//@ public normal_behavior ensures \\result == 21; pure    "

//@ ensures ii == mm(); static_initializer "

//@ public final invariant ii == 19;     "

//@ public normal_behavior ensures \\result == 10 + 9; pure    "

//@ public normal_behavior ensures \\result == 19; pure    "

//@ public final invariant ii == 19;     "

//@ public normal_behavior ensures \\result == 10 + 9; pure    "

/*@ spec_public */
//@ public normal_behavior     "

//@   ensures num == 10;     "

//@   ensures A.bit == 1;     "

//@   ensures B.bit == 2;     "

//@ static_initializer     "

/*@ spec_public */
/*@ spec_public */
//@ public normal_behavior     "

//@   ensures num == 10;     "

//@   ensures A.bit == 1;     "

//@   ensures B.bit == 2;     "

//@ static_initializer     "

//@ public normal_behavior     "

//@   requires \    onnullelements(arr);     "

//@ public normal_behavior     "

//@   requires true;     "

//@ show i, j+1;    "

//@ show k;    "

//@ assert k > 0;    "

//@ show m,k;    "

//@ assert m > 0;    "

//@ public normal_behavior     "

//@   requires true;     "

//@ show i;    "

//@ public normal_behavior     "

//@   requires true;     "

//@ show i;    "

//@ show     "

//@ show i i;    "

//@ show;    "

//@ show i    "

//@ show %;    "

//@ public normal_behavior     "

//@   requires k != null && \    onnullelements(k) && \\elemtype(\\typeof(k)) <: \\type(Key);     "

//@ assert kk != null;    "

//@ assert \    onnullelements(kk);    "

//@ assert \\elemtype(\\typeof(kk)) == \\type(Key);    "

//@ public normal_behavior     "

//@   requires k != null && \    onnullelements(k) && \\elemtype(\\typeof(k)) <: \\type(Key);     "

//@ assert kk != null;    "

//@ assert \    onnullelements(kk);    "

//@ assert \\elemtype(\\typeof(kk)) == \\type(Key);    "

//@ ghost int k = 1;    "

//@ ghost int k = 2;    "

//@ ghost int i = 2;    "

//@ assert 0 <= i < 10 < 12;    "

//@ set i = 10;    "

//@ assert !(0 <= i < 10);    "

//@ assert 0 <= i < 11 == 2 <= i <= 12;    "

//@ assert 11 >= i+1 > 1 == 12 >= i > 2;    "

//@ assert 11 >= i+1 < 12;    "

//@ assert 11 >= i+1 < 12 == true;    "

//@ assert 11 >= i+1 > 1 != 12 <= i <= 22;    "

//@ signals_only \    othing;    "


//@ allow NullPointerException;     "


//@ forbid NullPointerException;     "



//@ ignore NullPointerException;     "



//@ ignore java.lang.XX;     "


//@ allow NullPointerException;     "

//@ forbid NullPointerException;     "

//@ forbid X;     "

//@ forbid ;     "

//@ forbid NullPointerException     "

//@ forbid NullPointerException, ArrayIndexOutOfBoundsException;     "

//@ forbid NullPointerException ArrayIndexOutOfBoundsException;     "

//@ forbid NullPointerException; allow NullPointerException     "

//@ ignore NullPointerException; allow NullPointerException     "

//@ ignore NullPointerException; forbid NullPointerException     "

//@ forbid java.lang.NullPointerException     "

//@ forbid java.lang.     "

/*@ pure */
//@ assert \\count >= 0;    " // OK

//@ assert \\count < a.length;    " // OK

//@ assert \\count >= 1;    " // BAD

//@ ghost int i = \\count;    " // OK

//@ assert \\count >= 0;    " // OK

//@ assert \\count < 2;    " // OK

//@ assert \\count == i;    " // OK

//@ ghost int i = \\count;    " + "      for (long kk: b) {    "

//@ assert \\count == i;    " // BAD

//@ loop_invariant \\count >= 0 && \\count <= a.length;    " // OK

//@ decreases a.length - \\count;    " // OK

//@ loop_invariant \\count >= 0 && \\count <= a.length;    " // OK

//@ loop_decreases a.length - \\count;    " // OK

//@ decreases a.length - \\count -1;    " // 0 on last

//@ decreases a.length - \\count -2;    " // BAD - last time through

//@ decreases \\count+10;    " // BAD - loop does not decrease variant

//@ loop_invariant \\count > 0 && \\count <= a.length;    " // BAD - first time through loop

//@ loop_invariant \\count >= 0 && \\count < a.length;    " // BAD - laswt time through loop

//@ assert \\count >= 0;    " // OK

//@ assert \\count < a.length;    " // OK

//@ ghost int i = \\count;    " // OK

//@ assert \\count >= 0;    " // OK

//@ assert \\count < 2;    " // OK

//@ assert \\count == i;    " // OK

//@ reachable;    " // knows that the loop is not

//@ loop_invariant \\values.size() == \\count;    " + "    for (Integer k: a) {    " + "    }    "

//@ loop_invariant \\values.size() == \\count;    " + "    for (Integer k: a) {    "

//@ assert \\values.size() == \\count;    " + "    }    " + "  }    "

//@ assert \\values.size() == \\count;    " + "    }    " + "  }    "

//@ assert \\count >= 1;    " // BAD

//@ public normal_behavior  ensures true;    " + "  public void m2() {    "

//@ assume a != null;     "

//@ assume it != null;     "

//@ public normal_behavior  ensures true;    " + "  public void m2bad() {    "

//@ assume a != null;     "

//@ assume it != null;     "

//@ public normal_behavior  ensures true;    "

//@ public normal_behavior  ensures true;    "

//@ assume values != null; set values.containsNull = true;     "

//@ assert values.content.owner == values;    "

//@ assume a != null;     "

//@ assume values.content.owner == values;    "

//@ assume it != null;     "

//@ assume values.content.owner == values;    "

//@ assert values.content.owner == values;    "

//@ ghost List<Map.Entry<String,String>> v = values;    "

//@ loop_invariant values == v && values.content.owner == values;     "

//@ assume k != null && \\typeof(k) <: \\type(Map.Entry<String,String>);     "

//@ public normal_behavior  ensures true;    "

//@ assume values != null; set values.containsNull = true;     "

//@ assert values.content.owner == values;    "

//@ assume a != null;     "

//@ assume values.content.owner == values;    "

//@ assume it != null;     "

//@ assume values.content.owner == values;    "

//@ assert values.content.owner == values;    "

//@ ghost List<Map.Entry<String,String>> v = values;    "

//@ assert values.content.owner == values;    "

//@ assume k != null &&  \\typeof(k) <: \\type(Map.Entry<String,String>);     "

//@ assert values.content.owner == values;    "

//@ public normal_behavior  ensures true;    "

//@ set values.containsNull = true;     "

//@ public normal_behavior  ensures true;    "

//@ set values.containsNull = true;     "

//@ ghost int i = \\count;    " // Out of scope

//@ ghost int i = \\count;    " // Out of scope

//@ set \\count = 6;    " // Syntax error

//@ ghost org.jmlspecs.lang.JMLList i = \\values;    " // Out

//@ ghost org.jmlspecs.lang.JMLList i = \\values;    " // Out

//@ set \\values = null;    " // Syntax error

//@ ghost org.jmlspecs.lang.JMLList i = \\values;    " // OK

//@ modifies \\everything;    "

//@ assume \    onnullelements(a);    "

//@ assume a.length > 1;    "

//@ assert a[0] != null;    " // OK

//@ modifies \\everything;    "

//@ assume \    onnullelements(a);    "

//@ assert a != null;    " // OK

//@ modifies \\everything;    "


//@ assume \    onnullelements(a);    "

//@ assert a == null;    " // BAD

//@ modifies \\everything;    "

//@ assume a != null && a.length > 1;    "

//@ assert a[0] != null;    " // BAD

//@ modifies \\everything;    "

//@ assume a != null && a.length == 0;    "

//@ assert \    onnullelements(a);    " // OK

//@ modifies \\everything;    "

//@ assume a != null && a.length == 0;    "

//@ assert (\\forall int i; 0<=i && i<a.length; a[i] != null);    " // OK

//@ requires \\elemtype(\\typeof(a)) == \\type(Object); modifies \\everything;    "

//@ assume a != null && a.length == 1;    "

//@ assert \    onnullelements(a);    " // OK

//@ modifies \\everything;    "

//@ assume a != null && a.length == 1;    "

//@ assume a[0] != null;    "

//@ assert \    onnullelements(a);    " // OK

//@ requires \\elemtype(\\typeof(a)) == \\type(Object); modifies \\everything;    "

//@ assume a != null && a.length == 2;    "

//@ assert \    onnullelements(a);    " // OK

//@ modifies \\everything;    "

//@ assume a != null && a.length == 2;    "

//@ assume a[0] != null;    "

//@ assume a[1] != null;    "

//@ assert \    onnullelements(a);    " // OK

//@ requires \\elemtype(\\typeof(a)) == \\type(Object); modifies \\everything;    "

//@ assume a != null && a.length == 3;    "

//@ assert \    onnullelements(a);    " // BAD

//@ requires \\elemtype(\\typeof(a)) == \\type(Object); modifies \\everything;    "

//@ assume \    onnullelements(a) && a.length == 3;    "

//@ assert \    onnullelements(a);    " // OK

//@ modifies \\everything;    "

//@ assume a != null && a.length == 3;    "

//@ assert \    onnullelements(a);    " // BAD

//@ requires i == 5;    " + "  //@ modifies \\everything;    " + "  public void m1(int i) {    "

//@ assert \    ot_modified(i);    " // OK

//@ modifies \\everything;    " + "  public void m1a(int i) {    " + "    i = 5;    "

//@ assert \    ot_modified(i);    " // BAD

//@ ghost public int gi;    "

//@ requires i == 5;    " + "  //@ modifies \\everything;    " + "  public void m2() {    "

//@ assert \    ot_modified(i);    " // OK

//@ modifies \\everything;    " + "  public void m2a() {    " + "    i = 5;    "

//@ assert \    ot_modified(i);    " // BAD

//@ requires si == 5;    " + "  //@ modifies \\everything;    " + "  public void m3() {    "

//@ assert \    ot_modified(si);    " // OK

//@ modifies \\everything;    " + "  public void m3a() {    " + "    si = 5;    "

//@ assert \    ot_modified(si);    " // BAD

//@ requires gi == 5;    " + "  //@ modifies \\everything;    " + "  public void m4() {    "

//@ set gi = 5;    " + "    //@ assert \    ot_modified(gi);    " // OK

//@ modifies \\everything;    " + "  public void m4a() {    " + "    //@ set gi = 5;    "

//@ assert \    ot_modified(gi);    " // BAD


//@ requires t != null;    "

//@ modifies \\everything;    "

//@ assert \    ot_modified(t.i);    " // OK

//@ requires t != null;    "

//@ modifies \\everything;    "

//@ assert \    ot_modified(t.i) ? true: true;    " // BAD

//@ requires t == null;    "

//@ modifies \\everything;    "

//@ assert \    ot_modified(t.i) ? true: true;    " // OK

//@ modifies \\everything;    "

//@ assert \    ot_modified(t.i) ? true: true;    " // BAD

//@ requires p != null && p != this;    "

//@ modifies \\everything;    "

//@ assert pp != p;    " // OK

//@ assert pp != this;    " // OK

//@ requires p != null && p != this;    " + "  //@ modifies \\everything;    "

//@ assert pp != p;    " // BAD

//@ requires p != null && p != this;    " + "  //@ modifies \\everything;    "

//@ assert pp != this;    " // BAD

//@ requires p != null && p != this;    " + "  //@ modifies \\everything;    "

//@ assert pp != q;    " // OK

//@ requires p != null && p != this;    "

//@ modifies \\everything;    " // Line 30                                                                                                // 30

//@ assert pp != q;    " // OK

//@ modifies \\everything;    " + "  //@ ensures \\result != null && \\fresh(\\result);    "

//@ ensures \\result != p && \\result != this;    " + "  public Object m6(Object p) {    "

//@ modifies \\everything;    " + "  //@ ensures \\result == null;    " // BAD

//@ modifies \\everything;    " + "  //@ ensures \\result != null && \\fresh(\\result);    "

//@ ensures \\result == p || \\result == this;    " // BAD

//@ modifies \\everything;    "

//@ ensures \\result != null && !\\fresh(\\result);    " // BAD

//@ ghost Object oo;    "

//@ static ghost Object soo;    "

//@ modifies \    othing;    "

//@ assert pp != o && pp != oo;    " // OK

//@ modifies \    othing;    "

//@ assert pp != o;    " // BAD

//@ modifies \    othing;    "

//@ assert pp != oo;    " // BAD

//@ modifies \\everything;    "

//@ assert pp != oo;    " // OK

//@ modifies \\everything;    "

//@ assert pp != o;    " // BAD

//@ modifies \    othing;    "

//@ assert pp != so && pp != soo;    " // OK

//@ modifies \    othing;    "

//@ assert pp != so;    " // BAD

//@ modifies \    othing;    "

//@ assert pp != soo;    " // BAD

//@ modifies \\everything;    "

//@ assert pp != soo;    " // OK

//@ modifies \\everything;    "

//@ assert pp != so;    " // OK

//@ modifies \    othing;    "

//@ assert pp != o && pp != oo;    " // BAD

//@ modifies \    othing;    " + "  public void m9b(Object p) {    " + "    Object pp = c1n(p);    "

//@ assert pp != so && pp != soo;    " // BAD

//@ modifies \    othing;    "

//@ ensures \\fresh(\\result);    "

//@ modifies \    othing;    "

//@ ensures \\result == null || \\fresh(\\result);    "

//@ modifies \    othing;    "

//@ ensures true;    "

//@ modifies \\everything;    "

//@ ensures \\result != null && \\fresh(\\result);    "

//@ modifies \\everything;    "

//@ ensures true;    "

//@ requires p != null && p != this;    " + "  //@ modifies \\everything;    "

//@ assume this.k == 0;    " + "    c1(p);    " // havoc

//@ assert this.k == 0;    " // OK

//@ requires p != null && p != this;    " + "  //@ modifies \\everything;    "

//@ assume sk == 0;    " + "    c1(p);    " // havoc

//@ assert sk == 0;    " // OK

//@ requires o != null;    " + "  //@ modifies o.*;    " + "  public void c1(TestJava o) { }     "

//@ requires o != null;    " + "  //@ modifies TestJava.*;    " + "  public void c2(TestJava o) { }     "

//@ requires p != null && p != this;    " + "  //@ modifies \\everything;    "

//@ assume k == 0;    " + "    c1(this);    " // havoc

//@ assert k == 0;    " // FAILS

//@ requires p != null && p != this;    " + "  //@ modifies \\everything;    "

//@ assume sk == 0;    " + "    c1(this);    " // havoc

//@ assert sk == 0;    " // OK

//@ requires o != null;    " + "  //@ modifies o.*;    " + "  public void c1(TestJava o) { }     "

//@ requires o != null;    " + "  //@ modifies TestJava.*;    " + "  public void c2(TestJava o) { }     "

//@ requires p != null && p != this;    " + "  //@ modifies \\everything;    "

//@ assume k == 0;    " + "    c2(this);    " // havoc

//@ assert k == 0;    " // OK

//@ requires p != null && p != this;    " + "  //@ modifies \\everything;    "

//@ assume sk == 0;    " + "    c2(this);    " // havoc

//@ assert sk == 0;    " // FAILS

//@ requires o != null;    " + "  //@ modifies o.*;    " + "  public void c1(TestJava o) { }     "

//@ requires o != null;    " + "  //@ modifies TestJava.*;    " + "  public void c2(TestJava o) { }     "

//@ modifies \\everything;    "

//@ assume k == 0;    "

//@ assert k == 0;    "

//@ requires i == 0;    "

//@ modifies \\everything;    "

//@ also requires i > 0;    "

//@ modifies \    othing;    "

//@ modifies \\everything;    " + "  public void m1a() {    " + "    //@ assume k == 0;    "

//@ assert k == 0;    " // FAILS

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "

//@ modifies \\everything;    " + "  public void m2() {    " + "    //@ assume sk == 0;    "

//@ assert sk == 0;    " + "  }    "

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "}");

//@ modifies \\everything;    " + "  public void m2a() {    " + "    //@ assume sk == 0;    "

//@ assert sk == 0;    " // FAILS

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "

//@ requires a != null && a.length > 10;    " + "  //@ modifies \\everything;    "

//@ assume a[0] == 0;    " + "    c1(1);    "

//@ assert a[0] == 0;    " + "  }    "

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "}");

//@ requires a != null && a.length > 10;    " + "  //@ modifies \\everything;    "

//@ assume a[0] == 0;    " + "    c1(0);    " // modifies

//@ assert a[0] == 0;    " // FAILS

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "

//@ requires sa != null && sa.length > 10;    " + "  //@ modifies \\everything;    "

//@ assume sa[0] == 0;    " + "    c1(1);    "

//@ assert sa[0] == 0;    " + "  }    "

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "}");

//@ requires sa != null && sa.length > 10;    " + "  //@ modifies \\everything;    "

//@ assume sa[0] == 0;    " + "    c1(0);    "

//@ assert sa[0] == 0;    " // FAILS

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "}"

//@ requires sa != null && sa.length > 10;    " + "  //@ modifies \\everything;    "

//@ assume a == \\old(a);    " + "    c1(1);    "

//@ assert a == \\old(a);    " + "  }    "

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "}");

//@ requires sa != null && sa.length > 10;    " + "  //@ modifies \\everything;    "

//@ assume a == \\old(a);    " + "    c1(0);    "

//@ assert a == \\old(a);    " // FAILS

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "

//@ modifies \\everything;    " + "  public void m6(/*@ non_null*/TestJava t) {    "

//@ assume t.k == 0;    " + "    c1(1);    " + "    //@ assert t.k == 0;    " + "  }    "

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "}");

//@ modifies \\everything;    " + "  public void m6a(/*@ non_null*/TestJava t) {    "

//@ assume t.k == 0;    " + "    c1(0);    " + "    //@ assert t.k == 0;    " // FAILS

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "

//@ modifies \\everything;    " + "  public void m7() {    " + "    c1(1);    "

//@ assert sk == \\old(sk);    " // Should be OK

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "}");

//@ modifies \\everything;    " + "  public void m7a() {    " + "    c1(0);    "

//@ assert sk == \\old(sk);    " // FAILS

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "

//@ modifies k,sk;    "

//@ assume k == 0 && sk == 0;    "

//@ assert sk == 0;    "

//@ modifies k,sk;    "

//@ assume k == 0 && sk == 0;    "

//@ assert sk == 0;    " // FAILS

//@ modifies k,sk;    "

//@ assume k == 0 && sk == 0;    "

//@ assert k == 0;    " + "  }    "

//@ modifies k,sk;    "

//@ assume k == 0 && sk == 0;    "

//@ assert k == 0;    " // FAILS

//@ requires i == 0;    "

//@ modifies k;    "

//@ also requires i > 0;    "

//@ modifies sk;    "

//@ requires i == 10;    "

//@ modifies t.k;    "

//@ also requires i == 0;    "

//@ modifies \    othing;    "

//@ requires a!=null && 0<=i && i<a.length;    "

//@ modifies a[i];    "

//@ requires b!=null && 0<=i && i<b.length;    "

//@ modifies b[i];    "

//@ modifies k,sk;    " + "  public void m3() {    " + "    //@ assume k == 0 && sk == 0;    "

//@ assert k == 0;    " + "  }    "

//@ modifies k,sk;    " + "  public void m3a() {    " + "    //@ assume k == 0 && sk == 0;    "

//@ assert k == 0;    " // FAILS

//@ requires a != null && a.length == 5;    "

//@ modifies a[0];    " + "  public void m4() {    "

//@ assume a[0] == 0 && a[1] == 1;    " + "    c3(0);    " + "    //@ assert a[1] == 1;    "

//@ requires a != null && a.length == 5;    " + "  //@ modifies a[0];    "

//@ assume a[0] == 0 && a[1] == 1;    " + "    c3(0);    "

//@ assert a[0] == 0;    " // FAILS

//@ requires i == 0;    " + "  //@ modifies k;    " + "  //@ also requires i > 0;    "

//@ modifies sk;    " + "  public void c1(int i) { }     "

//@ requires i == 10;    " + "  //@ modifies t.k;    " + "  //@ also requires i == 0;    "

//@ modifies \    othing;    " + "  public void c2(int i, TestJava t) {}    "

//@ requires a!=null && 0<=i && i<a.length;    " + "  //@ modifies a[i];    "

//@ requires b!=null && 0<=i && i<b.length;    "

//@ modifies b[i];    " + "  public void c4(int i) {}    " + "

//@ requires b != null && b.length == 5;    "

//@ modifies b[0];    "

//@ assume b[0] == 0 && b[1] == 1;    "

//@ assert b[1] == 1;    "

//@ requires b != null && b.length == 5;    "

//@ modifies b[0];    "

//@ assume b[0] == 0 && b[1] == 1;    "

//@ assert b[0] == 0;    " // FAILS

//@ requires b != null && b.length == 5;    "

//@ modifies b[0];    "

//@ assume b[0] == 0 && b[1] == 1;    "

//@ requires a != null && b != null && b.length == 5  && a.length ==5;    "

//@ modifies a[0],b[0];    "

//@ assume b[0] == 0 && b[1] == 1;    "

//@ assert b[1] == 1;    "

//@ requires i == 0;    "

//@ modifies k;    "

//@ also requires i > 0;    "

//@ modifies sk;    "

//@ requires i == 10;    "

//@ modifies t.k;    "

//@ also requires i == 0;    "

//@ modifies \    othing;    "

//@ requires a!=null && 0<=i && i<a.length;    "

//@ modifies a[i];    "

//@ requires b!=null && 0<=i && i<b.length;    "

//@ modifies b[i];    "

//@ public invariant a != null && a.length == 10;    "

/*@ assignable a; */
//@ modifies a[*];    "

//@ assume a[0] == 0 && a[2] == 2;    "

//@ assert a[0] == 0;    "

//@ modifies a[*];    "

//@ assume a[0] == 0 && a[2] == 2;    "

//@ assert a[2] == 3;    " // FAILS

//@ modifies a[2 .. 4];    "

//@ modifies a[*];    "

//@ modifies a[2 .. ];    "

//@ public invariant a != null && a.length == 10;    "

//@ assignable a;    "

//@ modifies a[*];    "

//@ assume a[0] == 0 && a[2] == 2;    "

//@ assert a[0] == 0;    " // FAILS

//@ modifies a[*];    "

//@ assume a[0] == 0 && a[2] == 2;    "

//@ assert a[2] == 2;    " // FAILS

//@ modifies a[2 .. 4];    "

//@ modifies a[*];    "

//@ modifies a[2 .. ];    "

//@ public invariant a != null && a.length == 10;    "

//@ assignable a;    "

//@ modifies a[*];    "

//@ assume a[0] == 0 && a[2] == 2;    "

//@ assert a[0] == 0;    "

//@ modifies a[*];    "

//@ assume a[0] == 0 && a[9] == 2;    "

//@ assert a[9] == 2;    " // FAILS

//@ modifies a[2 .. 4];    "

//@ modifies a[*];    "

//@ modifies a[2 .. ];    "

//@ modifies \\everything;    " + "  public void z() {    " + "  }    "

//@ modifies \\everything;    " + "  public void m1() {    " + "    //@ assume a == 15 && fa == 13;    "

//@ assert fa == 13;    " // Should be OK

//@ assert a == 15;    " // Should fail

//@ assert fsa == 13;    " // OK

//@ assert fa == 15;    " // OK

//@ modifies \\everything;    " + "  public void m1() {    " + "    //@ assert fsa == 13;    " // Should

//@ assert fa == 15;    " // Should be OK

//@ modifies \\everything;    " + "  public void m2() {    " + "    //@ assert a == 17;    " // Not

//@ modifies \\everything;    " + "  public void m3() {    " + "    //@ assert fb == 16;    " // Not

/*@ code_bigint_math*/
//@ requires i >= 0;    " + "  //@ modifies k;    " + "  //@ ensures k == 10;    "

//@ signals (Exception e) k<0; signals_only Exception;    "

//@ requires i >= 0;    " + "  //@ modifies k;    " + "  //@ ensures k == 10;    "

//@ signals (Exception e) k==-11;    " + "  //@ signals_only Exception;    "

//@ requires i >= 0;    " + "  //@ modifies k;    " + "  //@ ensures k == 10;    "

//@ signals (Exception e) k==-12;    " + "  //@ signals_only Exception;    "

//@ requires i >= 0;    " + "  //@ modifies k;    " + "  //@ ensures k == 10;    "

//@ signals (Exception e) k==-13;    " // FAILS

//@ signals_only Exception;    " + "  public void m3a(int i) {    " + "    m(0);    "

//@ requires i >= 0;    " + "  //@ modifies k;    " + "  //@ ensures \\result == 12;    "

//@ signals (Exception e) false;    " + "  public int m4(int i) {    "

//@ requires i >= 0;    " + "  //@ modifies k;    " // Line

//@ ensures false;    " + "  //@ signals (Exception e) k == -11;    "

//@ signals_only Exception;    " + "  public int m5(int i) {    "

//@ requires i >= 0;    " + "  //@ modifies k;    " + "  //@ ensures false;    "

//@ signals (Exception e) k == -12;    " // Line 60

//@ signals_only Exception;    " + "  public int m6(int i) {    "

//@ requires i == 0;    " + "  //@ modifies k;    " + "  //@ ensures k>0 && \\result == i+1;    "

//@ signals (Exception e) false;    " + "  //@ also     " + "  //@ requires i > 0;    " // Line

//@ modifies k;    " + "  //@ ensures false;    " + "  //@ signals (Exception e) k == -10-i;    "

//@ signals_only Exception;    " + "  public int m(int i) {    " + "    if (i > 0) {    "

//@ code_bigint_math     " + "public class TestJava {     "

/*@ non_null*/
//@ requires false;    " + "  public static boolean bf(boolean bb) { return true; }    "

//@ requires true;    " + "  public static boolean bt(boolean bb) { return true; }    "

//@ static public invariant b;    "

//@ requires !b;    " + "  public static boolean bq(boolean bb) { return true; }    " + "


//@ ghost nullable Object oo;    " + "  //@ public static invariant bstatic;    "

//@ public invariant binstance;    " + "  //@ public initially binstance2;    "

//@ public constraint binstance2 == \\old(binstance2);    "

//@ public static constraint bstatic == \\old(bstatic);    "

/*@ non_null*/
//@ requires true;    " + "  //@ ensures \\result;    "

//@ requires false;    " + "  //@ ensures true;    " + "  public static int i(int ii) { return 0; }    "

//@ requires ii == 10;    " + "  //@ ensures true;    "

/*@ set oo = null;*/
//@ requires ii == 10;    " + "  //@ ensures true;    "


/*@ set oo = null;*/
//@ requires ii == 10;    " + "  //@ ensures true;    "

//@ requires ii == 10;    " + "  //@ ensures true;    "

//@ requires bb;    "

//@ ensures true;    "

/*@ assume b; */
/*@assert false;*/
//@ requires bb;    " + "  //@ ensures true;    "

/*@ assume b; */
/*@assert !bb;*/
//@ requires bb;    " + "  //@ ensures true;    "

/*@ assume bb; */
/*@assert b;*/
//@ requires bb;    "

//@ ensures true;    "

/*@assume z==1 ;*/
/*@ assert false; */
//@ requires bbb;    "

/*@assume true;*/
/*@assume !b;*/
/*@ assert !bb; */
//@ requires b;    "

/*@assume true;*/
/*@assume !b;*/
/*@ assert !bb; */
//@ requires bb;    "

//@ ensures true;    "

/*@assume 0==x ;*/
/*@ assert true; */
/*@ assume !bb; assume bb;*/
/*@assume bb; assume !bb; */
/*@assume bb; assume !bb; */
/*@assume bb; assume !bb; */
/*@ assume b; */
/*@ assume !b; */
/*@ assert k == 0; */
/*@ assert k != 0; */
/*@ assert i == 10; assert k == 16; */
/*@ assert k == 10; */
/*@ assert k == 11; */
/*@ assert k == 11; */
/*@ code_java_math*/
//@ static public constraint i > \\old(i);    "

//@ modifies i;    "

//@ ensures true;    "

/*@ code_bigint_math*/
//@ modifies i;    " + "  //@ ensures i == \\old(i)+2;    "

//@ modifies i;    "

//@ ensures i == \\old(i+1);    " + "  public static void bbad() { i = i - 1; }    " + "

/*@ code_java_math spec_java_math*/
//@ modifies i;    "

//@ ensures i == \\old(i)+2;    "

//@ modifies i;    "

//@ ensures i == \\old(i+1);    "

/*@ code_java_math spec_java_math*/
//@ modifies i;    "

//@ ensures i == \\old(i)+2;    "

/*@ assert i == i@x + 1 && i == (i+1)@x; */
//@ modifies i;    "

//@ ensures i == \\old(i+1);    "

/*@ assert i == i@x + 1; */
//@ modifies i;    "

/*@ assert i == this.i@x + 1; */
//@ requires a.length > 10 && a[0] >= 0;    "

//@ modifies i;    "

/*@ assert a[0]@x > -1; */
/*@ code_java_math spec_java_math*/
/*@ assert i <<< i || true; */
/*@ assert i <<<= i || true; */
//@ requires 0<=ii && ii <=3;    "

//@ ensures ii<=0 ==> \\result ==-ii;    "

//@ requires ii > -2147483648;    " // Not using

//@ ensures \\result == -ii;    "

/*@ assert i!=0; */
/*@ assert i==0; */
//@ requires ii == 10;    " + "  //@ ensures true;    "


//@ requires ii == 10;    "

//@ ensures true;    " + "  public @NonNull Object inst2(int ii) {  return null; }    " + "

//@ requires ii == 10;    " + "  //@ ensures true;    "

//@ requires ii == 10;    "

//@ ensures true;    " + "  public          Object inst2(int ii) {  return null; }    " + "

//@ requires ii == 10;    " + "  //@ ensures true;    "

//@ requires ii == 10;    " + "  //@ ensures true;    "

//@ requires ii == 10;    " + "  //@ ensures true;    "

//@ requires ii == 10;    "

//@ ensures true;    " + "  public          Object inst2(int ii) {  return null; }    " + "

/*@ non_null*/

/*@ non_null*/

/*@ non_null*/
/*@ non_null*/
//@ ensures \\result != null;    "


//@ ensures \\result != null;    "


//@ ensures \\result != null;    "

//@ ensures \\result != null;    "



//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ requires i>0;    " + "  //@ modifies j;    "

//@ ensures j == -i;    " + "  static public void m(int i) { j = -i; }    " + "  //@ requires i>1;     "

//@ modifies j;    " + "  //@ ensures \\result == -i;    "

//@ modifies j;    "

//@ ensures \\result == j;    " + "  public int instbad(boolean b, int i) { m(i); return j; }    "

//@ modifies j;    " + "  //@ ensures \\result == i;    "

//@ requires i>0;    "

//@ modifies j;    "

//@ ensures j == -i;    "

//@ requires i>1;     "

//@ modifies j;    "

//@ ensures \\result == -i;    "

//@ modifies j;    "

//@ ensures \\result == j;    "

//@ modifies j;    "

//@ ensures \\result == i;    "

/*@ code_bigint_math*/
//@ requires i>0;    "

//@ modifies j;    "

//@ ensures j == i+1 && \\result == j;    "

//@ requires i>1;     "

//@ modifies j;    "

//@ ensures \\result == \\old(i)+1;    "

//@ requires i>1;     "

//@ modifies j;    "

//@ ensures \\result == \\old(i)+3;    "

//@ requires i>1;     "

//@ modifies j;    "

//@ ensures \\result == 3*i+4;    "

//@ ensures j == i + 1;    "

//@ requires i>1;     "

//@ modifies j;    "

//@ ensures \\result == \\old(i);    "

//@ requires i>1;     "

//@ modifies j;    "

//@ ensures \\result == \\old(i)+4;    "

//@ requires i>1;     "

//@ modifies j;    " // Line 30

//@ ensures \\result == 3*i+4;    "

//@ ensures j == i + 2;    "

/*@ code_java_math*/
//@ assignable \    othing; ensures \\result == j;    "

//@ modifies j,sj;    "

//@ ensures \\result == \\old(j);    "

//@ modifies j,sj;    "

//@ ensures \\result == j;    "

//@ modifies j,sj;    "

//@ ensures \\result == sj;    "

//@ requires o!=null && p != null && o.j == 1 && p.j == 2 && j == 3;    "

//@ modifies j,sj,o.j,o.sj,p.j,p.sj;    "

//@ ensures \\result == 6;    "

//@ requires o!=null && p != null && o.j == 1 && p.j == 2 && j == 3 && o!=this && p!= this;    "

//@ modifies j,sj,o.j,o.sj,p.j,p.sj;    "

//@ ensures \\result == 6;    "

/*@ assert (\\lbl OJ o.j) + (\\lbl PJ p.j) + (\\lbl JJ j) == 6; */
//@ requires o!=null && p != null && o.j == 1 && p.j == 2 && j == 3;    "

//@ modifies j,sj,o.j,o.sj,p.j,p.sj;    "

//@ ensures \\result == 6;    "

//@ modifies j,sj;    " + "  //@ ensures \\result == 6;    "

//@ requires o!=null && p != null && sj == 3;    "

//@ modifies j,sj,o.j,o.sj,p.j,p.sj;    "

//@ ensures \\result == 9;    "

//@ assume a != null && a.length > 2 && a[0] == 1;    "

//@ loop_invariant (\\forall int k; 0<=k && k < \\count; b ==> a[k] > 0);    "

//@ assert b ==> a[1] > 0;    " + "  }    " + "}");

/*@ loop_invariant 0<=i && i<=5 && n==i; decreases 5-i; */
/*@ assert n == 5; */
/*@ loop_invariant 0<=i && i<=5 && n==i; decreases 3-i; */
/*@ assert n == 5; */
/*@ loop_invariant 0<=i && i<5 && n==i; decreases 5-i; */
/*@ assert n == 5; */
/*@ loop_invariant 0<=i && i<=5 && n==i-1; decreases 5-i; */
/*@ loop_invariant i>0; decreases i; */
/*@ reachable; */
/*@ loop_invariant i>=0; decreases i-2; */
/*@ assert i == 0; */
/*@ loop_invariant i>=0; decreases i; */
/*@ assert i == 0; */
/*@ code_java_math */
/*@ loop_invariant  i>0; decreases i; */
/*@ assert i == 0; */
/*@ code_bigint_math */
/*@ loop_invariant i>=0; decreases i-2; */
/*@ assert i == 0; */
/*@ code_bigint_math */
/*@ loop_invariant i>=0; decreases i; */
/*@ assert i == 0; */
/*@ code_bigint_math*/
/*@ loop_invariant i<=5 && i>=0; decreases i; */
/*@ assert i == 0; */
/*@ loop_invariant i<=5 && i>=0; decreases i-2; */
/*@ assert i == 0; */
/*@ loop_invariant i<=5 && i>=0; decreases i; */
/*@ assert i == 0; */
/*@ loop_invariant i<=5 && i>0; decreases i; */
/*@ assert i == 0; */
/*@ loop_invariant i>=0; decreases i; */
/*@ assert i == 0; */
/*@ loop_invariant i>=0; decreases i; */
/*@ assert i == 0; */
/*@ loop_invariant i>=0; decreases i; */
/*@ assert i == 0; */
/*@ assert i == 6; */
/*@ assert i == 5; */
/*@ assert i == 4; */
/*@ assert i == 5; */
/*@ assert i == 6; */
/*@ assert i == 5; */
/*@ assert i == 4; */
/*@ assert i == 5; */
/*@ assert j == 5; */
/*@ assert j == 6; */
/*@ assert j == 5; */
/*@ assert j == 4; */
/*@ assert j == 6; */
/*@ assert j == 5; */
/*@ assert j == 4; */
/*@ assert j == 5; */
/*@ assert i == 12; */
/*@ assert i == 5; */
/*@ assert i == 12 && i == j; */
/*@ assert i == 5; */
/*@ assert i == -2; */
/*@ assert i == 5; */
/*@ assert i == -2 && i == j; */
/*@ assert i == 5; */
/*@ assert i == 5*7; */
/*@ assert i == 5; */
/*@ assert i == 5*7 && i == j; */
/*@ assert i == 5; */
/*@ assert i == 5/7; */
/*@ assert i == 5; */
/*@ assert i == 5/7 && i == j; */
/*@ assert i == 5; */
//@ requires i > -2147483648;    "

/*@ assert j >= 0; */
//@ requires i > -2147483648;    "

/*@ assert j == -1; */
/*@ assume i > 0; */
/*@ assert (\\lblpos ISP i>0); */
/*@ assume i > 0; */
/*@ assert (\\lblneg ISN i<0); */
/*@ assume i > 0; */
/*@ assert !(\\lblneg ISN2 i>0); */
/*@ assume i > 0; */
/*@ assert (\\lblpos ISP i<0); */
/*@ assume i > 0; */
/*@ assert !(\\lblpos ISP2 i>0); */
/*@ assert o != oo;*/
/*@ assert o == oo;*/
/*@ assert o != null;*/
/*@ assert o == null;*/
/*@ assert o != oo;*/
/*@ assert o == oo;*/
/*@ assert o != null; assert o.length == 5; */
/*@ assert o.length == 6;*/
/*@non_null*/
/*@ assert a.length >= 0;*/
/*@ assert o != oo;*/
/*@ assert o == oo;*/
/*@ assert o.length == 3; assert o[1] == 11;*/
/*@ assert o.length == 4; */
/*@ assert o.length == 3; assert o[1] == 10;*/
/*@ assert o != null; assert o.length == 3; assert o[1] == 11;*/
/*@ assert o.length == 3; assert o[1] != null; assert o[1].length == 3; assert o[1][2] == 14; assert o[0] != null; assert o[0].length == 2; assert o[0][1] == 11; */
/*@ assert o.length == 3; assert o[1] != null; assert o[1].length == 3; assert o[1][2] == 14; assert o[0] != null; assert o[0].length == 2; assert o[0][1] == 11; */
/*@ assert o.length == 3; assert o[1] == null; assert o[2] != null; assert o[2].length == 1; assert o[2][0] == 15; */
/*@ assert oo[0] != oo[1]; */
/*@ assert o != oo;*/
/*@ assert o == oo;*/
/*@ assert o.length == 5; assert o[1].length == 3; */
/*@ assert o.length == 6;*/
/*@ assert o[1].length == 4;*/
/*@non_null*/
/*@ assert a.length >= 0;*/
/*@ assert o.length == 3; */
/*@ assert o.length == 2; */
/*@ assert o[1][2] == 14; */
/*@ assert o[2].length == 1; */
/*@ assert o[0].length == 2; */
/*@ assert o != null; assert o.length == 5; assert o[1] == null; */
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assume a[1] == 2; */
/*@ assert a[1] == 2; */
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assume a[1] == 2; */
/*@ assert a[1] == 3; */
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assume a[1] == 2; */
/*@ assert a[1] == 3; */
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assume a[1] == 2; */
/*@ assert a[1] == 4; */
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assume a[0] == 2; */
/*@ assert a[0] == 2; */
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assume a[0] == 2; */
/*@ assert a[0] == 4; */
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assume a[1] == 2; */
/*@ assert a[1] == 3; */
/*@ assert a[1] == 4; */
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assume a[1] == 2; */
/*@ assert a[1] == 3; */
/*@ assert a[1] == 5; */
/*@non_null*/
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assert a[0] == b[0]; */
/*@non_null*/
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assert a[0] != b[0]; */
/*@non_null*/
/*@non_null*/
/*@ assume b.length == 10 && a.length == 10;*/
/*@ assert b[0] == 7; */
/*@non_null*/
/*@non_null*/
/*@ assume b.length == 10 && a.length == 10;*/
/*@ assert b[0] == 8; */
/*@non_null*/
/*@non_null*/
/*@ assume b.length == 10 && a.length == 12;*/
/*@ assert b != null; assert a != null; assert b.length == 12; assert a.length == 12; */
/*@non_null*/
/*@assume a.length == 10; assume a[1] != null; assume a[1].length == 5; */
/*@ assume a[1][2]; */
/*@ assert a[1][2]; */
/*@non_null*/
/*@assume a.length == 10; assume a[1] != null; assume a[1].length == 5; */
/*@ assume a[1][2]; */
/*@ assert !a[1][2]; */
/*@non_null*/
/*@assume a.length == 10; assume a[1] != null; assume a[1].length == 5; */
/*@ assume a[1][2]; */
/*@ assert !a[1][2]; */
/*@non_null*/
/*@assume a.length == 10; assume a[1] != null; assume a[1].length == 5; */
/*@ assume a[1][2]; */
/*@ assert a[1][3]; */
/*@non_null*/
/*@assume a.length == 10; assume a[1] != null; assume a[1].length == 5; */
/*@ assume a[1][2]; */
/*@ assert a[0][2]; */
/*@non_null*/
/*@assume a.length == 10; assume a[1] != null; assume a[1].length == 5; */
/*@ assume a[1][2]; assume a[0] != null; */
/*@ assert a[0][2]; */
/*@non_null*/
/*@assume a.length == 10; assume a[1] != null; assume a[1].length == 5; */
/*@ assume a[1][2]; assume a[0] != null; assume a[0].length > 5; */
/*@ assert a[0][2]; */
/*@non_null*/
/*@assume a.length == 10; assume a[1] != null; assume a[0] != null; assume a[1].length == 5; assume a[0].length == 3; */
/*@ assume a[0][0]; */
/*@ assert a[0][0]; */
/*@non_null*/
/*@assume a.length == 10; assume a[1] != null; assume a[0] != null; assume a[1].length == 5; assume a[0].length == 3; */
/*@ assume a[0][0]; */
/*@ assert !a[0][0]; */
/*@non_null*/
/*@assume a.length == 10; assume a[1] != null; assume a[1].length == 5; */
/*@ assert a[0][3] == a[1][3]; */
/*@non_null*/
/*@assume a.length == 10; assume a[1] != null; assume a[1].length == 5; */
/*@ assert a[0][3] != a[1][3]; ; */
/*@non_null*/
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assert a[0] == b[0]; */
/*@non_null*/
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assert a[0] != b[0]; */
/*@non_null*/
/*@non_null*/
/*@ assume b.length == 10 && a.length == 10 && b[0] != null && a[0] != null && b[0].length == 5 && a[0].length==6;*/
/*@ assert !b[0][0]; */
/*@non_null*/
/*@non_null*/
/*@ assume b.length == 10 && a.length == 10 && b[0] != null && a[0] != null && b[0].length == 5 && a[0].length==6;*/
/*@ assert b[0][0]; */
/*@non_null*/
/*@non_null*/
/*@ assume b.length == 10 && a.length == 12;*/
/*@ assert b != null; assert a != null; assert b.length == 12; assert a.length == 12; */
/*@ nullable_by_default */
//@ public static invariant t != null;     "

/*@non_null*/
/*@ assume t.f == 2; */
/*@ assert t.f == 2; */
/*@non_null*/
/*@ assume t.f == 2; */
/*@ assert t.f == 3; */
/*@non_null*/
/*@ assume t.f == 2; */
/*@ assert t.f == 3; */
/*@non_null*/
/*@ assume t.f == 2; */
/*@ assert t.f == 4; */
/*@non_null*/
/*@ assume t.g == 2; */
/*@ assert t.g == 2; */
/*@non_null*/
/*@ assume t.g == 2; */
/*@ assert t.g == 4; */
/*@non_null*/
/*@ assume t.f == 2; */
/*@ assert t.f == 3; */
/*@ assert t.f == 4; */
/*@non_null*/
/*@ assume t.f == 2; */
/*@ assert t.f == 3; */
/*@ assert t.f == 5; */
/*@non_null*/
/*@non_null*/
/*@ assert a.f == b.f; */
/*@non_null*/
/*@non_null*/
/*@ assert a.f != b.f; */
/*@non_null*/
/*@non_null*/
/*@ assert b.f == 7; */
/*@non_null*/
/*@non_null*/
/*@ assert b.f == 8; */
/*@non_null*/
/*@non_null*/
/*@ assert a.sf == b.sf; */
/*@non_null*/
/*@non_null*/
/*@ assert a.sf != b.sf; */
/*@non_null*/
/*@non_null*/
/*@ assert 3 == b.sf; */
/*@non_null*/
/*@non_null*/
/*@ assert 3 != b.sf; */
/*@non_null*/
/*@ assert f == this.f; */
/*@ assert a == this ==> a.f == f; */
/*@non_null*/
/*@ assert f == this.f; */
/*@ assert a.f == f; */
/*@non_null*/
/*@ assert sf == this.sf; */
/*@ assert a.sf == sf; */
/*@ assume i>=-1 && i <=1; */
/*@ assert j!=0; */
/*@ assume i>=-1 && i <=1; */
/*@ assert j==1; */
/*@ assume i>=-1 && i <=1; */
/*@ assert j>0; */
/*@ assume i>=-1 && i <=1; */
/*@ assert i==0 ==> j==-1; */
/*@ assume i>=-1 && i <=1; */
/*@ assert j>=0; */
/*@ assume i>=-1 && i <=1; */
/*@ assert j>0; */
/*@ assume i>=-1 && i <=1; */
/*@ assert j>=0; */
//@ ensures i == 2;    "

//@ ensures i == 1;    "

//@ public exceptional_behavior requires b;  signals (Exception e) true; signals (RuntimeException e) true;    "

//@ also    " + "//@ public normal_behavior requires !b; ensures true;    "

//@ requires k < 0;    " + "//@ ensures true;    " + "//@ also    " + "//@ requires k > 0;    "

//@ ensures \\result == 1;    " + "public int m1() {    " + "    int i = 1;    " + "    try {    "

//@ assert e != null;    " + "        i = 2;    " + "    }    "

//@ requires k < 0;    " + "//@ ensures true;    " + "//@ also    " // Line

//@ requires k > 0;    " + "//@ ensures \\result == 1;    " + "public int m2() {    " + "    int i = 1;    "

//@ assert e != null;    " + "        i = 1;    " // Line

//@ requires i > 0;    " + "  //@ ensures i > 0;    "

/*@ assert a*2 == a + a; */
/*@ assert a * b ==
                // a *(b-1) + a; */
/*@ assert (2*a)/2 == a; */
/*@ assert a >= 0 ==> (a%3) < 3; */
/*@ assert a >= 0 ==> (a%3) >= 0; */
/*@ assert (a >= 0
                // && b > 0) ==> (a%b) >= 0; */
/*@ assert (a >= 0
                // && b > 0) ==> ((a*b)%b) == 0; */
/*@ assert (a >= 0 ) ==> ((5*a)%5) == 0; */
//@ requires i < 1000; ensures \\result == i+1;    "

//@ pure     "

/*@ assume a < 100; */
/*@ assert k == m(a); */
/*@ assume a < 100; */
/*@ assert k == m(a); */
/*@ assume a < 100; */
/*@ assert k == m(a) + m(a); */
/*@ assume a < 100; */
/*@ assert k == 1 + m(a) + m(a); */
/*@ assume a < 100; */
/*@ assert k == m(m(a+1)); */
/*@ assume a < 100; */
/*@ assert k == m(m(a+1)); */
//@ requires i < 1000; ensures \\result == i+1;    "

//@ pure     "

/*@ assume a < 100; */
/*@ assert k == m(a); */
/*@ assume a < 100; */
/*@ assert k == m(a); */
/*@ assume a < 100; */
/*@ assert k == m(a) + m(a); */
/*@ assume a < 100; */
/*@ assert k == 1 + m(a) + m(a); */
/*@ assume a < 100; */
/*@ assert k == m(m(a+1)); */
/*@ assume a < 100; */
/*@ assert k == m(m(a+1)); */
/*@ code_bigint_math*/
//@ ensures \\result == z+1;    " + "  //@ pure     "

/*@ assert k == m(); */
/*@ assert k == m(); */
/*@ assert k == m() + m(); */
/*@ assert k == 1 + m() + m(); */
/*@ assert k == m(); */
/*@ assert k == m(); */
/*@ code_bigint_math*/
//@ ensures \\result == z+1;    "

//@ pure     "

/*@ assert k == m(); */
/*@ assert k == m(); */
/*@ assert k == m() + m(); */
/*@ assert k == 1 + m() + m(); */
//@ ensures \\result > 0;    "

//@ also    "

//@ ensures \\result > ii;    "

/*@ code_bigint_math*/
//@ also public normal_behavior    "

//@ ensures \\result == i+1;    "

//@ pure    "

//@ requires a >= 0;    "

//@ ensures \\result == a+1;    "

//@ requires iii > 0;    " + "  //@ ensures \\result > 0;    " + "  abstract public int m(int iii);    "

//@ also    "

//@ ensures \\result > ii;    " + "  abstract public int m(int ii);    " + "}    "

/*@ code_bigint_math*/
//@ also    "

//@ ensures \\result == i+1;    " + "  //@ pure    " + "  public int m(int i) { return i+1; }    "

//@ ensures \\result == a+1;    " + "  public int n1(int a) { return m(a); }    "

//@ requires iii > 0;    " + "  //@ ensures \\result > 0;    " + "  abstract public int m(int iii);    "

//@ also    "

//@ requires ii > 0;    " + "  //@ ensures \\result > ii;    " + "  abstract public int m(int ii);    "

/*@ code_bigint_math*/
//@ also    "

//@ requires i > 0;    " + "  //@ ensures \\result == i+1;    " + "  //@ pure    "

//@ requires iii == 1;    "

//@ ensures \\result == iii;    "

//@ also    "

//@ requires ii == 2;    "

//@ ensures \\result == ii;    "

/*@ code_bigint_math*/
//@ also    "

//@ requires i == 3;    "

//@ ensures \\result == i;    "

//@ pure    "

//@ requires a >= 1 && a <= 3;    "

//@ ensures \\result == a;    "

//@ ensures \\result == a;    "

//@ requires 0<=ii && ii <=3;    "

//@ ensures \\result < 0;    " + "  public static int m(int ii) {     "

//@ requires ii == 2;    " + "  //@ ensures \\result == 0;    "

//@ ensures is == 6;    "

//@ ensures \\result == 1;    " + "  public static int m4(int ii) {     " + "    try { ii = 0;     "

//@ assert c == 1;     " + "    return c;     " + "  }    " + "

//@ ghost int d = c+1;    " + "    //@ assert d + c == 9;     " + "    return c;     "

//@ ghost int d = c+1;    " + "    //@ assert d + c == 10;     " + "    return c;     "

//@ ghost int d = c+1;    " + "    //@ set d = 10;    " + "    //@ assert d + c == 14;     "

//@ ghost int d = c+1;    " + "    //@ set d = 10;    " + "    //@ assert d + c == 15;     "

//@ ghost int d = c+1;    " + "    //@ debug d = 10;    " + "    //@ assert d + c == 14;     "

//@ ghost int d = c+1;    " + "    //@ debug d = 10;    " + "    //@ assert d + c == 15;     "

/*@ nullable_by_default */
/*@non_null*/
//@ requires o != null;    "

//@ public normal_behavior  ensures \\result == (oo != null);    "

/*@ nullable_by_default */
/*@non_null*/
//@ requires o != null;    " + "  public static void m2(TestJava o) {     " + "    int i = o.z();     "

//@ public normal_behavior  ensures \\result == (oo != null);    "

//@ signals_only \    othing;      public int z() { return 0; }    " + "

/*@non_null*/
//@ requires o != null;    " + "  public static void m2(TestJava o) {     " + "    int i = o.z();     "

//@ public normal_behavior  ensures \\result == (oo != null);    "

//@ signals_only \    othing;      public static int z() { return 0; }    " + "}");

/*@ nullable_by_default */
/*@ code_java_math spec_java_math*/
//@ requires a != null;    "

//@ requires a != null;    "

//@ assume a.length == 1;     "

/*@ non_null*/
/*@ non_null*/
/*@ nullable_by_default */
//@ assume o.j == 1;     " + "  }    "

/*@non_null*/
//@ assume o.j == 1;     " + "  }    "

//@ requires o != null;    " + "  public static void m2(TestJava o) {     "

//@ assume o.j == 1;     " + "  }    " + "  public static void m3(TestJava o) {     "

//@ assume o != null && o.j == 1;     " + "  }    " + "  public static void m4(TestJava o) {     "

//@ assume o == null || o.j == 1;     " + "  }    " + "  public static void m5(TestJava o) {     "

//@ assume o != null ==> o.j == 1;     " + "  }    " + "

/*@ nullable_by_default */
//@ assume o.j == 1;     " + "  }      "

//@ assume a[0] == 1;     " + "  }    "

//@ requires a != null;    " + "  public static void m2(int[] a) {     "

//@ assume a[-1] == 1;     " + "  }    " + "  //@ requires a != null;    "

//@ assume a.length == 1;     "

//@ assume a[1] == 1;     " + "  }    " + "  public static void m4(int i, int j) {     "

//@ assume i/j == 4;     " + "  }    " + "  public static void m5(int i, int j) {     "

//@ assume i%j == 4;     " + "  }    " + "  public static void m6(RuntimeException r) {     "

//@ assume ((Exception)t) != null ? true : true;     " // OK

//@ assume ((RuntimeException)t) != null ? true : true ;     " + "  }    "

/*@ non_null*/
//@ assume ((Exception)t) != null ? true : true;     " + "  }    "

/*@ non_null*/
//@ assume ((RuntimeException)t) != null ? true : true ;     " + "  }    " + "

/*@ nullable_by_default */
//@ assume o.j == 1;     "

//@ assert o.j == 1 ? true : true;     "

//@ ghost int i = o.j;     "

//@ ghost int i; debug i = o.j;     "

//@ requires o.j == 1;    "

//@ ensures t.j == 1 ? true : true;    "

//@ ghost int i; set i = o.j;     "

/*@ nullable_by_default */
//@ assume o.j == 1;     "

/*@ nullable_by_default */
//@ public invariant t.j ==1 ? true: true;    " + "

/*@ nullable_by_default */
//@ public initially t.j ? true : true;    " + "

/*@ nullable_by_default */
//@ public constraint t.j ==1 ? true: true;    " + "

/*@ nullable_by_default */
//@ assert i == 1;    "

//@ assert i == 2;    "

//@ assert i == 2;    " + "  }    " + "  public void mp() {    "

//@ assert i == 2 && j == 3;    " + "  }    " + "  public void ma() {    " + "    int i = 0;    "

//@ assert i == 1;    " + "  }    " + "  public void m1(int k) {    "

//@ assume k == 0;     " + "    try {    " + "      try {    "

//@ assert i == 2 && j == 50;    "

//@ assume k == 0;     " + "    try {    " + "    try {    " + "      try {    "

//@ assert i == 2 && j == 50;    " + "    }    "

//@ assert i == 0;    " + "  }    "

//@ assert i == 0;    "

//@ public normal_behavior     "

//@   requires i != 1 & i != 2;    "

//@   ensures \\result == 0;    "

//@ also public exceptional_behavior     "

//@   requires i == 2 && ee != null;     "

//@   signals (ArrayIndexOutOfBoundsException ex) true;     "

_by_default     "

//@ public normal_behavior     "

//@   requires i != 1 & i != 2;    "

//@   ensures \\result == 0;    "

//@ also public exceptional_behavior     "

//@   requires i == 2;     "

//@   signals (ArrayIndexOutOfBoundsException ex) true;     "

//@ public normal_behavior     "

//@   requires e != null & ee != null & ae != null;    "

//@   requires i != 1 & i != 2;    "

//@   ensures \\result == 0;    "

//@ also public exceptional_behavior     "

//@   requires e != null & ee != null & ae != null;    "

//@   requires i == 2;     "

//@   signals (ArrayIndexOutOfBoundsException ex) true;     "

/*@non_null*/
//@ assume \\typeof(o) == \\type(Object);    "

//@ assert \\typeof(o) == \\typeof(o);    "

//@ assert \\typeof(o) == \\type(Object);    "

//@ assert \\typeof(o) <: \\type(Object);    "

//@ assert \\typeof(o) <:= \\type(Object);    "

/*@non_null*/
//@ assume \\typeof(o) == \\type(Object);    "

//@ assert \\typeof(o) != \\type(Object);    "

/*@non_null*/
//@ assume \\typeof(o) == \\type(Object);    "

//@ assert \\typeof(o) == \\type(Object);    "

/*@non_null*/
//@ assume \\typeof(o) == \\type(Object);    "

//@ assert \\typeof(o) == \\type(TestJava);    "

/*@non_null*/
//@ assume \\typeof(o) == \\type(Object);    "

//@ assert \\type(TestJava) <: \\typeof(o);    "

//@ assert \\type(TestJava) <:= \\typeof(o);    "

/*@non_null*/
//@ assume \\typeof(o) == \\type(TestJava);    "

//@ assert \\typeof(o) <: \\type(Object);    " + "  }    "

/*@non_null*/
//@ assert \\typeof(o) <: \\type(Object);    " + "  }    " + "}");

/*@non_null*/
//@ assert JML.erasure(\\typeof(o)) == o.getClass();    "

//@ requires i >= 0;    " + "  //@ ensures i>0;    " + "  //@ signals (Exception e) i == 0;    "

//@ requires i >= 0;    " + "  //@ ensures i>0;    " + "  //@ signals (Exception e) i == 1;    " // FAILS

//@ requires i >= 0;    " + "  //@ ensures i>0;    " + "  //@ signals (Exception e) i == 0;    " // OK

//@ requires i >= 0;    " + "  //@ ensures i>0;    " + "  //@ signals (RuntimeException e) i == 1;    " // FAILS

//@ requires i >= 0;    " + "  //@ ensures i>0;    " + "  //@ signals (Exception e) i == 0;    "

//@ requires i >= 0;    "

//@ ensures i>0;    " + "  //@ signals (Exception e) i == 1;    " // FAILS

//@ requires i >= 0;    " + "  //@ ensures i>0;    " + "  //@ signals (RuntimeException e) i == 1;    " // OK

//@ signals_only java.io.IOException;    " // FAILS

//@ signals_only \    othing;    " // FAILS

//@ signals_only Exception;    " // OK

//@ public constraint i > \\old(i) for m1();    " + "  public void m1() {    " + "  }    "

//@ public constraint i > \\old(i) for ! m1();    " + "  public void m1() {    " + "  }    "

//@ public constraint i > \\old(i) for \\everything;    " + "  public void m1() {    "

//@ public constraint i > \\old(i) for !\    othing;    " + "  public void m1() {    " + "  }    "

//@ public constraint i > \\old(i) for \    othing;    " + "  public void m1() {    " + "  }    "

//@ public constraint i > \\old(i) for !\\everything;    " + "  public void m1() {    "

//@ public constraint i > \\old(i);    " + "  public void m1() {    " + "  }    "

//@ public constraint i > \\old(i) for m1(), m1(int);    " + "  public void m1() {    "

//@ public constraint i > \\old(i) for m1(), m1(int);    " + "  public static void m1() {    "

//@ public constraint i > \\old(i) for ! m1(), m1(int);    " + "  public void m1() {    "

//@ public constraint i > \\old(i) for TestJava();    " + "  public TestJava() {    " + "  }    " + "

//@ public constraint i > \\old(i);    " + "  public TestJava() {    " + "  }    " + "}");

//@ public static constraint i > \\old(i) for TestJava();    " + "  public TestJava() {    "

//@ public static constraint i > \\old(i);    " + "  public TestJava() {    " + "  }    " + "

//@ ghost static public int i = 0;    "

//@ public static constraint i > \\old(i);    " + "}    "

//@ ghost static public int i = 0;    "

//@ public constraint i > \\old(i);    " + "}    " + "public class TestJava implements A {     "

//@ normal_behavior     "

//@ ensures \\result == (i > 0 && i < 10);    "

//@ pure    "

//@ model public boolean m(int i);    "

//@ assert (\\forall int k; 3<k && k <7; m(k));    "

//@ assert (\\forall int k; 3<k && k <7; m(k-1));    "

//@ assert !(\\forall int k; -3<k && k <7; m(k));    "

//@ normal_behavior     "

//@ ensures \\result == (i > 0 && i < 10);    "

//@ pure function    "

//@ model public static boolean m(int i);    "

//@ pure    "

//@ assert !(\\forall int k; 3<k && k <11; m(k));    "

//@ normal_behavior     "

//@ ensures \\result == (i > 0 && i < 10);    "

//@ pure    "

//@ model public boolean m(int i);    "

//@ pure    "

//@ assert !(\\forall int k; 3<k && k <11; m(k));    "

/*@ spec_public */
//@ assignable \\everything;     "


/*@ spec_public */
//@ assignable \\everything;     "


/*@ spec_public */
/*@ spec_public */
//@ assignable \\everything;     "


//@ assert array.length >= 0;     "

//@ assert array.length <= Integer.MAX_VALUE;     "

//@ requires k >= 0;    "

//@ assert array.length >= 0;     "

//@ assert array.length <= Integer.MAX_VALUE;     "

//@ assert array.length == k;     "

//@ assert array.length >= 0;     "

//@ assert array.length <= Integer.MAX_VALUE;     "

//@ assert array.length >= 0;     "

//@ assert array.length <= Integer.MAX_VALUE;     "

//@ requires (\\forall int i; 0 <= i && i < args.length; args[i] >= 0);    "

//@ requires (\\forall int i; 0 <= i && i < args.length; args[i] >= 0); requires n == -2;    "

//@ requires (\\forall int i; 0 <= i && i < args.length; args[i] >= 0);    "

//@ requires (\\forall int i; 0 <= i && i < args.length; args[i] >= 0);"

//@ assert (\\lbl I i) + \\lbl(J j) == 0;     "

//@ assert (\\lbl I i) + \\lbl(J,j) == 0;     "

//@ nullable_by_default     "

/*@ requires o != null;     "
                        + "      ensures \\result == (j>=0);     "
                        + "     pure function */
//@ signals (NullPointerException e) positive(null,j);     "

//@ signals (NegativeArraySizeException e) positive(null,j);     "

//@ ensures j >= 0;     "

//@ ensures ii == 19; static_initializer "

//@ public final invariant ii == 19;     "

//@ public normal_behavior ensures \\result == 10 + 9; pure    "

//@ public normal_behavior ensures \\result == 19; pure    "

//@ ensures ii == 19 && jj == 21; static_initializer "

//@ public final invariant ii == 19;     "

//@ public normal_behavior ensures \\result == 10 + 9; pure    "

//@ public normal_behavior ensures \\result == 21; pure    "

//@ ensures ii == mm(); static_initializer "

//@ public final invariant ii == 19;     "

//@ public normal_behavior ensures \\result == 10 + 9; pure    "

//@ public normal_behavior ensures \\result == 19; pure    "

//@ public final invariant ii == 19;     "

//@ public normal_behavior ensures \\result == 10 + 9; pure    "

/*@ spec_public */
//@ public normal_behavior     "

//@   ensures num == 10;     "

//@   ensures A.bit == 1;     "

//@   ensures B.bit == 2;     "

//@ static_initializer     "

/*@ spec_public */
/*@ spec_public */
//@ public normal_behavior     "

//@   ensures num == 10;     "

//@   ensures A.bit == 1;     "

//@   ensures B.bit == 2;     "

//@ static_initializer     "

//@ public normal_behavior     "

//@   requires \    onnullelements(arr);     "

//@ public normal_behavior     "

//@   requires true;     "

//@ show i, j+1;    "

//@ show k;    "

//@ assert k > 0;    "

//@ show m,k;    "

//@ assert m > 0;    "

//@ public normal_behavior     "

//@   requires true;     "

//@ show i;    "

//@ public normal_behavior     "

//@   requires true;     "

//@ show i;    "

//@ show     "

//@ show i i;    "

//@ show;    "

//@ show i    "

//@ show %;    "

//@ public normal_behavior     "

//@   requires k != null && \    onnullelements(k) && \\elemtype(\\typeof(k)) <: \\type(Key);     "

//@ assert kk != null;    "

//@ assert \    onnullelements(kk);    "

//@ assert \\elemtype(\\typeof(kk)) == \\type(Key);    "

//@ public normal_behavior     "

//@   requires k != null && \    onnullelements(k) && \\elemtype(\\typeof(k)) <: \\type(Key);     "

//@ assert kk != null;    "

//@ assert \    onnullelements(kk);    "

//@ assert \\elemtype(\\typeof(kk)) == \\type(Key);    "

//@ ghost int k = 1;    "

//@ ghost int k = 2;    "

//@ ghost int i = 2;    "

//@ assert 0 <= i < 10 < 12;    "

//@ set i = 10;    "

//@ assert !(0 <= i < 10);    "

//@ assert 0 <= i < 11 == 2 <= i <= 12;    "

//@ assert 11 >= i+1 > 1 == 12 >= i > 2;    "

//@ assert 11 >= i+1 < 12;    "

//@ assert 11 >= i+1 < 12 == true;    "

//@ assert 11 >= i+1 > 1 != 12 <= i <= 22;    "

//@ signals_only \    othing;    "


//@ allow NullPointerException;     "


//@ forbid NullPointerException;     "



//@ ignore NullPointerException;     "



//@ ignore java.lang.XX;     "


//@ allow NullPointerException;     "

//@ forbid NullPointerException;     "

//@ forbid X;     "

//@ forbid ;     "

//@ forbid NullPointerException     "

//@ forbid NullPointerException, ArrayIndexOutOfBoundsException;     "

//@ forbid NullPointerException ArrayIndexOutOfBoundsException;     "

//@ forbid NullPointerException; allow NullPointerException     "

//@ ignore NullPointerException; allow NullPointerException     "

//@ ignore NullPointerException; forbid NullPointerException     "

//@ forbid java.lang.NullPointerException     "

//@ forbid java.lang.     "

/*@ pure */
//@ assert \\count >= 0;    " // OK

//@ assert \\count < a.length;    " // OK

//@ assert \\count >= 1;    " // BAD

//@ ghost int i = \\count;    " // OK

//@ assert \\count >= 0;    " // OK

//@ assert \\count < 2;    " // OK

//@ assert \\count == i;    " // OK

//@ ghost int i = \\count;    " + "      for (long kk: b) {    "

//@ assert \\count == i;    " // BAD

//@ loop_invariant \\count >= 0 && \\count <= a.length;    " // OK

//@ decreases a.length - \\count;    " // OK

//@ loop_invariant \\count >= 0 && \\count <= a.length;    " // OK

//@ loop_decreases a.length - \\count;    " // OK

//@ decreases a.length - \\count -1;    " // 0 on last

//@ decreases a.length - \\count -2;    " // BAD - last time through

//@ decreases \\count+10;    " // BAD - loop does not decrease variant

//@ loop_invariant \\count > 0 && \\count <= a.length;    " // BAD - first time through loop

//@ loop_invariant \\count >= 0 && \\count < a.length;    " // BAD - laswt time through loop

//@ assert \\count >= 0;    " // OK

//@ assert \\count < a.length;    " // OK

//@ ghost int i = \\count;    " // OK

//@ assert \\count >= 0;    " // OK

//@ assert \\count < 2;    " // OK

//@ assert \\count == i;    " // OK

//@ reachable;    " // knows that the loop is not

//@ loop_invariant \\values.size() == \\count;    " + "    for (Integer k: a) {    " + "    }    "

//@ loop_invariant \\values.size() == \\count;    " + "    for (Integer k: a) {    "

//@ assert \\values.size() == \\count;    " + "    }    " + "  }    "

//@ assert \\values.size() == \\count;    " + "    }    " + "  }    "

//@ assert \\count >= 1;    " // BAD

//@ public normal_behavior  ensures true;    " + "  public void m2() {    "

//@ assume a != null;     "

//@ assume it != null;     "

//@ public normal_behavior  ensures true;    " + "  public void m2bad() {    "

//@ assume a != null;     "

//@ assume it != null;     "

//@ public normal_behavior  ensures true;    "

//@ public normal_behavior  ensures true;    "

//@ assume values != null; set values.containsNull = true;     "

//@ assert values.content.owner == values;    "

//@ assume a != null;     "

//@ assume values.content.owner == values;    "

//@ assume it != null;     "

//@ assume values.content.owner == values;    "

//@ assert values.content.owner == values;    "

//@ ghost List<Map.Entry<String,String>> v = values;    "

//@ loop_invariant values == v && values.content.owner == values;     "

//@ assume k != null && \\typeof(k) <: \\type(Map.Entry<String,String>);     "

//@ public normal_behavior  ensures true;    "

//@ assume values != null; set values.containsNull = true;     "

//@ assert values.content.owner == values;    "

//@ assume a != null;     "

//@ assume values.content.owner == values;    "

//@ assume it != null;     "

//@ assume values.content.owner == values;    "

//@ assert values.content.owner == values;    "

//@ ghost List<Map.Entry<String,String>> v = values;    "

//@ assert values.content.owner == values;    "

//@ assume k != null &&  \\typeof(k) <: \\type(Map.Entry<String,String>);     "

//@ assert values.content.owner == values;    "

//@ public normal_behavior  ensures true;    "

//@ set values.containsNull = true;     "

//@ public normal_behavior  ensures true;    "

//@ set values.containsNull = true;     "

//@ ghost int i = \\count;    " // Out of scope

//@ ghost int i = \\count;    " // Out of scope

//@ set \\count = 6;    " // Syntax error

//@ ghost org.jmlspecs.lang.JMLList i = \\values;    " // Out

//@ ghost org.jmlspecs.lang.JMLList i = \\values;    " // Out

//@ set \\values = null;    " // Syntax error

//@ ghost org.jmlspecs.lang.JMLList i = \\values;    " // OK

//@ modifies \\everything;    "

//@ assume \    onnullelements(a);    "

//@ assume a.length > 1;    "

//@ assert a[0] != null;    " // OK

//@ modifies \\everything;    "

//@ assume \    onnullelements(a);    "

//@ assert a != null;    " // OK

//@ modifies \\everything;    "


//@ assume \    onnullelements(a);    "

//@ assert a == null;    " // BAD

//@ modifies \\everything;    "

//@ assume a != null && a.length > 1;    "

//@ assert a[0] != null;    " // BAD

//@ modifies \\everything;    "

//@ assume a != null && a.length == 0;    "

//@ assert \    onnullelements(a);    " // OK

//@ modifies \\everything;    "

//@ assume a != null && a.length == 0;    "

//@ assert (\\forall int i; 0<=i && i<a.length; a[i] != null);    " // OK

//@ requires \\elemtype(\\typeof(a)) == \\type(Object); modifies \\everything;    "

//@ assume a != null && a.length == 1;    "

//@ assert \    onnullelements(a);    " // OK

//@ modifies \\everything;    "

//@ assume a != null && a.length == 1;    "

//@ assume a[0] != null;    "

//@ assert \    onnullelements(a);    " // OK

//@ requires \\elemtype(\\typeof(a)) == \\type(Object); modifies \\everything;    "

//@ assume a != null && a.length == 2;    "

//@ assert \    onnullelements(a);    " // OK

//@ modifies \\everything;    "

//@ assume a != null && a.length == 2;    "

//@ assume a[0] != null;    "

//@ assume a[1] != null;    "

//@ assert \    onnullelements(a);    " // OK

//@ requires \\elemtype(\\typeof(a)) == \\type(Object); modifies \\everything;    "

//@ assume a != null && a.length == 3;    "

//@ assert \    onnullelements(a);    " // BAD

//@ requires \\elemtype(\\typeof(a)) == \\type(Object); modifies \\everything;    "

//@ assume \    onnullelements(a) && a.length == 3;    "

//@ assert \    onnullelements(a);    " // OK

//@ modifies \\everything;    "

//@ assume a != null && a.length == 3;    "

//@ assert \    onnullelements(a);    " // BAD

//@ requires i == 5;    " + "  //@ modifies \\everything;    " + "  public void m1(int i) {    "

//@ assert \    ot_modified(i);    " // OK

//@ modifies \\everything;    " + "  public void m1a(int i) {    " + "    i = 5;    "

//@ assert \    ot_modified(i);    " // BAD

//@ ghost public int gi;    "

//@ requires i == 5;    " + "  //@ modifies \\everything;    " + "  public void m2() {    "

//@ assert \    ot_modified(i);    " // OK

//@ modifies \\everything;    " + "  public void m2a() {    " + "    i = 5;    "

//@ assert \    ot_modified(i);    " // BAD

//@ requires si == 5;    " + "  //@ modifies \\everything;    " + "  public void m3() {    "

//@ assert \    ot_modified(si);    " // OK

//@ modifies \\everything;    " + "  public void m3a() {    " + "    si = 5;    "

//@ assert \    ot_modified(si);    " // BAD

//@ requires gi == 5;    " + "  //@ modifies \\everything;    " + "  public void m4() {    "

//@ set gi = 5;    " + "    //@ assert \    ot_modified(gi);    " // OK

//@ modifies \\everything;    " + "  public void m4a() {    " + "    //@ set gi = 5;    "

//@ assert \    ot_modified(gi);    " // BAD


//@ requires t != null;    "

//@ modifies \\everything;    "

//@ assert \    ot_modified(t.i);    " // OK

//@ requires t != null;    "

//@ modifies \\everything;    "

//@ assert \    ot_modified(t.i) ? true: true;    " // BAD

//@ requires t == null;    "

//@ modifies \\everything;    "

//@ assert \    ot_modified(t.i) ? true: true;    " // OK

//@ modifies \\everything;    "

//@ assert \    ot_modified(t.i) ? true: true;    " // BAD

//@ requires p != null && p != this;    "

//@ modifies \\everything;    "

//@ assert pp != p;    " // OK

//@ assert pp != this;    " // OK

//@ requires p != null && p != this;    " + "  //@ modifies \\everything;    "

//@ assert pp != p;    " // BAD

//@ requires p != null && p != this;    " + "  //@ modifies \\everything;    "

//@ assert pp != this;    " // BAD

//@ requires p != null && p != this;    " + "  //@ modifies \\everything;    "

//@ assert pp != q;    " // OK

//@ requires p != null && p != this;    "

//@ modifies \\everything;    " // Line 30                                                                                                // 30

//@ assert pp != q;    " // OK

//@ modifies \\everything;    " + "  //@ ensures \\result != null && \\fresh(\\result);    "

//@ ensures \\result != p && \\result != this;    " + "  public Object m6(Object p) {    "

//@ modifies \\everything;    " + "  //@ ensures \\result == null;    " // BAD

//@ modifies \\everything;    " + "  //@ ensures \\result != null && \\fresh(\\result);    "

//@ ensures \\result == p || \\result == this;    " // BAD

//@ modifies \\everything;    "

//@ ensures \\result != null && !\\fresh(\\result);    " // BAD

//@ ghost Object oo;    "

//@ static ghost Object soo;    "

//@ modifies \    othing;    "

//@ assert pp != o && pp != oo;    " // OK

//@ modifies \    othing;    "

//@ assert pp != o;    " // BAD

//@ modifies \    othing;    "

//@ assert pp != oo;    " // BAD

//@ modifies \\everything;    "

//@ assert pp != oo;    " // OK

//@ modifies \\everything;    "

//@ assert pp != o;    " // BAD

//@ modifies \    othing;    "

//@ assert pp != so && pp != soo;    " // OK

//@ modifies \    othing;    "

//@ assert pp != so;    " // BAD

//@ modifies \    othing;    "

//@ assert pp != soo;    " // BAD

//@ modifies \\everything;    "

//@ assert pp != soo;    " // OK

//@ modifies \\everything;    "

//@ assert pp != so;    " // OK

//@ modifies \    othing;    "

//@ assert pp != o && pp != oo;    " // BAD

//@ modifies \    othing;    " + "  public void m9b(Object p) {    " + "    Object pp = c1n(p);    "

//@ assert pp != so && pp != soo;    " // BAD

//@ modifies \    othing;    "

//@ ensures \\fresh(\\result);    "

//@ modifies \    othing;    "

//@ ensures \\result == null || \\fresh(\\result);    "

//@ modifies \    othing;    "

//@ ensures true;    "

//@ modifies \\everything;    "

//@ ensures \\result != null && \\fresh(\\result);    "

//@ modifies \\everything;    "

//@ ensures true;    "

//@ requires p != null && p != this;    " + "  //@ modifies \\everything;    "

//@ assume this.k == 0;    " + "    c1(p);    " // havoc

//@ assert this.k == 0;    " // OK

//@ requires p != null && p != this;    " + "  //@ modifies \\everything;    "

//@ assume sk == 0;    " + "    c1(p);    " // havoc

//@ assert sk == 0;    " // OK

//@ requires o != null;    " + "  //@ modifies o.*;    " + "  public void c1(TestJava o) { }     "

//@ requires o != null;    " + "  //@ modifies TestJava.*;    " + "  public void c2(TestJava o) { }     "

//@ requires p != null && p != this;    " + "  //@ modifies \\everything;    "

//@ assume k == 0;    " + "    c1(this);    " // havoc

//@ assert k == 0;    " // FAILS

//@ requires p != null && p != this;    " + "  //@ modifies \\everything;    "

//@ assume sk == 0;    " + "    c1(this);    " // havoc

//@ assert sk == 0;    " // OK

//@ requires o != null;    " + "  //@ modifies o.*;    " + "  public void c1(TestJava o) { }     "

//@ requires o != null;    " + "  //@ modifies TestJava.*;    " + "  public void c2(TestJava o) { }     "

//@ requires p != null && p != this;    " + "  //@ modifies \\everything;    "

//@ assume k == 0;    " + "    c2(this);    " // havoc

//@ assert k == 0;    " // OK

//@ requires p != null && p != this;    " + "  //@ modifies \\everything;    "

//@ assume sk == 0;    " + "    c2(this);    " // havoc

//@ assert sk == 0;    " // FAILS

//@ requires o != null;    " + "  //@ modifies o.*;    " + "  public void c1(TestJava o) { }     "

//@ requires o != null;    " + "  //@ modifies TestJava.*;    " + "  public void c2(TestJava o) { }     "

//@ modifies \\everything;    "

//@ assume k == 0;    "

//@ assert k == 0;    "

//@ requires i == 0;    "

//@ modifies \\everything;    "

//@ also requires i > 0;    "

//@ modifies \    othing;    "

//@ modifies \\everything;    " + "  public void m1a() {    " + "    //@ assume k == 0;    "

//@ assert k == 0;    " // FAILS

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "

//@ modifies \\everything;    " + "  public void m2() {    " + "    //@ assume sk == 0;    "

//@ assert sk == 0;    " + "  }    "

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "}");

//@ modifies \\everything;    " + "  public void m2a() {    " + "    //@ assume sk == 0;    "

//@ assert sk == 0;    " // FAILS

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "

//@ requires a != null && a.length > 10;    " + "  //@ modifies \\everything;    "

//@ assume a[0] == 0;    " + "    c1(1);    "

//@ assert a[0] == 0;    " + "  }    "

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "}");

//@ requires a != null && a.length > 10;    " + "  //@ modifies \\everything;    "

//@ assume a[0] == 0;    " + "    c1(0);    " // modifies

//@ assert a[0] == 0;    " // FAILS

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "

//@ requires sa != null && sa.length > 10;    " + "  //@ modifies \\everything;    "

//@ assume sa[0] == 0;    " + "    c1(1);    "

//@ assert sa[0] == 0;    " + "  }    "

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "}");

//@ requires sa != null && sa.length > 10;    " + "  //@ modifies \\everything;    "

//@ assume sa[0] == 0;    " + "    c1(0);    "

//@ assert sa[0] == 0;    " // FAILS

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "}"

//@ requires sa != null && sa.length > 10;    " + "  //@ modifies \\everything;    "

//@ assume a == \\old(a);    " + "    c1(1);    "

//@ assert a == \\old(a);    " + "  }    "

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "}");

//@ requires sa != null && sa.length > 10;    " + "  //@ modifies \\everything;    "

//@ assume a == \\old(a);    " + "    c1(0);    "

//@ assert a == \\old(a);    " // FAILS

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "

//@ modifies \\everything;    " + "  public void m6(/*@ non_null*/TestJava t) {    "

//@ assume t.k == 0;    " + "    c1(1);    " + "    //@ assert t.k == 0;    " + "  }    "

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "}");

//@ modifies \\everything;    " + "  public void m6a(/*@ non_null*/TestJava t) {    "

//@ assume t.k == 0;    " + "    c1(0);    " + "    //@ assert t.k == 0;    " // FAILS

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "

//@ modifies \\everything;    " + "  public void m7() {    " + "    c1(1);    "

//@ assert sk == \\old(sk);    " // Should be OK

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "}");

//@ modifies \\everything;    " + "  public void m7a() {    " + "    c1(0);    "

//@ assert sk == \\old(sk);    " // FAILS

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "

//@ modifies k,sk;    "

//@ assume k == 0 && sk == 0;    "

//@ assert sk == 0;    "

//@ modifies k,sk;    "

//@ assume k == 0 && sk == 0;    "

//@ assert sk == 0;    " // FAILS

//@ modifies k,sk;    "

//@ assume k == 0 && sk == 0;    "

//@ assert k == 0;    " + "  }    "

//@ modifies k,sk;    "

//@ assume k == 0 && sk == 0;    "

//@ assert k == 0;    " // FAILS

//@ requires i == 0;    "

//@ modifies k;    "

//@ also requires i > 0;    "

//@ modifies sk;    "

//@ requires i == 10;    "

//@ modifies t.k;    "

//@ also requires i == 0;    "

//@ modifies \    othing;    "

//@ requires a!=null && 0<=i && i<a.length;    "

//@ modifies a[i];    "

//@ requires b!=null && 0<=i && i<b.length;    "

//@ modifies b[i];    "

//@ modifies k,sk;    " + "  public void m3() {    " + "    //@ assume k == 0 && sk == 0;    "

//@ assert k == 0;    " + "  }    "

//@ modifies k,sk;    " + "  public void m3a() {    " + "    //@ assume k == 0 && sk == 0;    "

//@ assert k == 0;    " // FAILS

//@ requires a != null && a.length == 5;    "

//@ modifies a[0];    " + "  public void m4() {    "

//@ assume a[0] == 0 && a[1] == 1;    " + "    c3(0);    " + "    //@ assert a[1] == 1;    "

//@ requires a != null && a.length == 5;    " + "  //@ modifies a[0];    "

//@ assume a[0] == 0 && a[1] == 1;    " + "    c3(0);    "

//@ assert a[0] == 0;    " // FAILS

//@ requires i == 0;    " + "  //@ modifies k;    " + "  //@ also requires i > 0;    "

//@ modifies sk;    " + "  public void c1(int i) { }     "

//@ requires i == 10;    " + "  //@ modifies t.k;    " + "  //@ also requires i == 0;    "

//@ modifies \    othing;    " + "  public void c2(int i, TestJava t) {}    "

//@ requires a!=null && 0<=i && i<a.length;    " + "  //@ modifies a[i];    "

//@ requires b!=null && 0<=i && i<b.length;    "

//@ modifies b[i];    " + "  public void c4(int i) {}    " + "

//@ requires b != null && b.length == 5;    "

//@ modifies b[0];    "

//@ assume b[0] == 0 && b[1] == 1;    "

//@ assert b[1] == 1;    "

//@ requires b != null && b.length == 5;    "

//@ modifies b[0];    "

//@ assume b[0] == 0 && b[1] == 1;    "

//@ assert b[0] == 0;    " // FAILS

//@ requires b != null && b.length == 5;    "

//@ modifies b[0];    "

//@ assume b[0] == 0 && b[1] == 1;    "

//@ requires a != null && b != null && b.length == 5  && a.length ==5;    "

//@ modifies a[0],b[0];    "

//@ assume b[0] == 0 && b[1] == 1;    "

//@ assert b[1] == 1;    "

//@ requires i == 0;    "

//@ modifies k;    "

//@ also requires i > 0;    "

//@ modifies sk;    "

//@ requires i == 10;    "

//@ modifies t.k;    "

//@ also requires i == 0;    "

//@ modifies \    othing;    "

//@ requires a!=null && 0<=i && i<a.length;    "

//@ modifies a[i];    "

//@ requires b!=null && 0<=i && i<b.length;    "

//@ modifies b[i];    "

//@ public invariant a != null && a.length == 10;    "

/*@ assignable a; */
//@ modifies a[*];    "

//@ assume a[0] == 0 && a[2] == 2;    "

//@ assert a[0] == 0;    "

//@ modifies a[*];    "

//@ assume a[0] == 0 && a[2] == 2;    "

//@ assert a[2] == 3;    " // FAILS

//@ modifies a[2 .. 4];    "

//@ modifies a[*];    "

//@ modifies a[2 .. ];    "

//@ public invariant a != null && a.length == 10;    "

//@ assignable a;    "

//@ modifies a[*];    "

//@ assume a[0] == 0 && a[2] == 2;    "

//@ assert a[0] == 0;    " // FAILS

//@ modifies a[*];    "

//@ assume a[0] == 0 && a[2] == 2;    "

//@ assert a[2] == 2;    " // FAILS

//@ modifies a[2 .. 4];    "

//@ modifies a[*];    "

//@ modifies a[2 .. ];    "

//@ public invariant a != null && a.length == 10;    "

//@ assignable a;    "

//@ modifies a[*];    "

//@ assume a[0] == 0 && a[2] == 2;    "

//@ assert a[0] == 0;    "

//@ modifies a[*];    "

//@ assume a[0] == 0 && a[9] == 2;    "

//@ assert a[9] == 2;    " // FAILS

//@ modifies a[2 .. 4];    "

//@ modifies a[*];    "

//@ modifies a[2 .. ];    "

//@ modifies \\everything;    " + "  public void z() {    " + "  }    "

//@ modifies \\everything;    " + "  public void m1() {    " + "    //@ assume a == 15 && fa == 13;    "

//@ assert fa == 13;    " // Should be OK

//@ assert a == 15;    " // Should fail

//@ assert fsa == 13;    " // OK

//@ assert fa == 15;    " // OK

//@ modifies \\everything;    " + "  public void m1() {    " + "    //@ assert fsa == 13;    " // Should

//@ assert fa == 15;    " // Should be OK

//@ modifies \\everything;    " + "  public void m2() {    " + "    //@ assert a == 17;    " // Not

//@ modifies \\everything;    " + "  public void m3() {    " + "    //@ assert fb == 16;    " // Not

/*@ code_bigint_math*/
//@ requires i >= 0;    " + "  //@ modifies k;    " + "  //@ ensures k == 10;    "

//@ signals (Exception e) k<0; signals_only Exception;    "

//@ requires i >= 0;    " + "  //@ modifies k;    " + "  //@ ensures k == 10;    "

//@ signals (Exception e) k==-11;    " + "  //@ signals_only Exception;    "

//@ requires i >= 0;    " + "  //@ modifies k;    " + "  //@ ensures k == 10;    "

//@ signals (Exception e) k==-12;    " + "  //@ signals_only Exception;    "

//@ requires i >= 0;    " + "  //@ modifies k;    " + "  //@ ensures k == 10;    "

//@ signals (Exception e) k==-13;    " // FAILS

//@ signals_only Exception;    " + "  public void m3a(int i) {    " + "    m(0);    "

//@ requires i >= 0;    " + "  //@ modifies k;    " + "  //@ ensures \\result == 12;    "

//@ signals (Exception e) false;    " + "  public int m4(int i) {    "

//@ requires i >= 0;    " + "  //@ modifies k;    " // Line

//@ ensures false;    " + "  //@ signals (Exception e) k == -11;    "

//@ signals_only Exception;    " + "  public int m5(int i) {    "

//@ requires i >= 0;    " + "  //@ modifies k;    " + "  //@ ensures false;    "

//@ signals (Exception e) k == -12;    " // Line 60

//@ signals_only Exception;    " + "  public int m6(int i) {    "

//@ requires i == 0;    " + "  //@ modifies k;    " + "  //@ ensures k>0 && \\result == i+1;    "

//@ signals (Exception e) false;    " + "  //@ also     " + "  //@ requires i > 0;    " // Line

//@ modifies k;    " + "  //@ ensures false;    " + "  //@ signals (Exception e) k == -10-i;    "

//@ signals_only Exception;    " + "  public int m(int i) {    " + "    if (i > 0) {    "

//@ code_bigint_math     " + "public class TestJava {     "

/*@ non_null*/
//@ requires false;    " + "  public static boolean bf(boolean bb) { return true; }    "

//@ requires true;    " + "  public static boolean bt(boolean bb) { return true; }    "

//@ static public invariant b;    "

//@ requires !b;    " + "  public static boolean bq(boolean bb) { return true; }    " + "


//@ ghost nullable Object oo;    " + "  //@ public static invariant bstatic;    "

//@ public invariant binstance;    " + "  //@ public initially binstance2;    "

//@ public constraint binstance2 == \\old(binstance2);    "

//@ public static constraint bstatic == \\old(bstatic);    "

/*@ non_null*/
//@ requires true;    " + "  //@ ensures \\result;    "

//@ requires false;    " + "  //@ ensures true;    " + "  public static int i(int ii) { return 0; }    "

//@ requires ii == 10;    " + "  //@ ensures true;    "

/*@ set oo = null;*/
//@ requires ii == 10;    " + "  //@ ensures true;    "


/*@ set oo = null;*/
//@ requires ii == 10;    " + "  //@ ensures true;    "

//@ requires ii == 10;    " + "  //@ ensures true;    "

//@ requires bb;    "

//@ ensures true;    "

/*@ assume b; */
/*@assert false;*/
//@ requires bb;    " + "  //@ ensures true;    "

/*@ assume b; */
/*@assert !bb;*/
//@ requires bb;    " + "  //@ ensures true;    "

/*@ assume bb; */
/*@assert b;*/
//@ requires bb;    "

//@ ensures true;    "

/*@assume z==1 ;*/
/*@ assert false; */
//@ requires bbb;    "

/*@assume true;*/
/*@assume !b;*/
/*@ assert !bb; */
//@ requires b;    "

/*@assume true;*/
/*@assume !b;*/
/*@ assert !bb; */
//@ requires bb;    "

//@ ensures true;    "

/*@assume 0==x ;*/
/*@ assert true; */
/*@ assume !bb; assume bb;*/
/*@assume bb; assume !bb; */
/*@assume bb; assume !bb; */
/*@assume bb; assume !bb; */
/*@ assume b; */
/*@ assume !b; */
/*@ assert k == 0; */
/*@ assert k != 0; */
/*@ assert i == 10; assert k == 16; */
/*@ assert k == 10; */
/*@ assert k == 11; */
/*@ assert k == 11; */
/*@ code_java_math*/
//@ static public constraint i > \\old(i);    "

//@ modifies i;    "

//@ ensures true;    "

/*@ code_bigint_math*/
//@ modifies i;    " + "  //@ ensures i == \\old(i)+2;    "

//@ modifies i;    "

//@ ensures i == \\old(i+1);    " + "  public static void bbad() { i = i - 1; }    " + "

/*@ code_java_math spec_java_math*/
//@ modifies i;    "

//@ ensures i == \\old(i)+2;    "

//@ modifies i;    "

//@ ensures i == \\old(i+1);    "

/*@ code_java_math spec_java_math*/
//@ modifies i;    "

//@ ensures i == \\old(i)+2;    "

/*@ assert i == i@x + 1 && i == (i+1)@x; */
//@ modifies i;    "

//@ ensures i == \\old(i+1);    "

/*@ assert i == i@x + 1; */
//@ modifies i;    "

/*@ assert i == this.i@x + 1; */
//@ requires a.length > 10 && a[0] >= 0;    "

//@ modifies i;    "

/*@ assert a[0]@x > -1; */
/*@ code_java_math spec_java_math*/
/*@ assert i <<< i || true; */
/*@ assert i <<<= i || true; */
//@ requires 0<=ii && ii <=3;    "

//@ ensures ii<=0 ==> \\result ==-ii;    "

//@ requires ii > -2147483648;    " // Not using

//@ ensures \\result == -ii;    "

/*@ assert i!=0; */
/*@ assert i==0; */
//@ requires ii == 10;    " + "  //@ ensures true;    "


//@ requires ii == 10;    "

//@ ensures true;    " + "  public @NonNull Object inst2(int ii) {  return null; }    " + "

//@ requires ii == 10;    " + "  //@ ensures true;    "

//@ requires ii == 10;    "

//@ ensures true;    " + "  public          Object inst2(int ii) {  return null; }    " + "

//@ requires ii == 10;    " + "  //@ ensures true;    "

//@ requires ii == 10;    " + "  //@ ensures true;    "

//@ requires ii == 10;    " + "  //@ ensures true;    "

//@ requires ii == 10;    "

//@ ensures true;    " + "  public          Object inst2(int ii) {  return null; }    " + "

/*@ non_null*/

/*@ non_null*/

/*@ non_null*/
/*@ non_null*/
//@ ensures \\result != null;    "


//@ ensures \\result != null;    "


//@ ensures \\result != null;    "

//@ ensures \\result != null;    "



//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ requires i>0;    " + "  //@ modifies j;    "

//@ ensures j == -i;    " + "  static public void m(int i) { j = -i; }    " + "  //@ requires i>1;     "

//@ modifies j;    " + "  //@ ensures \\result == -i;    "

//@ modifies j;    "

//@ ensures \\result == j;    " + "  public int instbad(boolean b, int i) { m(i); return j; }    "

//@ modifies j;    " + "  //@ ensures \\result == i;    "

//@ requires i>0;    "

//@ modifies j;    "

//@ ensures j == -i;    "

//@ requires i>1;     "

//@ modifies j;    "

//@ ensures \\result == -i;    "

//@ modifies j;    "

//@ ensures \\result == j;    "

//@ modifies j;    "

//@ ensures \\result == i;    "

/*@ code_bigint_math*/
//@ requires i>0;    "

//@ modifies j;    "

//@ ensures j == i+1 && \\result == j;    "

//@ requires i>1;     "

//@ modifies j;    "

//@ ensures \\result == \\old(i)+1;    "

//@ requires i>1;     "

//@ modifies j;    "

//@ ensures \\result == \\old(i)+3;    "

//@ requires i>1;     "

//@ modifies j;    "

//@ ensures \\result == 3*i+4;    "

//@ ensures j == i + 1;    "

//@ requires i>1;     "

//@ modifies j;    "

//@ ensures \\result == \\old(i);    "

//@ requires i>1;     "

//@ modifies j;    "

//@ ensures \\result == \\old(i)+4;    "

//@ requires i>1;     "

//@ modifies j;    " // Line 30

//@ ensures \\result == 3*i+4;    "

//@ ensures j == i + 2;    "

/*@ code_java_math*/
//@ assignable \    othing; ensures \\result == j;    "

//@ modifies j,sj;    "

//@ ensures \\result == \\old(j);    "

//@ modifies j,sj;    "

//@ ensures \\result == j;    "

//@ modifies j,sj;    "

//@ ensures \\result == sj;    "

//@ requires o!=null && p != null && o.j == 1 && p.j == 2 && j == 3;    "

//@ modifies j,sj,o.j,o.sj,p.j,p.sj;    "

//@ ensures \\result == 6;    "

//@ requires o!=null && p != null && o.j == 1 && p.j == 2 && j == 3 && o!=this && p!= this;    "

//@ modifies j,sj,o.j,o.sj,p.j,p.sj;    "

//@ ensures \\result == 6;    "

/*@ assert (\\lbl OJ o.j) + (\\lbl PJ p.j) + (\\lbl JJ j) == 6; */
//@ requires o!=null && p != null && o.j == 1 && p.j == 2 && j == 3;    "

//@ modifies j,sj,o.j,o.sj,p.j,p.sj;    "

//@ ensures \\result == 6;    "

//@ modifies j,sj;    " + "  //@ ensures \\result == 6;    "

//@ requires o!=null && p != null && sj == 3;    "

//@ modifies j,sj,o.j,o.sj,p.j,p.sj;    "

//@ ensures \\result == 9;    "

//@ assume a != null && a.length > 2 && a[0] == 1;    "

//@ loop_invariant (\\forall int k; 0<=k && k < \\count; b ==> a[k] > 0);    "

//@ assert b ==> a[1] > 0;    " + "  }    " + "}");

/*@ loop_invariant 0<=i && i<=5 && n==i; decreases 5-i; */
/*@ assert n == 5; */
/*@ loop_invariant 0<=i && i<=5 && n==i; decreases 3-i; */
/*@ assert n == 5; */
/*@ loop_invariant 0<=i && i<5 && n==i; decreases 5-i; */
/*@ assert n == 5; */
/*@ loop_invariant 0<=i && i<=5 && n==i-1; decreases 5-i; */
/*@ loop_invariant i>0; decreases i; */
/*@ reachable; */
/*@ loop_invariant i>=0; decreases i-2; */
/*@ assert i == 0; */
/*@ loop_invariant i>=0; decreases i; */
/*@ assert i == 0; */
/*@ code_java_math */
/*@ loop_invariant  i>0; decreases i; */
/*@ assert i == 0; */
/*@ code_bigint_math */
/*@ loop_invariant i>=0; decreases i-2; */
/*@ assert i == 0; */
/*@ code_bigint_math */
/*@ loop_invariant i>=0; decreases i; */
/*@ assert i == 0; */
/*@ code_bigint_math*/
/*@ loop_invariant i<=5 && i>=0; decreases i; */
/*@ assert i == 0; */
/*@ loop_invariant i<=5 && i>=0; decreases i-2; */
/*@ assert i == 0; */
/*@ loop_invariant i<=5 && i>=0; decreases i; */
/*@ assert i == 0; */
/*@ loop_invariant i<=5 && i>0; decreases i; */
/*@ assert i == 0; */
/*@ loop_invariant i>=0; decreases i; */
/*@ assert i == 0; */
/*@ loop_invariant i>=0; decreases i; */
/*@ assert i == 0; */
/*@ loop_invariant i>=0; decreases i; */
/*@ assert i == 0; */
/*@ assert i == 6; */
/*@ assert i == 5; */
/*@ assert i == 4; */
/*@ assert i == 5; */
/*@ assert i == 6; */
/*@ assert i == 5; */
/*@ assert i == 4; */
/*@ assert i == 5; */
/*@ assert j == 5; */
/*@ assert j == 6; */
/*@ assert j == 5; */
/*@ assert j == 4; */
/*@ assert j == 6; */
/*@ assert j == 5; */
/*@ assert j == 4; */
/*@ assert j == 5; */
/*@ assert i == 12; */
/*@ assert i == 5; */
/*@ assert i == 12 && i == j; */
/*@ assert i == 5; */
/*@ assert i == -2; */
/*@ assert i == 5; */
/*@ assert i == -2 && i == j; */
/*@ assert i == 5; */
/*@ assert i == 5*7; */
/*@ assert i == 5; */
/*@ assert i == 5*7 && i == j; */
/*@ assert i == 5; */
/*@ assert i == 5/7; */
/*@ assert i == 5; */
/*@ assert i == 5/7 && i == j; */
/*@ assert i == 5; */
//@ requires i > -2147483648;    "

/*@ assert j >= 0; */
//@ requires i > -2147483648;    "

/*@ assert j == -1; */
/*@ assume i > 0; */
/*@ assert (\\lblpos ISP i>0); */
/*@ assume i > 0; */
/*@ assert (\\lblneg ISN i<0); */
/*@ assume i > 0; */
/*@ assert !(\\lblneg ISN2 i>0); */
/*@ assume i > 0; */
/*@ assert (\\lblpos ISP i<0); */
/*@ assume i > 0; */
/*@ assert !(\\lblpos ISP2 i>0); */
/*@ assert o != oo;*/
/*@ assert o == oo;*/
/*@ assert o != null;*/
/*@ assert o == null;*/
/*@ assert o != oo;*/
/*@ assert o == oo;*/
/*@ assert o != null; assert o.length == 5; */
/*@ assert o.length == 6;*/
/*@non_null*/
/*@ assert a.length >= 0;*/
/*@ assert o != oo;*/
/*@ assert o == oo;*/
/*@ assert o.length == 3; assert o[1] == 11;*/
/*@ assert o.length == 4; */
/*@ assert o.length == 3; assert o[1] == 10;*/
/*@ assert o != null; assert o.length == 3; assert o[1] == 11;*/
/*@ assert o.length == 3; assert o[1] != null; assert o[1].length == 3; assert o[1][2] == 14; assert o[0] != null; assert o[0].length == 2; assert o[0][1] == 11; */
/*@ assert o.length == 3; assert o[1] != null; assert o[1].length == 3; assert o[1][2] == 14; assert o[0] != null; assert o[0].length == 2; assert o[0][1] == 11; */
/*@ assert o.length == 3; assert o[1] == null; assert o[2] != null; assert o[2].length == 1; assert o[2][0] == 15; */
/*@ assert oo[0] != oo[1]; */
/*@ assert o != oo;*/
/*@ assert o == oo;*/
/*@ assert o.length == 5; assert o[1].length == 3; */
/*@ assert o.length == 6;*/
/*@ assert o[1].length == 4;*/
/*@non_null*/
/*@ assert a.length >= 0;*/
/*@ assert o.length == 3; */
/*@ assert o.length == 2; */
/*@ assert o[1][2] == 14; */
/*@ assert o[2].length == 1; */
/*@ assert o[0].length == 2; */
/*@ assert o != null; assert o.length == 5; assert o[1] == null; */
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assume a[1] == 2; */
/*@ assert a[1] == 2; */
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assume a[1] == 2; */
/*@ assert a[1] == 3; */
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assume a[1] == 2; */
/*@ assert a[1] == 3; */
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assume a[1] == 2; */
/*@ assert a[1] == 4; */
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assume a[0] == 2; */
/*@ assert a[0] == 2; */
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assume a[0] == 2; */
/*@ assert a[0] == 4; */
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assume a[1] == 2; */
/*@ assert a[1] == 3; */
/*@ assert a[1] == 4; */
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assume a[1] == 2; */
/*@ assert a[1] == 3; */
/*@ assert a[1] == 5; */
/*@non_null*/
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assert a[0] == b[0]; */
/*@non_null*/
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assert a[0] != b[0]; */
/*@non_null*/
/*@non_null*/
/*@ assume b.length == 10 && a.length == 10;*/
/*@ assert b[0] == 7; */
/*@non_null*/
/*@non_null*/
/*@ assume b.length == 10 && a.length == 10;*/
/*@ assert b[0] == 8; */
/*@non_null*/
/*@non_null*/
/*@ assume b.length == 10 && a.length == 12;*/
/*@ assert b != null; assert a != null; assert b.length == 12; assert a.length == 12; */
/*@non_null*/
/*@assume a.length == 10; assume a[1] != null; assume a[1].length == 5; */
/*@ assume a[1][2]; */
/*@ assert a[1][2]; */
/*@non_null*/
/*@assume a.length == 10; assume a[1] != null; assume a[1].length == 5; */
/*@ assume a[1][2]; */
/*@ assert !a[1][2]; */
/*@non_null*/
/*@assume a.length == 10; assume a[1] != null; assume a[1].length == 5; */
/*@ assume a[1][2]; */
/*@ assert !a[1][2]; */
/*@non_null*/
/*@assume a.length == 10; assume a[1] != null; assume a[1].length == 5; */
/*@ assume a[1][2]; */
/*@ assert a[1][3]; */
/*@non_null*/
/*@assume a.length == 10; assume a[1] != null; assume a[1].length == 5; */
/*@ assume a[1][2]; */
/*@ assert a[0][2]; */
/*@non_null*/
/*@assume a.length == 10; assume a[1] != null; assume a[1].length == 5; */
/*@ assume a[1][2]; assume a[0] != null; */
/*@ assert a[0][2]; */
/*@non_null*/
/*@assume a.length == 10; assume a[1] != null; assume a[1].length == 5; */
/*@ assume a[1][2]; assume a[0] != null; assume a[0].length > 5; */
/*@ assert a[0][2]; */
/*@non_null*/
/*@assume a.length == 10; assume a[1] != null; assume a[0] != null; assume a[1].length == 5; assume a[0].length == 3; */
/*@ assume a[0][0]; */
/*@ assert a[0][0]; */
/*@non_null*/
/*@assume a.length == 10; assume a[1] != null; assume a[0] != null; assume a[1].length == 5; assume a[0].length == 3; */
/*@ assume a[0][0]; */
/*@ assert !a[0][0]; */
/*@non_null*/
/*@assume a.length == 10; assume a[1] != null; assume a[1].length == 5; */
/*@ assert a[0][3] == a[1][3]; */
/*@non_null*/
/*@assume a.length == 10; assume a[1] != null; assume a[1].length == 5; */
/*@ assert a[0][3] != a[1][3]; ; */
/*@non_null*/
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assert a[0] == b[0]; */
/*@non_null*/
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assert a[0] != b[0]; */
/*@non_null*/
/*@non_null*/
/*@ assume b.length == 10 && a.length == 10 && b[0] != null && a[0] != null && b[0].length == 5 && a[0].length==6;*/
/*@ assert !b[0][0]; */
/*@non_null*/
/*@non_null*/
/*@ assume b.length == 10 && a.length == 10 && b[0] != null && a[0] != null && b[0].length == 5 && a[0].length==6;*/
/*@ assert b[0][0]; */
/*@non_null*/
/*@non_null*/
/*@ assume b.length == 10 && a.length == 12;*/
/*@ assert b != null; assert a != null; assert b.length == 12; assert a.length == 12; */
/*@ nullable_by_default */
//@ public static invariant t != null;     "

/*@non_null*/
/*@ assume t.f == 2; */
/*@ assert t.f == 2; */
/*@non_null*/
/*@ assume t.f == 2; */
/*@ assert t.f == 3; */
/*@non_null*/
/*@ assume t.f == 2; */
/*@ assert t.f == 3; */
/*@non_null*/
/*@ assume t.f == 2; */
/*@ assert t.f == 4; */
/*@non_null*/
/*@ assume t.g == 2; */
/*@ assert t.g == 2; */
/*@non_null*/
/*@ assume t.g == 2; */
/*@ assert t.g == 4; */
/*@non_null*/
/*@ assume t.f == 2; */
/*@ assert t.f == 3; */
/*@ assert t.f == 4; */
/*@non_null*/
/*@ assume t.f == 2; */
/*@ assert t.f == 3; */
/*@ assert t.f == 5; */
/*@non_null*/
/*@non_null*/
/*@ assert a.f == b.f; */
/*@non_null*/
/*@non_null*/
/*@ assert a.f != b.f; */
/*@non_null*/
/*@non_null*/
/*@ assert b.f == 7; */
/*@non_null*/
/*@non_null*/
/*@ assert b.f == 8; */
/*@non_null*/
/*@non_null*/
/*@ assert a.sf == b.sf; */
/*@non_null*/
/*@non_null*/
/*@ assert a.sf != b.sf; */
/*@non_null*/
/*@non_null*/
/*@ assert 3 == b.sf; */
/*@non_null*/
/*@non_null*/
/*@ assert 3 != b.sf; */
/*@non_null*/
/*@ assert f == this.f; */
/*@ assert a == this ==> a.f == f; */
/*@non_null*/
/*@ assert f == this.f; */
/*@ assert a.f == f; */
/*@non_null*/
/*@ assert sf == this.sf; */
/*@ assert a.sf == sf; */
/*@ assume i>=-1 && i <=1; */
/*@ assert j!=0; */
/*@ assume i>=-1 && i <=1; */
/*@ assert j==1; */
/*@ assume i>=-1 && i <=1; */
/*@ assert j>0; */
/*@ assume i>=-1 && i <=1; */
/*@ assert i==0 ==> j==-1; */
/*@ assume i>=-1 && i <=1; */
/*@ assert j>=0; */
/*@ assume i>=-1 && i <=1; */
/*@ assert j>0; */
/*@ assume i>=-1 && i <=1; */
/*@ assert j>=0; */
//@ ensures i == 2;    "

//@ ensures i == 1;    "

//@ public exceptional_behavior requires b;  signals (Exception e) true; signals (RuntimeException e) true;    "

//@ also    " + "//@ public normal_behavior requires !b; ensures true;    "

//@ requires k < 0;    " + "//@ ensures true;    " + "//@ also    " + "//@ requires k > 0;    "

//@ ensures \\result == 1;    " + "public int m1() {    " + "    int i = 1;    " + "    try {    "

//@ assert e != null;    " + "        i = 2;    " + "    }    "

//@ requires k < 0;    " + "//@ ensures true;    " + "//@ also    " // Line

//@ requires k > 0;    " + "//@ ensures \\result == 1;    " + "public int m2() {    " + "    int i = 1;    "

//@ assert e != null;    " + "        i = 1;    " // Line

//@ requires i > 0;    " + "  //@ ensures i > 0;    "

/*@ assert a*2 == a + a; */
/*@ assert a * b ==
                // a *(b-1) + a; */
/*@ assert (2*a)/2 == a; */
/*@ assert a >= 0 ==> (a%3) < 3; */
/*@ assert a >= 0 ==> (a%3) >= 0; */
/*@ assert (a >= 0
                // && b > 0) ==> (a%b) >= 0; */
/*@ assert (a >= 0
                // && b > 0) ==> ((a*b)%b) == 0; */
/*@ assert (a >= 0 ) ==> ((5*a)%5) == 0; */
//@ requires i < 1000; ensures \\result == i+1;    "

//@ pure     "

/*@ assume a < 100; */
/*@ assert k == m(a); */
/*@ assume a < 100; */
/*@ assert k == m(a); */
/*@ assume a < 100; */
/*@ assert k == m(a) + m(a); */
/*@ assume a < 100; */
/*@ assert k == 1 + m(a) + m(a); */
/*@ assume a < 100; */
/*@ assert k == m(m(a+1)); */
/*@ assume a < 100; */
/*@ assert k == m(m(a+1)); */
//@ requires i < 1000; ensures \\result == i+1;    "

//@ pure     "

/*@ assume a < 100; */
/*@ assert k == m(a); */
/*@ assume a < 100; */
/*@ assert k == m(a); */
/*@ assume a < 100; */
/*@ assert k == m(a) + m(a); */
/*@ assume a < 100; */
/*@ assert k == 1 + m(a) + m(a); */
/*@ assume a < 100; */
/*@ assert k == m(m(a+1)); */
/*@ assume a < 100; */
/*@ assert k == m(m(a+1)); */
/*@ code_bigint_math*/
//@ ensures \\result == z+1;    " + "  //@ pure     "

/*@ assert k == m(); */
/*@ assert k == m(); */
/*@ assert k == m() + m(); */
/*@ assert k == 1 + m() + m(); */
/*@ assert k == m(); */
/*@ assert k == m(); */
/*@ code_bigint_math*/
//@ ensures \\result == z+1;    "

//@ pure     "

/*@ assert k == m(); */
/*@ assert k == m(); */
/*@ assert k == m() + m(); */
/*@ assert k == 1 + m() + m(); */
//@ ensures \\result > 0;    "

//@ also    "

//@ ensures \\result > ii;    "

/*@ code_bigint_math*/
//@ also public normal_behavior    "

//@ ensures \\result == i+1;    "

//@ pure    "

//@ requires a >= 0;    "

//@ ensures \\result == a+1;    "

//@ requires iii > 0;    " + "  //@ ensures \\result > 0;    " + "  abstract public int m(int iii);    "

//@ also    "

//@ ensures \\result > ii;    " + "  abstract public int m(int ii);    " + "}    "

/*@ code_bigint_math*/
//@ also    "

//@ ensures \\result == i+1;    " + "  //@ pure    " + "  public int m(int i) { return i+1; }    "

//@ ensures \\result == a+1;    " + "  public int n1(int a) { return m(a); }    "

//@ requires iii > 0;    " + "  //@ ensures \\result > 0;    " + "  abstract public int m(int iii);    "

//@ also    "

//@ requires ii > 0;    " + "  //@ ensures \\result > ii;    " + "  abstract public int m(int ii);    "

/*@ code_bigint_math*/
//@ also    "

//@ requires i > 0;    " + "  //@ ensures \\result == i+1;    " + "  //@ pure    "

//@ requires iii == 1;    "

//@ ensures \\result == iii;    "

//@ also    "

//@ requires ii == 2;    "

//@ ensures \\result == ii;    "

/*@ code_bigint_math*/
//@ also    "

//@ requires i == 3;    "

//@ ensures \\result == i;    "

//@ pure    "

//@ requires a >= 1 && a <= 3;    "

//@ ensures \\result == a;    "

//@ ensures \\result == a;    "

//@ requires 0<=ii && ii <=3;    "

//@ ensures \\result < 0;    " + "  public static int m(int ii) {     "

//@ requires ii == 2;    " + "  //@ ensures \\result == 0;    "

//@ ensures is == 6;    "

//@ ensures \\result == 1;    " + "  public static int m4(int ii) {     " + "    try { ii = 0;     "

//@ assert c == 1;     " + "    return c;     " + "  }    " + "

//@ ghost int d = c+1;    " + "    //@ assert d + c == 9;     " + "    return c;     "

//@ ghost int d = c+1;    " + "    //@ assert d + c == 10;     " + "    return c;     "

//@ ghost int d = c+1;    " + "    //@ set d = 10;    " + "    //@ assert d + c == 14;     "

//@ ghost int d = c+1;    " + "    //@ set d = 10;    " + "    //@ assert d + c == 15;     "

//@ ghost int d = c+1;    " + "    //@ debug d = 10;    " + "    //@ assert d + c == 14;     "

//@ ghost int d = c+1;    " + "    //@ debug d = 10;    " + "    //@ assert d + c == 15;     "

/*@ nullable_by_default */
/*@non_null*/
//@ requires o != null;    "

//@ public normal_behavior  ensures \\result == (oo != null);    "

/*@ nullable_by_default */
/*@non_null*/
//@ requires o != null;    " + "  public static void m2(TestJava o) {     " + "    int i = o.z();     "

//@ public normal_behavior  ensures \\result == (oo != null);    "

//@ signals_only \    othing;      public int z() { return 0; }    " + "

/*@non_null*/
//@ requires o != null;    " + "  public static void m2(TestJava o) {     " + "    int i = o.z();     "

//@ public normal_behavior  ensures \\result == (oo != null);    "

//@ signals_only \    othing;      public static int z() { return 0; }    " + "}");

/*@ nullable_by_default */
/*@ code_java_math spec_java_math*/
//@ requires a != null;    "

//@ requires a != null;    "

//@ assume a.length == 1;     "

/*@ non_null*/
/*@ non_null*/
/*@ nullable_by_default */
//@ assume o.j == 1;     " + "  }    "

/*@non_null*/
//@ assume o.j == 1;     " + "  }    "

//@ requires o != null;    " + "  public static void m2(TestJava o) {     "

//@ assume o.j == 1;     " + "  }    " + "  public static void m3(TestJava o) {     "

//@ assume o != null && o.j == 1;     " + "  }    " + "  public static void m4(TestJava o) {     "

//@ assume o == null || o.j == 1;     " + "  }    " + "  public static void m5(TestJava o) {     "

//@ assume o != null ==> o.j == 1;     " + "  }    " + "

/*@ nullable_by_default */
//@ assume o.j == 1;     " + "  }      "

//@ assume a[0] == 1;     " + "  }    "

//@ requires a != null;    " + "  public static void m2(int[] a) {     "

//@ assume a[-1] == 1;     " + "  }    " + "  //@ requires a != null;    "

//@ assume a.length == 1;     "

//@ assume a[1] == 1;     " + "  }    " + "  public static void m4(int i, int j) {     "

//@ assume i/j == 4;     " + "  }    " + "  public static void m5(int i, int j) {     "

//@ assume i%j == 4;     " + "  }    " + "  public static void m6(RuntimeException r) {     "

//@ assume ((Exception)t) != null ? true : true;     " // OK

//@ assume ((RuntimeException)t) != null ? true : true ;     " + "  }    "

/*@ non_null*/
//@ assume ((Exception)t) != null ? true : true;     " + "  }    "

/*@ non_null*/
//@ assume ((RuntimeException)t) != null ? true : true ;     " + "  }    " + "

/*@ nullable_by_default */
//@ assume o.j == 1;     "

//@ assert o.j == 1 ? true : true;     "

//@ ghost int i = o.j;     "

//@ ghost int i; debug i = o.j;     "

//@ requires o.j == 1;    "

//@ ensures t.j == 1 ? true : true;    "

//@ ghost int i; set i = o.j;     "

/*@ nullable_by_default */
//@ assume o.j == 1;     "

/*@ nullable_by_default */
//@ public invariant t.j ==1 ? true: true;    " + "

/*@ nullable_by_default */
//@ public initially t.j ? true : true;    " + "

/*@ nullable_by_default */
//@ public constraint t.j ==1 ? true: true;    " + "

/*@ nullable_by_default */
//@ assert i == 1;    "

//@ assert i == 2;    "

//@ assert i == 2;    " + "  }    " + "  public void mp() {    "

//@ assert i == 2 && j == 3;    " + "  }    " + "  public void ma() {    " + "    int i = 0;    "

//@ assert i == 1;    " + "  }    " + "  public void m1(int k) {    "

//@ assume k == 0;     " + "    try {    " + "      try {    "

//@ assert i == 2 && j == 50;    "

//@ assume k == 0;     " + "    try {    " + "    try {    " + "      try {    "

//@ assert i == 2 && j == 50;    " + "    }    "

//@ assert i == 0;    " + "  }    "

//@ assert i == 0;    "

//@ public normal_behavior     "

//@   requires i != 1 & i != 2;    "

//@   ensures \\result == 0;    "

//@ also public exceptional_behavior     "

//@   requires i == 2 && ee != null;     "

//@   signals (ArrayIndexOutOfBoundsException ex) true;     "

_by_default     "

//@ public normal_behavior     "

//@   requires i != 1 & i != 2;    "

//@   ensures \\result == 0;    "

//@ also public exceptional_behavior     "

//@   requires i == 2;     "

//@   signals (ArrayIndexOutOfBoundsException ex) true;     "

//@ public normal_behavior     "

//@   requires e != null & ee != null & ae != null;    "

//@   requires i != 1 & i != 2;    "

//@   ensures \\result == 0;    "

//@ also public exceptional_behavior     "

//@   requires e != null & ee != null & ae != null;    "

//@   requires i == 2;     "

//@   signals (ArrayIndexOutOfBoundsException ex) true;     "

/*@non_null*/
//@ assume \\typeof(o) == \\type(Object);    "

//@ assert \\typeof(o) == \\typeof(o);    "

//@ assert \\typeof(o) == \\type(Object);    "

//@ assert \\typeof(o) <: \\type(Object);    "

//@ assert \\typeof(o) <:= \\type(Object);    "

/*@non_null*/
//@ assume \\typeof(o) == \\type(Object);    "

//@ assert \\typeof(o) != \\type(Object);    "

/*@non_null*/
//@ assume \\typeof(o) == \\type(Object);    "

//@ assert \\typeof(o) == \\type(Object);    "

/*@non_null*/
//@ assume \\typeof(o) == \\type(Object);    "

//@ assert \\typeof(o) == \\type(TestJava);    "

/*@non_null*/
//@ assume \\typeof(o) == \\type(Object);    "

//@ assert \\type(TestJava) <: \\typeof(o);    "

//@ assert \\type(TestJava) <:= \\typeof(o);    "

/*@non_null*/
//@ assume \\typeof(o) == \\type(TestJava);    "

//@ assert \\typeof(o) <: \\type(Object);    " + "  }    "

/*@non_null*/
//@ assert \\typeof(o) <: \\type(Object);    " + "  }    " + "}");

/*@non_null*/
//@ assert JML.erasure(\\typeof(o)) == o.getClass();    "

//@ requires i >= 0;    " + "  //@ ensures i>0;    " + "  //@ signals (Exception e) i == 0;    "

//@ requires i >= 0;    " + "  //@ ensures i>0;    " + "  //@ signals (Exception e) i == 1;    " // FAILS

//@ requires i >= 0;    " + "  //@ ensures i>0;    " + "  //@ signals (Exception e) i == 0;    " // OK

//@ requires i >= 0;    " + "  //@ ensures i>0;    " + "  //@ signals (RuntimeException e) i == 1;    " // FAILS

//@ requires i >= 0;    " + "  //@ ensures i>0;    " + "  //@ signals (Exception e) i == 0;    "

//@ requires i >= 0;    "

//@ ensures i>0;    " + "  //@ signals (Exception e) i == 1;    " // FAILS

//@ requires i >= 0;    " + "  //@ ensures i>0;    " + "  //@ signals (RuntimeException e) i == 1;    " // OK

//@ signals_only java.io.IOException;    " // FAILS

//@ signals_only \    othing;    " // FAILS

//@ signals_only Exception;    " // OK

//@ public constraint i > \\old(i) for m1();    " + "  public void m1() {    " + "  }    "

//@ public constraint i > \\old(i) for ! m1();    " + "  public void m1() {    " + "  }    "

//@ public constraint i > \\old(i) for \\everything;    " + "  public void m1() {    "

//@ public constraint i > \\old(i) for !\    othing;    " + "  public void m1() {    " + "  }    "

//@ public constraint i > \\old(i) for \    othing;    " + "  public void m1() {    " + "  }    "

//@ public constraint i > \\old(i) for !\\everything;    " + "  public void m1() {    "

//@ public constraint i > \\old(i);    " + "  public void m1() {    " + "  }    "

//@ public constraint i > \\old(i) for m1(), m1(int);    " + "  public void m1() {    "

//@ public constraint i > \\old(i) for m1(), m1(int);    " + "  public static void m1() {    "

//@ public constraint i > \\old(i) for ! m1(), m1(int);    " + "  public void m1() {    "

//@ public constraint i > \\old(i) for TestJava();    " + "  public TestJava() {    " + "  }    " + "

//@ public constraint i > \\old(i);    " + "  public TestJava() {    " + "  }    " + "}");

//@ public static constraint i > \\old(i) for TestJava();    " + "  public TestJava() {    "

//@ public static constraint i > \\old(i);    " + "  public TestJava() {    " + "  }    " + "

//@ ghost static public int i = 0;    "

//@ public static constraint i > \\old(i);    " + "}    "

//@ ghost static public int i = 0;    "

//@ public constraint i > \\old(i);    " + "}    " + "public class TestJava implements A {     "

//@ normal_behavior     "

//@ ensures \\result == (i > 0 && i < 10);    "

//@ pure    "

//@ model public boolean m(int i);    "

//@ assert (\\forall int k; 3<k && k <7; m(k));    "

//@ assert (\\forall int k; 3<k && k <7; m(k-1));    "

//@ assert !(\\forall int k; -3<k && k <7; m(k));    "

//@ normal_behavior     "

//@ ensures \\result == (i > 0 && i < 10);    "

//@ pure function    "

//@ model public static boolean m(int i);    "

//@ pure    "

//@ assert !(\\forall int k; 3<k && k <11; m(k));    "

//@ normal_behavior     "

//@ ensures \\result == (i > 0 && i < 10);    "

//@ pure    "

//@ model public boolean m(int i);    "

//@ pure    "

//@ assert !(\\forall int k; 3<k && k <11; m(k));    "

/*@ spec_public */
//@ assignable \\everything;     "


/*@ spec_public */
//@ assignable \\everything;     "


/*@ spec_public */
/*@ spec_public */
//@ assignable \\everything;     "


//@ assert array.length >= 0;     "

//@ assert array.length <= Integer.MAX_VALUE;     "

//@ requires k >= 0;    "

//@ assert array.length >= 0;     "

//@ assert array.length <= Integer.MAX_VALUE;     "

//@ assert array.length == k;     "

//@ assert array.length >= 0;     "

//@ assert array.length <= Integer.MAX_VALUE;     "

//@ assert array.length >= 0;     "

//@ assert array.length <= Integer.MAX_VALUE;     "

//@ requires (\\forall int i; 0 <= i && i < args.length; args[i] >= 0);    "

//@ requires (\\forall int i; 0 <= i && i < args.length; args[i] >= 0); requires n == -2;    "

//@ requires (\\forall int i; 0 <= i && i < args.length; args[i] >= 0);    "

//@ requires (\\forall int i; 0 <= i && i < args.length; args[i] >= 0);"

//@ assert (\\lbl I i) + \\lbl(J j) == 0;     "

//@ assert (\\lbl I i) + \\lbl(J,j) == 0;     "

//@ nullable_by_default     "

/*@ requires o != null;     "
                        + "      ensures \\result == (j>=0);     "
                        + "     pure function */
//@ signals (NullPointerException e) positive(null,j);     "

//@ signals (NegativeArraySizeException e) positive(null,j);     "

//@ ensures j >= 0;     "

//@ ensures ii == 19; static_initializer "

//@ public final invariant ii == 19;     "

//@ public normal_behavior ensures \\result == 10 + 9; pure    "

//@ public normal_behavior ensures \\result == 19; pure    "

//@ ensures ii == 19 && jj == 21; static_initializer "

//@ public final invariant ii == 19;     "

//@ public normal_behavior ensures \\result == 10 + 9; pure    "

//@ public normal_behavior ensures \\result == 21; pure    "

//@ ensures ii == mm(); static_initializer "

//@ public final invariant ii == 19;     "

//@ public normal_behavior ensures \\result == 10 + 9; pure    "

//@ public normal_behavior ensures \\result == 19; pure    "

//@ public final invariant ii == 19;     "

//@ public normal_behavior ensures \\result == 10 + 9; pure    "

/*@ spec_public */
//@ public normal_behavior     "

//@   ensures num == 10;     "

//@   ensures A.bit == 1;     "

//@   ensures B.bit == 2;     "

//@ static_initializer     "

/*@ spec_public */
/*@ spec_public */
//@ public normal_behavior     "

//@   ensures num == 10;     "

//@   ensures A.bit == 1;     "

//@   ensures B.bit == 2;     "

//@ static_initializer     "

//@ public normal_behavior     "

//@   requires \    onnullelements(arr);     "

//@ public normal_behavior     "

//@   requires true;     "

//@ show i, j+1;    "

//@ show k;    "

//@ assert k > 0;    "

//@ show m,k;    "

//@ assert m > 0;    "

//@ public normal_behavior     "

//@   requires true;     "

//@ show i;    "

//@ public normal_behavior     "

//@   requires true;     "

//@ show i;    "

//@ show     "

//@ show i i;    "

//@ show;    "

//@ show i    "

//@ show %;    "

//@ public normal_behavior     "

//@   requires k != null && \    onnullelements(k) && \\elemtype(\\typeof(k)) <: \\type(Key);     "

//@ assert kk != null;    "

//@ assert \    onnullelements(kk);    "

//@ assert \\elemtype(\\typeof(kk)) == \\type(Key);    "

//@ public normal_behavior     "

//@   requires k != null && \    onnullelements(k) && \\elemtype(\\typeof(k)) <: \\type(Key);     "

//@ assert kk != null;    "

//@ assert \    onnullelements(kk);    "

//@ assert \\elemtype(\\typeof(kk)) == \\type(Key);    "

//@ ghost int k = 1;    "

//@ ghost int k = 2;    "

//@ ghost int i = 2;    "

//@ assert 0 <= i < 10 < 12;    "

//@ set i = 10;    "

//@ assert !(0 <= i < 10);    "

//@ assert 0 <= i < 11 == 2 <= i <= 12;    "

//@ assert 11 >= i+1 > 1 == 12 >= i > 2;    "

//@ assert 11 >= i+1 < 12;    "

//@ assert 11 >= i+1 < 12 == true;    "

//@ assert 11 >= i+1 > 1 != 12 <= i <= 22;    "

//@ signals_only \    othing;    "


//@ allow NullPointerException;     "


//@ forbid NullPointerException;     "



//@ ignore NullPointerException;     "



//@ ignore java.lang.XX;     "


//@ allow NullPointerException;     "

//@ forbid NullPointerException;     "

//@ forbid X;     "

//@ forbid ;     "

//@ forbid NullPointerException     "

//@ forbid NullPointerException, ArrayIndexOutOfBoundsException;     "

//@ forbid NullPointerException ArrayIndexOutOfBoundsException;     "

//@ forbid NullPointerException; allow NullPointerException     "

//@ ignore NullPointerException; allow NullPointerException     "

//@ ignore NullPointerException; forbid NullPointerException     "

//@ forbid java.lang.NullPointerException     "

//@ forbid java.lang.     "

/*@ pure */
//@ assert \\count >= 0;    " // OK

//@ assert \\count < a.length;    " // OK

//@ assert \\count >= 1;    " // BAD

//@ ghost int i = \\count;    " // OK

//@ assert \\count >= 0;    " // OK

//@ assert \\count < 2;    " // OK

//@ assert \\count == i;    " // OK

//@ ghost int i = \\count;    " + "      for (long kk: b) {    "

//@ assert \\count == i;    " // BAD

//@ loop_invariant \\count >= 0 && \\count <= a.length;    " // OK

//@ decreases a.length - \\count;    " // OK

//@ loop_invariant \\count >= 0 && \\count <= a.length;    " // OK

//@ loop_decreases a.length - \\count;    " // OK

//@ decreases a.length - \\count -1;    " // 0 on last

//@ decreases a.length - \\count -2;    " // BAD - last time through

//@ decreases \\count+10;    " // BAD - loop does not decrease variant

//@ loop_invariant \\count > 0 && \\count <= a.length;    " // BAD - first time through loop

//@ loop_invariant \\count >= 0 && \\count < a.length;    " // BAD - laswt time through loop

//@ assert \\count >= 0;    " // OK

//@ assert \\count < a.length;    " // OK

//@ ghost int i = \\count;    " // OK

//@ assert \\count >= 0;    " // OK

//@ assert \\count < 2;    " // OK

//@ assert \\count == i;    " // OK

//@ reachable;    " // knows that the loop is not

//@ loop_invariant \\values.size() == \\count;    " + "    for (Integer k: a) {    " + "    }    "

//@ loop_invariant \\values.size() == \\count;    " + "    for (Integer k: a) {    "

//@ assert \\values.size() == \\count;    " + "    }    " + "  }    "

//@ assert \\values.size() == \\count;    " + "    }    " + "  }    "

//@ assert \\count >= 1;    " // BAD

//@ public normal_behavior  ensures true;    " + "  public void m2() {    "

//@ assume a != null;     "

//@ assume it != null;     "

//@ public normal_behavior  ensures true;    " + "  public void m2bad() {    "

//@ assume a != null;     "

//@ assume it != null;     "

//@ public normal_behavior  ensures true;    "

//@ public normal_behavior  ensures true;    "

//@ assume values != null; set values.containsNull = true;     "

//@ assert values.content.owner == values;    "

//@ assume a != null;     "

//@ assume values.content.owner == values;    "

//@ assume it != null;     "

//@ assume values.content.owner == values;    "

//@ assert values.content.owner == values;    "

//@ ghost List<Map.Entry<String,String>> v = values;    "

//@ loop_invariant values == v && values.content.owner == values;     "

//@ assume k != null && \\typeof(k) <: \\type(Map.Entry<String,String>);     "

//@ public normal_behavior  ensures true;    "

//@ assume values != null; set values.containsNull = true;     "

//@ assert values.content.owner == values;    "

//@ assume a != null;     "

//@ assume values.content.owner == values;    "

//@ assume it != null;     "

//@ assume values.content.owner == values;    "

//@ assert values.content.owner == values;    "

//@ ghost List<Map.Entry<String,String>> v = values;    "

//@ assert values.content.owner == values;    "

//@ assume k != null &&  \\typeof(k) <: \\type(Map.Entry<String,String>);     "

//@ assert values.content.owner == values;    "

//@ public normal_behavior  ensures true;    "

//@ set values.containsNull = true;     "

//@ public normal_behavior  ensures true;    "

//@ set values.containsNull = true;     "

//@ ghost int i = \\count;    " // Out of scope

//@ ghost int i = \\count;    " // Out of scope

//@ set \\count = 6;    " // Syntax error

//@ ghost org.jmlspecs.lang.JMLList i = \\values;    " // Out

//@ ghost org.jmlspecs.lang.JMLList i = \\values;    " // Out

//@ set \\values = null;    " // Syntax error

//@ ghost org.jmlspecs.lang.JMLList i = \\values;    " // OK

//@ modifies \\everything;    "

//@ assume \    onnullelements(a);    "

//@ assume a.length > 1;    "

//@ assert a[0] != null;    " // OK

//@ modifies \\everything;    "

//@ assume \    onnullelements(a);    "

//@ assert a != null;    " // OK

//@ modifies \\everything;    "


//@ assume \    onnullelements(a);    "

//@ assert a == null;    " // BAD

//@ modifies \\everything;    "

//@ assume a != null && a.length > 1;    "

//@ assert a[0] != null;    " // BAD

//@ modifies \\everything;    "

//@ assume a != null && a.length == 0;    "

//@ assert \    onnullelements(a);    " // OK

//@ modifies \\everything;    "

//@ assume a != null && a.length == 0;    "

//@ assert (\\forall int i; 0<=i && i<a.length; a[i] != null);    " // OK

//@ requires \\elemtype(\\typeof(a)) == \\type(Object); modifies \\everything;    "

//@ assume a != null && a.length == 1;    "

//@ assert \    onnullelements(a);    " // OK

//@ modifies \\everything;    "

//@ assume a != null && a.length == 1;    "

//@ assume a[0] != null;    "

//@ assert \    onnullelements(a);    " // OK

//@ requires \\elemtype(\\typeof(a)) == \\type(Object); modifies \\everything;    "

//@ assume a != null && a.length == 2;    "

//@ assert \    onnullelements(a);    " // OK

//@ modifies \\everything;    "

//@ assume a != null && a.length == 2;    "

//@ assume a[0] != null;    "

//@ assume a[1] != null;    "

//@ assert \    onnullelements(a);    " // OK

//@ requires \\elemtype(\\typeof(a)) == \\type(Object); modifies \\everything;    "

//@ assume a != null && a.length == 3;    "

//@ assert \    onnullelements(a);    " // BAD

//@ requires \\elemtype(\\typeof(a)) == \\type(Object); modifies \\everything;    "

//@ assume \    onnullelements(a) && a.length == 3;    "

//@ assert \    onnullelements(a);    " // OK

//@ modifies \\everything;    "

//@ assume a != null && a.length == 3;    "

//@ assert \    onnullelements(a);    " // BAD

//@ requires i == 5;    " + "  //@ modifies \\everything;    " + "  public void m1(int i) {    "

//@ assert \    ot_modified(i);    " // OK

//@ modifies \\everything;    " + "  public void m1a(int i) {    " + "    i = 5;    "

//@ assert \    ot_modified(i);    " // BAD

//@ ghost public int gi;    "

//@ requires i == 5;    " + "  //@ modifies \\everything;    " + "  public void m2() {    "

//@ assert \    ot_modified(i);    " // OK

//@ modifies \\everything;    " + "  public void m2a() {    " + "    i = 5;    "

//@ assert \    ot_modified(i);    " // BAD

//@ requires si == 5;    " + "  //@ modifies \\everything;    " + "  public void m3() {    "

//@ assert \    ot_modified(si);    " // OK

//@ modifies \\everything;    " + "  public void m3a() {    " + "    si = 5;    "

//@ assert \    ot_modified(si);    " // BAD

//@ requires gi == 5;    " + "  //@ modifies \\everything;    " + "  public void m4() {    "

//@ set gi = 5;    " + "    //@ assert \    ot_modified(gi);    " // OK

//@ modifies \\everything;    " + "  public void m4a() {    " + "    //@ set gi = 5;    "

//@ assert \    ot_modified(gi);    " // BAD


//@ requires t != null;    "

//@ modifies \\everything;    "

//@ assert \    ot_modified(t.i);    " // OK

//@ requires t != null;    "

//@ modifies \\everything;    "

//@ assert \    ot_modified(t.i) ? true: true;    " // BAD

//@ requires t == null;    "

//@ modifies \\everything;    "

//@ assert \    ot_modified(t.i) ? true: true;    " // OK

//@ modifies \\everything;    "

//@ assert \    ot_modified(t.i) ? true: true;    " // BAD

//@ requires p != null && p != this;    "

//@ modifies \\everything;    "

//@ assert pp != p;    " // OK

//@ assert pp != this;    " // OK

//@ requires p != null && p != this;    " + "  //@ modifies \\everything;    "

//@ assert pp != p;    " // BAD

//@ requires p != null && p != this;    " + "  //@ modifies \\everything;    "

//@ assert pp != this;    " // BAD

//@ requires p != null && p != this;    " + "  //@ modifies \\everything;    "

//@ assert pp != q;    " // OK

//@ requires p != null && p != this;    "

//@ modifies \\everything;    " // Line 30                                                                                                // 30

//@ assert pp != q;    " // OK

//@ modifies \\everything;    " + "  //@ ensures \\result != null && \\fresh(\\result);    "

//@ ensures \\result != p && \\result != this;    " + "  public Object m6(Object p) {    "

//@ modifies \\everything;    " + "  //@ ensures \\result == null;    " // BAD

//@ modifies \\everything;    " + "  //@ ensures \\result != null && \\fresh(\\result);    "

//@ ensures \\result == p || \\result == this;    " // BAD

//@ modifies \\everything;    "

//@ ensures \\result != null && !\\fresh(\\result);    " // BAD

//@ ghost Object oo;    "

//@ static ghost Object soo;    "

//@ modifies \    othing;    "

//@ assert pp != o && pp != oo;    " // OK

//@ modifies \    othing;    "

//@ assert pp != o;    " // BAD

//@ modifies \    othing;    "

//@ assert pp != oo;    " // BAD

//@ modifies \\everything;    "

//@ assert pp != oo;    " // OK

//@ modifies \\everything;    "

//@ assert pp != o;    " // BAD

//@ modifies \    othing;    "

//@ assert pp != so && pp != soo;    " // OK

//@ modifies \    othing;    "

//@ assert pp != so;    " // BAD

//@ modifies \    othing;    "

//@ assert pp != soo;    " // BAD

//@ modifies \\everything;    "

//@ assert pp != soo;    " // OK

//@ modifies \\everything;    "

//@ assert pp != so;    " // OK

//@ modifies \    othing;    "

//@ assert pp != o && pp != oo;    " // BAD

//@ modifies \    othing;    " + "  public void m9b(Object p) {    " + "    Object pp = c1n(p);    "

//@ assert pp != so && pp != soo;    " // BAD

//@ modifies \    othing;    "

//@ ensures \\fresh(\\result);    "

//@ modifies \    othing;    "

//@ ensures \\result == null || \\fresh(\\result);    "

//@ modifies \    othing;    "

//@ ensures true;    "

//@ modifies \\everything;    "

//@ ensures \\result != null && \\fresh(\\result);    "

//@ modifies \\everything;    "

//@ ensures true;    "

//@ requires p != null && p != this;    " + "  //@ modifies \\everything;    "

//@ assume this.k == 0;    " + "    c1(p);    " // havoc

//@ assert this.k == 0;    " // OK

//@ requires p != null && p != this;    " + "  //@ modifies \\everything;    "

//@ assume sk == 0;    " + "    c1(p);    " // havoc

//@ assert sk == 0;    " // OK

//@ requires o != null;    " + "  //@ modifies o.*;    " + "  public void c1(TestJava o) { }     "

//@ requires o != null;    " + "  //@ modifies TestJava.*;    " + "  public void c2(TestJava o) { }     "

//@ requires p != null && p != this;    " + "  //@ modifies \\everything;    "

//@ assume k == 0;    " + "    c1(this);    " // havoc

//@ assert k == 0;    " // FAILS

//@ requires p != null && p != this;    " + "  //@ modifies \\everything;    "

//@ assume sk == 0;    " + "    c1(this);    " // havoc

//@ assert sk == 0;    " // OK

//@ requires o != null;    " + "  //@ modifies o.*;    " + "  public void c1(TestJava o) { }     "

//@ requires o != null;    " + "  //@ modifies TestJava.*;    " + "  public void c2(TestJava o) { }     "

//@ requires p != null && p != this;    " + "  //@ modifies \\everything;    "

//@ assume k == 0;    " + "    c2(this);    " // havoc

//@ assert k == 0;    " // OK

//@ requires p != null && p != this;    " + "  //@ modifies \\everything;    "

//@ assume sk == 0;    " + "    c2(this);    " // havoc

//@ assert sk == 0;    " // FAILS

//@ requires o != null;    " + "  //@ modifies o.*;    " + "  public void c1(TestJava o) { }     "

//@ requires o != null;    " + "  //@ modifies TestJava.*;    " + "  public void c2(TestJava o) { }     "

//@ modifies \\everything;    "

//@ assume k == 0;    "

//@ assert k == 0;    "

//@ requires i == 0;    "

//@ modifies \\everything;    "

//@ also requires i > 0;    "

//@ modifies \    othing;    "

//@ modifies \\everything;    " + "  public void m1a() {    " + "    //@ assume k == 0;    "

//@ assert k == 0;    " // FAILS

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "

//@ modifies \\everything;    " + "  public void m2() {    " + "    //@ assume sk == 0;    "

//@ assert sk == 0;    " + "  }    "

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "}");

//@ modifies \\everything;    " + "  public void m2a() {    " + "    //@ assume sk == 0;    "

//@ assert sk == 0;    " // FAILS

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "

//@ requires a != null && a.length > 10;    " + "  //@ modifies \\everything;    "

//@ assume a[0] == 0;    " + "    c1(1);    "

//@ assert a[0] == 0;    " + "  }    "

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "}");

//@ requires a != null && a.length > 10;    " + "  //@ modifies \\everything;    "

//@ assume a[0] == 0;    " + "    c1(0);    " // modifies

//@ assert a[0] == 0;    " // FAILS

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "

//@ requires sa != null && sa.length > 10;    " + "  //@ modifies \\everything;    "

//@ assume sa[0] == 0;    " + "    c1(1);    "

//@ assert sa[0] == 0;    " + "  }    "

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "}");

//@ requires sa != null && sa.length > 10;    " + "  //@ modifies \\everything;    "

//@ assume sa[0] == 0;    " + "    c1(0);    "

//@ assert sa[0] == 0;    " // FAILS

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "}"

//@ requires sa != null && sa.length > 10;    " + "  //@ modifies \\everything;    "

//@ assume a == \\old(a);    " + "    c1(1);    "

//@ assert a == \\old(a);    " + "  }    "

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "}");

//@ requires sa != null && sa.length > 10;    " + "  //@ modifies \\everything;    "

//@ assume a == \\old(a);    " + "    c1(0);    "

//@ assert a == \\old(a);    " // FAILS

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "

//@ modifies \\everything;    " + "  public void m6(/*@ non_null*/TestJava t) {    "

//@ assume t.k == 0;    " + "    c1(1);    " + "    //@ assert t.k == 0;    " + "  }    "

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "}");

//@ modifies \\everything;    " + "  public void m6a(/*@ non_null*/TestJava t) {    "

//@ assume t.k == 0;    " + "    c1(0);    " + "    //@ assert t.k == 0;    " // FAILS

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "

//@ modifies \\everything;    " + "  public void m7() {    " + "    c1(1);    "

//@ assert sk == \\old(sk);    " // Should be OK

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "}");

//@ modifies \\everything;    " + "  public void m7a() {    " + "    c1(0);    "

//@ assert sk == \\old(sk);    " // FAILS

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "

//@ modifies k,sk;    "

//@ assume k == 0 && sk == 0;    "

//@ assert sk == 0;    "

//@ modifies k,sk;    "

//@ assume k == 0 && sk == 0;    "

//@ assert sk == 0;    " // FAILS

//@ modifies k,sk;    "

//@ assume k == 0 && sk == 0;    "

//@ assert k == 0;    " + "  }    "

//@ modifies k,sk;    "

//@ assume k == 0 && sk == 0;    "

//@ assert k == 0;    " // FAILS

//@ requires i == 0;    "

//@ modifies k;    "

//@ also requires i > 0;    "

//@ modifies sk;    "

//@ requires i == 10;    "

//@ modifies t.k;    "

//@ also requires i == 0;    "

//@ modifies \    othing;    "

//@ requires a!=null && 0<=i && i<a.length;    "

//@ modifies a[i];    "

//@ requires b!=null && 0<=i && i<b.length;    "

//@ modifies b[i];    "

//@ modifies k,sk;    " + "  public void m3() {    " + "    //@ assume k == 0 && sk == 0;    "

//@ assert k == 0;    " + "  }    "

//@ modifies k,sk;    " + "  public void m3a() {    " + "    //@ assume k == 0 && sk == 0;    "

//@ assert k == 0;    " // FAILS

//@ requires a != null && a.length == 5;    "

//@ modifies a[0];    " + "  public void m4() {    "

//@ assume a[0] == 0 && a[1] == 1;    " + "    c3(0);    " + "    //@ assert a[1] == 1;    "

//@ requires a != null && a.length == 5;    " + "  //@ modifies a[0];    "

//@ assume a[0] == 0 && a[1] == 1;    " + "    c3(0);    "

//@ assert a[0] == 0;    " // FAILS

//@ requires i == 0;    " + "  //@ modifies k;    " + "  //@ also requires i > 0;    "

//@ modifies sk;    " + "  public void c1(int i) { }     "

//@ requires i == 10;    " + "  //@ modifies t.k;    " + "  //@ also requires i == 0;    "

//@ modifies \    othing;    " + "  public void c2(int i, TestJava t) {}    "

//@ requires a!=null && 0<=i && i<a.length;    " + "  //@ modifies a[i];    "

//@ requires b!=null && 0<=i && i<b.length;    "

//@ modifies b[i];    " + "  public void c4(int i) {}    " + "

//@ requires b != null && b.length == 5;    "

//@ modifies b[0];    "

//@ assume b[0] == 0 && b[1] == 1;    "

//@ assert b[1] == 1;    "

//@ requires b != null && b.length == 5;    "

//@ modifies b[0];    "

//@ assume b[0] == 0 && b[1] == 1;    "

//@ assert b[0] == 0;    " // FAILS

//@ requires b != null && b.length == 5;    "

//@ modifies b[0];    "

//@ assume b[0] == 0 && b[1] == 1;    "

//@ requires a != null && b != null && b.length == 5  && a.length ==5;    "

//@ modifies a[0],b[0];    "

//@ assume b[0] == 0 && b[1] == 1;    "

//@ assert b[1] == 1;    "

//@ requires i == 0;    "

//@ modifies k;    "

//@ also requires i > 0;    "

//@ modifies sk;    "

//@ requires i == 10;    "

//@ modifies t.k;    "

//@ also requires i == 0;    "

//@ modifies \    othing;    "

//@ requires a!=null && 0<=i && i<a.length;    "

//@ modifies a[i];    "

//@ requires b!=null && 0<=i && i<b.length;    "

//@ modifies b[i];    "

//@ public invariant a != null && a.length == 10;    "

/*@ assignable a; */
//@ modifies a[*];    "

//@ assume a[0] == 0 && a[2] == 2;    "

//@ assert a[0] == 0;    "

//@ modifies a[*];    "

//@ assume a[0] == 0 && a[2] == 2;    "

//@ assert a[2] == 3;    " // FAILS

//@ modifies a[2 .. 4];    "

//@ modifies a[*];    "

//@ modifies a[2 .. ];    "

//@ public invariant a != null && a.length == 10;    "

//@ assignable a;    "

//@ modifies a[*];    "

//@ assume a[0] == 0 && a[2] == 2;    "

//@ assert a[0] == 0;    " // FAILS

//@ modifies a[*];    "

//@ assume a[0] == 0 && a[2] == 2;    "

//@ assert a[2] == 2;    " // FAILS

//@ modifies a[2 .. 4];    "

//@ modifies a[*];    "

//@ modifies a[2 .. ];    "

//@ public invariant a != null && a.length == 10;    "

//@ assignable a;    "

//@ modifies a[*];    "

//@ assume a[0] == 0 && a[2] == 2;    "

//@ assert a[0] == 0;    "

//@ modifies a[*];    "

//@ assume a[0] == 0 && a[9] == 2;    "

//@ assert a[9] == 2;    " // FAILS

//@ modifies a[2 .. 4];    "

//@ modifies a[*];    "

//@ modifies a[2 .. ];    "

//@ modifies \\everything;    " + "  public void z() {    " + "  }    "

//@ modifies \\everything;    " + "  public void m1() {    " + "    //@ assume a == 15 && fa == 13;    "

//@ assert fa == 13;    " // Should be OK

//@ assert a == 15;    " // Should fail

//@ assert fsa == 13;    " // OK

//@ assert fa == 15;    " // OK

//@ modifies \\everything;    " + "  public void m1() {    " + "    //@ assert fsa == 13;    " // Should

//@ assert fa == 15;    " // Should be OK

//@ modifies \\everything;    " + "  public void m2() {    " + "    //@ assert a == 17;    " // Not

//@ modifies \\everything;    " + "  public void m3() {    " + "    //@ assert fb == 16;    " // Not

/*@ code_bigint_math*/
//@ requires i >= 0;    " + "  //@ modifies k;    " + "  //@ ensures k == 10;    "

//@ signals (Exception e) k<0; signals_only Exception;    "

//@ requires i >= 0;    " + "  //@ modifies k;    " + "  //@ ensures k == 10;    "

//@ signals (Exception e) k==-11;    " + "  //@ signals_only Exception;    "

//@ requires i >= 0;    " + "  //@ modifies k;    " + "  //@ ensures k == 10;    "

//@ signals (Exception e) k==-12;    " + "  //@ signals_only Exception;    "

//@ requires i >= 0;    " + "  //@ modifies k;    " + "  //@ ensures k == 10;    "

//@ signals (Exception e) k==-13;    " // FAILS

//@ signals_only Exception;    " + "  public void m3a(int i) {    " + "    m(0);    "

//@ requires i >= 0;    " + "  //@ modifies k;    " + "  //@ ensures \\result == 12;    "

//@ signals (Exception e) false;    " + "  public int m4(int i) {    "

//@ requires i >= 0;    " + "  //@ modifies k;    " // Line

//@ ensures false;    " + "  //@ signals (Exception e) k == -11;    "

//@ signals_only Exception;    " + "  public int m5(int i) {    "

//@ requires i >= 0;    " + "  //@ modifies k;    " + "  //@ ensures false;    "

//@ signals (Exception e) k == -12;    " // Line 60

//@ signals_only Exception;    " + "  public int m6(int i) {    "

//@ requires i == 0;    " + "  //@ modifies k;    " + "  //@ ensures k>0 && \\result == i+1;    "

//@ signals (Exception e) false;    " + "  //@ also     " + "  //@ requires i > 0;    " // Line

//@ modifies k;    " + "  //@ ensures false;    " + "  //@ signals (Exception e) k == -10-i;    "

//@ signals_only Exception;    " + "  public int m(int i) {    " + "    if (i > 0) {    "

//@ code_bigint_math     " + "public class TestJava {     "

/*@ non_null*/
//@ requires false;    " + "  public static boolean bf(boolean bb) { return true; }    "

//@ requires true;    " + "  public static boolean bt(boolean bb) { return true; }    "

//@ static public invariant b;    "

//@ requires !b;    " + "  public static boolean bq(boolean bb) { return true; }    " + "


//@ ghost nullable Object oo;    " + "  //@ public static invariant bstatic;    "

//@ public invariant binstance;    " + "  //@ public initially binstance2;    "

//@ public constraint binstance2 == \\old(binstance2);    "

//@ public static constraint bstatic == \\old(bstatic);    "

/*@ non_null*/
//@ requires true;    " + "  //@ ensures \\result;    "

//@ requires false;    " + "  //@ ensures true;    " + "  public static int i(int ii) { return 0; }    "

//@ requires ii == 10;    " + "  //@ ensures true;    "

/*@ set oo = null;*/
//@ requires ii == 10;    " + "  //@ ensures true;    "


/*@ set oo = null;*/
//@ requires ii == 10;    " + "  //@ ensures true;    "

//@ requires ii == 10;    " + "  //@ ensures true;    "

//@ requires bb;    "

//@ ensures true;    "

/*@ assume b; */
/*@assert false;*/
//@ requires bb;    " + "  //@ ensures true;    "

/*@ assume b; */
/*@assert !bb;*/
//@ requires bb;    " + "  //@ ensures true;    "

/*@ assume bb; */
/*@assert b;*/
//@ requires bb;    "

//@ ensures true;    "

/*@assume z==1 ;*/
/*@ assert false; */
//@ requires bbb;    "

/*@assume true;*/
/*@assume !b;*/
/*@ assert !bb; */
//@ requires b;    "

/*@assume true;*/
/*@assume !b;*/
/*@ assert !bb; */
//@ requires bb;    "

//@ ensures true;    "

/*@assume 0==x ;*/
/*@ assert true; */
/*@ assume !bb; assume bb;*/
/*@assume bb; assume !bb; */
/*@assume bb; assume !bb; */
/*@assume bb; assume !bb; */
/*@ assume b; */
/*@ assume !b; */
/*@ assert k == 0; */
/*@ assert k != 0; */
/*@ assert i == 10; assert k == 16; */
/*@ assert k == 10; */
/*@ assert k == 11; */
/*@ assert k == 11; */
/*@ code_java_math*/
//@ static public constraint i > \\old(i);    "

//@ modifies i;    "

//@ ensures true;    "

/*@ code_bigint_math*/
//@ modifies i;    " + "  //@ ensures i == \\old(i)+2;    "

//@ modifies i;    "

//@ ensures i == \\old(i+1);    " + "  public static void bbad() { i = i - 1; }    " + "

/*@ code_java_math spec_java_math*/
//@ modifies i;    "

//@ ensures i == \\old(i)+2;    "

//@ modifies i;    "

//@ ensures i == \\old(i+1);    "

/*@ code_java_math spec_java_math*/
//@ modifies i;    "

//@ ensures i == \\old(i)+2;    "

/*@ assert i == i@x + 1 && i == (i+1)@x; */
//@ modifies i;    "

//@ ensures i == \\old(i+1);    "

/*@ assert i == i@x + 1; */
//@ modifies i;    "

/*@ assert i == this.i@x + 1; */
//@ requires a.length > 10 && a[0] >= 0;    "

//@ modifies i;    "

/*@ assert a[0]@x > -1; */
/*@ code_java_math spec_java_math*/
/*@ assert i <<< i || true; */
/*@ assert i <<<= i || true; */
//@ requires 0<=ii && ii <=3;    "

//@ ensures ii<=0 ==> \\result ==-ii;    "

//@ requires ii > -2147483648;    " // Not using

//@ ensures \\result == -ii;    "

/*@ assert i!=0; */
/*@ assert i==0; */
//@ requires ii == 10;    " + "  //@ ensures true;    "


//@ requires ii == 10;    "

//@ ensures true;    " + "  public @NonNull Object inst2(int ii) {  return null; }    " + "

//@ requires ii == 10;    " + "  //@ ensures true;    "

//@ requires ii == 10;    "

//@ ensures true;    " + "  public          Object inst2(int ii) {  return null; }    " + "

//@ requires ii == 10;    " + "  //@ ensures true;    "

//@ requires ii == 10;    " + "  //@ ensures true;    "

//@ requires ii == 10;    " + "  //@ ensures true;    "

//@ requires ii == 10;    "

//@ ensures true;    " + "  public          Object inst2(int ii) {  return null; }    " + "

/*@ non_null*/

/*@ non_null*/

/*@ non_null*/
/*@ non_null*/
//@ ensures \\result != null;    "


//@ ensures \\result != null;    "


//@ ensures \\result != null;    "

//@ ensures \\result != null;    "



//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ requires i>0;    " + "  //@ modifies j;    "

//@ ensures j == -i;    " + "  static public void m(int i) { j = -i; }    " + "  //@ requires i>1;     "

//@ modifies j;    " + "  //@ ensures \\result == -i;    "

//@ modifies j;    "

//@ ensures \\result == j;    " + "  public int instbad(boolean b, int i) { m(i); return j; }    "

//@ modifies j;    " + "  //@ ensures \\result == i;    "

//@ requires i>0;    "

//@ modifies j;    "

//@ ensures j == -i;    "

//@ requires i>1;     "

//@ modifies j;    "

//@ ensures \\result == -i;    "

//@ modifies j;    "

//@ ensures \\result == j;    "

//@ modifies j;    "

//@ ensures \\result == i;    "

/*@ code_bigint_math*/
//@ requires i>0;    "

//@ modifies j;    "

//@ ensures j == i+1 && \\result == j;    "

//@ requires i>1;     "

//@ modifies j;    "

//@ ensures \\result == \\old(i)+1;    "

//@ requires i>1;     "

//@ modifies j;    "

//@ ensures \\result == \\old(i)+3;    "

//@ requires i>1;     "

//@ modifies j;    "

//@ ensures \\result == 3*i+4;    "

//@ ensures j == i + 1;    "

//@ requires i>1;     "

//@ modifies j;    "

//@ ensures \\result == \\old(i);    "

//@ requires i>1;     "

//@ modifies j;    "

//@ ensures \\result == \\old(i)+4;    "

//@ requires i>1;     "

//@ modifies j;    " // Line 30

//@ ensures \\result == 3*i+4;    "

//@ ensures j == i + 2;    "

/*@ code_java_math*/
//@ assignable \    othing; ensures \\result == j;    "

//@ modifies j,sj;    "

//@ ensures \\result == \\old(j);    "

//@ modifies j,sj;    "

//@ ensures \\result == j;    "

//@ modifies j,sj;    "

//@ ensures \\result == sj;    "

//@ requires o!=null && p != null && o.j == 1 && p.j == 2 && j == 3;    "

//@ modifies j,sj,o.j,o.sj,p.j,p.sj;    "

//@ ensures \\result == 6;    "

//@ requires o!=null && p != null && o.j == 1 && p.j == 2 && j == 3 && o!=this && p!= this;    "

//@ modifies j,sj,o.j,o.sj,p.j,p.sj;    "

//@ ensures \\result == 6;    "

/*@ assert (\\lbl OJ o.j) + (\\lbl PJ p.j) + (\\lbl JJ j) == 6; */
//@ requires o!=null && p != null && o.j == 1 && p.j == 2 && j == 3;    "

//@ modifies j,sj,o.j,o.sj,p.j,p.sj;    "

//@ ensures \\result == 6;    "

//@ modifies j,sj;    " + "  //@ ensures \\result == 6;    "

//@ requires o!=null && p != null && sj == 3;    "

//@ modifies j,sj,o.j,o.sj,p.j,p.sj;    "

//@ ensures \\result == 9;    "

//@ assume a != null && a.length > 2 && a[0] == 1;    "

//@ loop_invariant (\\forall int k; 0<=k && k < \\count; b ==> a[k] > 0);    "

//@ assert b ==> a[1] > 0;    " + "  }    " + "}");

/*@ loop_invariant 0<=i && i<=5 && n==i; decreases 5-i; */
/*@ assert n == 5; */
/*@ loop_invariant 0<=i && i<=5 && n==i; decreases 3-i; */
/*@ assert n == 5; */
/*@ loop_invariant 0<=i && i<5 && n==i; decreases 5-i; */
/*@ assert n == 5; */
/*@ loop_invariant 0<=i && i<=5 && n==i-1; decreases 5-i; */
/*@ loop_invariant i>0; decreases i; */
/*@ reachable; */
/*@ loop_invariant i>=0; decreases i-2; */
/*@ assert i == 0; */
/*@ loop_invariant i>=0; decreases i; */
/*@ assert i == 0; */
/*@ code_java_math */
/*@ loop_invariant  i>0; decreases i; */
/*@ assert i == 0; */
/*@ code_bigint_math */
/*@ loop_invariant i>=0; decreases i-2; */
/*@ assert i == 0; */
/*@ code_bigint_math */
/*@ loop_invariant i>=0; decreases i; */
/*@ assert i == 0; */
/*@ code_bigint_math*/
/*@ loop_invariant i<=5 && i>=0; decreases i; */
/*@ assert i == 0; */
/*@ loop_invariant i<=5 && i>=0; decreases i-2; */
/*@ assert i == 0; */
/*@ loop_invariant i<=5 && i>=0; decreases i; */
/*@ assert i == 0; */
/*@ loop_invariant i<=5 && i>0; decreases i; */
/*@ assert i == 0; */
/*@ loop_invariant i>=0; decreases i; */
/*@ assert i == 0; */
/*@ loop_invariant i>=0; decreases i; */
/*@ assert i == 0; */
/*@ loop_invariant i>=0; decreases i; */
/*@ assert i == 0; */
/*@ assert i == 6; */
/*@ assert i == 5; */
/*@ assert i == 4; */
/*@ assert i == 5; */
/*@ assert i == 6; */
/*@ assert i == 5; */
/*@ assert i == 4; */
/*@ assert i == 5; */
/*@ assert j == 5; */
/*@ assert j == 6; */
/*@ assert j == 5; */
/*@ assert j == 4; */
/*@ assert j == 6; */
/*@ assert j == 5; */
/*@ assert j == 4; */
/*@ assert j == 5; */
/*@ assert i == 12; */
/*@ assert i == 5; */
/*@ assert i == 12 && i == j; */
/*@ assert i == 5; */
/*@ assert i == -2; */
/*@ assert i == 5; */
/*@ assert i == -2 && i == j; */
/*@ assert i == 5; */
/*@ assert i == 5*7; */
/*@ assert i == 5; */
/*@ assert i == 5*7 && i == j; */
/*@ assert i == 5; */
/*@ assert i == 5/7; */
/*@ assert i == 5; */
/*@ assert i == 5/7 && i == j; */
/*@ assert i == 5; */
//@ requires i > -2147483648;    "

/*@ assert j >= 0; */
//@ requires i > -2147483648;    "

/*@ assert j == -1; */
/*@ assume i > 0; */
/*@ assert (\\lblpos ISP i>0); */
/*@ assume i > 0; */
/*@ assert (\\lblneg ISN i<0); */
/*@ assume i > 0; */
/*@ assert !(\\lblneg ISN2 i>0); */
/*@ assume i > 0; */
/*@ assert (\\lblpos ISP i<0); */
/*@ assume i > 0; */
/*@ assert !(\\lblpos ISP2 i>0); */
/*@ assert o != oo;*/
/*@ assert o == oo;*/
/*@ assert o != null;*/
/*@ assert o == null;*/
/*@ assert o != oo;*/
/*@ assert o == oo;*/
/*@ assert o != null; assert o.length == 5; */
/*@ assert o.length == 6;*/
/*@non_null*/
/*@ assert a.length >= 0;*/
/*@ assert o != oo;*/
/*@ assert o == oo;*/
/*@ assert o.length == 3; assert o[1] == 11;*/
/*@ assert o.length == 4; */
/*@ assert o.length == 3; assert o[1] == 10;*/
/*@ assert o != null; assert o.length == 3; assert o[1] == 11;*/
/*@ assert o.length == 3; assert o[1] != null; assert o[1].length == 3; assert o[1][2] == 14; assert o[0] != null; assert o[0].length == 2; assert o[0][1] == 11; */
/*@ assert o.length == 3; assert o[1] != null; assert o[1].length == 3; assert o[1][2] == 14; assert o[0] != null; assert o[0].length == 2; assert o[0][1] == 11; */
/*@ assert o.length == 3; assert o[1] == null; assert o[2] != null; assert o[2].length == 1; assert o[2][0] == 15; */
/*@ assert oo[0] != oo[1]; */
/*@ assert o != oo;*/
/*@ assert o == oo;*/
/*@ assert o.length == 5; assert o[1].length == 3; */
/*@ assert o.length == 6;*/
/*@ assert o[1].length == 4;*/
/*@non_null*/
/*@ assert a.length >= 0;*/
/*@ assert o.length == 3; */
/*@ assert o.length == 2; */
/*@ assert o[1][2] == 14; */
/*@ assert o[2].length == 1; */
/*@ assert o[0].length == 2; */
/*@ assert o != null; assert o.length == 5; assert o[1] == null; */
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assume a[1] == 2; */
/*@ assert a[1] == 2; */
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assume a[1] == 2; */
/*@ assert a[1] == 3; */
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assume a[1] == 2; */
/*@ assert a[1] == 3; */
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assume a[1] == 2; */
/*@ assert a[1] == 4; */
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assume a[0] == 2; */
/*@ assert a[0] == 2; */
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assume a[0] == 2; */
/*@ assert a[0] == 4; */
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assume a[1] == 2; */
/*@ assert a[1] == 3; */
/*@ assert a[1] == 4; */
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assume a[1] == 2; */
/*@ assert a[1] == 3; */
/*@ assert a[1] == 5; */
/*@non_null*/
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assert a[0] == b[0]; */
/*@non_null*/
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assert a[0] != b[0]; */
/*@non_null*/
/*@non_null*/
/*@ assume b.length == 10 && a.length == 10;*/
/*@ assert b[0] == 7; */
/*@non_null*/
/*@non_null*/
/*@ assume b.length == 10 && a.length == 10;*/
/*@ assert b[0] == 8; */
/*@non_null*/
/*@non_null*/
/*@ assume b.length == 10 && a.length == 12;*/
/*@ assert b != null; assert a != null; assert b.length == 12; assert a.length == 12; */
/*@non_null*/
/*@assume a.length == 10; assume a[1] != null; assume a[1].length == 5; */
/*@ assume a[1][2]; */
/*@ assert a[1][2]; */
/*@non_null*/
/*@assume a.length == 10; assume a[1] != null; assume a[1].length == 5; */
/*@ assume a[1][2]; */
/*@ assert !a[1][2]; */
/*@non_null*/
/*@assume a.length == 10; assume a[1] != null; assume a[1].length == 5; */
/*@ assume a[1][2]; */
/*@ assert !a[1][2]; */
/*@non_null*/
/*@assume a.length == 10; assume a[1] != null; assume a[1].length == 5; */
/*@ assume a[1][2]; */
/*@ assert a[1][3]; */
/*@non_null*/
/*@assume a.length == 10; assume a[1] != null; assume a[1].length == 5; */
/*@ assume a[1][2]; */
/*@ assert a[0][2]; */
/*@non_null*/
/*@assume a.length == 10; assume a[1] != null; assume a[1].length == 5; */
/*@ assume a[1][2]; assume a[0] != null; */
/*@ assert a[0][2]; */
/*@non_null*/
/*@assume a.length == 10; assume a[1] != null; assume a[1].length == 5; */
/*@ assume a[1][2]; assume a[0] != null; assume a[0].length > 5; */
/*@ assert a[0][2]; */
/*@non_null*/
/*@assume a.length == 10; assume a[1] != null; assume a[0] != null; assume a[1].length == 5; assume a[0].length == 3; */
/*@ assume a[0][0]; */
/*@ assert a[0][0]; */
/*@non_null*/
/*@assume a.length == 10; assume a[1] != null; assume a[0] != null; assume a[1].length == 5; assume a[0].length == 3; */
/*@ assume a[0][0]; */
/*@ assert !a[0][0]; */
/*@non_null*/
/*@assume a.length == 10; assume a[1] != null; assume a[1].length == 5; */
/*@ assert a[0][3] == a[1][3]; */
/*@non_null*/
/*@assume a.length == 10; assume a[1] != null; assume a[1].length == 5; */
/*@ assert a[0][3] != a[1][3]; ; */
/*@non_null*/
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assert a[0] == b[0]; */
/*@non_null*/
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assert a[0] != b[0]; */
/*@non_null*/
/*@non_null*/
/*@ assume b.length == 10 && a.length == 10 && b[0] != null && a[0] != null && b[0].length == 5 && a[0].length==6;*/
/*@ assert !b[0][0]; */
/*@non_null*/
/*@non_null*/
/*@ assume b.length == 10 && a.length == 10 && b[0] != null && a[0] != null && b[0].length == 5 && a[0].length==6;*/
/*@ assert b[0][0]; */
/*@non_null*/
/*@non_null*/
/*@ assume b.length == 10 && a.length == 12;*/
/*@ assert b != null; assert a != null; assert b.length == 12; assert a.length == 12; */
/*@ nullable_by_default */
//@ public static invariant t != null;     "

/*@non_null*/
/*@ assume t.f == 2; */
/*@ assert t.f == 2; */
/*@non_null*/
/*@ assume t.f == 2; */
/*@ assert t.f == 3; */
/*@non_null*/
/*@ assume t.f == 2; */
/*@ assert t.f == 3; */
/*@non_null*/
/*@ assume t.f == 2; */
/*@ assert t.f == 4; */
/*@non_null*/
/*@ assume t.g == 2; */
/*@ assert t.g == 2; */
/*@non_null*/
/*@ assume t.g == 2; */
/*@ assert t.g == 4; */
/*@non_null*/
/*@ assume t.f == 2; */
/*@ assert t.f == 3; */
/*@ assert t.f == 4; */
/*@non_null*/
/*@ assume t.f == 2; */
/*@ assert t.f == 3; */
/*@ assert t.f == 5; */
/*@non_null*/
/*@non_null*/
/*@ assert a.f == b.f; */
/*@non_null*/
/*@non_null*/
/*@ assert a.f != b.f; */
/*@non_null*/
/*@non_null*/
/*@ assert b.f == 7; */
/*@non_null*/
/*@non_null*/
/*@ assert b.f == 8; */
/*@non_null*/
/*@non_null*/
/*@ assert a.sf == b.sf; */
/*@non_null*/
/*@non_null*/
/*@ assert a.sf != b.sf; */
/*@non_null*/
/*@non_null*/
/*@ assert 3 == b.sf; */
/*@non_null*/
/*@non_null*/
/*@ assert 3 != b.sf; */
/*@non_null*/
/*@ assert f == this.f; */
/*@ assert a == this ==> a.f == f; */
/*@non_null*/
/*@ assert f == this.f; */
/*@ assert a.f == f; */
/*@non_null*/
/*@ assert sf == this.sf; */
/*@ assert a.sf == sf; */
/*@ assume i>=-1 && i <=1; */
/*@ assert j!=0; */
/*@ assume i>=-1 && i <=1; */
/*@ assert j==1; */
/*@ assume i>=-1 && i <=1; */
/*@ assert j>0; */
/*@ assume i>=-1 && i <=1; */
/*@ assert i==0 ==> j==-1; */
/*@ assume i>=-1 && i <=1; */
/*@ assert j>=0; */
/*@ assume i>=-1 && i <=1; */
/*@ assert j>0; */
/*@ assume i>=-1 && i <=1; */
/*@ assert j>=0; */
//@ ensures i == 2;    "

//@ ensures i == 1;    "

//@ public exceptional_behavior requires b;  signals (Exception e) true; signals (RuntimeException e) true;    "

//@ also    " + "//@ public normal_behavior requires !b; ensures true;    "

//@ requires k < 0;    " + "//@ ensures true;    " + "//@ also    " + "//@ requires k > 0;    "

//@ ensures \\result == 1;    " + "public int m1() {    " + "    int i = 1;    " + "    try {    "

//@ assert e != null;    " + "        i = 2;    " + "    }    "

//@ requires k < 0;    " + "//@ ensures true;    " + "//@ also    " // Line

//@ requires k > 0;    " + "//@ ensures \\result == 1;    " + "public int m2() {    " + "    int i = 1;    "

//@ assert e != null;    " + "        i = 1;    " // Line

//@ requires i > 0;    " + "  //@ ensures i > 0;    "

/*@ assert a*2 == a + a; */
/*@ assert a * b ==
                // a *(b-1) + a; */
/*@ assert (2*a)/2 == a; */
/*@ assert a >= 0 ==> (a%3) < 3; */
/*@ assert a >= 0 ==> (a%3) >= 0; */
/*@ assert (a >= 0
                // && b > 0) ==> (a%b) >= 0; */
/*@ assert (a >= 0
                // && b > 0) ==> ((a*b)%b) == 0; */
/*@ assert (a >= 0 ) ==> ((5*a)%5) == 0; */
//@ requires i < 1000; ensures \\result == i+1;    "

//@ pure     "

/*@ assume a < 100; */
/*@ assert k == m(a); */
/*@ assume a < 100; */
/*@ assert k == m(a); */
/*@ assume a < 100; */
/*@ assert k == m(a) + m(a); */
/*@ assume a < 100; */
/*@ assert k == 1 + m(a) + m(a); */
/*@ assume a < 100; */
/*@ assert k == m(m(a+1)); */
/*@ assume a < 100; */
/*@ assert k == m(m(a+1)); */
//@ requires i < 1000; ensures \\result == i+1;    "

//@ pure     "

/*@ assume a < 100; */
/*@ assert k == m(a); */
/*@ assume a < 100; */
/*@ assert k == m(a); */
/*@ assume a < 100; */
/*@ assert k == m(a) + m(a); */
/*@ assume a < 100; */
/*@ assert k == 1 + m(a) + m(a); */
/*@ assume a < 100; */
/*@ assert k == m(m(a+1)); */
/*@ assume a < 100; */
/*@ assert k == m(m(a+1)); */
/*@ code_bigint_math*/
//@ ensures \\result == z+1;    " + "  //@ pure     "

/*@ assert k == m(); */
/*@ assert k == m(); */
/*@ assert k == m() + m(); */
/*@ assert k == 1 + m() + m(); */
/*@ assert k == m(); */
/*@ assert k == m(); */
/*@ code_bigint_math*/
//@ ensures \\result == z+1;    "

//@ pure     "

/*@ assert k == m(); */
/*@ assert k == m(); */
/*@ assert k == m() + m(); */
/*@ assert k == 1 + m() + m(); */
//@ ensures \\result > 0;    "

//@ also    "

//@ ensures \\result > ii;    "

/*@ code_bigint_math*/
//@ also public normal_behavior    "

//@ ensures \\result == i+1;    "

//@ pure    "

//@ requires a >= 0;    "

//@ ensures \\result == a+1;    "

//@ requires iii > 0;    " + "  //@ ensures \\result > 0;    " + "  abstract public int m(int iii);    "

//@ also    "

//@ ensures \\result > ii;    " + "  abstract public int m(int ii);    " + "}    "

/*@ code_bigint_math*/
//@ also    "

//@ ensures \\result == i+1;    " + "  //@ pure    " + "  public int m(int i) { return i+1; }    "

//@ ensures \\result == a+1;    " + "  public int n1(int a) { return m(a); }    "

//@ requires iii > 0;    " + "  //@ ensures \\result > 0;    " + "  abstract public int m(int iii);    "

//@ also    "

//@ requires ii > 0;    " + "  //@ ensures \\result > ii;    " + "  abstract public int m(int ii);    "

/*@ code_bigint_math*/
//@ also    "

//@ requires i > 0;    " + "  //@ ensures \\result == i+1;    " + "  //@ pure    "

//@ requires iii == 1;    "

//@ ensures \\result == iii;    "

//@ also    "

//@ requires ii == 2;    "

//@ ensures \\result == ii;    "

/*@ code_bigint_math*/
//@ also    "

//@ requires i == 3;    "

//@ ensures \\result == i;    "

//@ pure    "

//@ requires a >= 1 && a <= 3;    "

//@ ensures \\result == a;    "

//@ ensures \\result == a;    "

//@ requires 0<=ii && ii <=3;    "

//@ ensures \\result < 0;    " + "  public static int m(int ii) {     "

//@ requires ii == 2;    " + "  //@ ensures \\result == 0;    "

//@ ensures is == 6;    "

//@ ensures \\result == 1;    " + "  public static int m4(int ii) {     " + "    try { ii = 0;     "

//@ assert c == 1;     " + "    return c;     " + "  }    " + "

//@ ghost int d = c+1;    " + "    //@ assert d + c == 9;     " + "    return c;     "

//@ ghost int d = c+1;    " + "    //@ assert d + c == 10;     " + "    return c;     "

//@ ghost int d = c+1;    " + "    //@ set d = 10;    " + "    //@ assert d + c == 14;     "

//@ ghost int d = c+1;    " + "    //@ set d = 10;    " + "    //@ assert d + c == 15;     "

//@ ghost int d = c+1;    " + "    //@ debug d = 10;    " + "    //@ assert d + c == 14;     "

//@ ghost int d = c+1;    " + "    //@ debug d = 10;    " + "    //@ assert d + c == 15;     "

/*@ nullable_by_default */
/*@non_null*/
//@ requires o != null;    "

//@ public normal_behavior  ensures \\result == (oo != null);    "

/*@ nullable_by_default */
/*@non_null*/
//@ requires o != null;    " + "  public static void m2(TestJava o) {     " + "    int i = o.z();     "

//@ public normal_behavior  ensures \\result == (oo != null);    "

//@ signals_only \    othing;      public int z() { return 0; }    " + "

/*@non_null*/
//@ requires o != null;    " + "  public static void m2(TestJava o) {     " + "    int i = o.z();     "

//@ public normal_behavior  ensures \\result == (oo != null);    "

//@ signals_only \    othing;      public static int z() { return 0; }    " + "}");

/*@ nullable_by_default */
/*@ code_java_math spec_java_math*/
//@ requires a != null;    "

//@ requires a != null;    "

//@ assume a.length == 1;     "

/*@ non_null*/
/*@ non_null*/
/*@ nullable_by_default */
//@ assume o.j == 1;     " + "  }    "

/*@non_null*/
//@ assume o.j == 1;     " + "  }    "

//@ requires o != null;    " + "  public static void m2(TestJava o) {     "

//@ assume o.j == 1;     " + "  }    " + "  public static void m3(TestJava o) {     "

//@ assume o != null && o.j == 1;     " + "  }    " + "  public static void m4(TestJava o) {     "

//@ assume o == null || o.j == 1;     " + "  }    " + "  public static void m5(TestJava o) {     "

//@ assume o != null ==> o.j == 1;     " + "  }    " + "

/*@ nullable_by_default */
//@ assume o.j == 1;     " + "  }      "

//@ assume a[0] == 1;     " + "  }    "

//@ requires a != null;    " + "  public static void m2(int[] a) {     "

//@ assume a[-1] == 1;     " + "  }    " + "  //@ requires a != null;    "

//@ assume a.length == 1;     "

//@ assume a[1] == 1;     " + "  }    " + "  public static void m4(int i, int j) {     "

//@ assume i/j == 4;     " + "  }    " + "  public static void m5(int i, int j) {     "

//@ assume i%j == 4;     " + "  }    " + "  public static void m6(RuntimeException r) {     "

//@ assume ((Exception)t) != null ? true : true;     " // OK

//@ assume ((RuntimeException)t) != null ? true : true ;     " + "  }    "

/*@ non_null*/
//@ assume ((Exception)t) != null ? true : true;     " + "  }    "

/*@ non_null*/
//@ assume ((RuntimeException)t) != null ? true : true ;     " + "  }    " + "

/*@ nullable_by_default */
//@ assume o.j == 1;     "

//@ assert o.j == 1 ? true : true;     "

//@ ghost int i = o.j;     "

//@ ghost int i; debug i = o.j;     "

//@ requires o.j == 1;    "

//@ ensures t.j == 1 ? true : true;    "

//@ ghost int i; set i = o.j;     "

/*@ nullable_by_default */
//@ assume o.j == 1;     "

/*@ nullable_by_default */
//@ public invariant t.j ==1 ? true: true;    " + "

/*@ nullable_by_default */
//@ public initially t.j ? true : true;    " + "

/*@ nullable_by_default */
//@ public constraint t.j ==1 ? true: true;    " + "

/*@ nullable_by_default */
//@ assert i == 1;    "

//@ assert i == 2;    "

//@ assert i == 2;    " + "  }    " + "  public void mp() {    "

//@ assert i == 2 && j == 3;    " + "  }    " + "  public void ma() {    " + "    int i = 0;    "

//@ assert i == 1;    " + "  }    " + "  public void m1(int k) {    "

//@ assume k == 0;     " + "    try {    " + "      try {    "

//@ assert i == 2 && j == 50;    "

//@ assume k == 0;     " + "    try {    " + "    try {    " + "      try {    "

//@ assert i == 2 && j == 50;    " + "    }    "

//@ assert i == 0;    " + "  }    "

//@ assert i == 0;    "

//@ public normal_behavior     "

//@   requires i != 1 & i != 2;    "

//@   ensures \\result == 0;    "

//@ also public exceptional_behavior     "

//@   requires i == 2 && ee != null;     "

//@   signals (ArrayIndexOutOfBoundsException ex) true;     "

_by_default     "

//@ public normal_behavior     "

//@   requires i != 1 & i != 2;    "

//@   ensures \\result == 0;    "

//@ also public exceptional_behavior     "

//@   requires i == 2;     "

//@   signals (ArrayIndexOutOfBoundsException ex) true;     "

//@ public normal_behavior     "

//@   requires e != null & ee != null & ae != null;    "

//@   requires i != 1 & i != 2;    "

//@   ensures \\result == 0;    "

//@ also public exceptional_behavior     "

//@   requires e != null & ee != null & ae != null;    "

//@   requires i == 2;     "

//@   signals (ArrayIndexOutOfBoundsException ex) true;     "

/*@non_null*/
//@ assume \\typeof(o) == \\type(Object);    "

//@ assert \\typeof(o) == \\typeof(o);    "

//@ assert \\typeof(o) == \\type(Object);    "

//@ assert \\typeof(o) <: \\type(Object);    "

//@ assert \\typeof(o) <:= \\type(Object);    "

/*@non_null*/
//@ assume \\typeof(o) == \\type(Object);    "

//@ assert \\typeof(o) != \\type(Object);    "

/*@non_null*/
//@ assume \\typeof(o) == \\type(Object);    "

//@ assert \\typeof(o) == \\type(Object);    "

/*@non_null*/
//@ assume \\typeof(o) == \\type(Object);    "

//@ assert \\typeof(o) == \\type(TestJava);    "

/*@non_null*/
//@ assume \\typeof(o) == \\type(Object);    "

//@ assert \\type(TestJava) <: \\typeof(o);    "

//@ assert \\type(TestJava) <:= \\typeof(o);    "

/*@non_null*/
//@ assume \\typeof(o) == \\type(TestJava);    "

//@ assert \\typeof(o) <: \\type(Object);    " + "  }    "

/*@non_null*/
//@ assert \\typeof(o) <: \\type(Object);    " + "  }    " + "}");

/*@non_null*/
//@ assert JML.erasure(\\typeof(o)) == o.getClass();    "

//@ requires i >= 0;    " + "  //@ ensures i>0;    " + "  //@ signals (Exception e) i == 0;    "

//@ requires i >= 0;    " + "  //@ ensures i>0;    " + "  //@ signals (Exception e) i == 1;    " // FAILS

//@ requires i >= 0;    " + "  //@ ensures i>0;    " + "  //@ signals (Exception e) i == 0;    " // OK

//@ requires i >= 0;    " + "  //@ ensures i>0;    " + "  //@ signals (RuntimeException e) i == 1;    " // FAILS

//@ requires i >= 0;    " + "  //@ ensures i>0;    " + "  //@ signals (Exception e) i == 0;    "

//@ requires i >= 0;    "

//@ ensures i>0;    " + "  //@ signals (Exception e) i == 1;    " // FAILS

//@ requires i >= 0;    " + "  //@ ensures i>0;    " + "  //@ signals (RuntimeException e) i == 1;    " // OK

//@ signals_only java.io.IOException;    " // FAILS

//@ signals_only \    othing;    " // FAILS

//@ signals_only Exception;    " // OK

//@ public constraint i > \\old(i) for m1();    " + "  public void m1() {    " + "  }    "

//@ public constraint i > \\old(i) for ! m1();    " + "  public void m1() {    " + "  }    "

//@ public constraint i > \\old(i) for \\everything;    " + "  public void m1() {    "

//@ public constraint i > \\old(i) for !\    othing;    " + "  public void m1() {    " + "  }    "

//@ public constraint i > \\old(i) for \    othing;    " + "  public void m1() {    " + "  }    "

//@ public constraint i > \\old(i) for !\\everything;    " + "  public void m1() {    "

//@ public constraint i > \\old(i);    " + "  public void m1() {    " + "  }    "

//@ public constraint i > \\old(i) for m1(), m1(int);    " + "  public void m1() {    "

//@ public constraint i > \\old(i) for m1(), m1(int);    " + "  public static void m1() {    "

//@ public constraint i > \\old(i) for ! m1(), m1(int);    " + "  public void m1() {    "

//@ public constraint i > \\old(i) for TestJava();    " + "  public TestJava() {    " + "  }    " + "

//@ public constraint i > \\old(i);    " + "  public TestJava() {    " + "  }    " + "}");

//@ public static constraint i > \\old(i) for TestJava();    " + "  public TestJava() {    "

//@ public static constraint i > \\old(i);    " + "  public TestJava() {    " + "  }    " + "

//@ ghost static public int i = 0;    "

//@ public static constraint i > \\old(i);    " + "}    "

//@ ghost static public int i = 0;    "

//@ public constraint i > \\old(i);    " + "}    " + "public class TestJava implements A {     "

//@ normal_behavior     "

//@ ensures \\result == (i > 0 && i < 10);    "

//@ pure    "

//@ model public boolean m(int i);    "

//@ assert (\\forall int k; 3<k && k <7; m(k));    "

//@ assert (\\forall int k; 3<k && k <7; m(k-1));    "

//@ assert !(\\forall int k; -3<k && k <7; m(k));    "

//@ normal_behavior     "

//@ ensures \\result == (i > 0 && i < 10);    "

//@ pure function    "

//@ model public static boolean m(int i);    "

//@ pure    "

//@ assert !(\\forall int k; 3<k && k <11; m(k));    "

//@ normal_behavior     "

//@ ensures \\result == (i > 0 && i < 10);    "

//@ pure    "

//@ model public boolean m(int i);    "

//@ pure    "

//@ assert !(\\forall int k; 3<k && k <11; m(k));    "

/*@ spec_public */
//@ assignable \\everything;     "


/*@ spec_public */
//@ assignable \\everything;     "


/*@ spec_public */
/*@ spec_public */
//@ assignable \\everything;     "


//@ assert array.length >= 0;     "

//@ assert array.length <= Integer.MAX_VALUE;     "

//@ requires k >= 0;    "

//@ assert array.length >= 0;     "

//@ assert array.length <= Integer.MAX_VALUE;     "

//@ assert array.length == k;     "

//@ assert array.length >= 0;     "

//@ assert array.length <= Integer.MAX_VALUE;     "

//@ assert array.length >= 0;     "

//@ assert array.length <= Integer.MAX_VALUE;     "

//@ requires (\\forall int i; 0 <= i && i < args.length; args[i] >= 0);    "

//@ requires (\\forall int i; 0 <= i && i < args.length; args[i] >= 0); requires n == -2;    "

//@ requires (\\forall int i; 0 <= i && i < args.length; args[i] >= 0);    "

//@ requires (\\forall int i; 0 <= i && i < args.length; args[i] >= 0);"

//@ assert (\\lbl I i) + \\lbl(J j) == 0;     "

//@ assert (\\lbl I i) + \\lbl(J,j) == 0;     "

//@ nullable_by_default     "

/*@ requires o != null;     "
                        + "      ensures \\result == (j>=0);     "
                        + "     pure function */
//@ signals (NullPointerException e) positive(null,j);     "

//@ signals (NegativeArraySizeException e) positive(null,j);     "

//@ ensures j >= 0;     "

//@ ensures ii == 19; static_initializer "

//@ public final invariant ii == 19;     "

//@ public normal_behavior ensures \\result == 10 + 9; pure    "

//@ public normal_behavior ensures \\result == 19; pure    "

//@ ensures ii == 19 && jj == 21; static_initializer "

//@ public final invariant ii == 19;     "

//@ public normal_behavior ensures \\result == 10 + 9; pure    "

//@ public normal_behavior ensures \\result == 21; pure    "

//@ ensures ii == mm(); static_initializer "

//@ public final invariant ii == 19;     "

//@ public normal_behavior ensures \\result == 10 + 9; pure    "

//@ public normal_behavior ensures \\result == 19; pure    "

//@ public final invariant ii == 19;     "

//@ public normal_behavior ensures \\result == 10 + 9; pure    "

/*@ spec_public */
//@ public normal_behavior     "

//@   ensures num == 10;     "

//@   ensures A.bit == 1;     "

//@   ensures B.bit == 2;     "

//@ static_initializer     "

/*@ spec_public */
/*@ spec_public */
//@ public normal_behavior     "

//@   ensures num == 10;     "

//@   ensures A.bit == 1;     "

//@   ensures B.bit == 2;     "

//@ static_initializer     "

//@ public normal_behavior     "

//@   requires \    onnullelements(arr);     "

//@ public normal_behavior     "

//@   requires true;     "

//@ show i, j+1;    "

//@ show k;    "

//@ assert k > 0;    "

//@ show m,k;    "

//@ assert m > 0;    "

//@ public normal_behavior     "

//@   requires true;     "

//@ show i;    "

//@ public normal_behavior     "

//@   requires true;     "

//@ show i;    "

//@ show     "

//@ show i i;    "

//@ show;    "

//@ show i    "

//@ show %;    "

//@ public normal_behavior     "

//@   requires k != null && \    onnullelements(k) && \\elemtype(\\typeof(k)) <: \\type(Key);     "

//@ assert kk != null;    "

//@ assert \    onnullelements(kk);    "

//@ assert \\elemtype(\\typeof(kk)) == \\type(Key);    "

//@ public normal_behavior     "

//@   requires k != null && \    onnullelements(k) && \\elemtype(\\typeof(k)) <: \\type(Key);     "

//@ assert kk != null;    "

//@ assert \    onnullelements(kk);    "

//@ assert \\elemtype(\\typeof(kk)) == \\type(Key);    "

//@ ghost int k = 1;    "

//@ ghost int k = 2;    "

//@ ghost int i = 2;    "

//@ assert 0 <= i < 10 < 12;    "

//@ set i = 10;    "

//@ assert !(0 <= i < 10);    "

//@ assert 0 <= i < 11 == 2 <= i <= 12;    "

//@ assert 11 >= i+1 > 1 == 12 >= i > 2;    "

//@ assert 11 >= i+1 < 12;    "

//@ assert 11 >= i+1 < 12 == true;    "

//@ assert 11 >= i+1 > 1 != 12 <= i <= 22;    "

//@ signals_only \    othing;    "


//@ allow NullPointerException;     "


//@ forbid NullPointerException;     "



//@ ignore NullPointerException;     "



//@ ignore java.lang.XX;     "


//@ allow NullPointerException;     "

//@ forbid NullPointerException;     "

//@ forbid X;     "

//@ forbid ;     "

//@ forbid NullPointerException     "

//@ forbid NullPointerException, ArrayIndexOutOfBoundsException;     "

//@ forbid NullPointerException ArrayIndexOutOfBoundsException;     "

//@ forbid NullPointerException; allow NullPointerException     "

//@ ignore NullPointerException; allow NullPointerException     "

//@ ignore NullPointerException; forbid NullPointerException     "

//@ forbid java.lang.NullPointerException     "

//@ forbid java.lang.     "

//@ assert JML.lbl(\"AL\",i) == null;     "

//@ assert JML.lbl(\"AL\",i) == null;     "

//@ assert JML.lbl(\"AL\",i) == 0;     "

//@ assert JML.lbl(\"AL\",i) == 0;     "

//@ assert JML.lbl(\"AL\",i);     "

//@ assert JML.lbl(\"AL\",i) == 0;     "

//@ assert JML.lbl(\"AL\",i) == 0;     "

//@ assert JML.lbl(\"AL\",i) == null;     "

//@ assert JML.lbl(\"AL\",i) == null;     "

//@ assert JML.lbl(\"AL\",i) == 0;     "

//@ assert JML.lbl(\"AL\",i) == 0;     "

//@ assert JML.lbl(\"AL\",i);     "

//@ assert JML.lbl(\"AL\",i) == 0;     "

//@ assert JML.lbl(\"AL\",i) == 0;     "

//@ assert JML.lbl(\"AL\",i) == null;     "

//@ assert JML.lbl(\"AL\",i) == null;     "

//@ assert JML.lbl(\"AL\",i) == 0;     "

//@ assert JML.lbl(\"AL\",i) == 0;     "

//@ assert JML.lbl(\"AL\",i);     "

//@ assert JML.lbl(\"AL\",i) == 0;     "

//@ assert JML.lbl(\"AL\",i) == 0;     "

//@ assert JML.lbl(\"AL\",i) == null;     "

//@ assert JML.lbl(\"AL\",i) == null;     "

//@ assert JML.lbl(\"AL\",i) == 0;     "

//@ assert JML.lbl(\"AL\",i) == 0;     "

//@ assert JML.lbl(\"AL\",i);     "

//@ assert JML.lbl(\"AL\",i) == 0;     "

//@ assert JML.lbl(\"AL\",i) == 0;     "

//@ assert JML.lbl(\"AL\",i) == null;     "

//@ assert JML.lbl(\"AL\",i) == null;     "

//@ assert JML.lbl(\"AL\",i) == 0;     "

//@ assert JML.lbl(\"AL\",i) == 0;     "

//@ assert JML.lbl(\"AL\",i);     "

//@ assert JML.lbl(\"AL\",i) == 0;     "

//@ assert JML.lbl(\"AL\",i) == 0;     "

/*@ non_null*/
/*@ non_null*/
//@ requires a.containsNull == false;    "

/*@ non_null*/
//@ public normal_behavior    "

//@   ensures \\result == i;    "

//@ pure    "

//@ public normal_behavior    "

//@   ensures \\result == i;    "

//@ pure    "

/*@ immutable */
//@   public model_program {    "

//@      return t;    "

//@    }    "

//@ pure function    "

/*@ immutable */
//@ public normal_behavior ensures true; pure function     "

//@ public normal_behavior    "  // Line 14

//@   ensures \\result == i;    "

//@ pure    "

/*@ immutable */
//@   public normal_behavior     "

//@      ensures \\result == t;    "

//@ pure function    "

/*@ immutable */
//@ public normal_behavior ensures true; pure function    "

//@ public normal_behavior    "  // Line 13

//@   ensures \\result == i;    "

//@ pure    "

//@ public normal_behavior assignable i; ensures i == !\\old(i) ;    "

//@ requires a != null;    "

//@ requires j < 1000 && j > -1000;    "

//@ assignable field;    "

//@ ensures \\result == j+101;    "

//@ ensures field == j+100;    "

/*@{FF}*/
/*@{FF}*/
/*@ @FunctionalInterface model public static interface FF extends BiFunction<TestJava,Integer,Integer> {      "
                +"        also assignable t.field; ensures t.field == n; ensures \\result == n+1;      "
                +"        non_null      "
                +"       Integer apply(TestJava t, Integer n);} */
//@ public normal_behavior assignable field; ensures \\result == i + 1 && field == i ;    "

//@ public normal_behavior assignable field; ensures \\result == i + 1 ;    "

//@ requires j < 1000 && j > -1000;    "

//@ assignable field;    "

/*@{FF}*/
/*@!FF*/
//@ assignable field;    "

//@ assert field == 300;    "

//@ public normal_behavior requires true;    "

//@ ghost boolean b;"

//@ set b = RuntimeException::new == RuntimeException::new;    "

//@ assert b;    "

//@ set b = RuntimeException::new != null;    "

//@ assert b;    "

//@ set b = null != RuntimeException::new;    "

//@ assert b;    "

//@ set b = null != (java.util.function.Function)(x -> x);    "

//@ assert b;    "

//@ set b = java.util.function.Function::identity != (java.util.function.Function)(x -> x);    "

//@ assert b;    "

//@ public model static class R extends C {};    "

/*@ nullable {R}*/
/*@{R}*/
//@ public normal_behavior requires true;    "

//@ assert field == null || field instanceof R;"

/*@ nullable {R}*/
/*@{R}*/
//@ public normal_behavior requires true;    "

//@ assert field == null || field instanceof R;"

//@ public normal_behavior    "

//@   ensures \\result instanceof NullPointerException;    "

//@ public normal_behavior    "

//@ ensures exx == ex;    "

//@ public normal_behavior    "

//@ ensures exx == RuntimeException::new;    "

//@ public normal_behavior    "

//@ assignable exx;    "

//@ ensures exx == ex;    "

//@ public normal_behavior    "

//@ assignable exx;    "

//@ ensures exx == NullPointerException::new;    "

//@ public exceptional_behavior requires true; signals_only NullPointerException;    "

//@ public exceptional_behavior requires true; signals_only NullPointerException;    "

//@ public normal_behavior    "

//@   ensures \\result instanceof NullPointerException;    "

//@ public normal_behavior    "

//@ ensures exx == NullPointerException::new;    "

//@ public exceptional_behavior requires true; signals_only ArithmeticException;    "

//@ also public normal_behavior    "

//@   requires true;    "

//@ pure    "

//@ public behavior requires true; pure    "   // Line 10


//@ public normal_behavior requires true; pure    "

//@ public normal_behavior requires true; pure    "

/*@ {java.util.function.Supplier.Pure<Boolean>}*/
//@ public normal_behavior requires true; pure    "

/*@ {java.util.function.Supplier.PureNonNull<Boolean>}*/
//@ also public normal_behavior    "

//@   requires true;    "

//@ pure    "

//@ public behavior ensures true; pure    "

/*@!PureSupplier */
/*@ ( PureSupplier )@*/
//@ public behavior ensures true; pure    "

/*@!PureSupplier*/
//@ public model_program { return x -> x; }    "

//@ nullableByDefault

//@ assert b;    "  // Should be false

//@ inline     "


//@ nullableByDefault

//@ requires ppp == this.ppp;    "

//@ assert b;    "  // Should be true

//@ inline     "


//@ nullableByDefault

//@ assert b;    "

//@ inline     "


//@ nullableByDefault

//@ assert b;    "

//@ inline     "


//@ nullableByDefault

//@ assert b;    "  // SHould be true

//@ inline     "


/*@ non_null_by_default*/
//@ requires this.a == 11;    "

//@ assert b == 9 + 7 + 11 + (11+9+11+100);    "

//@ inline     "


/*@ non_null_by_default*/
//@ model public static interface NNFunction<T,R> extends Function<T,R> { non_null R apply(non_null T t); }     "

//@ requires this.a == 11;    "

//@ assert b == 9 + 7 + 11 + (11+9+11+100);    "

//@ requires f != null; inline     "

/*@{NNFunction<Integer,Integer>}*/
/*@ spec_public nullable */
//@ assignable this.aaaaaaaaaaa;    "

//@ ensures this.aaaaaaaaaaa != null;    "

//@ ensures this.aaaaaaaaaaa.byteValue() == aaaaaaaaaaa;    "

//@ public model static interface NoException { public normal_behavior ensures true; void run(); }     "

//@ public normal_behavior requires true; { r.run(); } ensures true;     "

/*@{NoException}*/

//@ assignable this.aaaaaaaaaaa;    "

//@ ensures this.aaaaaaaaaaa != null;    "

//@ ensures this.aaaaaaaaaaa.intValue() == aaaaaaaaaaa;    "

//@ public behavior requires true; { r.run(); } ensures true;     "

/*@ non_null*/
/*@ non_null*/
//@ requires a.containsNull == false;    "

/*@ non_null*/
//@ public normal_behavior    "

//@   ensures \\result == i;    "

//@ pure    "

//@ public normal_behavior    "

//@   ensures \\result == i;    "

//@ pure    "

/*@ immutable */
//@   public model_program {    "

//@      return t;    "

//@    }    "

//@ pure function    "

/*@ immutable */
//@ public normal_behavior ensures true; pure function     "

//@ public normal_behavior    "  // Line 14

//@   ensures \\result == i;    "

//@ pure    "

/*@ immutable */
//@   public normal_behavior     "

//@      ensures \\result == t;    "

//@ pure function    "

/*@ immutable */
//@ public normal_behavior ensures true; pure function    "

//@ public normal_behavior    "  // Line 13

//@   ensures \\result == i;    "

//@ pure    "

//@ public normal_behavior assignable i; ensures i == !\\old(i) ;    "

//@ requires a != null;    "

//@ requires j < 1000 && j > -1000;    "

//@ assignable field;    "

//@ ensures \\result == j+101;    "

//@ ensures field == j+100;    "

/*@{FF}*/
/*@{FF}*/
/*@ @FunctionalInterface model public static interface FF extends BiFunction<TestJava,Integer,Integer> {      "
                +"        also assignable t.field; ensures t.field == n; ensures \\result == n+1;      "
                +"        non_null      "
                +"       Integer apply(TestJava t, Integer n);} */
//@ public normal_behavior assignable field; ensures \\result == i + 1 && field == i ;    "

//@ public normal_behavior assignable field; ensures \\result == i + 1 ;    "

//@ requires j < 1000 && j > -1000;    "

//@ assignable field;    "

/*@{FF}*/
/*@!FF*/
//@ assignable field;    "

//@ assert field == 300;    "

//@ public normal_behavior requires true;    "

//@ ghost boolean b;"

//@ set b = RuntimeException::new == RuntimeException::new;    "

//@ assert b;    "

//@ set b = RuntimeException::new != null;    "

//@ assert b;    "

//@ set b = null != RuntimeException::new;    "

//@ assert b;    "

//@ set b = null != (java.util.function.Function)(x -> x);    "

//@ assert b;    "

//@ set b = java.util.function.Function::identity != (java.util.function.Function)(x -> x);    "

//@ assert b;    "

//@ public model static class R extends C {};    "

/*@ nullable {R}*/
/*@{R}*/
//@ public normal_behavior requires true;    "

//@ assert field == null || field instanceof R;"

/*@ nullable {R}*/
/*@{R}*/
//@ public normal_behavior requires true;    "

//@ assert field == null || field instanceof R;"

//@ public normal_behavior    "

//@   ensures \\result instanceof NullPointerException;    "

//@ public normal_behavior    "

//@ ensures exx == ex;    "

//@ public normal_behavior    "

//@ ensures exx == RuntimeException::new;    "

//@ public normal_behavior    "

//@ assignable exx;    "

//@ ensures exx == ex;    "

//@ public normal_behavior    "

//@ assignable exx;    "

//@ ensures exx == NullPointerException::new;    "

//@ public exceptional_behavior requires true; signals_only NullPointerException;    "

//@ public exceptional_behavior requires true; signals_only NullPointerException;    "

//@ public normal_behavior    "

//@   ensures \\result instanceof NullPointerException;    "

//@ public normal_behavior    "

//@ ensures exx == NullPointerException::new;    "

//@ public exceptional_behavior requires true; signals_only ArithmeticException;    "

//@ also public normal_behavior    "

//@   requires true;    "

//@ pure    "

//@ public behavior requires true; pure    "   // Line 10


//@ public normal_behavior requires true; pure    "

//@ public normal_behavior requires true; pure    "

/*@ {java.util.function.Supplier.Pure<Boolean>}*/
//@ public normal_behavior requires true; pure    "

/*@ {java.util.function.Supplier.PureNonNull<Boolean>}*/
//@ also public normal_behavior    "

//@   requires true;    "

//@ pure    "

//@ public behavior ensures true; pure    "

/*@!PureSupplier */
/*@ ( PureSupplier )@*/
//@ public behavior ensures true; pure    "

/*@!PureSupplier*/
//@ public model_program { return x -> x; }    "

//@ nullableByDefault

//@ assert b;    "  // Should be false

//@ inline     "


//@ nullableByDefault

//@ requires ppp == this.ppp;    "

//@ assert b;    "  // Should be true

//@ inline     "


//@ nullableByDefault

//@ assert b;    "

//@ inline     "


//@ nullableByDefault

//@ assert b;    "

//@ inline     "


//@ nullableByDefault

//@ assert b;    "  // SHould be true

//@ inline     "


/*@ non_null_by_default*/
//@ requires this.a == 11;    "

//@ assert b == 9 + 7 + 11 + (11+9+11+100);    "

//@ inline     "


/*@ non_null_by_default*/
//@ model public static interface NNFunction<T,R> extends Function<T,R> { non_null R apply(non_null T t); }     "

//@ requires this.a == 11;    "

//@ assert b == 9 + 7 + 11 + (11+9+11+100);    "

//@ requires f != null; inline     "

/*@{NNFunction<Integer,Integer>}*/
/*@ spec_public nullable */
//@ assignable this.aaaaaaaaaaa;    "

//@ ensures this.aaaaaaaaaaa != null;    "

//@ ensures this.aaaaaaaaaaa.byteValue() == aaaaaaaaaaa;    "

//@ public model static interface NoException { public normal_behavior ensures true; void run(); }     "

//@ public normal_behavior requires true; { r.run(); } ensures true;     "

/*@{NoException}*/

//@ assignable this.aaaaaaaaaaa;    "

//@ ensures this.aaaaaaaaaaa != null;    "

//@ ensures this.aaaaaaaaaaa.intValue() == aaaaaaaaaaa;    "

//@ public behavior requires true; { r.run(); } ensures true;     "

/*@ non_null*/
/*@ non_null*/
//@ requires a.containsNull == false;    "

/*@ non_null*/
//@ public normal_behavior    "

//@   ensures \\result == i;    "

//@ pure    "

//@ public normal_behavior    "

//@   ensures \\result == i;    "

//@ pure    "

/*@ immutable */
//@   public model_program {    "

//@      return t;    "

//@    }    "

//@ pure function    "

/*@ immutable */
//@ public normal_behavior ensures true; pure function     "

//@ public normal_behavior    "  // Line 14

//@   ensures \\result == i;    "

//@ pure    "

/*@ immutable */
//@   public normal_behavior     "

//@      ensures \\result == t;    "

//@ pure function    "

/*@ immutable */
//@ public normal_behavior ensures true; pure function    "

//@ public normal_behavior    "  // Line 13

//@   ensures \\result == i;    "

//@ pure    "

//@ public normal_behavior assignable i; ensures i == !\\old(i) ;    "

//@ requires a != null;    "

//@ requires j < 1000 && j > -1000;    "

//@ assignable field;    "

//@ ensures \\result == j+101;    "

//@ ensures field == j+100;    "

/*@{FF}*/
/*@{FF}*/
/*@ @FunctionalInterface model public static interface FF extends BiFunction<TestJava,Integer,Integer> {      "
                +"        also assignable t.field; ensures t.field == n; ensures \\result == n+1;      "
                +"        non_null      "
                +"       Integer apply(TestJava t, Integer n);} */
//@ public normal_behavior assignable field; ensures \\result == i + 1 && field == i ;    "

//@ public normal_behavior assignable field; ensures \\result == i + 1 ;    "

//@ requires j < 1000 && j > -1000;    "

//@ assignable field;    "

/*@{FF}*/
/*@!FF*/
//@ assignable field;    "

//@ assert field == 300;    "

//@ public normal_behavior requires true;    "

//@ ghost boolean b;"

//@ set b = RuntimeException::new == RuntimeException::new;    "

//@ assert b;    "

//@ set b = RuntimeException::new != null;    "

//@ assert b;    "

//@ set b = null != RuntimeException::new;    "

//@ assert b;    "

//@ set b = null != (java.util.function.Function)(x -> x);    "

//@ assert b;    "

//@ set b = java.util.function.Function::identity != (java.util.function.Function)(x -> x);    "

//@ assert b;    "

//@ public model static class R extends C {};    "

/*@ nullable {R}*/
/*@{R}*/
//@ public normal_behavior requires true;    "

//@ assert field == null || field instanceof R;"

/*@ nullable {R}*/
/*@{R}*/
//@ public normal_behavior requires true;    "

//@ assert field == null || field instanceof R;"

//@ public normal_behavior    "

//@   ensures \\result instanceof NullPointerException;    "

//@ public normal_behavior    "

//@ ensures exx == ex;    "

//@ public normal_behavior    "

//@ ensures exx == RuntimeException::new;    "

//@ public normal_behavior    "

//@ assignable exx;    "

//@ ensures exx == ex;    "

//@ public normal_behavior    "

//@ assignable exx;    "

//@ ensures exx == NullPointerException::new;    "

//@ public exceptional_behavior requires true; signals_only NullPointerException;    "

//@ public exceptional_behavior requires true; signals_only NullPointerException;    "

//@ public normal_behavior    "

//@   ensures \\result instanceof NullPointerException;    "

//@ public normal_behavior    "

//@ ensures exx == NullPointerException::new;    "

//@ public exceptional_behavior requires true; signals_only ArithmeticException;    "

//@ also public normal_behavior    "

//@   requires true;    "

//@ pure    "

//@ public behavior requires true; pure    "   // Line 10


//@ public normal_behavior requires true; pure    "

//@ public normal_behavior requires true; pure    "

/*@ {java.util.function.Supplier.Pure<Boolean>}*/
//@ public normal_behavior requires true; pure    "

/*@ {java.util.function.Supplier.PureNonNull<Boolean>}*/
//@ also public normal_behavior    "

//@   requires true;    "

//@ pure    "

//@ public behavior ensures true; pure    "

/*@!PureSupplier */
/*@ ( PureSupplier )@*/
//@ public behavior ensures true; pure    "

/*@!PureSupplier*/
//@ public model_program { return x -> x; }    "

//@ nullableByDefault

//@ assert b;    "  // Should be false

//@ inline     "


//@ nullableByDefault

//@ requires ppp == this.ppp;    "

//@ assert b;    "  // Should be true

//@ inline     "


//@ nullableByDefault

//@ assert b;    "

//@ inline     "


//@ nullableByDefault

//@ assert b;    "

//@ inline     "


//@ nullableByDefault

//@ assert b;    "  // SHould be true

//@ inline     "


/*@ non_null_by_default*/
//@ requires this.a == 11;    "

//@ assert b == 9 + 7 + 11 + (11+9+11+100);    "

//@ inline     "


/*@ non_null_by_default*/
//@ model public static interface NNFunction<T,R> extends Function<T,R> { non_null R apply(non_null T t); }     "

//@ requires this.a == 11;    "

//@ assert b == 9 + 7 + 11 + (11+9+11+100);    "

//@ requires f != null; inline     "

/*@{NNFunction<Integer,Integer>}*/
/*@ spec_public nullable */
//@ assignable this.aaaaaaaaaaa;    "

//@ ensures this.aaaaaaaaaaa != null;    "

//@ ensures this.aaaaaaaaaaa.byteValue() == aaaaaaaaaaa;    "

//@ public model static interface NoException { public normal_behavior ensures true; void run(); }     "

//@ public normal_behavior requires true; { r.run(); } ensures true;     "

/*@{NoException}*/

//@ assignable this.aaaaaaaaaaa;    "

//@ ensures this.aaaaaaaaaaa != null;    "

//@ ensures this.aaaaaaaaaaa.intValue() == aaaaaaaaaaa;    "

//@ public behavior requires true; { r.run(); } ensures true;     "

/*@ non_null*/
/*@ non_null*/
//@ requires a.containsNull == false;    "

/*@ non_null*/
//@ public normal_behavior    "

//@   ensures \\result == i;    "

//@ pure    "

//@ public normal_behavior    "

//@   ensures \\result == i;    "

//@ pure    "

/*@ immutable */
//@   public model_program {    "

//@      return t;    "

//@    }    "

//@ pure function    "

/*@ immutable */
//@ public normal_behavior ensures true; pure function     "

//@ public normal_behavior    "  // Line 14

//@   ensures \\result == i;    "

//@ pure    "

/*@ immutable */
//@   public normal_behavior     "

//@      ensures \\result == t;    "

//@ pure function    "

/*@ immutable */
//@ public normal_behavior ensures true; pure function    "

//@ public normal_behavior    "  // Line 13

//@   ensures \\result == i;    "

//@ pure    "

//@ public normal_behavior assignable i; ensures i == !\\old(i) ;    "

//@ requires a != null;    "

//@ requires j < 1000 && j > -1000;    "

//@ assignable field;    "

//@ ensures \\result == j+101;    "

//@ ensures field == j+100;    "

/*@{FF}*/
/*@{FF}*/
/*@ @FunctionalInterface model public static interface FF extends BiFunction<TestJava,Integer,Integer> {      "
                +"        also assignable t.field; ensures t.field == n; ensures \\result == n+1;      "
                +"        non_null      "
                +"       Integer apply(TestJava t, Integer n);} */
//@ public normal_behavior assignable field; ensures \\result == i + 1 && field == i ;    "

//@ public normal_behavior assignable field; ensures \\result == i + 1 ;    "

//@ requires j < 1000 && j > -1000;    "

//@ assignable field;    "

/*@{FF}*/
/*@!FF*/
//@ assignable field;    "

//@ assert field == 300;    "

//@ public normal_behavior requires true;    "

//@ ghost boolean b;"

//@ set b = RuntimeException::new == RuntimeException::new;    "

//@ assert b;    "

//@ set b = RuntimeException::new != null;    "

//@ assert b;    "

//@ set b = null != RuntimeException::new;    "

//@ assert b;    "

//@ set b = null != (java.util.function.Function)(x -> x);    "

//@ assert b;    "

//@ set b = java.util.function.Function::identity != (java.util.function.Function)(x -> x);    "

//@ assert b;    "

//@ public model static class R extends C {};    "

/*@ nullable {R}*/
/*@{R}*/
//@ public normal_behavior requires true;    "

//@ assert field == null || field instanceof R;"

/*@ nullable {R}*/
/*@{R}*/
//@ public normal_behavior requires true;    "

//@ assert field == null || field instanceof R;"

//@ public normal_behavior    "

//@   ensures \\result instanceof NullPointerException;    "

//@ public normal_behavior    "

//@ ensures exx == ex;    "

//@ public normal_behavior    "

//@ ensures exx == RuntimeException::new;    "

//@ public normal_behavior    "

//@ assignable exx;    "

//@ ensures exx == ex;    "

//@ public normal_behavior    "

//@ assignable exx;    "

//@ ensures exx == NullPointerException::new;    "

//@ public exceptional_behavior requires true; signals_only NullPointerException;    "

//@ public exceptional_behavior requires true; signals_only NullPointerException;    "

//@ public normal_behavior    "

//@   ensures \\result instanceof NullPointerException;    "

//@ public normal_behavior    "

//@ ensures exx == NullPointerException::new;    "

//@ public exceptional_behavior requires true; signals_only ArithmeticException;    "

//@ also public normal_behavior    "

//@   requires true;    "

//@ pure    "

//@ public behavior requires true; pure    "   // Line 10


//@ public normal_behavior requires true; pure    "

//@ public normal_behavior requires true; pure    "

/*@ {java.util.function.Supplier.Pure<Boolean>}*/
//@ public normal_behavior requires true; pure    "

/*@ {java.util.function.Supplier.PureNonNull<Boolean>}*/
//@ also public normal_behavior    "

//@   requires true;    "

//@ pure    "

//@ public behavior ensures true; pure    "

/*@!PureSupplier */
/*@ ( PureSupplier )@*/
//@ public behavior ensures true; pure    "

/*@!PureSupplier*/
//@ public model_program { return x -> x; }    "

//@ nullableByDefault

//@ assert b;    "  // Should be false

//@ inline     "


//@ nullableByDefault

//@ requires ppp == this.ppp;    "

//@ assert b;    "  // Should be true

//@ inline     "


//@ nullableByDefault

//@ assert b;    "

//@ inline     "


//@ nullableByDefault

//@ assert b;    "

//@ inline     "


//@ nullableByDefault

//@ assert b;    "  // SHould be true

//@ inline     "


/*@ non_null_by_default*/
//@ requires this.a == 11;    "

//@ assert b == 9 + 7 + 11 + (11+9+11+100);    "

//@ inline     "


/*@ non_null_by_default*/
//@ model public static interface NNFunction<T,R> extends Function<T,R> { non_null R apply(non_null T t); }     "

//@ requires this.a == 11;    "

//@ assert b == 9 + 7 + 11 + (11+9+11+100);    "

//@ requires f != null; inline     "

/*@{NNFunction<Integer,Integer>}*/
/*@ spec_public nullable */
//@ assignable this.aaaaaaaaaaa;    "

//@ ensures this.aaaaaaaaaaa != null;    "

//@ ensures this.aaaaaaaaaaa.byteValue() == aaaaaaaaaaa;    "

//@ public model static interface NoException { public normal_behavior ensures true; void run(); }     "

//@ public normal_behavior requires true; { r.run(); } ensures true;     "

/*@{NoException}*/

//@ assignable this.aaaaaaaaaaa;    "

//@ ensures this.aaaaaaaaaaa != null;    "

//@ ensures this.aaaaaaaaaaa.intValue() == aaaaaaaaaaa;    "

//@ public behavior requires true; { r.run(); } ensures true;     "

/*@ non_null*/
/*@ non_null*/
//@ requires a.containsNull == false;    "

/*@ non_null*/
//@ public normal_behavior    "

//@   ensures \\result == i;    "

//@ pure    "

//@ public normal_behavior    "

//@   ensures \\result == i;    "

//@ pure    "

/*@ immutable */
//@   public model_program {    "

//@      return t;    "

//@    }    "

//@ pure function    "

/*@ immutable */
//@ public normal_behavior ensures true; pure function     "

//@ public normal_behavior    "  // Line 14

//@   ensures \\result == i;    "

//@ pure    "

/*@ immutable */
//@   public normal_behavior     "

//@      ensures \\result == t;    "

//@ pure function    "

/*@ immutable */
//@ public normal_behavior ensures true; pure function    "

//@ public normal_behavior    "  // Line 13

//@   ensures \\result == i;    "

//@ pure    "

//@ public normal_behavior assignable i; ensures i == !\\old(i) ;    "

//@ requires a != null;    "

//@ requires j < 1000 && j > -1000;    "

//@ assignable field;    "

//@ ensures \\result == j+101;    "

//@ ensures field == j+100;    "

/*@{FF}*/
/*@{FF}*/
/*@ @FunctionalInterface model public static interface FF extends BiFunction<TestJava,Integer,Integer> {      "
                +"        also assignable t.field; ensures t.field == n; ensures \\result == n+1;      "
                +"        non_null      "
                +"       Integer apply(TestJava t, Integer n);} */
//@ public normal_behavior assignable field; ensures \\result == i + 1 && field == i ;    "

//@ public normal_behavior assignable field; ensures \\result == i + 1 ;    "

//@ requires j < 1000 && j > -1000;    "

//@ assignable field;    "

/*@{FF}*/
/*@!FF*/
//@ assignable field;    "

//@ assert field == 300;    "

//@ public normal_behavior requires true;    "

//@ ghost boolean b;"

//@ set b = RuntimeException::new == RuntimeException::new;    "

//@ assert b;    "

//@ set b = RuntimeException::new != null;    "

//@ assert b;    "

//@ set b = null != RuntimeException::new;    "

//@ assert b;    "

//@ set b = null != (java.util.function.Function)(x -> x);    "

//@ assert b;    "

//@ set b = java.util.function.Function::identity != (java.util.function.Function)(x -> x);    "

//@ assert b;    "

//@ public model static class R extends C {};    "

/*@ nullable {R}*/
/*@{R}*/
//@ public normal_behavior requires true;    "

//@ assert field == null || field instanceof R;"

/*@ nullable {R}*/
/*@{R}*/
//@ public normal_behavior requires true;    "

//@ assert field == null || field instanceof R;"

//@ public normal_behavior    "

//@   ensures \\result instanceof NullPointerException;    "

//@ public normal_behavior    "

//@ ensures exx == ex;    "

//@ public normal_behavior    "

//@ ensures exx == RuntimeException::new;    "

//@ public normal_behavior    "

//@ assignable exx;    "

//@ ensures exx == ex;    "

//@ public normal_behavior    "

//@ assignable exx;    "

//@ ensures exx == NullPointerException::new;    "

//@ public exceptional_behavior requires true; signals_only NullPointerException;    "

//@ public exceptional_behavior requires true; signals_only NullPointerException;    "

//@ public normal_behavior    "

//@   ensures \\result instanceof NullPointerException;    "

//@ public normal_behavior    "

//@ ensures exx == NullPointerException::new;    "

//@ public exceptional_behavior requires true; signals_only ArithmeticException;    "

//@ also public normal_behavior    "

//@   requires true;    "

//@ pure    "

//@ public behavior requires true; pure    "   // Line 10


//@ public normal_behavior requires true; pure    "

//@ public normal_behavior requires true; pure    "

/*@ {java.util.function.Supplier.Pure<Boolean>}*/
//@ public normal_behavior requires true; pure    "

/*@ {java.util.function.Supplier.PureNonNull<Boolean>}*/
//@ also public normal_behavior    "

//@   requires true;    "

//@ pure    "

//@ public behavior ensures true; pure    "

/*@!PureSupplier */
/*@ ( PureSupplier )@*/
//@ public behavior ensures true; pure    "

/*@!PureSupplier*/
//@ public model_program { return x -> x; }    "

//@ nullableByDefault

//@ assert b;    "  // Should be false

//@ inline     "


//@ nullableByDefault

//@ requires ppp == this.ppp;    "

//@ assert b;    "  // Should be true

//@ inline     "


//@ nullableByDefault

//@ assert b;    "

//@ inline     "


//@ nullableByDefault

//@ assert b;    "

//@ inline     "


//@ nullableByDefault

//@ assert b;    "  // SHould be true

//@ inline     "


/*@ non_null_by_default*/
//@ requires this.a == 11;    "

//@ assert b == 9 + 7 + 11 + (11+9+11+100);    "

//@ inline     "


/*@ non_null_by_default*/
//@ model public static interface NNFunction<T,R> extends Function<T,R> { non_null R apply(non_null T t); }     "

//@ requires this.a == 11;    "

//@ assert b == 9 + 7 + 11 + (11+9+11+100);    "

//@ requires f != null; inline     "

/*@{NNFunction<Integer,Integer>}*/
/*@ spec_public nullable */
//@ assignable this.aaaaaaaaaaa;    "

//@ ensures this.aaaaaaaaaaa != null;    "

//@ ensures this.aaaaaaaaaaa.byteValue() == aaaaaaaaaaa;    "

//@ public model static interface NoException { public normal_behavior ensures true; void run(); }     "

//@ public normal_behavior requires true; { r.run(); } ensures true;     "

/*@{NoException}*/

//@ assignable this.aaaaaaaaaaa;    "

//@ ensures this.aaaaaaaaaaa != null;    "

//@ ensures this.aaaaaaaaaaa.intValue() == aaaaaaaaaaa;    "

//@ public behavior requires true; { r.run(); } ensures true;     "

//@   requires false;    "

//@   ensures false;    "

//@   ensures false;    "

//@   signals (Exception) false;    "

//@ public static invariant i>=0;    "

//@ assignable i;    "

//@ public initially i>=0;    "

//@ assignable i;    "

//@ public constraint i>=\\old(i);    "

//@ assignable i;    "

//@   requires false;    "

//@   ensures false;    "

//@   ensures false;    "

//@   signals (Exception) false;    "

//@ public static invariant i>=0;    "

//@ assignable i;    "

//@ public initially i>=0;    "

//@ assignable i;    "

//@ public constraint i>=\\old(i);    "

//@ assignable i;    "

//@   requires false;    "

//@   ensures false;    "

//@   ensures false;    "

//@   signals (Exception) false;    "

//@ public static invariant i>=0;    "

//@ assignable i;    "

//@ public initially i>=0;    "

//@ assignable i;    "

//@ public constraint i>=\\old(i);    "

//@ assignable i;    "

//@   requires false;    "

//@   ensures false;    "

//@   ensures false;    "

//@   signals (Exception) false;    "

//@ public static invariant i>=0;    "

//@ assignable i;    "

//@ public initially i>=0;    "

//@ assignable i;    "

//@ public constraint i>=\\old(i);    "

//@ assignable i;    "

//@   requires false;    "

//@   ensures false;    "

//@   ensures false;    "

//@   signals (Exception) false;    "

//@ public static invariant i>=0;    "

//@ assignable i;    "

//@ public initially i>=0;    "

//@ assignable i;    "

//@ public constraint i>=\\old(i);    "

//@ assignable i;    "

/*@ assert false; */
/*@ assert false; */
//@ assert false;    "

//@ assert false;    "

/*@ ensures false; */
/*@ also ensures false; */
/*@ ensures false; */
//@ ensures false;    "

//@ public invariant false;    "

/*@ public invariant false;*/
/*@ public invariant false;*/
//@ public invariant false;    "

/*@ model class C {      "  // Invariant is false on exit
                +"           invariant false;    "
                +"           void mc() {  }};*/
/*@ model class D {      "
                +"           ensures false;    "
                +"           void md() {  }};*/
/*@ model class E {      "
                +"           void me() {  assert false; }};*/
//@ ghost E e;    "

/*@ ensures false;    "
                +"      model void mm() {}*/
/*@ model void mn() {  assert false;  }*/
/*@ model public static class A {    "  // Invariant is false on exit
                +"     invariant false;    "
                +"     public void m2() {    "  // Invariant is not satisfiable on entrance
                +"     }*/
/*@ model class B {    " // Invariant is false on exit
                +"     public invariant false;    "
                +"     public void mb() {    "  // Invariant is not satisfiable on entrance
                +"     }*/
/*@ model class BB {    "
                +"     ensures false;    "
                +"     public void mbb() {    " // Postcondition is false
                +"     }*/
//@ assert new TestJava() {  public invariant x >= 0; public void mm() { } } != null;     "  // Line 5

//@ assert new TestJava() {  invariant false; int i; } != null;     "  // Line 5

//@ assert new TestJava() {  int i; } == null;     "  // Line 9

//@ assert new TestJava() {  invariant true; int i; } == null;     "  // Line 5

/*@ invariant false; */
//@ assert b;    "

//@ assert b;    "

/*@ invariant true; */
//@ assert b;    "

//@ assert new TestJava() {  } != null;     "  // Line 5

/*@ requires i > 0; */
//@ code_java_math spec_java_math     "

//@ public normal_behavior    "

//@   ensures \\result == k+1;    "

//@ pure    "

//@ ensures \\result == 2 + m(j+1) - 3;     "

//@ ensures \\result == 2 + m(j+1) - 2;     "

//@ requires m(j) == 3;     "

//@ ensures \\result == 3;     "

//@ assert m(j) == \\old(j) + 2;    "

//@ public normal_behavior    "

//@   requires b;    "

//@   ensures \\result == k+1;    "

//@ pure    "

//@ ensures \\result == mm(j);     " // Postcondition error - undefined precondition for mm

//@ requires b;     "

//@ ensures \\result == mm(j);     "

//@ ensures b ==> \\result == mm(j);     "

//@ code_java_math spec_java_math     "

//@ public normal_behavior    "

//@   ensures \\result == k+1;    "

//@ pure    "

//@ ensures \\result == 2 + m(j+1) - 3;     "

//@ ensures \\result == 2 + m(j+1) - 2;     "

//@ requires m(j) == 3;     "

//@ ensures \\result == 3;     "

//@ assert m(j) == \\old(j) + 2;    "

//@ public normal_behavior    "

//@   requires b;    "

//@   ensures \\result == k+1;    "

//@ pure    "

//@ ensures \\result == mm(j);     " // Postcondition error - undefined precondition for mm

//@ requires b;     "

//@ ensures \\result == mm(j);     "

//@ ensures b ==> \\result == mm(j);     "

//@ public normal_behavior    "

//@   ensures mm(\\result) + 1 == mm(k);    "

//@ pure spec_java_math code_java_math     "

//@ public normal_behavior    "

//@   ensures \\result == k+1;    "

//@ pure spec_java_math code_java_math     "

//@ ensures \\result == 2 + m(j+1) - 1;     "

//@ pure spec_java_math code_java_math     "

//@ code_java_math spec_java_math     "

//@ ensures \\result == 2 + m(j+1) - 1;     "

//@ public normal_behavior    "

//@   ensures mm(\\result) + 1 == mm(k);    "

//@ pure    "

//@ public normal_behavior    "

//@   ensures \\result == k+1;    "

//@ pure    "

//@ model public int mm(int k);    "

//@ public normal_behavior    "

//@   ensures mm(\\result) + 1 == mm(k);    "

//@ pure    "

//@ public normal_behavior    "

//@   ensures \\result == k+1;    "

//@ pure    "

//@ model public int mm(int k);    "

//@ ensures \\result == 2 + m(j+1) - 1;     "

/*@ assert false; */
/*@ assert false; */
//@ assert false;    "

//@ assert false;    "

/*@ ensures false; */
/*@ also ensures false; */
/*@ ensures false; */
//@ ensures false;    "

//@ public invariant false;    "

/*@ public invariant false;*/
/*@ public invariant false;*/
//@ public invariant false;    "

/*@ model class C {      "  // Invariant is false on exit
                +"           invariant false;    "
                +"           void mc() {  }};*/
/*@ model class D {      "
                +"           ensures false;    "
                +"           void md() {  }};*/
/*@ model class E {      "
                +"           void me() {  assert false; }};*/
//@ ghost E e;    "

/*@ ensures false;    "
                +"      model void mm() {}*/
/*@ model void mn() {  assert false;  }*/
/*@ model public static class A {    "  // Invariant is false on exit
                +"     invariant false;    "
                +"     public void m2() {    "  // Invariant is not satisfiable on entrance
                +"     }*/
/*@ model class B {    " // Invariant is false on exit
                +"     public invariant false;    "
                +"     public void mb() {    "  // Invariant is not satisfiable on entrance
                +"     }*/
/*@ model class BB {    "
                +"     ensures false;    "
                +"     public void mbb() {    " // Postcondition is false
                +"     }*/
//@ assert new TestJava() {  public invariant x >= 0; public void mm() { } } != null;     "  // Line 5

//@ assert new TestJava() {  invariant false; int i; } != null;     "  // Line 5

//@ assert new TestJava() {  int i; } == null;     "  // Line 9

//@ assert new TestJava() {  invariant true; int i; } == null;     "  // Line 5

/*@ invariant false; */
//@ assert b;    "

//@ assert b;    "

/*@ invariant true; */
//@ assert b;    "

//@ assert new TestJava() {  } != null;     "  // Line 5

/*@ requires i > 0; */
//@ code_java_math spec_java_math     "

//@ public normal_behavior    "

//@   ensures \\result == k+1;    "

//@ pure    "

//@ ensures \\result == 2 + m(j+1) - 3;     "

//@ ensures \\result == 2 + m(j+1) - 2;     "

//@ requires m(j) == 3;     "

//@ ensures \\result == 3;     "

//@ assert m(j) == \\old(j) + 2;    "

//@ public normal_behavior    "

//@   requires b;    "

//@   ensures \\result == k+1;    "

//@ pure    "

//@ ensures \\result == mm(j);     " // Postcondition error - undefined precondition for mm

//@ requires b;     "

//@ ensures \\result == mm(j);     "

//@ ensures b ==> \\result == mm(j);     "

//@ code_java_math spec_java_math     "

//@ public normal_behavior    "

//@   ensures \\result == k+1;    "

//@ pure    "

//@ ensures \\result == 2 + m(j+1) - 3;     "

//@ ensures \\result == 2 + m(j+1) - 2;     "

//@ requires m(j) == 3;     "

//@ ensures \\result == 3;     "

//@ assert m(j) == \\old(j) + 2;    "

//@ public normal_behavior    "

//@   requires b;    "

//@   ensures \\result == k+1;    "

//@ pure    "

//@ ensures \\result == mm(j);     " // Postcondition error - undefined precondition for mm

//@ requires b;     "

//@ ensures \\result == mm(j);     "

//@ ensures b ==> \\result == mm(j);     "

//@ public normal_behavior    "

//@   ensures mm(\\result) + 1 == mm(k);    "

//@ pure spec_java_math code_java_math     "

//@ public normal_behavior    "

//@   ensures \\result == k+1;    "

//@ pure spec_java_math code_java_math     "

//@ ensures \\result == 2 + m(j+1) - 1;     "

//@ pure spec_java_math code_java_math     "

//@ code_java_math spec_java_math     "

//@ ensures \\result == 2 + m(j+1) - 1;     "

//@ public normal_behavior    "

//@   ensures mm(\\result) + 1 == mm(k);    "

//@ pure    "

//@ public normal_behavior    "

//@   ensures \\result == k+1;    "

//@ pure    "

//@ model public int mm(int k);    "

//@ public normal_behavior    "

//@   ensures mm(\\result) + 1 == mm(k);    "

//@ pure    "

//@ public normal_behavior    "

//@   ensures \\result == k+1;    "

//@ pure    "

//@ model public int mm(int k);    "

//@ ensures \\result == 2 + m(j+1) - 1;     "

/*@ assert false; */
/*@ assert false; */
//@ assert false;    "

//@ assert false;    "

/*@ ensures false; */
/*@ also ensures false; */
/*@ ensures false; */
//@ ensures false;    "

//@ public invariant false;    "

/*@ public invariant false;*/
/*@ public invariant false;*/
//@ public invariant false;    "

/*@ model class C {      "  // Invariant is false on exit
                +"           invariant false;    "
                +"           void mc() {  }};*/
/*@ model class D {      "
                +"           ensures false;    "
                +"           void md() {  }};*/
/*@ model class E {      "
                +"           void me() {  assert false; }};*/
//@ ghost E e;    "

/*@ ensures false;    "
                +"      model void mm() {}*/
/*@ model void mn() {  assert false;  }*/
/*@ model public static class A {    "  // Invariant is false on exit
                +"     invariant false;    "
                +"     public void m2() {    "  // Invariant is not satisfiable on entrance
                +"     }*/
/*@ model class B {    " // Invariant is false on exit
                +"     public invariant false;    "
                +"     public void mb() {    "  // Invariant is not satisfiable on entrance
                +"     }*/
/*@ model class BB {    "
                +"     ensures false;    "
                +"     public void mbb() {    " // Postcondition is false
                +"     }*/
//@ assert new TestJava() {  public invariant x >= 0; public void mm() { } } != null;     "  // Line 5

//@ assert new TestJava() {  invariant false; int i; } != null;     "  // Line 5

//@ assert new TestJava() {  int i; } == null;     "  // Line 9

//@ assert new TestJava() {  invariant true; int i; } == null;     "  // Line 5

/*@ invariant false; */
//@ assert b;    "

//@ assert b;    "

/*@ invariant true; */
//@ assert b;    "

//@ assert new TestJava() {  } != null;     "  // Line 5

/*@ requires i > 0; */
//@ code_java_math spec_java_math     "

//@ public normal_behavior    "

//@   ensures \\result == k+1;    "

//@ pure    "

//@ ensures \\result == 2 + m(j+1) - 3;     "

//@ ensures \\result == 2 + m(j+1) - 2;     "

//@ requires m(j) == 3;     "

//@ ensures \\result == 3;     "

//@ assert m(j) == \\old(j) + 2;    "

//@ public normal_behavior    "

//@   requires b;    "

//@   ensures \\result == k+1;    "

//@ pure    "

//@ ensures \\result == mm(j);     " // Postcondition error - undefined precondition for mm

//@ requires b;     "

//@ ensures \\result == mm(j);     "

//@ ensures b ==> \\result == mm(j);     "

//@ code_java_math spec_java_math     "

//@ public normal_behavior    "

//@   ensures \\result == k+1;    "

//@ pure    "

//@ ensures \\result == 2 + m(j+1) - 3;     "

//@ ensures \\result == 2 + m(j+1) - 2;     "

//@ requires m(j) == 3;     "

//@ ensures \\result == 3;     "

//@ assert m(j) == \\old(j) + 2;    "

//@ public normal_behavior    "

//@   requires b;    "

//@   ensures \\result == k+1;    "

//@ pure    "

//@ ensures \\result == mm(j);     " // Postcondition error - undefined precondition for mm

//@ requires b;     "

//@ ensures \\result == mm(j);     "

//@ ensures b ==> \\result == mm(j);     "

//@ public normal_behavior    "

//@   ensures mm(\\result) + 1 == mm(k);    "

//@ pure spec_java_math code_java_math     "

//@ public normal_behavior    "

//@   ensures \\result == k+1;    "

//@ pure spec_java_math code_java_math     "

//@ ensures \\result == 2 + m(j+1) - 1;     "

//@ pure spec_java_math code_java_math     "

//@ code_java_math spec_java_math     "

//@ ensures \\result == 2 + m(j+1) - 1;     "

//@ public normal_behavior    "

//@   ensures mm(\\result) + 1 == mm(k);    "

//@ pure    "

//@ public normal_behavior    "

//@   ensures \\result == k+1;    "

//@ pure    "

//@ model public int mm(int k);    "

//@ public normal_behavior    "

//@   ensures mm(\\result) + 1 == mm(k);    "

//@ pure    "

//@ public normal_behavior    "

//@   ensures \\result == k+1;    "

//@ pure    "

//@ model public int mm(int k);    "

//@ ensures \\result == 2 + m(j+1) - 1;     "

/*@ assert false; */
/*@ assert false; */
//@ assert false;    "

//@ assert false;    "

/*@ ensures false; */
/*@ also ensures false; */
/*@ ensures false; */
//@ ensures false;    "

//@ public invariant false;    "

/*@ public invariant false;*/
/*@ public invariant false;*/
//@ public invariant false;    "

/*@ model class C {      "  // Invariant is false on exit
                +"           invariant false;    "
                +"           void mc() {  }};*/
/*@ model class D {      "
                +"           ensures false;    "
                +"           void md() {  }};*/
/*@ model class E {      "
                +"           void me() {  assert false; }};*/
//@ ghost E e;    "

/*@ ensures false;    "
                +"      model void mm() {}*/
/*@ model void mn() {  assert false;  }*/
/*@ model public static class A {    "  // Invariant is false on exit
                +"     invariant false;    "
                +"     public void m2() {    "  // Invariant is not satisfiable on entrance
                +"     }*/
/*@ model class B {    " // Invariant is false on exit
                +"     public invariant false;    "
                +"     public void mb() {    "  // Invariant is not satisfiable on entrance
                +"     }*/
/*@ model class BB {    "
                +"     ensures false;    "
                +"     public void mbb() {    " // Postcondition is false
                +"     }*/
//@ assert new TestJava() {  public invariant x >= 0; public void mm() { } } != null;     "  // Line 5

//@ assert new TestJava() {  invariant false; int i; } != null;     "  // Line 5

//@ assert new TestJava() {  int i; } == null;     "  // Line 9

//@ assert new TestJava() {  invariant true; int i; } == null;     "  // Line 5

/*@ invariant false; */
//@ assert b;    "

//@ assert b;    "

/*@ invariant true; */
//@ assert b;    "

//@ assert new TestJava() {  } != null;     "  // Line 5

/*@ requires i > 0; */
//@ code_java_math spec_java_math     "

//@ public normal_behavior    "

//@   ensures \\result == k+1;    "

//@ pure    "

//@ ensures \\result == 2 + m(j+1) - 3;     "

//@ ensures \\result == 2 + m(j+1) - 2;     "

//@ requires m(j) == 3;     "

//@ ensures \\result == 3;     "

//@ assert m(j) == \\old(j) + 2;    "

//@ public normal_behavior    "

//@   requires b;    "

//@   ensures \\result == k+1;    "

//@ pure    "

//@ ensures \\result == mm(j);     " // Postcondition error - undefined precondition for mm

//@ requires b;     "

//@ ensures \\result == mm(j);     "

//@ ensures b ==> \\result == mm(j);     "

//@ code_java_math spec_java_math     "

//@ public normal_behavior    "

//@   ensures \\result == k+1;    "

//@ pure    "

//@ ensures \\result == 2 + m(j+1) - 3;     "

//@ ensures \\result == 2 + m(j+1) - 2;     "

//@ requires m(j) == 3;     "

//@ ensures \\result == 3;     "

//@ assert m(j) == \\old(j) + 2;    "

//@ public normal_behavior    "

//@   requires b;    "

//@   ensures \\result == k+1;    "

//@ pure    "

//@ ensures \\result == mm(j);     " // Postcondition error - undefined precondition for mm

//@ requires b;     "

//@ ensures \\result == mm(j);     "

//@ ensures b ==> \\result == mm(j);     "

//@ public normal_behavior    "

//@   ensures mm(\\result) + 1 == mm(k);    "

//@ pure spec_java_math code_java_math     "

//@ public normal_behavior    "

//@   ensures \\result == k+1;    "

//@ pure spec_java_math code_java_math     "

//@ ensures \\result == 2 + m(j+1) - 1;     "

//@ pure spec_java_math code_java_math     "

//@ code_java_math spec_java_math     "

//@ ensures \\result == 2 + m(j+1) - 1;     "

//@ public normal_behavior    "

//@   ensures mm(\\result) + 1 == mm(k);    "

//@ pure    "

//@ public normal_behavior    "

//@   ensures \\result == k+1;    "

//@ pure    "

//@ model public int mm(int k);    "

//@ public normal_behavior    "

//@   ensures mm(\\result) + 1 == mm(k);    "

//@ pure    "

//@ public normal_behavior    "

//@   ensures \\result == k+1;    "

//@ pure    "

//@ model public int mm(int k);    "

//@ ensures \\result == 2 + m(j+1) - 1;     "

/*@ assert false; */
/*@ assert false; */
//@ assert false;    "

//@ assert false;    "

/*@ ensures false; */
/*@ also ensures false; */
/*@ ensures false; */
//@ ensures false;    "

//@ public invariant false;    "

/*@ public invariant false;*/
/*@ public invariant false;*/
//@ public invariant false;    "

/*@ model class C {      "  // Invariant is false on exit
                +"           invariant false;    "
                +"           void mc() {  }};*/
/*@ model class D {      "
                +"           ensures false;    "
                +"           void md() {  }};*/
/*@ model class E {      "
                +"           void me() {  assert false; }};*/
//@ ghost E e;    "

/*@ ensures false;    "
                +"      model void mm() {}*/
/*@ model void mn() {  assert false;  }*/
/*@ model public static class A {    "  // Invariant is false on exit
                +"     invariant false;    "
                +"     public void m2() {    "  // Invariant is not satisfiable on entrance
                +"     }*/
/*@ model class B {    " // Invariant is false on exit
                +"     public invariant false;    "
                +"     public void mb() {    "  // Invariant is not satisfiable on entrance
                +"     }*/
/*@ model class BB {    "
                +"     ensures false;    "
                +"     public void mbb() {    " // Postcondition is false
                +"     }*/
//@ assert new TestJava() {  public invariant x >= 0; public void mm() { } } != null;     "  // Line 5

//@ assert new TestJava() {  invariant false; int i; } != null;     "  // Line 5

//@ assert new TestJava() {  int i; } == null;     "  // Line 9

//@ assert new TestJava() {  invariant true; int i; } == null;     "  // Line 5

/*@ invariant false; */
//@ assert b;    "

//@ assert b;    "

/*@ invariant true; */
//@ assert b;    "

//@ assert new TestJava() {  } != null;     "  // Line 5

/*@ requires i > 0; */
//@ code_java_math spec_java_math     "

//@ public normal_behavior    "

//@   ensures \\result == k+1;    "

//@ pure    "

//@ ensures \\result == 2 + m(j+1) - 3;     "

//@ ensures \\result == 2 + m(j+1) - 2;     "

//@ requires m(j) == 3;     "

//@ ensures \\result == 3;     "

//@ assert m(j) == \\old(j) + 2;    "

//@ public normal_behavior    "

//@   requires b;    "

//@   ensures \\result == k+1;    "

//@ pure    "

//@ ensures \\result == mm(j);     " // Postcondition error - undefined precondition for mm

//@ requires b;     "

//@ ensures \\result == mm(j);     "

//@ ensures b ==> \\result == mm(j);     "

//@ code_java_math spec_java_math     "

//@ public normal_behavior    "

//@   ensures \\result == k+1;    "

//@ pure    "

//@ ensures \\result == 2 + m(j+1) - 3;     "

//@ ensures \\result == 2 + m(j+1) - 2;     "

//@ requires m(j) == 3;     "

//@ ensures \\result == 3;     "

//@ assert m(j) == \\old(j) + 2;    "

//@ public normal_behavior    "

//@   requires b;    "

//@   ensures \\result == k+1;    "

//@ pure    "

//@ ensures \\result == mm(j);     " // Postcondition error - undefined precondition for mm

//@ requires b;     "

//@ ensures \\result == mm(j);     "

//@ ensures b ==> \\result == mm(j);     "

//@ public normal_behavior    "

//@   ensures mm(\\result) + 1 == mm(k);    "

//@ pure spec_java_math code_java_math     "

//@ public normal_behavior    "

//@   ensures \\result == k+1;    "

//@ pure spec_java_math code_java_math     "

//@ ensures \\result == 2 + m(j+1) - 1;     "

//@ pure spec_java_math code_java_math     "

//@ code_java_math spec_java_math     "

//@ ensures \\result == 2 + m(j+1) - 1;     "

//@ public normal_behavior    "

//@   ensures mm(\\result) + 1 == mm(k);    "

//@ pure    "

//@ public normal_behavior    "

//@   ensures \\result == k+1;    "

//@ pure    "

//@ model public int mm(int k);    "

//@ public normal_behavior    "

//@   ensures mm(\\result) + 1 == mm(k);    "

//@ pure    "

//@ public normal_behavior    "

//@   ensures \\result == k+1;    "

//@ pure    "

//@ model public int mm(int k);    "

//@ ensures \\result == 2 + m(j+1) - 1;     "

//@ assert i != 1;    "

//@ assert false;    "

//@ assert i != 3;    "

/*@ nullable*/
//@ signals_only Exception;     "

/*@ nullable*/
//@ signals_only Exception;     "

/*@ nullable*/
//@ signals_only Exception;     "

/*@ nullable*/
/*@ requires i == j; ensures \\result; */
//@ assume i == 1 && a.i == 2;    "

/*@ requires i == j; ensures \\result; */
//@ assume i == 1 && a.i == 2;    "

/*@ requires i == j; ensures \\result; */
//@ assume i == 1 && a.i == 2;    "

/*@ requires i == j; ensures \\result; */
//@ assume i == 1 && a.i == 2;    "

/*@ requires i == j; ensures \\result; */
//@ assume i == 1 && a.i == 2;    "

/*@ requires i == j; ensures \\result; */
//@ assume i == 1 && a.i == 2;    "

//@ ensures i == k;      "

//@ assert a.i == 1;    "

//@ ensures i == k;      "

//@ assert a != null;    "

//@ ensures i == k;      "

//@ assert a.i == 2;    "

//@ ensures i == k; pure      "

//@ assert a.i == 1;    "

//@ assert b.i == 2;    "

//@ ensures i == k; pure      "

//@ assert a != b;     "

//@ assert a != this;     "

//@ assert a != z;     "

//@ assert a != x;     " // FIXME - I don't believe the axioms support proving this

//@ assert this != z;     " // Not necessarily

//@ assert x != z;     " // Not necessarily

/*@ requires i == j; ensures \\result; */
//@ assume i == 1 && a.i == 2;    "

//@ assert z;     "

/*@ requires i == j; ensures \\result; */
//@ assume i == 1 && a.i == 2;    "

//@ assert !z;     "

//@ requires k > 0; assignable i; ensures i == k;      "

//@ assignable i; ensures i == 3;    "

//@ requires k > 0; assignable i; ensures i == k;      "

//@ assignable i; ensures i == 2;    "

//@ requires k > 0; assignable i; ensures i == k;      "

//@ assignable i; ensures i == 3;    "

//@ requires k > 0; assignable i; ensures i == k;      "

//@ assignable i; ensures i == 1;      "

//@ requires k > 0; assignable i; ensures i == k;      "

//@ ensures i == 2; assignable i;     "

//@ requires k > 0; assignable i; ensures i == k;      "

//@ ensures i == 0;     "

//@ assert k != null;     "

//@ assert k != null;     "

/*@ assignable \\everything; */
//@ assert k != null;     "

//@ ensures i == 0 ==> \\result == 6;     "

//@ ensures i == 1 ==> \\result == 1;     "

//@ ensures i == 2 ==> \\result == 0;     "

//@ ensures i == 0 ==> \\result == 7;     "

//@ ensures i == 1 ==> \\result == 1;     "

//@ ensures i == 2 ==> \\result == 0;     "

//@ ensures i == 0 ==> \\result == 6;     "

//@ ensures i == 1 ==> \\result == 2;     "

//@ ensures i == 2 ==> \\result == 0;     "

//@ ensures i == 0 ==> \\result == 6;     "

//@ ensures i == 1 ==> \\result == 1;     "

//@ ensures i == 2 ==> \\result == 9;     "

//@ ensures i == 0 ==> \\result == 2;     "

//@ ensures i == 1 ==> \\result == 3;     "

//@ ensures i == 2 ==> \\result == 5;     "

//@ ensures i == 0 ==> \\result == 0;     "

//@ ensures i == 1 ==> \\result == 3;     "

//@ ensures i == 2 ==> \\result == 5;     "

//@ ensures i == 0 ==> \\result == 2;     "

//@ ensures i == 1 ==> \\result == 0;     "

//@ ensures i == 2 ==> \\result == 5;     "

//@ ensures i == 0 ==> \\result == 2;     "

//@ ensures i == 1 ==> \\result == 3;     "

//@ ensures i == 2 ==> \\result == 0;     "

//@ ensures i == 0 ==> \\result == 2;     "

//@ ensures i == 1 ==> \\result == 3;     "

//@ ensures i == 2 ==> \\result == 5;     "

//@ ensures i == 0 ==> \\result == 0;     "

//@ ensures i == 1 ==> \\result == 3;     "

//@ ensures i == 2 ==> \\result == 5;     "

//@ ensures i == 0 ==> \\result == 2;     "

//@ ensures i == 1 ==> \\result == 0;     "

//@ ensures i == 2 ==> \\result == 5;     "

//@ ensures i == 0 ==> \\result == 2;     "

//@ ensures i == 1 ==> \\result == 3;     "

//@ ensures i == 2 ==> \\result == 0;     "

//@ ensures i == 0 ==> \\result == 2;     "

//@ ensures i == 1 ==> \\result == 3;     "

//@ ensures i == 2 ==> \\result == 5;     "

//@ ensures i == 0 ==> \\result == 0;     "

//@ ensures i == 1 ==> \\result == 3;     "

//@ ensures i == 2 ==> \\result == 5;     "

//@ ensures i == 0 ==> \\result == 2;     "

//@ ensures i == 1 ==> \\result == 0;     "

//@ ensures i == 2 ==> \\result == 5;     "

//@ ensures i == 0 ==> \\result == 2;     "

//@ ensures i == 1 ==> \\result == 3;     "

//@ ensures i == 2 ==> \\result == 0;     "

//@ ensures i == 'z' ==> \\result == 2;     "

//@ ensures i == 'a' ==> \\result == 3;     "

//@ ensures i == 'b' ==> \\result == 5;     "

//@ ensures i == 'z' ==> \\result == 0;     "

//@ ensures i == 'a' ==> \\result == 3;     "

//@ ensures i == 'b' ==> \\result == 5;     "

//@ ensures i == 'z' ==> \\result == 2;     "

//@ ensures i == 'a' ==> \\result == 0;     "

//@ ensures i == 'b' ==> \\result == 5;     "

//@ ensures i == 'z' ==> \\result == 2;     "

//@ ensures i == 'a' ==> \\result == 3;     "

//@ ensures i == 'b' ==> \\result == 0;     "

//@ ensures i == 0 ==> \\result == 5;     "

//@ ensures i == 1 ==> \\result == 1;     "

//@ ensures i == 2 ==> \\result == 2;     "

//@ ensures i == 3 ==> \\result == 3;     "

//@ ensures i == 4 ==> \\result == 3;     "

//@ ensures i == 0 ==> \\result == 0;     " // ERROR

//@ ensures i == 1 ==> \\result == 1;     "

//@ ensures i == 2 ==> \\result == 2;     "

//@ ensures i == 3 ==> \\result == 3;     "

//@ ensures i == 4 ==> \\result == 3;     "

//@ ensures i == 0 ==> \\result == 5;     "

//@ ensures i == 1 ==> \\result == 0;     " // ERROR

//@ ensures i == 2 ==> \\result == 2;     "

//@ ensures i == 3 ==> \\result == 3;     "

//@ ensures i == 4 ==> \\result == 3;     "

//@ ensures i == 0 ==> \\result == 5;     "

//@ ensures i == 1 ==> \\result == 1;     "

//@ ensures i == 2 ==> \\result == 0;     " // ERROR

//@ ensures i == 3 ==> \\result == 3;     "

//@ ensures i == 4 ==> \\result == 3;     "

//@ ensures i == 0 ==> \\result == 5;     "

//@ ensures i == 1 ==> \\result == 1;     "

//@ ensures i == 2 ==> \\result == 2;     "

//@ ensures i == 3 ==> \\result == 0;     " // ERROR

//@ ensures i == 4 ==> \\result == 3;     "

//@ ensures i == 0 ==> \\result == 5;     "

//@ ensures i == 1 ==> \\result == 1;     "

//@ ensures i == 2 ==> \\result == 2;     "

//@ ensures i == 3 ==> \\result == 3;     "

//@ ensures i == 4 ==> \\result == 0;     " // ERROR

//@ assigns list.objectState;      "

//@ assert i != 1;    "

//@ assert false;    "

//@ assert i != 3;    "

/*@ nullable*/
//@ signals_only Exception;     "

/*@ nullable*/
//@ signals_only Exception;     "

/*@ nullable*/
//@ signals_only Exception;     "

/*@ nullable*/
/*@ requires i == j; ensures \\result; */
//@ assume i == 1 && a.i == 2;    "

/*@ requires i == j; ensures \\result; */
//@ assume i == 1 && a.i == 2;    "

/*@ requires i == j; ensures \\result; */
//@ assume i == 1 && a.i == 2;    "

/*@ requires i == j; ensures \\result; */
//@ assume i == 1 && a.i == 2;    "

/*@ requires i == j; ensures \\result; */
//@ assume i == 1 && a.i == 2;    "

/*@ requires i == j; ensures \\result; */
//@ assume i == 1 && a.i == 2;    "

//@ ensures i == k;      "

//@ assert a.i == 1;    "

//@ ensures i == k;      "

//@ assert a != null;    "

//@ ensures i == k;      "

//@ assert a.i == 2;    "

//@ ensures i == k; pure      "

//@ assert a.i == 1;    "

//@ assert b.i == 2;    "

//@ ensures i == k; pure      "

//@ assert a != b;     "

//@ assert a != this;     "

//@ assert a != z;     "

//@ assert a != x;     " // FIXME - I don't believe the axioms support proving this

//@ assert this != z;     " // Not necessarily

//@ assert x != z;     " // Not necessarily

/*@ requires i == j; ensures \\result; */
//@ assume i == 1 && a.i == 2;    "

//@ assert z;     "

/*@ requires i == j; ensures \\result; */
//@ assume i == 1 && a.i == 2;    "

//@ assert !z;     "

//@ requires k > 0; assignable i; ensures i == k;      "

//@ assignable i; ensures i == 3;    "

//@ requires k > 0; assignable i; ensures i == k;      "

//@ assignable i; ensures i == 2;    "

//@ requires k > 0; assignable i; ensures i == k;      "

//@ assignable i; ensures i == 3;    "

//@ requires k > 0; assignable i; ensures i == k;      "

//@ assignable i; ensures i == 1;      "

//@ requires k > 0; assignable i; ensures i == k;      "

//@ ensures i == 2; assignable i;     "

//@ requires k > 0; assignable i; ensures i == k;      "

//@ ensures i == 0;     "

//@ assert k != null;     "

//@ assert k != null;     "

/*@ assignable \\everything; */
//@ assert k != null;     "

//@ ensures i == 0 ==> \\result == 6;     "

//@ ensures i == 1 ==> \\result == 1;     "

//@ ensures i == 2 ==> \\result == 0;     "

//@ ensures i == 0 ==> \\result == 7;     "

//@ ensures i == 1 ==> \\result == 1;     "

//@ ensures i == 2 ==> \\result == 0;     "

//@ ensures i == 0 ==> \\result == 6;     "

//@ ensures i == 1 ==> \\result == 2;     "

//@ ensures i == 2 ==> \\result == 0;     "

//@ ensures i == 0 ==> \\result == 6;     "

//@ ensures i == 1 ==> \\result == 1;     "

//@ ensures i == 2 ==> \\result == 9;     "

//@ ensures i == 0 ==> \\result == 2;     "

//@ ensures i == 1 ==> \\result == 3;     "

//@ ensures i == 2 ==> \\result == 5;     "

//@ ensures i == 0 ==> \\result == 0;     "

//@ ensures i == 1 ==> \\result == 3;     "

//@ ensures i == 2 ==> \\result == 5;     "

//@ ensures i == 0 ==> \\result == 2;     "

//@ ensures i == 1 ==> \\result == 0;     "

//@ ensures i == 2 ==> \\result == 5;     "

//@ ensures i == 0 ==> \\result == 2;     "

//@ ensures i == 1 ==> \\result == 3;     "

//@ ensures i == 2 ==> \\result == 0;     "

//@ ensures i == 0 ==> \\result == 2;     "

//@ ensures i == 1 ==> \\result == 3;     "

//@ ensures i == 2 ==> \\result == 5;     "

//@ ensures i == 0 ==> \\result == 0;     "

//@ ensures i == 1 ==> \\result == 3;     "

//@ ensures i == 2 ==> \\result == 5;     "

//@ ensures i == 0 ==> \\result == 2;     "

//@ ensures i == 1 ==> \\result == 0;     "

//@ ensures i == 2 ==> \\result == 5;     "

//@ ensures i == 0 ==> \\result == 2;     "

//@ ensures i == 1 ==> \\result == 3;     "

//@ ensures i == 2 ==> \\result == 0;     "

//@ ensures i == 0 ==> \\result == 2;     "

//@ ensures i == 1 ==> \\result == 3;     "

//@ ensures i == 2 ==> \\result == 5;     "

//@ ensures i == 0 ==> \\result == 0;     "

//@ ensures i == 1 ==> \\result == 3;     "

//@ ensures i == 2 ==> \\result == 5;     "

//@ ensures i == 0 ==> \\result == 2;     "

//@ ensures i == 1 ==> \\result == 0;     "

//@ ensures i == 2 ==> \\result == 5;     "

//@ ensures i == 0 ==> \\result == 2;     "

//@ ensures i == 1 ==> \\result == 3;     "

//@ ensures i == 2 ==> \\result == 0;     "

//@ ensures i == 'z' ==> \\result == 2;     "

//@ ensures i == 'a' ==> \\result == 3;     "

//@ ensures i == 'b' ==> \\result == 5;     "

//@ ensures i == 'z' ==> \\result == 0;     "

//@ ensures i == 'a' ==> \\result == 3;     "

//@ ensures i == 'b' ==> \\result == 5;     "

//@ ensures i == 'z' ==> \\result == 2;     "

//@ ensures i == 'a' ==> \\result == 0;     "

//@ ensures i == 'b' ==> \\result == 5;     "

//@ ensures i == 'z' ==> \\result == 2;     "

//@ ensures i == 'a' ==> \\result == 3;     "

//@ ensures i == 'b' ==> \\result == 0;     "

//@ ensures i == 0 ==> \\result == 5;     "

//@ ensures i == 1 ==> \\result == 1;     "

//@ ensures i == 2 ==> \\result == 2;     "

//@ ensures i == 3 ==> \\result == 3;     "

//@ ensures i == 4 ==> \\result == 3;     "

//@ ensures i == 0 ==> \\result == 0;     " // ERROR

//@ ensures i == 1 ==> \\result == 1;     "

//@ ensures i == 2 ==> \\result == 2;     "

//@ ensures i == 3 ==> \\result == 3;     "

//@ ensures i == 4 ==> \\result == 3;     "

//@ ensures i == 0 ==> \\result == 5;     "

//@ ensures i == 1 ==> \\result == 0;     " // ERROR

//@ ensures i == 2 ==> \\result == 2;     "

//@ ensures i == 3 ==> \\result == 3;     "

//@ ensures i == 4 ==> \\result == 3;     "

//@ ensures i == 0 ==> \\result == 5;     "

//@ ensures i == 1 ==> \\result == 1;     "

//@ ensures i == 2 ==> \\result == 0;     " // ERROR

//@ ensures i == 3 ==> \\result == 3;     "

//@ ensures i == 4 ==> \\result == 3;     "

//@ ensures i == 0 ==> \\result == 5;     "

//@ ensures i == 1 ==> \\result == 1;     "

//@ ensures i == 2 ==> \\result == 2;     "

//@ ensures i == 3 ==> \\result == 0;     " // ERROR

//@ ensures i == 4 ==> \\result == 3;     "

//@ ensures i == 0 ==> \\result == 5;     "

//@ ensures i == 1 ==> \\result == 1;     "

//@ ensures i == 2 ==> \\result == 2;     "

//@ ensures i == 3 ==> \\result == 3;     "

//@ ensures i == 4 ==> \\result == 0;     " // ERROR

//@ assigns list.objectState;      "

//@ assert i != 1;    "

//@ assert false;    "

//@ assert i != 3;    "

/*@ nullable*/
//@ signals_only Exception;     "

/*@ nullable*/
//@ signals_only Exception;     "

/*@ nullable*/
//@ signals_only Exception;     "

/*@ nullable*/
/*@ requires i == j; ensures \\result; */
//@ assume i == 1 && a.i == 2;    "

/*@ requires i == j; ensures \\result; */
//@ assume i == 1 && a.i == 2;    "

/*@ requires i == j; ensures \\result; */
//@ assume i == 1 && a.i == 2;    "

/*@ requires i == j; ensures \\result; */
//@ assume i == 1 && a.i == 2;    "

/*@ requires i == j; ensures \\result; */
//@ assume i == 1 && a.i == 2;    "

/*@ requires i == j; ensures \\result; */
//@ assume i == 1 && a.i == 2;    "

//@ ensures i == k;      "

//@ assert a.i == 1;    "

//@ ensures i == k;      "

//@ assert a != null;    "

//@ ensures i == k;      "

//@ assert a.i == 2;    "

//@ ensures i == k; pure      "

//@ assert a.i == 1;    "

//@ assert b.i == 2;    "

//@ ensures i == k; pure      "

//@ assert a != b;     "

//@ assert a != this;     "

//@ assert a != z;     "

//@ assert a != x;     " // FIXME - I don't believe the axioms support proving this

//@ assert this != z;     " // Not necessarily

//@ assert x != z;     " // Not necessarily

/*@ requires i == j; ensures \\result; */
//@ assume i == 1 && a.i == 2;    "

//@ assert z;     "

/*@ requires i == j; ensures \\result; */
//@ assume i == 1 && a.i == 2;    "

//@ assert !z;     "

//@ requires k > 0; assignable i; ensures i == k;      "

//@ assignable i; ensures i == 3;    "

//@ requires k > 0; assignable i; ensures i == k;      "

//@ assignable i; ensures i == 2;    "

//@ requires k > 0; assignable i; ensures i == k;      "

//@ assignable i; ensures i == 3;    "

//@ requires k > 0; assignable i; ensures i == k;      "

//@ assignable i; ensures i == 1;      "

//@ requires k > 0; assignable i; ensures i == k;      "

//@ ensures i == 2; assignable i;     "

//@ requires k > 0; assignable i; ensures i == k;      "

//@ ensures i == 0;     "

//@ assert k != null;     "

//@ assert k != null;     "

/*@ assignable \\everything; */
//@ assert k != null;     "

//@ ensures i == 0 ==> \\result == 6;     "

//@ ensures i == 1 ==> \\result == 1;     "

//@ ensures i == 2 ==> \\result == 0;     "

//@ ensures i == 0 ==> \\result == 7;     "

//@ ensures i == 1 ==> \\result == 1;     "

//@ ensures i == 2 ==> \\result == 0;     "

//@ ensures i == 0 ==> \\result == 6;     "

//@ ensures i == 1 ==> \\result == 2;     "

//@ ensures i == 2 ==> \\result == 0;     "

//@ ensures i == 0 ==> \\result == 6;     "

//@ ensures i == 1 ==> \\result == 1;     "

//@ ensures i == 2 ==> \\result == 9;     "

//@ ensures i == 0 ==> \\result == 2;     "

//@ ensures i == 1 ==> \\result == 3;     "

//@ ensures i == 2 ==> \\result == 5;     "

//@ ensures i == 0 ==> \\result == 0;     "

//@ ensures i == 1 ==> \\result == 3;     "

//@ ensures i == 2 ==> \\result == 5;     "

//@ ensures i == 0 ==> \\result == 2;     "

//@ ensures i == 1 ==> \\result == 0;     "

//@ ensures i == 2 ==> \\result == 5;     "

//@ ensures i == 0 ==> \\result == 2;     "

//@ ensures i == 1 ==> \\result == 3;     "

//@ ensures i == 2 ==> \\result == 0;     "

//@ ensures i == 0 ==> \\result == 2;     "

//@ ensures i == 1 ==> \\result == 3;     "

//@ ensures i == 2 ==> \\result == 5;     "

//@ ensures i == 0 ==> \\result == 0;     "

//@ ensures i == 1 ==> \\result == 3;     "

//@ ensures i == 2 ==> \\result == 5;     "

//@ ensures i == 0 ==> \\result == 2;     "

//@ ensures i == 1 ==> \\result == 0;     "

//@ ensures i == 2 ==> \\result == 5;     "

//@ ensures i == 0 ==> \\result == 2;     "

//@ ensures i == 1 ==> \\result == 3;     "

//@ ensures i == 2 ==> \\result == 0;     "

//@ ensures i == 0 ==> \\result == 2;     "

//@ ensures i == 1 ==> \\result == 3;     "

//@ ensures i == 2 ==> \\result == 5;     "

//@ ensures i == 0 ==> \\result == 0;     "

//@ ensures i == 1 ==> \\result == 3;     "

//@ ensures i == 2 ==> \\result == 5;     "

//@ ensures i == 0 ==> \\result == 2;     "

//@ ensures i == 1 ==> \\result == 0;     "

//@ ensures i == 2 ==> \\result == 5;     "

//@ ensures i == 0 ==> \\result == 2;     "

//@ ensures i == 1 ==> \\result == 3;     "

//@ ensures i == 2 ==> \\result == 0;     "

//@ ensures i == 'z' ==> \\result == 2;     "

//@ ensures i == 'a' ==> \\result == 3;     "

//@ ensures i == 'b' ==> \\result == 5;     "

//@ ensures i == 'z' ==> \\result == 0;     "

//@ ensures i == 'a' ==> \\result == 3;     "

//@ ensures i == 'b' ==> \\result == 5;     "

//@ ensures i == 'z' ==> \\result == 2;     "

//@ ensures i == 'a' ==> \\result == 0;     "

//@ ensures i == 'b' ==> \\result == 5;     "

//@ ensures i == 'z' ==> \\result == 2;     "

//@ ensures i == 'a' ==> \\result == 3;     "

//@ ensures i == 'b' ==> \\result == 0;     "

//@ ensures i == 0 ==> \\result == 5;     "

//@ ensures i == 1 ==> \\result == 1;     "

//@ ensures i == 2 ==> \\result == 2;     "

//@ ensures i == 3 ==> \\result == 3;     "

//@ ensures i == 4 ==> \\result == 3;     "

//@ ensures i == 0 ==> \\result == 0;     " // ERROR

//@ ensures i == 1 ==> \\result == 1;     "

//@ ensures i == 2 ==> \\result == 2;     "

//@ ensures i == 3 ==> \\result == 3;     "

//@ ensures i == 4 ==> \\result == 3;     "

//@ ensures i == 0 ==> \\result == 5;     "

//@ ensures i == 1 ==> \\result == 0;     " // ERROR

//@ ensures i == 2 ==> \\result == 2;     "

//@ ensures i == 3 ==> \\result == 3;     "

//@ ensures i == 4 ==> \\result == 3;     "

//@ ensures i == 0 ==> \\result == 5;     "

//@ ensures i == 1 ==> \\result == 1;     "

//@ ensures i == 2 ==> \\result == 0;     " // ERROR

//@ ensures i == 3 ==> \\result == 3;     "

//@ ensures i == 4 ==> \\result == 3;     "

//@ ensures i == 0 ==> \\result == 5;     "

//@ ensures i == 1 ==> \\result == 1;     "

//@ ensures i == 2 ==> \\result == 2;     "

//@ ensures i == 3 ==> \\result == 0;     " // ERROR

//@ ensures i == 4 ==> \\result == 3;     "

//@ ensures i == 0 ==> \\result == 5;     "

//@ ensures i == 1 ==> \\result == 1;     "

//@ ensures i == 2 ==> \\result == 2;     "

//@ ensures i == 3 ==> \\result == 3;     "

//@ ensures i == 4 ==> \\result == 0;     " // ERROR

//@ assigns list.objectState;      "

//@ assert i != 1;    "

//@ assert false;    "

//@ assert i != 3;    "

/*@ nullable*/
//@ signals_only Exception;     "

/*@ nullable*/
//@ signals_only Exception;     "

/*@ nullable*/
//@ signals_only Exception;     "

/*@ nullable*/
/*@ requires i == j; ensures \\result; */
//@ assume i == 1 && a.i == 2;    "

/*@ requires i == j; ensures \\result; */
//@ assume i == 1 && a.i == 2;    "

/*@ requires i == j; ensures \\result; */
//@ assume i == 1 && a.i == 2;    "

/*@ requires i == j; ensures \\result; */
//@ assume i == 1 && a.i == 2;    "

/*@ requires i == j; ensures \\result; */
//@ assume i == 1 && a.i == 2;    "

/*@ requires i == j; ensures \\result; */
//@ assume i == 1 && a.i == 2;    "

//@ ensures i == k;      "

//@ assert a.i == 1;    "

//@ ensures i == k;      "

//@ assert a != null;    "

//@ ensures i == k;      "

//@ assert a.i == 2;    "

//@ ensures i == k; pure      "

//@ assert a.i == 1;    "

//@ assert b.i == 2;    "

//@ ensures i == k; pure      "

//@ assert a != b;     "

//@ assert a != this;     "

//@ assert a != z;     "

//@ assert a != x;     " // FIXME - I don't believe the axioms support proving this

//@ assert this != z;     " // Not necessarily

//@ assert x != z;     " // Not necessarily

/*@ requires i == j; ensures \\result; */
//@ assume i == 1 && a.i == 2;    "

//@ assert z;     "

/*@ requires i == j; ensures \\result; */
//@ assume i == 1 && a.i == 2;    "

//@ assert !z;     "

//@ requires k > 0; assignable i; ensures i == k;      "

//@ assignable i; ensures i == 3;    "

//@ requires k > 0; assignable i; ensures i == k;      "

//@ assignable i; ensures i == 2;    "

//@ requires k > 0; assignable i; ensures i == k;      "

//@ assignable i; ensures i == 3;    "

//@ requires k > 0; assignable i; ensures i == k;      "

//@ assignable i; ensures i == 1;      "

//@ requires k > 0; assignable i; ensures i == k;      "

//@ ensures i == 2; assignable i;     "

//@ requires k > 0; assignable i; ensures i == k;      "

//@ ensures i == 0;     "

//@ assert k != null;     "

//@ assert k != null;     "

/*@ assignable \\everything; */
//@ assert k != null;     "

//@ ensures i == 0 ==> \\result == 6;     "

//@ ensures i == 1 ==> \\result == 1;     "

//@ ensures i == 2 ==> \\result == 0;     "

//@ ensures i == 0 ==> \\result == 7;     "

//@ ensures i == 1 ==> \\result == 1;     "

//@ ensures i == 2 ==> \\result == 0;     "

//@ ensures i == 0 ==> \\result == 6;     "

//@ ensures i == 1 ==> \\result == 2;     "

//@ ensures i == 2 ==> \\result == 0;     "

//@ ensures i == 0 ==> \\result == 6;     "

//@ ensures i == 1 ==> \\result == 1;     "

//@ ensures i == 2 ==> \\result == 9;     "

//@ ensures i == 0 ==> \\result == 2;     "

//@ ensures i == 1 ==> \\result == 3;     "

//@ ensures i == 2 ==> \\result == 5;     "

//@ ensures i == 0 ==> \\result == 0;     "

//@ ensures i == 1 ==> \\result == 3;     "

//@ ensures i == 2 ==> \\result == 5;     "

//@ ensures i == 0 ==> \\result == 2;     "

//@ ensures i == 1 ==> \\result == 0;     "

//@ ensures i == 2 ==> \\result == 5;     "

//@ ensures i == 0 ==> \\result == 2;     "

//@ ensures i == 1 ==> \\result == 3;     "

//@ ensures i == 2 ==> \\result == 0;     "

//@ ensures i == 0 ==> \\result == 2;     "

//@ ensures i == 1 ==> \\result == 3;     "

//@ ensures i == 2 ==> \\result == 5;     "

//@ ensures i == 0 ==> \\result == 0;     "

//@ ensures i == 1 ==> \\result == 3;     "

//@ ensures i == 2 ==> \\result == 5;     "

//@ ensures i == 0 ==> \\result == 2;     "

//@ ensures i == 1 ==> \\result == 0;     "

//@ ensures i == 2 ==> \\result == 5;     "

//@ ensures i == 0 ==> \\result == 2;     "

//@ ensures i == 1 ==> \\result == 3;     "

//@ ensures i == 2 ==> \\result == 0;     "

//@ ensures i == 0 ==> \\result == 2;     "

//@ ensures i == 1 ==> \\result == 3;     "

//@ ensures i == 2 ==> \\result == 5;     "

//@ ensures i == 0 ==> \\result == 0;     "

//@ ensures i == 1 ==> \\result == 3;     "

//@ ensures i == 2 ==> \\result == 5;     "

//@ ensures i == 0 ==> \\result == 2;     "

//@ ensures i == 1 ==> \\result == 0;     "

//@ ensures i == 2 ==> \\result == 5;     "

//@ ensures i == 0 ==> \\result == 2;     "

//@ ensures i == 1 ==> \\result == 3;     "

//@ ensures i == 2 ==> \\result == 0;     "

//@ ensures i == 'z' ==> \\result == 2;     "

//@ ensures i == 'a' ==> \\result == 3;     "

//@ ensures i == 'b' ==> \\result == 5;     "

//@ ensures i == 'z' ==> \\result == 0;     "

//@ ensures i == 'a' ==> \\result == 3;     "

//@ ensures i == 'b' ==> \\result == 5;     "

//@ ensures i == 'z' ==> \\result == 2;     "

//@ ensures i == 'a' ==> \\result == 0;     "

//@ ensures i == 'b' ==> \\result == 5;     "

//@ ensures i == 'z' ==> \\result == 2;     "

//@ ensures i == 'a' ==> \\result == 3;     "

//@ ensures i == 'b' ==> \\result == 0;     "

//@ ensures i == 0 ==> \\result == 5;     "

//@ ensures i == 1 ==> \\result == 1;     "

//@ ensures i == 2 ==> \\result == 2;     "

//@ ensures i == 3 ==> \\result == 3;     "

//@ ensures i == 4 ==> \\result == 3;     "

//@ ensures i == 0 ==> \\result == 0;     " // ERROR

//@ ensures i == 1 ==> \\result == 1;     "

//@ ensures i == 2 ==> \\result == 2;     "

//@ ensures i == 3 ==> \\result == 3;     "

//@ ensures i == 4 ==> \\result == 3;     "

//@ ensures i == 0 ==> \\result == 5;     "

//@ ensures i == 1 ==> \\result == 0;     " // ERROR

//@ ensures i == 2 ==> \\result == 2;     "

//@ ensures i == 3 ==> \\result == 3;     "

//@ ensures i == 4 ==> \\result == 3;     "

//@ ensures i == 0 ==> \\result == 5;     "

//@ ensures i == 1 ==> \\result == 1;     "

//@ ensures i == 2 ==> \\result == 0;     " // ERROR

//@ ensures i == 3 ==> \\result == 3;     "

//@ ensures i == 4 ==> \\result == 3;     "

//@ ensures i == 0 ==> \\result == 5;     "

//@ ensures i == 1 ==> \\result == 1;     "

//@ ensures i == 2 ==> \\result == 2;     "

//@ ensures i == 3 ==> \\result == 0;     " // ERROR

//@ ensures i == 4 ==> \\result == 3;     "

//@ ensures i == 0 ==> \\result == 5;     "

//@ ensures i == 1 ==> \\result == 1;     "

//@ ensures i == 2 ==> \\result == 2;     "

//@ ensures i == 3 ==> \\result == 3;     "

//@ ensures i == 4 ==> \\result == 0;     " // ERROR

//@ assigns list.objectState;      "

//@ assert i != 1;    "

//@ assert false;    "

//@ assert i != 3;    "

/*@ nullable*/
//@ signals_only Exception;     "

/*@ nullable*/
//@ signals_only Exception;     "

/*@ nullable*/
//@ signals_only Exception;     "

/*@ nullable*/
/*@ requires i == j; ensures \\result; */
//@ assume i == 1 && a.i == 2;    "

/*@ requires i == j; ensures \\result; */
//@ assume i == 1 && a.i == 2;    "

/*@ requires i == j; ensures \\result; */
//@ assume i == 1 && a.i == 2;    "

/*@ requires i == j; ensures \\result; */
//@ assume i == 1 && a.i == 2;    "

/*@ requires i == j; ensures \\result; */
//@ assume i == 1 && a.i == 2;    "

/*@ requires i == j; ensures \\result; */
//@ assume i == 1 && a.i == 2;    "

//@ ensures i == k;      "

//@ assert a.i == 1;    "

//@ ensures i == k;      "

//@ assert a != null;    "

//@ ensures i == k;      "

//@ assert a.i == 2;    "

//@ ensures i == k; pure      "

//@ assert a.i == 1;    "

//@ assert b.i == 2;    "

//@ ensures i == k; pure      "

//@ assert a != b;     "

//@ assert a != this;     "

//@ assert a != z;     "

//@ assert a != x;     " // FIXME - I don't believe the axioms support proving this

//@ assert this != z;     " // Not necessarily

//@ assert x != z;     " // Not necessarily

/*@ requires i == j; ensures \\result; */
//@ assume i == 1 && a.i == 2;    "

//@ assert z;     "

/*@ requires i == j; ensures \\result; */
//@ assume i == 1 && a.i == 2;    "

//@ assert !z;     "

//@ requires k > 0; assignable i; ensures i == k;      "

//@ assignable i; ensures i == 3;    "

//@ requires k > 0; assignable i; ensures i == k;      "

//@ assignable i; ensures i == 2;    "

//@ requires k > 0; assignable i; ensures i == k;      "

//@ assignable i; ensures i == 3;    "

//@ requires k > 0; assignable i; ensures i == k;      "

//@ assignable i; ensures i == 1;      "

//@ requires k > 0; assignable i; ensures i == k;      "

//@ ensures i == 2; assignable i;     "

//@ requires k > 0; assignable i; ensures i == k;      "

//@ ensures i == 0;     "

//@ assert k != null;     "

//@ assert k != null;     "

/*@ assignable \\everything; */
//@ assert k != null;     "

//@ ensures i == 0 ==> \\result == 6;     "

//@ ensures i == 1 ==> \\result == 1;     "

//@ ensures i == 2 ==> \\result == 0;     "

//@ ensures i == 0 ==> \\result == 7;     "

//@ ensures i == 1 ==> \\result == 1;     "

//@ ensures i == 2 ==> \\result == 0;     "

//@ ensures i == 0 ==> \\result == 6;     "

//@ ensures i == 1 ==> \\result == 2;     "

//@ ensures i == 2 ==> \\result == 0;     "

//@ ensures i == 0 ==> \\result == 6;     "

//@ ensures i == 1 ==> \\result == 1;     "

//@ ensures i == 2 ==> \\result == 9;     "

//@ ensures i == 0 ==> \\result == 2;     "

//@ ensures i == 1 ==> \\result == 3;     "

//@ ensures i == 2 ==> \\result == 5;     "

//@ ensures i == 0 ==> \\result == 0;     "

//@ ensures i == 1 ==> \\result == 3;     "

//@ ensures i == 2 ==> \\result == 5;     "

//@ ensures i == 0 ==> \\result == 2;     "

//@ ensures i == 1 ==> \\result == 0;     "

//@ ensures i == 2 ==> \\result == 5;     "

//@ ensures i == 0 ==> \\result == 2;     "

//@ ensures i == 1 ==> \\result == 3;     "

//@ ensures i == 2 ==> \\result == 0;     "

//@ ensures i == 0 ==> \\result == 2;     "

//@ ensures i == 1 ==> \\result == 3;     "

//@ ensures i == 2 ==> \\result == 5;     "

//@ ensures i == 0 ==> \\result == 0;     "

//@ ensures i == 1 ==> \\result == 3;     "

//@ ensures i == 2 ==> \\result == 5;     "

//@ ensures i == 0 ==> \\result == 2;     "

//@ ensures i == 1 ==> \\result == 0;     "

//@ ensures i == 2 ==> \\result == 5;     "

//@ ensures i == 0 ==> \\result == 2;     "

//@ ensures i == 1 ==> \\result == 3;     "

//@ ensures i == 2 ==> \\result == 0;     "

//@ ensures i == 0 ==> \\result == 2;     "

//@ ensures i == 1 ==> \\result == 3;     "

//@ ensures i == 2 ==> \\result == 5;     "

//@ ensures i == 0 ==> \\result == 0;     "

//@ ensures i == 1 ==> \\result == 3;     "

//@ ensures i == 2 ==> \\result == 5;     "

//@ ensures i == 0 ==> \\result == 2;     "

//@ ensures i == 1 ==> \\result == 0;     "

//@ ensures i == 2 ==> \\result == 5;     "

//@ ensures i == 0 ==> \\result == 2;     "

//@ ensures i == 1 ==> \\result == 3;     "

//@ ensures i == 2 ==> \\result == 0;     "

//@ ensures i == 'z' ==> \\result == 2;     "

//@ ensures i == 'a' ==> \\result == 3;     "

//@ ensures i == 'b' ==> \\result == 5;     "

//@ ensures i == 'z' ==> \\result == 0;     "

//@ ensures i == 'a' ==> \\result == 3;     "

//@ ensures i == 'b' ==> \\result == 5;     "

//@ ensures i == 'z' ==> \\result == 2;     "

//@ ensures i == 'a' ==> \\result == 0;     "

//@ ensures i == 'b' ==> \\result == 5;     "

//@ ensures i == 'z' ==> \\result == 2;     "

//@ ensures i == 'a' ==> \\result == 3;     "

//@ ensures i == 'b' ==> \\result == 0;     "

//@ ensures i == 0 ==> \\result == 5;     "

//@ ensures i == 1 ==> \\result == 1;     "

//@ ensures i == 2 ==> \\result == 2;     "

//@ ensures i == 3 ==> \\result == 3;     "

//@ ensures i == 4 ==> \\result == 3;     "

//@ ensures i == 0 ==> \\result == 0;     " // ERROR

//@ ensures i == 1 ==> \\result == 1;     "

//@ ensures i == 2 ==> \\result == 2;     "

//@ ensures i == 3 ==> \\result == 3;     "

//@ ensures i == 4 ==> \\result == 3;     "

//@ ensures i == 0 ==> \\result == 5;     "

//@ ensures i == 1 ==> \\result == 0;     " // ERROR

//@ ensures i == 2 ==> \\result == 2;     "

//@ ensures i == 3 ==> \\result == 3;     "

//@ ensures i == 4 ==> \\result == 3;     "

//@ ensures i == 0 ==> \\result == 5;     "

//@ ensures i == 1 ==> \\result == 1;     "

//@ ensures i == 2 ==> \\result == 0;     " // ERROR

//@ ensures i == 3 ==> \\result == 3;     "

//@ ensures i == 4 ==> \\result == 3;     "

//@ ensures i == 0 ==> \\result == 5;     "

//@ ensures i == 1 ==> \\result == 1;     "

//@ ensures i == 2 ==> \\result == 2;     "

//@ ensures i == 3 ==> \\result == 0;     " // ERROR

//@ ensures i == 4 ==> \\result == 3;     "

//@ ensures i == 0 ==> \\result == 5;     "

//@ ensures i == 1 ==> \\result == 1;     "

//@ ensures i == 2 ==> \\result == 2;     "

//@ ensures i == 3 ==> \\result == 3;     "

//@ ensures i == 4 ==> \\result == 0;     " // ERROR

//@ assigns list.objectState;      "

//@ modifies \\everything;    "


//@ assume \    onnullelements(a);    "

//@ assume a.length > 1;    "

//@ assert a[0] != null;    "  // OK

//@ modifies \\everything;    "

//@ assume \    onnullelements(a);    "

//@ assert a != null;    "  // OK

//@ modifies \\everything;    "

//@ assume \    onnullelements(a);    "

//@ assert a == null;    "  // BAD

//@ modifies \\everything;    "

//@ assume a != null && a.length > 1;    "

//@ assert a[0] != null;    "  // BAD

//@ modifies \\everything;    "

//@ assume a != null && a.length == 0;    "

//@ assert \    onnullelements(a);    " // OK

//@ modifies \\everything;    "

//@ assume a != null && a.length == 0;    "

//@ assert (\\forall int i; 0<=i && i<a.length; a[i] != null);    " // OK

//@ requires \\elemtype(\\typeof(a)) == \\type(Object); modifies \\everything;    "

//@ assume a != null && a.length == 1;    "

//@ assert a[0] != null;    " // OK

//@ assert \    onnullelements(a);    " // OK

//@ modifies \\everything;    "

//@ assume a != null && a.length == 1;    "

//@ assume a[0] != null;    "

//@ assert \    onnullelements(a);    " // OK

//@ requires \\elemtype(\\typeof(a)) == \\type(Object); modifies \\everything;    "

//@ assume a != null && a.length == 2;    "

//@ assert \    onnullelements(a);    " // OK

//@ modifies \\everything;    "

//@ assume a != null && a.length == 2;    "

//@ assume a[0] != null;    "

//@ assume a[1] != null;    "

//@ assert \    onnullelements(a);    " // OK

//@ requires \\elemtype(\\typeof(a)) == \\type(Object); modifies \\everything;    "

//@ assume a != null && a.length == 3;    "

//@ assert \    onnullelements(a);    " // BAD

//@ requires \\elemtype(\\typeof(a)) == \\type(Object); modifies \\everything;    "

//@ assume \    onnullelements(a) && a.length == 3;    "

//@ assert \    onnullelements(a);    " // OK

//@ requires \\elemtype(\\typeof(a)) == \\type(Object); modifies \\everything;    "

//@ assume a != null && a.length == 3;    " // Line 75

//@ assert \    onnullelements(a);    " // BAD

//@ requires \\elemtype(\\typeof(a)) == \\type(Object); modifies \\everything;    "

//@ assume a != null && a.length == 3;    "

//@ assume \    onnullelements(a);    "

//@ assert \    onnullelements(a);    " // BAD

//@ modifies \\everything;    "

//@ assume a != null && a.length == 0;    "

//@ assert \    onnullelements(a);    "

//@ requires i == 5;    "

//@ modifies \\everything;    "

//@ assert \    ot_modified(i);    "  // OK

//@ modifies \\everything;    "

//@ assert \    ot_modified(i);    "  // BAD

//@ ghost public int gi;    "

//@ requires i == 5;    "

//@ modifies \\everything;    "

//@ assert \    ot_modified(i);    "  // OK

//@ modifies \\everything;    "

//@ assert \    ot_modified(i);    "  // BAD

//@ requires si == 5;    "

//@ modifies \\everything;    "

//@ assert \    ot_modified(si);    "  // OK

//@ modifies \\everything;    "

//@ assert \    ot_modified(si);    "  // BAD

//@ requires gi == 5;    "

//@ modifies \\everything;    "

//@ set gi = 5;    "

//@ assert \    ot_modified(gi);    "  // OK

//@ modifies \\everything;    "

//@ set gi = 5;    "

//@ assert \    ot_modified(gi);    "  // BAD


//@ requires t != null;    "

//@ modifies \\everything;    "

//@ assert \    ot_modified(t.i);    "  // OK

//@ requires t != null;    "

//@ modifies \\everything;    "

//@ assert \    ot_modified(t.i) ? true: true;    "  // BAD

//@ requires t == null;    "

//@ modifies \\everything;    "

//@ assert \    ot_modified(t.i) ? true: true;    "  // OK

//@ modifies \\everything;    "

//@ assert \    ot_modified(t.i) ? true: true;    "  // BAD

//@ requires i == 6;    "

//@ modifies \\everything;    "

//@ assert s == i;    "  // OK

//@ assert b == i;    "  // OK

//@ assert c == i;    "  // OK

//@ assert l == i;    "  // OK

//@ assert ii == i;    "  // OK

//@ assert i == (short)i;    "

//@ assert i == (long)i;    "

//@ assert i == (char)i;    "

//@ assert i == (byte)i;    "

//@ assert i == (int)i;    "

//@ requires i == 100000;    "

//@ modifies \\everything;    "

//@ assert s == i;    "

//@ requires i == 100000;    "

//@ modifies \\everything;    "

//@ assert i == (short)i;    " // BAD

//@ requires i == 100000;    "

//@ modifies \\everything;    "

//@ assert i == (byte)i;    "

//@ requires i == 100000;    "

//@ modifies \\everything;    "

//@ assert i == (char)i;    "

//@ requires i == 100000;    "

//@ modifies \\everything;    "

//@ assert b == i;    "

//@ requires i == 100000;    "

//@ modifies \\everything;    "

//@ assert c == i;    "

//@ modifies \\everything;    "


//@ assert 0 == (short)s;

//@ modifies \\everything;    "


//@ assert 0 == (int)s;

//@ modifies \\everything;    "


//@ assert 0L == (long)s;

//@ modifies \\everything;    "


//@ assert 0 == (byte)s;

//@ modifies \\everything;    "


//@ assert 0 == (char)s;

//@ modifies \\everything;    "


//@ assert (boolean)s;

//@ modifies \\everything;    "


//@ assert 0 == (double)s;

//@ modifies \\everything;    "


//@ assert 0.0 == (float)s;

//@ assignable \\everything;    "

//@ assignable \\everything;    "

//@ assignable i;    "

//@ assignable \\everything;    "

//@ assignable \    othing;    "

//@ assignable \\everything;    "

//@ assignable \\everything;    "

//@ requires true;     " // default assignable

//@ assignable \\everything;    "

//@ requires true; pure     " // default assignable

//@ assignable \\everything;    "

//@ pure     " // default assignable

//@ assignable \\everything;    "

//@ public nullable model Object state;    "

//@ in state;    "

//@ assignable \\everything;    "

//@ public nullable model Object state;    "

//@ in state;    "

//@ pure     " // default assignable

//@ assignable \\everything;    "

//@ public nullable model Object state;    "

//@ in state;    "

//@ requires true;    " // default assignable

//@ assignable \\everything;    "

//@ public nullable model Object state;    "

//@ in state;    "

//@ requires true; pure     " // default assignable

//@ assignable \\everything;    "

//@ public nullable model Object state;    "

//@ in state;    "

//@ pure     "

//@ assignable \\everything;    "

//@ public nullable model Object state;    "

//@ in state;    "

//@ pure     "

//@ assignable \\everything;    "

/*@ spec_public */
//@ assignable \\everything;    "

/*@ spec_public */
//@ requires true;     " // default assignable

//@ assignable \\everything;    "

/*@ spec_public */
//@ pure     " // default assignable

//@ assignable \\everything;    "

/*@ spec_public */
//@ requires true; pure     " // default assignable

//@ assignable \\everything;    "

/*@ spec_public */
//@ pure     "

//@ assignable \\everything;    "

/*@ spec_public */
//@ pure     "

//@ assignable \\everything;    "

/*@ nullable_by_default */
//@ ensures \\result == ints.length;    "

//@ pure     "

//@ assert ints != null;     "

/*@ non_null*/
//@ assert i == args.length;     "

//@ assert i == 0;     "

//@ assert i == 1;     "

//@ assert i == 2;     "

//@ ensures \\result == (ints.length > 0 ? ints[0] : (int)ints.length);    "

//@ pure     "

//@ assert ints != null;     "

//@ assert i == 0;     "

//@ assert i == 2;     "

//@ assert i == 5;     "

//@ requires ints.length == 0 || ints[0] != null;    "

//@ ensures \\result == (ints.length > 0 ? ints[0] : (int)ints.length);    "

//@ pure     "

//@ assert ints != null;     "

//@ assert i == 0;     "

//@ assert i == 2;     "

//@ assert i == 5;     "

//@ assert !(b & bb);    "

//@ assert (b | bb);    "

//@ assert (b ^ bb);    "

//@ assert (b & bb);    " // FALSE

//@ requires iii == 10;    "

//@ assert \\old(iii) == 10;    "

//@ assert \\old(iii,a) == 10;    "

//@ assert \\old(iii,b) == 12;    "

//@ assert iii == 14;    "

/*@ ensures \\result == k; pure */
//@ requires k == 10;    "

//@ assert \\old(mm()) == 10;    "

//@ assert \\old(mm(),a) == 10;    "

//@ assert \\old(mm(),b) == 12;    "

//@ assert mm() == 14;    "

//@ old int kk = k; requires k == 5 && i > kk && i < 100 && i > -100; assignable k; ensures k == i+1; ensures kk == 5;    "

//@ also    "

//@ old int kk = k+1; requires k == 5 && i < kk && i < 100 && i > -100; assignable k; ensures k == i-1; ensures kk == 6;    "

//@ assert \\old(k,a) == 10;    "

//@ assert \\old(k,c) == 12;    "

//@ requires i > -10 && i < 10;    "

//@ assert i != i;    " // ERROR

//@ requires i > 0;    "

//@ requires i < 0;    "

//@ assert i != i;    "

//@ requires i > 0;    "

//@ ensures \\result > 0;    "

//@ requires i > -10 && i < 10;    "

//@ assert i < 0;    " // OK

//@ assert i >= 0;    " // OK

//@ requires i > -10 && i < 10;    "

//@ assert i < 0;    "  // false, since not in if

//@ assert i >= 0;    "

//@ requires i > -10 && i < 10;    "

//@ assert i > 0;    "  // false, since not in if

//@ assert i >= 0;    "

//@ old int kk = k;    "

//@ {| requires i < 10 && i > kk; assignable k; ensures k == i+1;     "

//@ also    "

//@    requires i > -10 && i < kk; assignable k; ensures k == i-1;     "

//@ |}    "

//@ ensures \\result == i>=0;     "

//@ pure    "

//@ assert (\\forall int i; 0<=i ; bb(i) : bb(i));    "

//@ assert (\\forall int i; 0<=i ; i>=-1 : i>=0, i<=0);    "

//@ pure    "

//@ assert (\\forall int i; 0<=i ; bb(i) : );    "

//@ assert (\\forall boolean i;  ; i : bb(i));    "

//@ assert 0 == (\\sum int i; 0<=i ; i : i);    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume 1 < a.length;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume 1 < a.length;    "

//@ assume i < a.length;    "

//@ public normal_behavior requires i >= -1;    "

//@ also public exceptional_behavior requires i < -1; signals_only RuntimeException;    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior requires i >= 0;    "

//@ also public exceptional_behavior requires i < 0; signals_only RuntimeException;    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume 1 < a.length;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume 1 < a.length;    "

//@ assume i < a.length;    "

//@ public normal_behavior requires i >= -1;    "

//@ also public exceptional_behavior requires i < -1; signals_only RuntimeException;    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior requires i >= 0;    "

//@ also public exceptional_behavior requires i < 0; signals_only RuntimeException;    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume 1 < a.length;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume 1 < a.length;    "

//@ assume i < a.length;    "

//@ public normal_behavior requires i >= -1;    "

//@ also public exceptional_behavior requires i < -1; signals_only RuntimeException;    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior requires i >= 0;    "

//@ also public exceptional_behavior requires i < 0; signals_only RuntimeException;    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i >= 0;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i >= 0;    "

//@ public normal_behavior requires 0 <= i && i <= a.length;    "

//@ also public exceptional_behavior requires i > a.length+1; signals_only RuntimeException;    "

//@ public normal_behavior requires 0 <= i && i < a.length;    "

//@ also public exceptional_behavior requires i < 0; signals_only RuntimeException;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i >= 0;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i >= 0;    "

//@ public normal_behavior requires 0 <= i && i <= a.length;    "

//@ also public exceptional_behavior requires i > a.length+1; signals_only RuntimeException;    "

//@ public normal_behavior requires 0 <= i && i < a.length;    "

//@ also public exceptional_behavior requires i < 0; signals_only RuntimeException;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i >= 0;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i >= 0;    "

//@ public normal_behavior requires 0 <= i && i <= a.length;    "

//@ also public exceptional_behavior requires i > a.length+1; signals_only RuntimeException;    "

//@ public normal_behavior requires 0 <= i && i < a.length;    "

//@ also public exceptional_behavior requires i < 0; signals_only RuntimeException;    "

//@ public normal_behavior    "

//@ public normal_behavior    "

//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only ArithmeticException;    "

//@ public normal_behavior requires a != 0;    "

//@ also public exceptional_behavior requires a == 0; signals_only ArithmeticException;    "

//@ invariant oo.length > 1;     "

//@ public normal_behavior    "

//@ public normal_behavior    "

//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only ArrayStoreException;    "

//@ public normal_behavior requires \\type(Integer) <: \\elemtype(\\typeof(ooo)) ;    "

//@ also public exceptional_behavior requires !(\\type(Integer) <: \\elemtype(\\typeof(ooo))); signals_only ArrayStoreException;    "

//@ assume ooo.length > 1 ;    "

/*@ public normal_behavior */
//@ public normal_behavior    "


//@ public normal_behavior    "


//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ public normal_behavior    "


//@ public normal_behavior    "


//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ public normal_behavior    "


//@ public normal_behavior    "


//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ public normal_behavior    "


//@ public normal_behavior    "


//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ public normal_behavior    "


//@ public normal_behavior    "


//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ public normal_behavior    "


//@ public normal_behavior    "


//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ public normal_behavior    "


//@ public normal_behavior    "


//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ public normal_behavior    "


//@ public normal_behavior    "


//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ public behavior signals_only A;    "


//@ public behavior signals_only A;    "


//@ public behavior signals_only A;    "

//@ also public exceptional_behavior requires false; signals_only A, NullPointerException;    "


//@ public behavior requires a != null; signals_only A;    "

//@ also public exceptional_behavior requires a == null; signals_only A, NullPointerException;    "


//@ public normal_behavior    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior requires i>0;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior requires i>0;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior requires i>0;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior    "


//@ public normal_behavior    "



//@ assume a == null & en != null;     "

/*@ assert a == null; */
//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ public normal_behavior    "

//@ public normal_behavior    "

//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only NegativeArraySizeException;    "

//@ public normal_behavior requires n >= 0;    "

//@ also public exceptional_behavior requires n < 0; signals_only NegativeArraySizeException;    "

//@ ensures \\result == (\\lbl BYTES Integer.BYTES);    "

//@ modifies \\everything;    "


//@ assume \    onnullelements(a);    "

//@ assume a.length > 1;    "

//@ assert a[0] != null;    "  // OK

//@ modifies \\everything;    "

//@ assume \    onnullelements(a);    "

//@ assert a != null;    "  // OK

//@ modifies \\everything;    "

//@ assume \    onnullelements(a);    "

//@ assert a == null;    "  // BAD

//@ modifies \\everything;    "

//@ assume a != null && a.length > 1;    "

//@ assert a[0] != null;    "  // BAD

//@ modifies \\everything;    "

//@ assume a != null && a.length == 0;    "

//@ assert \    onnullelements(a);    " // OK

//@ modifies \\everything;    "

//@ assume a != null && a.length == 0;    "

//@ assert (\\forall int i; 0<=i && i<a.length; a[i] != null);    " // OK

//@ requires \\elemtype(\\typeof(a)) == \\type(Object); modifies \\everything;    "

//@ assume a != null && a.length == 1;    "

//@ assert a[0] != null;    " // OK

//@ assert \    onnullelements(a);    " // OK

//@ modifies \\everything;    "

//@ assume a != null && a.length == 1;    "

//@ assume a[0] != null;    "

//@ assert \    onnullelements(a);    " // OK

//@ requires \\elemtype(\\typeof(a)) == \\type(Object); modifies \\everything;    "

//@ assume a != null && a.length == 2;    "

//@ assert \    onnullelements(a);    " // OK

//@ modifies \\everything;    "

//@ assume a != null && a.length == 2;    "

//@ assume a[0] != null;    "

//@ assume a[1] != null;    "

//@ assert \    onnullelements(a);    " // OK

//@ requires \\elemtype(\\typeof(a)) == \\type(Object); modifies \\everything;    "

//@ assume a != null && a.length == 3;    "

//@ assert \    onnullelements(a);    " // BAD

//@ requires \\elemtype(\\typeof(a)) == \\type(Object); modifies \\everything;    "

//@ assume \    onnullelements(a) && a.length == 3;    "

//@ assert \    onnullelements(a);    " // OK

//@ requires \\elemtype(\\typeof(a)) == \\type(Object); modifies \\everything;    "

//@ assume a != null && a.length == 3;    " // Line 75

//@ assert \    onnullelements(a);    " // BAD

//@ requires \\elemtype(\\typeof(a)) == \\type(Object); modifies \\everything;    "

//@ assume a != null && a.length == 3;    "

//@ assume \    onnullelements(a);    "

//@ assert \    onnullelements(a);    " // BAD

//@ modifies \\everything;    "

//@ assume a != null && a.length == 0;    "

//@ assert \    onnullelements(a);    "

//@ requires i == 5;    "

//@ modifies \\everything;    "

//@ assert \    ot_modified(i);    "  // OK

//@ modifies \\everything;    "

//@ assert \    ot_modified(i);    "  // BAD

//@ ghost public int gi;    "

//@ requires i == 5;    "

//@ modifies \\everything;    "

//@ assert \    ot_modified(i);    "  // OK

//@ modifies \\everything;    "

//@ assert \    ot_modified(i);    "  // BAD

//@ requires si == 5;    "

//@ modifies \\everything;    "

//@ assert \    ot_modified(si);    "  // OK

//@ modifies \\everything;    "

//@ assert \    ot_modified(si);    "  // BAD

//@ requires gi == 5;    "

//@ modifies \\everything;    "

//@ set gi = 5;    "

//@ assert \    ot_modified(gi);    "  // OK

//@ modifies \\everything;    "

//@ set gi = 5;    "

//@ assert \    ot_modified(gi);    "  // BAD


//@ requires t != null;    "

//@ modifies \\everything;    "

//@ assert \    ot_modified(t.i);    "  // OK

//@ requires t != null;    "

//@ modifies \\everything;    "

//@ assert \    ot_modified(t.i) ? true: true;    "  // BAD

//@ requires t == null;    "

//@ modifies \\everything;    "

//@ assert \    ot_modified(t.i) ? true: true;    "  // OK

//@ modifies \\everything;    "

//@ assert \    ot_modified(t.i) ? true: true;    "  // BAD

//@ requires i == 6;    "

//@ modifies \\everything;    "

//@ assert s == i;    "  // OK

//@ assert b == i;    "  // OK

//@ assert c == i;    "  // OK

//@ assert l == i;    "  // OK

//@ assert ii == i;    "  // OK

//@ assert i == (short)i;    "

//@ assert i == (long)i;    "

//@ assert i == (char)i;    "

//@ assert i == (byte)i;    "

//@ assert i == (int)i;    "

//@ requires i == 100000;    "

//@ modifies \\everything;    "

//@ assert s == i;    "

//@ requires i == 100000;    "

//@ modifies \\everything;    "

//@ assert i == (short)i;    " // BAD

//@ requires i == 100000;    "

//@ modifies \\everything;    "

//@ assert i == (byte)i;    "

//@ requires i == 100000;    "

//@ modifies \\everything;    "

//@ assert i == (char)i;    "

//@ requires i == 100000;    "

//@ modifies \\everything;    "

//@ assert b == i;    "

//@ requires i == 100000;    "

//@ modifies \\everything;    "

//@ assert c == i;    "

//@ modifies \\everything;    "


//@ assert 0 == (short)s;

//@ modifies \\everything;    "


//@ assert 0 == (int)s;

//@ modifies \\everything;    "


//@ assert 0L == (long)s;

//@ modifies \\everything;    "


//@ assert 0 == (byte)s;

//@ modifies \\everything;    "


//@ assert 0 == (char)s;

//@ modifies \\everything;    "


//@ assert (boolean)s;

//@ modifies \\everything;    "


//@ assert 0 == (double)s;

//@ modifies \\everything;    "


//@ assert 0.0 == (float)s;

//@ assignable \\everything;    "

//@ assignable \\everything;    "

//@ assignable i;    "

//@ assignable \\everything;    "

//@ assignable \    othing;    "

//@ assignable \\everything;    "

//@ assignable \\everything;    "

//@ requires true;     " // default assignable

//@ assignable \\everything;    "

//@ requires true; pure     " // default assignable

//@ assignable \\everything;    "

//@ pure     " // default assignable

//@ assignable \\everything;    "

//@ public nullable model Object state;    "

//@ in state;    "

//@ assignable \\everything;    "

//@ public nullable model Object state;    "

//@ in state;    "

//@ pure     " // default assignable

//@ assignable \\everything;    "

//@ public nullable model Object state;    "

//@ in state;    "

//@ requires true;    " // default assignable

//@ assignable \\everything;    "

//@ public nullable model Object state;    "

//@ in state;    "

//@ requires true; pure     " // default assignable

//@ assignable \\everything;    "

//@ public nullable model Object state;    "

//@ in state;    "

//@ pure     "

//@ assignable \\everything;    "

//@ public nullable model Object state;    "

//@ in state;    "

//@ pure     "

//@ assignable \\everything;    "

/*@ spec_public */
//@ assignable \\everything;    "

/*@ spec_public */
//@ requires true;     " // default assignable

//@ assignable \\everything;    "

/*@ spec_public */
//@ pure     " // default assignable

//@ assignable \\everything;    "

/*@ spec_public */
//@ requires true; pure     " // default assignable

//@ assignable \\everything;    "

/*@ spec_public */
//@ pure     "

//@ assignable \\everything;    "

/*@ spec_public */
//@ pure     "

//@ assignable \\everything;    "

/*@ nullable_by_default */
//@ ensures \\result == ints.length;    "

//@ pure     "

//@ assert ints != null;     "

/*@ non_null*/
//@ assert i == args.length;     "

//@ assert i == 0;     "

//@ assert i == 1;     "

//@ assert i == 2;     "

//@ ensures \\result == (ints.length > 0 ? ints[0] : (int)ints.length);    "

//@ pure     "

//@ assert ints != null;     "

//@ assert i == 0;     "

//@ assert i == 2;     "

//@ assert i == 5;     "

//@ requires ints.length == 0 || ints[0] != null;    "

//@ ensures \\result == (ints.length > 0 ? ints[0] : (int)ints.length);    "

//@ pure     "

//@ assert ints != null;     "

//@ assert i == 0;     "

//@ assert i == 2;     "

//@ assert i == 5;     "

//@ assert !(b & bb);    "

//@ assert (b | bb);    "

//@ assert (b ^ bb);    "

//@ assert (b & bb);    " // FALSE

//@ requires iii == 10;    "

//@ assert \\old(iii) == 10;    "

//@ assert \\old(iii,a) == 10;    "

//@ assert \\old(iii,b) == 12;    "

//@ assert iii == 14;    "

/*@ ensures \\result == k; pure */
//@ requires k == 10;    "

//@ assert \\old(mm()) == 10;    "

//@ assert \\old(mm(),a) == 10;    "

//@ assert \\old(mm(),b) == 12;    "

//@ assert mm() == 14;    "

//@ old int kk = k; requires k == 5 && i > kk && i < 100 && i > -100; assignable k; ensures k == i+1; ensures kk == 5;    "

//@ also    "

//@ old int kk = k+1; requires k == 5 && i < kk && i < 100 && i > -100; assignable k; ensures k == i-1; ensures kk == 6;    "

//@ assert \\old(k,a) == 10;    "

//@ assert \\old(k,c) == 12;    "

//@ requires i > -10 && i < 10;    "

//@ assert i != i;    " // ERROR

//@ requires i > 0;    "

//@ requires i < 0;    "

//@ assert i != i;    "

//@ requires i > 0;    "

//@ ensures \\result > 0;    "

//@ requires i > -10 && i < 10;    "

//@ assert i < 0;    " // OK

//@ assert i >= 0;    " // OK

//@ requires i > -10 && i < 10;    "

//@ assert i < 0;    "  // false, since not in if

//@ assert i >= 0;    "

//@ requires i > -10 && i < 10;    "

//@ assert i > 0;    "  // false, since not in if

//@ assert i >= 0;    "

//@ old int kk = k;    "

//@ {| requires i < 10 && i > kk; assignable k; ensures k == i+1;     "

//@ also    "

//@    requires i > -10 && i < kk; assignable k; ensures k == i-1;     "

//@ |}    "

//@ ensures \\result == i>=0;     "

//@ pure    "

//@ assert (\\forall int i; 0<=i ; bb(i) : bb(i));    "

//@ assert (\\forall int i; 0<=i ; i>=-1 : i>=0, i<=0);    "

//@ pure    "

//@ assert (\\forall int i; 0<=i ; bb(i) : );    "

//@ assert (\\forall boolean i;  ; i : bb(i));    "

//@ assert 0 == (\\sum int i; 0<=i ; i : i);    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume 1 < a.length;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume 1 < a.length;    "

//@ assume i < a.length;    "

//@ public normal_behavior requires i >= -1;    "

//@ also public exceptional_behavior requires i < -1; signals_only RuntimeException;    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior requires i >= 0;    "

//@ also public exceptional_behavior requires i < 0; signals_only RuntimeException;    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume 1 < a.length;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume 1 < a.length;    "

//@ assume i < a.length;    "

//@ public normal_behavior requires i >= -1;    "

//@ also public exceptional_behavior requires i < -1; signals_only RuntimeException;    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior requires i >= 0;    "

//@ also public exceptional_behavior requires i < 0; signals_only RuntimeException;    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume 1 < a.length;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume 1 < a.length;    "

//@ assume i < a.length;    "

//@ public normal_behavior requires i >= -1;    "

//@ also public exceptional_behavior requires i < -1; signals_only RuntimeException;    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior requires i >= 0;    "

//@ also public exceptional_behavior requires i < 0; signals_only RuntimeException;    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i >= 0;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i >= 0;    "

//@ public normal_behavior requires 0 <= i && i <= a.length;    "

//@ also public exceptional_behavior requires i > a.length+1; signals_only RuntimeException;    "

//@ public normal_behavior requires 0 <= i && i < a.length;    "

//@ also public exceptional_behavior requires i < 0; signals_only RuntimeException;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i >= 0;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i >= 0;    "

//@ public normal_behavior requires 0 <= i && i <= a.length;    "

//@ also public exceptional_behavior requires i > a.length+1; signals_only RuntimeException;    "

//@ public normal_behavior requires 0 <= i && i < a.length;    "

//@ also public exceptional_behavior requires i < 0; signals_only RuntimeException;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i >= 0;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i >= 0;    "

//@ public normal_behavior requires 0 <= i && i <= a.length;    "

//@ also public exceptional_behavior requires i > a.length+1; signals_only RuntimeException;    "

//@ public normal_behavior requires 0 <= i && i < a.length;    "

//@ also public exceptional_behavior requires i < 0; signals_only RuntimeException;    "

//@ public normal_behavior    "

//@ public normal_behavior    "

//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only ArithmeticException;    "

//@ public normal_behavior requires a != 0;    "

//@ also public exceptional_behavior requires a == 0; signals_only ArithmeticException;    "

//@ invariant oo.length > 1;     "

//@ public normal_behavior    "

//@ public normal_behavior    "

//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only ArrayStoreException;    "

//@ public normal_behavior requires \\type(Integer) <: \\elemtype(\\typeof(ooo)) ;    "

//@ also public exceptional_behavior requires !(\\type(Integer) <: \\elemtype(\\typeof(ooo))); signals_only ArrayStoreException;    "

//@ assume ooo.length > 1 ;    "

/*@ public normal_behavior */
//@ public normal_behavior    "


//@ public normal_behavior    "


//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ public normal_behavior    "


//@ public normal_behavior    "


//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ public normal_behavior    "


//@ public normal_behavior    "


//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ public normal_behavior    "


//@ public normal_behavior    "


//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ public normal_behavior    "


//@ public normal_behavior    "


//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ public normal_behavior    "


//@ public normal_behavior    "


//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ public normal_behavior    "


//@ public normal_behavior    "


//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ public normal_behavior    "


//@ public normal_behavior    "


//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ public behavior signals_only A;    "


//@ public behavior signals_only A;    "


//@ public behavior signals_only A;    "

//@ also public exceptional_behavior requires false; signals_only A, NullPointerException;    "


//@ public behavior requires a != null; signals_only A;    "

//@ also public exceptional_behavior requires a == null; signals_only A, NullPointerException;    "


//@ public normal_behavior    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior requires i>0;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior requires i>0;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior requires i>0;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior    "


//@ public normal_behavior    "



//@ assume a == null & en != null;     "

/*@ assert a == null; */
//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ public normal_behavior    "

//@ public normal_behavior    "

//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only NegativeArraySizeException;    "

//@ public normal_behavior requires n >= 0;    "

//@ also public exceptional_behavior requires n < 0; signals_only NegativeArraySizeException;    "

//@ ensures \\result == (\\lbl BYTES Integer.BYTES);    "

//@ modifies \\everything;    "


//@ assume \    onnullelements(a);    "

//@ assume a.length > 1;    "

//@ assert a[0] != null;    "  // OK

//@ modifies \\everything;    "

//@ assume \    onnullelements(a);    "

//@ assert a != null;    "  // OK

//@ modifies \\everything;    "

//@ assume \    onnullelements(a);    "

//@ assert a == null;    "  // BAD

//@ modifies \\everything;    "

//@ assume a != null && a.length > 1;    "

//@ assert a[0] != null;    "  // BAD

//@ modifies \\everything;    "

//@ assume a != null && a.length == 0;    "

//@ assert \    onnullelements(a);    " // OK

//@ modifies \\everything;    "

//@ assume a != null && a.length == 0;    "

//@ assert (\\forall int i; 0<=i && i<a.length; a[i] != null);    " // OK

//@ requires \\elemtype(\\typeof(a)) == \\type(Object); modifies \\everything;    "

//@ assume a != null && a.length == 1;    "

//@ assert a[0] != null;    " // OK

//@ assert \    onnullelements(a);    " // OK

//@ modifies \\everything;    "

//@ assume a != null && a.length == 1;    "

//@ assume a[0] != null;    "

//@ assert \    onnullelements(a);    " // OK

//@ requires \\elemtype(\\typeof(a)) == \\type(Object); modifies \\everything;    "

//@ assume a != null && a.length == 2;    "

//@ assert \    onnullelements(a);    " // OK

//@ modifies \\everything;    "

//@ assume a != null && a.length == 2;    "

//@ assume a[0] != null;    "

//@ assume a[1] != null;    "

//@ assert \    onnullelements(a);    " // OK

//@ requires \\elemtype(\\typeof(a)) == \\type(Object); modifies \\everything;    "

//@ assume a != null && a.length == 3;    "

//@ assert \    onnullelements(a);    " // BAD

//@ requires \\elemtype(\\typeof(a)) == \\type(Object); modifies \\everything;    "

//@ assume \    onnullelements(a) && a.length == 3;    "

//@ assert \    onnullelements(a);    " // OK

//@ requires \\elemtype(\\typeof(a)) == \\type(Object); modifies \\everything;    "

//@ assume a != null && a.length == 3;    " // Line 75

//@ assert \    onnullelements(a);    " // BAD

//@ requires \\elemtype(\\typeof(a)) == \\type(Object); modifies \\everything;    "

//@ assume a != null && a.length == 3;    "

//@ assume \    onnullelements(a);    "

//@ assert \    onnullelements(a);    " // BAD

//@ modifies \\everything;    "

//@ assume a != null && a.length == 0;    "

//@ assert \    onnullelements(a);    "

//@ requires i == 5;    "

//@ modifies \\everything;    "

//@ assert \    ot_modified(i);    "  // OK

//@ modifies \\everything;    "

//@ assert \    ot_modified(i);    "  // BAD

//@ ghost public int gi;    "

//@ requires i == 5;    "

//@ modifies \\everything;    "

//@ assert \    ot_modified(i);    "  // OK

//@ modifies \\everything;    "

//@ assert \    ot_modified(i);    "  // BAD

//@ requires si == 5;    "

//@ modifies \\everything;    "

//@ assert \    ot_modified(si);    "  // OK

//@ modifies \\everything;    "

//@ assert \    ot_modified(si);    "  // BAD

//@ requires gi == 5;    "

//@ modifies \\everything;    "

//@ set gi = 5;    "

//@ assert \    ot_modified(gi);    "  // OK

//@ modifies \\everything;    "

//@ set gi = 5;    "

//@ assert \    ot_modified(gi);    "  // BAD


//@ requires t != null;    "

//@ modifies \\everything;    "

//@ assert \    ot_modified(t.i);    "  // OK

//@ requires t != null;    "

//@ modifies \\everything;    "

//@ assert \    ot_modified(t.i) ? true: true;    "  // BAD

//@ requires t == null;    "

//@ modifies \\everything;    "

//@ assert \    ot_modified(t.i) ? true: true;    "  // OK

//@ modifies \\everything;    "

//@ assert \    ot_modified(t.i) ? true: true;    "  // BAD

//@ requires i == 6;    "

//@ modifies \\everything;    "

//@ assert s == i;    "  // OK

//@ assert b == i;    "  // OK

//@ assert c == i;    "  // OK

//@ assert l == i;    "  // OK

//@ assert ii == i;    "  // OK

//@ assert i == (short)i;    "

//@ assert i == (long)i;    "

//@ assert i == (char)i;    "

//@ assert i == (byte)i;    "

//@ assert i == (int)i;    "

//@ requires i == 100000;    "

//@ modifies \\everything;    "

//@ assert s == i;    "

//@ requires i == 100000;    "

//@ modifies \\everything;    "

//@ assert i == (short)i;    " // BAD

//@ requires i == 100000;    "

//@ modifies \\everything;    "

//@ assert i == (byte)i;    "

//@ requires i == 100000;    "

//@ modifies \\everything;    "

//@ assert i == (char)i;    "

//@ requires i == 100000;    "

//@ modifies \\everything;    "

//@ assert b == i;    "

//@ requires i == 100000;    "

//@ modifies \\everything;    "

//@ assert c == i;    "

//@ modifies \\everything;    "


//@ assert 0 == (short)s;

//@ modifies \\everything;    "


//@ assert 0 == (int)s;

//@ modifies \\everything;    "


//@ assert 0L == (long)s;

//@ modifies \\everything;    "


//@ assert 0 == (byte)s;

//@ modifies \\everything;    "


//@ assert 0 == (char)s;

//@ modifies \\everything;    "


//@ assert (boolean)s;

//@ modifies \\everything;    "


//@ assert 0 == (double)s;

//@ modifies \\everything;    "


//@ assert 0.0 == (float)s;

//@ assignable \\everything;    "

//@ assignable \\everything;    "

//@ assignable i;    "

//@ assignable \\everything;    "

//@ assignable \    othing;    "

//@ assignable \\everything;    "

//@ assignable \\everything;    "

//@ requires true;     " // default assignable

//@ assignable \\everything;    "

//@ requires true; pure     " // default assignable

//@ assignable \\everything;    "

//@ pure     " // default assignable

//@ assignable \\everything;    "

//@ public nullable model Object state;    "

//@ in state;    "

//@ assignable \\everything;    "

//@ public nullable model Object state;    "

//@ in state;    "

//@ pure     " // default assignable

//@ assignable \\everything;    "

//@ public nullable model Object state;    "

//@ in state;    "

//@ requires true;    " // default assignable

//@ assignable \\everything;    "

//@ public nullable model Object state;    "

//@ in state;    "

//@ requires true; pure     " // default assignable

//@ assignable \\everything;    "

//@ public nullable model Object state;    "

//@ in state;    "

//@ pure     "

//@ assignable \\everything;    "

//@ public nullable model Object state;    "

//@ in state;    "

//@ pure     "

//@ assignable \\everything;    "

/*@ spec_public */
//@ assignable \\everything;    "

/*@ spec_public */
//@ requires true;     " // default assignable

//@ assignable \\everything;    "

/*@ spec_public */
//@ pure     " // default assignable

//@ assignable \\everything;    "

/*@ spec_public */
//@ requires true; pure     " // default assignable

//@ assignable \\everything;    "

/*@ spec_public */
//@ pure     "

//@ assignable \\everything;    "

/*@ spec_public */
//@ pure     "

//@ assignable \\everything;    "

/*@ nullable_by_default */
//@ ensures \\result == ints.length;    "

//@ pure     "

//@ assert ints != null;     "

/*@ non_null*/
//@ assert i == args.length;     "

//@ assert i == 0;     "

//@ assert i == 1;     "

//@ assert i == 2;     "

//@ ensures \\result == (ints.length > 0 ? ints[0] : (int)ints.length);    "

//@ pure     "

//@ assert ints != null;     "

//@ assert i == 0;     "

//@ assert i == 2;     "

//@ assert i == 5;     "

//@ requires ints.length == 0 || ints[0] != null;    "

//@ ensures \\result == (ints.length > 0 ? ints[0] : (int)ints.length);    "

//@ pure     "

//@ assert ints != null;     "

//@ assert i == 0;     "

//@ assert i == 2;     "

//@ assert i == 5;     "

//@ assert !(b & bb);    "

//@ assert (b | bb);    "

//@ assert (b ^ bb);    "

//@ assert (b & bb);    " // FALSE

//@ requires iii == 10;    "

//@ assert \\old(iii) == 10;    "

//@ assert \\old(iii,a) == 10;    "

//@ assert \\old(iii,b) == 12;    "

//@ assert iii == 14;    "

/*@ ensures \\result == k; pure */
//@ requires k == 10;    "

//@ assert \\old(mm()) == 10;    "

//@ assert \\old(mm(),a) == 10;    "

//@ assert \\old(mm(),b) == 12;    "

//@ assert mm() == 14;    "

//@ old int kk = k; requires k == 5 && i > kk && i < 100 && i > -100; assignable k; ensures k == i+1; ensures kk == 5;    "

//@ also    "

//@ old int kk = k+1; requires k == 5 && i < kk && i < 100 && i > -100; assignable k; ensures k == i-1; ensures kk == 6;    "

//@ assert \\old(k,a) == 10;    "

//@ assert \\old(k,c) == 12;    "

//@ requires i > -10 && i < 10;    "

//@ assert i != i;    " // ERROR

//@ requires i > 0;    "

//@ requires i < 0;    "

//@ assert i != i;    "

//@ requires i > 0;    "

//@ ensures \\result > 0;    "

//@ requires i > -10 && i < 10;    "

//@ assert i < 0;    " // OK

//@ assert i >= 0;    " // OK

//@ requires i > -10 && i < 10;    "

//@ assert i < 0;    "  // false, since not in if

//@ assert i >= 0;    "

//@ requires i > -10 && i < 10;    "

//@ assert i > 0;    "  // false, since not in if

//@ assert i >= 0;    "

//@ old int kk = k;    "

//@ {| requires i < 10 && i > kk; assignable k; ensures k == i+1;     "

//@ also    "

//@    requires i > -10 && i < kk; assignable k; ensures k == i-1;     "

//@ |}    "

//@ ensures \\result == i>=0;     "

//@ pure    "

//@ assert (\\forall int i; 0<=i ; bb(i) : bb(i));    "

//@ assert (\\forall int i; 0<=i ; i>=-1 : i>=0, i<=0);    "

//@ pure    "

//@ assert (\\forall int i; 0<=i ; bb(i) : );    "

//@ assert (\\forall boolean i;  ; i : bb(i));    "

//@ assert 0 == (\\sum int i; 0<=i ; i : i);    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume 1 < a.length;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume 1 < a.length;    "

//@ assume i < a.length;    "

//@ public normal_behavior requires i >= -1;    "

//@ also public exceptional_behavior requires i < -1; signals_only RuntimeException;    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior requires i >= 0;    "

//@ also public exceptional_behavior requires i < 0; signals_only RuntimeException;    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume 1 < a.length;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume 1 < a.length;    "

//@ assume i < a.length;    "

//@ public normal_behavior requires i >= -1;    "

//@ also public exceptional_behavior requires i < -1; signals_only RuntimeException;    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior requires i >= 0;    "

//@ also public exceptional_behavior requires i < 0; signals_only RuntimeException;    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume 1 < a.length;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume 1 < a.length;    "

//@ assume i < a.length;    "

//@ public normal_behavior requires i >= -1;    "

//@ also public exceptional_behavior requires i < -1; signals_only RuntimeException;    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior requires i >= 0;    "

//@ also public exceptional_behavior requires i < 0; signals_only RuntimeException;    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i >= 0;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i >= 0;    "

//@ public normal_behavior requires 0 <= i && i <= a.length;    "

//@ also public exceptional_behavior requires i > a.length+1; signals_only RuntimeException;    "

//@ public normal_behavior requires 0 <= i && i < a.length;    "

//@ also public exceptional_behavior requires i < 0; signals_only RuntimeException;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i >= 0;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i >= 0;    "

//@ public normal_behavior requires 0 <= i && i <= a.length;    "

//@ also public exceptional_behavior requires i > a.length+1; signals_only RuntimeException;    "

//@ public normal_behavior requires 0 <= i && i < a.length;    "

//@ also public exceptional_behavior requires i < 0; signals_only RuntimeException;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i >= 0;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i >= 0;    "

//@ public normal_behavior requires 0 <= i && i <= a.length;    "

//@ also public exceptional_behavior requires i > a.length+1; signals_only RuntimeException;    "

//@ public normal_behavior requires 0 <= i && i < a.length;    "

//@ also public exceptional_behavior requires i < 0; signals_only RuntimeException;    "

//@ public normal_behavior    "

//@ public normal_behavior    "

//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only ArithmeticException;    "

//@ public normal_behavior requires a != 0;    "

//@ also public exceptional_behavior requires a == 0; signals_only ArithmeticException;    "

//@ invariant oo.length > 1;     "

//@ public normal_behavior    "

//@ public normal_behavior    "

//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only ArrayStoreException;    "

//@ public normal_behavior requires \\type(Integer) <: \\elemtype(\\typeof(ooo)) ;    "

//@ also public exceptional_behavior requires !(\\type(Integer) <: \\elemtype(\\typeof(ooo))); signals_only ArrayStoreException;    "

//@ assume ooo.length > 1 ;    "

/*@ public normal_behavior */
//@ public normal_behavior    "


//@ public normal_behavior    "


//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ public normal_behavior    "


//@ public normal_behavior    "


//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ public normal_behavior    "


//@ public normal_behavior    "


//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ public normal_behavior    "


//@ public normal_behavior    "


//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ public normal_behavior    "


//@ public normal_behavior    "


//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ public normal_behavior    "


//@ public normal_behavior    "


//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ public normal_behavior    "


//@ public normal_behavior    "


//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ public normal_behavior    "


//@ public normal_behavior    "


//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ public behavior signals_only A;    "


//@ public behavior signals_only A;    "


//@ public behavior signals_only A;    "

//@ also public exceptional_behavior requires false; signals_only A, NullPointerException;    "


//@ public behavior requires a != null; signals_only A;    "

//@ also public exceptional_behavior requires a == null; signals_only A, NullPointerException;    "


//@ public normal_behavior    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior requires i>0;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior requires i>0;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior requires i>0;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior    "


//@ public normal_behavior    "



//@ assume a == null & en != null;     "

/*@ assert a == null; */
//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ public normal_behavior    "

//@ public normal_behavior    "

//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only NegativeArraySizeException;    "

//@ public normal_behavior requires n >= 0;    "

//@ also public exceptional_behavior requires n < 0; signals_only NegativeArraySizeException;    "

//@ ensures \\result == (\\lbl BYTES Integer.BYTES);    "

//@ modifies \\everything;    "


//@ assume \    onnullelements(a);    "

//@ assume a.length > 1;    "

//@ assert a[0] != null;    "  // OK

//@ modifies \\everything;    "

//@ assume \    onnullelements(a);    "

//@ assert a != null;    "  // OK

//@ modifies \\everything;    "

//@ assume \    onnullelements(a);    "

//@ assert a == null;    "  // BAD

//@ modifies \\everything;    "

//@ assume a != null && a.length > 1;    "

//@ assert a[0] != null;    "  // BAD

//@ modifies \\everything;    "

//@ assume a != null && a.length == 0;    "

//@ assert \    onnullelements(a);    " // OK

//@ modifies \\everything;    "

//@ assume a != null && a.length == 0;    "

//@ assert (\\forall int i; 0<=i && i<a.length; a[i] != null);    " // OK

//@ requires \\elemtype(\\typeof(a)) == \\type(Object); modifies \\everything;    "

//@ assume a != null && a.length == 1;    "

//@ assert a[0] != null;    " // OK

//@ assert \    onnullelements(a);    " // OK

//@ modifies \\everything;    "

//@ assume a != null && a.length == 1;    "

//@ assume a[0] != null;    "

//@ assert \    onnullelements(a);    " // OK

//@ requires \\elemtype(\\typeof(a)) == \\type(Object); modifies \\everything;    "

//@ assume a != null && a.length == 2;    "

//@ assert \    onnullelements(a);    " // OK

//@ modifies \\everything;    "

//@ assume a != null && a.length == 2;    "

//@ assume a[0] != null;    "

//@ assume a[1] != null;    "

//@ assert \    onnullelements(a);    " // OK

//@ requires \\elemtype(\\typeof(a)) == \\type(Object); modifies \\everything;    "

//@ assume a != null && a.length == 3;    "

//@ assert \    onnullelements(a);    " // BAD

//@ requires \\elemtype(\\typeof(a)) == \\type(Object); modifies \\everything;    "

//@ assume \    onnullelements(a) && a.length == 3;    "

//@ assert \    onnullelements(a);    " // OK

//@ requires \\elemtype(\\typeof(a)) == \\type(Object); modifies \\everything;    "

//@ assume a != null && a.length == 3;    " // Line 75

//@ assert \    onnullelements(a);    " // BAD

//@ requires \\elemtype(\\typeof(a)) == \\type(Object); modifies \\everything;    "

//@ assume a != null && a.length == 3;    "

//@ assume \    onnullelements(a);    "

//@ assert \    onnullelements(a);    " // BAD

//@ modifies \\everything;    "

//@ assume a != null && a.length == 0;    "

//@ assert \    onnullelements(a);    "

//@ requires i == 5;    "

//@ modifies \\everything;    "

//@ assert \    ot_modified(i);    "  // OK

//@ modifies \\everything;    "

//@ assert \    ot_modified(i);    "  // BAD

//@ ghost public int gi;    "

//@ requires i == 5;    "

//@ modifies \\everything;    "

//@ assert \    ot_modified(i);    "  // OK

//@ modifies \\everything;    "

//@ assert \    ot_modified(i);    "  // BAD

//@ requires si == 5;    "

//@ modifies \\everything;    "

//@ assert \    ot_modified(si);    "  // OK

//@ modifies \\everything;    "

//@ assert \    ot_modified(si);    "  // BAD

//@ requires gi == 5;    "

//@ modifies \\everything;    "

//@ set gi = 5;    "

//@ assert \    ot_modified(gi);    "  // OK

//@ modifies \\everything;    "

//@ set gi = 5;    "

//@ assert \    ot_modified(gi);    "  // BAD


//@ requires t != null;    "

//@ modifies \\everything;    "

//@ assert \    ot_modified(t.i);    "  // OK

//@ requires t != null;    "

//@ modifies \\everything;    "

//@ assert \    ot_modified(t.i) ? true: true;    "  // BAD

//@ requires t == null;    "

//@ modifies \\everything;    "

//@ assert \    ot_modified(t.i) ? true: true;    "  // OK

//@ modifies \\everything;    "

//@ assert \    ot_modified(t.i) ? true: true;    "  // BAD

//@ requires i == 6;    "

//@ modifies \\everything;    "

//@ assert s == i;    "  // OK

//@ assert b == i;    "  // OK

//@ assert c == i;    "  // OK

//@ assert l == i;    "  // OK

//@ assert ii == i;    "  // OK

//@ assert i == (short)i;    "

//@ assert i == (long)i;    "

//@ assert i == (char)i;    "

//@ assert i == (byte)i;    "

//@ assert i == (int)i;    "

//@ requires i == 100000;    "

//@ modifies \\everything;    "

//@ assert s == i;    "

//@ requires i == 100000;    "

//@ modifies \\everything;    "

//@ assert i == (short)i;    " // BAD

//@ requires i == 100000;    "

//@ modifies \\everything;    "

//@ assert i == (byte)i;    "

//@ requires i == 100000;    "

//@ modifies \\everything;    "

//@ assert i == (char)i;    "

//@ requires i == 100000;    "

//@ modifies \\everything;    "

//@ assert b == i;    "

//@ requires i == 100000;    "

//@ modifies \\everything;    "

//@ assert c == i;    "

//@ modifies \\everything;    "


//@ assert 0 == (short)s;

//@ modifies \\everything;    "


//@ assert 0 == (int)s;

//@ modifies \\everything;    "


//@ assert 0L == (long)s;

//@ modifies \\everything;    "


//@ assert 0 == (byte)s;

//@ modifies \\everything;    "


//@ assert 0 == (char)s;

//@ modifies \\everything;    "


//@ assert (boolean)s;

//@ modifies \\everything;    "


//@ assert 0 == (double)s;

//@ modifies \\everything;    "


//@ assert 0.0 == (float)s;

//@ assignable \\everything;    "

//@ assignable \\everything;    "

//@ assignable i;    "

//@ assignable \\everything;    "

//@ assignable \    othing;    "

//@ assignable \\everything;    "

//@ assignable \\everything;    "

//@ requires true;     " // default assignable

//@ assignable \\everything;    "

//@ requires true; pure     " // default assignable

//@ assignable \\everything;    "

//@ pure     " // default assignable

//@ assignable \\everything;    "

//@ public nullable model Object state;    "

//@ in state;    "

//@ assignable \\everything;    "

//@ public nullable model Object state;    "

//@ in state;    "

//@ pure     " // default assignable

//@ assignable \\everything;    "

//@ public nullable model Object state;    "

//@ in state;    "

//@ requires true;    " // default assignable

//@ assignable \\everything;    "

//@ public nullable model Object state;    "

//@ in state;    "

//@ requires true; pure     " // default assignable

//@ assignable \\everything;    "

//@ public nullable model Object state;    "

//@ in state;    "

//@ pure     "

//@ assignable \\everything;    "

//@ public nullable model Object state;    "

//@ in state;    "

//@ pure     "

//@ assignable \\everything;    "

/*@ spec_public */
//@ assignable \\everything;    "

/*@ spec_public */
//@ requires true;     " // default assignable

//@ assignable \\everything;    "

/*@ spec_public */
//@ pure     " // default assignable

//@ assignable \\everything;    "

/*@ spec_public */
//@ requires true; pure     " // default assignable

//@ assignable \\everything;    "

/*@ spec_public */
//@ pure     "

//@ assignable \\everything;    "

/*@ spec_public */
//@ pure     "

//@ assignable \\everything;    "

/*@ nullable_by_default */
//@ ensures \\result == ints.length;    "

//@ pure     "

//@ assert ints != null;     "

/*@ non_null*/
//@ assert i == args.length;     "

//@ assert i == 0;     "

//@ assert i == 1;     "

//@ assert i == 2;     "

//@ ensures \\result == (ints.length > 0 ? ints[0] : (int)ints.length);    "

//@ pure     "

//@ assert ints != null;     "

//@ assert i == 0;     "

//@ assert i == 2;     "

//@ assert i == 5;     "

//@ requires ints.length == 0 || ints[0] != null;    "

//@ ensures \\result == (ints.length > 0 ? ints[0] : (int)ints.length);    "

//@ pure     "

//@ assert ints != null;     "

//@ assert i == 0;     "

//@ assert i == 2;     "

//@ assert i == 5;     "

//@ assert !(b & bb);    "

//@ assert (b | bb);    "

//@ assert (b ^ bb);    "

//@ assert (b & bb);    " // FALSE

//@ requires iii == 10;    "

//@ assert \\old(iii) == 10;    "

//@ assert \\old(iii,a) == 10;    "

//@ assert \\old(iii,b) == 12;    "

//@ assert iii == 14;    "

/*@ ensures \\result == k; pure */
//@ requires k == 10;    "

//@ assert \\old(mm()) == 10;    "

//@ assert \\old(mm(),a) == 10;    "

//@ assert \\old(mm(),b) == 12;    "

//@ assert mm() == 14;    "

//@ old int kk = k; requires k == 5 && i > kk && i < 100 && i > -100; assignable k; ensures k == i+1; ensures kk == 5;    "

//@ also    "

//@ old int kk = k+1; requires k == 5 && i < kk && i < 100 && i > -100; assignable k; ensures k == i-1; ensures kk == 6;    "

//@ assert \\old(k,a) == 10;    "

//@ assert \\old(k,c) == 12;    "

//@ requires i > -10 && i < 10;    "

//@ assert i != i;    " // ERROR

//@ requires i > 0;    "

//@ requires i < 0;    "

//@ assert i != i;    "

//@ requires i > 0;    "

//@ ensures \\result > 0;    "

//@ requires i > -10 && i < 10;    "

//@ assert i < 0;    " // OK

//@ assert i >= 0;    " // OK

//@ requires i > -10 && i < 10;    "

//@ assert i < 0;    "  // false, since not in if

//@ assert i >= 0;    "

//@ requires i > -10 && i < 10;    "

//@ assert i > 0;    "  // false, since not in if

//@ assert i >= 0;    "

//@ old int kk = k;    "

//@ {| requires i < 10 && i > kk; assignable k; ensures k == i+1;     "

//@ also    "

//@    requires i > -10 && i < kk; assignable k; ensures k == i-1;     "

//@ |}    "

//@ ensures \\result == i>=0;     "

//@ pure    "

//@ assert (\\forall int i; 0<=i ; bb(i) : bb(i));    "

//@ assert (\\forall int i; 0<=i ; i>=-1 : i>=0, i<=0);    "

//@ pure    "

//@ assert (\\forall int i; 0<=i ; bb(i) : );    "

//@ assert (\\forall boolean i;  ; i : bb(i));    "

//@ assert 0 == (\\sum int i; 0<=i ; i : i);    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume 1 < a.length;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume 1 < a.length;    "

//@ assume i < a.length;    "

//@ public normal_behavior requires i >= -1;    "

//@ also public exceptional_behavior requires i < -1; signals_only RuntimeException;    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior requires i >= 0;    "

//@ also public exceptional_behavior requires i < 0; signals_only RuntimeException;    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume 1 < a.length;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume 1 < a.length;    "

//@ assume i < a.length;    "

//@ public normal_behavior requires i >= -1;    "

//@ also public exceptional_behavior requires i < -1; signals_only RuntimeException;    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior requires i >= 0;    "

//@ also public exceptional_behavior requires i < 0; signals_only RuntimeException;    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume 1 < a.length;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume 1 < a.length;    "

//@ assume i < a.length;    "

//@ public normal_behavior requires i >= -1;    "

//@ also public exceptional_behavior requires i < -1; signals_only RuntimeException;    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior requires i >= 0;    "

//@ also public exceptional_behavior requires i < 0; signals_only RuntimeException;    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i >= 0;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i >= 0;    "

//@ public normal_behavior requires 0 <= i && i <= a.length;    "

//@ also public exceptional_behavior requires i > a.length+1; signals_only RuntimeException;    "

//@ public normal_behavior requires 0 <= i && i < a.length;    "

//@ also public exceptional_behavior requires i < 0; signals_only RuntimeException;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i >= 0;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i >= 0;    "

//@ public normal_behavior requires 0 <= i && i <= a.length;    "

//@ also public exceptional_behavior requires i > a.length+1; signals_only RuntimeException;    "

//@ public normal_behavior requires 0 <= i && i < a.length;    "

//@ also public exceptional_behavior requires i < 0; signals_only RuntimeException;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i >= 0;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i >= 0;    "

//@ public normal_behavior requires 0 <= i && i <= a.length;    "

//@ also public exceptional_behavior requires i > a.length+1; signals_only RuntimeException;    "

//@ public normal_behavior requires 0 <= i && i < a.length;    "

//@ also public exceptional_behavior requires i < 0; signals_only RuntimeException;    "

//@ public normal_behavior    "

//@ public normal_behavior    "

//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only ArithmeticException;    "

//@ public normal_behavior requires a != 0;    "

//@ also public exceptional_behavior requires a == 0; signals_only ArithmeticException;    "

//@ invariant oo.length > 1;     "

//@ public normal_behavior    "

//@ public normal_behavior    "

//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only ArrayStoreException;    "

//@ public normal_behavior requires \\type(Integer) <: \\elemtype(\\typeof(ooo)) ;    "

//@ also public exceptional_behavior requires !(\\type(Integer) <: \\elemtype(\\typeof(ooo))); signals_only ArrayStoreException;    "

//@ assume ooo.length > 1 ;    "

/*@ public normal_behavior */
//@ public normal_behavior    "


//@ public normal_behavior    "


//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ public normal_behavior    "


//@ public normal_behavior    "


//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ public normal_behavior    "


//@ public normal_behavior    "


//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ public normal_behavior    "


//@ public normal_behavior    "


//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ public normal_behavior    "


//@ public normal_behavior    "


//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ public normal_behavior    "


//@ public normal_behavior    "


//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ public normal_behavior    "


//@ public normal_behavior    "


//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ public normal_behavior    "


//@ public normal_behavior    "


//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ public behavior signals_only A;    "


//@ public behavior signals_only A;    "


//@ public behavior signals_only A;    "

//@ also public exceptional_behavior requires false; signals_only A, NullPointerException;    "


//@ public behavior requires a != null; signals_only A;    "

//@ also public exceptional_behavior requires a == null; signals_only A, NullPointerException;    "


//@ public normal_behavior    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior requires i>0;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior requires i>0;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior requires i>0;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior    "


//@ public normal_behavior    "



//@ assume a == null & en != null;     "

/*@ assert a == null; */
//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ public normal_behavior    "

//@ public normal_behavior    "

//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only NegativeArraySizeException;    "

//@ public normal_behavior requires n >= 0;    "

//@ also public exceptional_behavior requires n < 0; signals_only NegativeArraySizeException;    "

//@ ensures \\result == (\\lbl BYTES Integer.BYTES);    "

//@ modifies \\everything;    "


//@ assume \    onnullelements(a);    "

//@ assume a.length > 1;    "

//@ assert a[0] != null;    "  // OK

//@ modifies \\everything;    "

//@ assume \    onnullelements(a);    "

//@ assert a != null;    "  // OK

//@ modifies \\everything;    "

//@ assume \    onnullelements(a);    "

//@ assert a == null;    "  // BAD

//@ modifies \\everything;    "

//@ assume a != null && a.length > 1;    "

//@ assert a[0] != null;    "  // BAD

//@ modifies \\everything;    "

//@ assume a != null && a.length == 0;    "

//@ assert \    onnullelements(a);    " // OK

//@ modifies \\everything;    "

//@ assume a != null && a.length == 0;    "

//@ assert (\\forall int i; 0<=i && i<a.length; a[i] != null);    " // OK

//@ requires \\elemtype(\\typeof(a)) == \\type(Object); modifies \\everything;    "

//@ assume a != null && a.length == 1;    "

//@ assert a[0] != null;    " // OK

//@ assert \    onnullelements(a);    " // OK

//@ modifies \\everything;    "

//@ assume a != null && a.length == 1;    "

//@ assume a[0] != null;    "

//@ assert \    onnullelements(a);    " // OK

//@ requires \\elemtype(\\typeof(a)) == \\type(Object); modifies \\everything;    "

//@ assume a != null && a.length == 2;    "

//@ assert \    onnullelements(a);    " // OK

//@ modifies \\everything;    "

//@ assume a != null && a.length == 2;    "

//@ assume a[0] != null;    "

//@ assume a[1] != null;    "

//@ assert \    onnullelements(a);    " // OK

//@ requires \\elemtype(\\typeof(a)) == \\type(Object); modifies \\everything;    "

//@ assume a != null && a.length == 3;    "

//@ assert \    onnullelements(a);    " // BAD

//@ requires \\elemtype(\\typeof(a)) == \\type(Object); modifies \\everything;    "

//@ assume \    onnullelements(a) && a.length == 3;    "

//@ assert \    onnullelements(a);    " // OK

//@ requires \\elemtype(\\typeof(a)) == \\type(Object); modifies \\everything;    "

//@ assume a != null && a.length == 3;    " // Line 75

//@ assert \    onnullelements(a);    " // BAD

//@ requires \\elemtype(\\typeof(a)) == \\type(Object); modifies \\everything;    "

//@ assume a != null && a.length == 3;    "

//@ assume \    onnullelements(a);    "

//@ assert \    onnullelements(a);    " // BAD

//@ modifies \\everything;    "

//@ assume a != null && a.length == 0;    "

//@ assert \    onnullelements(a);    "

//@ requires i == 5;    "

//@ modifies \\everything;    "

//@ assert \    ot_modified(i);    "  // OK

//@ modifies \\everything;    "

//@ assert \    ot_modified(i);    "  // BAD

//@ ghost public int gi;    "

//@ requires i == 5;    "

//@ modifies \\everything;    "

//@ assert \    ot_modified(i);    "  // OK

//@ modifies \\everything;    "

//@ assert \    ot_modified(i);    "  // BAD

//@ requires si == 5;    "

//@ modifies \\everything;    "

//@ assert \    ot_modified(si);    "  // OK

//@ modifies \\everything;    "

//@ assert \    ot_modified(si);    "  // BAD

//@ requires gi == 5;    "

//@ modifies \\everything;    "

//@ set gi = 5;    "

//@ assert \    ot_modified(gi);    "  // OK

//@ modifies \\everything;    "

//@ set gi = 5;    "

//@ assert \    ot_modified(gi);    "  // BAD


//@ requires t != null;    "

//@ modifies \\everything;    "

//@ assert \    ot_modified(t.i);    "  // OK

//@ requires t != null;    "

//@ modifies \\everything;    "

//@ assert \    ot_modified(t.i) ? true: true;    "  // BAD

//@ requires t == null;    "

//@ modifies \\everything;    "

//@ assert \    ot_modified(t.i) ? true: true;    "  // OK

//@ modifies \\everything;    "

//@ assert \    ot_modified(t.i) ? true: true;    "  // BAD

//@ requires i == 6;    "

//@ modifies \\everything;    "

//@ assert s == i;    "  // OK

//@ assert b == i;    "  // OK

//@ assert c == i;    "  // OK

//@ assert l == i;    "  // OK

//@ assert ii == i;    "  // OK

//@ assert i == (short)i;    "

//@ assert i == (long)i;    "

//@ assert i == (char)i;    "

//@ assert i == (byte)i;    "

//@ assert i == (int)i;    "

//@ requires i == 100000;    "

//@ modifies \\everything;    "

//@ assert s == i;    "

//@ requires i == 100000;    "

//@ modifies \\everything;    "

//@ assert i == (short)i;    " // BAD

//@ requires i == 100000;    "

//@ modifies \\everything;    "

//@ assert i == (byte)i;    "

//@ requires i == 100000;    "

//@ modifies \\everything;    "

//@ assert i == (char)i;    "

//@ requires i == 100000;    "

//@ modifies \\everything;    "

//@ assert b == i;    "

//@ requires i == 100000;    "

//@ modifies \\everything;    "

//@ assert c == i;    "

//@ modifies \\everything;    "


//@ assert 0 == (short)s;

//@ modifies \\everything;    "


//@ assert 0 == (int)s;

//@ modifies \\everything;    "


//@ assert 0L == (long)s;

//@ modifies \\everything;    "


//@ assert 0 == (byte)s;

//@ modifies \\everything;    "


//@ assert 0 == (char)s;

//@ modifies \\everything;    "


//@ assert (boolean)s;

//@ modifies \\everything;    "


//@ assert 0 == (double)s;

//@ modifies \\everything;    "


//@ assert 0.0 == (float)s;

//@ assignable \\everything;    "

//@ assignable \\everything;    "

//@ assignable i;    "

//@ assignable \\everything;    "

//@ assignable \    othing;    "

//@ assignable \\everything;    "

//@ assignable \\everything;    "

//@ requires true;     " // default assignable

//@ assignable \\everything;    "

//@ requires true; pure     " // default assignable

//@ assignable \\everything;    "

//@ pure     " // default assignable

//@ assignable \\everything;    "

//@ public nullable model Object state;    "

//@ in state;    "

//@ assignable \\everything;    "

//@ public nullable model Object state;    "

//@ in state;    "

//@ pure     " // default assignable

//@ assignable \\everything;    "

//@ public nullable model Object state;    "

//@ in state;    "

//@ requires true;    " // default assignable

//@ assignable \\everything;    "

//@ public nullable model Object state;    "

//@ in state;    "

//@ requires true; pure     " // default assignable

//@ assignable \\everything;    "

//@ public nullable model Object state;    "

//@ in state;    "

//@ pure     "

//@ assignable \\everything;    "

//@ public nullable model Object state;    "

//@ in state;    "

//@ pure     "

//@ assignable \\everything;    "

/*@ spec_public */
//@ assignable \\everything;    "

/*@ spec_public */
//@ requires true;     " // default assignable

//@ assignable \\everything;    "

/*@ spec_public */
//@ pure     " // default assignable

//@ assignable \\everything;    "

/*@ spec_public */
//@ requires true; pure     " // default assignable

//@ assignable \\everything;    "

/*@ spec_public */
//@ pure     "

//@ assignable \\everything;    "

/*@ spec_public */
//@ pure     "

//@ assignable \\everything;    "

/*@ nullable_by_default */
//@ ensures \\result == ints.length;    "

//@ pure     "

//@ assert ints != null;     "

/*@ non_null*/
//@ assert i == args.length;     "

//@ assert i == 0;     "

//@ assert i == 1;     "

//@ assert i == 2;     "

//@ ensures \\result == (ints.length > 0 ? ints[0] : (int)ints.length);    "

//@ pure     "

//@ assert ints != null;     "

//@ assert i == 0;     "

//@ assert i == 2;     "

//@ assert i == 5;     "

//@ requires ints.length == 0 || ints[0] != null;    "

//@ ensures \\result == (ints.length > 0 ? ints[0] : (int)ints.length);    "

//@ pure     "

//@ assert ints != null;     "

//@ assert i == 0;     "

//@ assert i == 2;     "

//@ assert i == 5;     "

//@ assert !(b & bb);    "

//@ assert (b | bb);    "

//@ assert (b ^ bb);    "

//@ assert (b & bb);    " // FALSE

//@ requires iii == 10;    "

//@ assert \\old(iii) == 10;    "

//@ assert \\old(iii,a) == 10;    "

//@ assert \\old(iii,b) == 12;    "

//@ assert iii == 14;    "

/*@ ensures \\result == k; pure */
//@ requires k == 10;    "

//@ assert \\old(mm()) == 10;    "

//@ assert \\old(mm(),a) == 10;    "

//@ assert \\old(mm(),b) == 12;    "

//@ assert mm() == 14;    "

//@ old int kk = k; requires k == 5 && i > kk && i < 100 && i > -100; assignable k; ensures k == i+1; ensures kk == 5;    "

//@ also    "

//@ old int kk = k+1; requires k == 5 && i < kk && i < 100 && i > -100; assignable k; ensures k == i-1; ensures kk == 6;    "

//@ assert \\old(k,a) == 10;    "

//@ assert \\old(k,c) == 12;    "

//@ requires i > -10 && i < 10;    "

//@ assert i != i;    " // ERROR

//@ requires i > 0;    "

//@ requires i < 0;    "

//@ assert i != i;    "

//@ requires i > 0;    "

//@ ensures \\result > 0;    "

//@ requires i > -10 && i < 10;    "

//@ assert i < 0;    " // OK

//@ assert i >= 0;    " // OK

//@ requires i > -10 && i < 10;    "

//@ assert i < 0;    "  // false, since not in if

//@ assert i >= 0;    "

//@ requires i > -10 && i < 10;    "

//@ assert i > 0;    "  // false, since not in if

//@ assert i >= 0;    "

//@ old int kk = k;    "

//@ {| requires i < 10 && i > kk; assignable k; ensures k == i+1;     "

//@ also    "

//@    requires i > -10 && i < kk; assignable k; ensures k == i-1;     "

//@ |}    "

//@ ensures \\result == i>=0;     "

//@ pure    "

//@ assert (\\forall int i; 0<=i ; bb(i) : bb(i));    "

//@ assert (\\forall int i; 0<=i ; i>=-1 : i>=0, i<=0);    "

//@ pure    "

//@ assert (\\forall int i; 0<=i ; bb(i) : );    "

//@ assert (\\forall boolean i;  ; i : bb(i));    "

//@ assert 0 == (\\sum int i; 0<=i ; i : i);    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume 1 < a.length;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume 1 < a.length;    "

//@ assume i < a.length;    "

//@ public normal_behavior requires i >= -1;    "

//@ also public exceptional_behavior requires i < -1; signals_only RuntimeException;    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior requires i >= 0;    "

//@ also public exceptional_behavior requires i < 0; signals_only RuntimeException;    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume 1 < a.length;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume 1 < a.length;    "

//@ assume i < a.length;    "

//@ public normal_behavior requires i >= -1;    "

//@ also public exceptional_behavior requires i < -1; signals_only RuntimeException;    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior requires i >= 0;    "

//@ also public exceptional_behavior requires i < 0; signals_only RuntimeException;    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume 1 < a.length;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume 1 < a.length;    "

//@ assume i < a.length;    "

//@ public normal_behavior requires i >= -1;    "

//@ also public exceptional_behavior requires i < -1; signals_only RuntimeException;    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior requires i >= 0;    "

//@ also public exceptional_behavior requires i < 0; signals_only RuntimeException;    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i >= 0;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i >= 0;    "

//@ public normal_behavior requires 0 <= i && i <= a.length;    "

//@ also public exceptional_behavior requires i > a.length+1; signals_only RuntimeException;    "

//@ public normal_behavior requires 0 <= i && i < a.length;    "

//@ also public exceptional_behavior requires i < 0; signals_only RuntimeException;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i >= 0;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i >= 0;    "

//@ public normal_behavior requires 0 <= i && i <= a.length;    "

//@ also public exceptional_behavior requires i > a.length+1; signals_only RuntimeException;    "

//@ public normal_behavior requires 0 <= i && i < a.length;    "

//@ also public exceptional_behavior requires i < 0; signals_only RuntimeException;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i >= 0;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i >= 0;    "

//@ public normal_behavior requires 0 <= i && i <= a.length;    "

//@ also public exceptional_behavior requires i > a.length+1; signals_only RuntimeException;    "

//@ public normal_behavior requires 0 <= i && i < a.length;    "

//@ also public exceptional_behavior requires i < 0; signals_only RuntimeException;    "

//@ public normal_behavior    "

//@ public normal_behavior    "

//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only ArithmeticException;    "

//@ public normal_behavior requires a != 0;    "

//@ also public exceptional_behavior requires a == 0; signals_only ArithmeticException;    "

//@ invariant oo.length > 1;     "

//@ public normal_behavior    "

//@ public normal_behavior    "

//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only ArrayStoreException;    "

//@ public normal_behavior requires \\type(Integer) <: \\elemtype(\\typeof(ooo)) ;    "

//@ also public exceptional_behavior requires !(\\type(Integer) <: \\elemtype(\\typeof(ooo))); signals_only ArrayStoreException;    "

//@ assume ooo.length > 1 ;    "

/*@ public normal_behavior */
//@ public normal_behavior    "


//@ public normal_behavior    "


//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ public normal_behavior    "


//@ public normal_behavior    "


//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ public normal_behavior    "


//@ public normal_behavior    "


//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ public normal_behavior    "


//@ public normal_behavior    "


//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ public normal_behavior    "


//@ public normal_behavior    "


//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ public normal_behavior    "


//@ public normal_behavior    "


//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ public normal_behavior    "


//@ public normal_behavior    "


//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ public normal_behavior    "


//@ public normal_behavior    "


//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ public behavior signals_only A;    "


//@ public behavior signals_only A;    "


//@ public behavior signals_only A;    "

//@ also public exceptional_behavior requires false; signals_only A, NullPointerException;    "


//@ public behavior requires a != null; signals_only A;    "

//@ also public exceptional_behavior requires a == null; signals_only A, NullPointerException;    "


//@ public normal_behavior    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior requires i>0;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior requires i>0;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior requires i>0;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior    "


//@ public normal_behavior    "



//@ assume a == null & en != null;     "

/*@ assert a == null; */
//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ public normal_behavior    "

//@ public normal_behavior    "

//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only NegativeArraySizeException;    "

//@ public normal_behavior requires n >= 0;    "

//@ also public exceptional_behavior requires n < 0; signals_only NegativeArraySizeException;    "

//@ ensures \\result == (\\lbl BYTES Integer.BYTES);    "

//@ assignable x;     "

//@ assignable x;     "

//@ requires i > 0;     "

//@ assignable x;     "

//@ requires i > 0;     "

//@ assignable x;     "

//@ requires i > 0;     "

//@ assignable x;     "

//@ also     "

//@ requires i == 0;     "

//@ assignable y;     "

//@ requires i > 0;     "

//@ assignable x;     "

//@ also     "

//@ requires i == 0;     "

//@ assignable y;     "

//@ requires i > 0;     "

//@ assignable x;     "

//@ also     "

//@ requires i == 0;     "

//@ assignable y;     "

//@ assignable this.x;     "

//@ assignable this.x;     "

//@ assignable TestJava.y;     "

//@ assignable TestJava.y;     "

//@ assignable tt.TestJava.y;     "

//@ assignable tt.TestJava.y;     "

//@ assignable this.x;     "

//@ assignable TestJava.y;     "

//@ assignable tt.TestJava.y;     "

//@ assignable this.*;     "

//@ assignable TestJava.*;     "

//@ assignable tt.TestJava.*;     "

//@ assignable this.*;     "

//@ assignable TestJava.*;     "

//@ assignable tt.TestJava.*;     "

//@ requires true;     "

//@ assignable y;     "

//@ also requires true;     "

//@ assignable this.*;     "

//@ requires true;     "  // TODO check that the semantics of JML is that assignable clauses may be split like this

//@ assignable y;     "

//@ assignable this.*;     "

//@ requires true;     "

//@ assignable y, this.*;     "

/*@ spec_public */
//@ assignable \\everything;     "

//@ assume z != null && z.length > 1;    "

//@ assignable \    othing;     "

//@ assignable \    othing;     "

//@ assignable \    othing;     "

//@ assignable \    othing;     "

//@ assignable \    othing;     "

//@ assignable \    othing;     "

//@ assignable \    othing;     "

//@ assignable \    othing;     "

//@ assignable \    othing;     "

//@ assume z != null && z.length > 1;    "

//@ public invariant z != null && z.length > 10;    "

//@ requires a != null && a.length > 10; assignable a[1];     "

//@ requires a != null && a.length > 10; assignable z[1];     "

//@ requires a != null && a.length > 10; assignable a[*];     "

//@ requires a != null && a.length > 10; assignable z[*];     "

//@ requires a != null && a.length > 10; assignable a[0..3];     "

//@ requires a != null && a.length > 10; assignable z[0..3];     "

//@ requires a != null && a.length > 10; assignable a[2..3];     "

//@ requires a != null && a.length > 10; assignable a[0..0];     "

//@ requires a != null && a.length > 10; assignable a[0..*];     "

//@ requires a != null && a.length > 10; assignable z[0..*];     "

//@ requires a != null && a.length > 10; assignable a[2..*];     "

//@ assignable a.i;     "

//@ assignable a.*;     "

//@ assignable b.i;     "

//@ assignable b.*;     "

//@ assignable a.si;     "

//@ requires a == b; assignable b.i;     "

//@ requires a == this; assignable i;     "

//@ assignable *.i;     "

//@ assignable y, A.xx, a.x, this.y, TestJava.yy, tt.TestJava.yy;     "

//@ assignable x;     "

//@ assignable this.x;     "

//@ assignable y, A.xx, a.xx, a.x, this.y, TestJava.yy, tt.TestJava.yy; //@ requires a != null;     "

//@ assignable x;     "

//@ assignable xx;     "  // Line 40

//@ assignable xx;     "

//@ assignable TestJava.xx;     "

//@ assignable tt.TestJava.xx;     "

//@ assignable this.xx;     "

//@ assignable x;     "

//@ assignable xx;     "  // Line 40

//@ assignable x;     "

//@ assignable xx;     "  // Line 40

//@ assignable this.x;     "

//@ assignable TestJava.xx;     "

//@ assignable tt.TestJava.xx;     "

//@ assignable A.xx;     "

//@ requires b == this; assignable x;     "

//@ requires b != null; assignable x;     " // b.x is assigned but only this.x is allowed

//@ assignable x;     "

//@ requires b != null; assignable b.x;     "

//@ requires b == this; assignable b.x;     "

//@ requires b == this; assignable b.x;     "

//@ requires b != null; assignable b.x;     "

//@ assignable x;     "

//@ requires a == this; assignable x;     "

//@ requires a != null; assignable x;     "  // ERROR - a.m() assigns a.x, but only this.x is allowed

//@ requires a != null; assignable a.x;     "

//@ requires a == this; assignable a.x;     "

//@ requires a == this; assignable a.x;     "

//@ requires a != null; assignable a.x;     "  // this.x is assigned but only a.x is allowed

//@ assignable x;     "  // Line 29

//@ assignable x;     "

//@ assignable x;     "

//@ requires i > 0;     "

//@ assignable x;     "

//@ requires i > 0;     "

//@ assignable x;     "

//@ requires i > 0;     "

//@ assignable x;     "

//@ also     "

//@ requires i == 0;     "

//@ assignable y;     "

//@ requires i > 0;     "

//@ assignable x;     "

//@ also     "

//@ requires i == 0;     "

//@ assignable y;     "

//@ requires i > 0;     "

//@ assignable x;     "

//@ also     "

//@ requires i == 0;     "

//@ assignable y;     "

//@ assignable this.x;     "

//@ assignable this.x;     "

//@ assignable TestJava.y;     "

//@ assignable TestJava.y;     "

//@ assignable tt.TestJava.y;     "

//@ assignable tt.TestJava.y;     "

//@ assignable this.x;     "

//@ assignable TestJava.y;     "

//@ assignable tt.TestJava.y;     "

//@ assignable this.*;     "

//@ assignable TestJava.*;     "

//@ assignable tt.TestJava.*;     "

//@ assignable this.*;     "

//@ assignable TestJava.*;     "

//@ assignable tt.TestJava.*;     "

//@ requires true;     "

//@ assignable y;     "

//@ also requires true;     "

//@ assignable this.*;     "

//@ requires true;     "  // TODO check that the semantics of JML is that assignable clauses may be split like this

//@ assignable y;     "

//@ assignable this.*;     "

//@ requires true;     "

//@ assignable y, this.*;     "

/*@ spec_public */
//@ assignable \\everything;     "

//@ assume z != null && z.length > 1;    "

//@ assignable \    othing;     "

//@ assignable \    othing;     "

//@ assignable \    othing;     "

//@ assignable \    othing;     "

//@ assignable \    othing;     "

//@ assignable \    othing;     "

//@ assignable \    othing;     "

//@ assignable \    othing;     "

//@ assignable \    othing;     "

//@ assume z != null && z.length > 1;    "

//@ public invariant z != null && z.length > 10;    "

//@ requires a != null && a.length > 10; assignable a[1];     "

//@ requires a != null && a.length > 10; assignable z[1];     "

//@ requires a != null && a.length > 10; assignable a[*];     "

//@ requires a != null && a.length > 10; assignable z[*];     "

//@ requires a != null && a.length > 10; assignable a[0..3];     "

//@ requires a != null && a.length > 10; assignable z[0..3];     "

//@ requires a != null && a.length > 10; assignable a[2..3];     "

//@ requires a != null && a.length > 10; assignable a[0..0];     "

//@ requires a != null && a.length > 10; assignable a[0..*];     "

//@ requires a != null && a.length > 10; assignable z[0..*];     "

//@ requires a != null && a.length > 10; assignable a[2..*];     "

//@ assignable a.i;     "

//@ assignable a.*;     "

//@ assignable b.i;     "

//@ assignable b.*;     "

//@ assignable a.si;     "

//@ requires a == b; assignable b.i;     "

//@ requires a == this; assignable i;     "

//@ assignable *.i;     "

//@ assignable y, A.xx, a.x, this.y, TestJava.yy, tt.TestJava.yy;     "

//@ assignable x;     "

//@ assignable this.x;     "

//@ assignable y, A.xx, a.xx, a.x, this.y, TestJava.yy, tt.TestJava.yy; //@ requires a != null;     "

//@ assignable x;     "

//@ assignable xx;     "  // Line 40

//@ assignable xx;     "

//@ assignable TestJava.xx;     "

//@ assignable tt.TestJava.xx;     "

//@ assignable this.xx;     "

//@ assignable x;     "

//@ assignable xx;     "  // Line 40

//@ assignable x;     "

//@ assignable xx;     "  // Line 40

//@ assignable this.x;     "

//@ assignable TestJava.xx;     "

//@ assignable tt.TestJava.xx;     "

//@ assignable A.xx;     "

//@ requires b == this; assignable x;     "

//@ requires b != null; assignable x;     " // b.x is assigned but only this.x is allowed

//@ assignable x;     "

//@ requires b != null; assignable b.x;     "

//@ requires b == this; assignable b.x;     "

//@ requires b == this; assignable b.x;     "

//@ requires b != null; assignable b.x;     "

//@ assignable x;     "

//@ requires a == this; assignable x;     "

//@ requires a != null; assignable x;     "  // ERROR - a.m() assigns a.x, but only this.x is allowed

//@ requires a != null; assignable a.x;     "

//@ requires a == this; assignable a.x;     "

//@ requires a == this; assignable a.x;     "

//@ requires a != null; assignable a.x;     "  // this.x is assigned but only a.x is allowed

//@ assignable x;     "  // Line 29

//@ assignable x;     "

//@ assignable x;     "

//@ requires i > 0;     "

//@ assignable x;     "

//@ requires i > 0;     "

//@ assignable x;     "

//@ requires i > 0;     "

//@ assignable x;     "

//@ also     "

//@ requires i == 0;     "

//@ assignable y;     "

//@ requires i > 0;     "

//@ assignable x;     "

//@ also     "

//@ requires i == 0;     "

//@ assignable y;     "

//@ requires i > 0;     "

//@ assignable x;     "

//@ also     "

//@ requires i == 0;     "

//@ assignable y;     "

//@ assignable this.x;     "

//@ assignable this.x;     "

//@ assignable TestJava.y;     "

//@ assignable TestJava.y;     "

//@ assignable tt.TestJava.y;     "

//@ assignable tt.TestJava.y;     "

//@ assignable this.x;     "

//@ assignable TestJava.y;     "

//@ assignable tt.TestJava.y;     "

//@ assignable this.*;     "

//@ assignable TestJava.*;     "

//@ assignable tt.TestJava.*;     "

//@ assignable this.*;     "

//@ assignable TestJava.*;     "

//@ assignable tt.TestJava.*;     "

//@ requires true;     "

//@ assignable y;     "

//@ also requires true;     "

//@ assignable this.*;     "

//@ requires true;     "  // TODO check that the semantics of JML is that assignable clauses may be split like this

//@ assignable y;     "

//@ assignable this.*;     "

//@ requires true;     "

//@ assignable y, this.*;     "

/*@ spec_public */
//@ assignable \\everything;     "

//@ assume z != null && z.length > 1;    "

//@ assignable \    othing;     "

//@ assignable \    othing;     "

//@ assignable \    othing;     "

//@ assignable \    othing;     "

//@ assignable \    othing;     "

//@ assignable \    othing;     "

//@ assignable \    othing;     "

//@ assignable \    othing;     "

//@ assignable \    othing;     "

//@ assume z != null && z.length > 1;    "

//@ public invariant z != null && z.length > 10;    "

//@ requires a != null && a.length > 10; assignable a[1];     "

//@ requires a != null && a.length > 10; assignable z[1];     "

//@ requires a != null && a.length > 10; assignable a[*];     "

//@ requires a != null && a.length > 10; assignable z[*];     "

//@ requires a != null && a.length > 10; assignable a[0..3];     "

//@ requires a != null && a.length > 10; assignable z[0..3];     "

//@ requires a != null && a.length > 10; assignable a[2..3];     "

//@ requires a != null && a.length > 10; assignable a[0..0];     "

//@ requires a != null && a.length > 10; assignable a[0..*];     "

//@ requires a != null && a.length > 10; assignable z[0..*];     "

//@ requires a != null && a.length > 10; assignable a[2..*];     "

//@ assignable a.i;     "

//@ assignable a.*;     "

//@ assignable b.i;     "

//@ assignable b.*;     "

//@ assignable a.si;     "

//@ requires a == b; assignable b.i;     "

//@ requires a == this; assignable i;     "

//@ assignable *.i;     "

//@ assignable y, A.xx, a.x, this.y, TestJava.yy, tt.TestJava.yy;     "

//@ assignable x;     "

//@ assignable this.x;     "

//@ assignable y, A.xx, a.xx, a.x, this.y, TestJava.yy, tt.TestJava.yy; //@ requires a != null;     "

//@ assignable x;     "

//@ assignable xx;     "  // Line 40

//@ assignable xx;     "

//@ assignable TestJava.xx;     "

//@ assignable tt.TestJava.xx;     "

//@ assignable this.xx;     "

//@ assignable x;     "

//@ assignable xx;     "  // Line 40

//@ assignable x;     "

//@ assignable xx;     "  // Line 40

//@ assignable this.x;     "

//@ assignable TestJava.xx;     "

//@ assignable tt.TestJava.xx;     "

//@ assignable A.xx;     "

//@ requires b == this; assignable x;     "

//@ requires b != null; assignable x;     " // b.x is assigned but only this.x is allowed

//@ assignable x;     "

//@ requires b != null; assignable b.x;     "

//@ requires b == this; assignable b.x;     "

//@ requires b == this; assignable b.x;     "

//@ requires b != null; assignable b.x;     "

//@ assignable x;     "

//@ requires a == this; assignable x;     "

//@ requires a != null; assignable x;     "  // ERROR - a.m() assigns a.x, but only this.x is allowed

//@ requires a != null; assignable a.x;     "

//@ requires a == this; assignable a.x;     "

//@ requires a == this; assignable a.x;     "

//@ requires a != null; assignable a.x;     "  // this.x is assigned but only a.x is allowed

//@ assignable x;     "  // Line 29

//@ assignable x;     "

//@ assignable x;     "

//@ requires i > 0;     "

//@ assignable x;     "

//@ requires i > 0;     "

//@ assignable x;     "

//@ requires i > 0;     "

//@ assignable x;     "

//@ also     "

//@ requires i == 0;     "

//@ assignable y;     "

//@ requires i > 0;     "

//@ assignable x;     "

//@ also     "

//@ requires i == 0;     "

//@ assignable y;     "

//@ requires i > 0;     "

//@ assignable x;     "

//@ also     "

//@ requires i == 0;     "

//@ assignable y;     "

//@ assignable this.x;     "

//@ assignable this.x;     "

//@ assignable TestJava.y;     "

//@ assignable TestJava.y;     "

//@ assignable tt.TestJava.y;     "

//@ assignable tt.TestJava.y;     "

//@ assignable this.x;     "

//@ assignable TestJava.y;     "

//@ assignable tt.TestJava.y;     "

//@ assignable this.*;     "

//@ assignable TestJava.*;     "

//@ assignable tt.TestJava.*;     "

//@ assignable this.*;     "

//@ assignable TestJava.*;     "

//@ assignable tt.TestJava.*;     "

//@ requires true;     "

//@ assignable y;     "

//@ also requires true;     "

//@ assignable this.*;     "

//@ requires true;     "  // TODO check that the semantics of JML is that assignable clauses may be split like this

//@ assignable y;     "

//@ assignable this.*;     "

//@ requires true;     "

//@ assignable y, this.*;     "

/*@ spec_public */
//@ assignable \\everything;     "

//@ assume z != null && z.length > 1;    "

//@ assignable \    othing;     "

//@ assignable \    othing;     "

//@ assignable \    othing;     "

//@ assignable \    othing;     "

//@ assignable \    othing;     "

//@ assignable \    othing;     "

//@ assignable \    othing;     "

//@ assignable \    othing;     "

//@ assignable \    othing;     "

//@ assume z != null && z.length > 1;    "

//@ public invariant z != null && z.length > 10;    "

//@ requires a != null && a.length > 10; assignable a[1];     "

//@ requires a != null && a.length > 10; assignable z[1];     "

//@ requires a != null && a.length > 10; assignable a[*];     "

//@ requires a != null && a.length > 10; assignable z[*];     "

//@ requires a != null && a.length > 10; assignable a[0..3];     "

//@ requires a != null && a.length > 10; assignable z[0..3];     "

//@ requires a != null && a.length > 10; assignable a[2..3];     "

//@ requires a != null && a.length > 10; assignable a[0..0];     "

//@ requires a != null && a.length > 10; assignable a[0..*];     "

//@ requires a != null && a.length > 10; assignable z[0..*];     "

//@ requires a != null && a.length > 10; assignable a[2..*];     "

//@ assignable a.i;     "

//@ assignable a.*;     "

//@ assignable b.i;     "

//@ assignable b.*;     "

//@ assignable a.si;     "

//@ requires a == b; assignable b.i;     "

//@ requires a == this; assignable i;     "

//@ assignable *.i;     "

//@ assignable y, A.xx, a.x, this.y, TestJava.yy, tt.TestJava.yy;     "

//@ assignable x;     "

//@ assignable this.x;     "

//@ assignable y, A.xx, a.xx, a.x, this.y, TestJava.yy, tt.TestJava.yy; //@ requires a != null;     "

//@ assignable x;     "

//@ assignable xx;     "  // Line 40

//@ assignable xx;     "

//@ assignable TestJava.xx;     "

//@ assignable tt.TestJava.xx;     "

//@ assignable this.xx;     "

//@ assignable x;     "

//@ assignable xx;     "  // Line 40

//@ assignable x;     "

//@ assignable xx;     "  // Line 40

//@ assignable this.x;     "

//@ assignable TestJava.xx;     "

//@ assignable tt.TestJava.xx;     "

//@ assignable A.xx;     "

//@ requires b == this; assignable x;     "

//@ requires b != null; assignable x;     " // b.x is assigned but only this.x is allowed

//@ assignable x;     "

//@ requires b != null; assignable b.x;     "

//@ requires b == this; assignable b.x;     "

//@ requires b == this; assignable b.x;     "

//@ requires b != null; assignable b.x;     "

//@ assignable x;     "

//@ requires a == this; assignable x;     "

//@ requires a != null; assignable x;     "  // ERROR - a.m() assigns a.x, but only this.x is allowed

//@ requires a != null; assignable a.x;     "

//@ requires a == this; assignable a.x;     "

//@ requires a == this; assignable a.x;     "

//@ requires a != null; assignable a.x;     "  // this.x is assigned but only a.x is allowed

//@ assignable x;     "  // Line 29

//@ assignable x;     "

//@ assignable x;     "

//@ requires i > 0;     "

//@ assignable x;     "

//@ requires i > 0;     "

//@ assignable x;     "

//@ requires i > 0;     "

//@ assignable x;     "

//@ also     "

//@ requires i == 0;     "

//@ assignable y;     "

//@ requires i > 0;     "

//@ assignable x;     "

//@ also     "

//@ requires i == 0;     "

//@ assignable y;     "

//@ requires i > 0;     "

//@ assignable x;     "

//@ also     "

//@ requires i == 0;     "

//@ assignable y;     "

//@ assignable this.x;     "

//@ assignable this.x;     "

//@ assignable TestJava.y;     "

//@ assignable TestJava.y;     "

//@ assignable tt.TestJava.y;     "

//@ assignable tt.TestJava.y;     "

//@ assignable this.x;     "

//@ assignable TestJava.y;     "

//@ assignable tt.TestJava.y;     "

//@ assignable this.*;     "

//@ assignable TestJava.*;     "

//@ assignable tt.TestJava.*;     "

//@ assignable this.*;     "

//@ assignable TestJava.*;     "

//@ assignable tt.TestJava.*;     "

//@ requires true;     "

//@ assignable y;     "

//@ also requires true;     "

//@ assignable this.*;     "

//@ requires true;     "  // TODO check that the semantics of JML is that assignable clauses may be split like this

//@ assignable y;     "

//@ assignable this.*;     "

//@ requires true;     "

//@ assignable y, this.*;     "

/*@ spec_public */
//@ assignable \\everything;     "

//@ assume z != null && z.length > 1;    "

//@ assignable \    othing;     "

//@ assignable \    othing;     "

//@ assignable \    othing;     "

//@ assignable \    othing;     "

//@ assignable \    othing;     "

//@ assignable \    othing;     "

//@ assignable \    othing;     "

//@ assignable \    othing;     "

//@ assignable \    othing;     "

//@ assume z != null && z.length > 1;    "

//@ public invariant z != null && z.length > 10;    "

//@ requires a != null && a.length > 10; assignable a[1];     "

//@ requires a != null && a.length > 10; assignable z[1];     "

//@ requires a != null && a.length > 10; assignable a[*];     "

//@ requires a != null && a.length > 10; assignable z[*];     "

//@ requires a != null && a.length > 10; assignable a[0..3];     "

//@ requires a != null && a.length > 10; assignable z[0..3];     "

//@ requires a != null && a.length > 10; assignable a[2..3];     "

//@ requires a != null && a.length > 10; assignable a[0..0];     "

//@ requires a != null && a.length > 10; assignable a[0..*];     "

//@ requires a != null && a.length > 10; assignable z[0..*];     "

//@ requires a != null && a.length > 10; assignable a[2..*];     "

//@ assignable a.i;     "

//@ assignable a.*;     "

//@ assignable b.i;     "

//@ assignable b.*;     "

//@ assignable a.si;     "

//@ requires a == b; assignable b.i;     "

//@ requires a == this; assignable i;     "

//@ assignable *.i;     "

//@ assignable y, A.xx, a.x, this.y, TestJava.yy, tt.TestJava.yy;     "

//@ assignable x;     "

//@ assignable this.x;     "

//@ assignable y, A.xx, a.xx, a.x, this.y, TestJava.yy, tt.TestJava.yy; //@ requires a != null;     "

//@ assignable x;     "

//@ assignable xx;     "  // Line 40

//@ assignable xx;     "

//@ assignable TestJava.xx;     "

//@ assignable tt.TestJava.xx;     "

//@ assignable this.xx;     "

//@ assignable x;     "

//@ assignable xx;     "  // Line 40

//@ assignable x;     "

//@ assignable xx;     "  // Line 40

//@ assignable this.x;     "

//@ assignable TestJava.xx;     "

//@ assignable tt.TestJava.xx;     "

//@ assignable A.xx;     "

//@ requires b == this; assignable x;     "

//@ requires b != null; assignable x;     " // b.x is assigned but only this.x is allowed

//@ assignable x;     "

//@ requires b != null; assignable b.x;     "

//@ requires b == this; assignable b.x;     "

//@ requires b == this; assignable b.x;     "

//@ requires b != null; assignable b.x;     "

//@ assignable x;     "

//@ requires a == this; assignable x;     "

//@ requires a != null; assignable x;     "  // ERROR - a.m() assigns a.x, but only this.x is allowed

//@ requires a != null; assignable a.x;     "

//@ requires a == this; assignable a.x;     "

//@ requires a == this; assignable a.x;     "

//@ requires a != null; assignable a.x;     "  // this.x is assigned but only a.x is allowed

//@ assignable x;     "  // Line 29

/*@ nullable_by_default*/
//@ assert k == 5 ;    "

//@ assert k == 6 ;    "

//@ assert k == 6 ;    "

//@ assert i != null ;    "

//@ assert \\typeof(i) == \\type(Integer) ;    " // Line 25

/*@ nullable_by_default*/
//@ assert k == 5;     }    "

//@ assert m == 6;     }    "

/*@ nullable_by_default*/
//@ assert k == 5;     }    "

//@ assert m == 6;     }    "

/*@ nullable_by_default*/
//@ assert m == i;     "

/*@ nullable_by_default*/
//@ assert m == i;     "

/*@ nullable_by_default*/
//@ assert m == i;     "

/*@ nullable_by_default*/
//@ assert m == i;     "

/*@ nullable_by_default*/
//@ assert z  == 7;     "

//@ assert z == 8;     "

/*@ nullable_by_default*/
//@ assert k == 5 ;    "

//@ assert k == 6 ;    "

//@ assert k == 6 ;    "

//@ assert i != null ;    "

//@ assert \\typeof(i) == \\type(Integer) ;    " // Line 25

/*@ nullable_by_default*/
//@ assert k == 5;     }    "

//@ assert m == 6;     }    "

/*@ nullable_by_default*/
//@ assert k == 5;     }    "

//@ assert m == 6;     }    "

/*@ nullable_by_default*/
//@ assert m == i;     "

/*@ nullable_by_default*/
//@ assert m == i;     "

/*@ nullable_by_default*/
//@ assert m == i;     "

/*@ nullable_by_default*/
//@ assert m == i;     "

/*@ nullable_by_default*/
//@ assert z  == 7;     "

//@ assert z == 8;     "

/*@ nullable_by_default*/
//@ assert k == 5 ;    "

//@ assert k == 6 ;    "

//@ assert k == 6 ;    "

//@ assert i != null ;    "

//@ assert \\typeof(i) == \\type(Integer) ;    " // Line 25

/*@ nullable_by_default*/
//@ assert k == 5;     }    "

//@ assert m == 6;     }    "

/*@ nullable_by_default*/
//@ assert k == 5;     }    "

//@ assert m == 6;     }    "

/*@ nullable_by_default*/
//@ assert m == i;     "

/*@ nullable_by_default*/
//@ assert m == i;     "

/*@ nullable_by_default*/
//@ assert m == i;     "

/*@ nullable_by_default*/
//@ assert m == i;     "

/*@ nullable_by_default*/
//@ assert z  == 7;     "

//@ assert z == 8;     "

/*@ nullable_by_default*/
//@ assert k == 5 ;    "

//@ assert k == 6 ;    "

//@ assert k == 6 ;    "

//@ assert i != null ;    "

//@ assert \\typeof(i) == \\type(Integer) ;    " // Line 25

/*@ nullable_by_default*/
//@ assert k == 5;     }    "

//@ assert m == 6;     }    "

/*@ nullable_by_default*/
//@ assert k == 5;     }    "

//@ assert m == 6;     }    "

/*@ nullable_by_default*/
//@ assert m == i;     "

/*@ nullable_by_default*/
//@ assert m == i;     "

/*@ nullable_by_default*/
//@ assert m == i;     "

/*@ nullable_by_default*/
//@ assert m == i;     "

/*@ nullable_by_default*/
//@ assert z  == 7;     "

//@ assert z == 8;     "

/*@ nullable_by_default*/
//@ assert k == 5 ;    "

//@ assert k == 6 ;    "

//@ assert k == 6 ;    "

//@ assert i != null ;    "

//@ assert \\typeof(i) == \\type(Integer) ;    " // Line 25

/*@ nullable_by_default*/
//@ assert k == 5;     }    "

//@ assert m == 6;     }    "

/*@ nullable_by_default*/
//@ assert k == 5;     }    "

//@ assert m == 6;     }    "

/*@ nullable_by_default*/
//@ assert m == i;     "

/*@ nullable_by_default*/
//@ assert m == i;     "

/*@ nullable_by_default*/
//@ assert m == i;     "

/*@ nullable_by_default*/
//@ assert m == i;     "

/*@ nullable_by_default*/
//@ assert z  == 7;     "

//@ assert z == 8;     "

//@ assert i>0 ;    "

//@ requires i>=0;    "

//@ assert i>0 ;    "

//@ requires i>0;    "

//@ assert i>0 ;    "

//@ requires i>0;    "

//@ assert i>=0 ;    "

//@ requires i>0;    "

//@ also    "

//@ requires i==0;    "

//@ assert i>=0 ;    "

//@ assert i>0 ;    "

//@ requires i>=0;    "

//@ assert i>0 ;    "

//@ requires i>0;    "

//@ assert i>0 ;    "

//@ requires i>0;    "

//@ assert i>=0 ;    "

//@ requires i>0;    "

//@ also    "

//@ requires i==0;    "

//@ assert i>=0 ;    "

//@ requires i>0;    "

//@ ensures false;    "

//@ requires i>0;    "

//@ requires i<0;    "

//@ ensures false;    "

//@ requires i >= 0 && a[i]>0;    "

//@ requires i < a.length && a[i]>0;    "

//@ requires i >= 0 && i < a.length;    "

//@ requires a[i]>0;    "

//@ requires a.length > 10 && i < 5 && a[i]>0 ;    "

//@ requires i >= 0 && i < a.length;    "

//@ requires a[i]>0;    "

//@ signals (Exception) false;    "

//@ ensures false;    "

//@ ensures false;    "

//@ ensures true;    "

//@ signals (Exception e)  false;    "

//@ ensures false;    "

//@ requires i == 0;    "

//@ ensures false;    "

//@ also    "

//@ requires i!= 0;    "

//@ ensures true;    "

//@ requires i == 0;    "

//@ ensures true;    "

//@ also    "

//@ requires i!= 0;    "

//@ ensures false;    "

//@ requires i == 0;    "

//@ signals (Exception e) false;    "

//@ also    "

//@ requires i!= 0;    "

//@ signals (Exception e) true;    "

//@ requires i == 0;    "

//@ signals (Exception e) true;    "

//@ also    "

//@ requires i!= 0;    "

//@ signals (Exception e) false;    "

//@ signals (Exception e) \\exception == null;    "

//@ signals (Exception e) \\exception != null;    "

//@ signals (Exception) \\exception != null;    "

//@ public normal_behavior ensures iii == \\old(iii) + 3;    "

//@ public normal_behavior ensures iii == \\old(iii) + 3;    "

//@ public normal_behavior assignable iii; ensures iii == \\old(iii) + 1;    "

//@ public normal_behavior ensures i == \\old(i) + 3;    "

//@ public normal_behavior ensures i == \\old(i) + 3;    "

//@ public normal_behavior ensures i == \\old(i) + 1;    "

//@ public normal_behavior ensures iii == \\old(iii) + 3;    "

//@ public normal_behavior ensures iii == \\old(iii) + 3;    "

//@ public normal_behavior assignable iii; ensures iii == \\old(iii) + 1;    "

//@ public normal_behavior ensures i == \\old(i) + 3;    "

//@ public normal_behavior ensures i == \\old(i) + 3;    "

//@ public normal_behavior ensures i == \\old(i) + 1;    "

//@ requires i == 0;     "

//@ assert j == 0;    "

//@ assert \\old(i) == 0;    "

//@ assert \\old(j,a) == 0;    "

//@ assert \\old(i,a) == 0;    "

//@ assert \\old(j,b) == 1;    "

//@ assert \\old(i,b) == 1;    "

//@ assert \\pre(i) == 0;    "

//@ ensures \\result == 7;     "

/*@ signals_only \    othing;*/
//@ requires k > 0;      "

//@ ensures \\result == i* 2 + 1;     "

//@ ensures \\result == i* 2 + 1;     "

//@ ensures \\result == 1;     "

//@ ensures \\result == 0;     "

//@ ensures \\result == 0;     "

//@ ensures \\result == 1;     "

//@ ensures \\result == 2;     "

//@ ensures \\result == 2;     "   // Line 50

//@ ensures \\result == 3;     "

//@ assignable kk;    "

//@ ensures \\result == 3; signals (Exception e)  false;     "

//@ assignable kk;    "

//@ ensures \\result == 3; signals (Exception e)  kk == 1;     "

//@ assignable kk;    "

//@ ensures \\result == 3; signals (Exception e)  kk == 1;     "

//@ assignable kk;    "

//@ ensures \\result == 3; signals (Exception e) kk == 4;     "

//@ assignable kk;    "

//@ ensures i==0 ==> \\result == 4; signals (Exception e) false;     "

//@ assignable kk;    "

//@ ensures \\result == 3; signals (Exception e)  false;     "

//@ unreachable;    "

//@ requires i != 0;     "

//@ unreachable;    "

//@ ghost int k = 0;"

//@ set k = 1;    "

//@ assert k == 0;     "

//@ requires i != 0;     "

//@ ghost int k = 0;"

//@ set k = 1;    "

//@ assert k == 1;     "

//@ ghost int k = 0;"

//@ debug k = 1;    "

//@ assert k == 0;     "

//@ requires i != 0;     "

//@ ghost int k = 0;"

//@ debug k = 1;    "

//@ assert k == 1;     "

//@ ghost boolean k = true;"

//@ set k = (k <=!=> k);    "

//@ assert k;     "

//@ ghost boolean k = true;"

//@ set k = (k <==> k);    "

//@ assert k;     "

//@ ghost int k = 0;"

//@ debug k = 1;    "

//@ assert k == 0;     "

//@ requires i != 0;     "

//@ ghost int k = 0;"

//@ debug k = 1;    "

//@ assert k == 1;     "

//@ assert i == 0;    "

//@ havoc i;     "

//@ assert i == 0;    "

//@ ensures a[i]>0;    "

//@ requires i >= 0 && i < a.length;    "

//@ ensures a[i]==true || a[i]==false;    "

//@ signals (Exception) false;    "

//@ requires true;    "

//@ ensures \\result ==4;    "

//@ requires true;    "

//@ ensures \\result == 3;    "

//@ requires x >= 0;    "

//@ ensures \\result < 0;    "

//@ requires x >= 0;    "

//@ ensures \\result <= 0;    "

//@ assignable \\everything;    "

//@ ensures \\result == i;    "

//@ ensures i == \\old(i) + 1;    "

//@ assignable \\everything;    "

//@ ensures \\result == i;    "

//@ ensures i == \\old(i) - 1;    "

//@ assignable \\everything;    "

//@ ensures \\result == \\old(i);    "

//@ ensures i == \\old(i) + 1;    "

//@ assignable \\everything;    "

//@ ensures \\result == i;    "

//@ ensures i == \\old(i) + 1;    "

//@ assignable \\everything;    "

//@ ensures \\result == \\old(i);    "

//@ ensures i == \\old(i) - 1;    "

//@ assignable \\everything;    "

//@ ensures \\result == i;    "

//@ ensures i == \\old(i) - 1;    "

//@ requires p ==> q;    "

//@ ensures !p || q;    "

//@ requires p <==> q;    "

//@ ensures p == q;    "

//@ requires p <=!=> q;    "

//@ ensures p != q;    "

//@ requires p <== q;    "

//@ ensures p || !q;    "

//@ requires !p || q;    "

//@ ensures p ==> q;    "

//@ requires p == q;    "

//@ ensures p <==> q;    "

//@ requires p != q;    "

//@ ensures p <=!=> q;    "

//@ requires p || !q;    "

//@ ensures p <== q;    "

//@ requires i < 100000;    "

//@ ensures \\result == i;    "

//@ requires i < 100000;    "

//@ ensures \\result >= i;    "

//@ requires true;    "

//@ ensures \\result == i;    "

//@ requires i < 100000;    "

//@ ensures \\result >= i;    "

//@ requires true;    "

//@ ensures \\result >= i;    "

//@ requires true;    "

//@ ensures \\result == i;    "

//@ requires true;    "

//@ ensures \\result >= i;    "

//@ ensures \\result;    "

//@ requires a;    "

//@ ensures \\result;    "

//@ also     "

//@ requires !a;    "

//@ ensures \\result == b;    "

//@ requires a;    "

//@ ensures b;    "

//@ also     "

//@ requires !a;    "

//@ ensures \\result == b;    "

//@ requires a;    "

//@ ensures \\result == b;    "

//@ also     "

//@ requires !a;    "

//@ ensures \\result == false;    "

//@ requires i < 2 && i > -2; ensures \\result;    "

//@ ensures \\result;    "

//@ requires i < 30 && i > -30; ensures \\result;    "

//@ ensures \\result;    "

//@ requires a;    "

//@ ensures \\result;    "

//@ also     "

//@ requires !a;    "

//@ ensures \\result == b;    "

//@ requires a;    "

//@ ensures b;    "

//@ also     "

//@ requires !a;    "

//@ ensures \\result == b;    "

//@ requires a;    "

//@ ensures \\result == b;    "

//@ also     "

//@ requires !a;    "

//@ ensures \\result == false;    "

//@ requires i < 2 && i > -2; ensures \\result;    "

//@ ensures \\result;    "

//@ requires i < 30 && i > -30; ensures \\result;    "

//@ requires true;    "

//@ ensures b ==> (i!=5) ;    "

//@ ghost boolean bb = (\\lbl LBL_BB b);    "

//@ ghost boolean bbp = (\\lblpos LBL_BB2 (i!=5));    "

//@ ghost boolean bbn = (\\lblneg LBL_BB3 (i!=5));    "

//@ ghost int ii = (\\lbl LBL_BBI i);    "

//@ requires true;    "

//@ ensures \\result;    "

//@ requires p && q;    "

//@ ensures \\result;    "

//@ requires true;    "

//@ ensures \\result;    "

//@ requires p && !q;    "

//@ ensures \\result;    "

//@ requires true;    "

//@ ensures \\result;    "

//@ requires p && !q;    "

//@ ensures \\result;    "



//@ assert i == j;    "

//@ requires true;    "

//@ ensures \\result == 1;    "

//@ requires this.f == 1;    "

//@ ensures \\result == 1;    "

//@ requires true;    "

//@ ensures \\result == 1;    "

//@ requires f == 1;    "

//@ ensures \\result == 1;    "

//@ requires f == 1;    "

//@ ensures \\result == 1;    "

//@ requires true;    "

//@ ensures true;    "

/*@nullable*/
//@ requires p.f == 1;    "

//@ ensures \\result == 1;    "

//@ requires i < 100;    "

//@ ensures \\result == i;    "

//@ requires i < 100;    "

//@ ensures \\result == i+1;    "

/*@ assert s == 0; */
/*@ assert s == 1; */
/*@ assert s == 1; */
/*@ assert s == 0; */
/*@ nullable*/
//@ static public invariant CHILD == 3;    "

//@ helper pure     "

//@ assert CHILD == 3 ;    "

//@ static final public invariant CHILD == 3;    "

//@ public normal_behavior ensures true; static_initializer    "

//@ helper pure     "

//@ assert CHILD == 3 ;    "

/*@ final */
//@ helper pure     "

//@ assert CHILD == 3 ;    "

/*@ final */
/*@ final */
//@ public normal_behavior ensures true; static_initializer    "

//@  pure     "

//@ assert H.ZZZZ == 79 ;    "

//@ assert FIELD.length == 5 ;    "

//@ assert FIELD2.length == 6 ;    "

//@ assert H.CHILD.length == 5 ;    "

//@ assert H.CHILD2.length == 6 ;    "

/*@ final */
/*@ final */
/*@ final */
//@ public normal_behavior ensures true; static_initializer    "

//@ ensures true;    "

//@ model pure public int mm(int i);    "

//@ ensures true; pure    "

//@ ensures !\\fresh(\\result); pure    "

//@ model public <TT> TT mt(int i);    "

//@ ensures !\\fresh(\\result); pure    "


//@ ensures true; pure    "

//@ model function public static int mf(int i);    "

//@ ensures true; pure    "

//@ function     "

//@ ensures mm(i) == mm(i);    "

//@ ensures mmr(i) == \\result;    "

//@ ensures mt(i) == mt(i);    "

//@ ensures mtr(i) == \\result;    "


//@ ensures mf(i) == mf(i);    "

//@ ensures mfr(i) == \\result;    "


//@ ensures \\fresh(\\result); pure    "

//@ ensures \\result == null || !\\fresh(\\result); pure    " // FIXME - should this work -= does not prevent the result from being fresh for m2 while not for mm2

//@ ensures \\result == o; pure    "


//@ ensures true; pure    "

//@ ensures \\fresh(\\result);    "  // Line 10

//@ ensures mm(i) == \\result;    " // ERROR - not necessarily the case

//@ ensures \\result == null || !\\fresh(\\result);    "

//@ ensures mm2(i) == \\result;    "


//@ ensures mm3(i) == \\result;    " // Line 20 // ERROR - not necessarily the case

//@ ensures true; pure     "

//@ assert i==1 ==> j == mpure(1);     "

//@ assert i==2 ==> j == mpure(2);     "

//@ assert i==3 ==> j == mpure(1);     " // CAN'T PROVE

//@ assert i==3 ==> j != mpure(1);     " // CAN'T PROVE

//@ ensures true; pure     "

//@ assert i==1 ==> j == mpure(1);     " // CAN'T PROVE

//@ assert i==2 ==> j == mpure(2);     " // CAN'T PROVE

//@ assert i==3 ==> j == mpure(1);     " // CAN'T PROVE

//@ assert i==3 ==> j != mpure(1);     " // CAN'T PROVE

//@ requires true;    "

//@ assert i == 0 ;    "

//@ requires i == 0;    "

//@ assert i == 0 ;    "

//@ assume i == 0 ;    "

//@ assert i == 0 ;    "

//@ requires true;    "

//@ requires true;    "

//@ requires i == 0;    "

//@ assume i == 0 ;    "

//@ requires 10/i < 0;    "

//@ requires i != 0 && 10/i < 0;    "

//@ ensures 10/i < 0 || true;    "

//@ ensures i == 0 || 10/i < 0 || true;    "

//@ assume 10/i < 0 || true;    "

//@ assume i == 0 || 10/i < 0 || true;    "

//@ assert 10/i < 0 ||true;    "

//@ assert i == 0 || 10/i < 0 || true;    "

//@ assert 10%i < 0 ||true;    "

//@ assert i == 0 || 10%i < 0 || true;    "

//@ assert i<10;    "

//@ assert i<10;    "

//@ assert i>=10;    "

//@ assert i<10;    "

//@ assert i>10;    "

//@ assert i<10;    "

//@ assert i<=10;    "

//@ assert i>=10;    "

//@ assert i<10;    "

//@ assert i<=10;    "

//@ assert i>10;    "

//@ requires arg != null;     "

//@ assert i == arg.length;    "

//@ requires arg != null;     "

//@ unreachable;    "

//@ assert !b;    "

//@ assert b;    "

//@ assert !b;    "

//@ assert b;    "

//@ assert b;    "

//@ assert b;    "

//@ assert b;    "

//@ assert b;    "

//@ assert a == 5;    "

//@ assert a == 5;    "

//@ assert g == 5;    "

//@ assert g == 5;    "

//@ assert a == 1;    "

//@ assert g == 1;    "

//@ assert g == 1;    "

//@ assert s = \"xy\";    "

//@ assert s = \"x1\";    "

//@ assert s = \"xtrue\";    "

//@ assert s = \"falsex\";    "

//@ assert s = \"xnull\";    "

//@ requires a.length > 10;    "

//@ ghost boolean b = Integer.class <: Number.class;    "

//@ ghost boolean bb = Number.class <: Boolean.class;    "

//@ assert b && !bb;    "

//@ requires clazz <: Number.class;    "

//@ assignable j;    "

//@ ensures j > 100;    "

//@ also    "

//@ requires clazz <: Boolean.class;    "

//@ assignable j;    "

//@ ensures j > 200;    "

//@ also    "

//@ requires clazz <: String.class;    "

//@ assignable j;    "

//@ ensures j > 200;    "

//@ requires i > 0;    "

//@ assignable j;    "

//@ ensures j > 100;    "

//@ also    "

//@ requires i >= 2;    "

//@ assignable j;    "

//@ ensures j > 200;    "

//@ assert a == 7;    "

//@ assert a == 4;    "

//@ assert a == 4;    "

//@ requires i == 4;    "

//@ ensures \\result == 5;    "

//@ also    "

//@ requires i == 5;    "

//@ ensures \\result == 6;    "

/*@ pure */
//@ assert 0<m(3);    "

//@ old int j = i+2;    "

//@ requires 0 <= j && j < 10;    "

//@ requires a != null && a.length == 10;    "

//@ assignable a[j];    "

//@ ensures a[j] == 42;    "

//@ requires 0 <= i && i < 8;    "

//@ requires a != null && a.length == 10;    "

//@ assignable a[i];    "

//@ requires 0 <= i && i < 8;    "

//@ requires a != null && a.length == 10;    "

//@ assignable a[i+2];    "

//@ old int j = i+1;    "

//@ requires 0 <= j && j < 9;    "

//@ requires a != null && a.length == 10;    "

//@ assignable a[j];    "

//@ old int j = i+off;    "

//@ requires a != null && a.length == 100;    "

//@ requires 0 <= i && i < 50 && 0 <= off && off < 30;    "

//@ assignable a[j];    "

//@ requires 0 <= i && i < 50;    "

//@ requires a != null && a.length == 100;    "

//@ assignable a[i],a[i+10],a[i+25];    "

//@ assert i>0 ;    "

//@ requires i>=0;    "

//@ assert i>0 ;    "

//@ requires i>0;    "

//@ assert i>0 ;    "

//@ requires i>0;    "

//@ assert i>=0 ;    "

//@ requires i>0;    "

//@ also    "

//@ requires i==0;    "

//@ assert i>=0 ;    "

//@ assert i>0 ;    "

//@ requires i>=0;    "

//@ assert i>0 ;    "

//@ requires i>0;    "

//@ assert i>0 ;    "

//@ requires i>0;    "

//@ assert i>=0 ;    "

//@ requires i>0;    "

//@ also    "

//@ requires i==0;    "

//@ assert i>=0 ;    "

//@ requires i>0;    "

//@ ensures false;    "

//@ requires i>0;    "

//@ requires i<0;    "

//@ ensures false;    "

//@ requires i >= 0 && a[i]>0;    "

//@ requires i < a.length && a[i]>0;    "

//@ requires i >= 0 && i < a.length;    "

//@ requires a[i]>0;    "

//@ requires a.length > 10 && i < 5 && a[i]>0 ;    "

//@ requires i >= 0 && i < a.length;    "

//@ requires a[i]>0;    "

//@ signals (Exception) false;    "

//@ ensures false;    "

//@ ensures false;    "

//@ ensures true;    "

//@ signals (Exception e)  false;    "

//@ ensures false;    "

//@ requires i == 0;    "

//@ ensures false;    "

//@ also    "

//@ requires i!= 0;    "

//@ ensures true;    "

//@ requires i == 0;    "

//@ ensures true;    "

//@ also    "

//@ requires i!= 0;    "

//@ ensures false;    "

//@ requires i == 0;    "

//@ signals (Exception e) false;    "

//@ also    "

//@ requires i!= 0;    "

//@ signals (Exception e) true;    "

//@ requires i == 0;    "

//@ signals (Exception e) true;    "

//@ also    "

//@ requires i!= 0;    "

//@ signals (Exception e) false;    "

//@ signals (Exception e) \\exception == null;    "

//@ signals (Exception e) \\exception != null;    "

//@ signals (Exception) \\exception != null;    "

//@ public normal_behavior ensures iii == \\old(iii) + 3;    "

//@ public normal_behavior ensures iii == \\old(iii) + 3;    "

//@ public normal_behavior assignable iii; ensures iii == \\old(iii) + 1;    "

//@ public normal_behavior ensures i == \\old(i) + 3;    "

//@ public normal_behavior ensures i == \\old(i) + 3;    "

//@ public normal_behavior ensures i == \\old(i) + 1;    "

//@ public normal_behavior ensures iii == \\old(iii) + 3;    "

//@ public normal_behavior ensures iii == \\old(iii) + 3;    "

//@ public normal_behavior assignable iii; ensures iii == \\old(iii) + 1;    "

//@ public normal_behavior ensures i == \\old(i) + 3;    "

//@ public normal_behavior ensures i == \\old(i) + 3;    "

//@ public normal_behavior ensures i == \\old(i) + 1;    "

//@ requires i == 0;     "

//@ assert j == 0;    "

//@ assert \\old(i) == 0;    "

//@ assert \\old(j,a) == 0;    "

//@ assert \\old(i,a) == 0;    "

//@ assert \\old(j,b) == 1;    "

//@ assert \\old(i,b) == 1;    "

//@ assert \\pre(i) == 0;    "

//@ ensures \\result == 7;     "

/*@ signals_only \    othing;*/
//@ requires k > 0;      "

//@ ensures \\result == i* 2 + 1;     "

//@ ensures \\result == i* 2 + 1;     "

//@ ensures \\result == 1;     "

//@ ensures \\result == 0;     "

//@ ensures \\result == 0;     "

//@ ensures \\result == 1;     "

//@ ensures \\result == 2;     "

//@ ensures \\result == 2;     "   // Line 50

//@ ensures \\result == 3;     "

//@ assignable kk;    "

//@ ensures \\result == 3; signals (Exception e)  false;     "

//@ assignable kk;    "

//@ ensures \\result == 3; signals (Exception e)  kk == 1;     "

//@ assignable kk;    "

//@ ensures \\result == 3; signals (Exception e)  kk == 1;     "

//@ assignable kk;    "

//@ ensures \\result == 3; signals (Exception e) kk == 4;     "

//@ assignable kk;    "

//@ ensures i==0 ==> \\result == 4; signals (Exception e) false;     "

//@ assignable kk;    "

//@ ensures \\result == 3; signals (Exception e)  false;     "

//@ unreachable;    "

//@ requires i != 0;     "

//@ unreachable;    "

//@ ghost int k = 0;"

//@ set k = 1;    "

//@ assert k == 0;     "

//@ requires i != 0;     "

//@ ghost int k = 0;"

//@ set k = 1;    "

//@ assert k == 1;     "

//@ ghost int k = 0;"

//@ debug k = 1;    "

//@ assert k == 0;     "

//@ requires i != 0;     "

//@ ghost int k = 0;"

//@ debug k = 1;    "

//@ assert k == 1;     "

//@ ghost boolean k = true;"

//@ set k = (k <=!=> k);    "

//@ assert k;     "

//@ ghost boolean k = true;"

//@ set k = (k <==> k);    "

//@ assert k;     "

//@ ghost int k = 0;"

//@ debug k = 1;    "

//@ assert k == 0;     "

//@ requires i != 0;     "

//@ ghost int k = 0;"

//@ debug k = 1;    "

//@ assert k == 1;     "

//@ assert i == 0;    "

//@ havoc i;     "

//@ assert i == 0;    "

//@ ensures a[i]>0;    "

//@ requires i >= 0 && i < a.length;    "

//@ ensures a[i]==true || a[i]==false;    "

//@ signals (Exception) false;    "

//@ requires true;    "

//@ ensures \\result ==4;    "

//@ requires true;    "

//@ ensures \\result == 3;    "

//@ requires x >= 0;    "

//@ ensures \\result < 0;    "

//@ requires x >= 0;    "

//@ ensures \\result <= 0;    "

//@ assignable \\everything;    "

//@ ensures \\result == i;    "

//@ ensures i == \\old(i) + 1;    "

//@ assignable \\everything;    "

//@ ensures \\result == i;    "

//@ ensures i == \\old(i) - 1;    "

//@ assignable \\everything;    "

//@ ensures \\result == \\old(i);    "

//@ ensures i == \\old(i) + 1;    "

//@ assignable \\everything;    "

//@ ensures \\result == i;    "

//@ ensures i == \\old(i) + 1;    "

//@ assignable \\everything;    "

//@ ensures \\result == \\old(i);    "

//@ ensures i == \\old(i) - 1;    "

//@ assignable \\everything;    "

//@ ensures \\result == i;    "

//@ ensures i == \\old(i) - 1;    "

//@ requires p ==> q;    "

//@ ensures !p || q;    "

//@ requires p <==> q;    "

//@ ensures p == q;    "

//@ requires p <=!=> q;    "

//@ ensures p != q;    "

//@ requires p <== q;    "

//@ ensures p || !q;    "

//@ requires !p || q;    "

//@ ensures p ==> q;    "

//@ requires p == q;    "

//@ ensures p <==> q;    "

//@ requires p != q;    "

//@ ensures p <=!=> q;    "

//@ requires p || !q;    "

//@ ensures p <== q;    "

//@ requires i < 100000;    "

//@ ensures \\result == i;    "

//@ requires i < 100000;    "

//@ ensures \\result >= i;    "

//@ requires true;    "

//@ ensures \\result == i;    "

//@ requires i < 100000;    "

//@ ensures \\result >= i;    "

//@ requires true;    "

//@ ensures \\result >= i;    "

//@ requires true;    "

//@ ensures \\result == i;    "

//@ requires true;    "

//@ ensures \\result >= i;    "

//@ ensures \\result;    "

//@ requires a;    "

//@ ensures \\result;    "

//@ also     "

//@ requires !a;    "

//@ ensures \\result == b;    "

//@ requires a;    "

//@ ensures b;    "

//@ also     "

//@ requires !a;    "

//@ ensures \\result == b;    "

//@ requires a;    "

//@ ensures \\result == b;    "

//@ also     "

//@ requires !a;    "

//@ ensures \\result == false;    "

//@ requires i < 2 && i > -2; ensures \\result;    "

//@ ensures \\result;    "

//@ requires i < 30 && i > -30; ensures \\result;    "

//@ ensures \\result;    "

//@ requires a;    "

//@ ensures \\result;    "

//@ also     "

//@ requires !a;    "

//@ ensures \\result == b;    "

//@ requires a;    "

//@ ensures b;    "

//@ also     "

//@ requires !a;    "

//@ ensures \\result == b;    "

//@ requires a;    "

//@ ensures \\result == b;    "

//@ also     "

//@ requires !a;    "

//@ ensures \\result == false;    "

//@ requires i < 2 && i > -2; ensures \\result;    "

//@ ensures \\result;    "

//@ requires i < 30 && i > -30; ensures \\result;    "

//@ requires true;    "

//@ ensures b ==> (i!=5) ;    "

//@ ghost boolean bb = (\\lbl LBL_BB b);    "

//@ ghost boolean bbp = (\\lblpos LBL_BB2 (i!=5));    "

//@ ghost boolean bbn = (\\lblneg LBL_BB3 (i!=5));    "

//@ ghost int ii = (\\lbl LBL_BBI i);    "

//@ requires true;    "

//@ ensures \\result;    "

//@ requires p && q;    "

//@ ensures \\result;    "

//@ requires true;    "

//@ ensures \\result;    "

//@ requires p && !q;    "

//@ ensures \\result;    "

//@ requires true;    "

//@ ensures \\result;    "

//@ requires p && !q;    "

//@ ensures \\result;    "



//@ assert i == j;    "

//@ requires true;    "

//@ ensures \\result == 1;    "

//@ requires this.f == 1;    "

//@ ensures \\result == 1;    "

//@ requires true;    "

//@ ensures \\result == 1;    "

//@ requires f == 1;    "

//@ ensures \\result == 1;    "

//@ requires f == 1;    "

//@ ensures \\result == 1;    "

//@ requires true;    "

//@ ensures true;    "

/*@nullable*/
//@ requires p.f == 1;    "

//@ ensures \\result == 1;    "

//@ requires i < 100;    "

//@ ensures \\result == i;    "

//@ requires i < 100;    "

//@ ensures \\result == i+1;    "

/*@ assert s == 0; */
/*@ assert s == 1; */
/*@ assert s == 1; */
/*@ assert s == 0; */
/*@ nullable*/
//@ static public invariant CHILD == 3;    "

//@ helper pure     "

//@ assert CHILD == 3 ;    "

//@ static final public invariant CHILD == 3;    "

//@ public normal_behavior ensures true; static_initializer    "

//@ helper pure     "

//@ assert CHILD == 3 ;    "

/*@ final */
//@ helper pure     "

//@ assert CHILD == 3 ;    "

/*@ final */
/*@ final */
//@ public normal_behavior ensures true; static_initializer    "

//@  pure     "

//@ assert H.ZZZZ == 79 ;    "

//@ assert FIELD.length == 5 ;    "

//@ assert FIELD2.length == 6 ;    "

//@ assert H.CHILD.length == 5 ;    "

//@ assert H.CHILD2.length == 6 ;    "

/*@ final */
/*@ final */
/*@ final */
//@ public normal_behavior ensures true; static_initializer    "

//@ ensures true;    "

//@ model pure public int mm(int i);    "

//@ ensures true; pure    "

//@ ensures !\\fresh(\\result); pure    "

//@ model public <TT> TT mt(int i);    "

//@ ensures !\\fresh(\\result); pure    "


//@ ensures true; pure    "

//@ model function public static int mf(int i);    "

//@ ensures true; pure    "

//@ function     "

//@ ensures mm(i) == mm(i);    "

//@ ensures mmr(i) == \\result;    "

//@ ensures mt(i) == mt(i);    "

//@ ensures mtr(i) == \\result;    "


//@ ensures mf(i) == mf(i);    "

//@ ensures mfr(i) == \\result;    "


//@ ensures \\fresh(\\result); pure    "

//@ ensures \\result == null || !\\fresh(\\result); pure    " // FIXME - should this work -= does not prevent the result from being fresh for m2 while not for mm2

//@ ensures \\result == o; pure    "


//@ ensures true; pure    "

//@ ensures \\fresh(\\result);    "  // Line 10

//@ ensures mm(i) == \\result;    " // ERROR - not necessarily the case

//@ ensures \\result == null || !\\fresh(\\result);    "

//@ ensures mm2(i) == \\result;    "


//@ ensures mm3(i) == \\result;    " // Line 20 // ERROR - not necessarily the case

//@ ensures true; pure     "

//@ assert i==1 ==> j == mpure(1);     "

//@ assert i==2 ==> j == mpure(2);     "

//@ assert i==3 ==> j == mpure(1);     " // CAN'T PROVE

//@ assert i==3 ==> j != mpure(1);     " // CAN'T PROVE

//@ ensures true; pure     "

//@ assert i==1 ==> j == mpure(1);     " // CAN'T PROVE

//@ assert i==2 ==> j == mpure(2);     " // CAN'T PROVE

//@ assert i==3 ==> j == mpure(1);     " // CAN'T PROVE

//@ assert i==3 ==> j != mpure(1);     " // CAN'T PROVE

//@ requires true;    "

//@ assert i == 0 ;    "

//@ requires i == 0;    "

//@ assert i == 0 ;    "

//@ assume i == 0 ;    "

//@ assert i == 0 ;    "

//@ requires true;    "

//@ requires true;    "

//@ requires i == 0;    "

//@ assume i == 0 ;    "

//@ requires 10/i < 0;    "

//@ requires i != 0 && 10/i < 0;    "

//@ ensures 10/i < 0 || true;    "

//@ ensures i == 0 || 10/i < 0 || true;    "

//@ assume 10/i < 0 || true;    "

//@ assume i == 0 || 10/i < 0 || true;    "

//@ assert 10/i < 0 ||true;    "

//@ assert i == 0 || 10/i < 0 || true;    "

//@ assert 10%i < 0 ||true;    "

//@ assert i == 0 || 10%i < 0 || true;    "

//@ assert i<10;    "

//@ assert i<10;    "

//@ assert i>=10;    "

//@ assert i<10;    "

//@ assert i>10;    "

//@ assert i<10;    "

//@ assert i<=10;    "

//@ assert i>=10;    "

//@ assert i<10;    "

//@ assert i<=10;    "

//@ assert i>10;    "

//@ requires arg != null;     "

//@ assert i == arg.length;    "

//@ requires arg != null;     "

//@ unreachable;    "

//@ assert !b;    "

//@ assert b;    "

//@ assert !b;    "

//@ assert b;    "

//@ assert b;    "

//@ assert b;    "

//@ assert b;    "

//@ assert b;    "

//@ assert a == 5;    "

//@ assert a == 5;    "

//@ assert g == 5;    "

//@ assert g == 5;    "

//@ assert a == 1;    "

//@ assert g == 1;    "

//@ assert g == 1;    "

//@ assert s = \"xy\";    "

//@ assert s = \"x1\";    "

//@ assert s = \"xtrue\";    "

//@ assert s = \"falsex\";    "

//@ assert s = \"xnull\";    "

//@ requires a.length > 10;    "

//@ ghost boolean b = Integer.class <: Number.class;    "

//@ ghost boolean bb = Number.class <: Boolean.class;    "

//@ assert b && !bb;    "

//@ requires clazz <: Number.class;    "

//@ assignable j;    "

//@ ensures j > 100;    "

//@ also    "

//@ requires clazz <: Boolean.class;    "

//@ assignable j;    "

//@ ensures j > 200;    "

//@ also    "

//@ requires clazz <: String.class;    "

//@ assignable j;    "

//@ ensures j > 200;    "

//@ requires i > 0;    "

//@ assignable j;    "

//@ ensures j > 100;    "

//@ also    "

//@ requires i >= 2;    "

//@ assignable j;    "

//@ ensures j > 200;    "

//@ assert a == 7;    "

//@ assert a == 4;    "

//@ assert a == 4;    "

//@ requires i == 4;    "

//@ ensures \\result == 5;    "

//@ also    "

//@ requires i == 5;    "

//@ ensures \\result == 6;    "

/*@ pure */
//@ assert 0<m(3);    "

//@ old int j = i+2;    "

//@ requires 0 <= j && j < 10;    "

//@ requires a != null && a.length == 10;    "

//@ assignable a[j];    "

//@ ensures a[j] == 42;    "

//@ requires 0 <= i && i < 8;    "

//@ requires a != null && a.length == 10;    "

//@ assignable a[i];    "

//@ requires 0 <= i && i < 8;    "

//@ requires a != null && a.length == 10;    "

//@ assignable a[i+2];    "

//@ old int j = i+1;    "

//@ requires 0 <= j && j < 9;    "

//@ requires a != null && a.length == 10;    "

//@ assignable a[j];    "

//@ old int j = i+off;    "

//@ requires a != null && a.length == 100;    "

//@ requires 0 <= i && i < 50 && 0 <= off && off < 30;    "

//@ assignable a[j];    "

//@ requires 0 <= i && i < 50;    "

//@ requires a != null && a.length == 100;    "

//@ assignable a[i],a[i+10],a[i+25];    "

//@ assert i>0 ;    "

//@ requires i>=0;    "

//@ assert i>0 ;    "

//@ requires i>0;    "

//@ assert i>0 ;    "

//@ requires i>0;    "

//@ assert i>=0 ;    "

//@ requires i>0;    "

//@ also    "

//@ requires i==0;    "

//@ assert i>=0 ;    "

//@ assert i>0 ;    "

//@ requires i>=0;    "

//@ assert i>0 ;    "

//@ requires i>0;    "

//@ assert i>0 ;    "

//@ requires i>0;    "

//@ assert i>=0 ;    "

//@ requires i>0;    "

//@ also    "

//@ requires i==0;    "

//@ assert i>=0 ;    "

//@ requires i>0;    "

//@ ensures false;    "

//@ requires i>0;    "

//@ requires i<0;    "

//@ ensures false;    "

//@ requires i >= 0 && a[i]>0;    "

//@ requires i < a.length && a[i]>0;    "

//@ requires i >= 0 && i < a.length;    "

//@ requires a[i]>0;    "

//@ requires a.length > 10 && i < 5 && a[i]>0 ;    "

//@ requires i >= 0 && i < a.length;    "

//@ requires a[i]>0;    "

//@ signals (Exception) false;    "

//@ ensures false;    "

//@ ensures false;    "

//@ ensures true;    "

//@ signals (Exception e)  false;    "

//@ ensures false;    "

//@ requires i == 0;    "

//@ ensures false;    "

//@ also    "

//@ requires i!= 0;    "

//@ ensures true;    "

//@ requires i == 0;    "

//@ ensures true;    "

//@ also    "

//@ requires i!= 0;    "

//@ ensures false;    "

//@ requires i == 0;    "

//@ signals (Exception e) false;    "

//@ also    "

//@ requires i!= 0;    "

//@ signals (Exception e) true;    "

//@ requires i == 0;    "

//@ signals (Exception e) true;    "

//@ also    "

//@ requires i!= 0;    "

//@ signals (Exception e) false;    "

//@ signals (Exception e) \\exception == null;    "

//@ signals (Exception e) \\exception != null;    "

//@ signals (Exception) \\exception != null;    "

//@ public normal_behavior ensures iii == \\old(iii) + 3;    "

//@ public normal_behavior ensures iii == \\old(iii) + 3;    "

//@ public normal_behavior assignable iii; ensures iii == \\old(iii) + 1;    "

//@ public normal_behavior ensures i == \\old(i) + 3;    "

//@ public normal_behavior ensures i == \\old(i) + 3;    "

//@ public normal_behavior ensures i == \\old(i) + 1;    "

//@ public normal_behavior ensures iii == \\old(iii) + 3;    "

//@ public normal_behavior ensures iii == \\old(iii) + 3;    "

//@ public normal_behavior assignable iii; ensures iii == \\old(iii) + 1;    "

//@ public normal_behavior ensures i == \\old(i) + 3;    "

//@ public normal_behavior ensures i == \\old(i) + 3;    "

//@ public normal_behavior ensures i == \\old(i) + 1;    "

//@ requires i == 0;     "

//@ assert j == 0;    "

//@ assert \\old(i) == 0;    "

//@ assert \\old(j,a) == 0;    "

//@ assert \\old(i,a) == 0;    "

//@ assert \\old(j,b) == 1;    "

//@ assert \\old(i,b) == 1;    "

//@ assert \\pre(i) == 0;    "

//@ ensures \\result == 7;     "

/*@ signals_only \    othing;*/
//@ requires k > 0;      "

//@ ensures \\result == i* 2 + 1;     "

//@ ensures \\result == i* 2 + 1;     "

//@ ensures \\result == 1;     "

//@ ensures \\result == 0;     "

//@ ensures \\result == 0;     "

//@ ensures \\result == 1;     "

//@ ensures \\result == 2;     "

//@ ensures \\result == 2;     "   // Line 50

//@ ensures \\result == 3;     "

//@ assignable kk;    "

//@ ensures \\result == 3; signals (Exception e)  false;     "

//@ assignable kk;    "

//@ ensures \\result == 3; signals (Exception e)  kk == 1;     "

//@ assignable kk;    "

//@ ensures \\result == 3; signals (Exception e)  kk == 1;     "

//@ assignable kk;    "

//@ ensures \\result == 3; signals (Exception e) kk == 4;     "

//@ assignable kk;    "

//@ ensures i==0 ==> \\result == 4; signals (Exception e) false;     "

//@ assignable kk;    "

//@ ensures \\result == 3; signals (Exception e)  false;     "

//@ unreachable;    "

//@ requires i != 0;     "

//@ unreachable;    "

//@ ghost int k = 0;"

//@ set k = 1;    "

//@ assert k == 0;     "

//@ requires i != 0;     "

//@ ghost int k = 0;"

//@ set k = 1;    "

//@ assert k == 1;     "

//@ ghost int k = 0;"

//@ debug k = 1;    "

//@ assert k == 0;     "

//@ requires i != 0;     "

//@ ghost int k = 0;"

//@ debug k = 1;    "

//@ assert k == 1;     "

//@ ghost boolean k = true;"

//@ set k = (k <=!=> k);    "

//@ assert k;     "

//@ ghost boolean k = true;"

//@ set k = (k <==> k);    "

//@ assert k;     "

//@ ghost int k = 0;"

//@ debug k = 1;    "

//@ assert k == 0;     "

//@ requires i != 0;     "

//@ ghost int k = 0;"

//@ debug k = 1;    "

//@ assert k == 1;     "

//@ assert i == 0;    "

//@ havoc i;     "

//@ assert i == 0;    "

//@ ensures a[i]>0;    "

//@ requires i >= 0 && i < a.length;    "

//@ ensures a[i]==true || a[i]==false;    "

//@ signals (Exception) false;    "

//@ requires true;    "

//@ ensures \\result ==4;    "

//@ requires true;    "

//@ ensures \\result == 3;    "

//@ requires x >= 0;    "

//@ ensures \\result < 0;    "

//@ requires x >= 0;    "

//@ ensures \\result <= 0;    "

//@ assignable \\everything;    "

//@ ensures \\result == i;    "

//@ ensures i == \\old(i) + 1;    "

//@ assignable \\everything;    "

//@ ensures \\result == i;    "

//@ ensures i == \\old(i) - 1;    "

//@ assignable \\everything;    "

//@ ensures \\result == \\old(i);    "

//@ ensures i == \\old(i) + 1;    "

//@ assignable \\everything;    "

//@ ensures \\result == i;    "

//@ ensures i == \\old(i) + 1;    "

//@ assignable \\everything;    "

//@ ensures \\result == \\old(i);    "

//@ ensures i == \\old(i) - 1;    "

//@ assignable \\everything;    "

//@ ensures \\result == i;    "

//@ ensures i == \\old(i) - 1;    "

//@ requires p ==> q;    "

//@ ensures !p || q;    "

//@ requires p <==> q;    "

//@ ensures p == q;    "

//@ requires p <=!=> q;    "

//@ ensures p != q;    "

//@ requires p <== q;    "

//@ ensures p || !q;    "

//@ requires !p || q;    "

//@ ensures p ==> q;    "

//@ requires p == q;    "

//@ ensures p <==> q;    "

//@ requires p != q;    "

//@ ensures p <=!=> q;    "

//@ requires p || !q;    "

//@ ensures p <== q;    "

//@ requires i < 100000;    "

//@ ensures \\result == i;    "

//@ requires i < 100000;    "

//@ ensures \\result >= i;    "

//@ requires true;    "

//@ ensures \\result == i;    "

//@ requires i < 100000;    "

//@ ensures \\result >= i;    "

//@ requires true;    "

//@ ensures \\result >= i;    "

//@ requires true;    "

//@ ensures \\result == i;    "

//@ requires true;    "

//@ ensures \\result >= i;    "

//@ ensures \\result;    "

//@ requires a;    "

//@ ensures \\result;    "

//@ also     "

//@ requires !a;    "

//@ ensures \\result == b;    "

//@ requires a;    "

//@ ensures b;    "

//@ also     "

//@ requires !a;    "

//@ ensures \\result == b;    "

//@ requires a;    "

//@ ensures \\result == b;    "

//@ also     "

//@ requires !a;    "

//@ ensures \\result == false;    "

//@ requires i < 2 && i > -2; ensures \\result;    "

//@ ensures \\result;    "

//@ requires i < 30 && i > -30; ensures \\result;    "

//@ ensures \\result;    "

//@ requires a;    "

//@ ensures \\result;    "

//@ also     "

//@ requires !a;    "

//@ ensures \\result == b;    "

//@ requires a;    "

//@ ensures b;    "

//@ also     "

//@ requires !a;    "

//@ ensures \\result == b;    "

//@ requires a;    "

//@ ensures \\result == b;    "

//@ also     "

//@ requires !a;    "

//@ ensures \\result == false;    "

//@ requires i < 2 && i > -2; ensures \\result;    "

//@ ensures \\result;    "

//@ requires i < 30 && i > -30; ensures \\result;    "

//@ requires true;    "

//@ ensures b ==> (i!=5) ;    "

//@ ghost boolean bb = (\\lbl LBL_BB b);    "

//@ ghost boolean bbp = (\\lblpos LBL_BB2 (i!=5));    "

//@ ghost boolean bbn = (\\lblneg LBL_BB3 (i!=5));    "

//@ ghost int ii = (\\lbl LBL_BBI i);    "

//@ requires true;    "

//@ ensures \\result;    "

//@ requires p && q;    "

//@ ensures \\result;    "

//@ requires true;    "

//@ ensures \\result;    "

//@ requires p && !q;    "

//@ ensures \\result;    "

//@ requires true;    "

//@ ensures \\result;    "

//@ requires p && !q;    "

//@ ensures \\result;    "



//@ assert i == j;    "

//@ requires true;    "

//@ ensures \\result == 1;    "

//@ requires this.f == 1;    "

//@ ensures \\result == 1;    "

//@ requires true;    "

//@ ensures \\result == 1;    "

//@ requires f == 1;    "

//@ ensures \\result == 1;    "

//@ requires f == 1;    "

//@ ensures \\result == 1;    "

//@ requires true;    "

//@ ensures true;    "

/*@nullable*/
//@ requires p.f == 1;    "

//@ ensures \\result == 1;    "

//@ requires i < 100;    "

//@ ensures \\result == i;    "

//@ requires i < 100;    "

//@ ensures \\result == i+1;    "

/*@ assert s == 0; */
/*@ assert s == 1; */
/*@ assert s == 1; */
/*@ assert s == 0; */
/*@ nullable*/
//@ static public invariant CHILD == 3;    "

//@ helper pure     "

//@ assert CHILD == 3 ;    "

//@ static final public invariant CHILD == 3;    "

//@ public normal_behavior ensures true; static_initializer    "

//@ helper pure     "

//@ assert CHILD == 3 ;    "

/*@ final */
//@ helper pure     "

//@ assert CHILD == 3 ;    "

/*@ final */
/*@ final */
//@ public normal_behavior ensures true; static_initializer    "

//@  pure     "

//@ assert H.ZZZZ == 79 ;    "

//@ assert FIELD.length == 5 ;    "

//@ assert FIELD2.length == 6 ;    "

//@ assert H.CHILD.length == 5 ;    "

//@ assert H.CHILD2.length == 6 ;    "

/*@ final */
/*@ final */
/*@ final */
//@ public normal_behavior ensures true; static_initializer    "

//@ ensures true;    "

//@ model pure public int mm(int i);    "

//@ ensures true; pure    "

//@ ensures !\\fresh(\\result); pure    "

//@ model public <TT> TT mt(int i);    "

//@ ensures !\\fresh(\\result); pure    "


//@ ensures true; pure    "

//@ model function public static int mf(int i);    "

//@ ensures true; pure    "

//@ function     "

//@ ensures mm(i) == mm(i);    "

//@ ensures mmr(i) == \\result;    "

//@ ensures mt(i) == mt(i);    "

//@ ensures mtr(i) == \\result;    "


//@ ensures mf(i) == mf(i);    "

//@ ensures mfr(i) == \\result;    "


//@ ensures \\fresh(\\result); pure    "

//@ ensures \\result == null || !\\fresh(\\result); pure    " // FIXME - should this work -= does not prevent the result from being fresh for m2 while not for mm2

//@ ensures \\result == o; pure    "


//@ ensures true; pure    "

//@ ensures \\fresh(\\result);    "  // Line 10

//@ ensures mm(i) == \\result;    " // ERROR - not necessarily the case

//@ ensures \\result == null || !\\fresh(\\result);    "

//@ ensures mm2(i) == \\result;    "


//@ ensures mm3(i) == \\result;    " // Line 20 // ERROR - not necessarily the case

//@ ensures true; pure     "

//@ assert i==1 ==> j == mpure(1);     "

//@ assert i==2 ==> j == mpure(2);     "

//@ assert i==3 ==> j == mpure(1);     " // CAN'T PROVE

//@ assert i==3 ==> j != mpure(1);     " // CAN'T PROVE

//@ ensures true; pure     "

//@ assert i==1 ==> j == mpure(1);     " // CAN'T PROVE

//@ assert i==2 ==> j == mpure(2);     " // CAN'T PROVE

//@ assert i==3 ==> j == mpure(1);     " // CAN'T PROVE

//@ assert i==3 ==> j != mpure(1);     " // CAN'T PROVE

//@ requires true;    "

//@ assert i == 0 ;    "

//@ requires i == 0;    "

//@ assert i == 0 ;    "

//@ assume i == 0 ;    "

//@ assert i == 0 ;    "

//@ requires true;    "

//@ requires true;    "

//@ requires i == 0;    "

//@ assume i == 0 ;    "

//@ requires 10/i < 0;    "

//@ requires i != 0 && 10/i < 0;    "

//@ ensures 10/i < 0 || true;    "

//@ ensures i == 0 || 10/i < 0 || true;    "

//@ assume 10/i < 0 || true;    "

//@ assume i == 0 || 10/i < 0 || true;    "

//@ assert 10/i < 0 ||true;    "

//@ assert i == 0 || 10/i < 0 || true;    "

//@ assert 10%i < 0 ||true;    "

//@ assert i == 0 || 10%i < 0 || true;    "

//@ assert i<10;    "

//@ assert i<10;    "

//@ assert i>=10;    "

//@ assert i<10;    "

//@ assert i>10;    "

//@ assert i<10;    "

//@ assert i<=10;    "

//@ assert i>=10;    "

//@ assert i<10;    "

//@ assert i<=10;    "

//@ assert i>10;    "

//@ requires arg != null;     "

//@ assert i == arg.length;    "

//@ requires arg != null;     "

//@ unreachable;    "

//@ assert !b;    "

//@ assert b;    "

//@ assert !b;    "

//@ assert b;    "

//@ assert b;    "

//@ assert b;    "

//@ assert b;    "

//@ assert b;    "

//@ assert a == 5;    "

//@ assert a == 5;    "

//@ assert g == 5;    "

//@ assert g == 5;    "

//@ assert a == 1;    "

//@ assert g == 1;    "

//@ assert g == 1;    "

//@ assert s = \"xy\";    "

//@ assert s = \"x1\";    "

//@ assert s = \"xtrue\";    "

//@ assert s = \"falsex\";    "

//@ assert s = \"xnull\";    "

//@ requires a.length > 10;    "

//@ ghost boolean b = Integer.class <: Number.class;    "

//@ ghost boolean bb = Number.class <: Boolean.class;    "

//@ assert b && !bb;    "

//@ requires clazz <: Number.class;    "

//@ assignable j;    "

//@ ensures j > 100;    "

//@ also    "

//@ requires clazz <: Boolean.class;    "

//@ assignable j;    "

//@ ensures j > 200;    "

//@ also    "

//@ requires clazz <: String.class;    "

//@ assignable j;    "

//@ ensures j > 200;    "

//@ requires i > 0;    "

//@ assignable j;    "

//@ ensures j > 100;    "

//@ also    "

//@ requires i >= 2;    "

//@ assignable j;    "

//@ ensures j > 200;    "

//@ assert a == 7;    "

//@ assert a == 4;    "

//@ assert a == 4;    "

//@ requires i == 4;    "

//@ ensures \\result == 5;    "

//@ also    "

//@ requires i == 5;    "

//@ ensures \\result == 6;    "

/*@ pure */
//@ assert 0<m(3);    "

//@ old int j = i+2;    "

//@ requires 0 <= j && j < 10;    "

//@ requires a != null && a.length == 10;    "

//@ assignable a[j];    "

//@ ensures a[j] == 42;    "

//@ requires 0 <= i && i < 8;    "

//@ requires a != null && a.length == 10;    "

//@ assignable a[i];    "

//@ requires 0 <= i && i < 8;    "

//@ requires a != null && a.length == 10;    "

//@ assignable a[i+2];    "

//@ old int j = i+1;    "

//@ requires 0 <= j && j < 9;    "

//@ requires a != null && a.length == 10;    "

//@ assignable a[j];    "

//@ old int j = i+off;    "

//@ requires a != null && a.length == 100;    "

//@ requires 0 <= i && i < 50 && 0 <= off && off < 30;    "

//@ assignable a[j];    "

//@ requires 0 <= i && i < 50;    "

//@ requires a != null && a.length == 100;    "

//@ assignable a[i],a[i+10],a[i+25];    "

//@ assert i>0 ;    "

//@ requires i>=0;    "

//@ assert i>0 ;    "

//@ requires i>0;    "

//@ assert i>0 ;    "

//@ requires i>0;    "

//@ assert i>=0 ;    "

//@ requires i>0;    "

//@ also    "

//@ requires i==0;    "

//@ assert i>=0 ;    "

//@ assert i>0 ;    "

//@ requires i>=0;    "

//@ assert i>0 ;    "

//@ requires i>0;    "

//@ assert i>0 ;    "

//@ requires i>0;    "

//@ assert i>=0 ;    "

//@ requires i>0;    "

//@ also    "

//@ requires i==0;    "

//@ assert i>=0 ;    "

//@ requires i>0;    "

//@ ensures false;    "

//@ requires i>0;    "

//@ requires i<0;    "

//@ ensures false;    "

//@ requires i >= 0 && a[i]>0;    "

//@ requires i < a.length && a[i]>0;    "

//@ requires i >= 0 && i < a.length;    "

//@ requires a[i]>0;    "

//@ requires a.length > 10 && i < 5 && a[i]>0 ;    "

//@ requires i >= 0 && i < a.length;    "

//@ requires a[i]>0;    "

//@ signals (Exception) false;    "

//@ ensures false;    "

//@ ensures false;    "

//@ ensures true;    "

//@ signals (Exception e)  false;    "

//@ ensures false;    "

//@ requires i == 0;    "

//@ ensures false;    "

//@ also    "

//@ requires i!= 0;    "

//@ ensures true;    "

//@ requires i == 0;    "

//@ ensures true;    "

//@ also    "

//@ requires i!= 0;    "

//@ ensures false;    "

//@ requires i == 0;    "

//@ signals (Exception e) false;    "

//@ also    "

//@ requires i!= 0;    "

//@ signals (Exception e) true;    "

//@ requires i == 0;    "

//@ signals (Exception e) true;    "

//@ also    "

//@ requires i!= 0;    "

//@ signals (Exception e) false;    "

//@ signals (Exception e) \\exception == null;    "

//@ signals (Exception e) \\exception != null;    "

//@ signals (Exception) \\exception != null;    "

//@ public normal_behavior ensures iii == \\old(iii) + 3;    "

//@ public normal_behavior ensures iii == \\old(iii) + 3;    "

//@ public normal_behavior assignable iii; ensures iii == \\old(iii) + 1;    "

//@ public normal_behavior ensures i == \\old(i) + 3;    "

//@ public normal_behavior ensures i == \\old(i) + 3;    "

//@ public normal_behavior ensures i == \\old(i) + 1;    "

//@ public normal_behavior ensures iii == \\old(iii) + 3;    "

//@ public normal_behavior ensures iii == \\old(iii) + 3;    "

//@ public normal_behavior assignable iii; ensures iii == \\old(iii) + 1;    "

//@ public normal_behavior ensures i == \\old(i) + 3;    "

//@ public normal_behavior ensures i == \\old(i) + 3;    "

//@ public normal_behavior ensures i == \\old(i) + 1;    "

//@ requires i == 0;     "

//@ assert j == 0;    "

//@ assert \\old(i) == 0;    "

//@ assert \\old(j,a) == 0;    "

//@ assert \\old(i,a) == 0;    "

//@ assert \\old(j,b) == 1;    "

//@ assert \\old(i,b) == 1;    "

//@ assert \\pre(i) == 0;    "

//@ ensures \\result == 7;     "

/*@ signals_only \    othing;*/
//@ requires k > 0;      "

//@ ensures \\result == i* 2 + 1;     "

//@ ensures \\result == i* 2 + 1;     "

//@ ensures \\result == 1;     "

//@ ensures \\result == 0;     "

//@ ensures \\result == 0;     "

//@ ensures \\result == 1;     "

//@ ensures \\result == 2;     "

//@ ensures \\result == 2;     "   // Line 50

//@ ensures \\result == 3;     "

//@ assignable kk;    "

//@ ensures \\result == 3; signals (Exception e)  false;     "

//@ assignable kk;    "

//@ ensures \\result == 3; signals (Exception e)  kk == 1;     "

//@ assignable kk;    "

//@ ensures \\result == 3; signals (Exception e)  kk == 1;     "

//@ assignable kk;    "

//@ ensures \\result == 3; signals (Exception e) kk == 4;     "

//@ assignable kk;    "

//@ ensures i==0 ==> \\result == 4; signals (Exception e) false;     "

//@ assignable kk;    "

//@ ensures \\result == 3; signals (Exception e)  false;     "

//@ unreachable;    "

//@ requires i != 0;     "

//@ unreachable;    "

//@ ghost int k = 0;"

//@ set k = 1;    "

//@ assert k == 0;     "

//@ requires i != 0;     "

//@ ghost int k = 0;"

//@ set k = 1;    "

//@ assert k == 1;     "

//@ ghost int k = 0;"

//@ debug k = 1;    "

//@ assert k == 0;     "

//@ requires i != 0;     "

//@ ghost int k = 0;"

//@ debug k = 1;    "

//@ assert k == 1;     "

//@ ghost boolean k = true;"

//@ set k = (k <=!=> k);    "

//@ assert k;     "

//@ ghost boolean k = true;"

//@ set k = (k <==> k);    "

//@ assert k;     "

//@ ghost int k = 0;"

//@ debug k = 1;    "

//@ assert k == 0;     "

//@ requires i != 0;     "

//@ ghost int k = 0;"

//@ debug k = 1;    "

//@ assert k == 1;     "

//@ assert i == 0;    "

//@ havoc i;     "

//@ assert i == 0;    "

//@ ensures a[i]>0;    "

//@ requires i >= 0 && i < a.length;    "

//@ ensures a[i]==true || a[i]==false;    "

//@ signals (Exception) false;    "

//@ requires true;    "

//@ ensures \\result ==4;    "

//@ requires true;    "

//@ ensures \\result == 3;    "

//@ requires x >= 0;    "

//@ ensures \\result < 0;    "

//@ requires x >= 0;    "

//@ ensures \\result <= 0;    "

//@ assignable \\everything;    "

//@ ensures \\result == i;    "

//@ ensures i == \\old(i) + 1;    "

//@ assignable \\everything;    "

//@ ensures \\result == i;    "

//@ ensures i == \\old(i) - 1;    "

//@ assignable \\everything;    "

//@ ensures \\result == \\old(i);    "

//@ ensures i == \\old(i) + 1;    "

//@ assignable \\everything;    "

//@ ensures \\result == i;    "

//@ ensures i == \\old(i) + 1;    "

//@ assignable \\everything;    "

//@ ensures \\result == \\old(i);    "

//@ ensures i == \\old(i) - 1;    "

//@ assignable \\everything;    "

//@ ensures \\result == i;    "

//@ ensures i == \\old(i) - 1;    "

//@ requires p ==> q;    "

//@ ensures !p || q;    "

//@ requires p <==> q;    "

//@ ensures p == q;    "

//@ requires p <=!=> q;    "

//@ ensures p != q;    "

//@ requires p <== q;    "

//@ ensures p || !q;    "

//@ requires !p || q;    "

//@ ensures p ==> q;    "

//@ requires p == q;    "

//@ ensures p <==> q;    "

//@ requires p != q;    "

//@ ensures p <=!=> q;    "

//@ requires p || !q;    "

//@ ensures p <== q;    "

//@ requires i < 100000;    "

//@ ensures \\result == i;    "

//@ requires i < 100000;    "

//@ ensures \\result >= i;    "

//@ requires true;    "

//@ ensures \\result == i;    "

//@ requires i < 100000;    "

//@ ensures \\result >= i;    "

//@ requires true;    "

//@ ensures \\result >= i;    "

//@ requires true;    "

//@ ensures \\result == i;    "

//@ requires true;    "

//@ ensures \\result >= i;    "

//@ ensures \\result;    "

//@ requires a;    "

//@ ensures \\result;    "

//@ also     "

//@ requires !a;    "

//@ ensures \\result == b;    "

//@ requires a;    "

//@ ensures b;    "

//@ also     "

//@ requires !a;    "

//@ ensures \\result == b;    "

//@ requires a;    "

//@ ensures \\result == b;    "

//@ also     "

//@ requires !a;    "

//@ ensures \\result == false;    "

//@ requires i < 2 && i > -2; ensures \\result;    "

//@ ensures \\result;    "

//@ requires i < 30 && i > -30; ensures \\result;    "

//@ ensures \\result;    "

//@ requires a;    "

//@ ensures \\result;    "

//@ also     "

//@ requires !a;    "

//@ ensures \\result == b;    "

//@ requires a;    "

//@ ensures b;    "

//@ also     "

//@ requires !a;    "

//@ ensures \\result == b;    "

//@ requires a;    "

//@ ensures \\result == b;    "

//@ also     "

//@ requires !a;    "

//@ ensures \\result == false;    "

//@ requires i < 2 && i > -2; ensures \\result;    "

//@ ensures \\result;    "

//@ requires i < 30 && i > -30; ensures \\result;    "

//@ requires true;    "

//@ ensures b ==> (i!=5) ;    "

//@ ghost boolean bb = (\\lbl LBL_BB b);    "

//@ ghost boolean bbp = (\\lblpos LBL_BB2 (i!=5));    "

//@ ghost boolean bbn = (\\lblneg LBL_BB3 (i!=5));    "

//@ ghost int ii = (\\lbl LBL_BBI i);    "

//@ requires true;    "

//@ ensures \\result;    "

//@ requires p && q;    "

//@ ensures \\result;    "

//@ requires true;    "

//@ ensures \\result;    "

//@ requires p && !q;    "

//@ ensures \\result;    "

//@ requires true;    "

//@ ensures \\result;    "

//@ requires p && !q;    "

//@ ensures \\result;    "



//@ assert i == j;    "

//@ requires true;    "

//@ ensures \\result == 1;    "

//@ requires this.f == 1;    "

//@ ensures \\result == 1;    "

//@ requires true;    "

//@ ensures \\result == 1;    "

//@ requires f == 1;    "

//@ ensures \\result == 1;    "

//@ requires f == 1;    "

//@ ensures \\result == 1;    "

//@ requires true;    "

//@ ensures true;    "

/*@nullable*/
//@ requires p.f == 1;    "

//@ ensures \\result == 1;    "

//@ requires i < 100;    "

//@ ensures \\result == i;    "

//@ requires i < 100;    "

//@ ensures \\result == i+1;    "

/*@ assert s == 0; */
/*@ assert s == 1; */
/*@ assert s == 1; */
/*@ assert s == 0; */
/*@ nullable*/
//@ static public invariant CHILD == 3;    "

//@ helper pure     "

//@ assert CHILD == 3 ;    "

//@ static final public invariant CHILD == 3;    "

//@ public normal_behavior ensures true; static_initializer    "

//@ helper pure     "

//@ assert CHILD == 3 ;    "

/*@ final */
//@ helper pure     "

//@ assert CHILD == 3 ;    "

/*@ final */
/*@ final */
//@ public normal_behavior ensures true; static_initializer    "

//@  pure     "

//@ assert H.ZZZZ == 79 ;    "

//@ assert FIELD.length == 5 ;    "

//@ assert FIELD2.length == 6 ;    "

//@ assert H.CHILD.length == 5 ;    "

//@ assert H.CHILD2.length == 6 ;    "

/*@ final */
/*@ final */
/*@ final */
//@ public normal_behavior ensures true; static_initializer    "

//@ ensures true;    "

//@ model pure public int mm(int i);    "

//@ ensures true; pure    "

//@ ensures !\\fresh(\\result); pure    "

//@ model public <TT> TT mt(int i);    "

//@ ensures !\\fresh(\\result); pure    "


//@ ensures true; pure    "

//@ model function public static int mf(int i);    "

//@ ensures true; pure    "

//@ function     "

//@ ensures mm(i) == mm(i);    "

//@ ensures mmr(i) == \\result;    "

//@ ensures mt(i) == mt(i);    "

//@ ensures mtr(i) == \\result;    "


//@ ensures mf(i) == mf(i);    "

//@ ensures mfr(i) == \\result;    "


//@ ensures \\fresh(\\result); pure    "

//@ ensures \\result == null || !\\fresh(\\result); pure    " // FIXME - should this work -= does not prevent the result from being fresh for m2 while not for mm2

//@ ensures \\result == o; pure    "


//@ ensures true; pure    "

//@ ensures \\fresh(\\result);    "  // Line 10

//@ ensures mm(i) == \\result;    " // ERROR - not necessarily the case

//@ ensures \\result == null || !\\fresh(\\result);    "

//@ ensures mm2(i) == \\result;    "


//@ ensures mm3(i) == \\result;    " // Line 20 // ERROR - not necessarily the case

//@ ensures true; pure     "

//@ assert i==1 ==> j == mpure(1);     "

//@ assert i==2 ==> j == mpure(2);     "

//@ assert i==3 ==> j == mpure(1);     " // CAN'T PROVE

//@ assert i==3 ==> j != mpure(1);     " // CAN'T PROVE

//@ ensures true; pure     "

//@ assert i==1 ==> j == mpure(1);     " // CAN'T PROVE

//@ assert i==2 ==> j == mpure(2);     " // CAN'T PROVE

//@ assert i==3 ==> j == mpure(1);     " // CAN'T PROVE

//@ assert i==3 ==> j != mpure(1);     " // CAN'T PROVE

//@ requires true;    "

//@ assert i == 0 ;    "

//@ requires i == 0;    "

//@ assert i == 0 ;    "

//@ assume i == 0 ;    "

//@ assert i == 0 ;    "

//@ requires true;    "

//@ requires true;    "

//@ requires i == 0;    "

//@ assume i == 0 ;    "

//@ requires 10/i < 0;    "

//@ requires i != 0 && 10/i < 0;    "

//@ ensures 10/i < 0 || true;    "

//@ ensures i == 0 || 10/i < 0 || true;    "

//@ assume 10/i < 0 || true;    "

//@ assume i == 0 || 10/i < 0 || true;    "

//@ assert 10/i < 0 ||true;    "

//@ assert i == 0 || 10/i < 0 || true;    "

//@ assert 10%i < 0 ||true;    "

//@ assert i == 0 || 10%i < 0 || true;    "

//@ assert i<10;    "

//@ assert i<10;    "

//@ assert i>=10;    "

//@ assert i<10;    "

//@ assert i>10;    "

//@ assert i<10;    "

//@ assert i<=10;    "

//@ assert i>=10;    "

//@ assert i<10;    "

//@ assert i<=10;    "

//@ assert i>10;    "

//@ requires arg != null;     "

//@ assert i == arg.length;    "

//@ requires arg != null;     "

//@ unreachable;    "

//@ assert !b;    "

//@ assert b;    "

//@ assert !b;    "

//@ assert b;    "

//@ assert b;    "

//@ assert b;    "

//@ assert b;    "

//@ assert b;    "

//@ assert a == 5;    "

//@ assert a == 5;    "

//@ assert g == 5;    "

//@ assert g == 5;    "

//@ assert a == 1;    "

//@ assert g == 1;    "

//@ assert g == 1;    "

//@ assert s = \"xy\";    "

//@ assert s = \"x1\";    "

//@ assert s = \"xtrue\";    "

//@ assert s = \"falsex\";    "

//@ assert s = \"xnull\";    "

//@ requires a.length > 10;    "

//@ ghost boolean b = Integer.class <: Number.class;    "

//@ ghost boolean bb = Number.class <: Boolean.class;    "

//@ assert b && !bb;    "

//@ requires clazz <: Number.class;    "

//@ assignable j;    "

//@ ensures j > 100;    "

//@ also    "

//@ requires clazz <: Boolean.class;    "

//@ assignable j;    "

//@ ensures j > 200;    "

//@ also    "

//@ requires clazz <: String.class;    "

//@ assignable j;    "

//@ ensures j > 200;    "

//@ requires i > 0;    "

//@ assignable j;    "

//@ ensures j > 100;    "

//@ also    "

//@ requires i >= 2;    "

//@ assignable j;    "

//@ ensures j > 200;    "

//@ assert a == 7;    "

//@ assert a == 4;    "

//@ assert a == 4;    "

//@ requires i == 4;    "

//@ ensures \\result == 5;    "

//@ also    "

//@ requires i == 5;    "

//@ ensures \\result == 6;    "

/*@ pure */
//@ assert 0<m(3);    "

//@ old int j = i+2;    "

//@ requires 0 <= j && j < 10;    "

//@ requires a != null && a.length == 10;    "

//@ assignable a[j];    "

//@ ensures a[j] == 42;    "

//@ requires 0 <= i && i < 8;    "

//@ requires a != null && a.length == 10;    "

//@ assignable a[i];    "

//@ requires 0 <= i && i < 8;    "

//@ requires a != null && a.length == 10;    "

//@ assignable a[i+2];    "

//@ old int j = i+1;    "

//@ requires 0 <= j && j < 9;    "

//@ requires a != null && a.length == 10;    "

//@ assignable a[j];    "

//@ old int j = i+off;    "

//@ requires a != null && a.length == 100;    "

//@ requires 0 <= i && i < 50 && 0 <= off && off < 30;    "

//@ assignable a[j];    "

//@ requires 0 <= i && i < 50;    "

//@ requires a != null && a.length == 100;    "

//@ assignable a[i],a[i+10],a[i+25];    "

//@ assert i>0 ;    "

//@ requires i>=0;    "

//@ assert i>0 ;    "

//@ requires i>0;    "

//@ assert i>0 ;    "

//@ requires i>0;    "

//@ assert i>=0 ;    "

//@ requires i>0;    "

//@ also    "

//@ requires i==0;    "

//@ assert i>=0 ;    "

//@ assert i>0 ;    "

//@ requires i>=0;    "

//@ assert i>0 ;    "

//@ requires i>0;    "

//@ assert i>0 ;    "

//@ requires i>0;    "

//@ assert i>=0 ;    "

//@ requires i>0;    "

//@ also    "

//@ requires i==0;    "

//@ assert i>=0 ;    "

//@ requires i>0;    "

//@ ensures false;    "

//@ requires i>0;    "

//@ requires i<0;    "

//@ ensures false;    "

//@ requires i >= 0 && a[i]>0;    "

//@ requires i < a.length && a[i]>0;    "

//@ requires i >= 0 && i < a.length;    "

//@ requires a[i]>0;    "

//@ requires a.length > 10 && i < 5 && a[i]>0 ;    "

//@ requires i >= 0 && i < a.length;    "

//@ requires a[i]>0;    "

//@ signals (Exception) false;    "

//@ ensures false;    "

//@ ensures false;    "

//@ ensures true;    "

//@ signals (Exception e)  false;    "

//@ ensures false;    "

//@ requires i == 0;    "

//@ ensures false;    "

//@ also    "

//@ requires i!= 0;    "

//@ ensures true;    "

//@ requires i == 0;    "

//@ ensures true;    "

//@ also    "

//@ requires i!= 0;    "

//@ ensures false;    "

//@ requires i == 0;    "

//@ signals (Exception e) false;    "

//@ also    "

//@ requires i!= 0;    "

//@ signals (Exception e) true;    "

//@ requires i == 0;    "

//@ signals (Exception e) true;    "

//@ also    "

//@ requires i!= 0;    "

//@ signals (Exception e) false;    "

//@ signals (Exception e) \\exception == null;    "

//@ signals (Exception e) \\exception != null;    "

//@ signals (Exception) \\exception != null;    "

//@ public normal_behavior ensures iii == \\old(iii) + 3;    "

//@ public normal_behavior ensures iii == \\old(iii) + 3;    "

//@ public normal_behavior assignable iii; ensures iii == \\old(iii) + 1;    "

//@ public normal_behavior ensures i == \\old(i) + 3;    "

//@ public normal_behavior ensures i == \\old(i) + 3;    "

//@ public normal_behavior ensures i == \\old(i) + 1;    "

//@ public normal_behavior ensures iii == \\old(iii) + 3;    "

//@ public normal_behavior ensures iii == \\old(iii) + 3;    "

//@ public normal_behavior assignable iii; ensures iii == \\old(iii) + 1;    "

//@ public normal_behavior ensures i == \\old(i) + 3;    "

//@ public normal_behavior ensures i == \\old(i) + 3;    "

//@ public normal_behavior ensures i == \\old(i) + 1;    "

//@ requires i == 0;     "

//@ assert j == 0;    "

//@ assert \\old(i) == 0;    "

//@ assert \\old(j,a) == 0;    "

//@ assert \\old(i,a) == 0;    "

//@ assert \\old(j,b) == 1;    "

//@ assert \\old(i,b) == 1;    "

//@ assert \\pre(i) == 0;    "

//@ ensures \\result == 7;     "

/*@ signals_only \    othing;*/
//@ requires k > 0;      "

//@ ensures \\result == i* 2 + 1;     "

//@ ensures \\result == i* 2 + 1;     "

//@ ensures \\result == 1;     "

//@ ensures \\result == 0;     "

//@ ensures \\result == 0;     "

//@ ensures \\result == 1;     "

//@ ensures \\result == 2;     "

//@ ensures \\result == 2;     "   // Line 50

//@ ensures \\result == 3;     "

//@ assignable kk;    "

//@ ensures \\result == 3; signals (Exception e)  false;     "

//@ assignable kk;    "

//@ ensures \\result == 3; signals (Exception e)  kk == 1;     "

//@ assignable kk;    "

//@ ensures \\result == 3; signals (Exception e)  kk == 1;     "

//@ assignable kk;    "

//@ ensures \\result == 3; signals (Exception e) kk == 4;     "

//@ assignable kk;    "

//@ ensures i==0 ==> \\result == 4; signals (Exception e) false;     "

//@ assignable kk;    "

//@ ensures \\result == 3; signals (Exception e)  false;     "

//@ unreachable;    "

//@ requires i != 0;     "

//@ unreachable;    "

//@ ghost int k = 0;"

//@ set k = 1;    "

//@ assert k == 0;     "

//@ requires i != 0;     "

//@ ghost int k = 0;"

//@ set k = 1;    "

//@ assert k == 1;     "

//@ ghost int k = 0;"

//@ debug k = 1;    "

//@ assert k == 0;     "

//@ requires i != 0;     "

//@ ghost int k = 0;"

//@ debug k = 1;    "

//@ assert k == 1;     "

//@ ghost boolean k = true;"

//@ set k = (k <=!=> k);    "

//@ assert k;     "

//@ ghost boolean k = true;"

//@ set k = (k <==> k);    "

//@ assert k;     "

//@ ghost int k = 0;"

//@ debug k = 1;    "

//@ assert k == 0;     "

//@ requires i != 0;     "

//@ ghost int k = 0;"

//@ debug k = 1;    "

//@ assert k == 1;     "

//@ assert i == 0;    "

//@ havoc i;     "

//@ assert i == 0;    "

//@ ensures a[i]>0;    "

//@ requires i >= 0 && i < a.length;    "

//@ ensures a[i]==true || a[i]==false;    "

//@ signals (Exception) false;    "

//@ requires true;    "

//@ ensures \\result ==4;    "

//@ requires true;    "

//@ ensures \\result == 3;    "

//@ requires x >= 0;    "

//@ ensures \\result < 0;    "

//@ requires x >= 0;    "

//@ ensures \\result <= 0;    "

//@ assignable \\everything;    "

//@ ensures \\result == i;    "

//@ ensures i == \\old(i) + 1;    "

//@ assignable \\everything;    "

//@ ensures \\result == i;    "

//@ ensures i == \\old(i) - 1;    "

//@ assignable \\everything;    "

//@ ensures \\result == \\old(i);    "

//@ ensures i == \\old(i) + 1;    "

//@ assignable \\everything;    "

//@ ensures \\result == i;    "

//@ ensures i == \\old(i) + 1;    "

//@ assignable \\everything;    "

//@ ensures \\result == \\old(i);    "

//@ ensures i == \\old(i) - 1;    "

//@ assignable \\everything;    "

//@ ensures \\result == i;    "

//@ ensures i == \\old(i) - 1;    "

//@ requires p ==> q;    "

//@ ensures !p || q;    "

//@ requires p <==> q;    "

//@ ensures p == q;    "

//@ requires p <=!=> q;    "

//@ ensures p != q;    "

//@ requires p <== q;    "

//@ ensures p || !q;    "

//@ requires !p || q;    "

//@ ensures p ==> q;    "

//@ requires p == q;    "

//@ ensures p <==> q;    "

//@ requires p != q;    "

//@ ensures p <=!=> q;    "

//@ requires p || !q;    "

//@ ensures p <== q;    "

//@ requires i < 100000;    "

//@ ensures \\result == i;    "

//@ requires i < 100000;    "

//@ ensures \\result >= i;    "

//@ requires true;    "

//@ ensures \\result == i;    "

//@ requires i < 100000;    "

//@ ensures \\result >= i;    "

//@ requires true;    "

//@ ensures \\result >= i;    "

//@ requires true;    "

//@ ensures \\result == i;    "

//@ requires true;    "

//@ ensures \\result >= i;    "

//@ ensures \\result;    "

//@ requires a;    "

//@ ensures \\result;    "

//@ also     "

//@ requires !a;    "

//@ ensures \\result == b;    "

//@ requires a;    "

//@ ensures b;    "

//@ also     "

//@ requires !a;    "

//@ ensures \\result == b;    "

//@ requires a;    "

//@ ensures \\result == b;    "

//@ also     "

//@ requires !a;    "

//@ ensures \\result == false;    "

//@ requires i < 2 && i > -2; ensures \\result;    "

//@ ensures \\result;    "

//@ requires i < 30 && i > -30; ensures \\result;    "

//@ ensures \\result;    "

//@ requires a;    "

//@ ensures \\result;    "

//@ also     "

//@ requires !a;    "

//@ ensures \\result == b;    "

//@ requires a;    "

//@ ensures b;    "

//@ also     "

//@ requires !a;    "

//@ ensures \\result == b;    "

//@ requires a;    "

//@ ensures \\result == b;    "

//@ also     "

//@ requires !a;    "

//@ ensures \\result == false;    "

//@ requires i < 2 && i > -2; ensures \\result;    "

//@ ensures \\result;    "

//@ requires i < 30 && i > -30; ensures \\result;    "

//@ requires true;    "

//@ ensures b ==> (i!=5) ;    "

//@ ghost boolean bb = (\\lbl LBL_BB b);    "

//@ ghost boolean bbp = (\\lblpos LBL_BB2 (i!=5));    "

//@ ghost boolean bbn = (\\lblneg LBL_BB3 (i!=5));    "

//@ ghost int ii = (\\lbl LBL_BBI i);    "

//@ requires true;    "

//@ ensures \\result;    "

//@ requires p && q;    "

//@ ensures \\result;    "

//@ requires true;    "

//@ ensures \\result;    "

//@ requires p && !q;    "

//@ ensures \\result;    "

//@ requires true;    "

//@ ensures \\result;    "

//@ requires p && !q;    "

//@ ensures \\result;    "



//@ assert i == j;    "

//@ requires true;    "

//@ ensures \\result == 1;    "

//@ requires this.f == 1;    "

//@ ensures \\result == 1;    "

//@ requires true;    "

//@ ensures \\result == 1;    "

//@ requires f == 1;    "

//@ ensures \\result == 1;    "

//@ requires f == 1;    "

//@ ensures \\result == 1;    "

//@ requires true;    "

//@ ensures true;    "

/*@nullable*/
//@ requires p.f == 1;    "

//@ ensures \\result == 1;    "

//@ requires i < 100;    "

//@ ensures \\result == i;    "

//@ requires i < 100;    "

//@ ensures \\result == i+1;    "

/*@ assert s == 0; */
/*@ assert s == 1; */
/*@ assert s == 1; */
/*@ assert s == 0; */
/*@ nullable*/
//@ static public invariant CHILD == 3;    "

//@ helper pure     "

//@ assert CHILD == 3 ;    "

//@ static final public invariant CHILD == 3;    "

//@ public normal_behavior ensures true; static_initializer    "

//@ helper pure     "

//@ assert CHILD == 3 ;    "

/*@ final */
//@ helper pure     "

//@ assert CHILD == 3 ;    "

/*@ final */
/*@ final */
//@ public normal_behavior ensures true; static_initializer    "

//@  pure     "

//@ assert H.ZZZZ == 79 ;    "

//@ assert FIELD.length == 5 ;    "

//@ assert FIELD2.length == 6 ;    "

//@ assert H.CHILD.length == 5 ;    "

//@ assert H.CHILD2.length == 6 ;    "

/*@ final */
/*@ final */
/*@ final */
//@ public normal_behavior ensures true; static_initializer    "

//@ ensures true;    "

//@ model pure public int mm(int i);    "

//@ ensures true; pure    "

//@ ensures !\\fresh(\\result); pure    "

//@ model public <TT> TT mt(int i);    "

//@ ensures !\\fresh(\\result); pure    "


//@ ensures true; pure    "

//@ model function public static int mf(int i);    "

//@ ensures true; pure    "

//@ function     "

//@ ensures mm(i) == mm(i);    "

//@ ensures mmr(i) == \\result;    "

//@ ensures mt(i) == mt(i);    "

//@ ensures mtr(i) == \\result;    "


//@ ensures mf(i) == mf(i);    "

//@ ensures mfr(i) == \\result;    "


//@ ensures \\fresh(\\result); pure    "

//@ ensures \\result == null || !\\fresh(\\result); pure    " // FIXME - should this work -= does not prevent the result from being fresh for m2 while not for mm2

//@ ensures \\result == o; pure    "


//@ ensures true; pure    "

//@ ensures \\fresh(\\result);    "  // Line 10

//@ ensures mm(i) == \\result;    " // ERROR - not necessarily the case

//@ ensures \\result == null || !\\fresh(\\result);    "

//@ ensures mm2(i) == \\result;    "


//@ ensures mm3(i) == \\result;    " // Line 20 // ERROR - not necessarily the case

//@ ensures true; pure     "

//@ assert i==1 ==> j == mpure(1);     "

//@ assert i==2 ==> j == mpure(2);     "

//@ assert i==3 ==> j == mpure(1);     " // CAN'T PROVE

//@ assert i==3 ==> j != mpure(1);     " // CAN'T PROVE

//@ ensures true; pure     "

//@ assert i==1 ==> j == mpure(1);     " // CAN'T PROVE

//@ assert i==2 ==> j == mpure(2);     " // CAN'T PROVE

//@ assert i==3 ==> j == mpure(1);     " // CAN'T PROVE

//@ assert i==3 ==> j != mpure(1);     " // CAN'T PROVE

//@ requires true;    "

//@ assert i == 0 ;    "

//@ requires i == 0;    "

//@ assert i == 0 ;    "

//@ assume i == 0 ;    "

//@ assert i == 0 ;    "

//@ requires true;    "

//@ requires true;    "

//@ requires i == 0;    "

//@ assume i == 0 ;    "

//@ requires 10/i < 0;    "

//@ requires i != 0 && 10/i < 0;    "

//@ ensures 10/i < 0 || true;    "

//@ ensures i == 0 || 10/i < 0 || true;    "

//@ assume 10/i < 0 || true;    "

//@ assume i == 0 || 10/i < 0 || true;    "

//@ assert 10/i < 0 ||true;    "

//@ assert i == 0 || 10/i < 0 || true;    "

//@ assert 10%i < 0 ||true;    "

//@ assert i == 0 || 10%i < 0 || true;    "

//@ assert i<10;    "

//@ assert i<10;    "

//@ assert i>=10;    "

//@ assert i<10;    "

//@ assert i>10;    "

//@ assert i<10;    "

//@ assert i<=10;    "

//@ assert i>=10;    "

//@ assert i<10;    "

//@ assert i<=10;    "

//@ assert i>10;    "

//@ requires arg != null;     "

//@ assert i == arg.length;    "

//@ requires arg != null;     "

//@ unreachable;    "

//@ assert !b;    "

//@ assert b;    "

//@ assert !b;    "

//@ assert b;    "

//@ assert b;    "

//@ assert b;    "

//@ assert b;    "

//@ assert b;    "

//@ assert a == 5;    "

//@ assert a == 5;    "

//@ assert g == 5;    "

//@ assert g == 5;    "

//@ assert a == 1;    "

//@ assert g == 1;    "

//@ assert g == 1;    "

//@ assert s = \"xy\";    "

//@ assert s = \"x1\";    "

//@ assert s = \"xtrue\";    "

//@ assert s = \"falsex\";    "

//@ assert s = \"xnull\";    "

//@ requires a.length > 10;    "

//@ ghost boolean b = Integer.class <: Number.class;    "

//@ ghost boolean bb = Number.class <: Boolean.class;    "

//@ assert b && !bb;    "

//@ requires clazz <: Number.class;    "

//@ assignable j;    "

//@ ensures j > 100;    "

//@ also    "

//@ requires clazz <: Boolean.class;    "

//@ assignable j;    "

//@ ensures j > 200;    "

//@ also    "

//@ requires clazz <: String.class;    "

//@ assignable j;    "

//@ ensures j > 200;    "

//@ requires i > 0;    "

//@ assignable j;    "

//@ ensures j > 100;    "

//@ also    "

//@ requires i >= 2;    "

//@ assignable j;    "

//@ ensures j > 200;    "

//@ assert a == 7;    "

//@ assert a == 4;    "

//@ assert a == 4;    "

//@ requires i == 4;    "

//@ ensures \\result == 5;    "

//@ also    "

//@ requires i == 5;    "

//@ ensures \\result == 6;    "

/*@ pure */
//@ assert 0<m(3);    "

//@ old int j = i+2;    "

//@ requires 0 <= j && j < 10;    "

//@ requires a != null && a.length == 10;    "

//@ assignable a[j];    "

//@ ensures a[j] == 42;    "

//@ requires 0 <= i && i < 8;    "

//@ requires a != null && a.length == 10;    "

//@ assignable a[i];    "

//@ requires 0 <= i && i < 8;    "

//@ requires a != null && a.length == 10;    "

//@ assignable a[i+2];    "

//@ old int j = i+1;    "

//@ requires 0 <= j && j < 9;    "

//@ requires a != null && a.length == 10;    "

//@ assignable a[j];    "

//@ old int j = i+off;    "

//@ requires a != null && a.length == 100;    "

//@ requires 0 <= i && i < 50 && 0 <= off && off < 30;    "

//@ assignable a[j];    "

//@ requires 0 <= i && i < 50;    "

//@ requires a != null && a.length == 100;    "

//@ assignable a[i],a[i+10],a[i+25];    "

//@   requires b;    "

//@   requires b;    "

//@ nowarn Precondition;     "

//@   ensures false;    "

//@   ensures false;    "

//@ nowarn Postcondition;     "

//@   ensures false;    "

//@   signals (Exception) false;    "

//@ public static invariant i>=0;    "

//@ assignable i;    "

//@ public initially i>=0;    "

//@ assignable i;    "

//@ public initially i>=0;    "

//@ assignable i;    "

//@ nowarn Initially;    "

//@ public initially i>=0;  nowarn Initially;    "

//@ assignable i;    "

//@ public constraint i>=\\old(i);    "

//@ public constraint i>=\\old(i);    "

//@ nowarn Constraint;    "

//@ public constraint i>=\\old(i);  //@ nowarn Constraint;    "

//@   requires b;    "

//@   requires b;    "

//@ nowarn Precondition;     "

//@   ensures false;    "

//@   ensures false;    "

//@ nowarn Postcondition;     "

//@   ensures false;    "

//@   signals (Exception) false;    "

//@ public static invariant i>=0;    "

//@ assignable i;    "

//@ public initially i>=0;    "

//@ assignable i;    "

//@ public initially i>=0;    "

//@ assignable i;    "

//@ nowarn Initially;    "

//@ public initially i>=0;  nowarn Initially;    "

//@ assignable i;    "

//@ public constraint i>=\\old(i);    "

//@ public constraint i>=\\old(i);    "

//@ nowarn Constraint;    "

//@ public constraint i>=\\old(i);  //@ nowarn Constraint;    "

//@   requires b;    "

//@   requires b;    "

//@ nowarn Precondition;     "

//@   ensures false;    "

//@   ensures false;    "

//@ nowarn Postcondition;     "

//@   ensures false;    "

//@   signals (Exception) false;    "

//@ public static invariant i>=0;    "

//@ assignable i;    "

//@ public initially i>=0;    "

//@ assignable i;    "

//@ public initially i>=0;    "

//@ assignable i;    "

//@ nowarn Initially;    "

//@ public initially i>=0;  nowarn Initially;    "

//@ assignable i;    "

//@ public constraint i>=\\old(i);    "

//@ public constraint i>=\\old(i);    "

//@ nowarn Constraint;    "

//@ public constraint i>=\\old(i);  //@ nowarn Constraint;    "

//@   requires b;    "

//@   requires b;    "

//@ nowarn Precondition;     "

//@   ensures false;    "

//@   ensures false;    "

//@ nowarn Postcondition;     "

//@   ensures false;    "

//@   signals (Exception) false;    "

//@ public static invariant i>=0;    "

//@ assignable i;    "

//@ public initially i>=0;    "

//@ assignable i;    "

//@ public initially i>=0;    "

//@ assignable i;    "

//@ nowarn Initially;    "

//@ public initially i>=0;  nowarn Initially;    "

//@ assignable i;    "

//@ public constraint i>=\\old(i);    "

//@ public constraint i>=\\old(i);    "

//@ nowarn Constraint;    "

//@ public constraint i>=\\old(i);  //@ nowarn Constraint;    "

//@   requires b;    "

//@   requires b;    "

//@ nowarn Precondition;     "

//@   ensures false;    "

//@   ensures false;    "

//@ nowarn Postcondition;     "

//@   ensures false;    "

//@   signals (Exception) false;    "

//@ public static invariant i>=0;    "

//@ assignable i;    "

//@ public initially i>=0;    "

//@ assignable i;    "

//@ public initially i>=0;    "

//@ assignable i;    "

//@ nowarn Initially;    "

//@ public initially i>=0;  nowarn Initially;    "

//@ assignable i;    "

//@ public constraint i>=\\old(i);    "

//@ public constraint i>=\\old(i);    "

//@ nowarn Constraint;    "

//@ public constraint i>=\\old(i);  //@ nowarn Constraint;    "

//@ requires bb;    "

//@ ensures true;    "

/*@ assume b; */
/*@assert false;*/
//@ requires bb;    "

//@ ensures true;    "

/*@ assume b; */
/*@assert !bb;*/
//@ requires bb;    "

//@ ensures true;    "

/*@ assume bb; */
/*@assert b;*/
//@ requires bb;    "

//@ ensures true;    "

/*@ assume b; */
/*@assert false;*/
//@ requires bb;    "

//@ ensures true;    "

/*@ assume b; */
/*@assert !bb;*/
//@ requires bb;    "

//@ ensures true;    "

/*@ assume bb; */
/*@assert b;*/
//@ requires bb;    "

//@ ensures true;    "

/*@ assume b; */
/*@assert false;*/
//@ requires bb;    "

//@ ensures true;    "

/*@ assume b; */
/*@assert !bb;*/
//@ requires bb;    "

//@ ensures true;    "

/*@ assume bb; */
/*@assert b;*/
//@ requires bb;    "

//@ ensures true;    "

/*@ assume b; */
/*@assert false;*/
//@ requires bb;    "

//@ ensures true;    "

//@ requires true;    "

//@ ensures true;    "

//@ requires bb;    "

//@ ensures true;    "

//@ requires bb;    "

//@ ensures true;    "

//@ skipesc     "

//@ requires bb;    "

//@ ensures true;    "

//@ requires true;    "

//@ ensures true;    "

//@ requires bb;    "

//@ ensures true;    "

//@ requires bb;    "

//@ ensures true;    "

//@ skipesc     "

//@ requires bb;    "

//@ ensures true;    "

//@ requires true;    "

//@ ensures true;    "

//@ requires bb;    "

//@ ensures true;    "

//@ requires bb;    "

//@ ensures true;    "

//@ skipesc     "

//@ requires bb;    "

//@ ensures true;    "

/*@ assume b; */
/*@assert false;*/
//@ requires bb;    "

//@ ensures true;    "

/*@ assume b; */
/*@assert !bb;*/
//@ requires bb;    "

//@ ensures true;    "

/*@ assume bb; */
/*@assert b;*/
//@ requires bb;    "

//@ ensures true;    "

/*@ assume b; */
/*@assert false;*/
//@ requires bb;    "

//@ ensures true;    "

/*@ assume b; */
/*@assert !bb;*/
//@ requires bb;    "

//@ ensures true;    "

/*@ assume bb; */
/*@assert b;*/
//@ requires bb;    "

//@ ensures true;    "

/*@ assume b; */
/*@assert false;*/
//@ requires bb;    "

//@ ensures true;    "

/*@ assume b; */
/*@assert !bb;*/
//@ requires bb;    "

//@ ensures true;    "

/*@ assume bb; */
/*@assert b;*/
//@ requires bb;    "

//@ ensures true;    "

/*@ assume b; */
/*@assert false;*/
//@ requires bb;    "

//@ ensures true;    "

//@ requires true;    "

//@ ensures true;    "

//@ requires bb;    "

//@ ensures true;    "

//@ requires bb;    "

//@ ensures true;    "

//@ skipesc     "

//@ requires bb;    "

//@ ensures true;    "

//@ requires true;    "

//@ ensures true;    "

//@ requires bb;    "

//@ ensures true;    "

//@ requires bb;    "

//@ ensures true;    "

//@ skipesc     "

//@ requires bb;    "

//@ ensures true;    "

//@ requires true;    "

//@ ensures true;    "

//@ requires bb;    "

//@ ensures true;    "

//@ requires bb;    "

//@ ensures true;    "

//@ skipesc     "

//@ requires bb;    "

//@ ensures true;    "

/*@ assume b; */
/*@assert false;*/
//@ requires bb;    "

//@ ensures true;    "

/*@ assume b; */
/*@assert !bb;*/
//@ requires bb;    "

//@ ensures true;    "

/*@ assume bb; */
/*@assert b;*/
//@ requires bb;    "

//@ ensures true;    "

/*@ assume b; */
/*@assert false;*/
//@ requires bb;    "

//@ ensures true;    "

/*@ assume b; */
/*@assert !bb;*/
//@ requires bb;    "

//@ ensures true;    "

/*@ assume bb; */
/*@assert b;*/
//@ requires bb;    "

//@ ensures true;    "

/*@ assume b; */
/*@assert false;*/
//@ requires bb;    "

//@ ensures true;    "

/*@ assume b; */
/*@assert !bb;*/
//@ requires bb;    "

//@ ensures true;    "

/*@ assume bb; */
/*@assert b;*/
//@ requires bb;    "

//@ ensures true;    "

/*@ assume b; */
/*@assert false;*/
//@ requires bb;    "

//@ ensures true;    "

//@ requires true;    "

//@ ensures true;    "

//@ requires bb;    "

//@ ensures true;    "

//@ requires bb;    "

//@ ensures true;    "

//@ skipesc     "

//@ requires bb;    "

//@ ensures true;    "

//@ requires true;    "

//@ ensures true;    "

//@ requires bb;    "

//@ ensures true;    "

//@ requires bb;    "

//@ ensures true;    "

//@ skipesc     "

//@ requires bb;    "

//@ ensures true;    "

//@ requires true;    "

//@ ensures true;    "

//@ requires bb;    "

//@ ensures true;    "

//@ requires bb;    "

//@ ensures true;    "

//@ skipesc     "

//@ requires bb;    "

//@ ensures true;    "

/*@ assume b; */
/*@assert false;*/
//@ requires bb;    "

//@ ensures true;    "

/*@ assume b; */
/*@assert !bb;*/
//@ requires bb;    "

//@ ensures true;    "

/*@ assume bb; */
/*@assert b;*/
//@ requires bb;    "

//@ ensures true;    "

/*@ assume b; */
/*@assert false;*/
//@ requires bb;    "

//@ ensures true;    "

/*@ assume b; */
/*@assert !bb;*/
//@ requires bb;    "

//@ ensures true;    "

/*@ assume bb; */
/*@assert b;*/
//@ requires bb;    "

//@ ensures true;    "

/*@ assume b; */
/*@assert false;*/
//@ requires bb;    "

//@ ensures true;    "

/*@ assume b; */
/*@assert !bb;*/
//@ requires bb;    "

//@ ensures true;    "

/*@ assume bb; */
/*@assert b;*/
//@ requires bb;    "

//@ ensures true;    "

/*@ assume b; */
/*@assert false;*/
//@ requires bb;    "

//@ ensures true;    "

//@ requires true;    "

//@ ensures true;    "

//@ requires bb;    "

//@ ensures true;    "

//@ requires bb;    "

//@ ensures true;    "

//@ skipesc     "

//@ requires bb;    "

//@ ensures true;    "

//@ requires true;    "

//@ ensures true;    "

//@ requires bb;    "

//@ ensures true;    "

//@ requires bb;    "

//@ ensures true;    "

//@ skipesc     "

//@ requires bb;    "

//@ ensures true;    "

//@ requires true;    "

//@ ensures true;    "

//@ requires bb;    "

//@ ensures true;    "

//@ requires bb;    "

//@ ensures true;    "

//@ skipesc     "

//@ requires bb;    "

//@ ensures true;    "

/*@ assume b; */
/*@assert false;*/
//@ requires bb;    "

//@ ensures true;    "

/*@ assume b; */
/*@assert !bb;*/
//@ requires bb;    "

//@ ensures true;    "

/*@ assume bb; */
/*@assert b;*/
//@ requires bb;    "

//@ ensures true;    "

/*@ assume b; */
/*@assert false;*/
//@ requires bb;    "

//@ ensures true;    "

/*@ assume b; */
/*@assert !bb;*/
//@ requires bb;    "

//@ ensures true;    "

/*@ assume bb; */
/*@assert b;*/
//@ requires bb;    "

//@ ensures true;    "

/*@ assume b; */
/*@assert false;*/
//@ requires bb;    "

//@ ensures true;    "

/*@ assume b; */
/*@assert !bb;*/
//@ requires bb;    "

//@ ensures true;    "

/*@ assume bb; */
/*@assert b;*/
//@ requires bb;    "

//@ ensures true;    "

/*@ assume b; */
/*@assert false;*/
//@ requires bb;    "

//@ ensures true;    "

//@ requires true;    "

//@ ensures true;    "

//@ requires bb;    "

//@ ensures true;    "

//@ requires bb;    "

//@ ensures true;    "

//@ skipesc     "

//@ requires bb;    "

//@ ensures true;    "

//@ requires true;    "

//@ ensures true;    "

//@ requires bb;    "

//@ ensures true;    "

//@ requires bb;    "

//@ ensures true;    "

//@ skipesc     "

//@ requires bb;    "

//@ ensures true;    "

//@ requires true;    "

//@ ensures true;    "

//@ requires bb;    "

//@ ensures true;    "

//@ requires bb;    "

//@ ensures true;    "

//@ skipesc     "

/*@ code_java_math*/
//@ readable z if bb;     "

//@ readable x if b;     "

//@ readable y if b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

/*@ code_java_math*/
//@ writable z if bb;     "

//@ writable x if b;     "

//@ writable y if b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

/*@ code_java_math*/
//@ writable z if bb;     "

//@ writable x if b;     "

//@ writable y if b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

/*@ code_java_math*/
//@ readable z if bb;     "

//@ readable x if b;     "

//@ readable y if b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

/*@ code_java_math*/
//@ readable z if bb;     "

//@ readable x if b;     "

//@ readable y if b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

/*@ code_java_math*/
//@ readable z1 if b1;     "

//@ readable x1 if b1 || b2 || b3 || b4;     "

//@ readable y1 if bs1 || bs2 || bs3 || bs4;     "

//@ readable x2 if b1 || b2 || b3 || b4;     "

//@ readable y2 if bs1 || bs2 || bs3 || bs4;     "

//@ readable x3 if b1 || b2 || b3 || b4;     "

//@ readable y3 if bs1 || bs2 || bs3 || bs4;     "

//@ readable x4 if b1 || b2 || b3 || b4;     "

//@ readable y4 if bs1 || bs2 || bs3 || bs4;     "

/*@ code_java_math*/
//@ readable z if bb;     "

//@ readable x if b;     "

//@ readable y if b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

/*@ code_java_math*/
//@ writable z if bb;     "

//@ writable x if b;     "

//@ writable y if b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

/*@ code_java_math*/
//@ writable z if bb;     "

//@ writable x if b;     "

//@ writable y if b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

/*@ code_java_math*/
//@ readable z if bb;     "

//@ readable x if b;     "

//@ readable y if b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

/*@ code_java_math*/
//@ readable z if bb;     "

//@ readable x if b;     "

//@ readable y if b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

/*@ code_java_math*/
//@ readable z1 if b1;     "

//@ readable x1 if b1 || b2 || b3 || b4;     "

//@ readable y1 if bs1 || bs2 || bs3 || bs4;     "

//@ readable x2 if b1 || b2 || b3 || b4;     "

//@ readable y2 if bs1 || bs2 || bs3 || bs4;     "

//@ readable x3 if b1 || b2 || b3 || b4;     "

//@ readable y3 if bs1 || bs2 || bs3 || bs4;     "

//@ readable x4 if b1 || b2 || b3 || b4;     "

//@ readable y4 if bs1 || bs2 || bs3 || bs4;     "

/*@ code_java_math*/
//@ readable z if bb;     "

//@ readable x if b;     "

//@ readable y if b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

/*@ code_java_math*/
//@ writable z if bb;     "

//@ writable x if b;     "

//@ writable y if b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

/*@ code_java_math*/
//@ writable z if bb;     "

//@ writable x if b;     "

//@ writable y if b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

/*@ code_java_math*/
//@ readable z if bb;     "

//@ readable x if b;     "

//@ readable y if b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

/*@ code_java_math*/
//@ readable z if bb;     "

//@ readable x if b;     "

//@ readable y if b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

/*@ code_java_math*/
//@ readable z1 if b1;     "

//@ readable x1 if b1 || b2 || b3 || b4;     "

//@ readable y1 if bs1 || bs2 || bs3 || bs4;     "

//@ readable x2 if b1 || b2 || b3 || b4;     "

//@ readable y2 if bs1 || bs2 || bs3 || bs4;     "

//@ readable x3 if b1 || b2 || b3 || b4;     "

//@ readable y3 if bs1 || bs2 || bs3 || bs4;     "

//@ readable x4 if b1 || b2 || b3 || b4;     "

//@ readable y4 if bs1 || bs2 || bs3 || bs4;     "

/*@ code_java_math*/
//@ readable z if bb;     "

//@ readable x if b;     "

//@ readable y if b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

/*@ code_java_math*/
//@ writable z if bb;     "

//@ writable x if b;     "

//@ writable y if b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

/*@ code_java_math*/
//@ writable z if bb;     "

//@ writable x if b;     "

//@ writable y if b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

/*@ code_java_math*/
//@ readable z if bb;     "

//@ readable x if b;     "

//@ readable y if b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

/*@ code_java_math*/
//@ readable z if bb;     "

//@ readable x if b;     "

//@ readable y if b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

/*@ code_java_math*/
//@ readable z1 if b1;     "

//@ readable x1 if b1 || b2 || b3 || b4;     "

//@ readable y1 if bs1 || bs2 || bs3 || bs4;     "

//@ readable x2 if b1 || b2 || b3 || b4;     "

//@ readable y2 if bs1 || bs2 || bs3 || bs4;     "

//@ readable x3 if b1 || b2 || b3 || b4;     "

//@ readable y3 if bs1 || bs2 || bs3 || bs4;     "

//@ readable x4 if b1 || b2 || b3 || b4;     "

//@ readable y4 if bs1 || bs2 || bs3 || bs4;     "

/*@ code_java_math*/
//@ readable z if bb;     "

//@ readable x if b;     "

//@ readable y if b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

/*@ code_java_math*/
//@ writable z if bb;     "

//@ writable x if b;     "

//@ writable y if b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

/*@ code_java_math*/
//@ writable z if bb;     "

//@ writable x if b;     "

//@ writable y if b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

/*@ code_java_math*/
//@ readable z if bb;     "

//@ readable x if b;     "

//@ readable y if b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

/*@ code_java_math*/
//@ readable z if bb;     "

//@ readable x if b;     "

//@ readable y if b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

/*@ code_java_math*/
//@ readable z1 if b1;     "

//@ readable x1 if b1 || b2 || b3 || b4;     "

//@ readable y1 if bs1 || bs2 || bs3 || bs4;     "

//@ readable x2 if b1 || b2 || b3 || b4;     "

//@ readable y2 if bs1 || bs2 || bs3 || bs4;     "

//@ readable x3 if b1 || b2 || b3 || b4;     "

//@ readable y3 if bs1 || bs2 || bs3 || bs4;     "

//@ readable x4 if b1 || b2 || b3 || b4;     "

//@ readable y4 if bs1 || bs2 || bs3 || bs4;     "

//@ assert s != null;    "

//@ assert s == ss;    "


//@ assert s.equals(ss);    "

//@ assert !s.equals(sss);    "

//@ assert !sss.equals(ss);    " // Null error


//@ assert s.equals(ss);    "    // This would be true but we are not using any specs.


//@ assert b;    "     // This would be true but we are not using any specs.


//@ assert b;    "     // This would be true but we are not using any specs.


//@ assert  !sss.equals(ss);    " // Null error

//@ assert b;    "

//@ assert (s + ss) != null;    "

//@ assert b;    "  // No specs, so not provable

//@ assert (s+ss).equals(s+ss);    "

//@ assert b;    " // FIXME Should not hold necessarily

//@ assert (s + ss) == (s + ss);     " // FIXME Should not hold necessarily

//@ assert sss != null;    "

//@ reachable true;    "

//@ assert (s + ss) != null;    "

//@ assert sss.equals(s4);    "

//@ assert (s+ss).equals(s+ss);    "

//@ assert b;    " // FIXME Should not hold necessarily

//@ assert (s + ss) == (s + ss);    " // FIXME Should not hold necessarily

//@ requires s.length() > 0;     "

//@ assert s.charAt(0) == s.charAt(0);    "

//@ assert s.charAt(0) == s.charAt(0);    "

//@ requires s.length() > 0;     "

//@ assert s.charAt(0) == ss.charAt(0);    "

//@ requires s.length() > 0;    "

//@ assert s.charAt(0) == ss.charAt(0);    "  // should not hold since s != ss

//@ requires s.length() > 0 && ss.length() > 0;    "

//@ assert s.charAt(0) == ss.charAt(0);    "  // should not hold since s != ss

//@ assert b;    "

//@ assert s.length() >= 0;    "

//@ assert b;    "

//@ assert s.length() == ss.length();     "

//@ assert b;    " // should not hold

//@ assert s.length() == ss.length();     " // ERROR - not necessarily same length

//@ assert s != null;    "

//@ assert s == ss;    "


//@ assert s.equals(ss);    "

//@ assert !s.equals(sss);    "

//@ assert !sss.equals(ss);    " // Null error


//@ assert s.equals(ss);    "    // This would be true but we are not using any specs.


//@ assert b;    "     // This would be true but we are not using any specs.


//@ assert b;    "     // This would be true but we are not using any specs.


//@ assert  !sss.equals(ss);    " // Null error

//@ assert b;    "

//@ assert (s + ss) != null;    "

//@ assert b;    "  // No specs, so not provable

//@ assert (s+ss).equals(s+ss);    "

//@ assert b;    " // FIXME Should not hold necessarily

//@ assert (s + ss) == (s + ss);     " // FIXME Should not hold necessarily

//@ assert sss != null;    "

//@ reachable true;    "

//@ assert (s + ss) != null;    "

//@ assert sss.equals(s4);    "

//@ assert (s+ss).equals(s+ss);    "

//@ assert b;    " // FIXME Should not hold necessarily

//@ assert (s + ss) == (s + ss);    " // FIXME Should not hold necessarily

//@ requires s.length() > 0;     "

//@ assert s.charAt(0) == s.charAt(0);    "

//@ assert s.charAt(0) == s.charAt(0);    "

//@ requires s.length() > 0;     "

//@ assert s.charAt(0) == ss.charAt(0);    "

//@ requires s.length() > 0;    "

//@ assert s.charAt(0) == ss.charAt(0);    "  // should not hold since s != ss

//@ requires s.length() > 0 && ss.length() > 0;    "

//@ assert s.charAt(0) == ss.charAt(0);    "  // should not hold since s != ss

//@ assert b;    "

//@ assert s.length() >= 0;    "

//@ assert b;    "

//@ assert s.length() == ss.length();     "

//@ assert b;    " // should not hold

//@ assert s.length() == ss.length();     " // ERROR - not necessarily same length

//@ assert s != null;    "

//@ assert s == ss;    "


//@ assert s.equals(ss);    "

//@ assert !s.equals(sss);    "

//@ assert !sss.equals(ss);    " // Null error


//@ assert s.equals(ss);    "    // This would be true but we are not using any specs.


//@ assert b;    "     // This would be true but we are not using any specs.


//@ assert b;    "     // This would be true but we are not using any specs.


//@ assert  !sss.equals(ss);    " // Null error

//@ assert b;    "

//@ assert (s + ss) != null;    "

//@ assert b;    "  // No specs, so not provable

//@ assert (s+ss).equals(s+ss);    "

//@ assert b;    " // FIXME Should not hold necessarily

//@ assert (s + ss) == (s + ss);     " // FIXME Should not hold necessarily

//@ assert sss != null;    "

//@ reachable true;    "

//@ assert (s + ss) != null;    "

//@ assert sss.equals(s4);    "

//@ assert (s+ss).equals(s+ss);    "

//@ assert b;    " // FIXME Should not hold necessarily

//@ assert (s + ss) == (s + ss);    " // FIXME Should not hold necessarily

//@ requires s.length() > 0;     "

//@ assert s.charAt(0) == s.charAt(0);    "

//@ assert s.charAt(0) == s.charAt(0);    "

//@ requires s.length() > 0;     "

//@ assert s.charAt(0) == ss.charAt(0);    "

//@ requires s.length() > 0;    "

//@ assert s.charAt(0) == ss.charAt(0);    "  // should not hold since s != ss

//@ requires s.length() > 0 && ss.length() > 0;    "

//@ assert s.charAt(0) == ss.charAt(0);    "  // should not hold since s != ss

//@ assert b;    "

//@ assert s.length() >= 0;    "

//@ assert b;    "

//@ assert s.length() == ss.length();     "

//@ assert b;    " // should not hold

//@ assert s.length() == ss.length();     " // ERROR - not necessarily same length

//@ assert s != null;    "

//@ assert s == ss;    "


//@ assert s.equals(ss);    "

//@ assert !s.equals(sss);    "

//@ assert !sss.equals(ss);    " // Null error


//@ assert s.equals(ss);    "    // This would be true but we are not using any specs.


//@ assert b;    "     // This would be true but we are not using any specs.


//@ assert b;    "     // This would be true but we are not using any specs.


//@ assert  !sss.equals(ss);    " // Null error

//@ assert b;    "

//@ assert (s + ss) != null;    "

//@ assert b;    "  // No specs, so not provable

//@ assert (s+ss).equals(s+ss);    "

//@ assert b;    " // FIXME Should not hold necessarily

//@ assert (s + ss) == (s + ss);     " // FIXME Should not hold necessarily

//@ assert sss != null;    "

//@ reachable true;    "

//@ assert (s + ss) != null;    "

//@ assert sss.equals(s4);    "

//@ assert (s+ss).equals(s+ss);    "

//@ assert b;    " // FIXME Should not hold necessarily

//@ assert (s + ss) == (s + ss);    " // FIXME Should not hold necessarily

//@ requires s.length() > 0;     "

//@ assert s.charAt(0) == s.charAt(0);    "

//@ assert s.charAt(0) == s.charAt(0);    "

//@ requires s.length() > 0;     "

//@ assert s.charAt(0) == ss.charAt(0);    "

//@ requires s.length() > 0;    "

//@ assert s.charAt(0) == ss.charAt(0);    "  // should not hold since s != ss

//@ requires s.length() > 0 && ss.length() > 0;    "

//@ assert s.charAt(0) == ss.charAt(0);    "  // should not hold since s != ss

//@ assert b;    "

//@ assert s.length() >= 0;    "

//@ assert b;    "

//@ assert s.length() == ss.length();     "

//@ assert b;    " // should not hold

//@ assert s.length() == ss.length();     " // ERROR - not necessarily same length

//@ assert s != null;    "

//@ assert s == ss;    "


//@ assert s.equals(ss);    "

//@ assert !s.equals(sss);    "

//@ assert !sss.equals(ss);    " // Null error


//@ assert s.equals(ss);    "    // This would be true but we are not using any specs.


//@ assert b;    "     // This would be true but we are not using any specs.


//@ assert b;    "     // This would be true but we are not using any specs.


//@ assert  !sss.equals(ss);    " // Null error

//@ assert b;    "

//@ assert (s + ss) != null;    "

//@ assert b;    "  // No specs, so not provable

//@ assert (s+ss).equals(s+ss);    "

//@ assert b;    " // FIXME Should not hold necessarily

//@ assert (s + ss) == (s + ss);     " // FIXME Should not hold necessarily

//@ assert sss != null;    "

//@ reachable true;    "

//@ assert (s + ss) != null;    "

//@ assert sss.equals(s4);    "

//@ assert (s+ss).equals(s+ss);    "

//@ assert b;    " // FIXME Should not hold necessarily

//@ assert (s + ss) == (s + ss);    " // FIXME Should not hold necessarily

//@ requires s.length() > 0;     "

//@ assert s.charAt(0) == s.charAt(0);    "

//@ assert s.charAt(0) == s.charAt(0);    "

//@ requires s.length() > 0;     "

//@ assert s.charAt(0) == ss.charAt(0);    "

//@ requires s.length() > 0;    "

//@ assert s.charAt(0) == ss.charAt(0);    "  // should not hold since s != ss

//@ requires s.length() > 0 && ss.length() > 0;    "

//@ assert s.charAt(0) == ss.charAt(0);    "  // should not hold since s != ss

//@ assert b;    "

//@ assert s.length() >= 0;    "

//@ assert b;    "

//@ assert s.length() == ss.length();     "

//@ assert b;    " // should not hold

//@ assert s.length() == ss.length();     " // ERROR - not necessarily same length

//@ requires 0<=i && i <10;    "

//@ assert sum < 1000;    "

//@ requires 0<=i && i <10;    "

//@ assert sum < 1000;    "

//@ requires 0<=i && i <10;    "

//@ assert sum < 1000;    "

//@ requires 0<=i && i <10;    "

//@ assert sum < 1000;    "

//@ requires 0<=i && i <10;    "

//@ assert sum < 1000;    "

//@ requires 0<=i && i <10;    "

//@ assert sum < 1000;    "

//@ requires 0<=i && i <10;    "

//@ assert sum < 1000;    "

//@ ensures \\result >= 0 && \\result < 10;    "

//@ ensures \\result == 0 ;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ ensures \\result >= 0 && \\result < 10;    "

//@ requires 0<=i && i <10;    "

//@ assert sum < 1000;    "

//@ requires 0<=i && i <10;    "

//@ assert sum < 1000;    "

//@ requires 0<=i && i <10;    "

//@ assert sum < 1000;    "

//@ requires 0<=i && i <10;    "

//@ assert sum < 1000;    "

//@ requires 0<=i && i <10;    "

//@ assert sum < 1000;    "

//@ requires 0<=i && i <10;    "

//@ assert sum < 1000;    "

//@ requires 0<=i && i <10;    "

//@ assert sum < 1000;    "

//@ ensures \\result >= 0 && \\result < 10;    "

//@ ensures \\result == 0 ;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ ensures \\result >= 0 && \\result < 10;    "

//@ requires 0<=i && i <10;    "

//@ assert sum < 1000;    "

//@ requires 0<=i && i <10;    "

//@ assert sum < 1000;    "

//@ requires 0<=i && i <10;    "

//@ assert sum < 1000;    "

//@ requires 0<=i && i <10;    "

//@ assert sum < 1000;    "

//@ requires 0<=i && i <10;    "

//@ assert sum < 1000;    "

//@ requires 0<=i && i <10;    "

//@ assert sum < 1000;    "

//@ requires 0<=i && i <10;    "

//@ assert sum < 1000;    "

//@ ensures \\result >= 0 && \\result < 10;    "

//@ ensures \\result == 0 ;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ ensures \\result >= 0 && \\result < 10;    "

//@ requires 0<=i && i <10;    "

//@ assert sum < 1000;    "

//@ requires 0<=i && i <10;    "

//@ assert sum < 1000;    "

//@ requires 0<=i && i <10;    "

//@ assert sum < 1000;    "

//@ requires 0<=i && i <10;    "

//@ assert sum < 1000;    "

//@ requires 0<=i && i <10;    "

//@ assert sum < 1000;    "

//@ requires 0<=i && i <10;    "

//@ assert sum < 1000;    "

//@ requires 0<=i && i <10;    "

//@ assert sum < 1000;    "

//@ ensures \\result >= 0 && \\result < 10;    "

//@ ensures \\result == 0 ;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ ensures \\result >= 0 && \\result < 10;    "

//@ requires 0<=i && i <10;    "

//@ assert sum < 1000;    "

//@ requires 0<=i && i <10;    "

//@ assert sum < 1000;    "

//@ requires 0<=i && i <10;    "

//@ assert sum < 1000;    "

//@ requires 0<=i && i <10;    "

//@ assert sum < 1000;    "

//@ requires 0<=i && i <10;    "

//@ assert sum < 1000;    "

//@ requires 0<=i && i <10;    "

//@ assert sum < 1000;    "

//@ requires 0<=i && i <10;    "

//@ assert sum < 1000;    "

//@ ensures \\result >= 0 && \\result < 10;    "

//@ ensures \\result == 0 ;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ ensures \\result >= 0 && \\result < 10;    "

/*@ code_java_math */
//@ assert j != 7;    "

/*@ code_java_math */
//@ assert k != 7;    "

/*@ code_java_math */
//@ requires i == 1;    "

//@ ensures \\result < i-i;    "

/*@ code_safe_math */
//@ requires i == Integer.MAX_VALUE;    "

//@ ensures \\result < 0;    "

/*@ code_java_math */
//@ assert j != 7;    "

/*@ code_java_math */
//@ assert k != 7;    "

/*@ code_java_math */
//@ requires i == 1;    "

//@ ensures \\result < i-i;    "

/*@ code_safe_math */
//@ requires i == Integer.MAX_VALUE;    "

//@ ensures \\result < 0;    "

/*@ code_java_math */
//@ assert j != 7;    "

/*@ code_java_math */
//@ assert k != 7;    "

/*@ code_java_math */
//@ requires i == 1;    "

//@ ensures \\result < i-i;    "

/*@ code_safe_math */
//@ requires i == Integer.MAX_VALUE;    "

//@ ensures \\result < 0;    "

/*@ code_java_math */
//@ assert j != 7;    "

/*@ code_java_math */
//@ assert k != 7;    "

/*@ code_java_math */
//@ requires i == 1;    "

//@ ensures \\result < i-i;    "

/*@ code_safe_math */
//@ requires i == Integer.MAX_VALUE;    "

//@ ensures \\result < 0;    "

/*@ code_java_math */
//@ assert j != 7;    "

/*@ code_java_math */
//@ assert k != 7;    "

/*@ code_java_math */
//@ requires i == 1;    "

//@ ensures \\result < i-i;    "

/*@ code_safe_math */
//@ requires i == Integer.MAX_VALUE;    "

//@ ensures \\result < 0;    "

//@ invariant 0 == pb;    "  // Line 7

//@ invariant 0 == pt;    "

//@ invariant 0 == pa;    "

//@ invariant 0 == pv;    "

//@ public invariant 0 == pb;    "

//@ public invariant 0 == pt;    "

//@ public invariant 0 == pa;    "

//@ public invariant 0 == pv;    "

//@ protected invariant 0 == pb;    "  // Line 15

//@ protected invariant 0 == pt;    "

//@ protected invariant 0 == pa;    "

//@ protected invariant 0 == pv;    "

//@ private invariant 0 == pb;    "

//@ private invariant 0 == pt;    "

//@ private invariant 0 == pa;    "

//@ private invariant 0 == pv;    "

/*@ pure */
/*@ pure */
/*@ pure */
/*@ pure */
//@ invariant 0 == pb();    "  // Line 7

//@ invariant 0 == pt();    "

//@ invariant 0 == pa();    "

//@ invariant 0 == pv();    "

//@ public invariant 0 == pb();    "

//@ public invariant 0 == pt();    "

//@ public invariant 0 == pa();    "

//@ public invariant 0 == pv();    "

//@ protected invariant 0 == pb();    "  // Line 15

//@ protected invariant 0 == pt();    "

//@ protected invariant 0 == pa();    "

//@ protected invariant 0 == pv();    "

//@ private invariant 0 == pb();    "

//@ private invariant 0 == pt();    "

//@ private invariant 0 == pa();    "

//@ private invariant 0 == pv();    "

/*@ spec_public */
/*@ spec_public */
/*@ spec_public */
//@ invariant 0 == pt;    "  // Line 6

//@ invariant 0 == pa;    "

//@ invariant 0 == pv;    "

//@ public invariant 0 == pt;    "

//@ public invariant 0 == pa;    "

//@ public invariant 0 == pv;    "

//@ protected invariant 0 == pt;    "

//@ protected invariant 0 == pa;    "

//@ protected invariant 0 == pv;    "

//@ private invariant 0 == pt;    "

//@ private invariant 0 == pa;    "

//@ private invariant 0 == pv;    "

/*@ spec_protected */
/*@ spec_protected */
//@ invariant 0 == pat;    "

//@ invariant 0 == pvt;    "

//@ public invariant 0 == pat;    "

//@ public invariant 0 == pvt;    "

//@ protected invariant 0 == pat;    "

//@ protected invariant 0 == pvt;    "

//@ private invariant 0 == pat;    "

//@ private invariant 0 == pvt;    "

//@ model public int pb;    "

//@ model protected int pt;    "

//@ model  int pa;    "

//@ model private int pv;    "

//@ in pb;    "  // Line 7

//@ in pt;    "

//@ in pa;    "

//@ in pv;    "

//@ in pb;    "

//@ in pt;    "

//@ in pa;    "

//@ in pv;    "

//@ in pb;    "

//@ in pt;    "

//@ in pa;    "

//@ in pv;    "

//@ in pb;    "

//@ in pt;    "

//@ in pa;    "

//@ in pv;    "

/*@ spec_public */
/*@ spec_public */
/*@ spec_public */
/*@ spec_protected */
/*@ spec_protected */
//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also private normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also protected normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also public normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

/*@ spec_public */
/*@ spec_public */
/*@ spec_public */
/*@ spec_protected */
/*@ spec_protected */
//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also private normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also protected normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also public normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

/*@ spec_public */
/*@ spec_public */
/*@ spec_public */
/*@ spec_protected */
/*@ spec_protected */
//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also private normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also protected normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also public normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

/*@ spec_public */
/*@ spec_public */
/*@ spec_public */
/*@ spec_protected */
/*@ spec_protected */
//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also private normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also protected normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also public normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ requires true;    " +

//@ pure    " +

//@ pure    " +

//@ pure    " +

//@ pure    " +

//@ pure    " +

//@ pure    " +

//@ pure    " +

//@ pure    " +

//@ pure    " +

//@ pure    " +

//@ invariant 0 == pb;    "  // Line 7

//@ invariant 0 == pt;    "

//@ invariant 0 == pa;    "

//@ invariant 0 == pv;    "

//@ public invariant 0 == pb;    "

//@ public invariant 0 == pt;    "

//@ public invariant 0 == pa;    "

//@ public invariant 0 == pv;    "

//@ protected invariant 0 == pb;    "  // Line 15

//@ protected invariant 0 == pt;    "

//@ protected invariant 0 == pa;    "

//@ protected invariant 0 == pv;    "

//@ private invariant 0 == pb;    "

//@ private invariant 0 == pt;    "

//@ private invariant 0 == pa;    "

//@ private invariant 0 == pv;    "

/*@ pure */
/*@ pure */
/*@ pure */
/*@ pure */
//@ invariant 0 == pb();    "  // Line 7

//@ invariant 0 == pt();    "

//@ invariant 0 == pa();    "

//@ invariant 0 == pv();    "

//@ public invariant 0 == pb();    "

//@ public invariant 0 == pt();    "

//@ public invariant 0 == pa();    "

//@ public invariant 0 == pv();    "

//@ protected invariant 0 == pb();    "  // Line 15

//@ protected invariant 0 == pt();    "

//@ protected invariant 0 == pa();    "

//@ protected invariant 0 == pv();    "

//@ private invariant 0 == pb();    "

//@ private invariant 0 == pt();    "

//@ private invariant 0 == pa();    "

//@ private invariant 0 == pv();    "

/*@ spec_public */
/*@ spec_public */
/*@ spec_public */
//@ invariant 0 == pt;    "  // Line 6

//@ invariant 0 == pa;    "

//@ invariant 0 == pv;    "

//@ public invariant 0 == pt;    "

//@ public invariant 0 == pa;    "

//@ public invariant 0 == pv;    "

//@ protected invariant 0 == pt;    "

//@ protected invariant 0 == pa;    "

//@ protected invariant 0 == pv;    "

//@ private invariant 0 == pt;    "

//@ private invariant 0 == pa;    "

//@ private invariant 0 == pv;    "

/*@ spec_protected */
/*@ spec_protected */
//@ invariant 0 == pat;    "

//@ invariant 0 == pvt;    "

//@ public invariant 0 == pat;    "

//@ public invariant 0 == pvt;    "

//@ protected invariant 0 == pat;    "

//@ protected invariant 0 == pvt;    "

//@ private invariant 0 == pat;    "

//@ private invariant 0 == pvt;    "

//@ model public int pb;    "

//@ model protected int pt;    "

//@ model  int pa;    "

//@ model private int pv;    "

//@ in pb;    "  // Line 7

//@ in pt;    "

//@ in pa;    "

//@ in pv;    "

//@ in pb;    "

//@ in pt;    "

//@ in pa;    "

//@ in pv;    "

//@ in pb;    "

//@ in pt;    "

//@ in pa;    "

//@ in pv;    "

//@ in pb;    "

//@ in pt;    "

//@ in pa;    "

//@ in pv;    "

/*@ spec_public */
/*@ spec_public */
/*@ spec_public */
/*@ spec_protected */
/*@ spec_protected */
//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also private normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also protected normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also public normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

/*@ spec_public */
/*@ spec_public */
/*@ spec_public */
/*@ spec_protected */
/*@ spec_protected */
//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also private normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also protected normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also public normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

/*@ spec_public */
/*@ spec_public */
/*@ spec_public */
/*@ spec_protected */
/*@ spec_protected */
//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also private normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also protected normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also public normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

/*@ spec_public */
/*@ spec_public */
/*@ spec_public */
/*@ spec_protected */
/*@ spec_protected */
//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also private normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also protected normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also public normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ requires true;    " +

//@ pure    " +

//@ pure    " +

//@ pure    " +

//@ pure    " +

//@ pure    " +

//@ pure    " +

//@ pure    " +

//@ pure    " +

//@ pure    " +

//@ pure    " +

//@ invariant 0 == pb;    "  // Line 7

//@ invariant 0 == pt;    "

//@ invariant 0 == pa;    "

//@ invariant 0 == pv;    "

//@ public invariant 0 == pb;    "

//@ public invariant 0 == pt;    "

//@ public invariant 0 == pa;    "

//@ public invariant 0 == pv;    "

//@ protected invariant 0 == pb;    "  // Line 15

//@ protected invariant 0 == pt;    "

//@ protected invariant 0 == pa;    "

//@ protected invariant 0 == pv;    "

//@ private invariant 0 == pb;    "

//@ private invariant 0 == pt;    "

//@ private invariant 0 == pa;    "

//@ private invariant 0 == pv;    "

/*@ pure */
/*@ pure */
/*@ pure */
/*@ pure */
//@ invariant 0 == pb();    "  // Line 7

//@ invariant 0 == pt();    "

//@ invariant 0 == pa();    "

//@ invariant 0 == pv();    "

//@ public invariant 0 == pb();    "

//@ public invariant 0 == pt();    "

//@ public invariant 0 == pa();    "

//@ public invariant 0 == pv();    "

//@ protected invariant 0 == pb();    "  // Line 15

//@ protected invariant 0 == pt();    "

//@ protected invariant 0 == pa();    "

//@ protected invariant 0 == pv();    "

//@ private invariant 0 == pb();    "

//@ private invariant 0 == pt();    "

//@ private invariant 0 == pa();    "

//@ private invariant 0 == pv();    "

/*@ spec_public */
/*@ spec_public */
/*@ spec_public */
//@ invariant 0 == pt;    "  // Line 6

//@ invariant 0 == pa;    "

//@ invariant 0 == pv;    "

//@ public invariant 0 == pt;    "

//@ public invariant 0 == pa;    "

//@ public invariant 0 == pv;    "

//@ protected invariant 0 == pt;    "

//@ protected invariant 0 == pa;    "

//@ protected invariant 0 == pv;    "

//@ private invariant 0 == pt;    "

//@ private invariant 0 == pa;    "

//@ private invariant 0 == pv;    "

/*@ spec_protected */
/*@ spec_protected */
//@ invariant 0 == pat;    "

//@ invariant 0 == pvt;    "

//@ public invariant 0 == pat;    "

//@ public invariant 0 == pvt;    "

//@ protected invariant 0 == pat;    "

//@ protected invariant 0 == pvt;    "

//@ private invariant 0 == pat;    "

//@ private invariant 0 == pvt;    "

//@ model public int pb;    "

//@ model protected int pt;    "

//@ model  int pa;    "

//@ model private int pv;    "

//@ in pb;    "  // Line 7

//@ in pt;    "

//@ in pa;    "

//@ in pv;    "

//@ in pb;    "

//@ in pt;    "

//@ in pa;    "

//@ in pv;    "

//@ in pb;    "

//@ in pt;    "

//@ in pa;    "

//@ in pv;    "

//@ in pb;    "

//@ in pt;    "

//@ in pa;    "

//@ in pv;    "

/*@ spec_public */
/*@ spec_public */
/*@ spec_public */
/*@ spec_protected */
/*@ spec_protected */
//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also private normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also protected normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also public normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

/*@ spec_public */
/*@ spec_public */
/*@ spec_public */
/*@ spec_protected */
/*@ spec_protected */
//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also private normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also protected normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also public normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

/*@ spec_public */
/*@ spec_public */
/*@ spec_public */
/*@ spec_protected */
/*@ spec_protected */
//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also private normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also protected normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also public normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

/*@ spec_public */
/*@ spec_public */
/*@ spec_public */
/*@ spec_protected */
/*@ spec_protected */
//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also private normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also protected normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also public normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ requires true;    " +

//@ pure    " +

//@ pure    " +

//@ pure    " +

//@ pure    " +

//@ pure    " +

//@ pure    " +

//@ pure    " +

//@ pure    " +

//@ pure    " +

//@ pure    " +

//@ invariant 0 == pb;    "  // Line 7

//@ invariant 0 == pt;    "

//@ invariant 0 == pa;    "

//@ invariant 0 == pv;    "

//@ public invariant 0 == pb;    "

//@ public invariant 0 == pt;    "

//@ public invariant 0 == pa;    "

//@ public invariant 0 == pv;    "

//@ protected invariant 0 == pb;    "  // Line 15

//@ protected invariant 0 == pt;    "

//@ protected invariant 0 == pa;    "

//@ protected invariant 0 == pv;    "

//@ private invariant 0 == pb;    "

//@ private invariant 0 == pt;    "

//@ private invariant 0 == pa;    "

//@ private invariant 0 == pv;    "

/*@ pure */
/*@ pure */
/*@ pure */
/*@ pure */
//@ invariant 0 == pb();    "  // Line 7

//@ invariant 0 == pt();    "

//@ invariant 0 == pa();    "

//@ invariant 0 == pv();    "

//@ public invariant 0 == pb();    "

//@ public invariant 0 == pt();    "

//@ public invariant 0 == pa();    "

//@ public invariant 0 == pv();    "

//@ protected invariant 0 == pb();    "  // Line 15

//@ protected invariant 0 == pt();    "

//@ protected invariant 0 == pa();    "

//@ protected invariant 0 == pv();    "

//@ private invariant 0 == pb();    "

//@ private invariant 0 == pt();    "

//@ private invariant 0 == pa();    "

//@ private invariant 0 == pv();    "

/*@ spec_public */
/*@ spec_public */
/*@ spec_public */
//@ invariant 0 == pt;    "  // Line 6

//@ invariant 0 == pa;    "

//@ invariant 0 == pv;    "

//@ public invariant 0 == pt;    "

//@ public invariant 0 == pa;    "

//@ public invariant 0 == pv;    "

//@ protected invariant 0 == pt;    "

//@ protected invariant 0 == pa;    "

//@ protected invariant 0 == pv;    "

//@ private invariant 0 == pt;    "

//@ private invariant 0 == pa;    "

//@ private invariant 0 == pv;    "

/*@ spec_protected */
/*@ spec_protected */
//@ invariant 0 == pat;    "

//@ invariant 0 == pvt;    "

//@ public invariant 0 == pat;    "

//@ public invariant 0 == pvt;    "

//@ protected invariant 0 == pat;    "

//@ protected invariant 0 == pvt;    "

//@ private invariant 0 == pat;    "

//@ private invariant 0 == pvt;    "

//@ model public int pb;    "

//@ model protected int pt;    "

//@ model  int pa;    "

//@ model private int pv;    "

//@ in pb;    "  // Line 7

//@ in pt;    "

//@ in pa;    "

//@ in pv;    "

//@ in pb;    "

//@ in pt;    "

//@ in pa;    "

//@ in pv;    "

//@ in pb;    "

//@ in pt;    "

//@ in pa;    "

//@ in pv;    "

//@ in pb;    "

//@ in pt;    "

//@ in pa;    "

//@ in pv;    "

/*@ spec_public */
/*@ spec_public */
/*@ spec_public */
/*@ spec_protected */
/*@ spec_protected */
//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also private normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also protected normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also public normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

/*@ spec_public */
/*@ spec_public */
/*@ spec_public */
/*@ spec_protected */
/*@ spec_protected */
//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also private normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also protected normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also public normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

/*@ spec_public */
/*@ spec_public */
/*@ spec_public */
/*@ spec_protected */
/*@ spec_protected */
//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also private normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also protected normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also public normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

/*@ spec_public */
/*@ spec_public */
/*@ spec_public */
/*@ spec_protected */
/*@ spec_protected */
//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also private normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also protected normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also public normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ requires true;    " +

//@ pure    " +

//@ pure    " +

//@ pure    " +

//@ pure    " +

//@ pure    " +

//@ pure    " +

//@ pure    " +

//@ pure    " +

//@ pure    " +

//@ pure    " +

//@ invariant 0 == pb;    "  // Line 7

//@ invariant 0 == pt;    "

//@ invariant 0 == pa;    "

//@ invariant 0 == pv;    "

//@ public invariant 0 == pb;    "

//@ public invariant 0 == pt;    "

//@ public invariant 0 == pa;    "

//@ public invariant 0 == pv;    "

//@ protected invariant 0 == pb;    "  // Line 15

//@ protected invariant 0 == pt;    "

//@ protected invariant 0 == pa;    "

//@ protected invariant 0 == pv;    "

//@ private invariant 0 == pb;    "

//@ private invariant 0 == pt;    "

//@ private invariant 0 == pa;    "

//@ private invariant 0 == pv;    "

/*@ pure */
/*@ pure */
/*@ pure */
/*@ pure */
//@ invariant 0 == pb();    "  // Line 7

//@ invariant 0 == pt();    "

//@ invariant 0 == pa();    "

//@ invariant 0 == pv();    "

//@ public invariant 0 == pb();    "

//@ public invariant 0 == pt();    "

//@ public invariant 0 == pa();    "

//@ public invariant 0 == pv();    "

//@ protected invariant 0 == pb();    "  // Line 15

//@ protected invariant 0 == pt();    "

//@ protected invariant 0 == pa();    "

//@ protected invariant 0 == pv();    "

//@ private invariant 0 == pb();    "

//@ private invariant 0 == pt();    "

//@ private invariant 0 == pa();    "

//@ private invariant 0 == pv();    "

/*@ spec_public */
/*@ spec_public */
/*@ spec_public */
//@ invariant 0 == pt;    "  // Line 6

//@ invariant 0 == pa;    "

//@ invariant 0 == pv;    "

//@ public invariant 0 == pt;    "

//@ public invariant 0 == pa;    "

//@ public invariant 0 == pv;    "

//@ protected invariant 0 == pt;    "

//@ protected invariant 0 == pa;    "

//@ protected invariant 0 == pv;    "

//@ private invariant 0 == pt;    "

//@ private invariant 0 == pa;    "

//@ private invariant 0 == pv;    "

/*@ spec_protected */
/*@ spec_protected */
//@ invariant 0 == pat;    "

//@ invariant 0 == pvt;    "

//@ public invariant 0 == pat;    "

//@ public invariant 0 == pvt;    "

//@ protected invariant 0 == pat;    "

//@ protected invariant 0 == pvt;    "

//@ private invariant 0 == pat;    "

//@ private invariant 0 == pvt;    "

//@ model public int pb;    "

//@ model protected int pt;    "

//@ model  int pa;    "

//@ model private int pv;    "

//@ in pb;    "  // Line 7

//@ in pt;    "

//@ in pa;    "

//@ in pv;    "

//@ in pb;    "

//@ in pt;    "

//@ in pa;    "

//@ in pv;    "

//@ in pb;    "

//@ in pt;    "

//@ in pa;    "

//@ in pv;    "

//@ in pb;    "

//@ in pt;    "

//@ in pa;    "

//@ in pv;    "

/*@ spec_public */
/*@ spec_public */
/*@ spec_public */
/*@ spec_protected */
/*@ spec_protected */
//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also private normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also protected normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also public normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

/*@ spec_public */
/*@ spec_public */
/*@ spec_public */
/*@ spec_protected */
/*@ spec_protected */
//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also private normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also protected normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also public normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

/*@ spec_public */
/*@ spec_public */
/*@ spec_public */
/*@ spec_protected */
/*@ spec_protected */
//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also private normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also protected normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also public normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

/*@ spec_public */
/*@ spec_public */
/*@ spec_public */
/*@ spec_protected */
/*@ spec_protected */
//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also private normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also protected normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also public normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ requires true;    " +

//@ pure    " +

//@ pure    " +

//@ pure    " +

//@ pure    " +

//@ pure    " +

//@ pure    " +

//@ pure    " +

//@ pure    " +

//@ pure    " +

//@ pure    " +

//@ private invariant b;     "

//@ ensures bb;    "

//@ public invariant b;     "

//@ protected invariant b;     "

//@ invariant b;     "

//@ private invariant b;     "

//@ public invariant b;     "

//@ protected invariant b;     "

//@ invariant b;     "

//@ private normal_behavior ensures false;    "

//@ public normal_behavior ensures false;    "

//@ protected normal_behavior ensures false;    "

//@ normal_behavior ensures false;    "

//@   ensures false;    "

//@  ensures false;    "

//@  ensures false;    "

//@  ensures false;    "

//@ also private normal_behavior ensures false;    "

//@ also public normal_behavior ensures false;    "

//@ also protected normal_behavior ensures false;    "

//@ also normal_behavior ensures false;    "

//@ private normal_behavior ensures false;    "

//@ public normal_behavior ensures false;    "

//@ protected normal_behavior ensures false;    "

//@ normal_behavior ensures false;    "

//@  ensures false;    "

//@  ensures false;    "

//@  ensures false;    "

//@  ensures false;    "

//@  requires false;    "

//@ private normal_behavior    "

//@  requires false;    "

//@ public normal_behavior    "

//@  requires false;    "

//@ protected normal_behavior    "

//@  requires false;    "

//@ normal_behavior    "

//@  requires false;    "

//@ private normal_behavior    "

//@  requires false;    "

//@ public normal_behavior    "

//@  requires false;    "

//@ protected normal_behavior    "

//@  requires false;    "

//@ normal_behavior    "

//@  requires false;    "

//@ private invariant b;     "

//@ ensures bb;    "

//@ public invariant b;     "

//@ protected invariant b;     "

//@ invariant b;     "

//@ private invariant b;     "

//@ public invariant b;     "

//@ protected invariant b;     "

//@ invariant b;     "

//@ private normal_behavior ensures false;    "

//@ public normal_behavior ensures false;    "

//@ protected normal_behavior ensures false;    "

//@ normal_behavior ensures false;    "

//@   ensures false;    "

//@  ensures false;    "

//@  ensures false;    "

//@  ensures false;    "

//@ also private normal_behavior ensures false;    "

//@ also public normal_behavior ensures false;    "

//@ also protected normal_behavior ensures false;    "

//@ also normal_behavior ensures false;    "

//@ private normal_behavior ensures false;    "

//@ public normal_behavior ensures false;    "

//@ protected normal_behavior ensures false;    "

//@ normal_behavior ensures false;    "

//@  ensures false;    "

//@  ensures false;    "

//@  ensures false;    "

//@  ensures false;    "

//@  requires false;    "

//@ private normal_behavior    "

//@  requires false;    "

//@ public normal_behavior    "

//@  requires false;    "

//@ protected normal_behavior    "

//@  requires false;    "

//@ normal_behavior    "

//@  requires false;    "

//@ private normal_behavior    "

//@  requires false;    "

//@ public normal_behavior    "

//@  requires false;    "

//@ protected normal_behavior    "

//@  requires false;    "

//@ normal_behavior    "

//@  requires false;    "

//@ private invariant b;     "

//@ ensures bb;    "

//@ public invariant b;     "

//@ protected invariant b;     "

//@ invariant b;     "

//@ private invariant b;     "

//@ public invariant b;     "

//@ protected invariant b;     "

//@ invariant b;     "

//@ private normal_behavior ensures false;    "

//@ public normal_behavior ensures false;    "

//@ protected normal_behavior ensures false;    "

//@ normal_behavior ensures false;    "

//@   ensures false;    "

//@  ensures false;    "

//@  ensures false;    "

//@  ensures false;    "

//@ also private normal_behavior ensures false;    "

//@ also public normal_behavior ensures false;    "

//@ also protected normal_behavior ensures false;    "

//@ also normal_behavior ensures false;    "

//@ private normal_behavior ensures false;    "

//@ public normal_behavior ensures false;    "

//@ protected normal_behavior ensures false;    "

//@ normal_behavior ensures false;    "

//@  ensures false;    "

//@  ensures false;    "

//@  ensures false;    "

//@  ensures false;    "

//@  requires false;    "

//@ private normal_behavior    "

//@  requires false;    "

//@ public normal_behavior    "

//@  requires false;    "

//@ protected normal_behavior    "

//@  requires false;    "

//@ normal_behavior    "

//@  requires false;    "

//@ private normal_behavior    "

//@  requires false;    "

//@ public normal_behavior    "

//@  requires false;    "

//@ protected normal_behavior    "

//@  requires false;    "

//@ normal_behavior    "

//@  requires false;    "

//@ private invariant b;     "

//@ ensures bb;    "

//@ public invariant b;     "

//@ protected invariant b;     "

//@ invariant b;     "

//@ private invariant b;     "

//@ public invariant b;     "

//@ protected invariant b;     "

//@ invariant b;     "

//@ private normal_behavior ensures false;    "

//@ public normal_behavior ensures false;    "

//@ protected normal_behavior ensures false;    "

//@ normal_behavior ensures false;    "

//@   ensures false;    "

//@  ensures false;    "

//@  ensures false;    "

//@  ensures false;    "

//@ also private normal_behavior ensures false;    "

//@ also public normal_behavior ensures false;    "

//@ also protected normal_behavior ensures false;    "

//@ also normal_behavior ensures false;    "

//@ private normal_behavior ensures false;    "

//@ public normal_behavior ensures false;    "

//@ protected normal_behavior ensures false;    "

//@ normal_behavior ensures false;    "

//@  ensures false;    "

//@  ensures false;    "

//@  ensures false;    "

//@  ensures false;    "

//@  requires false;    "

//@ private normal_behavior    "

//@  requires false;    "

//@ public normal_behavior    "

//@  requires false;    "

//@ protected normal_behavior    "

//@  requires false;    "

//@ normal_behavior    "

//@  requires false;    "

//@ private normal_behavior    "

//@  requires false;    "

//@ public normal_behavior    "

//@  requires false;    "

//@ protected normal_behavior    "

//@  requires false;    "

//@ normal_behavior    "

//@  requires false;    "

//@ private invariant b;     "

//@ ensures bb;    "

//@ public invariant b;     "

//@ protected invariant b;     "

//@ invariant b;     "

//@ private invariant b;     "

//@ public invariant b;     "

//@ protected invariant b;     "

//@ invariant b;     "

//@ private normal_behavior ensures false;    "

//@ public normal_behavior ensures false;    "

//@ protected normal_behavior ensures false;    "

//@ normal_behavior ensures false;    "

//@   ensures false;    "

//@  ensures false;    "

//@  ensures false;    "

//@  ensures false;    "

//@ also private normal_behavior ensures false;    "

//@ also public normal_behavior ensures false;    "

//@ also protected normal_behavior ensures false;    "

//@ also normal_behavior ensures false;    "

//@ private normal_behavior ensures false;    "

//@ public normal_behavior ensures false;    "

//@ protected normal_behavior ensures false;    "

//@ normal_behavior ensures false;    "

//@  ensures false;    "

//@  ensures false;    "

//@  ensures false;    "

//@  ensures false;    "

//@  requires false;    "

//@ private normal_behavior    "

//@  requires false;    "

//@ public normal_behavior    "

//@  requires false;    "

//@ protected normal_behavior    "

//@  requires false;    "

//@ normal_behavior    "

//@  requires false;    "

//@ private normal_behavior    "

//@  requires false;    "

//@ public normal_behavior    "

//@  requires false;    "

//@ protected normal_behavior    "

//@  requires false;    "

//@ normal_behavior    "

//@  requires false;    "

//@ invariant b;      boolean b;}");

//@ model class B { int b = c; int c = 0; }        ");

//@ model int m() {} );

//@ model public class B {}"

/*@ model public class B { } */
//@ ghost int i = j; ghost int j; );

//@ ghost int n = (\    um_of int i; 0<i && i<5; n>i);    "

//@ ghost int n = (\    um_of int i; ; n>i);    "

//@ invariant b;      boolean b;}");

//@ model class B { int b = c; int c = 0; }        ");

//@ model int m() {} );

//@ model public class B {}"

/*@ model public class B { } */
//@ ghost int i = j; ghost int j; );

//@ ghost int n = (\    um_of int i; 0<i && i<5; n>i);    "

//@ ghost int n = (\    um_of int i; ; n>i);    "

//@ invariant b;      boolean b;}");

//@ model class B { int b = c; int c = 0; }        ");

//@ model int m() {} );

//@ model public class B {}"

/*@ model public class B { } */
//@ ghost int i = j; ghost int j; );

//@ ghost int n = (\    um_of int i; 0<i && i<5; n>i);    "

//@ ghost int n = (\    um_of int i; ; n>i);    "

//@ invariant b;      boolean b;}");

//@ model class B { int b = c; int c = 0; }        ");

//@ model int m() {} );

//@ model public class B {}"

/*@ model public class B { } */
//@ ghost int i = j; ghost int j; );

//@ ghost int n = (\    um_of int i; 0<i && i<5; n>i);    "

//@ ghost int n = (\    um_of int i; ; n>i);    "

//@ invariant b;      boolean b;}");

//@ model class B { int b = c; int c = 0; }        ");

//@ model int m() {} );

//@ model public class B {}"

/*@ model public class B { } */
//@ ghost int i = j; ghost int j; );

//@ ghost int n = (\    um_of int i; 0<i && i<5; n>i);    "

//@ ghost int n = (\    um_of int i; ; n>i);    "

/*@ non_null*/
/*@ non_null pure*/
//@ loop_invariant o != null; decreasing 6;     " +

//@ loop_invariant o != 0; decreasing 6;     " +

//@ loop_invariant o != 0; decreasing 6;     " +

//@ loop_invariant o != 0; decreasing 6;     " +

/*@ non_null*/
/*@ non_null pure*/
//@ loop_invariant o != null; decreasing 6;     " +

//@ loop_invariant o != 0; decreasing 6;     " +

//@ loop_invariant o != 0; decreasing 6;     " +

//@ loop_invariant o != 0; decreasing 6;     " +

/*@ non_null*/
/*@ non_null pure*/
//@ loop_invariant o != null; decreasing 6;     " +

//@ loop_invariant o != 0; decreasing 6;     " +

//@ loop_invariant o != 0; decreasing 6;     " +

//@ loop_invariant o != 0; decreasing 6;     " +

/*@ non_null*/
/*@ non_null pure*/
//@ loop_invariant o != null; decreasing 6;     " +

//@ loop_invariant o != 0; decreasing 6;     " +

//@ loop_invariant o != 0; decreasing 6;     " +

//@ loop_invariant o != 0; decreasing 6;     " +

/*@ non_null*/
/*@ non_null pure*/
//@ loop_invariant o != null; decreasing 6;     " +

//@ loop_invariant o != 0; decreasing 6;     " +

//@ loop_invariant o != 0; decreasing 6;     " +

//@ loop_invariant o != 0; decreasing 6;     " +

/*@ pure */
//@ invariant m(); 

/*@ pure */
//@ invariant m(); 

/*@ pure */
//@ invariant m(); 

/*@ pure */
//@ invariant m(); 

/*@ pure */
//@ invariant m(); 

//@ ghost \\TYPE t;    " +

//@ ghost \\TYPE tt = \\type(Object);    " +

//@ set tt = \\type(int);    " +

//@ set tt = \\type(Vector<Integer>);    " +

//@ ghost \\TYPE ttt = \\typeof(o);    " +

//@ ghost boolean b = \\type(Object) == tt;    " +

//@ set b = \\typeof(o) == tt;    " +

//@ set b = (\\TYPE)c == t;     " + // Casts allowed

//@ set t = \\elemtype(t);     " + // Allow elemtype on TYPE, returning TYPE

//@ set c = \\elemtype(c);     " + // Allow elemtype on Class, returning Class

//@ set b = tt <: ttt;    " +

//@ ghost boolean b = JML.erasure(\\typeof(o)) == Object.class;    " +

//@ set b = JML.typeargs(\\typeof(o)).length == 0;    " +

//@ set b = JML.typeargs(\\typeof(o))[0] != \\typeof(o);    " +

//@ set b = JML.isArray(\\typeof(o));    " +

//@ ghost \\TYPE t = \\real;    " +

//@ ghost boolean b = JML.typeargs(\\type(Object)).length == 0;    " +

//@ set b = JML.typeargs(\\elemtype(t)).length == 0;    " +

//@ ghost \\TYPE t = \\type(Object);    " +

//@ ghost boolean b = JML.typeargs(\\type(Object)).length == 0;    " +

//@ set b = JML.typeargs(\\elemtype(t)).length == 0;    " +

//@ ghost \\TYPE w = \\type(B<Integer>);    " +

//@ ghost \\TYPE t = \\type(B<T>);    " +

//@ ghost \\TYPE v = \\type(T);    " +

//@ ghost \\TYPE t = Object.class;    " + // NO mixing

//@ ghost Class<?> cc = t;    " + // NO mixing

//@ ghost boolean b = \\type(Object) == Object.class;    " + // No mixing

//@ ghost Object oo = \\type(Object);    " +  // \TYPE will box

//@ set b = t <: Object.class;    " +  // No mixing

//@ set b = Object.class <: t;    " +  // No mixing

//@ set b = c instanceof \\type(Object);    " +  // No mixing

//@ set b = t instanceof Object;    " + // \Type is a primitive

//@ set t = (\\TYPE)0;    " + // No casts of ints

//@ set t = (\\TYPE)o;    " + // No casts of Object

//@ ghost \\TYPE t;    " +

//@ ghost \\TYPE tt = \\type(Object);    " +

//@ set tt = \\type(int);    " +

//@ set tt = \\type(Vector<Integer>);    " +

//@ ghost \\TYPE ttt = \\typeof(o);    " +

//@ ghost boolean b = \\type(Object) == tt;    " +

//@ set b = \\typeof(o) == tt;    " +

//@ set b = (\\TYPE)c == t;     " + // Casts allowed

//@ set t = \\elemtype(t);     " + // Allow elemtype on TYPE, returning TYPE

//@ set c = \\elemtype(c);     " + // Allow elemtype on Class, returning Class

//@ set b = tt <: ttt;    " +

//@ ghost boolean b = JML.erasure(\\typeof(o)) == Object.class;    " +

//@ set b = JML.typeargs(\\typeof(o)).length == 0;    " +

//@ set b = JML.typeargs(\\typeof(o))[0] != \\typeof(o);    " +

//@ set b = JML.isArray(\\typeof(o));    " +

//@ ghost \\TYPE t = \\real;    " +

//@ ghost boolean b = JML.typeargs(\\type(Object)).length == 0;    " +

//@ set b = JML.typeargs(\\elemtype(t)).length == 0;    " +

//@ ghost \\TYPE t = \\type(Object);    " +

//@ ghost boolean b = JML.typeargs(\\type(Object)).length == 0;    " +

//@ set b = JML.typeargs(\\elemtype(t)).length == 0;    " +

//@ ghost \\TYPE w = \\type(B<Integer>);    " +

//@ ghost \\TYPE t = \\type(B<T>);    " +

//@ ghost \\TYPE v = \\type(T);    " +

//@ ghost \\TYPE t = Object.class;    " + // NO mixing

//@ ghost Class<?> cc = t;    " + // NO mixing

//@ ghost boolean b = \\type(Object) == Object.class;    " + // No mixing

//@ ghost Object oo = \\type(Object);    " +  // \TYPE will box

//@ set b = t <: Object.class;    " +  // No mixing

//@ set b = Object.class <: t;    " +  // No mixing

//@ set b = c instanceof \\type(Object);    " +  // No mixing

//@ set b = t instanceof Object;    " + // \Type is a primitive

//@ set t = (\\TYPE)0;    " + // No casts of ints

//@ set t = (\\TYPE)o;    " + // No casts of Object

//@ ghost \\TYPE t;    " +

//@ ghost \\TYPE tt = \\type(Object);    " +

//@ set tt = \\type(int);    " +

//@ set tt = \\type(Vector<Integer>);    " +

//@ ghost \\TYPE ttt = \\typeof(o);    " +

//@ ghost boolean b = \\type(Object) == tt;    " +

//@ set b = \\typeof(o) == tt;    " +

//@ set b = (\\TYPE)c == t;     " + // Casts allowed

//@ set t = \\elemtype(t);     " + // Allow elemtype on TYPE, returning TYPE

//@ set c = \\elemtype(c);     " + // Allow elemtype on Class, returning Class

//@ set b = tt <: ttt;    " +

//@ ghost boolean b = JML.erasure(\\typeof(o)) == Object.class;    " +

//@ set b = JML.typeargs(\\typeof(o)).length == 0;    " +

//@ set b = JML.typeargs(\\typeof(o))[0] != \\typeof(o);    " +

//@ set b = JML.isArray(\\typeof(o));    " +

//@ ghost \\TYPE t = \\real;    " +

//@ ghost boolean b = JML.typeargs(\\type(Object)).length == 0;    " +

//@ set b = JML.typeargs(\\elemtype(t)).length == 0;    " +

//@ ghost \\TYPE t = \\type(Object);    " +

//@ ghost boolean b = JML.typeargs(\\type(Object)).length == 0;    " +

//@ set b = JML.typeargs(\\elemtype(t)).length == 0;    " +

//@ ghost \\TYPE w = \\type(B<Integer>);    " +

//@ ghost \\TYPE t = \\type(B<T>);    " +

//@ ghost \\TYPE v = \\type(T);    " +

//@ ghost \\TYPE t = Object.class;    " + // NO mixing

//@ ghost Class<?> cc = t;    " + // NO mixing

//@ ghost boolean b = \\type(Object) == Object.class;    " + // No mixing

//@ ghost Object oo = \\type(Object);    " +  // \TYPE will box

//@ set b = t <: Object.class;    " +  // No mixing

//@ set b = Object.class <: t;    " +  // No mixing

//@ set b = c instanceof \\type(Object);    " +  // No mixing

//@ set b = t instanceof Object;    " + // \Type is a primitive

//@ set t = (\\TYPE)0;    " + // No casts of ints

//@ set t = (\\TYPE)o;    " + // No casts of Object

//@ ghost \\TYPE t;    " +

//@ ghost \\TYPE tt = \\type(Object);    " +

//@ set tt = \\type(int);    " +

//@ set tt = \\type(Vector<Integer>);    " +

//@ ghost \\TYPE ttt = \\typeof(o);    " +

//@ ghost boolean b = \\type(Object) == tt;    " +

//@ set b = \\typeof(o) == tt;    " +

//@ set b = (\\TYPE)c == t;     " + // Casts allowed

//@ set t = \\elemtype(t);     " + // Allow elemtype on TYPE, returning TYPE

//@ set c = \\elemtype(c);     " + // Allow elemtype on Class, returning Class

//@ set b = tt <: ttt;    " +

//@ ghost boolean b = JML.erasure(\\typeof(o)) == Object.class;    " +

//@ set b = JML.typeargs(\\typeof(o)).length == 0;    " +

//@ set b = JML.typeargs(\\typeof(o))[0] != \\typeof(o);    " +

//@ set b = JML.isArray(\\typeof(o));    " +

//@ ghost \\TYPE t = \\real;    " +

//@ ghost boolean b = JML.typeargs(\\type(Object)).length == 0;    " +

//@ set b = JML.typeargs(\\elemtype(t)).length == 0;    " +

//@ ghost \\TYPE t = \\type(Object);    " +

//@ ghost boolean b = JML.typeargs(\\type(Object)).length == 0;    " +

//@ set b = JML.typeargs(\\elemtype(t)).length == 0;    " +

//@ ghost \\TYPE w = \\type(B<Integer>);    " +

//@ ghost \\TYPE t = \\type(B<T>);    " +

//@ ghost \\TYPE v = \\type(T);    " +

//@ ghost \\TYPE t = Object.class;    " + // NO mixing

//@ ghost Class<?> cc = t;    " + // NO mixing

//@ ghost boolean b = \\type(Object) == Object.class;    " + // No mixing

//@ ghost Object oo = \\type(Object);    " +  // \TYPE will box

//@ set b = t <: Object.class;    " +  // No mixing

//@ set b = Object.class <: t;    " +  // No mixing

//@ set b = c instanceof \\type(Object);    " +  // No mixing

//@ set b = t instanceof Object;    " + // \Type is a primitive

//@ set t = (\\TYPE)0;    " + // No casts of ints

//@ set t = (\\TYPE)o;    " + // No casts of Object

//@ ghost \\TYPE t;    " +

//@ ghost \\TYPE tt = \\type(Object);    " +

//@ set tt = \\type(int);    " +

//@ set tt = \\type(Vector<Integer>);    " +

//@ ghost \\TYPE ttt = \\typeof(o);    " +

//@ ghost boolean b = \\type(Object) == tt;    " +

//@ set b = \\typeof(o) == tt;    " +

//@ set b = (\\TYPE)c == t;     " + // Casts allowed

//@ set t = \\elemtype(t);     " + // Allow elemtype on TYPE, returning TYPE

//@ set c = \\elemtype(c);     " + // Allow elemtype on Class, returning Class

//@ set b = tt <: ttt;    " +

//@ ghost boolean b = JML.erasure(\\typeof(o)) == Object.class;    " +

//@ set b = JML.typeargs(\\typeof(o)).length == 0;    " +

//@ set b = JML.typeargs(\\typeof(o))[0] != \\typeof(o);    " +

//@ set b = JML.isArray(\\typeof(o));    " +

//@ ghost \\TYPE t = \\real;    " +

//@ ghost boolean b = JML.typeargs(\\type(Object)).length == 0;    " +

//@ set b = JML.typeargs(\\elemtype(t)).length == 0;    " +

//@ ghost \\TYPE t = \\type(Object);    " +

//@ ghost boolean b = JML.typeargs(\\type(Object)).length == 0;    " +

//@ set b = JML.typeargs(\\elemtype(t)).length == 0;    " +

//@ ghost \\TYPE w = \\type(B<Integer>);    " +

//@ ghost \\TYPE t = \\type(B<T>);    " +

//@ ghost \\TYPE v = \\type(T);    " +

//@ ghost \\TYPE t = Object.class;    " + // NO mixing

//@ ghost Class<?> cc = t;    " + // NO mixing

//@ ghost boolean b = \\type(Object) == Object.class;    " + // No mixing

//@ ghost Object oo = \\type(Object);    " +  // \TYPE will box

//@ set b = t <: Object.class;    " +  // No mixing

//@ set b = Object.class <: t;    " +  // No mixing

//@ set b = c instanceof \\type(Object);    " +  // No mixing

//@ set b = t instanceof Object;    " + // \Type is a primitive

//@ set t = (\\TYPE)0;    " + // No casts of ints

//@ set t = (\\TYPE)o;    " + // No casts of Object

//@ invariant (\\lblneg A false);    " +

//@ invariant (\\lblpos A k);    " +

//@ invariant \\lblneg A false;    " +  // This is not strict JML, but it is difficult to preclude

//@ invariant 0==(\\lblpos A -k);    " +

//@ invariant \\lblneg ghost false;    " +  // This is not strict JML, but it is difficult to preclude

//@ invariant 0==(\\lblpos pure -k);    " +

//@ invariant \\lbl ghost false;    " +  // This is not strict JML, but it is difficult to preclude

//@ invariant 0==(\\lbl pure -k);    " +

//@ invariant \\lbl ghost false;    " +  // This is not strict JML, but it is difficult to preclude

//@ invariant (\\lbl pure -k);    " +

//@ invariant (\\lblneg A false);    " +

//@ invariant (\\lblpos A k);    " +

//@ invariant \\lblneg A false;    " +  // This is not strict JML, but it is difficult to preclude

//@ invariant 0==(\\lblpos A -k);    " +

//@ invariant \\lblneg ghost false;    " +  // This is not strict JML, but it is difficult to preclude

//@ invariant 0==(\\lblpos pure -k);    " +

//@ invariant \\lbl ghost false;    " +  // This is not strict JML, but it is difficult to preclude

//@ invariant 0==(\\lbl pure -k);    " +

//@ invariant \\lbl ghost false;    " +  // This is not strict JML, but it is difficult to preclude

//@ invariant (\\lbl pure -k);    " +

//@ invariant (\\lblneg A false);    " +

//@ invariant (\\lblpos A k);    " +

//@ invariant \\lblneg A false;    " +  // This is not strict JML, but it is difficult to preclude

//@ invariant 0==(\\lblpos A -k);    " +

//@ invariant \\lblneg ghost false;    " +  // This is not strict JML, but it is difficult to preclude

//@ invariant 0==(\\lblpos pure -k);    " +

//@ invariant \\lbl ghost false;    " +  // This is not strict JML, but it is difficult to preclude

//@ invariant 0==(\\lbl pure -k);    " +

//@ invariant \\lbl ghost false;    " +  // This is not strict JML, but it is difficult to preclude

//@ invariant (\\lbl pure -k);    " +

//@ invariant (\\lblneg A false);    " +

//@ invariant (\\lblpos A k);    " +

//@ invariant \\lblneg A false;    " +  // This is not strict JML, but it is difficult to preclude

//@ invariant 0==(\\lblpos A -k);    " +

//@ invariant \\lblneg ghost false;    " +  // This is not strict JML, but it is difficult to preclude

//@ invariant 0==(\\lblpos pure -k);    " +

//@ invariant \\lbl ghost false;    " +  // This is not strict JML, but it is difficult to preclude

//@ invariant 0==(\\lbl pure -k);    " +

//@ invariant \\lbl ghost false;    " +  // This is not strict JML, but it is difficult to preclude

//@ invariant (\\lbl pure -k);    " +

//@ invariant (\\lblneg A false);    " +

//@ invariant (\\lblpos A k);    " +

//@ invariant \\lblneg A false;    " +  // This is not strict JML, but it is difficult to preclude

//@ invariant 0==(\\lblpos A -k);    " +

//@ invariant \\lblneg ghost false;    " +  // This is not strict JML, but it is difficult to preclude

//@ invariant 0==(\\lblpos pure -k);    " +

//@ invariant \\lbl ghost false;    " +  // This is not strict JML, but it is difficult to preclude

//@ invariant 0==(\\lbl pure -k);    " +

//@ invariant \\lbl ghost false;    " +  // This is not strict JML, but it is difficult to preclude

//@ invariant (\\lbl pure -k);    " +

/*@ model class B {} */
/*@ class B {}*/
/*@ model */
/*@ model  class A {} */
/*@ model class A {} */
/*@ model class A {} */
/*@ class A {} */
/*@ model class B {} */
/*@ model class B {} */
/*@  class B {} */
/*@ model */
/*@ model int j; */
/*@ model */
/*@  int j; */
/*@ model int j; */
/*@ model int j; */
/*@ model */
/*@ int jjjj; */
/*@ model int k; */
/*@  int k; */
/*@ model */
/*@ model int j(){return 0;}  */
/*@ model */
/*@ int j(){return 0;}  */
/*@ model int j(){return 0;}  */
/*@ model int j(){return 0;}  */
/*@ model */
/*@ model */
/*@ int j();  */
/*@ model int k();  */
/*@  int k(){return 0;}  */
/*@ model */
/*@ model int k(){return 0;} */
/*@ model int j(); */
/*@ model int k; */
/*@ model int j; */
/*@ model class B {} */
/*@ class B {}*/
/*@ model */
/*@ model  class A {} */
/*@ model class A {} */
/*@ model class A {} */
/*@ class A {} */
/*@ model class B {} */
/*@ model class B {} */
/*@  class B {} */
/*@ model */
/*@ model int j; */
/*@ model */
/*@  int j; */
/*@ model int j; */
/*@ model int j; */
/*@ model */
/*@ int jjjj; */
/*@ model int k; */
/*@  int k; */
/*@ model */
/*@ model int j(){return 0;}  */
/*@ model */
/*@ int j(){return 0;}  */
/*@ model int j(){return 0;}  */
/*@ model int j(){return 0;}  */
/*@ model */
/*@ model */
/*@ int j();  */
/*@ model int k();  */
/*@  int k(){return 0;}  */
/*@ model */
/*@ model int k(){return 0;} */
/*@ model int j(); */
/*@ model int k; */
/*@ model int j; */
/*@ model class B {} */
/*@ class B {}*/
/*@ model */
/*@ model  class A {} */
/*@ model class A {} */
/*@ model class A {} */
/*@ class A {} */
/*@ model class B {} */
/*@ model class B {} */
/*@  class B {} */
/*@ model */
/*@ model int j; */
/*@ model */
/*@  int j; */
/*@ model int j; */
/*@ model int j; */
/*@ model */
/*@ int jjjj; */
/*@ model int k; */
/*@  int k; */
/*@ model */
/*@ model int j(){return 0;}  */
/*@ model */
/*@ int j(){return 0;}  */
/*@ model int j(){return 0;}  */
/*@ model int j(){return 0;}  */
/*@ model */
/*@ model */
/*@ int j();  */
/*@ model int k();  */
/*@  int k(){return 0;}  */
/*@ model */
/*@ model int k(){return 0;} */
/*@ model int j(); */
/*@ model int k; */
/*@ model int j; */
/*@ model class B {} */
/*@ class B {}*/
/*@ model */
/*@ model  class A {} */
/*@ model class A {} */
/*@ model class A {} */
/*@ class A {} */
/*@ model class B {} */
/*@ model class B {} */
/*@  class B {} */
/*@ model */
/*@ model int j; */
/*@ model */
/*@  int j; */
/*@ model int j; */
/*@ model int j; */
/*@ model */
/*@ int jjjj; */
/*@ model int k; */
/*@  int k; */
/*@ model */
/*@ model int j(){return 0;}  */
/*@ model */
/*@ int j(){return 0;}  */
/*@ model int j(){return 0;}  */
/*@ model int j(){return 0;}  */
/*@ model */
/*@ model */
/*@ int j();  */
/*@ model int k();  */
/*@  int k(){return 0;}  */
/*@ model */
/*@ model int k(){return 0;} */
/*@ model int j(); */
/*@ model int k; */
/*@ model int j; */
/*@ model class B {} */
/*@ class B {}*/
/*@ model */
/*@ model  class A {} */
/*@ model class A {} */
/*@ model class A {} */
/*@ class A {} */
/*@ model class B {} */
/*@ model class B {} */
/*@  class B {} */
/*@ model */
/*@ model int j; */
/*@ model */
/*@  int j; */
/*@ model int j; */
/*@ model int j; */
/*@ model */
/*@ int jjjj; */
/*@ model int k; */
/*@  int k; */
/*@ model */
/*@ model int j(){return 0;}  */
/*@ model */
/*@ int j(){return 0;}  */
/*@ model int j(){return 0;}  */
/*@ model int j(){return 0;}  */
/*@ model */
/*@ model */
/*@ int j();  */
/*@ model int k();  */
/*@  int k(){return 0;}  */
/*@ model */
/*@ model int k(){return 0;} */
/*@ model int j(); */
/*@ model int k; */
/*@ model int j; */
//@ also    "

//@ r equires true;    "

//@ signals_only Exception;    "

//@ requires true;    "

//@ s ignals_only Exception;    "

//@ r equires true;    "

//@ signals_only Exception;    "

//@ true equires true;    "

//@ signals_only Exception;    "

//@ class equires true;    "

//@ signals_only Exception;    "

//@ model class ;    "

//@ signals_only Exception;    "

//@ requires true;    "

//@ signals_only Exception;    "

//@ signals_only Exception;    "

//@ requires true;    "

//@ signals_only Exception;    "

//@ requires true;    "

//@ signals_only Object;    "

//@ requires true;    "

//@ signals_only \    othing;    "

//@ requires true;    "

//@ signals_only ;    "

//@ requires true;    "

//@ signals_only Exception;    "

//@ {|    "

//@ ensures false;    "

//@ also    "

//@ signals_only Exception;    "

//@ |}    "

//@ requires true;    "

//@ {|    "

//@ signals_only Exception;    "

//@ also    "

//@ signals_only Exception;    "

//@ |}    "

//@ requires true;    "

//@ {|    "

//@ signals_only Exception;    "

//@ also    "

//@ assignable \\everything;    "

//@ |}    "

//@ pure    "

//@ requires true;    "

//@ {|    "

//@ signals_only Exception;    "

//@ also    "

//@ assignable k, sk, this.k;    "

//@ |}    "

//@ pure    "

//@ requires true;    "

//@ {|    "

//@ signals_only Exception;    "

//@ also    "

//@ assignable sk, A.sk, sbk, B.sbk;    "

//@ |}    "

//@ pure    "

/*@ model instance int bk; model static int sbk; */
//@ requires true;    "

//@ {|    "

//@ signals_only Exception;    "

//@ also    "

//@ assignable     sbk, A.sbk;    "

//@ |}    "

//@ pure    "

//@ behavior    "

//@ requires true;    "

//@ ensures false;    "

//@ also    "

//@ exceptional_behavior    "

//@ assignable \\everything;    "

//@ behavior    "

//@ requires true;    "

//@ also    "

//@ exceptional_behavior    "

//@ ensures false;    "

//@ behavior    "

//@ requires true;    "

//@ signals (Exception e) false;    "

//@ also    "

//@ normal_behavior    "

//@ assignable \\everything;    "

//@ behavior    "

//@ requires true;    "

//@ also    "

//@ normal_behavior    "

//@ signals (Exception e) false;    "

//@ behavior    "

//@ requires true;    "

//@ signals_only RuntimeException;    "

//@ also    "

//@ normal_behavior    "

//@ assignable \\everything;    "

//@ behavior    "

//@ requires true;    "

//@ also    "

//@ normal_behavior    "

//@ signals_only RuntimeException;    "

//@ also    "

//@ r equires true;    "

//@ signals_only Exception;    "

//@ requires true;    "

//@ s ignals_only Exception;    "

//@ r equires true;    "

//@ signals_only Exception;    "

//@ true equires true;    "

//@ signals_only Exception;    "

//@ class equires true;    "

//@ signals_only Exception;    "

//@ model class ;    "

//@ signals_only Exception;    "

//@ requires true;    "

//@ signals_only Exception;    "

//@ signals_only Exception;    "

//@ requires true;    "

//@ signals_only Exception;    "

//@ requires true;    "

//@ signals_only Object;    "

//@ requires true;    "

//@ signals_only \    othing;    "

//@ requires true;    "

//@ signals_only ;    "

//@ requires true;    "

//@ signals_only Exception;    "

//@ {|    "

//@ ensures false;    "

//@ also    "

//@ signals_only Exception;    "

//@ |}    "

//@ requires true;    "

//@ {|    "

//@ signals_only Exception;    "

//@ also    "

//@ signals_only Exception;    "

//@ |}    "

//@ requires true;    "

//@ {|    "

//@ signals_only Exception;    "

//@ also    "

//@ assignable \\everything;    "

//@ |}    "

//@ pure    "

//@ requires true;    "

//@ {|    "

//@ signals_only Exception;    "

//@ also    "

//@ assignable k, sk, this.k;    "

//@ |}    "

//@ pure    "

//@ requires true;    "

//@ {|    "

//@ signals_only Exception;    "

//@ also    "

//@ assignable sk, A.sk, sbk, B.sbk;    "

//@ |}    "

//@ pure    "

/*@ model instance int bk; model static int sbk; */
//@ requires true;    "

//@ {|    "

//@ signals_only Exception;    "

//@ also    "

//@ assignable     sbk, A.sbk;    "

//@ |}    "

//@ pure    "

//@ behavior    "

//@ requires true;    "

//@ ensures false;    "

//@ also    "

//@ exceptional_behavior    "

//@ assignable \\everything;    "

//@ behavior    "

//@ requires true;    "

//@ also    "

//@ exceptional_behavior    "

//@ ensures false;    "

//@ behavior    "

//@ requires true;    "

//@ signals (Exception e) false;    "

//@ also    "

//@ normal_behavior    "

//@ assignable \\everything;    "

//@ behavior    "

//@ requires true;    "

//@ also    "

//@ normal_behavior    "

//@ signals (Exception e) false;    "

//@ behavior    "

//@ requires true;    "

//@ signals_only RuntimeException;    "

//@ also    "

//@ normal_behavior    "

//@ assignable \\everything;    "

//@ behavior    "

//@ requires true;    "

//@ also    "

//@ normal_behavior    "

//@ signals_only RuntimeException;    "

//@ also    "

//@ r equires true;    "

//@ signals_only Exception;    "

//@ requires true;    "

//@ s ignals_only Exception;    "

//@ r equires true;    "

//@ signals_only Exception;    "

//@ true equires true;    "

//@ signals_only Exception;    "

//@ class equires true;    "

//@ signals_only Exception;    "

//@ model class ;    "

//@ signals_only Exception;    "

//@ requires true;    "

//@ signals_only Exception;    "

//@ signals_only Exception;    "

//@ requires true;    "

//@ signals_only Exception;    "

//@ requires true;    "

//@ signals_only Object;    "

//@ requires true;    "

//@ signals_only \    othing;    "

//@ requires true;    "

//@ signals_only ;    "

//@ requires true;    "

//@ signals_only Exception;    "

//@ {|    "

//@ ensures false;    "

//@ also    "

//@ signals_only Exception;    "

//@ |}    "

//@ requires true;    "

//@ {|    "

//@ signals_only Exception;    "

//@ also    "

//@ signals_only Exception;    "

//@ |}    "

//@ requires true;    "

//@ {|    "

//@ signals_only Exception;    "

//@ also    "

//@ assignable \\everything;    "

//@ |}    "

//@ pure    "

//@ requires true;    "

//@ {|    "

//@ signals_only Exception;    "

//@ also    "

//@ assignable k, sk, this.k;    "

//@ |}    "

//@ pure    "

//@ requires true;    "

//@ {|    "

//@ signals_only Exception;    "

//@ also    "

//@ assignable sk, A.sk, sbk, B.sbk;    "

//@ |}    "

//@ pure    "

/*@ model instance int bk; model static int sbk; */
//@ requires true;    "

//@ {|    "

//@ signals_only Exception;    "

//@ also    "

//@ assignable     sbk, A.sbk;    "

//@ |}    "

//@ pure    "

//@ behavior    "

//@ requires true;    "

//@ ensures false;    "

//@ also    "

//@ exceptional_behavior    "

//@ assignable \\everything;    "

//@ behavior    "

//@ requires true;    "

//@ also    "

//@ exceptional_behavior    "

//@ ensures false;    "

//@ behavior    "

//@ requires true;    "

//@ signals (Exception e) false;    "

//@ also    "

//@ normal_behavior    "

//@ assignable \\everything;    "

//@ behavior    "

//@ requires true;    "

//@ also    "

//@ normal_behavior    "

//@ signals (Exception e) false;    "

//@ behavior    "

//@ requires true;    "

//@ signals_only RuntimeException;    "

//@ also    "

//@ normal_behavior    "

//@ assignable \\everything;    "

//@ behavior    "

//@ requires true;    "

//@ also    "

//@ normal_behavior    "

//@ signals_only RuntimeException;    "

//@ also    "

//@ r equires true;    "

//@ signals_only Exception;    "

//@ requires true;    "

//@ s ignals_only Exception;    "

//@ r equires true;    "

//@ signals_only Exception;    "

//@ true equires true;    "

//@ signals_only Exception;    "

//@ class equires true;    "

//@ signals_only Exception;    "

//@ model class ;    "

//@ signals_only Exception;    "

//@ requires true;    "

//@ signals_only Exception;    "

//@ signals_only Exception;    "

//@ requires true;    "

//@ signals_only Exception;    "

//@ requires true;    "

//@ signals_only Object;    "

//@ requires true;    "

//@ signals_only \    othing;    "

//@ requires true;    "

//@ signals_only ;    "

//@ requires true;    "

//@ signals_only Exception;    "

//@ {|    "

//@ ensures false;    "

//@ also    "

//@ signals_only Exception;    "

//@ |}    "

//@ requires true;    "

//@ {|    "

//@ signals_only Exception;    "

//@ also    "

//@ signals_only Exception;    "

//@ |}    "

//@ requires true;    "

//@ {|    "

//@ signals_only Exception;    "

//@ also    "

//@ assignable \\everything;    "

//@ |}    "

//@ pure    "

//@ requires true;    "

//@ {|    "

//@ signals_only Exception;    "

//@ also    "

//@ assignable k, sk, this.k;    "

//@ |}    "

//@ pure    "

//@ requires true;    "

//@ {|    "

//@ signals_only Exception;    "

//@ also    "

//@ assignable sk, A.sk, sbk, B.sbk;    "

//@ |}    "

//@ pure    "

/*@ model instance int bk; model static int sbk; */
//@ requires true;    "

//@ {|    "

//@ signals_only Exception;    "

//@ also    "

//@ assignable     sbk, A.sbk;    "

//@ |}    "

//@ pure    "

//@ behavior    "

//@ requires true;    "

//@ ensures false;    "

//@ also    "

//@ exceptional_behavior    "

//@ assignable \\everything;    "

//@ behavior    "

//@ requires true;    "

//@ also    "

//@ exceptional_behavior    "

//@ ensures false;    "

//@ behavior    "

//@ requires true;    "

//@ signals (Exception e) false;    "

//@ also    "

//@ normal_behavior    "

//@ assignable \\everything;    "

//@ behavior    "

//@ requires true;    "

//@ also    "

//@ normal_behavior    "

//@ signals (Exception e) false;    "

//@ behavior    "

//@ requires true;    "

//@ signals_only RuntimeException;    "

//@ also    "

//@ normal_behavior    "

//@ assignable \\everything;    "

//@ behavior    "

//@ requires true;    "

//@ also    "

//@ normal_behavior    "

//@ signals_only RuntimeException;    "

//@ also    "

//@ r equires true;    "

//@ signals_only Exception;    "

//@ requires true;    "

//@ s ignals_only Exception;    "

//@ r equires true;    "

//@ signals_only Exception;    "

//@ true equires true;    "

//@ signals_only Exception;    "

//@ class equires true;    "

//@ signals_only Exception;    "

//@ model class ;    "

//@ signals_only Exception;    "

//@ requires true;    "

//@ signals_only Exception;    "

//@ signals_only Exception;    "

//@ requires true;    "

//@ signals_only Exception;    "

//@ requires true;    "

//@ signals_only Object;    "

//@ requires true;    "

//@ signals_only \    othing;    "

//@ requires true;    "

//@ signals_only ;    "

//@ requires true;    "

//@ signals_only Exception;    "

//@ {|    "

//@ ensures false;    "

//@ also    "

//@ signals_only Exception;    "

//@ |}    "

//@ requires true;    "

//@ {|    "

//@ signals_only Exception;    "

//@ also    "

//@ signals_only Exception;    "

//@ |}    "

//@ requires true;    "

//@ {|    "

//@ signals_only Exception;    "

//@ also    "

//@ assignable \\everything;    "

//@ |}    "

//@ pure    "

//@ requires true;    "

//@ {|    "

//@ signals_only Exception;    "

//@ also    "

//@ assignable k, sk, this.k;    "

//@ |}    "

//@ pure    "

//@ requires true;    "

//@ {|    "

//@ signals_only Exception;    "

//@ also    "

//@ assignable sk, A.sk, sbk, B.sbk;    "

//@ |}    "

//@ pure    "

/*@ model instance int bk; model static int sbk; */
//@ requires true;    "

//@ {|    "

//@ signals_only Exception;    "

//@ also    "

//@ assignable     sbk, A.sbk;    "

//@ |}    "

//@ pure    "

//@ behavior    "

//@ requires true;    "

//@ ensures false;    "

//@ also    "

//@ exceptional_behavior    "

//@ assignable \\everything;    "

//@ behavior    "

//@ requires true;    "

//@ also    "

//@ exceptional_behavior    "

//@ ensures false;    "

//@ behavior    "

//@ requires true;    "

//@ signals (Exception e) false;    "

//@ also    "

//@ normal_behavior    "

//@ assignable \\everything;    "

//@ behavior    "

//@ requires true;    "

//@ also    "

//@ normal_behavior    "

//@ signals (Exception e) false;    "

//@ behavior    "

//@ requires true;    "

//@ signals_only RuntimeException;    "

//@ also    "

//@ normal_behavior    "

//@ assignable \\everything;    "

//@ behavior    "

//@ requires true;    "

//@ also    "

//@ normal_behavior    "

//@ signals_only RuntimeException;    "

/*@ model int m() { return B.n; } */
/*@ model class B { public static int n; } */
/*@ model int m() { return B.n; } */
/*@ model class B { public static int n; } */
/*@ model B m() { return B.n; }  */
/*@ model class B { public static B n; } */
//@ model int m1() { return 0; }    " + // OK

/*@ model */
//@ model int p1();    " +  // OK

/*@ model */
//@ int q();    " +  // BAD

//@ model int m1() { return 0; }    " + // OK

/*@ model */
//@ model int p1();    " +  // OK

/*@ model */
//@ int q();    " +  // BAD

/*@ static model public class III {    " +  // Line 18
                "  void m() {}    " +  // OK
                "  model int m1() { return 0; }    " + // NO NESTING
                "  void p();    " +  // OK - FIXME - resolve the rules about model methods and embedded model declarations
                "  model int p1();    " +  // NO NESTING
                "  }*/
/*@ model class B {     " +  // Line 25
                "  void m() {}    " +  // OK
                "   model int m1() { return 0; }    " + // NO NESTING
                "  void p();    " +  // OK -- FIXME - as above
                "   model int p1();    " +  // NO NESTING
                "}    */
//@ model int m1() { return 0; }    " + // OK

/*@ model */
//@ model int p1();    " +  // OK

/*@ model */
//@ int q();    " +  // BAD

/*@ pure */
//@ model pure boolean m1() { return true; }    " + // OK

//@ invariant m() && m1();    " +

//@ requires m() && m1();    " +

//@ requires m() && m1();    " + // BAD - VISIBILITY PROBLEMS

//@ requires B.m() && B.m1();    " +

//@ requires B.m() && B.m1();    " + // BAD - VISIBILITY PROBLEMS

/*@ pure */
//@ model pure static boolean m1() { return true; }    " + // OK

//@ static invariant m() && m1();    " +

//@ requires JML.erasure(\\typeof(this)) == JML.erasure(\\type(A));    " +

//@ model static public class B{}    " +

/*@ model */
//@ static public class D{}    " + // SHOULD BE MODEL

//@ model  public class B{}    " +

/*@ model */
//@  public class D{}    " +  // SHOULD BE MODEL

/*@ model public class M {     " +                  // Line 10
                "    model  public class B{}    " +  // NO POINT
                "     public class C{}    " +
                "  }*/
/*@ model */
/*@ model class Q {     " +
                "  model  public class C{}    " + // NO POINT
                "   public class D{}    " +
                "}*/
//@ model  public class B{}    " +

/*@ model */
//@  public class D{}    " + // BAD

//@ model int m1;    " + // OK

//@ ghost int m1a;    " + // OK

/*@ model */
/*@ ghost */
//@ int q;    " +  // BAD

//@ model int m1;    " + // OK

//@ ghost int m1a;    " + // OK

/*@ model */
/*@ ghost */
//@ int q;    " +  // BAD

/*@ static model public class III {    " +  // Line 16
                "    int m;    " +  // OK
                "    model int m1;    " + // NO NESTING
                "    ghost int m1a;    " + // NO NESTING
                "        " +
                "  }*/
/*@ model class B {     " +  // Line 23
                "  int m;    " +  // OK
                "   model int m1; ghost int m2;     " + // NO NESTING
                "}    */
//@ model int m1;    " + // OK

//@ ghost int m1a;    " + // OK

/*@ model */
/*@ ghost */
//@ int q;    " +  // BAD

/*@ model  class B { int i;  { i = 2; } } */
/*@ model public class B { int i;  { i = 2; } } */
/*@ model public class B { int i;  { i = 2; } } */
/*@ model public class B { int i;  { i = 2; } } */
//@ public model instance int z;    "

//@ static model int z2;    "

/*@ model int m() { return B.n; } */
/*@ model class B { public static int n; } */
/*@ model int m() { return B.n; } */
/*@ model class B { public static int n; } */
/*@ model B m() { return B.n; }  */
/*@ model class B { public static B n; } */
//@ model int m1() { return 0; }    " + // OK

/*@ model */
//@ model int p1();    " +  // OK

/*@ model */
//@ int q();    " +  // BAD

//@ model int m1() { return 0; }    " + // OK

/*@ model */
//@ model int p1();    " +  // OK

/*@ model */
//@ int q();    " +  // BAD

/*@ static model public class III {    " +  // Line 18
                "  void m() {}    " +  // OK
                "  model int m1() { return 0; }    " + // NO NESTING
                "  void p();    " +  // OK - FIXME - resolve the rules about model methods and embedded model declarations
                "  model int p1();    " +  // NO NESTING
                "  }*/
/*@ model class B {     " +  // Line 25
                "  void m() {}    " +  // OK
                "   model int m1() { return 0; }    " + // NO NESTING
                "  void p();    " +  // OK -- FIXME - as above
                "   model int p1();    " +  // NO NESTING
                "}    */
//@ model int m1() { return 0; }    " + // OK

/*@ model */
//@ model int p1();    " +  // OK

/*@ model */
//@ int q();    " +  // BAD

/*@ pure */
//@ model pure boolean m1() { return true; }    " + // OK

//@ invariant m() && m1();    " +

//@ requires m() && m1();    " +

//@ requires m() && m1();    " + // BAD - VISIBILITY PROBLEMS

//@ requires B.m() && B.m1();    " +

//@ requires B.m() && B.m1();    " + // BAD - VISIBILITY PROBLEMS

/*@ pure */
//@ model pure static boolean m1() { return true; }    " + // OK

//@ static invariant m() && m1();    " +

//@ requires JML.erasure(\\typeof(this)) == JML.erasure(\\type(A));    " +

//@ model static public class B{}    " +

/*@ model */
//@ static public class D{}    " + // SHOULD BE MODEL

//@ model  public class B{}    " +

/*@ model */
//@  public class D{}    " +  // SHOULD BE MODEL

/*@ model public class M {     " +                  // Line 10
                "    model  public class B{}    " +  // NO POINT
                "     public class C{}    " +
                "  }*/
/*@ model */
/*@ model class Q {     " +
                "  model  public class C{}    " + // NO POINT
                "   public class D{}    " +
                "}*/
//@ model  public class B{}    " +

/*@ model */
//@  public class D{}    " + // BAD

//@ model int m1;    " + // OK

//@ ghost int m1a;    " + // OK

/*@ model */
/*@ ghost */
//@ int q;    " +  // BAD

//@ model int m1;    " + // OK

//@ ghost int m1a;    " + // OK

/*@ model */
/*@ ghost */
//@ int q;    " +  // BAD

/*@ static model public class III {    " +  // Line 16
                "    int m;    " +  // OK
                "    model int m1;    " + // NO NESTING
                "    ghost int m1a;    " + // NO NESTING
                "        " +
                "  }*/
/*@ model class B {     " +  // Line 23
                "  int m;    " +  // OK
                "   model int m1; ghost int m2;     " + // NO NESTING
                "}    */
//@ model int m1;    " + // OK

//@ ghost int m1a;    " + // OK

/*@ model */
/*@ ghost */
//@ int q;    " +  // BAD

/*@ model  class B { int i;  { i = 2; } } */
/*@ model public class B { int i;  { i = 2; } } */
/*@ model public class B { int i;  { i = 2; } } */
/*@ model public class B { int i;  { i = 2; } } */
//@ public model instance int z;    "

//@ static model int z2;    "

/*@ model int m() { return B.n; } */
/*@ model class B { public static int n; } */
/*@ model int m() { return B.n; } */
/*@ model class B { public static int n; } */
/*@ model B m() { return B.n; }  */
/*@ model class B { public static B n; } */
//@ model int m1() { return 0; }    " + // OK

/*@ model */
//@ model int p1();    " +  // OK

/*@ model */
//@ int q();    " +  // BAD

//@ model int m1() { return 0; }    " + // OK

/*@ model */
//@ model int p1();    " +  // OK

/*@ model */
//@ int q();    " +  // BAD

/*@ static model public class III {    " +  // Line 18
                "  void m() {}    " +  // OK
                "  model int m1() { return 0; }    " + // NO NESTING
                "  void p();    " +  // OK - FIXME - resolve the rules about model methods and embedded model declarations
                "  model int p1();    " +  // NO NESTING
                "  }*/
/*@ model class B {     " +  // Line 25
                "  void m() {}    " +  // OK
                "   model int m1() { return 0; }    " + // NO NESTING
                "  void p();    " +  // OK -- FIXME - as above
                "   model int p1();    " +  // NO NESTING
                "}    */
//@ model int m1() { return 0; }    " + // OK

/*@ model */
//@ model int p1();    " +  // OK

/*@ model */
//@ int q();    " +  // BAD

/*@ pure */
//@ model pure boolean m1() { return true; }    " + // OK

//@ invariant m() && m1();    " +

//@ requires m() && m1();    " +

//@ requires m() && m1();    " + // BAD - VISIBILITY PROBLEMS

//@ requires B.m() && B.m1();    " +

//@ requires B.m() && B.m1();    " + // BAD - VISIBILITY PROBLEMS

/*@ pure */
//@ model pure static boolean m1() { return true; }    " + // OK

//@ static invariant m() && m1();    " +

//@ requires JML.erasure(\\typeof(this)) == JML.erasure(\\type(A));    " +

//@ model static public class B{}    " +

/*@ model */
//@ static public class D{}    " + // SHOULD BE MODEL

//@ model  public class B{}    " +

/*@ model */
//@  public class D{}    " +  // SHOULD BE MODEL

/*@ model public class M {     " +                  // Line 10
                "    model  public class B{}    " +  // NO POINT
                "     public class C{}    " +
                "  }*/
/*@ model */
/*@ model class Q {     " +
                "  model  public class C{}    " + // NO POINT
                "   public class D{}    " +
                "}*/
//@ model  public class B{}    " +

/*@ model */
//@  public class D{}    " + // BAD

//@ model int m1;    " + // OK

//@ ghost int m1a;    " + // OK

/*@ model */
/*@ ghost */
//@ int q;    " +  // BAD

//@ model int m1;    " + // OK

//@ ghost int m1a;    " + // OK

/*@ model */
/*@ ghost */
//@ int q;    " +  // BAD

/*@ static model public class III {    " +  // Line 16
                "    int m;    " +  // OK
                "    model int m1;    " + // NO NESTING
                "    ghost int m1a;    " + // NO NESTING
                "        " +
                "  }*/
/*@ model class B {     " +  // Line 23
                "  int m;    " +  // OK
                "   model int m1; ghost int m2;     " + // NO NESTING
                "}    */
//@ model int m1;    " + // OK

//@ ghost int m1a;    " + // OK

/*@ model */
/*@ ghost */
//@ int q;    " +  // BAD

/*@ model  class B { int i;  { i = 2; } } */
/*@ model public class B { int i;  { i = 2; } } */
/*@ model public class B { int i;  { i = 2; } } */
/*@ model public class B { int i;  { i = 2; } } */
//@ public model instance int z;    "

//@ static model int z2;    "

/*@ model int m() { return B.n; } */
/*@ model class B { public static int n; } */
/*@ model int m() { return B.n; } */
/*@ model class B { public static int n; } */
/*@ model B m() { return B.n; }  */
/*@ model class B { public static B n; } */
//@ model int m1() { return 0; }    " + // OK

/*@ model */
//@ model int p1();    " +  // OK

/*@ model */
//@ int q();    " +  // BAD

//@ model int m1() { return 0; }    " + // OK

/*@ model */
//@ model int p1();    " +  // OK

/*@ model */
//@ int q();    " +  // BAD

/*@ static model public class III {    " +  // Line 18
                "  void m() {}    " +  // OK
                "  model int m1() { return 0; }    " + // NO NESTING
                "  void p();    " +  // OK - FIXME - resolve the rules about model methods and embedded model declarations
                "  model int p1();    " +  // NO NESTING
                "  }*/
/*@ model class B {     " +  // Line 25
                "  void m() {}    " +  // OK
                "   model int m1() { return 0; }    " + // NO NESTING
                "  void p();    " +  // OK -- FIXME - as above
                "   model int p1();    " +  // NO NESTING
                "}    */
//@ model int m1() { return 0; }    " + // OK

/*@ model */
//@ model int p1();    " +  // OK

/*@ model */
//@ int q();    " +  // BAD

/*@ pure */
//@ model pure boolean m1() { return true; }    " + // OK

//@ invariant m() && m1();    " +

//@ requires m() && m1();    " +

//@ requires m() && m1();    " + // BAD - VISIBILITY PROBLEMS

//@ requires B.m() && B.m1();    " +

//@ requires B.m() && B.m1();    " + // BAD - VISIBILITY PROBLEMS

/*@ pure */
//@ model pure static boolean m1() { return true; }    " + // OK

//@ static invariant m() && m1();    " +

//@ requires JML.erasure(\\typeof(this)) == JML.erasure(\\type(A));    " +

//@ model static public class B{}    " +

/*@ model */
//@ static public class D{}    " + // SHOULD BE MODEL

//@ model  public class B{}    " +

/*@ model */
//@  public class D{}    " +  // SHOULD BE MODEL

/*@ model public class M {     " +                  // Line 10
                "    model  public class B{}    " +  // NO POINT
                "     public class C{}    " +
                "  }*/
/*@ model */
/*@ model class Q {     " +
                "  model  public class C{}    " + // NO POINT
                "   public class D{}    " +
                "}*/
//@ model  public class B{}    " +

/*@ model */
//@  public class D{}    " + // BAD

//@ model int m1;    " + // OK

//@ ghost int m1a;    " + // OK

/*@ model */
/*@ ghost */
//@ int q;    " +  // BAD

//@ model int m1;    " + // OK

//@ ghost int m1a;    " + // OK

/*@ model */
/*@ ghost */
//@ int q;    " +  // BAD

/*@ static model public class III {    " +  // Line 16
                "    int m;    " +  // OK
                "    model int m1;    " + // NO NESTING
                "    ghost int m1a;    " + // NO NESTING
                "        " +
                "  }*/
/*@ model class B {     " +  // Line 23
                "  int m;    " +  // OK
                "   model int m1; ghost int m2;     " + // NO NESTING
                "}    */
//@ model int m1;    " + // OK

//@ ghost int m1a;    " + // OK

/*@ model */
/*@ ghost */
//@ int q;    " +  // BAD

/*@ model  class B { int i;  { i = 2; } } */
/*@ model public class B { int i;  { i = 2; } } */
/*@ model public class B { int i;  { i = 2; } } */
/*@ model public class B { int i;  { i = 2; } } */
//@ public model instance int z;    "

//@ static model int z2;    "

/*@ model int m() { return B.n; } */
/*@ model class B { public static int n; } */
/*@ model int m() { return B.n; } */
/*@ model class B { public static int n; } */
/*@ model B m() { return B.n; }  */
/*@ model class B { public static B n; } */
//@ model int m1() { return 0; }    " + // OK

/*@ model */
//@ model int p1();    " +  // OK

/*@ model */
//@ int q();    " +  // BAD

//@ model int m1() { return 0; }    " + // OK

/*@ model */
//@ model int p1();    " +  // OK

/*@ model */
//@ int q();    " +  // BAD

/*@ static model public class III {    " +  // Line 18
                "  void m() {}    " +  // OK
                "  model int m1() { return 0; }    " + // NO NESTING
                "  void p();    " +  // OK - FIXME - resolve the rules about model methods and embedded model declarations
                "  model int p1();    " +  // NO NESTING
                "  }*/
/*@ model class B {     " +  // Line 25
                "  void m() {}    " +  // OK
                "   model int m1() { return 0; }    " + // NO NESTING
                "  void p();    " +  // OK -- FIXME - as above
                "   model int p1();    " +  // NO NESTING
                "}    */
//@ model int m1() { return 0; }    " + // OK

/*@ model */
//@ model int p1();    " +  // OK

/*@ model */
//@ int q();    " +  // BAD

/*@ pure */
//@ model pure boolean m1() { return true; }    " + // OK

//@ invariant m() && m1();    " +

//@ requires m() && m1();    " +

//@ requires m() && m1();    " + // BAD - VISIBILITY PROBLEMS

//@ requires B.m() && B.m1();    " +

//@ requires B.m() && B.m1();    " + // BAD - VISIBILITY PROBLEMS

/*@ pure */
//@ model pure static boolean m1() { return true; }    " + // OK

//@ static invariant m() && m1();    " +

//@ requires JML.erasure(\\typeof(this)) == JML.erasure(\\type(A));    " +

//@ model static public class B{}    " +

/*@ model */
//@ static public class D{}    " + // SHOULD BE MODEL

//@ model  public class B{}    " +

/*@ model */
//@  public class D{}    " +  // SHOULD BE MODEL

/*@ model public class M {     " +                  // Line 10
                "    model  public class B{}    " +  // NO POINT
                "     public class C{}    " +
                "  }*/
/*@ model */
/*@ model class Q {     " +
                "  model  public class C{}    " + // NO POINT
                "   public class D{}    " +
                "}*/
//@ model  public class B{}    " +

/*@ model */
//@  public class D{}    " + // BAD

//@ model int m1;    " + // OK

//@ ghost int m1a;    " + // OK

/*@ model */
/*@ ghost */
//@ int q;    " +  // BAD

//@ model int m1;    " + // OK

//@ ghost int m1a;    " + // OK

/*@ model */
/*@ ghost */
//@ int q;    " +  // BAD

/*@ static model public class III {    " +  // Line 16
                "    int m;    " +  // OK
                "    model int m1;    " + // NO NESTING
                "    ghost int m1a;    " + // NO NESTING
                "        " +
                "  }*/
/*@ model class B {     " +  // Line 23
                "  int m;    " +  // OK
                "   model int m1; ghost int m2;     " + // NO NESTING
                "}    */
//@ model int m1;    " + // OK

//@ ghost int m1a;    " + // OK

/*@ model */
/*@ ghost */
//@ int q;    " +  // BAD

/*@ model  class B { int i;  { i = 2; } } */
/*@ model public class B { int i;  { i = 2; } } */
/*@ model public class B { int i;  { i = 2; } } */
/*@ model public class B { int i;  { i = 2; } } */
//@ public model instance int z;    "

//@ static model int z2;    "

/*@ pure */

/*@ pure pure */
/*@ pure */
/*@ pure */
/*@ pure */
/*@ pure */

//@ public model class A{}");

/*@model*/
//@        ghost class B{}       class C{

/*@ghost*/
//@  @Ghost class B{}     public class A {

//@ public model class B{}        ",

//@ class B{}        ",

//@ model class B{}        "

//@ public model class B{

//@ public model class B{}    ",

/*@nullable_by_default*/
/*@non_null_by_default*/
/*@nullable_by_default non_null_by_default*/
/*@ pure */
/*@ pure */
/*@ pure */
/*@ pure */
/*@ pure */
/*@ pure */
/*@ instance model  int i; */
/*@ represents i = 8; */
/*@  model static int i; */
/*@ represents i = 8; */
/*@ model instance int i; */
/*@ static represents i = 8; */
/*@ model static int i; */
/*@ static represents i = 8; */
/*@ ghost int i; */
/*@ set i = 8; */
/*@ instance ghost int i; */
/*@ set i = 8; */
/*@ final model static int i; */
/*@ final model instance int j = 0;*/
/*@ ghost int k; */
/*@ model int k; */
/*@ ghost int k; */
/*@ int k; */
/*@pure nullable_by_default*/
/*@helper ghost spec_public*/
/*@pure nullable_by_default*/
/*@helper ghost spec_protected*/
/*@pure spec_public*/
/*@pure spec_protected*/
/*@helper ghost */
/*@nullable_by_default*/
/*@spec_public spec_protected*/
/*@pure spec_public*/
/*@pure spec_protected*/
/*@helper ghost */
/*@nullable_by_default*/
/*@spec_public spec_protected*/
/*@ model  */
/*@ model   class C {}*/
/*@         class C {};*/
/*@ helper spec_public */
/*@ ghost  class C {} */
/*@spec_public spec_protected*/
/*@non_null nullable*/
/*@spec_public non_null instance monitored*/
/*@spec_protected nullable instance monitored*/
/*@helper*/
/*@ghost Object o; */
/*@ghost non_null nullable Object o; */
/*@ghost non_null instance monitored Object o; */
/*@ghost nullable instance monitored Object o; */
/*@ghost helper spec_protected Object o;*/
/*@ghost helper spec_public Object o;*/
/*@model ghost Object o; */
/*@model non_null nullable Object o; */
/*@model non_null instance  Object o; */
/*@model nullable instance  Object o; */
/*@model helper monitored spec_public Object o;*/
/*@model helper monitored spec_protected Object o;*/
/*@ pure non_null spec_protected extract */
/*@ pure non_null helper private extract */
/*@ pure non_null  spec_protected extract */
/*@ pure nullable spec_public */
/*@ pure nullable helper private */
/*@ query */
/*@ spec_public spec_protected */
/*@ non_null nullable */
/*@ pure spec_protected extract */
/*@ pure extract helper private */
/*@ pure spec_public */
/*@ pure helper private */
/*@ instance non_null nullable */
/*@ spec_public spec_protected */
/*@ model pure non_null extract Object m(){ return null; } */
/*@ model pure non_null extract private helper Object m(){ return null; } */
/*@ model pure non_null extract Object m(); */
/*@ model pure nullable void m(){} */
/*@ model pure nullable private helper  void m(){} */
/*@ model instance spec_public spec_protected void m(){}*/
/*@ model non_null nullable  Object m(){}*/
/*@ model non_null */
/*@ model pure extract  A(){} */
/*@ model pure private helper extract  A(){} */
/*@ model pure  */
/*@ model pure private helper */
/*@ model instance non_null nullable spec_public spec_protected A(){} */


/*@ non_null nullable */
/*@ spec_public */
/*@ non_null uninitialized */
/*@ nullable uninitialized */
/*@ non_null ghost */
/*@ non_null ghost Object o; */
/*@ non_null nullable Object o; */
/*@ non_null nullable */
/*@ helper */
/*@ helper ghost  Object o; */
/*@   Object o; */
//@ public requires true;    " +

//@ pure requires true;    " +

//@ code requires true;    " +

//@ public behavior requires true;    " +

//@ pure behavior requires true;    " +

//@ private code behavior requires true;    " +

//@ public also behavior requires true;    " +

//@ pure also behavior requires true;    " +

//@ code also behavior requires true;    " +

//@ private public behavior requires true;    " +

//@ private spec_protected public behavior requires true;    " +

//@ invariant (\\exists nullable Object o; o == null);     " +

//@ invariant (\\exists non_null Object o; o == null);     " +

//@ invariant (\\exists final Object o; o == null);     " +

//@ invariant (\\exists \\readonly Object o; o == null);     " +

//@ invariant (\\exists @Nullable Object o; o == null);     " +

//@ invariant (\\exists @Pure Object o; o == null);     " +

//@ invariant null != new Object { nullable Integer i | i < 10 };     " +

//@ invariant null != new Object { non_null Integer i | i < 10 };     " +

//@ invariant null != new Object { final Integer i | i < 10 };     " +

//@ invariant null != new Object { @Nullable Integer i | i < 10 };    " +

//@ invariant null != new Object { @Pure Integer i | i < 10 };    " +

//@ invariant null != new Object { \\readonly Integer i | i < 10 };     " +

//@ forall nullable Object o1;     " +

//@ forall non_null Object o2;     " +

//@ forall \\readonly Object o3;     " +

//@ forall @Nullable Object o4;     " +

//@ forall @Pure Object o6;     " +

//@ forall final Object o5;     " +

//@ old nullable Object o1 = null;     " +

//@ old non_null Object o2 = null;     " +

//@ old \\readonly Object o3 = null;     " +

//@ old @Nullable Object o4 = null;     " +

//@ old @Pure Object o6 = null;     " +

//@ old final Object o5 = null;     " +

//@ invariant true;     " +

//@ public invariant true;     " +

//@ pure invariant true;     " +

//@ private invariant true;     " +

//@ public private invariant true;     " +

 invariant true;     " +

//@ spec_public invariant true;     " +

//@ invariant (new A() { int m() { return 5; } }) != null;     " +

//@ constraint true;     " +

//@ public constraint true;     " +

//@ pure constraint true;     " +

//@ private constraint true;     " +

//@ public private constraint true;     " +

 constraint true;     " +

//@ spec_public constraint true;     " +

//@ axiom true;     " +

//@ public axiom true;     " +

//@ pure axiom true;     " +

//@ private axiom true;     " +

//@ public private axiom true;     " +

 axiom true;     " +

//@ spec_public axiom true;     " +

//@ initially true;     " +

//@ public initially true;     " +

//@ pure initially true;     " +

//@ private initially true;     " +

//@ public private initially true;     " +

 initially true;     " +

//@ spec_public initially true;     " +

//@ static initially true;     " +

//@ instance initially true;     " +


//@ spec_public spec_protected    "



//@ spec_public spec_protected    "

/*@ secret model int a; */
//@ model secret int x;  }"

/*@ nonnull_by_default*/
//@ requires a[i]>0;    "

//@ requires i >= 0 && i < a.length;    "

//@ requires a[i]>0;    "

//@ requires a[i]>0;    "

/*@ nonnull */
//@ requires i >= 0 && i < a.length;    "

//@ requires a[i]>0;    "

/*@ helper */
/*@ helper protected */
/*@ helper public */
/*@ helper private */
/*@ helper private spec_protected*/
/*@ helper private spec_public */
/*@ pure */

/*@ pure pure */
/*@ pure */
/*@ pure */
/*@ pure */
/*@ pure */

//@ public model class A{}");

/*@model*/
//@        ghost class B{}       class C{

/*@ghost*/
//@  @Ghost class B{}     public class A {

//@ public model class B{}        ",

//@ class B{}        ",

//@ model class B{}        "

//@ public model class B{

//@ public model class B{}    ",

/*@nullable_by_default*/
/*@non_null_by_default*/
/*@nullable_by_default non_null_by_default*/
/*@ pure */
/*@ pure */
/*@ pure */
/*@ pure */
/*@ pure */
/*@ pure */
/*@ instance model  int i; */
/*@ represents i = 8; */
/*@  model static int i; */
/*@ represents i = 8; */
/*@ model instance int i; */
/*@ static represents i = 8; */
/*@ model static int i; */
/*@ static represents i = 8; */
/*@ ghost int i; */
/*@ set i = 8; */
/*@ instance ghost int i; */
/*@ set i = 8; */
/*@ final model static int i; */
/*@ final model instance int j = 0;*/
/*@ ghost int k; */
/*@ model int k; */
/*@ ghost int k; */
/*@ int k; */
/*@pure nullable_by_default*/
/*@helper ghost spec_public*/
/*@pure nullable_by_default*/
/*@helper ghost spec_protected*/
/*@pure spec_public*/
/*@pure spec_protected*/
/*@helper ghost */
/*@nullable_by_default*/
/*@spec_public spec_protected*/
/*@pure spec_public*/
/*@pure spec_protected*/
/*@helper ghost */
/*@nullable_by_default*/
/*@spec_public spec_protected*/
/*@ model  */
/*@ model   class C {}*/
/*@         class C {};*/
/*@ helper spec_public */
/*@ ghost  class C {} */
/*@spec_public spec_protected*/
/*@non_null nullable*/
/*@spec_public non_null instance monitored*/
/*@spec_protected nullable instance monitored*/
/*@helper*/
/*@ghost Object o; */
/*@ghost non_null nullable Object o; */
/*@ghost non_null instance monitored Object o; */
/*@ghost nullable instance monitored Object o; */
/*@ghost helper spec_protected Object o;*/
/*@ghost helper spec_public Object o;*/
/*@model ghost Object o; */
/*@model non_null nullable Object o; */
/*@model non_null instance  Object o; */
/*@model nullable instance  Object o; */
/*@model helper monitored spec_public Object o;*/
/*@model helper monitored spec_protected Object o;*/
/*@ pure non_null spec_protected extract */
/*@ pure non_null helper private extract */
/*@ pure non_null  spec_protected extract */
/*@ pure nullable spec_public */
/*@ pure nullable helper private */
/*@ query */
/*@ spec_public spec_protected */
/*@ non_null nullable */
/*@ pure spec_protected extract */
/*@ pure extract helper private */
/*@ pure spec_public */
/*@ pure helper private */
/*@ instance non_null nullable */
/*@ spec_public spec_protected */
/*@ model pure non_null extract Object m(){ return null; } */
/*@ model pure non_null extract private helper Object m(){ return null; } */
/*@ model pure non_null extract Object m(); */
/*@ model pure nullable void m(){} */
/*@ model pure nullable private helper  void m(){} */
/*@ model instance spec_public spec_protected void m(){}*/
/*@ model non_null nullable  Object m(){}*/
/*@ model non_null */
/*@ model pure extract  A(){} */
/*@ model pure private helper extract  A(){} */
/*@ model pure  */
/*@ model pure private helper */
/*@ model instance non_null nullable spec_public spec_protected A(){} */


/*@ non_null nullable */
/*@ spec_public */
/*@ non_null uninitialized */
/*@ nullable uninitialized */
/*@ non_null ghost */
/*@ non_null ghost Object o; */
/*@ non_null nullable Object o; */
/*@ non_null nullable */
/*@ helper */
/*@ helper ghost  Object o; */
/*@   Object o; */
//@ public requires true;    " +

//@ pure requires true;    " +

//@ code requires true;    " +

//@ public behavior requires true;    " +

//@ pure behavior requires true;    " +

//@ private code behavior requires true;    " +

//@ public also behavior requires true;    " +

//@ pure also behavior requires true;    " +

//@ code also behavior requires true;    " +

//@ private public behavior requires true;    " +

//@ private spec_protected public behavior requires true;    " +

//@ invariant (\\exists nullable Object o; o == null);     " +

//@ invariant (\\exists non_null Object o; o == null);     " +

//@ invariant (\\exists final Object o; o == null);     " +

//@ invariant (\\exists \\readonly Object o; o == null);     " +

//@ invariant (\\exists @Nullable Object o; o == null);     " +

//@ invariant (\\exists @Pure Object o; o == null);     " +

//@ invariant null != new Object { nullable Integer i | i < 10 };     " +

//@ invariant null != new Object { non_null Integer i | i < 10 };     " +

//@ invariant null != new Object { final Integer i | i < 10 };     " +

//@ invariant null != new Object { @Nullable Integer i | i < 10 };    " +

//@ invariant null != new Object { @Pure Integer i | i < 10 };    " +

//@ invariant null != new Object { \\readonly Integer i | i < 10 };     " +

//@ forall nullable Object o1;     " +

//@ forall non_null Object o2;     " +

//@ forall \\readonly Object o3;     " +

//@ forall @Nullable Object o4;     " +

//@ forall @Pure Object o6;     " +

//@ forall final Object o5;     " +

//@ old nullable Object o1 = null;     " +

//@ old non_null Object o2 = null;     " +

//@ old \\readonly Object o3 = null;     " +

//@ old @Nullable Object o4 = null;     " +

//@ old @Pure Object o6 = null;     " +

//@ old final Object o5 = null;     " +

//@ invariant true;     " +

//@ public invariant true;     " +

//@ pure invariant true;     " +

//@ private invariant true;     " +

//@ public private invariant true;     " +

 invariant true;     " +

//@ spec_public invariant true;     " +

//@ invariant (new A() { int m() { return 5; } }) != null;     " +

//@ constraint true;     " +

//@ public constraint true;     " +

//@ pure constraint true;     " +

//@ private constraint true;     " +

//@ public private constraint true;     " +

 constraint true;     " +

//@ spec_public constraint true;     " +

//@ axiom true;     " +

//@ public axiom true;     " +

//@ pure axiom true;     " +

//@ private axiom true;     " +

//@ public private axiom true;     " +

 axiom true;     " +

//@ spec_public axiom true;     " +

//@ initially true;     " +

//@ public initially true;     " +

//@ pure initially true;     " +

//@ private initially true;     " +

//@ public private initially true;     " +

 initially true;     " +

//@ spec_public initially true;     " +

//@ static initially true;     " +

//@ instance initially true;     " +


//@ spec_public spec_protected    "



//@ spec_public spec_protected    "

/*@ secret model int a; */
//@ model secret int x;  }"

/*@ nonnull_by_default*/
//@ requires a[i]>0;    "

//@ requires i >= 0 && i < a.length;    "

//@ requires a[i]>0;    "

//@ requires a[i]>0;    "

/*@ nonnull */
//@ requires i >= 0 && i < a.length;    "

//@ requires a[i]>0;    "

/*@ helper */
/*@ helper protected */
/*@ helper public */
/*@ helper private */
/*@ helper private spec_protected*/
/*@ helper private spec_public */
/*@ pure */

/*@ pure pure */
/*@ pure */
/*@ pure */
/*@ pure */
/*@ pure */

//@ public model class A{}");

/*@model*/
//@        ghost class B{}       class C{

/*@ghost*/
//@  @Ghost class B{}     public class A {

//@ public model class B{}        ",

//@ class B{}        ",

//@ model class B{}        "

//@ public model class B{

//@ public model class B{}    ",

/*@nullable_by_default*/
/*@non_null_by_default*/
/*@nullable_by_default non_null_by_default*/
/*@ pure */
/*@ pure */
/*@ pure */
/*@ pure */
/*@ pure */
/*@ pure */
/*@ instance model  int i; */
/*@ represents i = 8; */
/*@  model static int i; */
/*@ represents i = 8; */
/*@ model instance int i; */
/*@ static represents i = 8; */
/*@ model static int i; */
/*@ static represents i = 8; */
/*@ ghost int i; */
/*@ set i = 8; */
/*@ instance ghost int i; */
/*@ set i = 8; */
/*@ final model static int i; */
/*@ final model instance int j = 0;*/
/*@ ghost int k; */
/*@ model int k; */
/*@ ghost int k; */
/*@ int k; */
/*@pure nullable_by_default*/
/*@helper ghost spec_public*/
/*@pure nullable_by_default*/
/*@helper ghost spec_protected*/
/*@pure spec_public*/
/*@pure spec_protected*/
/*@helper ghost */
/*@nullable_by_default*/
/*@spec_public spec_protected*/
/*@pure spec_public*/
/*@pure spec_protected*/
/*@helper ghost */
/*@nullable_by_default*/
/*@spec_public spec_protected*/
/*@ model  */
/*@ model   class C {}*/
/*@         class C {};*/
/*@ helper spec_public */
/*@ ghost  class C {} */
/*@spec_public spec_protected*/
/*@non_null nullable*/
/*@spec_public non_null instance monitored*/
/*@spec_protected nullable instance monitored*/
/*@helper*/
/*@ghost Object o; */
/*@ghost non_null nullable Object o; */
/*@ghost non_null instance monitored Object o; */
/*@ghost nullable instance monitored Object o; */
/*@ghost helper spec_protected Object o;*/
/*@ghost helper spec_public Object o;*/
/*@model ghost Object o; */
/*@model non_null nullable Object o; */
/*@model non_null instance  Object o; */
/*@model nullable instance  Object o; */
/*@model helper monitored spec_public Object o;*/
/*@model helper monitored spec_protected Object o;*/
/*@ pure non_null spec_protected extract */
/*@ pure non_null helper private extract */
/*@ pure non_null  spec_protected extract */
/*@ pure nullable spec_public */
/*@ pure nullable helper private */
/*@ query */
/*@ spec_public spec_protected */
/*@ non_null nullable */
/*@ pure spec_protected extract */
/*@ pure extract helper private */
/*@ pure spec_public */
/*@ pure helper private */
/*@ instance non_null nullable */
/*@ spec_public spec_protected */
/*@ model pure non_null extract Object m(){ return null; } */
/*@ model pure non_null extract private helper Object m(){ return null; } */
/*@ model pure non_null extract Object m(); */
/*@ model pure nullable void m(){} */
/*@ model pure nullable private helper  void m(){} */
/*@ model instance spec_public spec_protected void m(){}*/
/*@ model non_null nullable  Object m(){}*/
/*@ model non_null */
/*@ model pure extract  A(){} */
/*@ model pure private helper extract  A(){} */
/*@ model pure  */
/*@ model pure private helper */
/*@ model instance non_null nullable spec_public spec_protected A(){} */


/*@ non_null nullable */
/*@ spec_public */
/*@ non_null uninitialized */
/*@ nullable uninitialized */
/*@ non_null ghost */
/*@ non_null ghost Object o; */
/*@ non_null nullable Object o; */
/*@ non_null nullable */
/*@ helper */
/*@ helper ghost  Object o; */
/*@   Object o; */
//@ public requires true;    " +

//@ pure requires true;    " +

//@ code requires true;    " +

//@ public behavior requires true;    " +

//@ pure behavior requires true;    " +

//@ private code behavior requires true;    " +

//@ public also behavior requires true;    " +

//@ pure also behavior requires true;    " +

//@ code also behavior requires true;    " +

//@ private public behavior requires true;    " +

//@ private spec_protected public behavior requires true;    " +

//@ invariant (\\exists nullable Object o; o == null);     " +

//@ invariant (\\exists non_null Object o; o == null);     " +

//@ invariant (\\exists final Object o; o == null);     " +

//@ invariant (\\exists \\readonly Object o; o == null);     " +

//@ invariant (\\exists @Nullable Object o; o == null);     " +

//@ invariant (\\exists @Pure Object o; o == null);     " +

//@ invariant null != new Object { nullable Integer i | i < 10 };     " +

//@ invariant null != new Object { non_null Integer i | i < 10 };     " +

//@ invariant null != new Object { final Integer i | i < 10 };     " +

//@ invariant null != new Object { @Nullable Integer i | i < 10 };    " +

//@ invariant null != new Object { @Pure Integer i | i < 10 };    " +

//@ invariant null != new Object { \\readonly Integer i | i < 10 };     " +

//@ forall nullable Object o1;     " +

//@ forall non_null Object o2;     " +

//@ forall \\readonly Object o3;     " +

//@ forall @Nullable Object o4;     " +

//@ forall @Pure Object o6;     " +

//@ forall final Object o5;     " +

//@ old nullable Object o1 = null;     " +

//@ old non_null Object o2 = null;     " +

//@ old \\readonly Object o3 = null;     " +

//@ old @Nullable Object o4 = null;     " +

//@ old @Pure Object o6 = null;     " +

//@ old final Object o5 = null;     " +

//@ invariant true;     " +

//@ public invariant true;     " +

//@ pure invariant true;     " +

//@ private invariant true;     " +

//@ public private invariant true;     " +

 invariant true;     " +

//@ spec_public invariant true;     " +

//@ invariant (new A() { int m() { return 5; } }) != null;     " +

//@ constraint true;     " +

//@ public constraint true;     " +

//@ pure constraint true;     " +

//@ private constraint true;     " +

//@ public private constraint true;     " +

 constraint true;     " +

//@ spec_public constraint true;     " +

//@ axiom true;     " +

//@ public axiom true;     " +

//@ pure axiom true;     " +

//@ private axiom true;     " +

//@ public private axiom true;     " +

 axiom true;     " +

//@ spec_public axiom true;     " +

//@ initially true;     " +

//@ public initially true;     " +

//@ pure initially true;     " +

//@ private initially true;     " +

//@ public private initially true;     " +

 initially true;     " +

//@ spec_public initially true;     " +

//@ static initially true;     " +

//@ instance initially true;     " +


//@ spec_public spec_protected    "



//@ spec_public spec_protected    "

/*@ secret model int a; */
//@ model secret int x;  }"

/*@ nonnull_by_default*/
//@ requires a[i]>0;    "

//@ requires i >= 0 && i < a.length;    "

//@ requires a[i]>0;    "

//@ requires a[i]>0;    "

/*@ nonnull */
//@ requires i >= 0 && i < a.length;    "

//@ requires a[i]>0;    "

/*@ helper */
/*@ helper protected */
/*@ helper public */
/*@ helper private */
/*@ helper private spec_protected*/
/*@ helper private spec_public */
/*@ pure */

/*@ pure pure */
/*@ pure */
/*@ pure */
/*@ pure */
/*@ pure */

//@ public model class A{}");

/*@model*/
//@        ghost class B{}       class C{

/*@ghost*/
//@  @Ghost class B{}     public class A {

//@ public model class B{}        ",

//@ class B{}        ",

//@ model class B{}        "

//@ public model class B{

//@ public model class B{}    ",

/*@nullable_by_default*/
/*@non_null_by_default*/
/*@nullable_by_default non_null_by_default*/
/*@ pure */
/*@ pure */
/*@ pure */
/*@ pure */
/*@ pure */
/*@ pure */
/*@ instance model  int i; */
/*@ represents i = 8; */
/*@  model static int i; */
/*@ represents i = 8; */
/*@ model instance int i; */
/*@ static represents i = 8; */
/*@ model static int i; */
/*@ static represents i = 8; */
/*@ ghost int i; */
/*@ set i = 8; */
/*@ instance ghost int i; */
/*@ set i = 8; */
/*@ final model static int i; */
/*@ final model instance int j = 0;*/
/*@ ghost int k; */
/*@ model int k; */
/*@ ghost int k; */
/*@ int k; */
/*@pure nullable_by_default*/
/*@helper ghost spec_public*/
/*@pure nullable_by_default*/
/*@helper ghost spec_protected*/
/*@pure spec_public*/
/*@pure spec_protected*/
/*@helper ghost */
/*@nullable_by_default*/
/*@spec_public spec_protected*/
/*@pure spec_public*/
/*@pure spec_protected*/
/*@helper ghost */
/*@nullable_by_default*/
/*@spec_public spec_protected*/
/*@ model  */
/*@ model   class C {}*/
/*@         class C {};*/
/*@ helper spec_public */
/*@ ghost  class C {} */
/*@spec_public spec_protected*/
/*@non_null nullable*/
/*@spec_public non_null instance monitored*/
/*@spec_protected nullable instance monitored*/
/*@helper*/
/*@ghost Object o; */
/*@ghost non_null nullable Object o; */
/*@ghost non_null instance monitored Object o; */
/*@ghost nullable instance monitored Object o; */
/*@ghost helper spec_protected Object o;*/
/*@ghost helper spec_public Object o;*/
/*@model ghost Object o; */
/*@model non_null nullable Object o; */
/*@model non_null instance  Object o; */
/*@model nullable instance  Object o; */
/*@model helper monitored spec_public Object o;*/
/*@model helper monitored spec_protected Object o;*/
/*@ pure non_null spec_protected extract */
/*@ pure non_null helper private extract */
/*@ pure non_null  spec_protected extract */
/*@ pure nullable spec_public */
/*@ pure nullable helper private */
/*@ query */
/*@ spec_public spec_protected */
/*@ non_null nullable */
/*@ pure spec_protected extract */
/*@ pure extract helper private */
/*@ pure spec_public */
/*@ pure helper private */
/*@ instance non_null nullable */
/*@ spec_public spec_protected */
/*@ model pure non_null extract Object m(){ return null; } */
/*@ model pure non_null extract private helper Object m(){ return null; } */
/*@ model pure non_null extract Object m(); */
/*@ model pure nullable void m(){} */
/*@ model pure nullable private helper  void m(){} */
/*@ model instance spec_public spec_protected void m(){}*/
/*@ model non_null nullable  Object m(){}*/
/*@ model non_null */
/*@ model pure extract  A(){} */
/*@ model pure private helper extract  A(){} */
/*@ model pure  */
/*@ model pure private helper */
/*@ model instance non_null nullable spec_public spec_protected A(){} */


/*@ non_null nullable */
/*@ spec_public */
/*@ non_null uninitialized */
/*@ nullable uninitialized */
/*@ non_null ghost */
/*@ non_null ghost Object o; */
/*@ non_null nullable Object o; */
/*@ non_null nullable */
/*@ helper */
/*@ helper ghost  Object o; */
/*@   Object o; */
//@ public requires true;    " +

//@ pure requires true;    " +

//@ code requires true;    " +

//@ public behavior requires true;    " +

//@ pure behavior requires true;    " +

//@ private code behavior requires true;    " +

//@ public also behavior requires true;    " +

//@ pure also behavior requires true;    " +

//@ code also behavior requires true;    " +

//@ private public behavior requires true;    " +

//@ private spec_protected public behavior requires true;    " +

//@ invariant (\\exists nullable Object o; o == null);     " +

//@ invariant (\\exists non_null Object o; o == null);     " +

//@ invariant (\\exists final Object o; o == null);     " +

//@ invariant (\\exists \\readonly Object o; o == null);     " +

//@ invariant (\\exists @Nullable Object o; o == null);     " +

//@ invariant (\\exists @Pure Object o; o == null);     " +

//@ invariant null != new Object { nullable Integer i | i < 10 };     " +

//@ invariant null != new Object { non_null Integer i | i < 10 };     " +

//@ invariant null != new Object { final Integer i | i < 10 };     " +

//@ invariant null != new Object { @Nullable Integer i | i < 10 };    " +

//@ invariant null != new Object { @Pure Integer i | i < 10 };    " +

//@ invariant null != new Object { \\readonly Integer i | i < 10 };     " +

//@ forall nullable Object o1;     " +

//@ forall non_null Object o2;     " +

//@ forall \\readonly Object o3;     " +

//@ forall @Nullable Object o4;     " +

//@ forall @Pure Object o6;     " +

//@ forall final Object o5;     " +

//@ old nullable Object o1 = null;     " +

//@ old non_null Object o2 = null;     " +

//@ old \\readonly Object o3 = null;     " +

//@ old @Nullable Object o4 = null;     " +

//@ old @Pure Object o6 = null;     " +

//@ old final Object o5 = null;     " +

//@ invariant true;     " +

//@ public invariant true;     " +

//@ pure invariant true;     " +

//@ private invariant true;     " +

//@ public private invariant true;     " +

 invariant true;     " +

//@ spec_public invariant true;     " +

//@ invariant (new A() { int m() { return 5; } }) != null;     " +

//@ constraint true;     " +

//@ public constraint true;     " +

//@ pure constraint true;     " +

//@ private constraint true;     " +

//@ public private constraint true;     " +

 constraint true;     " +

//@ spec_public constraint true;     " +

//@ axiom true;     " +

//@ public axiom true;     " +

//@ pure axiom true;     " +

//@ private axiom true;     " +

//@ public private axiom true;     " +

 axiom true;     " +

//@ spec_public axiom true;     " +

//@ initially true;     " +

//@ public initially true;     " +

//@ pure initially true;     " +

//@ private initially true;     " +

//@ public private initially true;     " +

 initially true;     " +

//@ spec_public initially true;     " +

//@ static initially true;     " +

//@ instance initially true;     " +


//@ spec_public spec_protected    "



//@ spec_public spec_protected    "

/*@ secret model int a; */
//@ model secret int x;  }"

/*@ nonnull_by_default*/
//@ requires a[i]>0;    "

//@ requires i >= 0 && i < a.length;    "

//@ requires a[i]>0;    "

//@ requires a[i]>0;    "

/*@ nonnull */
//@ requires i >= 0 && i < a.length;    "

//@ requires a[i]>0;    "

/*@ helper */
/*@ helper protected */
/*@ helper public */
/*@ helper private */
/*@ helper private spec_protected*/
/*@ helper private spec_public */
/*@ pure */

/*@ pure pure */
/*@ pure */
/*@ pure */
/*@ pure */
/*@ pure */

//@ public model class A{}");

/*@model*/
//@        ghost class B{}       class C{

/*@ghost*/
//@  @Ghost class B{}     public class A {

//@ public model class B{}        ",

//@ class B{}        ",

//@ model class B{}        "

//@ public model class B{

//@ public model class B{}    ",

/*@nullable_by_default*/
/*@non_null_by_default*/
/*@nullable_by_default non_null_by_default*/
/*@ pure */
/*@ pure */
/*@ pure */
/*@ pure */
/*@ pure */
/*@ pure */
/*@ instance model  int i; */
/*@ represents i = 8; */
/*@  model static int i; */
/*@ represents i = 8; */
/*@ model instance int i; */
/*@ static represents i = 8; */
/*@ model static int i; */
/*@ static represents i = 8; */
/*@ ghost int i; */
/*@ set i = 8; */
/*@ instance ghost int i; */
/*@ set i = 8; */
/*@ final model static int i; */
/*@ final model instance int j = 0;*/
/*@ ghost int k; */
/*@ model int k; */
/*@ ghost int k; */
/*@ int k; */
/*@pure nullable_by_default*/
/*@helper ghost spec_public*/
/*@pure nullable_by_default*/
/*@helper ghost spec_protected*/
/*@pure spec_public*/
/*@pure spec_protected*/
/*@helper ghost */
/*@nullable_by_default*/
/*@spec_public spec_protected*/
/*@pure spec_public*/
/*@pure spec_protected*/
/*@helper ghost */
/*@nullable_by_default*/
/*@spec_public spec_protected*/
/*@ model  */
/*@ model   class C {}*/
/*@         class C {};*/
/*@ helper spec_public */
/*@ ghost  class C {} */
/*@spec_public spec_protected*/
/*@non_null nullable*/
/*@spec_public non_null instance monitored*/
/*@spec_protected nullable instance monitored*/
/*@helper*/
/*@ghost Object o; */
/*@ghost non_null nullable Object o; */
/*@ghost non_null instance monitored Object o; */
/*@ghost nullable instance monitored Object o; */
/*@ghost helper spec_protected Object o;*/
/*@ghost helper spec_public Object o;*/
/*@model ghost Object o; */
/*@model non_null nullable Object o; */
/*@model non_null instance  Object o; */
/*@model nullable instance  Object o; */
/*@model helper monitored spec_public Object o;*/
/*@model helper monitored spec_protected Object o;*/
/*@ pure non_null spec_protected extract */
/*@ pure non_null helper private extract */
/*@ pure non_null  spec_protected extract */
/*@ pure nullable spec_public */
/*@ pure nullable helper private */
/*@ query */
/*@ spec_public spec_protected */
/*@ non_null nullable */
/*@ pure spec_protected extract */
/*@ pure extract helper private */
/*@ pure spec_public */
/*@ pure helper private */
/*@ instance non_null nullable */
/*@ spec_public spec_protected */
/*@ model pure non_null extract Object m(){ return null; } */
/*@ model pure non_null extract private helper Object m(){ return null; } */
/*@ model pure non_null extract Object m(); */
/*@ model pure nullable void m(){} */
/*@ model pure nullable private helper  void m(){} */
/*@ model instance spec_public spec_protected void m(){}*/
/*@ model non_null nullable  Object m(){}*/
/*@ model non_null */
/*@ model pure extract  A(){} */
/*@ model pure private helper extract  A(){} */
/*@ model pure  */
/*@ model pure private helper */
/*@ model instance non_null nullable spec_public spec_protected A(){} */


/*@ non_null nullable */
/*@ spec_public */
/*@ non_null uninitialized */
/*@ nullable uninitialized */
/*@ non_null ghost */
/*@ non_null ghost Object o; */
/*@ non_null nullable Object o; */
/*@ non_null nullable */
/*@ helper */
/*@ helper ghost  Object o; */
/*@   Object o; */
//@ public requires true;    " +

//@ pure requires true;    " +

//@ code requires true;    " +

//@ public behavior requires true;    " +

//@ pure behavior requires true;    " +

//@ private code behavior requires true;    " +

//@ public also behavior requires true;    " +

//@ pure also behavior requires true;    " +

//@ code also behavior requires true;    " +

//@ private public behavior requires true;    " +

//@ private spec_protected public behavior requires true;    " +

//@ invariant (\\exists nullable Object o; o == null);     " +

//@ invariant (\\exists non_null Object o; o == null);     " +

//@ invariant (\\exists final Object o; o == null);     " +

//@ invariant (\\exists \\readonly Object o; o == null);     " +

//@ invariant (\\exists @Nullable Object o; o == null);     " +

//@ invariant (\\exists @Pure Object o; o == null);     " +

//@ invariant null != new Object { nullable Integer i | i < 10 };     " +

//@ invariant null != new Object { non_null Integer i | i < 10 };     " +

//@ invariant null != new Object { final Integer i | i < 10 };     " +

//@ invariant null != new Object { @Nullable Integer i | i < 10 };    " +

//@ invariant null != new Object { @Pure Integer i | i < 10 };    " +

//@ invariant null != new Object { \\readonly Integer i | i < 10 };     " +

//@ forall nullable Object o1;     " +

//@ forall non_null Object o2;     " +

//@ forall \\readonly Object o3;     " +

//@ forall @Nullable Object o4;     " +

//@ forall @Pure Object o6;     " +

//@ forall final Object o5;     " +

//@ old nullable Object o1 = null;     " +

//@ old non_null Object o2 = null;     " +

//@ old \\readonly Object o3 = null;     " +

//@ old @Nullable Object o4 = null;     " +

//@ old @Pure Object o6 = null;     " +

//@ old final Object o5 = null;     " +

//@ invariant true;     " +

//@ public invariant true;     " +

//@ pure invariant true;     " +

//@ private invariant true;     " +

//@ public private invariant true;     " +

 invariant true;     " +

//@ spec_public invariant true;     " +

//@ invariant (new A() { int m() { return 5; } }) != null;     " +

//@ constraint true;     " +

//@ public constraint true;     " +

//@ pure constraint true;     " +

//@ private constraint true;     " +

//@ public private constraint true;     " +

 constraint true;     " +

//@ spec_public constraint true;     " +

//@ axiom true;     " +

//@ public axiom true;     " +

//@ pure axiom true;     " +

//@ private axiom true;     " +

//@ public private axiom true;     " +

 axiom true;     " +

//@ spec_public axiom true;     " +

//@ initially true;     " +

//@ public initially true;     " +

//@ pure initially true;     " +

//@ private initially true;     " +

//@ public private initially true;     " +

 initially true;     " +

//@ spec_public initially true;     " +

//@ static initially true;     " +

//@ instance initially true;     " +


//@ spec_public spec_protected    "



//@ spec_public spec_protected    "

/*@ secret model int a; */
//@ model secret int x;  }"

/*@ nonnull_by_default*/
//@ requires a[i]>0;    "

//@ requires i >= 0 && i < a.length;    "

//@ requires a[i]>0;    "

//@ requires a[i]>0;    "

/*@ nonnull */
//@ requires i >= 0 && i < a.length;    "

//@ requires a[i]>0;    "

/*@ helper */
/*@ helper protected */
/*@ helper public */
/*@ helper private */
/*@ helper private spec_protected*/
/*@ helper private spec_public */
//@ invariant k;    " +

//@ requires k;    " +

//@ constraint \\old(k); constraint \\old(d);    " +

//@ assert k;    " +

//@ assert k;    " +

//@ assert \\old(k);    " +

//@ assert \\old(d);    " +

//@ ghost Object k;    " +

//@ assert k == 1;    " + // ERROR - k is Object

//@ assert k == null;    " + // OK

//@ ghost int k;      " +

//@ ghost double k;    " +

//@ ghost double k;    " +

//@ ghost double k;    " +

//@ ghost int d;    " +

//@ ghost double k;    " +

//@ assert k;    " +

//@ model double k;    " +

//@ assert k;    " +

//@ model pure double k() { return 0; }    " +

//@ assert k();    " +

//@ model double k() { return 1; }    " +

/*@pure*/
//@ model pure double k(boolean d) { return 0; }    " +

//@ requires k(true);     " +

//@ requires k(0);     " +

/*@pure*/
//@ model pure static double k(int i) { return 0; }    " +

//@ requires k(0);     " +

//@ assume k(0);    " +

//@ model pure static double k(int i);    " +

//@ requires k(0);     " +

//@ assume k(0);    " +

//@ model static class B { static double i; }      " +

//@ ghost B bb;    " +

//@ assert B.i;    " +

//@ model static class B { static double i; }      " +

//@ ghost B bb;    " +

//@ assert B.i;    " +

//@ model static class B { static double i; }      " +

//@ ghost B bb;    " +

//@ assert B.i;    " + // OK, but wrong type

//@ model class A {}    " +

//@ model class B {}    " +

//@ model class B {}    " +

/*@ model class C {}*/
//@ invariant k;    " +

//@ requires k;    " +

//@ constraint \\old(k); constraint \\old(d);    " +

//@ assert k;    " +

//@ assert k;    " +

//@ assert \\old(k);    " +

//@ assert \\old(d);    " +

//@ ghost Object k;    " +

//@ assert k == 1;    " + // ERROR - k is Object

//@ assert k == null;    " + // OK

//@ ghost int k;      " +

//@ ghost double k;    " +

//@ ghost double k;    " +

//@ ghost double k;    " +

//@ ghost int d;    " +

//@ ghost double k;    " +

//@ assert k;    " +

//@ model double k;    " +

//@ assert k;    " +

//@ model pure double k() { return 0; }    " +

//@ assert k();    " +

//@ model double k() { return 1; }    " +

/*@pure*/
//@ model pure double k(boolean d) { return 0; }    " +

//@ requires k(true);     " +

//@ requires k(0);     " +

/*@pure*/
//@ model pure static double k(int i) { return 0; }    " +

//@ requires k(0);     " +

//@ assume k(0);    " +

//@ model pure static double k(int i);    " +

//@ requires k(0);     " +

//@ assume k(0);    " +

//@ model static class B { static double i; }      " +

//@ ghost B bb;    " +

//@ assert B.i;    " +

//@ model static class B { static double i; }      " +

//@ ghost B bb;    " +

//@ assert B.i;    " +

//@ model static class B { static double i; }      " +

//@ ghost B bb;    " +

//@ assert B.i;    " + // OK, but wrong type

//@ model class A {}    " +

//@ model class B {}    " +

//@ model class B {}    " +

/*@ model class C {}*/
//@ invariant k;    " +

//@ requires k;    " +

//@ constraint \\old(k); constraint \\old(d);    " +

//@ assert k;    " +

//@ assert k;    " +

//@ assert \\old(k);    " +

//@ assert \\old(d);    " +

//@ ghost Object k;    " +

//@ assert k == 1;    " + // ERROR - k is Object

//@ assert k == null;    " + // OK

//@ ghost int k;      " +

//@ ghost double k;    " +

//@ ghost double k;    " +

//@ ghost double k;    " +

//@ ghost int d;    " +

//@ ghost double k;    " +

//@ assert k;    " +

//@ model double k;    " +

//@ assert k;    " +

//@ model pure double k() { return 0; }    " +

//@ assert k();    " +

//@ model double k() { return 1; }    " +

/*@pure*/
//@ model pure double k(boolean d) { return 0; }    " +

//@ requires k(true);     " +

//@ requires k(0);     " +

/*@pure*/
//@ model pure static double k(int i) { return 0; }    " +

//@ requires k(0);     " +

//@ assume k(0);    " +

//@ model pure static double k(int i);    " +

//@ requires k(0);     " +

//@ assume k(0);    " +

//@ model static class B { static double i; }      " +

//@ ghost B bb;    " +

//@ assert B.i;    " +

//@ model static class B { static double i; }      " +

//@ ghost B bb;    " +

//@ assert B.i;    " +

//@ model static class B { static double i; }      " +

//@ ghost B bb;    " +

//@ assert B.i;    " + // OK, but wrong type

//@ model class A {}    " +

//@ model class B {}    " +

//@ model class B {}    " +

/*@ model class C {}*/
//@ invariant k;    " +

//@ requires k;    " +

//@ constraint \\old(k); constraint \\old(d);    " +

//@ assert k;    " +

//@ assert k;    " +

//@ assert \\old(k);    " +

//@ assert \\old(d);    " +

//@ ghost Object k;    " +

//@ assert k == 1;    " + // ERROR - k is Object

//@ assert k == null;    " + // OK

//@ ghost int k;      " +

//@ ghost double k;    " +

//@ ghost double k;    " +

//@ ghost double k;    " +

//@ ghost int d;    " +

//@ ghost double k;    " +

//@ assert k;    " +

//@ model double k;    " +

//@ assert k;    " +

//@ model pure double k() { return 0; }    " +

//@ assert k();    " +

//@ model double k() { return 1; }    " +

/*@pure*/
//@ model pure double k(boolean d) { return 0; }    " +

//@ requires k(true);     " +

//@ requires k(0);     " +

/*@pure*/
//@ model pure static double k(int i) { return 0; }    " +

//@ requires k(0);     " +

//@ assume k(0);    " +

//@ model pure static double k(int i);    " +

//@ requires k(0);     " +

//@ assume k(0);    " +

//@ model static class B { static double i; }      " +

//@ ghost B bb;    " +

//@ assert B.i;    " +

//@ model static class B { static double i; }      " +

//@ ghost B bb;    " +

//@ assert B.i;    " +

//@ model static class B { static double i; }      " +

//@ ghost B bb;    " +

//@ assert B.i;    " + // OK, but wrong type

//@ model class A {}    " +

//@ model class B {}    " +

//@ model class B {}    " +

/*@ model class C {}*/
//@ invariant k;    " +

//@ requires k;    " +

//@ constraint \\old(k); constraint \\old(d);    " +

//@ assert k;    " +

//@ assert k;    " +

//@ assert \\old(k);    " +

//@ assert \\old(d);    " +

//@ ghost Object k;    " +

//@ assert k == 1;    " + // ERROR - k is Object

//@ assert k == null;    " + // OK

//@ ghost int k;      " +

//@ ghost double k;    " +

//@ ghost double k;    " +

//@ ghost double k;    " +

//@ ghost int d;    " +

//@ ghost double k;    " +

//@ assert k;    " +

//@ model double k;    " +

//@ assert k;    " +

//@ model pure double k() { return 0; }    " +

//@ assert k();    " +

//@ model double k() { return 1; }    " +

/*@pure*/
//@ model pure double k(boolean d) { return 0; }    " +

//@ requires k(true);     " +

//@ requires k(0);     " +

/*@pure*/
//@ model pure static double k(int i) { return 0; }    " +

//@ requires k(0);     " +

//@ assume k(0);    " +

//@ model pure static double k(int i);    " +

//@ requires k(0);     " +

//@ assume k(0);    " +

//@ model static class B { static double i; }      " +

//@ ghost B bb;    " +

//@ assert B.i;    " +

//@ model static class B { static double i; }      " +

//@ ghost B bb;    " +

//@ assert B.i;    " +

//@ model static class B { static double i; }      " +

//@ ghost B bb;    " +

//@ assert B.i;    " + // OK, but wrong type

//@ model class A {}    " +

//@ model class B {}    " +

//@ model class B {}    " +

/*@ model class C {}*/
//@ requires \    ot_specified; ensures \    ot_specified; diverges \    ot_specified; when \    ot_specified;      public void m(boolean i) {}}"

//@ signals \    ot_specified;      public void m(boolean i) {}}"

//@ signals (Exception) \    ot_specified;      public void m(boolean i) {}}"

//@ signals_only \    ot_specified;      public void m(boolean i) {}}"

//@ assignable \    ot_specified; assignable \    ot_specified, \    ot_specified;      public void m(boolean i) {}}"

//@ measured_by \    ot_specified; working_space \    ot_specified; duration \    ot_specified;      public void m(boolean i) {}}"

//@ measured_by \    ot_specified if true; working_space \    ot_specified if false ; duration \    ot_specified if true;      public void m(boolean i) {}}"

//@ callable \    ot_specified; accessible \    ot_specified; captures \    ot_specified;       public void m(boolean i) {}}"

//@ requires \    ot_specified; ensures \    ot_specified; diverges \    ot_specified; when \    ot_specified;      public void m(boolean i) {}}"

//@ signals \    ot_specified;      public void m(boolean i) {}}"

//@ signals (Exception) \    ot_specified;      public void m(boolean i) {}}"

//@ signals_only \    ot_specified;      public void m(boolean i) {}}"

//@ assignable \    ot_specified; assignable \    ot_specified, \    ot_specified;      public void m(boolean i) {}}"

//@ measured_by \    ot_specified; working_space \    ot_specified; duration \    ot_specified;      public void m(boolean i) {}}"

//@ measured_by \    ot_specified if true; working_space \    ot_specified if false ; duration \    ot_specified if true;      public void m(boolean i) {}}"

//@ callable \    ot_specified; accessible \    ot_specified; captures \    ot_specified;       public void m(boolean i) {}}"

//@ requires \    ot_specified; ensures \    ot_specified; diverges \    ot_specified; when \    ot_specified;      public void m(boolean i) {}}"

//@ signals \    ot_specified;      public void m(boolean i) {}}"

//@ signals (Exception) \    ot_specified;      public void m(boolean i) {}}"

//@ signals_only \    ot_specified;      public void m(boolean i) {}}"

//@ assignable \    ot_specified; assignable \    ot_specified, \    ot_specified;      public void m(boolean i) {}}"

//@ measured_by \    ot_specified; working_space \    ot_specified; duration \    ot_specified;      public void m(boolean i) {}}"

//@ measured_by \    ot_specified if true; working_space \    ot_specified if false ; duration \    ot_specified if true;      public void m(boolean i) {}}"

//@ callable \    ot_specified; accessible \    ot_specified; captures \    ot_specified;       public void m(boolean i) {}}"

//@ requires \    ot_specified; ensures \    ot_specified; diverges \    ot_specified; when \    ot_specified;      public void m(boolean i) {}}"

//@ signals \    ot_specified;      public void m(boolean i) {}}"

//@ signals (Exception) \    ot_specified;      public void m(boolean i) {}}"

//@ signals_only \    ot_specified;      public void m(boolean i) {}}"

//@ assignable \    ot_specified; assignable \    ot_specified, \    ot_specified;      public void m(boolean i) {}}"

//@ measured_by \    ot_specified; working_space \    ot_specified; duration \    ot_specified;      public void m(boolean i) {}}"

//@ measured_by \    ot_specified if true; working_space \    ot_specified if false ; duration \    ot_specified if true;      public void m(boolean i) {}}"

//@ callable \    ot_specified; accessible \    ot_specified; captures \    ot_specified;       public void m(boolean i) {}}"

//@ requires \    ot_specified; ensures \    ot_specified; diverges \    ot_specified; when \    ot_specified;      public void m(boolean i) {}}"

//@ signals \    ot_specified;      public void m(boolean i) {}}"

//@ signals (Exception) \    ot_specified;      public void m(boolean i) {}}"

//@ signals_only \    ot_specified;      public void m(boolean i) {}}"

//@ assignable \    ot_specified; assignable \    ot_specified, \    ot_specified;      public void m(boolean i) {}}"

//@ measured_by \    ot_specified; working_space \    ot_specified; duration \    ot_specified;      public void m(boolean i) {}}"

//@ measured_by \    ot_specified if true; working_space \    ot_specified if false ; duration \    ot_specified if true;      public void m(boolean i) {}}"

//@ callable \    ot_specified; accessible \    ot_specified; captures \    ot_specified;       public void m(boolean i) {}}"

/*@ nowarn Z; */
//@ nowarn X;     /*@ nowarn Y; */ class A{

/*@ nowarn Z ZZ ZZZ; */
//@ nowarn X,A,B;     /*@ nowarn Y, YY,  YYY; */ class A{

/*@ nowarn Z ; nowarn Q; */
//@ nowarn X,A,B;     /*@ nowarn Y, YY,  YYY; */ class A{

/*@ nowarn Z  */
//@ nowarn X    /*@ nowarn ; */ class A{

/*@ nowarn Z  */
//@ nowarn X    /*@ nowarn ; */ class A{

/*@ nowarn nowarn */
/*@ nowarn ; */
/*@ pure nowarn Y; */
/*@ pure nowarn Y */
/*@ pure nowarn C; nullable_by_default */
/*@ pure nowarn C nullable            */
/*@  nowarn C! ; */
/*@ nowarn Z; */
//@ nowarn X;     /*@ nowarn Y; */ class A{

/*@ nowarn Z ZZ ZZZ; */
//@ nowarn X,A,B;     /*@ nowarn Y, YY,  YYY; */ class A{

/*@ nowarn Z ; nowarn Q; */
//@ nowarn X,A,B;     /*@ nowarn Y, YY,  YYY; */ class A{

/*@ nowarn Z  */
//@ nowarn X    /*@ nowarn ; */ class A{

/*@ nowarn Z  */
//@ nowarn X    /*@ nowarn ; */ class A{

/*@ nowarn nowarn */
/*@ nowarn ; */
/*@ pure nowarn Y; */
/*@ pure nowarn Y */
/*@ pure nowarn C; nullable_by_default */
/*@ pure nowarn C nullable            */
/*@  nowarn C! ; */
/*@ nowarn Z; */
//@ nowarn X;     /*@ nowarn Y; */ class A{

/*@ nowarn Z ZZ ZZZ; */
//@ nowarn X,A,B;     /*@ nowarn Y, YY,  YYY; */ class A{

/*@ nowarn Z ; nowarn Q; */
//@ nowarn X,A,B;     /*@ nowarn Y, YY,  YYY; */ class A{

/*@ nowarn Z  */
//@ nowarn X    /*@ nowarn ; */ class A{

/*@ nowarn Z  */
//@ nowarn X    /*@ nowarn ; */ class A{

/*@ nowarn nowarn */
/*@ nowarn ; */
/*@ pure nowarn Y; */
/*@ pure nowarn Y */
/*@ pure nowarn C; nullable_by_default */
/*@ pure nowarn C nullable            */
/*@  nowarn C! ; */
/*@ nowarn Z; */
//@ nowarn X;     /*@ nowarn Y; */ class A{

/*@ nowarn Z ZZ ZZZ; */
//@ nowarn X,A,B;     /*@ nowarn Y, YY,  YYY; */ class A{

/*@ nowarn Z ; nowarn Q; */
//@ nowarn X,A,B;     /*@ nowarn Y, YY,  YYY; */ class A{

/*@ nowarn Z  */
//@ nowarn X    /*@ nowarn ; */ class A{

/*@ nowarn Z  */
//@ nowarn X    /*@ nowarn ; */ class A{

/*@ nowarn nowarn */
/*@ nowarn ; */
/*@ pure nowarn Y; */
/*@ pure nowarn Y */
/*@ pure nowarn C; nullable_by_default */
/*@ pure nowarn C nullable            */
/*@  nowarn C! ; */
/*@ nowarn Z; */
//@ nowarn X;     /*@ nowarn Y; */ class A{

/*@ nowarn Z ZZ ZZZ; */
//@ nowarn X,A,B;     /*@ nowarn Y, YY,  YYY; */ class A{

/*@ nowarn Z ; nowarn Q; */
//@ nowarn X,A,B;     /*@ nowarn Y, YY,  YYY; */ class A{

/*@ nowarn Z  */
//@ nowarn X    /*@ nowarn ; */ class A{

/*@ nowarn Z  */
//@ nowarn X    /*@ nowarn ; */ class A{

/*@ nowarn nowarn */
/*@ nowarn ; */
/*@ pure nowarn Y; */
/*@ pure nowarn Y */
/*@ pure nowarn C; nullable_by_default */
/*@ pure nowarn C nullable            */
/*@  nowarn C! ; */
//@ ghost boolean i = ##true# ;      JCLiteral.class, 0)},

//@ ghost int i = ##70# ;      JCLiteral.class, 0)},

//@ ghost long i = ##70L# ;      JCLiteral.class, 0)},

//@ ghost char i = ##'c'# ;      JCLiteral.class, 0)},

//@ ghost String i = ##\"asd\"# ;      JCLiteral.class, 0)},

//@ ghost double i = ##70.0# ;      JCLiteral.class, 0)},

//@ ghost double i = ##70.0e1# ;      JCLiteral.class, 0)},

//@ ghost int i = 2 + (##\\forall int x,y; 0 <= x; y == x#) + 7;      JmlQuantifiedExpr.class, 0)},

//@ assignable ##a[ *]#;     void m(){} JmlStoreRefArrayRange.class, 0)},

//@ assignable ##a[ 2 .. 4]#;     void m(){} JmlStoreRefArrayRange.class, 0)},

//@ assignable ##a[ 2 .. ]#;     void m(){} JmlStoreRefArrayRange.class, 0)},

//@ assignable ##abc# ;     void m(){} JCIdent.class, 0)},

//@ assignable ##ab . c# ;     void m(){} JCFieldAccess.class, 0)},

//@ assignable ##ab . *# ;     void m(){} JCFieldAccess.class, 0)},

//@ assignable ##\    othing#;    ", JmlStoreRefKeyword.class, 0)},

//@ assignable ##\\everything#;    ", JmlStoreRefKeyword.class, 0)},

//@ assignable ##\    ot_specified#;    ", JmlStoreRefKeyword.class, 0)},

//@ assignable ##a, ab . *# ;     void m(){} JmlStoreRefListExpression.class, 0)},

//@ ghost boolean i = ##true# ;      JCLiteral.class, 0)},

//@ ghost int i = ##70# ;      JCLiteral.class, 0)},

//@ ghost long i = ##70L# ;      JCLiteral.class, 0)},

//@ ghost char i = ##'c'# ;      JCLiteral.class, 0)},

//@ ghost String i = ##\"asd\"# ;      JCLiteral.class, 0)},

//@ ghost double i = ##70.0# ;      JCLiteral.class, 0)},

//@ ghost double i = ##70.0e1# ;      JCLiteral.class, 0)},

//@ ghost int i = 2 + (##\\forall int x,y; 0 <= x; y == x#) + 7;      JmlQuantifiedExpr.class, 0)},

//@ assignable ##a[ *]#;     void m(){} JmlStoreRefArrayRange.class, 0)},

//@ assignable ##a[ 2 .. 4]#;     void m(){} JmlStoreRefArrayRange.class, 0)},

//@ assignable ##a[ 2 .. ]#;     void m(){} JmlStoreRefArrayRange.class, 0)},

//@ assignable ##abc# ;     void m(){} JCIdent.class, 0)},

//@ assignable ##ab . c# ;     void m(){} JCFieldAccess.class, 0)},

//@ assignable ##ab . *# ;     void m(){} JCFieldAccess.class, 0)},

//@ assignable ##\    othing#;    ", JmlStoreRefKeyword.class, 0)},

//@ assignable ##\\everything#;    ", JmlStoreRefKeyword.class, 0)},

//@ assignable ##\    ot_specified#;    ", JmlStoreRefKeyword.class, 0)},

//@ assignable ##a, ab . *# ;     void m(){} JmlStoreRefListExpression.class, 0)},

//@ ghost boolean i = ##true# ;      JCLiteral.class, 0)},

//@ ghost int i = ##70# ;      JCLiteral.class, 0)},

//@ ghost long i = ##70L# ;      JCLiteral.class, 0)},

//@ ghost char i = ##'c'# ;      JCLiteral.class, 0)},

//@ ghost String i = ##\"asd\"# ;      JCLiteral.class, 0)},

//@ ghost double i = ##70.0# ;      JCLiteral.class, 0)},

//@ ghost double i = ##70.0e1# ;      JCLiteral.class, 0)},

//@ ghost int i = 2 + (##\\forall int x,y; 0 <= x; y == x#) + 7;      JmlQuantifiedExpr.class, 0)},

//@ assignable ##a[ *]#;     void m(){} JmlStoreRefArrayRange.class, 0)},

//@ assignable ##a[ 2 .. 4]#;     void m(){} JmlStoreRefArrayRange.class, 0)},

//@ assignable ##a[ 2 .. ]#;     void m(){} JmlStoreRefArrayRange.class, 0)},

//@ assignable ##abc# ;     void m(){} JCIdent.class, 0)},

//@ assignable ##ab . c# ;     void m(){} JCFieldAccess.class, 0)},

//@ assignable ##ab . *# ;     void m(){} JCFieldAccess.class, 0)},

//@ assignable ##\    othing#;    ", JmlStoreRefKeyword.class, 0)},

//@ assignable ##\\everything#;    ", JmlStoreRefKeyword.class, 0)},

//@ assignable ##\    ot_specified#;    ", JmlStoreRefKeyword.class, 0)},

//@ assignable ##a, ab . *# ;     void m(){} JmlStoreRefListExpression.class, 0)},

//@ ghost boolean i = ##true# ;      JCLiteral.class, 0)},

//@ ghost int i = ##70# ;      JCLiteral.class, 0)},

//@ ghost long i = ##70L# ;      JCLiteral.class, 0)},

//@ ghost char i = ##'c'# ;      JCLiteral.class, 0)},

//@ ghost String i = ##\"asd\"# ;      JCLiteral.class, 0)},

//@ ghost double i = ##70.0# ;      JCLiteral.class, 0)},

//@ ghost double i = ##70.0e1# ;      JCLiteral.class, 0)},

//@ ghost int i = 2 + (##\\forall int x,y; 0 <= x; y == x#) + 7;      JmlQuantifiedExpr.class, 0)},

//@ assignable ##a[ *]#;     void m(){} JmlStoreRefArrayRange.class, 0)},

//@ assignable ##a[ 2 .. 4]#;     void m(){} JmlStoreRefArrayRange.class, 0)},

//@ assignable ##a[ 2 .. ]#;     void m(){} JmlStoreRefArrayRange.class, 0)},

//@ assignable ##abc# ;     void m(){} JCIdent.class, 0)},

//@ assignable ##ab . c# ;     void m(){} JCFieldAccess.class, 0)},

//@ assignable ##ab . *# ;     void m(){} JCFieldAccess.class, 0)},

//@ assignable ##\    othing#;    ", JmlStoreRefKeyword.class, 0)},

//@ assignable ##\\everything#;    ", JmlStoreRefKeyword.class, 0)},

//@ assignable ##\    ot_specified#;    ", JmlStoreRefKeyword.class, 0)},

//@ assignable ##a, ab . *# ;     void m(){} JmlStoreRefListExpression.class, 0)},

//@ ghost boolean i = ##true# ;      JCLiteral.class, 0)},

//@ ghost int i = ##70# ;      JCLiteral.class, 0)},

//@ ghost long i = ##70L# ;      JCLiteral.class, 0)},

//@ ghost char i = ##'c'# ;      JCLiteral.class, 0)},

//@ ghost String i = ##\"asd\"# ;      JCLiteral.class, 0)},

//@ ghost double i = ##70.0# ;      JCLiteral.class, 0)},

//@ ghost double i = ##70.0e1# ;      JCLiteral.class, 0)},

//@ ghost int i = 2 + (##\\forall int x,y; 0 <= x; y == x#) + 7;      JmlQuantifiedExpr.class, 0)},

//@ assignable ##a[ *]#;     void m(){} JmlStoreRefArrayRange.class, 0)},

//@ assignable ##a[ 2 .. 4]#;     void m(){} JmlStoreRefArrayRange.class, 0)},

//@ assignable ##a[ 2 .. ]#;     void m(){} JmlStoreRefArrayRange.class, 0)},

//@ assignable ##abc# ;     void m(){} JCIdent.class, 0)},

//@ assignable ##ab . c# ;     void m(){} JCFieldAccess.class, 0)},

//@ assignable ##ab . *# ;     void m(){} JCFieldAccess.class, 0)},

//@ assignable ##\    othing#;    ", JmlStoreRefKeyword.class, 0)},

//@ assignable ##\\everything#;    ", JmlStoreRefKeyword.class, 0)},

//@ assignable ##\    ot_specified#;    ", JmlStoreRefKeyword.class, 0)},

//@ assignable ##a, ab . *# ;     void m(){} JmlStoreRefListExpression.class, 0)},

//@ model import java.io.File;" + eol +

//@ model import java.io.*;" + eol + eol +

/*@ assume a == 6;*/
/*@ assert a == 6;*/
/*@ debug a = 6;*/
/*@ set a = 6;*/
/*@ assert (* xyz *);*/
/*@ choose { a = 6; } or { assume a == 6; a = 7; } else { a = 7; } */
//@ model import java.io.File;" + eol +

//@ model import java.io.*;" + eol + eol +

/*@ assume a == 6;*/
/*@ assert a == 6;*/
/*@ debug a = 6;*/
/*@ set a = 6;*/
/*@ assert (* xyz *);*/
/*@ choose { a = 6; } or { assume a == 6; a = 7; } else { a = 7; } */
//@ model import java.io.File;" + eol +

//@ model import java.io.*;" + eol + eol +

/*@ assume a == 6;*/
/*@ assert a == 6;*/
/*@ debug a = 6;*/
/*@ set a = 6;*/
/*@ assert (* xyz *);*/
/*@ choose { a = 6; } or { assume a == 6; a = 7; } else { a = 7; } */
//@ model import java.io.File;" + eol +

//@ model import java.io.*;" + eol + eol +

/*@ assume a == 6;*/
/*@ assert a == 6;*/
/*@ debug a = 6;*/
/*@ set a = 6;*/
/*@ assert (* xyz *);*/
/*@ choose { a = 6; } or { assume a == 6; a = 7; } else { a = 7; } */
//@ model import java.io.File;" + eol +

//@ model import java.io.*;" + eol + eol +

/*@ assume a == 6;*/
/*@ assert a == 6;*/
/*@ debug a = 6;*/
/*@ set a = 6;*/
/*@ assert (* xyz *);*/
/*@ choose { a = 6; } or { assume a == 6; a = 7; } else { a = 7; } */
/*@ pure */
//@ invariant m(); 

//@ invariant m(); 

/*@pure*/
//@ invariant m() == 0; );

//@ invariant m() == 0; );

/*@ pure */
//@ invariant m() == 0; );

//@ invariant m() == 0; );

//@ invariant (b=bb); 

//@ invariant (b+=bb)==0; 

//@ invariant 0==(++b); 

//@ invariant 0==(b++); 

//@ invariant 0==(--b); 

//@ invariant 0==(b--); 

//@ invariant mm();     } /*@ pure */ class B { boolean mm() { return true; } }"

//@ invariant mm();     } /*@ pure */ class B { boolean mm() { return true; } }"

//@ invariant mm();     } /*@ pure */ class B {  }"

/*@ pure */
//@ invariant mm();      boolean mm() { return true; } }     } "

/*@ pure */
//@ assert 0 == v.size(); }     } "

/*@ pure */
//@ invariant m(); 

//@ invariant m(); 

/*@pure*/
//@ invariant m() == 0; );

//@ invariant m() == 0; );

/*@ pure */
//@ invariant m() == 0; );

//@ invariant m() == 0; );

//@ invariant (b=bb); 

//@ invariant (b+=bb)==0; 

//@ invariant 0==(++b); 

//@ invariant 0==(b++); 

//@ invariant 0==(--b); 

//@ invariant 0==(b--); 

//@ invariant mm();     } /*@ pure */ class B { boolean mm() { return true; } }"

//@ invariant mm();     } /*@ pure */ class B { boolean mm() { return true; } }"

//@ invariant mm();     } /*@ pure */ class B {  }"

/*@ pure */
//@ invariant mm();      boolean mm() { return true; } }     } "

/*@ pure */
//@ assert 0 == v.size(); }     } "

/*@ pure */
//@ invariant m(); 

//@ invariant m(); 

/*@pure*/
//@ invariant m() == 0; );

//@ invariant m() == 0; );

/*@ pure */
//@ invariant m() == 0; );

//@ invariant m() == 0; );

//@ invariant (b=bb); 

//@ invariant (b+=bb)==0; 

//@ invariant 0==(++b); 

//@ invariant 0==(b++); 

//@ invariant 0==(--b); 

//@ invariant 0==(b--); 

//@ invariant mm();     } /*@ pure */ class B { boolean mm() { return true; } }"

//@ invariant mm();     } /*@ pure */ class B { boolean mm() { return true; } }"

//@ invariant mm();     } /*@ pure */ class B {  }"

/*@ pure */
//@ invariant mm();      boolean mm() { return true; } }     } "

/*@ pure */
//@ assert 0 == v.size(); }     } "

/*@ pure */
//@ invariant m(); 

//@ invariant m(); 

/*@pure*/
//@ invariant m() == 0; );

//@ invariant m() == 0; );

/*@ pure */
//@ invariant m() == 0; );

//@ invariant m() == 0; );

//@ invariant (b=bb); 

//@ invariant (b+=bb)==0; 

//@ invariant 0==(++b); 

//@ invariant 0==(b++); 

//@ invariant 0==(--b); 

//@ invariant 0==(b--); 

//@ invariant mm();     } /*@ pure */ class B { boolean mm() { return true; } }"

//@ invariant mm();     } /*@ pure */ class B { boolean mm() { return true; } }"

//@ invariant mm();     } /*@ pure */ class B {  }"

/*@ pure */
//@ invariant mm();      boolean mm() { return true; } }     } "

/*@ pure */
//@ assert 0 == v.size(); }     } "

/*@ pure */
//@ invariant m(); 

//@ invariant m(); 

/*@pure*/
//@ invariant m() == 0; );

//@ invariant m() == 0; );

/*@ pure */
//@ invariant m() == 0; );

//@ invariant m() == 0; );

//@ invariant (b=bb); 

//@ invariant (b+=bb)==0; 

//@ invariant 0==(++b); 

//@ invariant 0==(b++); 

//@ invariant 0==(--b); 

//@ invariant 0==(b--); 

//@ invariant mm();     } /*@ pure */ class B { boolean mm() { return true; } }"

//@ invariant mm();     } /*@ pure */ class B { boolean mm() { return true; } }"

//@ invariant mm();     } /*@ pure */ class B {  }"

/*@ pure */
//@ invariant mm();      boolean mm() { return true; } }     } "

/*@ pure */
//@ assert 0 == v.size(); }     } "

//@ pure    " +  // OK

//@ query    " +   // OK

//@ pure query    " +  // BAD

//@ query    " +  // BAD

//@ pure    " +  // BAD

//@ query    " +  // BAD

//@ query    " +  // OK

//@pure    " +  // OK

//@ pure query    " +  // BAD

//@ query    " +  // BAD

//@ query    " +  // BAD

//@ pure    " +  // BAD

//@ secret public model JMLDataGroup value;    " +

//@ in value;     " +

//@ ensures \\result == compute();    " +

//@ model public secret Object value;    " +

//@ in value;     " +

//@ ensures \\result == compute();    " +

//@ ensures \\result == compute();    " +

//@ ensures \\result == compute();    " +

//@ in value;     " + // To use the implicit declaration, value here must be after the Query

//@ ensures \\result == compute();    " +

//@ in value;     " + // To use the implicit declaration, value here must be after the Query

//@ @Secret(\"value\") public invariant cache != null ==> cache == compute();    " +

//@ in value;     " +

//@ secret model Object value;    " + // we're allowing forward reference

//@ secret model Integer cache ; //@ in value;     " +

//@ secret model Object value; in cache;     " + // error - circular

//@ secret model Object value; in value;     " + // warning - circular

//@ in value;     " +

//@ ensures \\result == compute();    " +

//@ model secret public Object value;    " +

//@ in value;     " +

//@ ensures \\result == cache;    " +  // ERROR - no use of secret in specs

//@ model secret Object value;    " +

//@ in value;     " +

//@ ensures \\result == compute();    " +

//@ ensures \\result == compute();    " +

//@ in value;     " +

//@ @Secret public model Object o;     " +

//@ in o;    " +

//@ ensures \\result == compute();    " +

//@ in value;     " +

//@ @Secret public model Object o;     " +

//@ in o;    " +

//@ ensures \\result == compute();    " +

//@ in value;     " +

//@ @Secret public model Object value;    " +

//@ @Secret public model Object o; in value;      " +

//@ in o;    " +

//@ ensures \\result == compute();    " +

//@ in value;     " +

//@ @Secret public model Object o;     " +

//@ in o;    " +

//@ ensures \\result == compute();    " +

//@ in value;     " +

//@ @Secret(\"value\") public invariant cache != null ==> cache == compute() + q;    " +// ERROR - no reading other secret

//@ in value;      " +

//@ ensures \\result == compute();    " +

//@ in value;     " +

//@ @Secret(\"value\") public invariant cache != null ==> cache == compute() + 0;    " +

//@ in o;    " +

//@ ensures \\result == compute();    " +

//@ in value;     " +

//@ @Secret(\"value\") public invariant cache != null ==> cache == compute() + q;    " + // OK - q is nested in value

//@ @Secret public model Object o; in value;      " +

//@ @Secret public model Object o; in value;      " +

//@ in o;    " +

//@ ensures \\result == compute();    " +

//@ in value;     " +

//@ @Secret(\"value\") public invariant cache != null ==> cache == compute() + q;    " + // OK - q is nested in value

//@ @Secret public model Object value;    " +

//@ @Secret public model Object o; in value;      " +

//@ in o;    " +

//@ ensures \\result == compute();    " +

//@ in value;     " +

//@ @Secret(\"value\") public invariant cache != null ==> cache == compute() + q;    " + // OK - q is nested in value

//@ @Secret public model Object value;    " +

//@ @Secret public model Object o; in value;      " +

//@ in o;    " +

//@ ensures \\result == compute();    " +

//@ in value;     " +

//@ @Secret public invariant true;    " + // BAD SYNTAX

//@ @Secret(0) public invariant true;    " + // BAD SYNTAX

//@ @Secret(\"org\") public invariant true;    " + // BAD SYNTAX

//@ @Secret(\"value\",\"value\") public invariant true;    " + // BAD SYNTAX

//@ @Secret(\"v\") public invariant true;    " + // ERROR - not found

//@ @Secret public model int value;    " +

//@ @Secret public model Object o; in value;      " +

//@ in o;    " +

//@ in value;     " +

//@ @Secret model int value;    " +

//@ @Secret public model Object o;      " +

//@ in o;    " +

//@ in value;     " +

//@ @Secret model int value;    " +

//@ @Secret public model Object o;      " +

//@ in o;    " +

//@ in value;     " +

//@ pure    " +  // OK

//@ query    " +   // OK

//@ pure query    " +  // BAD

//@ query    " +  // BAD

//@ pure    " +  // BAD

//@ query    " +  // BAD

//@ query    " +  // OK

//@pure    " +  // OK

//@ pure query    " +  // BAD

//@ query    " +  // BAD

//@ query    " +  // BAD

//@ pure    " +  // BAD

//@ secret public model JMLDataGroup value;    " +

//@ in value;     " +

//@ ensures \\result == compute();    " +

//@ model public secret Object value;    " +

//@ in value;     " +

//@ ensures \\result == compute();    " +

//@ ensures \\result == compute();    " +

//@ ensures \\result == compute();    " +

//@ in value;     " + // To use the implicit declaration, value here must be after the Query

//@ ensures \\result == compute();    " +

//@ in value;     " + // To use the implicit declaration, value here must be after the Query

//@ @Secret(\"value\") public invariant cache != null ==> cache == compute();    " +

//@ in value;     " +

//@ secret model Object value;    " + // we're allowing forward reference

//@ secret model Integer cache ; //@ in value;     " +

//@ secret model Object value; in cache;     " + // error - circular

//@ secret model Object value; in value;     " + // warning - circular

//@ in value;     " +

//@ ensures \\result == compute();    " +

//@ model secret public Object value;    " +

//@ in value;     " +

//@ ensures \\result == cache;    " +  // ERROR - no use of secret in specs

//@ model secret Object value;    " +

//@ in value;     " +

//@ ensures \\result == compute();    " +

//@ ensures \\result == compute();    " +

//@ in value;     " +

//@ @Secret public model Object o;     " +

//@ in o;    " +

//@ ensures \\result == compute();    " +

//@ in value;     " +

//@ @Secret public model Object o;     " +

//@ in o;    " +

//@ ensures \\result == compute();    " +

//@ in value;     " +

//@ @Secret public model Object value;    " +

//@ @Secret public model Object o; in value;      " +

//@ in o;    " +

//@ ensures \\result == compute();    " +

//@ in value;     " +

//@ @Secret public model Object o;     " +

//@ in o;    " +

//@ ensures \\result == compute();    " +

//@ in value;     " +

//@ @Secret(\"value\") public invariant cache != null ==> cache == compute() + q;    " +// ERROR - no reading other secret

//@ in value;      " +

//@ ensures \\result == compute();    " +

//@ in value;     " +

//@ @Secret(\"value\") public invariant cache != null ==> cache == compute() + 0;    " +

//@ in o;    " +

//@ ensures \\result == compute();    " +

//@ in value;     " +

//@ @Secret(\"value\") public invariant cache != null ==> cache == compute() + q;    " + // OK - q is nested in value

//@ @Secret public model Object o; in value;      " +

//@ @Secret public model Object o; in value;      " +

//@ in o;    " +

//@ ensures \\result == compute();    " +

//@ in value;     " +

//@ @Secret(\"value\") public invariant cache != null ==> cache == compute() + q;    " + // OK - q is nested in value

//@ @Secret public model Object value;    " +

//@ @Secret public model Object o; in value;      " +

//@ in o;    " +

//@ ensures \\result == compute();    " +

//@ in value;     " +

//@ @Secret(\"value\") public invariant cache != null ==> cache == compute() + q;    " + // OK - q is nested in value

//@ @Secret public model Object value;    " +

//@ @Secret public model Object o; in value;      " +

//@ in o;    " +

//@ ensures \\result == compute();    " +

//@ in value;     " +

//@ @Secret public invariant true;    " + // BAD SYNTAX

//@ @Secret(0) public invariant true;    " + // BAD SYNTAX

//@ @Secret(\"org\") public invariant true;    " + // BAD SYNTAX

//@ @Secret(\"value\",\"value\") public invariant true;    " + // BAD SYNTAX

//@ @Secret(\"v\") public invariant true;    " + // ERROR - not found

//@ @Secret public model int value;    " +

//@ @Secret public model Object o; in value;      " +

//@ in o;    " +

//@ in value;     " +

//@ @Secret model int value;    " +

//@ @Secret public model Object o;      " +

//@ in o;    " +

//@ in value;     " +

//@ @Secret model int value;    " +

//@ @Secret public model Object o;      " +

//@ in o;    " +

//@ in value;     " +

//@ pure    " +  // OK

//@ query    " +   // OK

//@ pure query    " +  // BAD

//@ query    " +  // BAD

//@ pure    " +  // BAD

//@ query    " +  // BAD

//@ query    " +  // OK

//@pure    " +  // OK

//@ pure query    " +  // BAD

//@ query    " +  // BAD

//@ query    " +  // BAD

//@ pure    " +  // BAD

//@ secret public model JMLDataGroup value;    " +

//@ in value;     " +

//@ ensures \\result == compute();    " +

//@ model public secret Object value;    " +

//@ in value;     " +

//@ ensures \\result == compute();    " +

//@ ensures \\result == compute();    " +

//@ ensures \\result == compute();    " +

//@ in value;     " + // To use the implicit declaration, value here must be after the Query

//@ ensures \\result == compute();    " +

//@ in value;     " + // To use the implicit declaration, value here must be after the Query

//@ @Secret(\"value\") public invariant cache != null ==> cache == compute();    " +

//@ in value;     " +

//@ secret model Object value;    " + // we're allowing forward reference

//@ secret model Integer cache ; //@ in value;     " +

//@ secret model Object value; in cache;     " + // error - circular

//@ secret model Object value; in value;     " + // warning - circular

//@ in value;     " +

//@ ensures \\result == compute();    " +

//@ model secret public Object value;    " +

//@ in value;     " +

//@ ensures \\result == cache;    " +  // ERROR - no use of secret in specs

//@ model secret Object value;    " +

//@ in value;     " +

//@ ensures \\result == compute();    " +

//@ ensures \\result == compute();    " +

//@ in value;     " +

//@ @Secret public model Object o;     " +

//@ in o;    " +

//@ ensures \\result == compute();    " +

//@ in value;     " +

//@ @Secret public model Object o;     " +

//@ in o;    " +

//@ ensures \\result == compute();    " +

//@ in value;     " +

//@ @Secret public model Object value;    " +

//@ @Secret public model Object o; in value;      " +

//@ in o;    " +

//@ ensures \\result == compute();    " +

//@ in value;     " +

//@ @Secret public model Object o;     " +

//@ in o;    " +

//@ ensures \\result == compute();    " +

//@ in value;     " +

//@ @Secret(\"value\") public invariant cache != null ==> cache == compute() + q;    " +// ERROR - no reading other secret

//@ in value;      " +

//@ ensures \\result == compute();    " +

//@ in value;     " +

//@ @Secret(\"value\") public invariant cache != null ==> cache == compute() + 0;    " +

//@ in o;    " +

//@ ensures \\result == compute();    " +

//@ in value;     " +

//@ @Secret(\"value\") public invariant cache != null ==> cache == compute() + q;    " + // OK - q is nested in value

//@ @Secret public model Object o; in value;      " +

//@ @Secret public model Object o; in value;      " +

//@ in o;    " +

//@ ensures \\result == compute();    " +

//@ in value;     " +

//@ @Secret(\"value\") public invariant cache != null ==> cache == compute() + q;    " + // OK - q is nested in value

//@ @Secret public model Object value;    " +

//@ @Secret public model Object o; in value;      " +

//@ in o;    " +

//@ ensures \\result == compute();    " +

//@ in value;     " +

//@ @Secret(\"value\") public invariant cache != null ==> cache == compute() + q;    " + // OK - q is nested in value

//@ @Secret public model Object value;    " +

//@ @Secret public model Object o; in value;      " +

//@ in o;    " +

//@ ensures \\result == compute();    " +

//@ in value;     " +

//@ @Secret public invariant true;    " + // BAD SYNTAX

//@ @Secret(0) public invariant true;    " + // BAD SYNTAX

//@ @Secret(\"org\") public invariant true;    " + // BAD SYNTAX

//@ @Secret(\"value\",\"value\") public invariant true;    " + // BAD SYNTAX

//@ @Secret(\"v\") public invariant true;    " + // ERROR - not found

//@ @Secret public model int value;    " +

//@ @Secret public model Object o; in value;      " +

//@ in o;    " +

//@ in value;     " +

//@ @Secret model int value;    " +

//@ @Secret public model Object o;      " +

//@ in o;    " +

//@ in value;     " +

//@ @Secret model int value;    " +

//@ @Secret public model Object o;      " +

//@ in o;    " +

//@ in value;     " +

//@ pure    " +  // OK

//@ query    " +   // OK

//@ pure query    " +  // BAD

//@ query    " +  // BAD

//@ pure    " +  // BAD

//@ query    " +  // BAD

//@ query    " +  // OK

//@pure    " +  // OK

//@ pure query    " +  // BAD

//@ query    " +  // BAD

//@ query    " +  // BAD

//@ pure    " +  // BAD

//@ secret public model JMLDataGroup value;    " +

//@ in value;     " +

//@ ensures \\result == compute();    " +

//@ model public secret Object value;    " +

//@ in value;     " +

//@ ensures \\result == compute();    " +

//@ ensures \\result == compute();    " +

//@ ensures \\result == compute();    " +

//@ in value;     " + // To use the implicit declaration, value here must be after the Query

//@ ensures \\result == compute();    " +

//@ in value;     " + // To use the implicit declaration, value here must be after the Query

//@ @Secret(\"value\") public invariant cache != null ==> cache == compute();    " +

//@ in value;     " +

//@ secret model Object value;    " + // we're allowing forward reference

//@ secret model Integer cache ; //@ in value;     " +

//@ secret model Object value; in cache;     " + // error - circular

//@ secret model Object value; in value;     " + // warning - circular

//@ in value;     " +

//@ ensures \\result == compute();    " +

//@ model secret public Object value;    " +

//@ in value;     " +

//@ ensures \\result == cache;    " +  // ERROR - no use of secret in specs

//@ model secret Object value;    " +

//@ in value;     " +

//@ ensures \\result == compute();    " +

//@ ensures \\result == compute();    " +

//@ in value;     " +

//@ @Secret public model Object o;     " +

//@ in o;    " +

//@ ensures \\result == compute();    " +

//@ in value;     " +

//@ @Secret public model Object o;     " +

//@ in o;    " +

//@ ensures \\result == compute();    " +

//@ in value;     " +

//@ @Secret public model Object value;    " +

//@ @Secret public model Object o; in value;      " +

//@ in o;    " +

//@ ensures \\result == compute();    " +

//@ in value;     " +

//@ @Secret public model Object o;     " +

//@ in o;    " +

//@ ensures \\result == compute();    " +

//@ in value;     " +

//@ @Secret(\"value\") public invariant cache != null ==> cache == compute() + q;    " +// ERROR - no reading other secret

//@ in value;      " +

//@ ensures \\result == compute();    " +

//@ in value;     " +

//@ @Secret(\"value\") public invariant cache != null ==> cache == compute() + 0;    " +

//@ in o;    " +

//@ ensures \\result == compute();    " +

//@ in value;     " +

//@ @Secret(\"value\") public invariant cache != null ==> cache == compute() + q;    " + // OK - q is nested in value

//@ @Secret public model Object o; in value;      " +

//@ @Secret public model Object o; in value;      " +

//@ in o;    " +

//@ ensures \\result == compute();    " +

//@ in value;     " +

//@ @Secret(\"value\") public invariant cache != null ==> cache == compute() + q;    " + // OK - q is nested in value

//@ @Secret public model Object value;    " +

//@ @Secret public model Object o; in value;      " +

//@ in o;    " +

//@ ensures \\result == compute();    " +

//@ in value;     " +

//@ @Secret(\"value\") public invariant cache != null ==> cache == compute() + q;    " + // OK - q is nested in value

//@ @Secret public model Object value;    " +

//@ @Secret public model Object o; in value;      " +

//@ in o;    " +

//@ ensures \\result == compute();    " +

//@ in value;     " +

//@ @Secret public invariant true;    " + // BAD SYNTAX

//@ @Secret(0) public invariant true;    " + // BAD SYNTAX

//@ @Secret(\"org\") public invariant true;    " + // BAD SYNTAX

//@ @Secret(\"value\",\"value\") public invariant true;    " + // BAD SYNTAX

//@ @Secret(\"v\") public invariant true;    " + // ERROR - not found

//@ @Secret public model int value;    " +

//@ @Secret public model Object o; in value;      " +

//@ in o;    " +

//@ in value;     " +

//@ @Secret model int value;    " +

//@ @Secret public model Object o;      " +

//@ in o;    " +

//@ in value;     " +

//@ @Secret model int value;    " +

//@ @Secret public model Object o;      " +

//@ in o;    " +

//@ in value;     " +

//@ pure    " +  // OK

//@ query    " +   // OK

//@ pure query    " +  // BAD

//@ query    " +  // BAD

//@ pure    " +  // BAD

//@ query    " +  // BAD

//@ query    " +  // OK

//@pure    " +  // OK

//@ pure query    " +  // BAD

//@ query    " +  // BAD

//@ query    " +  // BAD

//@ pure    " +  // BAD

//@ secret public model JMLDataGroup value;    " +

//@ in value;     " +

//@ ensures \\result == compute();    " +

//@ model public secret Object value;    " +

//@ in value;     " +

//@ ensures \\result == compute();    " +

//@ ensures \\result == compute();    " +

//@ ensures \\result == compute();    " +

//@ in value;     " + // To use the implicit declaration, value here must be after the Query

//@ ensures \\result == compute();    " +

//@ in value;     " + // To use the implicit declaration, value here must be after the Query

//@ @Secret(\"value\") public invariant cache != null ==> cache == compute();    " +

//@ in value;     " +

//@ secret model Object value;    " + // we're allowing forward reference

//@ secret model Integer cache ; //@ in value;     " +

//@ secret model Object value; in cache;     " + // error - circular

//@ secret model Object value; in value;     " + // warning - circular

//@ in value;     " +

//@ ensures \\result == compute();    " +

//@ model secret public Object value;    " +

//@ in value;     " +

//@ ensures \\result == cache;    " +  // ERROR - no use of secret in specs

//@ model secret Object value;    " +

//@ in value;     " +

//@ ensures \\result == compute();    " +

//@ ensures \\result == compute();    " +

//@ in value;     " +

//@ @Secret public model Object o;     " +

//@ in o;    " +

//@ ensures \\result == compute();    " +

//@ in value;     " +

//@ @Secret public model Object o;     " +

//@ in o;    " +

//@ ensures \\result == compute();    " +

//@ in value;     " +

//@ @Secret public model Object value;    " +

//@ @Secret public model Object o; in value;      " +

//@ in o;    " +

//@ ensures \\result == compute();    " +

//@ in value;     " +

//@ @Secret public model Object o;     " +

//@ in o;    " +

//@ ensures \\result == compute();    " +

//@ in value;     " +

//@ @Secret(\"value\") public invariant cache != null ==> cache == compute() + q;    " +// ERROR - no reading other secret

//@ in value;      " +

//@ ensures \\result == compute();    " +

//@ in value;     " +

//@ @Secret(\"value\") public invariant cache != null ==> cache == compute() + 0;    " +

//@ in o;    " +

//@ ensures \\result == compute();    " +

//@ in value;     " +

//@ @Secret(\"value\") public invariant cache != null ==> cache == compute() + q;    " + // OK - q is nested in value

//@ @Secret public model Object o; in value;      " +

//@ @Secret public model Object o; in value;      " +

//@ in o;    " +

//@ ensures \\result == compute();    " +

//@ in value;     " +

//@ @Secret(\"value\") public invariant cache != null ==> cache == compute() + q;    " + // OK - q is nested in value

//@ @Secret public model Object value;    " +

//@ @Secret public model Object o; in value;      " +

//@ in o;    " +

//@ ensures \\result == compute();    " +

//@ in value;     " +

//@ @Secret(\"value\") public invariant cache != null ==> cache == compute() + q;    " + // OK - q is nested in value

//@ @Secret public model Object value;    " +

//@ @Secret public model Object o; in value;      " +

//@ in o;    " +

//@ ensures \\result == compute();    " +

//@ in value;     " +

//@ @Secret public invariant true;    " + // BAD SYNTAX

//@ @Secret(0) public invariant true;    " + // BAD SYNTAX

//@ @Secret(\"org\") public invariant true;    " + // BAD SYNTAX

//@ @Secret(\"value\",\"value\") public invariant true;    " + // BAD SYNTAX

//@ @Secret(\"v\") public invariant true;    " + // ERROR - not found

//@ @Secret public model int value;    " +

//@ @Secret public model Object o; in value;      " +

//@ in o;    " +

//@ in value;     " +

//@ @Secret model int value;    " +

//@ @Secret public model Object o;      " +

//@ in o;    " +

//@ in value;     " +

//@ @Secret model int value;    " +

//@ @Secret public model Object o;      " +

//@ in o;    " +

//@ in value;     " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

//@ model int q;    " +

//@ model int q;    " +

/*@ public model JMLDataGroup q; */
//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup m;    " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

/*@ public model JMLDataGroup q; */
//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup m;    " +

//@ instance model int p;     " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup m;    " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q,r;    " +

//@ public model JMLDataGroup q;    " +

//@ public secret model JMLDataGroup q;    " +

//@ in q;     " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

//@ in q;     " +

//@ public secret model JMLDataGroup q;    " +

//@ in q;      " +

//@ public secret model JMLDataGroup q;    " +

//@ model int m; //@ in q;      " +

//@ public model JMLDataGroup q;    " +

//@ secret model int m;      " +

//@ secret public model int i;    " +

//@ secret public model int j; in i;     " +

//@ secret public represents i = j;     " +

//@ secret public model int i;    " +

//@ secret public model int j;    " +

//@ secret public represents i = j;     " +

//@ secret public model int i;    " +

//@ public represents i = 0;     " +

//@ public model int i;    " +

//@ secret public represents i = 0;     " +

//@ secret public model int i;    " +

//@ @Secret(\"i\") public represents i = 0;     " +

//@ secret public model int j;    " +

//@ public model int i;    " +

//@ public represents i = j;     " +

//@ secret public model int j;    " +

//@ public invariant j == 0;    " +

//@ public constraint j == 0;    " +

//@ public model int i;    " +

//@ public model int j;    " +

//@ @Query(\"i\")     " +

//@ @Secret(\"i\")     " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

//@ model int q;    " +

//@ model int q;    " +

/*@ public model JMLDataGroup q; */
//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup m;    " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

/*@ public model JMLDataGroup q; */
//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup m;    " +

//@ instance model int p;     " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup m;    " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q,r;    " +

//@ public model JMLDataGroup q;    " +

//@ public secret model JMLDataGroup q;    " +

//@ in q;     " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

//@ in q;     " +

//@ public secret model JMLDataGroup q;    " +

//@ in q;      " +

//@ public secret model JMLDataGroup q;    " +

//@ model int m; //@ in q;      " +

//@ public model JMLDataGroup q;    " +

//@ secret model int m;      " +

//@ secret public model int i;    " +

//@ secret public model int j; in i;     " +

//@ secret public represents i = j;     " +

//@ secret public model int i;    " +

//@ secret public model int j;    " +

//@ secret public represents i = j;     " +

//@ secret public model int i;    " +

//@ public represents i = 0;     " +

//@ public model int i;    " +

//@ secret public represents i = 0;     " +

//@ secret public model int i;    " +

//@ @Secret(\"i\") public represents i = 0;     " +

//@ secret public model int j;    " +

//@ public model int i;    " +

//@ public represents i = j;     " +

//@ secret public model int j;    " +

//@ public invariant j == 0;    " +

//@ public constraint j == 0;    " +

//@ public model int i;    " +

//@ public model int j;    " +

//@ @Query(\"i\")     " +

//@ @Secret(\"i\")     " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

//@ model int q;    " +

//@ model int q;    " +

/*@ public model JMLDataGroup q; */
//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup m;    " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

/*@ public model JMLDataGroup q; */
//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup m;    " +

//@ instance model int p;     " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup m;    " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q,r;    " +

//@ public model JMLDataGroup q;    " +

//@ public secret model JMLDataGroup q;    " +

//@ in q;     " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

//@ in q;     " +

//@ public secret model JMLDataGroup q;    " +

//@ in q;      " +

//@ public secret model JMLDataGroup q;    " +

//@ model int m; //@ in q;      " +

//@ public model JMLDataGroup q;    " +

//@ secret model int m;      " +

//@ secret public model int i;    " +

//@ secret public model int j; in i;     " +

//@ secret public represents i = j;     " +

//@ secret public model int i;    " +

//@ secret public model int j;    " +

//@ secret public represents i = j;     " +

//@ secret public model int i;    " +

//@ public represents i = 0;     " +

//@ public model int i;    " +

//@ secret public represents i = 0;     " +

//@ secret public model int i;    " +

//@ @Secret(\"i\") public represents i = 0;     " +

//@ secret public model int j;    " +

//@ public model int i;    " +

//@ public represents i = j;     " +

//@ secret public model int j;    " +

//@ public invariant j == 0;    " +

//@ public constraint j == 0;    " +

//@ public model int i;    " +

//@ public model int j;    " +

//@ @Query(\"i\")     " +

//@ @Secret(\"i\")     " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

//@ model int q;    " +

//@ model int q;    " +

/*@ public model JMLDataGroup q; */
//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup m;    " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

/*@ public model JMLDataGroup q; */
//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup m;    " +

//@ instance model int p;     " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup m;    " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q,r;    " +

//@ public model JMLDataGroup q;    " +

//@ public secret model JMLDataGroup q;    " +

//@ in q;     " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

//@ in q;     " +

//@ public secret model JMLDataGroup q;    " +

//@ in q;      " +

//@ public secret model JMLDataGroup q;    " +

//@ model int m; //@ in q;      " +

//@ public model JMLDataGroup q;    " +

//@ secret model int m;      " +

//@ secret public model int i;    " +

//@ secret public model int j; in i;     " +

//@ secret public represents i = j;     " +

//@ secret public model int i;    " +

//@ secret public model int j;    " +

//@ secret public represents i = j;     " +

//@ secret public model int i;    " +

//@ public represents i = 0;     " +

//@ public model int i;    " +

//@ secret public represents i = 0;     " +

//@ secret public model int i;    " +

//@ @Secret(\"i\") public represents i = 0;     " +

//@ secret public model int j;    " +

//@ public model int i;    " +

//@ public represents i = j;     " +

//@ secret public model int j;    " +

//@ public invariant j == 0;    " +

//@ public constraint j == 0;    " +

//@ public model int i;    " +

//@ public model int j;    " +

//@ @Query(\"i\")     " +

//@ @Secret(\"i\")     " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

//@ model int q;    " +

//@ model int q;    " +

/*@ public model JMLDataGroup q; */
//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup m;    " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

/*@ public model JMLDataGroup q; */
//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup m;    " +

//@ instance model int p;     " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup m;    " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q,r;    " +

//@ public model JMLDataGroup q;    " +

//@ public secret model JMLDataGroup q;    " +

//@ in q;     " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

//@ in q;     " +

//@ public secret model JMLDataGroup q;    " +

//@ in q;      " +

//@ public secret model JMLDataGroup q;    " +

//@ model int m; //@ in q;      " +

//@ public model JMLDataGroup q;    " +

//@ secret model int m;      " +

//@ secret public model int i;    " +

//@ secret public model int j; in i;     " +

//@ secret public represents i = j;     " +

//@ secret public model int i;    " +

//@ secret public model int j;    " +

//@ secret public represents i = j;     " +

//@ secret public model int i;    " +

//@ public represents i = 0;     " +

//@ public model int i;    " +

//@ secret public represents i = 0;     " +

//@ secret public model int i;    " +

//@ @Secret(\"i\") public represents i = 0;     " +

//@ secret public model int j;    " +

//@ public model int i;    " +

//@ public represents i = j;     " +

//@ secret public model int j;    " +

//@ public invariant j == 0;    " +

//@ public constraint j == 0;    " +

//@ public model int i;    " +

//@ public model int j;    " +

//@ @Query(\"i\")     " +

//@ @Secret(\"i\")     " +

//@ assert i == m && q == qq ;    "

//@ assert (k%j) == m && (k/j) == qq;    "

//@ assert i == -m && q == -qq;    "

//@ assert ((-k)%j) == -m && ((-k)/j) == -qq;    "   // Line 15

//@ assert i == m && q == -qq;    "

//@ assert (k%-j) == m && (k/-j) == -qq;    "

//@ assert i == -m && q == qq;    "

//@ assert (-k%-j) == -m && ((-k)/-j) == qq;    "

//@ assert i == m && q == qq ;    "

//@ assert (k%j) == m && (k/j) == qq;    "

//@ assert i == -m && q == -qq;    "

//@ assert ((-k)%j) == -m && ((-k)/j) == -qq;    "   // Line 15

//@ assert i == m && q == -qq;    "

//@ assert (k%-j) == m && (k/-j) == -qq;    "

//@ assert i == -m && q == qq;    "

//@ assert (-k%-j) == -m && ((-k)/-j) == qq;    "

//@ assert i == m && q == qq ;    "

//@ assert (k%j) == m && (k/j) == qq;    "

//@ assert i == -m && q == -qq;    "

//@ assert ((-k)%j) == -m && ((-k)/j) == -qq;    "   // Line 15

//@ assert i == m && q == -qq;    "

//@ assert (k%-j) == m && (k/-j) == -qq;    "

//@ assert i == -m && q == qq;    "

//@ assert (-k%-j) == -m && ((-k)/-j) == qq;    "

//@ assert i == m && q == qq ;    "

//@ assert (k%j) == m && (k/j) == qq;    "

//@ assert i == -m && q == -qq;    "

//@ assert ((-k)%j) == -m && ((-k)/j) == -qq;    "   // Line 15

//@ assert i == m && q == -qq;    "

//@ assert (k%-j) == m && (k/-j) == -qq;    "

//@ assert i == -m && q == qq;    "

//@ assert (-k%-j) == -m && ((-k)/-j) == qq;    "

//@ assert i == m && q == qq ;    "

//@ assert (k%j) == m && (k/j) == qq;    "

//@ assert i == -m && q == -qq;    "

//@ assert ((-k)%j) == -m && ((-k)/j) == -qq;    "   // Line 15

//@ assert i == m && q == -qq;    "

//@ assert (k%-j) == m && (k/-j) == -qq;    "

//@ assert i == -m && q == qq;    "

//@ assert (-k%-j) == -m && ((-k)/-j) == qq;    "

//@ assert i == m && q == qq ;    "

//@ assert (k%j) == m && (k/j) == qq;    "

//@ assert i == -m && q == -qq;    "

//@ assert ((-k)%j) == -m && ((-k)/j) == -qq;    "   // Line 15

//@ assert i == m && q == -qq;    "

//@ assert (k%-j) == m && (k/-j) == -qq;    "

//@ assert i == -m && q == qq;    "

//@ assert (-k%-j) == -m && ((-k)/-j) == qq;    "

//@ assert i == m && q == qq ;    "

//@ assert (k%j) == m && (k/j) == qq;    "

//@ assert i == -m && q == -qq;    "

//@ assert ((-k)%j) == -m && ((-k)/j) == -qq;    "   // Line 15

//@ assert i == m && q == -qq;    "

//@ assert (k%-j) == m && (k/-j) == -qq;    "

//@ assert i == -m && q == qq;    "

//@ assert (-k%-j) == -m && ((-k)/-j) == qq;    "

//@ assert i == m && q == qq ;    "

//@ assert (k%j) == m && (k/j) == qq;    "

//@ assert i == -m && q == -qq;    "

//@ assert ((-k)%j) == -m && ((-k)/j) == -qq;    "   // Line 15

//@ assert i == m && q == -qq;    "

//@ assert (k%-j) == m && (k/-j) == -qq;    "

//@ assert i == -m && q == qq;    "

//@ assert (-k%-j) == -m && ((-k)/-j) == qq;    "

//@ assert i == m && q == qq ;    "

//@ assert (k%j) == m && (k/j) == qq;    "

//@ assert i == -m && q == -qq;    "

//@ assert ((-k)%j) == -m && ((-k)/j) == -qq;    "   // Line 15

//@ assert i == m && q == -qq;    "

//@ assert (k%-j) == m && (k/-j) == -qq;    "

//@ assert i == -m && q == qq;    "

//@ assert (-k%-j) == -m && ((-k)/-j) == qq;    "

//@ assert i == m && q == qq ;    "

//@ assert (k%j) == m && (k/j) == qq;    "

//@ assert i == -m && q == -qq;    "

//@ assert ((-k)%j) == -m && ((-k)/j) == -qq;    "   // Line 15

//@ assert i == m && q == -qq;    "

//@ assert (k%-j) == m && (k/-j) == -qq;    "

//@ assert i == -m && q == qq;    "

//@ assert (-k%-j) == -m && ((-k)/-j) == qq;    "

//@ assert i == m && q == qq ;    "

//@ assert (k%j) == m && (k/j) == qq;    "

//@ assert i == -m && q == -qq;    "

//@ assert ((-k)%j) == -m && ((-k)/j) == -qq;    "   // Line 15

//@ assert i == m && q == -qq;    "

//@ assert (k%-j) == m && (k/-j) == -qq;    "

//@ assert i == -m && q == qq;    "

//@ assert (-k%-j) == -m && ((-k)/-j) == qq;    "

//@ assert i == m && q == qq ;    "

//@ assert (k%j) == m && (k/j) == qq;    "

//@ assert i == -m && q == -qq;    "

//@ assert ((-k)%j) == -m && ((-k)/j) == -qq;    "   // Line 15

//@ assert i == m && q == -qq;    "

//@ assert (k%-j) == m && (k/-j) == -qq;    "

//@ assert i == -m && q == qq;    "

//@ assert (-k%-j) == -m && ((-k)/-j) == qq;    "

//@ assert i == m && q == qq ;    "

//@ assert (k%j) == m && (k/j) == qq;    "

//@ assert i == -m && q == -qq;    "

//@ assert ((-k)%j) == -m && ((-k)/j) == -qq;    "   // Line 15

//@ assert i == m && q == -qq;    "

//@ assert (k%-j) == m && (k/-j) == -qq;    "

//@ assert i == -m && q == qq;    "

//@ assert (-k%-j) == -m && ((-k)/-j) == qq;    "

//@ assert i == m && q == qq ;    "

//@ assert (k%j) == m && (k/j) == qq;    "

//@ assert i == -m && q == -qq;    "

//@ assert ((-k)%j) == -m && ((-k)/j) == -qq;    "   // Line 15

//@ assert i == m && q == -qq;    "

//@ assert (k%-j) == m && (k/-j) == -qq;    "

//@ assert i == -m && q == qq;    "

//@ assert (-k%-j) == -m && ((-k)/-j) == qq;    "

//@ assert i == m && q == qq ;    "

//@ assert (k%j) == m && (k/j) == qq;    "

//@ assert i == -m && q == -qq;    "

//@ assert ((-k)%j) == -m && ((-k)/j) == -qq;    "   // Line 15

//@ assert i == m && q == -qq;    "

//@ assert (k%-j) == m && (k/-j) == -qq;    "

//@ assert i == -m && q == qq;    "

//@ assert (-k%-j) == -m && ((-k)/-j) == qq;    "

//@ assert JML.lbl(\"AL\",\"Z\") != null;     "

//@ assert JML.lbl(\"AL\",\"XYZ\").equals(\"XYZ\");     "

//@ assert JML.lbl(\"AL\",args.length == 0);     "

//@ assert JML.lbl(\"AL\",args.length) == 0;     "

//@ assert JML.lbl(\"AL\",(long)args.length) == 0;     "

//@ assert JML.lbl(\"AL\",(short)args.length) == 0;     "

//@ assert JML.lbl(\"AL\",(byte)args.length) == 0;     "

//@ assert JML.lbl(\"AL\",'Z') == 'Z';     "

//@ ensures JML.lbl(\"INPUT\",i) == \\result;    "

//@ assert JML.lbl(\"AL\",5.0) != 0.0; }    "

//@ assert JML.lbl(\"AL\",\"Z\") != null;     "

//@ assert JML.lbl(\"AL\",\"XYZ\").equals(\"XYZ\");     "

//@ assert JML.lbl(\"AL\",args.length == 0);     "

//@ assert JML.lbl(\"AL\",args.length) == 0;     "

//@ assert JML.lbl(\"AL\",(long)args.length) == 0;     "

//@ assert JML.lbl(\"AL\",(short)args.length) == 0;     "

//@ assert JML.lbl(\"AL\",(byte)args.length) == 0;     "

//@ assert JML.lbl(\"AL\",'Z') == 'Z';     "

//@ ensures JML.lbl(\"INPUT\",i) == \\result;    "

//@ assert JML.lbl(\"AL\",5.0) != 0.0; }    "

//@ assert JML.lbl(\"AL\",\"Z\") != null;     "

//@ assert JML.lbl(\"AL\",\"XYZ\").equals(\"XYZ\");     "

//@ assert JML.lbl(\"AL\",args.length == 0);     "

//@ assert JML.lbl(\"AL\",args.length) == 0;     "

//@ assert JML.lbl(\"AL\",(long)args.length) == 0;     "

//@ assert JML.lbl(\"AL\",(short)args.length) == 0;     "

//@ assert JML.lbl(\"AL\",(byte)args.length) == 0;     "

//@ assert JML.lbl(\"AL\",'Z') == 'Z';     "

//@ ensures JML.lbl(\"INPUT\",i) == \\result;    "

//@ assert JML.lbl(\"AL\",5.0) != 0.0; }    "

//@ assert JML.lbl(\"AL\",\"Z\") != null;     "

//@ assert JML.lbl(\"AL\",\"XYZ\").equals(\"XYZ\");     "

//@ assert JML.lbl(\"AL\",args.length == 0);     "

//@ assert JML.lbl(\"AL\",args.length) == 0;     "

//@ assert JML.lbl(\"AL\",(long)args.length) == 0;     "

//@ assert JML.lbl(\"AL\",(short)args.length) == 0;     "

//@ assert JML.lbl(\"AL\",(byte)args.length) == 0;     "

//@ assert JML.lbl(\"AL\",'Z') == 'Z';     "

//@ ensures JML.lbl(\"INPUT\",i) == \\result;    "

//@ assert JML.lbl(\"AL\",5.0) != 0.0; }    "

//@ assert JML.lbl(\"AL\",\"Z\") != null;     "

//@ assert JML.lbl(\"AL\",\"XYZ\").equals(\"XYZ\");     "

//@ assert JML.lbl(\"AL\",args.length == 0);     "

//@ assert JML.lbl(\"AL\",args.length) == 0;     "

//@ assert JML.lbl(\"AL\",(long)args.length) == 0;     "

//@ assert JML.lbl(\"AL\",(short)args.length) == 0;     "

//@ assert JML.lbl(\"AL\",(byte)args.length) == 0;     "

//@ assert JML.lbl(\"AL\",'Z') == 'Z';     "

//@ ensures JML.lbl(\"INPUT\",i) == \\result;    "

//@ assert JML.lbl(\"AL\",5.0) != 0.0; }    "

//@ ensures \\result > 0;     " +

//@ assert i == 2;     " +

//@ assert i == 2;     " +

//@ assert aa[1].length == 3;     " +

//@ assert (new int[]{1,2,3}).length == 3;     " +

//@ assert (new int[]{1,2,3})[1] == 2;     " +

//@ assert aaa.length == 1;     " +

//@ assert aaa[0].length == 2;     " +

//@ assert aaa[0][0] == null;     " +

//@ assert x.length == 3;     " +

//@ assert x[0] == 0;     " +

//@ assert i == 2;     " +

//@ assert i == 2;     " +

//@ assert aa[1].length == 3;     " +

//@ assert aaa.length == 1;     " +

//@ assert aaa[0].length == 2;     " +

//@ assert aaa[0][0] == null;     " +

//@ assert i == 11;     " +

//@ assert i == 12;     " +

//@ assert (new TestJava() { public pure int m(int i) { return i + 2; } }).m(15) == 17;    " +

/*@ pure */
//@requires i > 0; ensures k == i;    " +

/*@ pure */
//@ assert (new TestJava(2)).k == 2;    " +

//@ assert (new TestJava(0)).k == 0;    " +

//@ assert i == 1;     " +

//@ assert i == 9;      }      

/*@ nullable*/
//@ assert i == 1;     " +

//@ assert c == a + 6;     " +

//@ assert a - c == 6;     " +

//@ assert b == c / 5;     " +

//@ assert b == c * 2;     " +

//@ assert a % b == a && c == 1;     " +

//@ assert  f && a <= b;     " +

//@ assert  f && a < b;     " +

//@ assert  !f && a >= b;     " +

//@ assert  !f && a > b;     " +

//@ assert (c > 4? a + 3 : b + 3) == 9;     " +   // ERROR

//@ assert b+1 == a;     " +

//@ assert b-1 == a;     " +

//@ assert b == a && c+1 == b;     " +

//@ assert b == a && c == b;     " +

//@ assert b == -5;     " +

//@ assert  !d;     " +

//@ assert ((((c) == 50)));     " +

//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 2;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == k;           " +

//@ assert i == k;      break;     " +

//@ assert i == k;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 2;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 2;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 2;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 2;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 2;      break;     " +

//@ assert i == 0;      break;     " +

/*@ nullable_by_default*/
//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 2;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 'a';      break;     " +

//@ assert i == 'a';      break;     " +

//@ assert i == 'c';      break;     " +

//@ assert i == 'a';      break;     " +

//@ assert i == 'a';      break;     " +

//@ assert i == 'a';      break;     " +

//@ assert i == 'c';      break;     " +

//@ assert i == 'a';      break;     " +



//@ assert o instanceof Integer;     " +

//@ assert o instanceof Integer;     " +


//@ assert (Integer)o != null;     " +

//@ assert (Integer)o != null;     " +


//@ assert o instanceof Integer && (Integer)o != null;     " +

//@ assert o instanceof Integer && (Integer)o != null;     " +

/*@nullable*/
//@ assert (\\lbl STRING \"def\") != null;     " +

//@ assert (\\lbl SHORT (short)(i)) != 0;     " +

//@ assert (\\lbl LONG (long)(i)) != 0;     " +

//@ assert (\\lbl BYTE (byte)(i)) != 0;     " +

//@ assert (\\lbl INT (int)(i)) != 0;     " +

//@ assert (\\lbl FLOAT (float)(i)) != 0;     " +

//@ assert (\\lbl DOUBLE (double)(i)) != 0;     " +

//@ assert (\\lbl CHAR (char)(i+60) ) != 0;     " +

//@ assert (\\lbl BOOLEAN (i == 0)) ;     " +

//@ assert (\\lbl OBJECT o) == null;     " +

//@ assert (\\lbl NULL null) == null;     " +

//@ assert (\\lbl STRING \"abc\") != null;     " +

//@ assert (\\lblpos POST (i!=0));     " +

//@ assert !(\\lblpos POSF (i==0));     " +

//@ assert (\\lblneg NEGT (i!=0));     " +

//@ assert !(\\lblneg NEGF (i==0));     " +

//@ assert !(\\lblpos POST (i!=0));     " +

//@ assert (\\lblneg NEGF (i==0));     " +

/*@nullable*/
//@ assert (\\lbl OBJECT null) == null;     " +

//@ assert (\\lbl INT 4) != 0;     " +

//@ assert (\\lbl SHORT (short)(1)) != 0;     " +

//@ assert (\\lbl LONG 2L) != 0;     " +

//@ assert (\\lbl BYTE (byte)(3)) != 0;     " +

//@ assert (\\lbl FLOAT 5.0f) != 0;     " +

//@ assert (\\lbl DOUBLE 6.0) != 0;     " +

//@ assert (\\lbl CHAR 'a') != 0;     " +

//@ assert (\\lbl BOOLEAN true) ;     " +

//@ assert (\\lbl STRING \"abc\") != null;     " +

/*@ assignable \\everything; */
/*@ assignable \\everything; ensures (\\lbl ENS k == 1); */
/*@ assignable \\everything; ensures (\\lbl ENS k == 1); */
/*@ assignable \\everything; ensures (\\lbl ENS k == 1); */
/*@ assignable \\everything; */
/*@ assignable \\everything; ensures (\\lblneg ENS (\\lbl RES k) == 1); */
//@ ghost boolean k; set k = m(); assert k;     " +

//@                  set k = m(); assert k;     " +

//@ ghost static int i = 0;     " +

//@ ghost static int j = 0;     " +

//@ model static boolean m() { j = 1; i+= 1; int k = 2; return i == 1; } " +

//@ assert a[0] == 0;     " +

//@ assert b != null && b[0] == 0;     " +

//@ assert b[0] == 0;     " +

/*@nullable*/
/*@nullable*/
//@ debug System.out.println(p(new G()));     " +

//@ model static public class G {}     " +

//@ model static int p(G i) { return 5; }     " +

/*@nullable*/
//@ ensures i == 0;      "

//@ nowarn Postcondition;     "

//@ nowarn;     "

//@ nowarn InvariantExit;     "

//@ nowarn InvariantExit,Postcondition;     "

//@ public invariant i == 0;      "

//@ nowarn InvariantExit;      "

//@ public invariant i == 0;      "

//@ nowarn ;      "

//@ public invariant i == 0;      "

//@ nowarn Precondition ;      "

//@ invariant i == 0;      "

//@ nowarn Precondition, InvariantExit ;      "

//@ nowarn InvariantExit;     "

/*@ requires i == j; ensures \\result; */
/*@ assignable i; */
/*@ requires i == j; ensures \\result; */
/*@ assignable i; */
/*@ requires i == j; ensures \\result; */
//@ ensures i == k;      "

//@ ensures i == 1;      "

//@ ensures (\\let int k = 1; \\result == k + i) ;      "

//@ ensures (\\let int k = 1; \\result == k - i) ;      "

//@ ensures (\\let int k = 1, int j = k; \\result == j + i) ;      "

//@ ensures (\\let int k = 1, int j = k; \\result == j - i) ;      "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i+1;    }    "

/*@ nullable_by_default*/
//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i+1;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i+1;    }    "

/*@ nullable_by_default*/
//@ assert k == 11;    }    "

//@ assert  !k;    }    "

/*@ nullable_by_default*/
//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

/*@ nullable_by_default*/
//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == false;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == false;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == 6;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == 6;    } catch (Exception e) {}    "

//@ assert k == -i;    } catch (Exception e) {}    "

//@ assert k == -6;    } catch (Exception e) {}    "

//@ assert k == 6;    } catch (Exception e) {}    "

//@ assert ii == 6;    } catch (Exception e) {}    "

//@ assert i == 6;    } catch (Exception e) {}    "

//@ assert i == 5;    } catch (Exception e) {}    "

//@ assert i == 6;    } catch (Exception e) {}    "

//@ assert i == 5;    } catch (Exception e) {}    "

/*@ nullable_by_default*/
//@ assert j == 6;     }    "

//@ assert m == 6;     }    "

/*@ nullable_by_default*/
/*@ nullable_by_default*/
/*@ nullable_by_default*/
/*@ nullable_by_default*/
/*@ nullable_by_default*/
//@ ensures \\result > 0;     " +

//@ assert i == 2;     " +

//@ assert i == 2;     " +

//@ assert aa[1].length == 3;     " +

//@ assert (new int[]{1,2,3}).length == 3;     " +

//@ assert (new int[]{1,2,3})[1] == 2;     " +

//@ assert aaa.length == 1;     " +

//@ assert aaa[0].length == 2;     " +

//@ assert aaa[0][0] == null;     " +

//@ assert x.length == 3;     " +

//@ assert x[0] == 0;     " +

//@ assert i == 2;     " +

//@ assert i == 2;     " +

//@ assert aa[1].length == 3;     " +

//@ assert aaa.length == 1;     " +

//@ assert aaa[0].length == 2;     " +

//@ assert aaa[0][0] == null;     " +

//@ assert i == 11;     " +

//@ assert i == 12;     " +

//@ assert (new TestJava() { public pure int m(int i) { return i + 2; } }).m(15) == 17;    " +

/*@ pure */
//@requires i > 0; ensures k == i;    " +

/*@ pure */
//@ assert (new TestJava(2)).k == 2;    " +

//@ assert (new TestJava(0)).k == 0;    " +

//@ assert i == 1;     " +

//@ assert i == 9;      }      

/*@ nullable*/
//@ assert i == 1;     " +

//@ assert c == a + 6;     " +

//@ assert a - c == 6;     " +

//@ assert b == c / 5;     " +

//@ assert b == c * 2;     " +

//@ assert a % b == a && c == 1;     " +

//@ assert  f && a <= b;     " +

//@ assert  f && a < b;     " +

//@ assert  !f && a >= b;     " +

//@ assert  !f && a > b;     " +

//@ assert (c > 4? a + 3 : b + 3) == 9;     " +   // ERROR

//@ assert b+1 == a;     " +

//@ assert b-1 == a;     " +

//@ assert b == a && c+1 == b;     " +

//@ assert b == a && c == b;     " +

//@ assert b == -5;     " +

//@ assert  !d;     " +

//@ assert ((((c) == 50)));     " +

//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 2;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == k;           " +

//@ assert i == k;      break;     " +

//@ assert i == k;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 2;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 2;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 2;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 2;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 2;      break;     " +

//@ assert i == 0;      break;     " +

/*@ nullable_by_default*/
//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 2;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 'a';      break;     " +

//@ assert i == 'a';      break;     " +

//@ assert i == 'c';      break;     " +

//@ assert i == 'a';      break;     " +

//@ assert i == 'a';      break;     " +

//@ assert i == 'a';      break;     " +

//@ assert i == 'c';      break;     " +

//@ assert i == 'a';      break;     " +



//@ assert o instanceof Integer;     " +

//@ assert o instanceof Integer;     " +


//@ assert (Integer)o != null;     " +

//@ assert (Integer)o != null;     " +


//@ assert o instanceof Integer && (Integer)o != null;     " +

//@ assert o instanceof Integer && (Integer)o != null;     " +

/*@nullable*/
//@ assert (\\lbl STRING \"def\") != null;     " +

//@ assert (\\lbl SHORT (short)(i)) != 0;     " +

//@ assert (\\lbl LONG (long)(i)) != 0;     " +

//@ assert (\\lbl BYTE (byte)(i)) != 0;     " +

//@ assert (\\lbl INT (int)(i)) != 0;     " +

//@ assert (\\lbl FLOAT (float)(i)) != 0;     " +

//@ assert (\\lbl DOUBLE (double)(i)) != 0;     " +

//@ assert (\\lbl CHAR (char)(i+60) ) != 0;     " +

//@ assert (\\lbl BOOLEAN (i == 0)) ;     " +

//@ assert (\\lbl OBJECT o) == null;     " +

//@ assert (\\lbl NULL null) == null;     " +

//@ assert (\\lbl STRING \"abc\") != null;     " +

//@ assert (\\lblpos POST (i!=0));     " +

//@ assert !(\\lblpos POSF (i==0));     " +

//@ assert (\\lblneg NEGT (i!=0));     " +

//@ assert !(\\lblneg NEGF (i==0));     " +

//@ assert !(\\lblpos POST (i!=0));     " +

//@ assert (\\lblneg NEGF (i==0));     " +

/*@nullable*/
//@ assert (\\lbl OBJECT null) == null;     " +

//@ assert (\\lbl INT 4) != 0;     " +

//@ assert (\\lbl SHORT (short)(1)) != 0;     " +

//@ assert (\\lbl LONG 2L) != 0;     " +

//@ assert (\\lbl BYTE (byte)(3)) != 0;     " +

//@ assert (\\lbl FLOAT 5.0f) != 0;     " +

//@ assert (\\lbl DOUBLE 6.0) != 0;     " +

//@ assert (\\lbl CHAR 'a') != 0;     " +

//@ assert (\\lbl BOOLEAN true) ;     " +

//@ assert (\\lbl STRING \"abc\") != null;     " +

/*@ assignable \\everything; */
/*@ assignable \\everything; ensures (\\lbl ENS k == 1); */
/*@ assignable \\everything; ensures (\\lbl ENS k == 1); */
/*@ assignable \\everything; ensures (\\lbl ENS k == 1); */
/*@ assignable \\everything; */
/*@ assignable \\everything; ensures (\\lblneg ENS (\\lbl RES k) == 1); */
//@ ghost boolean k; set k = m(); assert k;     " +

//@                  set k = m(); assert k;     " +

//@ ghost static int i = 0;     " +

//@ ghost static int j = 0;     " +

//@ model static boolean m() { j = 1; i+= 1; int k = 2; return i == 1; } " +

//@ assert a[0] == 0;     " +

//@ assert b != null && b[0] == 0;     " +

//@ assert b[0] == 0;     " +

/*@nullable*/
/*@nullable*/
//@ debug System.out.println(p(new G()));     " +

//@ model static public class G {}     " +

//@ model static int p(G i) { return 5; }     " +

/*@nullable*/
//@ ensures i == 0;      "

//@ nowarn Postcondition;     "

//@ nowarn;     "

//@ nowarn InvariantExit;     "

//@ nowarn InvariantExit,Postcondition;     "

//@ public invariant i == 0;      "

//@ nowarn InvariantExit;      "

//@ public invariant i == 0;      "

//@ nowarn ;      "

//@ public invariant i == 0;      "

//@ nowarn Precondition ;      "

//@ invariant i == 0;      "

//@ nowarn Precondition, InvariantExit ;      "

//@ nowarn InvariantExit;     "

/*@ requires i == j; ensures \\result; */
/*@ assignable i; */
/*@ requires i == j; ensures \\result; */
/*@ assignable i; */
/*@ requires i == j; ensures \\result; */
//@ ensures i == k;      "

//@ ensures i == 1;      "

//@ ensures (\\let int k = 1; \\result == k + i) ;      "

//@ ensures (\\let int k = 1; \\result == k - i) ;      "

//@ ensures (\\let int k = 1, int j = k; \\result == j + i) ;      "

//@ ensures (\\let int k = 1, int j = k; \\result == j - i) ;      "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i+1;    }    "

/*@ nullable_by_default*/
//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i+1;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i+1;    }    "

/*@ nullable_by_default*/
//@ assert k == 11;    }    "

//@ assert  !k;    }    "

/*@ nullable_by_default*/
//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

/*@ nullable_by_default*/
//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == false;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == false;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == 6;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == 6;    } catch (Exception e) {}    "

//@ assert k == -i;    } catch (Exception e) {}    "

//@ assert k == -6;    } catch (Exception e) {}    "

//@ assert k == 6;    } catch (Exception e) {}    "

//@ assert ii == 6;    } catch (Exception e) {}    "

//@ assert i == 6;    } catch (Exception e) {}    "

//@ assert i == 5;    } catch (Exception e) {}    "

//@ assert i == 6;    } catch (Exception e) {}    "

//@ assert i == 5;    } catch (Exception e) {}    "

/*@ nullable_by_default*/
//@ assert j == 6;     }    "

//@ assert m == 6;     }    "

/*@ nullable_by_default*/
/*@ nullable_by_default*/
/*@ nullable_by_default*/
/*@ nullable_by_default*/
/*@ nullable_by_default*/
//@ ensures \\result > 0;     " +

//@ assert i == 2;     " +

//@ assert i == 2;     " +

//@ assert aa[1].length == 3;     " +

//@ assert (new int[]{1,2,3}).length == 3;     " +

//@ assert (new int[]{1,2,3})[1] == 2;     " +

//@ assert aaa.length == 1;     " +

//@ assert aaa[0].length == 2;     " +

//@ assert aaa[0][0] == null;     " +

//@ assert x.length == 3;     " +

//@ assert x[0] == 0;     " +

//@ assert i == 2;     " +

//@ assert i == 2;     " +

//@ assert aa[1].length == 3;     " +

//@ assert aaa.length == 1;     " +

//@ assert aaa[0].length == 2;     " +

//@ assert aaa[0][0] == null;     " +

//@ assert i == 11;     " +

//@ assert i == 12;     " +

//@ assert (new TestJava() { public pure int m(int i) { return i + 2; } }).m(15) == 17;    " +

/*@ pure */
//@requires i > 0; ensures k == i;    " +

/*@ pure */
//@ assert (new TestJava(2)).k == 2;    " +

//@ assert (new TestJava(0)).k == 0;    " +

//@ assert i == 1;     " +

//@ assert i == 9;      }      

/*@ nullable*/
//@ assert i == 1;     " +

//@ assert c == a + 6;     " +

//@ assert a - c == 6;     " +

//@ assert b == c / 5;     " +

//@ assert b == c * 2;     " +

//@ assert a % b == a && c == 1;     " +

//@ assert  f && a <= b;     " +

//@ assert  f && a < b;     " +

//@ assert  !f && a >= b;     " +

//@ assert  !f && a > b;     " +

//@ assert (c > 4? a + 3 : b + 3) == 9;     " +   // ERROR

//@ assert b+1 == a;     " +

//@ assert b-1 == a;     " +

//@ assert b == a && c+1 == b;     " +

//@ assert b == a && c == b;     " +

//@ assert b == -5;     " +

//@ assert  !d;     " +

//@ assert ((((c) == 50)));     " +

//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 2;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == k;           " +

//@ assert i == k;      break;     " +

//@ assert i == k;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 2;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 2;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 2;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 2;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 2;      break;     " +

//@ assert i == 0;      break;     " +

/*@ nullable_by_default*/
//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 2;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 'a';      break;     " +

//@ assert i == 'a';      break;     " +

//@ assert i == 'c';      break;     " +

//@ assert i == 'a';      break;     " +

//@ assert i == 'a';      break;     " +

//@ assert i == 'a';      break;     " +

//@ assert i == 'c';      break;     " +

//@ assert i == 'a';      break;     " +



//@ assert o instanceof Integer;     " +

//@ assert o instanceof Integer;     " +


//@ assert (Integer)o != null;     " +

//@ assert (Integer)o != null;     " +


//@ assert o instanceof Integer && (Integer)o != null;     " +

//@ assert o instanceof Integer && (Integer)o != null;     " +

/*@nullable*/
//@ assert (\\lbl STRING \"def\") != null;     " +

//@ assert (\\lbl SHORT (short)(i)) != 0;     " +

//@ assert (\\lbl LONG (long)(i)) != 0;     " +

//@ assert (\\lbl BYTE (byte)(i)) != 0;     " +

//@ assert (\\lbl INT (int)(i)) != 0;     " +

//@ assert (\\lbl FLOAT (float)(i)) != 0;     " +

//@ assert (\\lbl DOUBLE (double)(i)) != 0;     " +

//@ assert (\\lbl CHAR (char)(i+60) ) != 0;     " +

//@ assert (\\lbl BOOLEAN (i == 0)) ;     " +

//@ assert (\\lbl OBJECT o) == null;     " +

//@ assert (\\lbl NULL null) == null;     " +

//@ assert (\\lbl STRING \"abc\") != null;     " +

//@ assert (\\lblpos POST (i!=0));     " +

//@ assert !(\\lblpos POSF (i==0));     " +

//@ assert (\\lblneg NEGT (i!=0));     " +

//@ assert !(\\lblneg NEGF (i==0));     " +

//@ assert !(\\lblpos POST (i!=0));     " +

//@ assert (\\lblneg NEGF (i==0));     " +

/*@nullable*/
//@ assert (\\lbl OBJECT null) == null;     " +

//@ assert (\\lbl INT 4) != 0;     " +

//@ assert (\\lbl SHORT (short)(1)) != 0;     " +

//@ assert (\\lbl LONG 2L) != 0;     " +

//@ assert (\\lbl BYTE (byte)(3)) != 0;     " +

//@ assert (\\lbl FLOAT 5.0f) != 0;     " +

//@ assert (\\lbl DOUBLE 6.0) != 0;     " +

//@ assert (\\lbl CHAR 'a') != 0;     " +

//@ assert (\\lbl BOOLEAN true) ;     " +

//@ assert (\\lbl STRING \"abc\") != null;     " +

/*@ assignable \\everything; */
/*@ assignable \\everything; ensures (\\lbl ENS k == 1); */
/*@ assignable \\everything; ensures (\\lbl ENS k == 1); */
/*@ assignable \\everything; ensures (\\lbl ENS k == 1); */
/*@ assignable \\everything; */
/*@ assignable \\everything; ensures (\\lblneg ENS (\\lbl RES k) == 1); */
//@ ghost boolean k; set k = m(); assert k;     " +

//@                  set k = m(); assert k;     " +

//@ ghost static int i = 0;     " +

//@ ghost static int j = 0;     " +

//@ model static boolean m() { j = 1; i+= 1; int k = 2; return i == 1; } " +

//@ assert a[0] == 0;     " +

//@ assert b != null && b[0] == 0;     " +

//@ assert b[0] == 0;     " +

/*@nullable*/
/*@nullable*/
//@ debug System.out.println(p(new G()));     " +

//@ model static public class G {}     " +

//@ model static int p(G i) { return 5; }     " +

/*@nullable*/
//@ ensures i == 0;      "

//@ nowarn Postcondition;     "

//@ nowarn;     "

//@ nowarn InvariantExit;     "

//@ nowarn InvariantExit,Postcondition;     "

//@ public invariant i == 0;      "

//@ nowarn InvariantExit;      "

//@ public invariant i == 0;      "

//@ nowarn ;      "

//@ public invariant i == 0;      "

//@ nowarn Precondition ;      "

//@ invariant i == 0;      "

//@ nowarn Precondition, InvariantExit ;      "

//@ nowarn InvariantExit;     "

/*@ requires i == j; ensures \\result; */
/*@ assignable i; */
/*@ requires i == j; ensures \\result; */
/*@ assignable i; */
/*@ requires i == j; ensures \\result; */
//@ ensures i == k;      "

//@ ensures i == 1;      "

//@ ensures (\\let int k = 1; \\result == k + i) ;      "

//@ ensures (\\let int k = 1; \\result == k - i) ;      "

//@ ensures (\\let int k = 1, int j = k; \\result == j + i) ;      "

//@ ensures (\\let int k = 1, int j = k; \\result == j - i) ;      "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i+1;    }    "

/*@ nullable_by_default*/
//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i+1;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i+1;    }    "

/*@ nullable_by_default*/
//@ assert k == 11;    }    "

//@ assert  !k;    }    "

/*@ nullable_by_default*/
//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

/*@ nullable_by_default*/
//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == false;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == false;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == 6;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == 6;    } catch (Exception e) {}    "

//@ assert k == -i;    } catch (Exception e) {}    "

//@ assert k == -6;    } catch (Exception e) {}    "

//@ assert k == 6;    } catch (Exception e) {}    "

//@ assert ii == 6;    } catch (Exception e) {}    "

//@ assert i == 6;    } catch (Exception e) {}    "

//@ assert i == 5;    } catch (Exception e) {}    "

//@ assert i == 6;    } catch (Exception e) {}    "

//@ assert i == 5;    } catch (Exception e) {}    "

/*@ nullable_by_default*/
//@ assert j == 6;     }    "

//@ assert m == 6;     }    "

/*@ nullable_by_default*/
/*@ nullable_by_default*/
/*@ nullable_by_default*/
/*@ nullable_by_default*/
/*@ nullable_by_default*/
//@ ensures \\result > 0;     " +

//@ assert i == 2;     " +

//@ assert i == 2;     " +

//@ assert aa[1].length == 3;     " +

//@ assert (new int[]{1,2,3}).length == 3;     " +

//@ assert (new int[]{1,2,3})[1] == 2;     " +

//@ assert aaa.length == 1;     " +

//@ assert aaa[0].length == 2;     " +

//@ assert aaa[0][0] == null;     " +

//@ assert x.length == 3;     " +

//@ assert x[0] == 0;     " +

//@ assert i == 2;     " +

//@ assert i == 2;     " +

//@ assert aa[1].length == 3;     " +

//@ assert aaa.length == 1;     " +

//@ assert aaa[0].length == 2;     " +

//@ assert aaa[0][0] == null;     " +

//@ assert i == 11;     " +

//@ assert i == 12;     " +

//@ assert (new TestJava() { public pure int m(int i) { return i + 2; } }).m(15) == 17;    " +

/*@ pure */
//@requires i > 0; ensures k == i;    " +

/*@ pure */
//@ assert (new TestJava(2)).k == 2;    " +

//@ assert (new TestJava(0)).k == 0;    " +

//@ assert i == 1;     " +

//@ assert i == 9;      }      

/*@ nullable*/
//@ assert i == 1;     " +

//@ assert c == a + 6;     " +

//@ assert a - c == 6;     " +

//@ assert b == c / 5;     " +

//@ assert b == c * 2;     " +

//@ assert a % b == a && c == 1;     " +

//@ assert  f && a <= b;     " +

//@ assert  f && a < b;     " +

//@ assert  !f && a >= b;     " +

//@ assert  !f && a > b;     " +

//@ assert (c > 4? a + 3 : b + 3) == 9;     " +   // ERROR

//@ assert b+1 == a;     " +

//@ assert b-1 == a;     " +

//@ assert b == a && c+1 == b;     " +

//@ assert b == a && c == b;     " +

//@ assert b == -5;     " +

//@ assert  !d;     " +

//@ assert ((((c) == 50)));     " +

//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 2;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == k;           " +

//@ assert i == k;      break;     " +

//@ assert i == k;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 2;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 2;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 2;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 2;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 2;      break;     " +

//@ assert i == 0;      break;     " +

/*@ nullable_by_default*/
//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 2;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 'a';      break;     " +

//@ assert i == 'a';      break;     " +

//@ assert i == 'c';      break;     " +

//@ assert i == 'a';      break;     " +

//@ assert i == 'a';      break;     " +

//@ assert i == 'a';      break;     " +

//@ assert i == 'c';      break;     " +

//@ assert i == 'a';      break;     " +



//@ assert o instanceof Integer;     " +

//@ assert o instanceof Integer;     " +


//@ assert (Integer)o != null;     " +

//@ assert (Integer)o != null;     " +


//@ assert o instanceof Integer && (Integer)o != null;     " +

//@ assert o instanceof Integer && (Integer)o != null;     " +

/*@nullable*/
//@ assert (\\lbl STRING \"def\") != null;     " +

//@ assert (\\lbl SHORT (short)(i)) != 0;     " +

//@ assert (\\lbl LONG (long)(i)) != 0;     " +

//@ assert (\\lbl BYTE (byte)(i)) != 0;     " +

//@ assert (\\lbl INT (int)(i)) != 0;     " +

//@ assert (\\lbl FLOAT (float)(i)) != 0;     " +

//@ assert (\\lbl DOUBLE (double)(i)) != 0;     " +

//@ assert (\\lbl CHAR (char)(i+60) ) != 0;     " +

//@ assert (\\lbl BOOLEAN (i == 0)) ;     " +

//@ assert (\\lbl OBJECT o) == null;     " +

//@ assert (\\lbl NULL null) == null;     " +

//@ assert (\\lbl STRING \"abc\") != null;     " +

//@ assert (\\lblpos POST (i!=0));     " +

//@ assert !(\\lblpos POSF (i==0));     " +

//@ assert (\\lblneg NEGT (i!=0));     " +

//@ assert !(\\lblneg NEGF (i==0));     " +

//@ assert !(\\lblpos POST (i!=0));     " +

//@ assert (\\lblneg NEGF (i==0));     " +

/*@nullable*/
//@ assert (\\lbl OBJECT null) == null;     " +

//@ assert (\\lbl INT 4) != 0;     " +

//@ assert (\\lbl SHORT (short)(1)) != 0;     " +

//@ assert (\\lbl LONG 2L) != 0;     " +

//@ assert (\\lbl BYTE (byte)(3)) != 0;     " +

//@ assert (\\lbl FLOAT 5.0f) != 0;     " +

//@ assert (\\lbl DOUBLE 6.0) != 0;     " +

//@ assert (\\lbl CHAR 'a') != 0;     " +

//@ assert (\\lbl BOOLEAN true) ;     " +

//@ assert (\\lbl STRING \"abc\") != null;     " +

/*@ assignable \\everything; */
/*@ assignable \\everything; ensures (\\lbl ENS k == 1); */
/*@ assignable \\everything; ensures (\\lbl ENS k == 1); */
/*@ assignable \\everything; ensures (\\lbl ENS k == 1); */
/*@ assignable \\everything; */
/*@ assignable \\everything; ensures (\\lblneg ENS (\\lbl RES k) == 1); */
//@ ghost boolean k; set k = m(); assert k;     " +

//@                  set k = m(); assert k;     " +

//@ ghost static int i = 0;     " +

//@ ghost static int j = 0;     " +

//@ model static boolean m() { j = 1; i+= 1; int k = 2; return i == 1; } " +

//@ assert a[0] == 0;     " +

//@ assert b != null && b[0] == 0;     " +

//@ assert b[0] == 0;     " +

/*@nullable*/
/*@nullable*/
//@ debug System.out.println(p(new G()));     " +

//@ model static public class G {}     " +

//@ model static int p(G i) { return 5; }     " +

/*@nullable*/
//@ ensures i == 0;      "

//@ nowarn Postcondition;     "

//@ nowarn;     "

//@ nowarn InvariantExit;     "

//@ nowarn InvariantExit,Postcondition;     "

//@ public invariant i == 0;      "

//@ nowarn InvariantExit;      "

//@ public invariant i == 0;      "

//@ nowarn ;      "

//@ public invariant i == 0;      "

//@ nowarn Precondition ;      "

//@ invariant i == 0;      "

//@ nowarn Precondition, InvariantExit ;      "

//@ nowarn InvariantExit;     "

/*@ requires i == j; ensures \\result; */
/*@ assignable i; */
/*@ requires i == j; ensures \\result; */
/*@ assignable i; */
/*@ requires i == j; ensures \\result; */
//@ ensures i == k;      "

//@ ensures i == 1;      "

//@ ensures (\\let int k = 1; \\result == k + i) ;      "

//@ ensures (\\let int k = 1; \\result == k - i) ;      "

//@ ensures (\\let int k = 1, int j = k; \\result == j + i) ;      "

//@ ensures (\\let int k = 1, int j = k; \\result == j - i) ;      "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i+1;    }    "

/*@ nullable_by_default*/
//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i+1;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i+1;    }    "

/*@ nullable_by_default*/
//@ assert k == 11;    }    "

//@ assert  !k;    }    "

/*@ nullable_by_default*/
//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

/*@ nullable_by_default*/
//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == false;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == false;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == 6;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == 6;    } catch (Exception e) {}    "

//@ assert k == -i;    } catch (Exception e) {}    "

//@ assert k == -6;    } catch (Exception e) {}    "

//@ assert k == 6;    } catch (Exception e) {}    "

//@ assert ii == 6;    } catch (Exception e) {}    "

//@ assert i == 6;    } catch (Exception e) {}    "

//@ assert i == 5;    } catch (Exception e) {}    "

//@ assert i == 6;    } catch (Exception e) {}    "

//@ assert i == 5;    } catch (Exception e) {}    "

/*@ nullable_by_default*/
//@ assert j == 6;     }    "

//@ assert m == 6;     }    "

/*@ nullable_by_default*/
/*@ nullable_by_default*/
/*@ nullable_by_default*/
/*@ nullable_by_default*/
/*@ nullable_by_default*/
//@ ensures \\result > 0;     " +

//@ assert i == 2;     " +

//@ assert i == 2;     " +

//@ assert aa[1].length == 3;     " +

//@ assert (new int[]{1,2,3}).length == 3;     " +

//@ assert (new int[]{1,2,3})[1] == 2;     " +

//@ assert aaa.length == 1;     " +

//@ assert aaa[0].length == 2;     " +

//@ assert aaa[0][0] == null;     " +

//@ assert x.length == 3;     " +

//@ assert x[0] == 0;     " +

//@ assert i == 2;     " +

//@ assert i == 2;     " +

//@ assert aa[1].length == 3;     " +

//@ assert aaa.length == 1;     " +

//@ assert aaa[0].length == 2;     " +

//@ assert aaa[0][0] == null;     " +

//@ assert i == 11;     " +

//@ assert i == 12;     " +

//@ assert (new TestJava() { public pure int m(int i) { return i + 2; } }).m(15) == 17;    " +

/*@ pure */
//@requires i > 0; ensures k == i;    " +

/*@ pure */
//@ assert (new TestJava(2)).k == 2;    " +

//@ assert (new TestJava(0)).k == 0;    " +

//@ assert i == 1;     " +

//@ assert i == 9;      }      

/*@ nullable*/
//@ assert i == 1;     " +

//@ assert c == a + 6;     " +

//@ assert a - c == 6;     " +

//@ assert b == c / 5;     " +

//@ assert b == c * 2;     " +

//@ assert a % b == a && c == 1;     " +

//@ assert  f && a <= b;     " +

//@ assert  f && a < b;     " +

//@ assert  !f && a >= b;     " +

//@ assert  !f && a > b;     " +

//@ assert (c > 4? a + 3 : b + 3) == 9;     " +   // ERROR

//@ assert b+1 == a;     " +

//@ assert b-1 == a;     " +

//@ assert b == a && c+1 == b;     " +

//@ assert b == a && c == b;     " +

//@ assert b == -5;     " +

//@ assert  !d;     " +

//@ assert ((((c) == 50)));     " +

//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 2;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == k;           " +

//@ assert i == k;      break;     " +

//@ assert i == k;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 2;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 2;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 2;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 2;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 2;      break;     " +

//@ assert i == 0;      break;     " +

/*@ nullable_by_default*/
//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 2;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 'a';      break;     " +

//@ assert i == 'a';      break;     " +

//@ assert i == 'c';      break;     " +

//@ assert i == 'a';      break;     " +

//@ assert i == 'a';      break;     " +

//@ assert i == 'a';      break;     " +

//@ assert i == 'c';      break;     " +

//@ assert i == 'a';      break;     " +



//@ assert o instanceof Integer;     " +

//@ assert o instanceof Integer;     " +


//@ assert (Integer)o != null;     " +

//@ assert (Integer)o != null;     " +


//@ assert o instanceof Integer && (Integer)o != null;     " +

//@ assert o instanceof Integer && (Integer)o != null;     " +

/*@nullable*/
//@ assert (\\lbl STRING \"def\") != null;     " +

//@ assert (\\lbl SHORT (short)(i)) != 0;     " +

//@ assert (\\lbl LONG (long)(i)) != 0;     " +

//@ assert (\\lbl BYTE (byte)(i)) != 0;     " +

//@ assert (\\lbl INT (int)(i)) != 0;     " +

//@ assert (\\lbl FLOAT (float)(i)) != 0;     " +

//@ assert (\\lbl DOUBLE (double)(i)) != 0;     " +

//@ assert (\\lbl CHAR (char)(i+60) ) != 0;     " +

//@ assert (\\lbl BOOLEAN (i == 0)) ;     " +

//@ assert (\\lbl OBJECT o) == null;     " +

//@ assert (\\lbl NULL null) == null;     " +

//@ assert (\\lbl STRING \"abc\") != null;     " +

//@ assert (\\lblpos POST (i!=0));     " +

//@ assert !(\\lblpos POSF (i==0));     " +

//@ assert (\\lblneg NEGT (i!=0));     " +

//@ assert !(\\lblneg NEGF (i==0));     " +

//@ assert !(\\lblpos POST (i!=0));     " +

//@ assert (\\lblneg NEGF (i==0));     " +

/*@nullable*/
//@ assert (\\lbl OBJECT null) == null;     " +

//@ assert (\\lbl INT 4) != 0;     " +

//@ assert (\\lbl SHORT (short)(1)) != 0;     " +

//@ assert (\\lbl LONG 2L) != 0;     " +

//@ assert (\\lbl BYTE (byte)(3)) != 0;     " +

//@ assert (\\lbl FLOAT 5.0f) != 0;     " +

//@ assert (\\lbl DOUBLE 6.0) != 0;     " +

//@ assert (\\lbl CHAR 'a') != 0;     " +

//@ assert (\\lbl BOOLEAN true) ;     " +

//@ assert (\\lbl STRING \"abc\") != null;     " +

/*@ assignable \\everything; */
/*@ assignable \\everything; ensures (\\lbl ENS k == 1); */
/*@ assignable \\everything; ensures (\\lbl ENS k == 1); */
/*@ assignable \\everything; ensures (\\lbl ENS k == 1); */
/*@ assignable \\everything; */
/*@ assignable \\everything; ensures (\\lblneg ENS (\\lbl RES k) == 1); */
//@ ghost boolean k; set k = m(); assert k;     " +

//@                  set k = m(); assert k;     " +

//@ ghost static int i = 0;     " +

//@ ghost static int j = 0;     " +

//@ model static boolean m() { j = 1; i+= 1; int k = 2; return i == 1; } " +

//@ assert a[0] == 0;     " +

//@ assert b != null && b[0] == 0;     " +

//@ assert b[0] == 0;     " +

/*@nullable*/
/*@nullable*/
//@ debug System.out.println(p(new G()));     " +

//@ model static public class G {}     " +

//@ model static int p(G i) { return 5; }     " +

/*@nullable*/
//@ ensures i == 0;      "

//@ nowarn Postcondition;     "

//@ nowarn;     "

//@ nowarn InvariantExit;     "

//@ nowarn InvariantExit,Postcondition;     "

//@ public invariant i == 0;      "

//@ nowarn InvariantExit;      "

//@ public invariant i == 0;      "

//@ nowarn ;      "

//@ public invariant i == 0;      "

//@ nowarn Precondition ;      "

//@ invariant i == 0;      "

//@ nowarn Precondition, InvariantExit ;      "

//@ nowarn InvariantExit;     "

/*@ requires i == j; ensures \\result; */
/*@ assignable i; */
/*@ requires i == j; ensures \\result; */
/*@ assignable i; */
/*@ requires i == j; ensures \\result; */
//@ ensures i == k;      "

//@ ensures i == 1;      "

//@ ensures (\\let int k = 1; \\result == k + i) ;      "

//@ ensures (\\let int k = 1; \\result == k - i) ;      "

//@ ensures (\\let int k = 1, int j = k; \\result == j + i) ;      "

//@ ensures (\\let int k = 1, int j = k; \\result == j - i) ;      "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i+1;    }    "

/*@ nullable_by_default*/
//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i+1;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i+1;    }    "

/*@ nullable_by_default*/
//@ assert k == 11;    }    "

//@ assert  !k;    }    "

/*@ nullable_by_default*/
//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

/*@ nullable_by_default*/
//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == false;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == false;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == 6;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == 6;    } catch (Exception e) {}    "

//@ assert k == -i;    } catch (Exception e) {}    "

//@ assert k == -6;    } catch (Exception e) {}    "

//@ assert k == 6;    } catch (Exception e) {}    "

//@ assert ii == 6;    } catch (Exception e) {}    "

//@ assert i == 6;    } catch (Exception e) {}    "

//@ assert i == 5;    } catch (Exception e) {}    "

//@ assert i == 6;    } catch (Exception e) {}    "

//@ assert i == 5;    } catch (Exception e) {}    "

/*@ nullable_by_default*/
//@ assert j == 6;     }    "

//@ assert m == 6;     }    "

/*@ nullable_by_default*/
/*@ nullable_by_default*/
/*@ nullable_by_default*/
/*@ nullable_by_default*/
/*@ nullable_by_default*/
//@ assert \    ot_modified(i);    " +

//@ assert \    ot_modified(i);    " + // FAILS

//@ assert \    ot_modified(j,this.f,f);    " +

//@ assert \    ot_modified(this.f);    " + // FAILS

//@ assert \    ot_modified(j,this.f,f);    " +

//@ assert \    ot_modified(f);    " + // FAILS

//@ assert \    ot_modified(a[0]);    " +

//@ assert \    ot_modified(a[0]);    " + // FAILS

//@ requires i == 6;    "

//@ modifies \\everything;    "

//@ assert s == i;    "  // OK

//@ assert b == i;    "  // OK // Line 20

//@ assert c == i;    "  // OK

//@ assert l == i;    "  // OK

//@ assert ii == i;    "  // OK

//@ assert i == (short)i;    "

//@ assert i == (long)i;    "

//@ assert i == (char)i;    "

//@ assert i == (byte)i;    "

//@ assert i == (int)i;    "

//@ requires i == 100000;    "

//@ modifies \\everything;    "

//@ assert s == i;    "  // BAD // Line 37

//@ assert b == i;    "  // BAD

//@ assert c == i;    "  // BAD

//@ assert l == i;    "  // OK

//@ assert ii == i;    "  // OK

//@ assert i == (short)i;    " // BAD // Line

//@ assert i == (long)i;    "

//@ assert i == (char)i;    "

//@ assert i == (byte)i;    "

//@ assert i == (int)i;    "


//@ assert 0 == (short)s;     } catch (NullPointerException e) {}    "


//@ assert 0 == (long)s;    } catch (NullPointerException e) {}    "


//@ assert 0 == (byte)s;    } catch (NullPointerException e) {}    "


//@ assert 0 == (int)s;    } catch (NullPointerException e) {}    "


//@ assert 0 == (char)s;    } catch (NullPointerException e) {}    "


//@ assert 0 == (float)s;    } catch (NullPointerException e) {}    "


//@ assert 0 == (double)s;    } catch (NullPointerException e) {}    "


//@ assert (boolean)s;    } catch (NullPointerException e) {}    "

//@ assert 9 == (Short)s;    "

//@ requires args.length >= 0;     "

//@ ensures args.length == \\result;     "

//@ also assignable TestJava.flag;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 2;    "

//@ assert TestJava.flag == 1;    "

/*@ pure */
//@ also assignable TestJava.flag;    "

//@ ensures TestJava.flag == 1;    "

//@ signals (Exception e) TestJava.flag == 10;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 2;    "

//@ assert (\\lbl FLAG TestJava.flag) == 0 || TestJava.flag == 1|| TestJava.flag == 10;    "

//@ also assignable TestJava.flag;    "

//@ ensures TestJava.flag == 1;    "

//@ signals (Exception e) TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 2;    "

//@ assert TestJava.flag == 1;    "

//@ assert TestJava.flag == 100;    " // ERROR - line 19

//@ also public normal_behavior    "

//@ assignable TestJava.flag;    "

//@ ensures TestJava.flag == 1;    "

//@ also public normal_behavior    "

//@ assignable TestJava.flag;    "

//@ ensures TestJava.flag == 2;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;    "

//@ assert TestJava.flag == 200;    " // ERROR - line 25

/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag;    "

//@ signals_only EE1;    "

//@ signals (Exception e) TestJava.flag == 1;    "

/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag;    "

//@ signals_only EE2;    "

//@ signals (Exception e) TestJava.flag == 2;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 111;    " // not feasible - so not checked in RAC

//@ assert TestJava.flag == 1;    "

//@ assert e instanceof EE3 ;    " // Line 37

//@ assert TestJava.flag == 100;    "

/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag;    "

//@ signals_only EE1;    "

//@ signals (Exception e) TestJava.flag == 1;    "

/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag;    "

//@ signals_only EE2;    "

//@ signals (Exception e) TestJava.flag == 2;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 222;    " // not feasible - so not checked in RAC

//@ assert e instanceof EE3 ;    " // Line 36

//@ assert flag == 2;    "

//@ assert flag == 100;    " // Error

/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag;    "

//@ signals_only EE1;    "

//@ signals (Exception e) TestJava.flag == 1;    "

/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag;    "

//@ signals_only EE2;    "

//@ signals (Exception e) TestJava.flag == 2;    "

//@ requires flag == 0;    " // Line 23

//@ assignable flag;    "

//@ assert TestJava.flag == 0;      "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 222;    "  // Not feasible - so not checked in RAC

//@ assert TestJava.flag == 2;    "  // Line 34 // SHould be OK

//@ assert e instanceof EE1;    "  // Line 35 // Should be OK

//@ also public normal_behavior    "

//@ assignable TestJava.flag;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;    "

//@ also public normal_behavior    "

//@ assignable TestJava.flag;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert normal ==> flag == 1;    "

//@ assert !normal ==> flag == 2;    "

//@ also public normal_behavior    "

//@ assignable TestJava.flag;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;    "  // FIXME - should not be able to skip the catch block

//@ also assignable TestJava.flag;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;    "  // FIXME - should not be able to skip the catch block

//@ also public normal_behavior    "

//@ assignable TestJava.flag;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;     "

//@ also assignable TestJava.flag;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 5;    "

//@ assert \    ot_modified(i);    " +

//@ assert \    ot_modified(i);    " + // FAILS

//@ assert \    ot_modified(j,this.f,f);    " +

//@ assert \    ot_modified(this.f);    " + // FAILS

//@ assert \    ot_modified(j,this.f,f);    " +

//@ assert \    ot_modified(f);    " + // FAILS

//@ assert \    ot_modified(a[0]);    " +

//@ assert \    ot_modified(a[0]);    " + // FAILS

//@ requires i == 6;    "

//@ modifies \\everything;    "

//@ assert s == i;    "  // OK

//@ assert b == i;    "  // OK // Line 20

//@ assert c == i;    "  // OK

//@ assert l == i;    "  // OK

//@ assert ii == i;    "  // OK

//@ assert i == (short)i;    "

//@ assert i == (long)i;    "

//@ assert i == (char)i;    "

//@ assert i == (byte)i;    "

//@ assert i == (int)i;    "

//@ requires i == 100000;    "

//@ modifies \\everything;    "

//@ assert s == i;    "  // BAD // Line 37

//@ assert b == i;    "  // BAD

//@ assert c == i;    "  // BAD

//@ assert l == i;    "  // OK

//@ assert ii == i;    "  // OK

//@ assert i == (short)i;    " // BAD // Line

//@ assert i == (long)i;    "

//@ assert i == (char)i;    "

//@ assert i == (byte)i;    "

//@ assert i == (int)i;    "


//@ assert 0 == (short)s;     } catch (NullPointerException e) {}    "


//@ assert 0 == (long)s;    } catch (NullPointerException e) {}    "


//@ assert 0 == (byte)s;    } catch (NullPointerException e) {}    "


//@ assert 0 == (int)s;    } catch (NullPointerException e) {}    "


//@ assert 0 == (char)s;    } catch (NullPointerException e) {}    "


//@ assert 0 == (float)s;    } catch (NullPointerException e) {}    "


//@ assert 0 == (double)s;    } catch (NullPointerException e) {}    "


//@ assert (boolean)s;    } catch (NullPointerException e) {}    "

//@ assert 9 == (Short)s;    "

//@ requires args.length >= 0;     "

//@ ensures args.length == \\result;     "

//@ also assignable TestJava.flag;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 2;    "

//@ assert TestJava.flag == 1;    "

/*@ pure */
//@ also assignable TestJava.flag;    "

//@ ensures TestJava.flag == 1;    "

//@ signals (Exception e) TestJava.flag == 10;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 2;    "

//@ assert (\\lbl FLAG TestJava.flag) == 0 || TestJava.flag == 1|| TestJava.flag == 10;    "

//@ also assignable TestJava.flag;    "

//@ ensures TestJava.flag == 1;    "

//@ signals (Exception e) TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 2;    "

//@ assert TestJava.flag == 1;    "

//@ assert TestJava.flag == 100;    " // ERROR - line 19

//@ also public normal_behavior    "

//@ assignable TestJava.flag;    "

//@ ensures TestJava.flag == 1;    "

//@ also public normal_behavior    "

//@ assignable TestJava.flag;    "

//@ ensures TestJava.flag == 2;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;    "

//@ assert TestJava.flag == 200;    " // ERROR - line 25

/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag;    "

//@ signals_only EE1;    "

//@ signals (Exception e) TestJava.flag == 1;    "

/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag;    "

//@ signals_only EE2;    "

//@ signals (Exception e) TestJava.flag == 2;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 111;    " // not feasible - so not checked in RAC

//@ assert TestJava.flag == 1;    "

//@ assert e instanceof EE3 ;    " // Line 37

//@ assert TestJava.flag == 100;    "

/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag;    "

//@ signals_only EE1;    "

//@ signals (Exception e) TestJava.flag == 1;    "

/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag;    "

//@ signals_only EE2;    "

//@ signals (Exception e) TestJava.flag == 2;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 222;    " // not feasible - so not checked in RAC

//@ assert e instanceof EE3 ;    " // Line 36

//@ assert flag == 2;    "

//@ assert flag == 100;    " // Error

/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag;    "

//@ signals_only EE1;    "

//@ signals (Exception e) TestJava.flag == 1;    "

/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag;    "

//@ signals_only EE2;    "

//@ signals (Exception e) TestJava.flag == 2;    "

//@ requires flag == 0;    " // Line 23

//@ assignable flag;    "

//@ assert TestJava.flag == 0;      "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 222;    "  // Not feasible - so not checked in RAC

//@ assert TestJava.flag == 2;    "  // Line 34 // SHould be OK

//@ assert e instanceof EE1;    "  // Line 35 // Should be OK

//@ also public normal_behavior    "

//@ assignable TestJava.flag;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;    "

//@ also public normal_behavior    "

//@ assignable TestJava.flag;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert normal ==> flag == 1;    "

//@ assert !normal ==> flag == 2;    "

//@ also public normal_behavior    "

//@ assignable TestJava.flag;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;    "  // FIXME - should not be able to skip the catch block

//@ also assignable TestJava.flag;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;    "  // FIXME - should not be able to skip the catch block

//@ also public normal_behavior    "

//@ assignable TestJava.flag;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;     "

//@ also assignable TestJava.flag;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 5;    "

//@ assert \    ot_modified(i);    " +

//@ assert \    ot_modified(i);    " + // FAILS

//@ assert \    ot_modified(j,this.f,f);    " +

//@ assert \    ot_modified(this.f);    " + // FAILS

//@ assert \    ot_modified(j,this.f,f);    " +

//@ assert \    ot_modified(f);    " + // FAILS

//@ assert \    ot_modified(a[0]);    " +

//@ assert \    ot_modified(a[0]);    " + // FAILS

//@ requires i == 6;    "

//@ modifies \\everything;    "

//@ assert s == i;    "  // OK

//@ assert b == i;    "  // OK // Line 20

//@ assert c == i;    "  // OK

//@ assert l == i;    "  // OK

//@ assert ii == i;    "  // OK

//@ assert i == (short)i;    "

//@ assert i == (long)i;    "

//@ assert i == (char)i;    "

//@ assert i == (byte)i;    "

//@ assert i == (int)i;    "

//@ requires i == 100000;    "

//@ modifies \\everything;    "

//@ assert s == i;    "  // BAD // Line 37

//@ assert b == i;    "  // BAD

//@ assert c == i;    "  // BAD

//@ assert l == i;    "  // OK

//@ assert ii == i;    "  // OK

//@ assert i == (short)i;    " // BAD // Line

//@ assert i == (long)i;    "

//@ assert i == (char)i;    "

//@ assert i == (byte)i;    "

//@ assert i == (int)i;    "


//@ assert 0 == (short)s;     } catch (NullPointerException e) {}    "


//@ assert 0 == (long)s;    } catch (NullPointerException e) {}    "


//@ assert 0 == (byte)s;    } catch (NullPointerException e) {}    "


//@ assert 0 == (int)s;    } catch (NullPointerException e) {}    "


//@ assert 0 == (char)s;    } catch (NullPointerException e) {}    "


//@ assert 0 == (float)s;    } catch (NullPointerException e) {}    "


//@ assert 0 == (double)s;    } catch (NullPointerException e) {}    "


//@ assert (boolean)s;    } catch (NullPointerException e) {}    "

//@ assert 9 == (Short)s;    "

//@ requires args.length >= 0;     "

//@ ensures args.length == \\result;     "

//@ also assignable TestJava.flag;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 2;    "

//@ assert TestJava.flag == 1;    "

/*@ pure */
//@ also assignable TestJava.flag;    "

//@ ensures TestJava.flag == 1;    "

//@ signals (Exception e) TestJava.flag == 10;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 2;    "

//@ assert (\\lbl FLAG TestJava.flag) == 0 || TestJava.flag == 1|| TestJava.flag == 10;    "

//@ also assignable TestJava.flag;    "

//@ ensures TestJava.flag == 1;    "

//@ signals (Exception e) TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 2;    "

//@ assert TestJava.flag == 1;    "

//@ assert TestJava.flag == 100;    " // ERROR - line 19

//@ also public normal_behavior    "

//@ assignable TestJava.flag;    "

//@ ensures TestJava.flag == 1;    "

//@ also public normal_behavior    "

//@ assignable TestJava.flag;    "

//@ ensures TestJava.flag == 2;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;    "

//@ assert TestJava.flag == 200;    " // ERROR - line 25

/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag;    "

//@ signals_only EE1;    "

//@ signals (Exception e) TestJava.flag == 1;    "

/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag;    "

//@ signals_only EE2;    "

//@ signals (Exception e) TestJava.flag == 2;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 111;    " // not feasible - so not checked in RAC

//@ assert TestJava.flag == 1;    "

//@ assert e instanceof EE3 ;    " // Line 37

//@ assert TestJava.flag == 100;    "

/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag;    "

//@ signals_only EE1;    "

//@ signals (Exception e) TestJava.flag == 1;    "

/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag;    "

//@ signals_only EE2;    "

//@ signals (Exception e) TestJava.flag == 2;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 222;    " // not feasible - so not checked in RAC

//@ assert e instanceof EE3 ;    " // Line 36

//@ assert flag == 2;    "

//@ assert flag == 100;    " // Error

/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag;    "

//@ signals_only EE1;    "

//@ signals (Exception e) TestJava.flag == 1;    "

/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag;    "

//@ signals_only EE2;    "

//@ signals (Exception e) TestJava.flag == 2;    "

//@ requires flag == 0;    " // Line 23

//@ assignable flag;    "

//@ assert TestJava.flag == 0;      "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 222;    "  // Not feasible - so not checked in RAC

//@ assert TestJava.flag == 2;    "  // Line 34 // SHould be OK

//@ assert e instanceof EE1;    "  // Line 35 // Should be OK

//@ also public normal_behavior    "

//@ assignable TestJava.flag;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;    "

//@ also public normal_behavior    "

//@ assignable TestJava.flag;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert normal ==> flag == 1;    "

//@ assert !normal ==> flag == 2;    "

//@ also public normal_behavior    "

//@ assignable TestJava.flag;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;    "  // FIXME - should not be able to skip the catch block

//@ also assignable TestJava.flag;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;    "  // FIXME - should not be able to skip the catch block

//@ also public normal_behavior    "

//@ assignable TestJava.flag;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;     "

//@ also assignable TestJava.flag;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 5;    "

//@ assert \    ot_modified(i);    " +

//@ assert \    ot_modified(i);    " + // FAILS

//@ assert \    ot_modified(j,this.f,f);    " +

//@ assert \    ot_modified(this.f);    " + // FAILS

//@ assert \    ot_modified(j,this.f,f);    " +

//@ assert \    ot_modified(f);    " + // FAILS

//@ assert \    ot_modified(a[0]);    " +

//@ assert \    ot_modified(a[0]);    " + // FAILS

//@ requires i == 6;    "

//@ modifies \\everything;    "

//@ assert s == i;    "  // OK

//@ assert b == i;    "  // OK // Line 20

//@ assert c == i;    "  // OK

//@ assert l == i;    "  // OK

//@ assert ii == i;    "  // OK

//@ assert i == (short)i;    "

//@ assert i == (long)i;    "

//@ assert i == (char)i;    "

//@ assert i == (byte)i;    "

//@ assert i == (int)i;    "

//@ requires i == 100000;    "

//@ modifies \\everything;    "

//@ assert s == i;    "  // BAD // Line 37

//@ assert b == i;    "  // BAD

//@ assert c == i;    "  // BAD

//@ assert l == i;    "  // OK

//@ assert ii == i;    "  // OK

//@ assert i == (short)i;    " // BAD // Line

//@ assert i == (long)i;    "

//@ assert i == (char)i;    "

//@ assert i == (byte)i;    "

//@ assert i == (int)i;    "


//@ assert 0 == (short)s;     } catch (NullPointerException e) {}    "


//@ assert 0 == (long)s;    } catch (NullPointerException e) {}    "


//@ assert 0 == (byte)s;    } catch (NullPointerException e) {}    "


//@ assert 0 == (int)s;    } catch (NullPointerException e) {}    "


//@ assert 0 == (char)s;    } catch (NullPointerException e) {}    "


//@ assert 0 == (float)s;    } catch (NullPointerException e) {}    "


//@ assert 0 == (double)s;    } catch (NullPointerException e) {}    "


//@ assert (boolean)s;    } catch (NullPointerException e) {}    "

//@ assert 9 == (Short)s;    "

//@ requires args.length >= 0;     "

//@ ensures args.length == \\result;     "

//@ also assignable TestJava.flag;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 2;    "

//@ assert TestJava.flag == 1;    "

/*@ pure */
//@ also assignable TestJava.flag;    "

//@ ensures TestJava.flag == 1;    "

//@ signals (Exception e) TestJava.flag == 10;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 2;    "

//@ assert (\\lbl FLAG TestJava.flag) == 0 || TestJava.flag == 1|| TestJava.flag == 10;    "

//@ also assignable TestJava.flag;    "

//@ ensures TestJava.flag == 1;    "

//@ signals (Exception e) TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 2;    "

//@ assert TestJava.flag == 1;    "

//@ assert TestJava.flag == 100;    " // ERROR - line 19

//@ also public normal_behavior    "

//@ assignable TestJava.flag;    "

//@ ensures TestJava.flag == 1;    "

//@ also public normal_behavior    "

//@ assignable TestJava.flag;    "

//@ ensures TestJava.flag == 2;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;    "

//@ assert TestJava.flag == 200;    " // ERROR - line 25

/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag;    "

//@ signals_only EE1;    "

//@ signals (Exception e) TestJava.flag == 1;    "

/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag;    "

//@ signals_only EE2;    "

//@ signals (Exception e) TestJava.flag == 2;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 111;    " // not feasible - so not checked in RAC

//@ assert TestJava.flag == 1;    "

//@ assert e instanceof EE3 ;    " // Line 37

//@ assert TestJava.flag == 100;    "

/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag;    "

//@ signals_only EE1;    "

//@ signals (Exception e) TestJava.flag == 1;    "

/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag;    "

//@ signals_only EE2;    "

//@ signals (Exception e) TestJava.flag == 2;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 222;    " // not feasible - so not checked in RAC

//@ assert e instanceof EE3 ;    " // Line 36

//@ assert flag == 2;    "

//@ assert flag == 100;    " // Error

/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag;    "

//@ signals_only EE1;    "

//@ signals (Exception e) TestJava.flag == 1;    "

/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag;    "

//@ signals_only EE2;    "

//@ signals (Exception e) TestJava.flag == 2;    "

//@ requires flag == 0;    " // Line 23

//@ assignable flag;    "

//@ assert TestJava.flag == 0;      "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 222;    "  // Not feasible - so not checked in RAC

//@ assert TestJava.flag == 2;    "  // Line 34 // SHould be OK

//@ assert e instanceof EE1;    "  // Line 35 // Should be OK

//@ also public normal_behavior    "

//@ assignable TestJava.flag;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;    "

//@ also public normal_behavior    "

//@ assignable TestJava.flag;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert normal ==> flag == 1;    "

//@ assert !normal ==> flag == 2;    "

//@ also public normal_behavior    "

//@ assignable TestJava.flag;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;    "  // FIXME - should not be able to skip the catch block

//@ also assignable TestJava.flag;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;    "  // FIXME - should not be able to skip the catch block

//@ also public normal_behavior    "

//@ assignable TestJava.flag;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;     "

//@ also assignable TestJava.flag;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 5;    "

//@ assert \    ot_modified(i);    " +

//@ assert \    ot_modified(i);    " + // FAILS

//@ assert \    ot_modified(j,this.f,f);    " +

//@ assert \    ot_modified(this.f);    " + // FAILS

//@ assert \    ot_modified(j,this.f,f);    " +

//@ assert \    ot_modified(f);    " + // FAILS

//@ assert \    ot_modified(a[0]);    " +

//@ assert \    ot_modified(a[0]);    " + // FAILS

//@ requires i == 6;    "

//@ modifies \\everything;    "

//@ assert s == i;    "  // OK

//@ assert b == i;    "  // OK // Line 20

//@ assert c == i;    "  // OK

//@ assert l == i;    "  // OK

//@ assert ii == i;    "  // OK

//@ assert i == (short)i;    "

//@ assert i == (long)i;    "

//@ assert i == (char)i;    "

//@ assert i == (byte)i;    "

//@ assert i == (int)i;    "

//@ requires i == 100000;    "

//@ modifies \\everything;    "

//@ assert s == i;    "  // BAD // Line 37

//@ assert b == i;    "  // BAD

//@ assert c == i;    "  // BAD

//@ assert l == i;    "  // OK

//@ assert ii == i;    "  // OK

//@ assert i == (short)i;    " // BAD // Line

//@ assert i == (long)i;    "

//@ assert i == (char)i;    "

//@ assert i == (byte)i;    "

//@ assert i == (int)i;    "


//@ assert 0 == (short)s;     } catch (NullPointerException e) {}    "


//@ assert 0 == (long)s;    } catch (NullPointerException e) {}    "


//@ assert 0 == (byte)s;    } catch (NullPointerException e) {}    "


//@ assert 0 == (int)s;    } catch (NullPointerException e) {}    "


//@ assert 0 == (char)s;    } catch (NullPointerException e) {}    "


//@ assert 0 == (float)s;    } catch (NullPointerException e) {}    "


//@ assert 0 == (double)s;    } catch (NullPointerException e) {}    "


//@ assert (boolean)s;    } catch (NullPointerException e) {}    "

//@ assert 9 == (Short)s;    "

//@ requires args.length >= 0;     "

//@ ensures args.length == \\result;     "

//@ also assignable TestJava.flag;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 2;    "

//@ assert TestJava.flag == 1;    "

/*@ pure */
//@ also assignable TestJava.flag;    "

//@ ensures TestJava.flag == 1;    "

//@ signals (Exception e) TestJava.flag == 10;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 2;    "

//@ assert (\\lbl FLAG TestJava.flag) == 0 || TestJava.flag == 1|| TestJava.flag == 10;    "

//@ also assignable TestJava.flag;    "

//@ ensures TestJava.flag == 1;    "

//@ signals (Exception e) TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 2;    "

//@ assert TestJava.flag == 1;    "

//@ assert TestJava.flag == 100;    " // ERROR - line 19

//@ also public normal_behavior    "

//@ assignable TestJava.flag;    "

//@ ensures TestJava.flag == 1;    "

//@ also public normal_behavior    "

//@ assignable TestJava.flag;    "

//@ ensures TestJava.flag == 2;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;    "

//@ assert TestJava.flag == 200;    " // ERROR - line 25

/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag;    "

//@ signals_only EE1;    "

//@ signals (Exception e) TestJava.flag == 1;    "

/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag;    "

//@ signals_only EE2;    "

//@ signals (Exception e) TestJava.flag == 2;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 111;    " // not feasible - so not checked in RAC

//@ assert TestJava.flag == 1;    "

//@ assert e instanceof EE3 ;    " // Line 37

//@ assert TestJava.flag == 100;    "

/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag;    "

//@ signals_only EE1;    "

//@ signals (Exception e) TestJava.flag == 1;    "

/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag;    "

//@ signals_only EE2;    "

//@ signals (Exception e) TestJava.flag == 2;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 222;    " // not feasible - so not checked in RAC

//@ assert e instanceof EE3 ;    " // Line 36

//@ assert flag == 2;    "

//@ assert flag == 100;    " // Error

/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag;    "

//@ signals_only EE1;    "

//@ signals (Exception e) TestJava.flag == 1;    "

/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag;    "

//@ signals_only EE2;    "

//@ signals (Exception e) TestJava.flag == 2;    "

//@ requires flag == 0;    " // Line 23

//@ assignable flag;    "

//@ assert TestJava.flag == 0;      "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 222;    "  // Not feasible - so not checked in RAC

//@ assert TestJava.flag == 2;    "  // Line 34 // SHould be OK

//@ assert e instanceof EE1;    "  // Line 35 // Should be OK

//@ also public normal_behavior    "

//@ assignable TestJava.flag;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;    "

//@ also public normal_behavior    "

//@ assignable TestJava.flag;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert normal ==> flag == 1;    "

//@ assert !normal ==> flag == 2;    "

//@ also public normal_behavior    "

//@ assignable TestJava.flag;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;    "  // FIXME - should not be able to skip the catch block

//@ also assignable TestJava.flag;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;    "  // FIXME - should not be able to skip the catch block

//@ also public normal_behavior    "

//@ assignable TestJava.flag;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;     "

//@ also assignable TestJava.flag;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 5;    "

//@ ghost int i = 0;      //@ set i = 1;      //@ set System.out.println(i);      System.out.println(\"END\"); }}"

//@ assert false;      System.out.println(\"END\"); }}"

//@ assert false: \"ABC\";      System.out.println(\"END\"); }}"

//@ assert false: (int)args.length;      System.out.println(\"END\"); }}"

//@ assert true: args.length;      System.out.println(\"END\"); }}"

//@ assume false;      System.out.println(\"END\"); }}"

//@ assume false: \"DEF\";      System.out.println(\"END\"); }}"

//@ unreachable;      System.out.println(\"END\"); }}"

/*@ requires i == 0; */
/*@ requires i != 0; */
/*@ requires i > 0; */
/*@ requires i < 0; */
//@ nowarn Precondition;    " +

/*@ requires i != 0; */
//@ nowarn Precondition;    " +

/*@ requires true; */
/*@non_null*/
/*@non_null*/
/*@ requires true; */
/*@non_null*/
/*@non_null*/
/*@nullable*/
/*@ ensures k == i; */
/*@ ensures k == 0; */
/*@ nowarn Postcondition;*/
/*@ ensures k == 0; */
/*@ nowarn Postcondition;*/
/*@ requires true;     also     requires false;     ensures k == 0; */
/*@ requires true;     ensures true;     also     requires false;     ensures k == 0; */
/*@ requires true;     " +
                "     ensures k != i;     " +
                "     also     " +
                "     requires true;     " +
                "     ensures k == 0; */
/*@   requires true;     "
                +"        ensures k != i;     "
                +"      also     "
                +"        requires true;     "
                +"        ensures k == 0; */
/*@ requires true;     "
                +"     signals (java.io.FileNotFoundException e) e == null; */
/*@ requires true;     signals (java.io.FileNotFoundException e) e == null; */
/*@ requires true;     signals_only \    othing; */
/*@ requires true;     signals_only java.io.FileNotFoundException; */
/*@ requires true;     signals_only java.io.FileNotFoundException; */
/*@ requires true;     */
/*@ requires true;     */
/*@ ensures \\result == 4; */
/*@ ensures \\result == 4; */
/*@ ensures (\\lbl ENS \\result == 1); */
/*@ ensures (\\lbl ENS (\\lbl RES \\result) == 1); */
/*@ ensures (\\lbl ENS \\old(k)) == k; */
//@ assert (\\lbl AST \\old(k)) == 0;      k=i; //@ assert (\\lbl AST2 \\old(k)) == 0;     //@ assert (\\lbl AST3 k) == 0;      return i; } " +

//@ ghost int p = (\\lbl AST \\old(k));     "

//@ ghost int kk =  (\\lbl AST2 \\old(k));     "

//@ set kk = (\\lbl AST3 k);      "

//@ set kk = (\\lbl AST4 \\old(k,lab));      "

//@ assert (i==0) <==> (* informal *);      return i; } " +

//@ ghost nullable java.lang.Class t; ghost nullable \\TYPE tt;     "

//@ set tt = (\\lbl A \\elemtype(\\typeof(o)));    "

//@ set tt = (\\lbl B \\elemtype(\\typeof(oo)));    "

//@ set tt = (\\lbl C \\elemtype(\\typeof(o3)));    "

//@ set t = (\\lbl D \\elemtype(java.lang.Class.class));    "

//@ set t = (\\lbl E \\elemtype(java.lang.Boolean[].class));    "

//@ requires JML.informal(\"asd\") && (\\lbl CLS \\erasure(\\typeof(i))) == Object.class;     " +

/*@nullable*/
//@ requires (\\lbl CLS \\typeof(i)) == \\type(Object);     " +

/*@nullable*/
//@ requires (\\lbl CLS \\typeof(i)) == \\type(Object);     " +

//@ assert (\\lbl AST \\typeof(true)) == \\typeof(true);     " +

//@ assert (\\lbl AST2 \\typeof((short)0)) != \\typeof(true);     " +

//@ assert (\\lbl AST3 \\typeof((long)0)) != \\typeof(true);     " +

//@ assert (\\lbl AST4 \\typeof((byte)0)) != \\typeof(true);     " +

//@ assert (\\lbl AST5 \\typeof('c')) != \\typeof(true);     " +

//@ assert (\\lbl AST6 \\typeof(\"c\")) != \\typeof(true);     " +

//@ assert (\\lbl AST7 \\typeof((float)0)) != \\typeof(true);     " +

//@ assert (\\lbl AST8 \\typeof((double)0)) != \\typeof(true);     " +

//@ assert (\\lbl AST9 \\typeof(5/0)) == \\typeof(5/0);     " +

//@ assert (\\lbl AST10 \\typeof(5.0/0.0)) != \\typeof(5/0);     " +

//@ requires (\\lbl CLS \\typeof(i)) == ( \\type(LinkedList<Integer>) );     " +

/*@nullable*/
//@ requires (\\lbl CLS \\typeof(i)) == ( \\type(LinkedList<Integer>) );     " +

/*@nullable*/
//@ requires (\\lbl CLS \\typeof(i)) != ( \\type(LinkedList<Integer>) );     " +

/*@nullable*/
//@ assert \    onnullelements(s2,s2null);     " +

//@ assert \    onnullelements(s2,s2);     " +

//@ assert \    onnullelements(s2null,new Integer[]{5/z});     " +

//@ assert (\\lbl ELEM \    onnullelements(o));     " +

/*@nullable*/
//@ assert (\\lbl ELEM \    onnullelements((\\lbl O o)));     " +

/*@nullable*/
//@ assert (\\lbl STRING \"def\") != null;     " +

//@ assert (\\lbl SHORT (short)(i)) != 0;     " +

//@ assert (\\lbl LONG (long)(i)) != 0;     " +

//@ assert (\\lbl BYTE (byte)(i)) != 0;     " +

//@ assert (\\lbl INT (int)(i)) != 0;     " +

//@ assert (\\lbl FLOAT (float)(i)) != 0;     " +

//@ assert (\\lbl DOUBLE (double)(i)) != 0;     " +

//@ assert (\\lbl CHAR n.charAt(0)) != 0;     " +

//@ assert (\\lbl BOOLEAN (i == 0)) ;     " +

//@ assert (\\lbl OBJECT o) == null;     " +

//@ assert (\\lbl STRING \"abc\") != null;     " +

/*@nullable*/
//@ assert (\\lbl OBJECT null) == null;     " +

//@ assert (\\lbl INT (int)(4)) != 0;     " +

//@ assert (\\lbl SHORT (short)(1)) != 0;     " +

//@ assert (\\lbl LONG (long)(2)) != 0;     " +

//@ assert (\\lbl BYTE (byte)(3)) != 0;     " +

//@ assert (\\lbl FLOAT (float)(5)) != 0;     " +

//@ assert (\\lbl DOUBLE (double)(6)) != 0;     " +

//@ assert (\\lbl CHAR 'a') != 0;     " +

//@ assert (\\lbl BOOLEAN true) ;     " +

//@ assert (\\lbl STRING \"abc\") != null;     " +

//@ ghost \\TYPE c;     " +

//@ set c = \\type(int);     " +

//@ set c = (\\lbl TYP1 c);     " +

//@ set c = \\type(boolean);     " +

//@ set c = (\\lbl TYP2 c);     " +

//@ ghost \\TYPE c;     " +

//@ set c = \\type(java.lang.Object);     " +

//@ set c = (\\lbl TYP1 c);     " +

//@ set c = \\type(Object);     " +

//@ set c = (\\lbl TYP2 c);     " +

//@ set c = \\type(java.lang.String);     " +

//@ set c = (\\lbl TYP3 c);     " +

//@ set c = \\type(String);     " +

//@ set c = (\\lbl TYP4 c);     " +

//@ ghost \\TYPE c;     " +

//@ set c = \\type(java.lang.String[]);     " +

//@ set c = (\\lbl TYP1 c);     " +

//@ set c = \\type(String[]);     " +

//@ set c = (\\lbl TYP2 c);     " +

//@ set c = \\type(java.lang.String[][]);     " +

//@ set c = (\\lbl TYP3 c);     " +

//@ set c = \\type(String[][]);     " +

//@ set c = (\\lbl TYP4 c);     " +

//@ ghost \\TYPE c;     " +

//@ set c = \\type(java.lang.Class<Integer>);     " +

//@ set c = (\\lbl TYP1 c);     " +

//@ ghost boolean bbb = (\\lbl TRUE Class.class == \\erasure(\\type(Class)));     " +

//@ set c = (\\lbl TYP2 c);     " +

//@ ghost \\TYPE c;     " +

//@ set c = \\type(int);     " +

//@ set c = (\\lbl TYP1 c);     " +

//@ set c = \\type(boolean);     " +

//@ set c = (\\lbl TYP2 c);     " +

//@ ghost \\TYPE c;     " +

//@ set c = \\type(java.lang.Object);     " +

//@ set c = (\\lbl TYP1 c);     " +

//@ set c = \\type(Object);     " +

//@ set c = (\\lbl TYP2 c);     " +

//@ set c = \\type(java.lang.String);     " +

//@ set c = (\\lbl TYP3 c);     " +

//@ set c = \\type(String);     " +

//@ set c = (\\lbl TYP4 c);     " +

//@ ghost \\TYPE c;     " +

//@ set c = \\type(java.lang.String[]);     " +

//@ set c = (\\lbl TYP1 c);     " +

//@ set c = \\type(String[]);     " +

//@ set c = (\\lbl TYP2 c);     " +

//@ set c = \\type(java.lang.String[][]);     " +

//@ set c = (\\lbl TYP3 c);     " +

//@ set c = \\type(String[][]);     " +

//@ set c = (\\lbl TYP4 c);     " +

//@ ghost \\TYPE c;     " +

//@ set c = \\type(java.lang.Class<Integer>);     " +

//@ set c = (\\lbl TYP1 c);     " +

//@ ghost boolean c;     " +

//@ set c = o.getClass() <: o.getClass();     " + // Object <: Object  // Class

//@ set c = (\\lbl TYP1 c);     " +

//@ set c = \\typeof(o) <: \\typeof(o);     " +  // Object <: Object // \TYPE

//@ set c = (\\lbl TYP2 c);     " +

//@ set c = \\typeof(o) <: \\typeof(oo);     " + // Object <: String // \TYPE

//@ set c = (\\lbl TYP3 c);     " +

//@ set c = \\typeof(oo) <: \\typeof(o);     " + // String <: Object // \TYPE

//@ set c = (\\lbl TYP4 c);     " +

//@ set c = \\typeof(ob) <: \\typeof(oo);     " + // Boolean <: String // \TYPE

//@ set c = (\\lbl TYP5 c);     " +

//@ ghost boolean c;     " +

//@ set c = s.getClass() <: b.getClass();     " + // String <: Boolean // Class

//@ set c = (\\lbl TYP1 c);     " +

//@ set c = \\typeof(s) <: \\typeof(b);     " +  // String <: Boolean // \TYPE

//@ set c = (\\lbl TYP2 c);     " +

//@ set c = \\type(int) <: \\typeof(o);     " + // int <: Object // \TYPE

//@ set c = (\\lbl TYP3 c);     " +

//@ set c = \\type(int) <: \\type(int);     " + // int <: int  // false

//@ set c = (\\lbl TYP4 c);     " +

//@ set c = \\type(int) <: \\type(boolean);     " + // int <: boolean

//@ set c = (\\lbl TYP5 c);     " +

//@ requires 10/i != 0;     " +

//@ ensures 10/(i-1) == 0;     " +

//@ requires i != 0;     " +

//@ requires 10/i == 10;     " +

//@ ghost public static int i = 0;      //@ public invariant i == 0;      //@ requires i == 1;     static public int m(); }");

//@ ghost static int i = 0;      //@ invariant i == 0;      //@ ensures i == 1;     static int m(); }");

//@ set i = 1;      return 0; }       public static void main(String[] args) { m(); System.out.println(\"END\"); }}"

/*@ model static pure public int mm() { return 5; } */
//@ ghost static public int i = 0;      "

//@ public invariant i == 0;      //@ ensures i == 1;     static public int m(); "

//@ set i = mm();     "

/*@ model public static class AA { static public int mm() { return 5; }} */
//@ ghost public static int i = 0;      "

//@ public invariant i == 0;      "

//@ ensures i == 0;     "

//@ set i = AA.mm();     "

/*@ model public static class AB { static public int mm() { return 5; }} */
//@ ghost public static int i = 0;      "

//@ public invariant i == 0;      "

//@ ensures i == 0;     "

//@ set i = AB.mm();     "

//@ static public invariant i == 0;      "

//@ static public invariant i == 0;      "

//@ public invariant i == 0;    "

//@ public invariant i == 0;"

//@ public invariant i == 0;"

//@ public invariant i == 0;"

//@ public invariant i == 0;"

//@ public initially i == 1;      "

//@ public initially j == 1;      "

//@ public invariant i == j;      "

/*@ assignable j; */
//@ constraint i == \\old(i)+1;      "

//@ invariant i == 0;      "

/*@ private helper */
//@ static model int i;     "

//@ static represents i \\such_that i == j+1;     "

//@ static model int i;      "

//@ static represents i = j+1;      "

//@ debug System.out.println(\"A \" + i);     "

//@ debug System.out.println(\"A \" + i);     "

//@ static ghost int ii;      "

//@ static model int i;      "

//@ static represents i \\such_that i==j+1;      "

//@ static represents i =j+1;      "

//@ debug System.out.println(\"A \" + i);     "

//@ debug System.out.println(\"A \" + i);     "

//@ static ghost int ii;      "

//@ static model int i;      "

//@ static represents i = j+1;      "

//@ static represents i = j;      "

//@ debug System.out.println(\"A \" + i);     "

//@ debug System.out.println(\"A \" + i);     "

//@  represents i = j+1;      "

//@ debug System.out.println(\"A \" + a.i);     "

//@ debug System.out.println(\"B \" + b.i);     "

//@ debug System.out.println(\"B \" + b.i);     "

//@ model  int i; 

//@  represents super.i = j+1;      "

//@ debug System.out.println(\"A \" + a.i);     "

//@ debug System.out.println(\"B \" + b.i);     "

//@ debug System.out.println(\"B \" + b.i);     "

//@ model protected int i; }    "

//@  model int i; represents i = j;     "

//@ debug System.out.println(\"A \" + a.i);     "

//@ debug System.out.println(\"B \" + b.i);     "

//@ model  int i; represents i = PA.j+1;     

//@ debug System.out.println(\"A \" + a.i);     "

//@ debug System.out.println(\"B \" + b.i);     "

//@ debug System.out.println(\"B \" + b.i);     "

//@ model  int i; 

//@ static model int i;     "

//@ debug System.out.println(\"A \" + i);     "

//@ ghost boolean n = (\\forall int i; 0<=i && i<=5; i >= 2);      "

//@ ghost boolean nn = (\\exists int i; 0<=i && i<=5; i >= 2);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost boolean n = (\\forall int i; 0<=i && i<=5; i >= 0);      "

//@ ghost boolean nn = (\\exists int i; 0<=i && i<=5; i >= 6);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost boolean n = (\\forall int i; ; i >= 0);      "

//@ ghost boolean nn = (\\exists int i; i == 4; i >= 6);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost boolean n = (\\forall int i; 0<i && i<=5; (\\exists int j; 0<=j && j < 5; j<i));      "

//@ ghost boolean nn = (\\forall int i; 0<=i && i<=5; (\\exists int j; 0<=j && j < 5; j<i));      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost long n1 = (\    um_of int i; 0 <= i && i <= 5; true);      "

//@ ghost long n2 = (\    um_of int i; 0 < i && i < 5; true);      "

//@ debug System.out.println(\"A \" + n1 + \" \" + n2);     "

//@ ghost long n = (\    um_of int i; 0 <= i && i < 5; i >= 2);      "

//@ ghost long nn = (\    um_of int i; 0 <= i && i < 5; false);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost int n = (\    um_of int i; 0 <= i && i < 5; i >= m);      "

//@ ghost int nn = (\    um_of int i; 0 <= i && i < 5; m > 0);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn );     "

//@ ensures (\    um_of int i; 0 <= i && i < 5; i >= m) == 3;    "

//@ ensures (\    um_of int i; 0 <= i && i < 5; i >= m) == 4;    "

//@ ghost long n1 = (\    um_of int i,j; 0 <= i && i <= 5 && 0 <= j && j < i; true);      "

//@ debug System.out.println(\"A \" + n1);     "

//@ ghost int n = (\\sum int i; 0<i && i<=5; i+1);      "

//@ ghost int nn = (\\sum int i; 0<i && i<0; i+1);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost int n = (\\product int i; 0<i && i<=5; i+1);      "

//@ ghost int nn = (\\product int i; 0<i && i<0; i+1);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost int n = (\\max int i; 0<=i && i<=5 && (i%2)==0; i+1);      "

//@ ghost int nn = (\\max int i; 0<i && i<0; i+1);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost int n = (\\max int i; 0<=i && i<=5 && (i%2)==0; inc(i));      "

//@ ghost int nn = (\\max int i; -9<=i && i<=5 ; Math.abs(i));      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost short n1 = (\\max int i; 0<=i && i<=5; (short)(i+10));      "

//@ ghost short n2 = (\\min int i; 0<=i && i<=5; (short)(i+10));      "

//@ debug System.out.println(\"A \" + n1 + \" \" + n2);     "

//@ ghost short n1 = (\\max short i; 2<=i && i<=5; i);      "

//@ ghost short n2 = (\\min short i; 2<=i && i<=5; i);      "

//@ debug System.out.println(\"A \" + n1 + \" \" + n2);     "

//@ ghost byte n1 = (\\max int i; 2<=i && i<=5; (byte)i);      "

//@ ghost byte n2 = (\\min int i; 2<=i && i<=5; (byte)i);      "

//@ debug System.out.println(\"A \" + n1 + \" \" + n2);     "

//@ ghost byte n1 = (\\max byte i; 2<=i && i<=5; i);      "

//@ ghost byte n2 = (\\min byte i; 2<=i && i<=5; i);      "

//@ debug System.out.println(\"A \" + n1 + \" \" + n2);     "

//@ ghost long n1 = (\\max int i; 0<=i && i<=5; (i+10L));      "

//@ ghost long n2 = (\\min int i; 0<=i && i<=5; (i+10L));      "

//@ debug System.out.println(\"A \" + n1 + \" \" + n2);     "

//@ ghost long n1 = (\\max long i; 0<=i && i<=5; (i+10L));      "

//@ ghost long n2 = (\\min long i; 0<=i && i<=5; (i+10L));      "

//@ debug System.out.println(\"A \" + n1 + \" \" + n2);     "

//@ ghost double n1 = (\\max int i; 0<=i && i<=5; (double)(i+10.5));      "

//@ ghost double n2 = (\\min int i; 0<=i && i<=5; (double)(i+10.5));      "

//@ debug System.out.println(\"A \" + n1 + \" \" + n2);     "

//@ ghost float n1 = (\\max int i; 0<=i && i<=5; (float)(i+10.5));      "

//@ ghost float n2 = (\\min int i; 0<=i && i<=5; (float)(i+10.5));      "

//@ debug System.out.println(\"A \" + n1 + \" \" + n2);     "

//@ ghost char n1 = (\\max int i; 'a'<i && i<='q'; (char)i);      "

//@ ghost char n2 = (\\min int i; 'a'<i && i<='q'; (char)i);      "

//@ debug System.out.println(\"A \" + n1 + \" \" + n2);     "

//@ ghost char n1 = (\\max char i; 'a'<i && i<='q'; i);      "

//@ ghost char n2 = (\\min char i; 'a'<i && i<='q'; i);      "

//@ debug System.out.println(\"A \" + n1 + \" \" + n2);     "

//@ ghost int n = (\\min int i; 0<=i && i<=5 && (i%2)==1; i+1);      "

//@ ghost int nn = (\\min int i; 0<i && i<0; i+1);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost long n = (\\max int i; 0<=i && i<=5 && (i%2)==0; (long)i+1);      "

//@ ghost long nn = (\\max int i; 0<i && i<0; i+1);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost long n = (\\min int i; 0<=i && i<=5 && (i%2)==1; (long)i+1);      "

//@ ghost long nn = (\\min int i; 0<i && i<0; i+1);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost double n = (\\max int i; 0<=i && i<=5 && (i%2)==0; (double)i+1);      "

//@ ghost double nn = (\\max int i; 0<i && i<0; i+1);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost double n = (\\min int i; 0<=i && i<=5 && (i%2)==1; (double)i+1);      "

//@ ghost double nn = (\\min int i; 0<i && i<0; (double)i+1);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost int n = (\\sum boolean i; bb; (i?2:5));      "

//@ ghost int nn = (\\sum boolean i; !i; (i?2:5));      "

//@ ghost int nnn = (\\sum boolean i; i; (i?2:5));      "

//@ ghost int nnnn = (\\sum boolean i; false; (i?2:5));      "

//@ debug System.out.println(\"A \" + n + \" \" + nn + \" \" + nnn + \" \" + nnnn);     "

//@ ghost int n = (\    um_of Object o; list.contains(o); true);      "

//@ ghost int nn = (\    um_of Object o; list.contains(o) && true; true);      "

//@ ghost int nnn = (\    um_of Object o; list.contains(o) && o == oo; true);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn + \" \" + nnn);     "

//@ model int i; );

//@ debug System.out.println(\"A \" + a.i);     "

//@ debug System.out.println(\"B \" + b.i);     "

//@ debug System.out.println(\"B \" + b.i);     "

//@ model int i; );

//@ debug System.out.println(\"A \" + a.i);     "

//@ debug System.out.println(\"B \" + b.i);     "

//@ debug System.out.println(\"B \" + b.i);     "

/*@non_null*/
/*@ non_null*/
//@ model  int i; represents i = 0; 

/*@non_null*/
/*@nullable*/
/*@nullable*/
//@ ghost int k; set k = A.i;    "

//@ set k = a.i;    "

//@ set k = a.b.i;    "

/*@nullable_by_default*/
/*@non_null*/
 ghost static Object oooo = null;    "

/*@ non_null*/
//@ ghost non_null String loc = null;     "

/*@nullable*/
//@ nullable ghost static Object oooo = null;    "

/*@ nullable*/
//@ ghost String loc = null;     "

/*@nullable*/
//@ static invariant o != ooo;    "

//@ nullable ghost static Object oooo = null;    "

/*@ nullable*/
//@ ghost String loc = null;     "

//@ axiom true;    "

//@ public invariant \\duration(true) == 0;    "

//@ public model long i;    "

//@ public represents i =  \\duration(true);    "

//@ public constraint \\duration(true) == 0;    "

//@ public initially \\duration(true) == 0;    "

//@ hence_by true;     "

//@ assert \\duration(true) == 0;    "

//@ assume \\duration(true) == 0;    "

//@ ghost long k = \\duration(true);    "

//@ set k = \\duration(true);    "

//@ debug k = \\duration(true);    "

//@ ghost long z = \\duration(true);    "

//@ ghost long[] zz = { \\duration(true) } ;    "

/*@ requires \\duration(true) == 0;*/
//@ ensures \\duration(true) == 0;    "

//@ signals (Exception ex) \\duration(true) == 0;    "

//@ signals_only RuntimeException;    "

//@ diverges \\duration(true) == 0;    " // line 23

//@ duration  \\duration(true);    "

//@ working_space \\duration(true);    "

//@   requires \\duration(true) == 0;    "

//@   ensures true;    "

//@ also    "

//@   requires \\duration(true) == 0;    "

//@   signals (Exception ex) true;    "

//@ also    "

//@   requires \\duration(true) == 0;    "

//@   signals_only RuntimeException;    "

//@ also    "

//@   ensures true;    "

//@public  invariant i == 1;     "

//@ public invariant i == 2;     "

//@ public invariant i == 3;     "

//@ public invariant i == 2;     "

//@ public invariant i == 3;     "

//@public  invariant i == 1;     "

//@ static public invariant i == 2;     "

//@ static public invariant i == 3;     "

//@ static public invariant i == 1;     "

//@ also ensures i == 2;     "

//@ also ensures i == 3;     "

//@ ensures false;     "

//@ also ensures i == 2;     "

//@ also private behavior ensures i == 2;     "

//@ also ensures i == 3;     "

//@ ensures false;     "

//@ also ensures i == 2;     "

//@ requires kc == 3; ensures i == 3;     "

//@ also requires kb == 2; ensures i == 2;     "

//@ also requires ka==1; ensures i == 1;     "

//@ requires i > 0;    "

//@ modifies j;    "

//@ ensures j == i;    "

//@ ensures j == 1;    "

//@ requires i > 0;    "

//@ modifies j;    "

//@ ensures j == i;    "

//@ ensures j == 1;    "

//@ requires i > 0;    "

//@ modifies k;    "

//@ ensures j == i;    "

//@ ensures j == 1;    "

/*@ assert i == 0; */
/*@ assert i == -1; */
//@ assert false;      } " +

//@ assert false;            } " +

//@ assert false;      } " +

//@ ensures \\result == i;    "

//@ ensures \\result == i+1;    "

//@ loop_invariant sum >= 0;     "

//@ assert sum >= 0;     "

//@ loop_invariant sum >= 0;     "

//@ assert sum > 0;     "

//@ loop_invariant sum >= 0;     "

/*@ assume o >= 0; */
//@ assert sum >= 0;     "

//@ loop_invariant sum >= 0;     "

/*@ assume o >= 0; */
//@ assert sum > 0;     "

//@ old int kk = k; requires i > kk; assignable k; ensures k == i+1; ensures kk == 5;    "

//@ also    "

//@ old int kkk = k+1; requires i < kkk; assignable k; ensures k == i-1; ensures kkk == 7;    "

//@ old int kk = k; requires i > kk; assignable k; ensures k == i+1; ensures kk == 5;    "

//@ also    " // Purposely duplicating the name of the old variable

//@ old int kk = k+1; requires i < kk; assignable k; ensures k == i-1; ensures kk == 7;    "

//@ old int kk = k;    "

//@ {| requires i > kk; assignable k; ensures k == i+1; ensures kk == 5;    "

//@ also    "

//@    requires i < kk; assignable k; ensures k == i-1; ensures kk == 6;    "

//@ |}    "

//@ public normal_behavior     "

//@   requires true;     "

//@ show i, j+1;    "

//@ show k;    "

//@ assert k > 0;    "

//@ show m,k;    "

//@ assert m > 0;    "

//@ ghost int i = 0;      //@ set i = 1;      //@ set System.out.println(i);      System.out.println(\"END\"); }}"

//@ assert false;      System.out.println(\"END\"); }}"

//@ assert false: \"ABC\";      System.out.println(\"END\"); }}"

//@ assert false: (int)args.length;      System.out.println(\"END\"); }}"

//@ assert true: args.length;      System.out.println(\"END\"); }}"

//@ assume false;      System.out.println(\"END\"); }}"

//@ assume false: \"DEF\";      System.out.println(\"END\"); }}"

//@ unreachable;      System.out.println(\"END\"); }}"

/*@ requires i == 0; */
/*@ requires i != 0; */
/*@ requires i > 0; */
/*@ requires i < 0; */
//@ nowarn Precondition;    " +

/*@ requires i != 0; */
//@ nowarn Precondition;    " +

/*@ requires true; */
/*@non_null*/
/*@non_null*/
/*@ requires true; */
/*@non_null*/
/*@non_null*/
/*@nullable*/
/*@ ensures k == i; */
/*@ ensures k == 0; */
/*@ nowarn Postcondition;*/
/*@ ensures k == 0; */
/*@ nowarn Postcondition;*/
/*@ requires true;     also     requires false;     ensures k == 0; */
/*@ requires true;     ensures true;     also     requires false;     ensures k == 0; */
/*@ requires true;     " +
                "     ensures k != i;     " +
                "     also     " +
                "     requires true;     " +
                "     ensures k == 0; */
/*@   requires true;     "
                +"        ensures k != i;     "
                +"      also     "
                +"        requires true;     "
                +"        ensures k == 0; */
/*@ requires true;     "
                +"     signals (java.io.FileNotFoundException e) e == null; */
/*@ requires true;     signals (java.io.FileNotFoundException e) e == null; */
/*@ requires true;     signals_only \    othing; */
/*@ requires true;     signals_only java.io.FileNotFoundException; */
/*@ requires true;     signals_only java.io.FileNotFoundException; */
/*@ requires true;     */
/*@ requires true;     */
/*@ ensures \\result == 4; */
/*@ ensures \\result == 4; */
/*@ ensures (\\lbl ENS \\result == 1); */
/*@ ensures (\\lbl ENS (\\lbl RES \\result) == 1); */
/*@ ensures (\\lbl ENS \\old(k)) == k; */
//@ assert (\\lbl AST \\old(k)) == 0;      k=i; //@ assert (\\lbl AST2 \\old(k)) == 0;     //@ assert (\\lbl AST3 k) == 0;      return i; } " +

//@ ghost int p = (\\lbl AST \\old(k));     "

//@ ghost int kk =  (\\lbl AST2 \\old(k));     "

//@ set kk = (\\lbl AST3 k);      "

//@ set kk = (\\lbl AST4 \\old(k,lab));      "

//@ assert (i==0) <==> (* informal *);      return i; } " +

//@ ghost nullable java.lang.Class t; ghost nullable \\TYPE tt;     "

//@ set tt = (\\lbl A \\elemtype(\\typeof(o)));    "

//@ set tt = (\\lbl B \\elemtype(\\typeof(oo)));    "

//@ set tt = (\\lbl C \\elemtype(\\typeof(o3)));    "

//@ set t = (\\lbl D \\elemtype(java.lang.Class.class));    "

//@ set t = (\\lbl E \\elemtype(java.lang.Boolean[].class));    "

//@ requires JML.informal(\"asd\") && (\\lbl CLS \\erasure(\\typeof(i))) == Object.class;     " +

/*@nullable*/
//@ requires (\\lbl CLS \\typeof(i)) == \\type(Object);     " +

/*@nullable*/
//@ requires (\\lbl CLS \\typeof(i)) == \\type(Object);     " +

//@ assert (\\lbl AST \\typeof(true)) == \\typeof(true);     " +

//@ assert (\\lbl AST2 \\typeof((short)0)) != \\typeof(true);     " +

//@ assert (\\lbl AST3 \\typeof((long)0)) != \\typeof(true);     " +

//@ assert (\\lbl AST4 \\typeof((byte)0)) != \\typeof(true);     " +

//@ assert (\\lbl AST5 \\typeof('c')) != \\typeof(true);     " +

//@ assert (\\lbl AST6 \\typeof(\"c\")) != \\typeof(true);     " +

//@ assert (\\lbl AST7 \\typeof((float)0)) != \\typeof(true);     " +

//@ assert (\\lbl AST8 \\typeof((double)0)) != \\typeof(true);     " +

//@ assert (\\lbl AST9 \\typeof(5/0)) == \\typeof(5/0);     " +

//@ assert (\\lbl AST10 \\typeof(5.0/0.0)) != \\typeof(5/0);     " +

//@ requires (\\lbl CLS \\typeof(i)) == ( \\type(LinkedList<Integer>) );     " +

/*@nullable*/
//@ requires (\\lbl CLS \\typeof(i)) == ( \\type(LinkedList<Integer>) );     " +

/*@nullable*/
//@ requires (\\lbl CLS \\typeof(i)) != ( \\type(LinkedList<Integer>) );     " +

/*@nullable*/
//@ assert \    onnullelements(s2,s2null);     " +

//@ assert \    onnullelements(s2,s2);     " +

//@ assert \    onnullelements(s2null,new Integer[]{5/z});     " +

//@ assert (\\lbl ELEM \    onnullelements(o));     " +

/*@nullable*/
//@ assert (\\lbl ELEM \    onnullelements((\\lbl O o)));     " +

/*@nullable*/
//@ assert (\\lbl STRING \"def\") != null;     " +

//@ assert (\\lbl SHORT (short)(i)) != 0;     " +

//@ assert (\\lbl LONG (long)(i)) != 0;     " +

//@ assert (\\lbl BYTE (byte)(i)) != 0;     " +

//@ assert (\\lbl INT (int)(i)) != 0;     " +

//@ assert (\\lbl FLOAT (float)(i)) != 0;     " +

//@ assert (\\lbl DOUBLE (double)(i)) != 0;     " +

//@ assert (\\lbl CHAR n.charAt(0)) != 0;     " +

//@ assert (\\lbl BOOLEAN (i == 0)) ;     " +

//@ assert (\\lbl OBJECT o) == null;     " +

//@ assert (\\lbl STRING \"abc\") != null;     " +

/*@nullable*/
//@ assert (\\lbl OBJECT null) == null;     " +

//@ assert (\\lbl INT (int)(4)) != 0;     " +

//@ assert (\\lbl SHORT (short)(1)) != 0;     " +

//@ assert (\\lbl LONG (long)(2)) != 0;     " +

//@ assert (\\lbl BYTE (byte)(3)) != 0;     " +

//@ assert (\\lbl FLOAT (float)(5)) != 0;     " +

//@ assert (\\lbl DOUBLE (double)(6)) != 0;     " +

//@ assert (\\lbl CHAR 'a') != 0;     " +

//@ assert (\\lbl BOOLEAN true) ;     " +

//@ assert (\\lbl STRING \"abc\") != null;     " +

//@ ghost \\TYPE c;     " +

//@ set c = \\type(int);     " +

//@ set c = (\\lbl TYP1 c);     " +

//@ set c = \\type(boolean);     " +

//@ set c = (\\lbl TYP2 c);     " +

//@ ghost \\TYPE c;     " +

//@ set c = \\type(java.lang.Object);     " +

//@ set c = (\\lbl TYP1 c);     " +

//@ set c = \\type(Object);     " +

//@ set c = (\\lbl TYP2 c);     " +

//@ set c = \\type(java.lang.String);     " +

//@ set c = (\\lbl TYP3 c);     " +

//@ set c = \\type(String);     " +

//@ set c = (\\lbl TYP4 c);     " +

//@ ghost \\TYPE c;     " +

//@ set c = \\type(java.lang.String[]);     " +

//@ set c = (\\lbl TYP1 c);     " +

//@ set c = \\type(String[]);     " +

//@ set c = (\\lbl TYP2 c);     " +

//@ set c = \\type(java.lang.String[][]);     " +

//@ set c = (\\lbl TYP3 c);     " +

//@ set c = \\type(String[][]);     " +

//@ set c = (\\lbl TYP4 c);     " +

//@ ghost \\TYPE c;     " +

//@ set c = \\type(java.lang.Class<Integer>);     " +

//@ set c = (\\lbl TYP1 c);     " +

//@ ghost boolean bbb = (\\lbl TRUE Class.class == \\erasure(\\type(Class)));     " +

//@ set c = (\\lbl TYP2 c);     " +

//@ ghost \\TYPE c;     " +

//@ set c = \\type(int);     " +

//@ set c = (\\lbl TYP1 c);     " +

//@ set c = \\type(boolean);     " +

//@ set c = (\\lbl TYP2 c);     " +

//@ ghost \\TYPE c;     " +

//@ set c = \\type(java.lang.Object);     " +

//@ set c = (\\lbl TYP1 c);     " +

//@ set c = \\type(Object);     " +

//@ set c = (\\lbl TYP2 c);     " +

//@ set c = \\type(java.lang.String);     " +

//@ set c = (\\lbl TYP3 c);     " +

//@ set c = \\type(String);     " +

//@ set c = (\\lbl TYP4 c);     " +

//@ ghost \\TYPE c;     " +

//@ set c = \\type(java.lang.String[]);     " +

//@ set c = (\\lbl TYP1 c);     " +

//@ set c = \\type(String[]);     " +

//@ set c = (\\lbl TYP2 c);     " +

//@ set c = \\type(java.lang.String[][]);     " +

//@ set c = (\\lbl TYP3 c);     " +

//@ set c = \\type(String[][]);     " +

//@ set c = (\\lbl TYP4 c);     " +

//@ ghost \\TYPE c;     " +

//@ set c = \\type(java.lang.Class<Integer>);     " +

//@ set c = (\\lbl TYP1 c);     " +

//@ ghost boolean c;     " +

//@ set c = o.getClass() <: o.getClass();     " + // Object <: Object  // Class

//@ set c = (\\lbl TYP1 c);     " +

//@ set c = \\typeof(o) <: \\typeof(o);     " +  // Object <: Object // \TYPE

//@ set c = (\\lbl TYP2 c);     " +

//@ set c = \\typeof(o) <: \\typeof(oo);     " + // Object <: String // \TYPE

//@ set c = (\\lbl TYP3 c);     " +

//@ set c = \\typeof(oo) <: \\typeof(o);     " + // String <: Object // \TYPE

//@ set c = (\\lbl TYP4 c);     " +

//@ set c = \\typeof(ob) <: \\typeof(oo);     " + // Boolean <: String // \TYPE

//@ set c = (\\lbl TYP5 c);     " +

//@ ghost boolean c;     " +

//@ set c = s.getClass() <: b.getClass();     " + // String <: Boolean // Class

//@ set c = (\\lbl TYP1 c);     " +

//@ set c = \\typeof(s) <: \\typeof(b);     " +  // String <: Boolean // \TYPE

//@ set c = (\\lbl TYP2 c);     " +

//@ set c = \\type(int) <: \\typeof(o);     " + // int <: Object // \TYPE

//@ set c = (\\lbl TYP3 c);     " +

//@ set c = \\type(int) <: \\type(int);     " + // int <: int  // false

//@ set c = (\\lbl TYP4 c);     " +

//@ set c = \\type(int) <: \\type(boolean);     " + // int <: boolean

//@ set c = (\\lbl TYP5 c);     " +

//@ requires 10/i != 0;     " +

//@ ensures 10/(i-1) == 0;     " +

//@ requires i != 0;     " +

//@ requires 10/i == 10;     " +

//@ ghost public static int i = 0;      //@ public invariant i == 0;      //@ requires i == 1;     static public int m(); }");

//@ ghost static int i = 0;      //@ invariant i == 0;      //@ ensures i == 1;     static int m(); }");

//@ set i = 1;      return 0; }       public static void main(String[] args) { m(); System.out.println(\"END\"); }}"

/*@ model static pure public int mm() { return 5; } */
//@ ghost static public int i = 0;      "

//@ public invariant i == 0;      //@ ensures i == 1;     static public int m(); "

//@ set i = mm();     "

/*@ model public static class AA { static public int mm() { return 5; }} */
//@ ghost public static int i = 0;      "

//@ public invariant i == 0;      "

//@ ensures i == 0;     "

//@ set i = AA.mm();     "

/*@ model public static class AB { static public int mm() { return 5; }} */
//@ ghost public static int i = 0;      "

//@ public invariant i == 0;      "

//@ ensures i == 0;     "

//@ set i = AB.mm();     "

//@ static public invariant i == 0;      "

//@ static public invariant i == 0;      "

//@ public invariant i == 0;    "

//@ public invariant i == 0;"

//@ public invariant i == 0;"

//@ public invariant i == 0;"

//@ public invariant i == 0;"

//@ public initially i == 1;      "

//@ public initially j == 1;      "

//@ public invariant i == j;      "

/*@ assignable j; */
//@ constraint i == \\old(i)+1;      "

//@ invariant i == 0;      "

/*@ private helper */
//@ static model int i;     "

//@ static represents i \\such_that i == j+1;     "

//@ static model int i;      "

//@ static represents i = j+1;      "

//@ debug System.out.println(\"A \" + i);     "

//@ debug System.out.println(\"A \" + i);     "

//@ static ghost int ii;      "

//@ static model int i;      "

//@ static represents i \\such_that i==j+1;      "

//@ static represents i =j+1;      "

//@ debug System.out.println(\"A \" + i);     "

//@ debug System.out.println(\"A \" + i);     "

//@ static ghost int ii;      "

//@ static model int i;      "

//@ static represents i = j+1;      "

//@ static represents i = j;      "

//@ debug System.out.println(\"A \" + i);     "

//@ debug System.out.println(\"A \" + i);     "

//@  represents i = j+1;      "

//@ debug System.out.println(\"A \" + a.i);     "

//@ debug System.out.println(\"B \" + b.i);     "

//@ debug System.out.println(\"B \" + b.i);     "

//@ model  int i; 

//@  represents super.i = j+1;      "

//@ debug System.out.println(\"A \" + a.i);     "

//@ debug System.out.println(\"B \" + b.i);     "

//@ debug System.out.println(\"B \" + b.i);     "

//@ model protected int i; }    "

//@  model int i; represents i = j;     "

//@ debug System.out.println(\"A \" + a.i);     "

//@ debug System.out.println(\"B \" + b.i);     "

//@ model  int i; represents i = PA.j+1;     

//@ debug System.out.println(\"A \" + a.i);     "

//@ debug System.out.println(\"B \" + b.i);     "

//@ debug System.out.println(\"B \" + b.i);     "

//@ model  int i; 

//@ static model int i;     "

//@ debug System.out.println(\"A \" + i);     "

//@ ghost boolean n = (\\forall int i; 0<=i && i<=5; i >= 2);      "

//@ ghost boolean nn = (\\exists int i; 0<=i && i<=5; i >= 2);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost boolean n = (\\forall int i; 0<=i && i<=5; i >= 0);      "

//@ ghost boolean nn = (\\exists int i; 0<=i && i<=5; i >= 6);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost boolean n = (\\forall int i; ; i >= 0);      "

//@ ghost boolean nn = (\\exists int i; i == 4; i >= 6);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost boolean n = (\\forall int i; 0<i && i<=5; (\\exists int j; 0<=j && j < 5; j<i));      "

//@ ghost boolean nn = (\\forall int i; 0<=i && i<=5; (\\exists int j; 0<=j && j < 5; j<i));      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost long n1 = (\    um_of int i; 0 <= i && i <= 5; true);      "

//@ ghost long n2 = (\    um_of int i; 0 < i && i < 5; true);      "

//@ debug System.out.println(\"A \" + n1 + \" \" + n2);     "

//@ ghost long n = (\    um_of int i; 0 <= i && i < 5; i >= 2);      "

//@ ghost long nn = (\    um_of int i; 0 <= i && i < 5; false);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost int n = (\    um_of int i; 0 <= i && i < 5; i >= m);      "

//@ ghost int nn = (\    um_of int i; 0 <= i && i < 5; m > 0);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn );     "

//@ ensures (\    um_of int i; 0 <= i && i < 5; i >= m) == 3;    "

//@ ensures (\    um_of int i; 0 <= i && i < 5; i >= m) == 4;    "

//@ ghost long n1 = (\    um_of int i,j; 0 <= i && i <= 5 && 0 <= j && j < i; true);      "

//@ debug System.out.println(\"A \" + n1);     "

//@ ghost int n = (\\sum int i; 0<i && i<=5; i+1);      "

//@ ghost int nn = (\\sum int i; 0<i && i<0; i+1);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost int n = (\\product int i; 0<i && i<=5; i+1);      "

//@ ghost int nn = (\\product int i; 0<i && i<0; i+1);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost int n = (\\max int i; 0<=i && i<=5 && (i%2)==0; i+1);      "

//@ ghost int nn = (\\max int i; 0<i && i<0; i+1);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost int n = (\\max int i; 0<=i && i<=5 && (i%2)==0; inc(i));      "

//@ ghost int nn = (\\max int i; -9<=i && i<=5 ; Math.abs(i));      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost short n1 = (\\max int i; 0<=i && i<=5; (short)(i+10));      "

//@ ghost short n2 = (\\min int i; 0<=i && i<=5; (short)(i+10));      "

//@ debug System.out.println(\"A \" + n1 + \" \" + n2);     "

//@ ghost short n1 = (\\max short i; 2<=i && i<=5; i);      "

//@ ghost short n2 = (\\min short i; 2<=i && i<=5; i);      "

//@ debug System.out.println(\"A \" + n1 + \" \" + n2);     "

//@ ghost byte n1 = (\\max int i; 2<=i && i<=5; (byte)i);      "

//@ ghost byte n2 = (\\min int i; 2<=i && i<=5; (byte)i);      "

//@ debug System.out.println(\"A \" + n1 + \" \" + n2);     "

//@ ghost byte n1 = (\\max byte i; 2<=i && i<=5; i);      "

//@ ghost byte n2 = (\\min byte i; 2<=i && i<=5; i);      "

//@ debug System.out.println(\"A \" + n1 + \" \" + n2);     "

//@ ghost long n1 = (\\max int i; 0<=i && i<=5; (i+10L));      "

//@ ghost long n2 = (\\min int i; 0<=i && i<=5; (i+10L));      "

//@ debug System.out.println(\"A \" + n1 + \" \" + n2);     "

//@ ghost long n1 = (\\max long i; 0<=i && i<=5; (i+10L));      "

//@ ghost long n2 = (\\min long i; 0<=i && i<=5; (i+10L));      "

//@ debug System.out.println(\"A \" + n1 + \" \" + n2);     "

//@ ghost double n1 = (\\max int i; 0<=i && i<=5; (double)(i+10.5));      "

//@ ghost double n2 = (\\min int i; 0<=i && i<=5; (double)(i+10.5));      "

//@ debug System.out.println(\"A \" + n1 + \" \" + n2);     "

//@ ghost float n1 = (\\max int i; 0<=i && i<=5; (float)(i+10.5));      "

//@ ghost float n2 = (\\min int i; 0<=i && i<=5; (float)(i+10.5));      "

//@ debug System.out.println(\"A \" + n1 + \" \" + n2);     "

//@ ghost char n1 = (\\max int i; 'a'<i && i<='q'; (char)i);      "

//@ ghost char n2 = (\\min int i; 'a'<i && i<='q'; (char)i);      "

//@ debug System.out.println(\"A \" + n1 + \" \" + n2);     "

//@ ghost char n1 = (\\max char i; 'a'<i && i<='q'; i);      "

//@ ghost char n2 = (\\min char i; 'a'<i && i<='q'; i);      "

//@ debug System.out.println(\"A \" + n1 + \" \" + n2);     "

//@ ghost int n = (\\min int i; 0<=i && i<=5 && (i%2)==1; i+1);      "

//@ ghost int nn = (\\min int i; 0<i && i<0; i+1);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost long n = (\\max int i; 0<=i && i<=5 && (i%2)==0; (long)i+1);      "

//@ ghost long nn = (\\max int i; 0<i && i<0; i+1);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost long n = (\\min int i; 0<=i && i<=5 && (i%2)==1; (long)i+1);      "

//@ ghost long nn = (\\min int i; 0<i && i<0; i+1);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost double n = (\\max int i; 0<=i && i<=5 && (i%2)==0; (double)i+1);      "

//@ ghost double nn = (\\max int i; 0<i && i<0; i+1);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost double n = (\\min int i; 0<=i && i<=5 && (i%2)==1; (double)i+1);      "

//@ ghost double nn = (\\min int i; 0<i && i<0; (double)i+1);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost int n = (\\sum boolean i; bb; (i?2:5));      "

//@ ghost int nn = (\\sum boolean i; !i; (i?2:5));      "

//@ ghost int nnn = (\\sum boolean i; i; (i?2:5));      "

//@ ghost int nnnn = (\\sum boolean i; false; (i?2:5));      "

//@ debug System.out.println(\"A \" + n + \" \" + nn + \" \" + nnn + \" \" + nnnn);     "

//@ ghost int n = (\    um_of Object o; list.contains(o); true);      "

//@ ghost int nn = (\    um_of Object o; list.contains(o) && true; true);      "

//@ ghost int nnn = (\    um_of Object o; list.contains(o) && o == oo; true);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn + \" \" + nnn);     "

//@ model int i; );

//@ debug System.out.println(\"A \" + a.i);     "

//@ debug System.out.println(\"B \" + b.i);     "

//@ debug System.out.println(\"B \" + b.i);     "

//@ model int i; );

//@ debug System.out.println(\"A \" + a.i);     "

//@ debug System.out.println(\"B \" + b.i);     "

//@ debug System.out.println(\"B \" + b.i);     "

/*@non_null*/
/*@ non_null*/
//@ model  int i; represents i = 0; 

/*@non_null*/
/*@nullable*/
/*@nullable*/
//@ ghost int k; set k = A.i;    "

//@ set k = a.i;    "

//@ set k = a.b.i;    "

/*@nullable_by_default*/
/*@non_null*/
 ghost static Object oooo = null;    "

/*@ non_null*/
//@ ghost non_null String loc = null;     "

/*@nullable*/
//@ nullable ghost static Object oooo = null;    "

/*@ nullable*/
//@ ghost String loc = null;     "

/*@nullable*/
//@ static invariant o != ooo;    "

//@ nullable ghost static Object oooo = null;    "

/*@ nullable*/
//@ ghost String loc = null;     "

//@ axiom true;    "

//@ public invariant \\duration(true) == 0;    "

//@ public model long i;    "

//@ public represents i =  \\duration(true);    "

//@ public constraint \\duration(true) == 0;    "

//@ public initially \\duration(true) == 0;    "

//@ hence_by true;     "

//@ assert \\duration(true) == 0;    "

//@ assume \\duration(true) == 0;    "

//@ ghost long k = \\duration(true);    "

//@ set k = \\duration(true);    "

//@ debug k = \\duration(true);    "

//@ ghost long z = \\duration(true);    "

//@ ghost long[] zz = { \\duration(true) } ;    "

/*@ requires \\duration(true) == 0;*/
//@ ensures \\duration(true) == 0;    "

//@ signals (Exception ex) \\duration(true) == 0;    "

//@ signals_only RuntimeException;    "

//@ diverges \\duration(true) == 0;    " // line 23

//@ duration  \\duration(true);    "

//@ working_space \\duration(true);    "

//@   requires \\duration(true) == 0;    "

//@   ensures true;    "

//@ also    "

//@   requires \\duration(true) == 0;    "

//@   signals (Exception ex) true;    "

//@ also    "

//@   requires \\duration(true) == 0;    "

//@   signals_only RuntimeException;    "

//@ also    "

//@   ensures true;    "

//@public  invariant i == 1;     "

//@ public invariant i == 2;     "

//@ public invariant i == 3;     "

//@ public invariant i == 2;     "

//@ public invariant i == 3;     "

//@public  invariant i == 1;     "

//@ static public invariant i == 2;     "

//@ static public invariant i == 3;     "

//@ static public invariant i == 1;     "

//@ also ensures i == 2;     "

//@ also ensures i == 3;     "

//@ ensures false;     "

//@ also ensures i == 2;     "

//@ also private behavior ensures i == 2;     "

//@ also ensures i == 3;     "

//@ ensures false;     "

//@ also ensures i == 2;     "

//@ requires kc == 3; ensures i == 3;     "

//@ also requires kb == 2; ensures i == 2;     "

//@ also requires ka==1; ensures i == 1;     "

//@ requires i > 0;    "

//@ modifies j;    "

//@ ensures j == i;    "

//@ ensures j == 1;    "

//@ requires i > 0;    "

//@ modifies j;    "

//@ ensures j == i;    "

//@ ensures j == 1;    "

//@ requires i > 0;    "

//@ modifies k;    "

//@ ensures j == i;    "

//@ ensures j == 1;    "

/*@ assert i == 0; */
/*@ assert i == -1; */
//@ assert false;      } " +

//@ assert false;            } " +

//@ assert false;      } " +

//@ ensures \\result == i;    "

//@ ensures \\result == i+1;    "

//@ loop_invariant sum >= 0;     "

//@ assert sum >= 0;     "

//@ loop_invariant sum >= 0;     "

//@ assert sum > 0;     "

//@ loop_invariant sum >= 0;     "

/*@ assume o >= 0; */
//@ assert sum >= 0;     "

//@ loop_invariant sum >= 0;     "

/*@ assume o >= 0; */
//@ assert sum > 0;     "

//@ old int kk = k; requires i > kk; assignable k; ensures k == i+1; ensures kk == 5;    "

//@ also    "

//@ old int kkk = k+1; requires i < kkk; assignable k; ensures k == i-1; ensures kkk == 7;    "

//@ old int kk = k; requires i > kk; assignable k; ensures k == i+1; ensures kk == 5;    "

//@ also    " // Purposely duplicating the name of the old variable

//@ old int kk = k+1; requires i < kk; assignable k; ensures k == i-1; ensures kk == 7;    "

//@ old int kk = k;    "

//@ {| requires i > kk; assignable k; ensures k == i+1; ensures kk == 5;    "

//@ also    "

//@    requires i < kk; assignable k; ensures k == i-1; ensures kk == 6;    "

//@ |}    "

//@ public normal_behavior     "

//@   requires true;     "

//@ show i, j+1;    "

//@ show k;    "

//@ assert k > 0;    "

//@ show m,k;    "

//@ assert m > 0;    "

//@ ghost int i = 0;      //@ set i = 1;      //@ set System.out.println(i);      System.out.println(\"END\"); }}"

//@ assert false;      System.out.println(\"END\"); }}"

//@ assert false: \"ABC\";      System.out.println(\"END\"); }}"

//@ assert false: (int)args.length;      System.out.println(\"END\"); }}"

//@ assert true: args.length;      System.out.println(\"END\"); }}"

//@ assume false;      System.out.println(\"END\"); }}"

//@ assume false: \"DEF\";      System.out.println(\"END\"); }}"

//@ unreachable;      System.out.println(\"END\"); }}"

/*@ requires i == 0; */
/*@ requires i != 0; */
/*@ requires i > 0; */
/*@ requires i < 0; */
//@ nowarn Precondition;    " +

/*@ requires i != 0; */
//@ nowarn Precondition;    " +

/*@ requires true; */
/*@non_null*/
/*@non_null*/
/*@ requires true; */
/*@non_null*/
/*@non_null*/
/*@nullable*/
/*@ ensures k == i; */
/*@ ensures k == 0; */
/*@ nowarn Postcondition;*/
/*@ ensures k == 0; */
/*@ nowarn Postcondition;*/
/*@ requires true;     also     requires false;     ensures k == 0; */
/*@ requires true;     ensures true;     also     requires false;     ensures k == 0; */
/*@ requires true;     " +
                "     ensures k != i;     " +
                "     also     " +
                "     requires true;     " +
                "     ensures k == 0; */
/*@   requires true;     "
                +"        ensures k != i;     "
                +"      also     "
                +"        requires true;     "
                +"        ensures k == 0; */
/*@ requires true;     "
                +"     signals (java.io.FileNotFoundException e) e == null; */
/*@ requires true;     signals (java.io.FileNotFoundException e) e == null; */
/*@ requires true;     signals_only \    othing; */
/*@ requires true;     signals_only java.io.FileNotFoundException; */
/*@ requires true;     signals_only java.io.FileNotFoundException; */
/*@ requires true;     */
/*@ requires true;     */
/*@ ensures \\result == 4; */
/*@ ensures \\result == 4; */
/*@ ensures (\\lbl ENS \\result == 1); */
/*@ ensures (\\lbl ENS (\\lbl RES \\result) == 1); */
/*@ ensures (\\lbl ENS \\old(k)) == k; */
//@ assert (\\lbl AST \\old(k)) == 0;      k=i; //@ assert (\\lbl AST2 \\old(k)) == 0;     //@ assert (\\lbl AST3 k) == 0;      return i; } " +

//@ ghost int p = (\\lbl AST \\old(k));     "

//@ ghost int kk =  (\\lbl AST2 \\old(k));     "

//@ set kk = (\\lbl AST3 k);      "

//@ set kk = (\\lbl AST4 \\old(k,lab));      "

//@ assert (i==0) <==> (* informal *);      return i; } " +

//@ ghost nullable java.lang.Class t; ghost nullable \\TYPE tt;     "

//@ set tt = (\\lbl A \\elemtype(\\typeof(o)));    "

//@ set tt = (\\lbl B \\elemtype(\\typeof(oo)));    "

//@ set tt = (\\lbl C \\elemtype(\\typeof(o3)));    "

//@ set t = (\\lbl D \\elemtype(java.lang.Class.class));    "

//@ set t = (\\lbl E \\elemtype(java.lang.Boolean[].class));    "

//@ requires JML.informal(\"asd\") && (\\lbl CLS \\erasure(\\typeof(i))) == Object.class;     " +

/*@nullable*/
//@ requires (\\lbl CLS \\typeof(i)) == \\type(Object);     " +

/*@nullable*/
//@ requires (\\lbl CLS \\typeof(i)) == \\type(Object);     " +

//@ assert (\\lbl AST \\typeof(true)) == \\typeof(true);     " +

//@ assert (\\lbl AST2 \\typeof((short)0)) != \\typeof(true);     " +

//@ assert (\\lbl AST3 \\typeof((long)0)) != \\typeof(true);     " +

//@ assert (\\lbl AST4 \\typeof((byte)0)) != \\typeof(true);     " +

//@ assert (\\lbl AST5 \\typeof('c')) != \\typeof(true);     " +

//@ assert (\\lbl AST6 \\typeof(\"c\")) != \\typeof(true);     " +

//@ assert (\\lbl AST7 \\typeof((float)0)) != \\typeof(true);     " +

//@ assert (\\lbl AST8 \\typeof((double)0)) != \\typeof(true);     " +

//@ assert (\\lbl AST9 \\typeof(5/0)) == \\typeof(5/0);     " +

//@ assert (\\lbl AST10 \\typeof(5.0/0.0)) != \\typeof(5/0);     " +

//@ requires (\\lbl CLS \\typeof(i)) == ( \\type(LinkedList<Integer>) );     " +

/*@nullable*/
//@ requires (\\lbl CLS \\typeof(i)) == ( \\type(LinkedList<Integer>) );     " +

/*@nullable*/
//@ requires (\\lbl CLS \\typeof(i)) != ( \\type(LinkedList<Integer>) );     " +

/*@nullable*/
//@ assert \    onnullelements(s2,s2null);     " +

//@ assert \    onnullelements(s2,s2);     " +

//@ assert \    onnullelements(s2null,new Integer[]{5/z});     " +

//@ assert (\\lbl ELEM \    onnullelements(o));     " +

/*@nullable*/
//@ assert (\\lbl ELEM \    onnullelements((\\lbl O o)));     " +

/*@nullable*/
//@ assert (\\lbl STRING \"def\") != null;     " +

//@ assert (\\lbl SHORT (short)(i)) != 0;     " +

//@ assert (\\lbl LONG (long)(i)) != 0;     " +

//@ assert (\\lbl BYTE (byte)(i)) != 0;     " +

//@ assert (\\lbl INT (int)(i)) != 0;     " +

//@ assert (\\lbl FLOAT (float)(i)) != 0;     " +

//@ assert (\\lbl DOUBLE (double)(i)) != 0;     " +

//@ assert (\\lbl CHAR n.charAt(0)) != 0;     " +

//@ assert (\\lbl BOOLEAN (i == 0)) ;     " +

//@ assert (\\lbl OBJECT o) == null;     " +

//@ assert (\\lbl STRING \"abc\") != null;     " +

/*@nullable*/
//@ assert (\\lbl OBJECT null) == null;     " +

//@ assert (\\lbl INT (int)(4)) != 0;     " +

//@ assert (\\lbl SHORT (short)(1)) != 0;     " +

//@ assert (\\lbl LONG (long)(2)) != 0;     " +

//@ assert (\\lbl BYTE (byte)(3)) != 0;     " +

//@ assert (\\lbl FLOAT (float)(5)) != 0;     " +

//@ assert (\\lbl DOUBLE (double)(6)) != 0;     " +

//@ assert (\\lbl CHAR 'a') != 0;     " +

//@ assert (\\lbl BOOLEAN true) ;     " +

//@ assert (\\lbl STRING \"abc\") != null;     " +

//@ ghost \\TYPE c;     " +

//@ set c = \\type(int);     " +

//@ set c = (\\lbl TYP1 c);     " +

//@ set c = \\type(boolean);     " +

//@ set c = (\\lbl TYP2 c);     " +

//@ ghost \\TYPE c;     " +

//@ set c = \\type(java.lang.Object);     " +

//@ set c = (\\lbl TYP1 c);     " +

//@ set c = \\type(Object);     " +

//@ set c = (\\lbl TYP2 c);     " +

//@ set c = \\type(java.lang.String);     " +

//@ set c = (\\lbl TYP3 c);     " +

//@ set c = \\type(String);     " +

//@ set c = (\\lbl TYP4 c);     " +

//@ ghost \\TYPE c;     " +

//@ set c = \\type(java.lang.String[]);     " +

//@ set c = (\\lbl TYP1 c);     " +

//@ set c = \\type(String[]);     " +

//@ set c = (\\lbl TYP2 c);     " +

//@ set c = \\type(java.lang.String[][]);     " +

//@ set c = (\\lbl TYP3 c);     " +

//@ set c = \\type(String[][]);     " +

//@ set c = (\\lbl TYP4 c);     " +

//@ ghost \\TYPE c;     " +

//@ set c = \\type(java.lang.Class<Integer>);     " +

//@ set c = (\\lbl TYP1 c);     " +

//@ ghost boolean bbb = (\\lbl TRUE Class.class == \\erasure(\\type(Class)));     " +

//@ set c = (\\lbl TYP2 c);     " +

//@ ghost \\TYPE c;     " +

//@ set c = \\type(int);     " +

//@ set c = (\\lbl TYP1 c);     " +

//@ set c = \\type(boolean);     " +

//@ set c = (\\lbl TYP2 c);     " +

//@ ghost \\TYPE c;     " +

//@ set c = \\type(java.lang.Object);     " +

//@ set c = (\\lbl TYP1 c);     " +

//@ set c = \\type(Object);     " +

//@ set c = (\\lbl TYP2 c);     " +

//@ set c = \\type(java.lang.String);     " +

//@ set c = (\\lbl TYP3 c);     " +

//@ set c = \\type(String);     " +

//@ set c = (\\lbl TYP4 c);     " +

//@ ghost \\TYPE c;     " +

//@ set c = \\type(java.lang.String[]);     " +

//@ set c = (\\lbl TYP1 c);     " +

//@ set c = \\type(String[]);     " +

//@ set c = (\\lbl TYP2 c);     " +

//@ set c = \\type(java.lang.String[][]);     " +

//@ set c = (\\lbl TYP3 c);     " +

//@ set c = \\type(String[][]);     " +

//@ set c = (\\lbl TYP4 c);     " +

//@ ghost \\TYPE c;     " +

//@ set c = \\type(java.lang.Class<Integer>);     " +

//@ set c = (\\lbl TYP1 c);     " +

//@ ghost boolean c;     " +

//@ set c = o.getClass() <: o.getClass();     " + // Object <: Object  // Class

//@ set c = (\\lbl TYP1 c);     " +

//@ set c = \\typeof(o) <: \\typeof(o);     " +  // Object <: Object // \TYPE

//@ set c = (\\lbl TYP2 c);     " +

//@ set c = \\typeof(o) <: \\typeof(oo);     " + // Object <: String // \TYPE

//@ set c = (\\lbl TYP3 c);     " +

//@ set c = \\typeof(oo) <: \\typeof(o);     " + // String <: Object // \TYPE

//@ set c = (\\lbl TYP4 c);     " +

//@ set c = \\typeof(ob) <: \\typeof(oo);     " + // Boolean <: String // \TYPE

//@ set c = (\\lbl TYP5 c);     " +

//@ ghost boolean c;     " +

//@ set c = s.getClass() <: b.getClass();     " + // String <: Boolean // Class

//@ set c = (\\lbl TYP1 c);     " +

//@ set c = \\typeof(s) <: \\typeof(b);     " +  // String <: Boolean // \TYPE

//@ set c = (\\lbl TYP2 c);     " +

//@ set c = \\type(int) <: \\typeof(o);     " + // int <: Object // \TYPE

//@ set c = (\\lbl TYP3 c);     " +

//@ set c = \\type(int) <: \\type(int);     " + // int <: int  // false

//@ set c = (\\lbl TYP4 c);     " +

//@ set c = \\type(int) <: \\type(boolean);     " + // int <: boolean

//@ set c = (\\lbl TYP5 c);     " +

//@ requires 10/i != 0;     " +

//@ ensures 10/(i-1) == 0;     " +

//@ requires i != 0;     " +

//@ requires 10/i == 10;     " +

//@ ghost public static int i = 0;      //@ public invariant i == 0;      //@ requires i == 1;     static public int m(); }");

//@ ghost static int i = 0;      //@ invariant i == 0;      //@ ensures i == 1;     static int m(); }");

//@ set i = 1;      return 0; }       public static void main(String[] args) { m(); System.out.println(\"END\"); }}"

/*@ model static pure public int mm() { return 5; } */
//@ ghost static public int i = 0;      "

//@ public invariant i == 0;      //@ ensures i == 1;     static public int m(); "

//@ set i = mm();     "

/*@ model public static class AA { static public int mm() { return 5; }} */
//@ ghost public static int i = 0;      "

//@ public invariant i == 0;      "

//@ ensures i == 0;     "

//@ set i = AA.mm();     "

/*@ model public static class AB { static public int mm() { return 5; }} */
//@ ghost public static int i = 0;      "

//@ public invariant i == 0;      "

//@ ensures i == 0;     "

//@ set i = AB.mm();     "

//@ static public invariant i == 0;      "

//@ static public invariant i == 0;      "

//@ public invariant i == 0;    "

//@ public invariant i == 0;"

//@ public invariant i == 0;"

//@ public invariant i == 0;"

//@ public invariant i == 0;"

//@ public initially i == 1;      "

//@ public initially j == 1;      "

//@ public invariant i == j;      "

/*@ assignable j; */
//@ constraint i == \\old(i)+1;      "

//@ invariant i == 0;      "

/*@ private helper */
//@ static model int i;     "

//@ static represents i \\such_that i == j+1;     "

//@ static model int i;      "

//@ static represents i = j+1;      "

//@ debug System.out.println(\"A \" + i);     "

//@ debug System.out.println(\"A \" + i);     "

//@ static ghost int ii;      "

//@ static model int i;      "

//@ static represents i \\such_that i==j+1;      "

//@ static represents i =j+1;      "

//@ debug System.out.println(\"A \" + i);     "

//@ debug System.out.println(\"A \" + i);     "

//@ static ghost int ii;      "

//@ static model int i;      "

//@ static represents i = j+1;      "

//@ static represents i = j;      "

//@ debug System.out.println(\"A \" + i);     "

//@ debug System.out.println(\"A \" + i);     "

//@  represents i = j+1;      "

//@ debug System.out.println(\"A \" + a.i);     "

//@ debug System.out.println(\"B \" + b.i);     "

//@ debug System.out.println(\"B \" + b.i);     "

//@ model  int i; 

//@  represents super.i = j+1;      "

//@ debug System.out.println(\"A \" + a.i);     "

//@ debug System.out.println(\"B \" + b.i);     "

//@ debug System.out.println(\"B \" + b.i);     "

//@ model protected int i; }    "

//@  model int i; represents i = j;     "

//@ debug System.out.println(\"A \" + a.i);     "

//@ debug System.out.println(\"B \" + b.i);     "

//@ model  int i; represents i = PA.j+1;     

//@ debug System.out.println(\"A \" + a.i);     "

//@ debug System.out.println(\"B \" + b.i);     "

//@ debug System.out.println(\"B \" + b.i);     "

//@ model  int i; 

//@ static model int i;     "

//@ debug System.out.println(\"A \" + i);     "

//@ ghost boolean n = (\\forall int i; 0<=i && i<=5; i >= 2);      "

//@ ghost boolean nn = (\\exists int i; 0<=i && i<=5; i >= 2);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost boolean n = (\\forall int i; 0<=i && i<=5; i >= 0);      "

//@ ghost boolean nn = (\\exists int i; 0<=i && i<=5; i >= 6);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost boolean n = (\\forall int i; ; i >= 0);      "

//@ ghost boolean nn = (\\exists int i; i == 4; i >= 6);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost boolean n = (\\forall int i; 0<i && i<=5; (\\exists int j; 0<=j && j < 5; j<i));      "

//@ ghost boolean nn = (\\forall int i; 0<=i && i<=5; (\\exists int j; 0<=j && j < 5; j<i));      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost long n1 = (\    um_of int i; 0 <= i && i <= 5; true);      "

//@ ghost long n2 = (\    um_of int i; 0 < i && i < 5; true);      "

//@ debug System.out.println(\"A \" + n1 + \" \" + n2);     "

//@ ghost long n = (\    um_of int i; 0 <= i && i < 5; i >= 2);      "

//@ ghost long nn = (\    um_of int i; 0 <= i && i < 5; false);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost int n = (\    um_of int i; 0 <= i && i < 5; i >= m);      "

//@ ghost int nn = (\    um_of int i; 0 <= i && i < 5; m > 0);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn );     "

//@ ensures (\    um_of int i; 0 <= i && i < 5; i >= m) == 3;    "

//@ ensures (\    um_of int i; 0 <= i && i < 5; i >= m) == 4;    "

//@ ghost long n1 = (\    um_of int i,j; 0 <= i && i <= 5 && 0 <= j && j < i; true);      "

//@ debug System.out.println(\"A \" + n1);     "

//@ ghost int n = (\\sum int i; 0<i && i<=5; i+1);      "

//@ ghost int nn = (\\sum int i; 0<i && i<0; i+1);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost int n = (\\product int i; 0<i && i<=5; i+1);      "

//@ ghost int nn = (\\product int i; 0<i && i<0; i+1);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost int n = (\\max int i; 0<=i && i<=5 && (i%2)==0; i+1);      "

//@ ghost int nn = (\\max int i; 0<i && i<0; i+1);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost int n = (\\max int i; 0<=i && i<=5 && (i%2)==0; inc(i));      "

//@ ghost int nn = (\\max int i; -9<=i && i<=5 ; Math.abs(i));      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost short n1 = (\\max int i; 0<=i && i<=5; (short)(i+10));      "

//@ ghost short n2 = (\\min int i; 0<=i && i<=5; (short)(i+10));      "

//@ debug System.out.println(\"A \" + n1 + \" \" + n2);     "

//@ ghost short n1 = (\\max short i; 2<=i && i<=5; i);      "

//@ ghost short n2 = (\\min short i; 2<=i && i<=5; i);      "

//@ debug System.out.println(\"A \" + n1 + \" \" + n2);     "

//@ ghost byte n1 = (\\max int i; 2<=i && i<=5; (byte)i);      "

//@ ghost byte n2 = (\\min int i; 2<=i && i<=5; (byte)i);      "

//@ debug System.out.println(\"A \" + n1 + \" \" + n2);     "

//@ ghost byte n1 = (\\max byte i; 2<=i && i<=5; i);      "

//@ ghost byte n2 = (\\min byte i; 2<=i && i<=5; i);      "

//@ debug System.out.println(\"A \" + n1 + \" \" + n2);     "

//@ ghost long n1 = (\\max int i; 0<=i && i<=5; (i+10L));      "

//@ ghost long n2 = (\\min int i; 0<=i && i<=5; (i+10L));      "

//@ debug System.out.println(\"A \" + n1 + \" \" + n2);     "

//@ ghost long n1 = (\\max long i; 0<=i && i<=5; (i+10L));      "

//@ ghost long n2 = (\\min long i; 0<=i && i<=5; (i+10L));      "

//@ debug System.out.println(\"A \" + n1 + \" \" + n2);     "

//@ ghost double n1 = (\\max int i; 0<=i && i<=5; (double)(i+10.5));      "

//@ ghost double n2 = (\\min int i; 0<=i && i<=5; (double)(i+10.5));      "

//@ debug System.out.println(\"A \" + n1 + \" \" + n2);     "

//@ ghost float n1 = (\\max int i; 0<=i && i<=5; (float)(i+10.5));      "

//@ ghost float n2 = (\\min int i; 0<=i && i<=5; (float)(i+10.5));      "

//@ debug System.out.println(\"A \" + n1 + \" \" + n2);     "

//@ ghost char n1 = (\\max int i; 'a'<i && i<='q'; (char)i);      "

//@ ghost char n2 = (\\min int i; 'a'<i && i<='q'; (char)i);      "

//@ debug System.out.println(\"A \" + n1 + \" \" + n2);     "

//@ ghost char n1 = (\\max char i; 'a'<i && i<='q'; i);      "

//@ ghost char n2 = (\\min char i; 'a'<i && i<='q'; i);      "

//@ debug System.out.println(\"A \" + n1 + \" \" + n2);     "

//@ ghost int n = (\\min int i; 0<=i && i<=5 && (i%2)==1; i+1);      "

//@ ghost int nn = (\\min int i; 0<i && i<0; i+1);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost long n = (\\max int i; 0<=i && i<=5 && (i%2)==0; (long)i+1);      "

//@ ghost long nn = (\\max int i; 0<i && i<0; i+1);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost long n = (\\min int i; 0<=i && i<=5 && (i%2)==1; (long)i+1);      "

//@ ghost long nn = (\\min int i; 0<i && i<0; i+1);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost double n = (\\max int i; 0<=i && i<=5 && (i%2)==0; (double)i+1);      "

//@ ghost double nn = (\\max int i; 0<i && i<0; i+1);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost double n = (\\min int i; 0<=i && i<=5 && (i%2)==1; (double)i+1);      "

//@ ghost double nn = (\\min int i; 0<i && i<0; (double)i+1);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost int n = (\\sum boolean i; bb; (i?2:5));      "

//@ ghost int nn = (\\sum boolean i; !i; (i?2:5));      "

//@ ghost int nnn = (\\sum boolean i; i; (i?2:5));      "

//@ ghost int nnnn = (\\sum boolean i; false; (i?2:5));      "

//@ debug System.out.println(\"A \" + n + \" \" + nn + \" \" + nnn + \" \" + nnnn);     "

//@ ghost int n = (\    um_of Object o; list.contains(o); true);      "

//@ ghost int nn = (\    um_of Object o; list.contains(o) && true; true);      "

//@ ghost int nnn = (\    um_of Object o; list.contains(o) && o == oo; true);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn + \" \" + nnn);     "

//@ model int i; );

//@ debug System.out.println(\"A \" + a.i);     "

//@ debug System.out.println(\"B \" + b.i);     "

//@ debug System.out.println(\"B \" + b.i);     "

//@ model int i; );

//@ debug System.out.println(\"A \" + a.i);     "

//@ debug System.out.println(\"B \" + b.i);     "

//@ debug System.out.println(\"B \" + b.i);     "

/*@non_null*/
/*@ non_null*/
//@ model  int i; represents i = 0; 

/*@non_null*/
/*@nullable*/
/*@nullable*/
//@ ghost int k; set k = A.i;    "

//@ set k = a.i;    "

//@ set k = a.b.i;    "

/*@nullable_by_default*/
/*@non_null*/
 ghost static Object oooo = null;    "

/*@ non_null*/
//@ ghost non_null String loc = null;     "

/*@nullable*/
//@ nullable ghost static Object oooo = null;    "

/*@ nullable*/
//@ ghost String loc = null;     "

/*@nullable*/
//@ static invariant o != ooo;    "

//@ nullable ghost static Object oooo = null;    "

/*@ nullable*/
//@ ghost String loc = null;     "

//@ axiom true;    "

//@ public invariant \\duration(true) == 0;    "

//@ public model long i;    "

//@ public represents i =  \\duration(true);    "

//@ public constraint \\duration(true) == 0;    "

//@ public initially \\duration(true) == 0;    "

//@ hence_by true;     "

//@ assert \\duration(true) == 0;    "

//@ assume \\duration(true) == 0;    "

//@ ghost long k = \\duration(true);    "

//@ set k = \\duration(true);    "

//@ debug k = \\duration(true);    "

//@ ghost long z = \\duration(true);    "

//@ ghost long[] zz = { \\duration(true) } ;    "

/*@ requires \\duration(true) == 0;*/
//@ ensures \\duration(true) == 0;    "

//@ signals (Exception ex) \\duration(true) == 0;    "

//@ signals_only RuntimeException;    "

//@ diverges \\duration(true) == 0;    " // line 23

//@ duration  \\duration(true);    "

//@ working_space \\duration(true);    "

//@   requires \\duration(true) == 0;    "

//@   ensures true;    "

//@ also    "

//@   requires \\duration(true) == 0;    "

//@   signals (Exception ex) true;    "

//@ also    "

//@   requires \\duration(true) == 0;    "

//@   signals_only RuntimeException;    "

//@ also    "

//@   ensures true;    "

//@public  invariant i == 1;     "

//@ public invariant i == 2;     "

//@ public invariant i == 3;     "

//@ public invariant i == 2;     "

//@ public invariant i == 3;     "

//@public  invariant i == 1;     "

//@ static public invariant i == 2;     "

//@ static public invariant i == 3;     "

//@ static public invariant i == 1;     "

//@ also ensures i == 2;     "

//@ also ensures i == 3;     "

//@ ensures false;     "

//@ also ensures i == 2;     "

//@ also private behavior ensures i == 2;     "

//@ also ensures i == 3;     "

//@ ensures false;     "

//@ also ensures i == 2;     "

//@ requires kc == 3; ensures i == 3;     "

//@ also requires kb == 2; ensures i == 2;     "

//@ also requires ka==1; ensures i == 1;     "

//@ requires i > 0;    "

//@ modifies j;    "

//@ ensures j == i;    "

//@ ensures j == 1;    "

//@ requires i > 0;    "

//@ modifies j;    "

//@ ensures j == i;    "

//@ ensures j == 1;    "

//@ requires i > 0;    "

//@ modifies k;    "

//@ ensures j == i;    "

//@ ensures j == 1;    "

/*@ assert i == 0; */
/*@ assert i == -1; */
//@ assert false;      } " +

//@ assert false;            } " +

//@ assert false;      } " +

//@ ensures \\result == i;    "

//@ ensures \\result == i+1;    "

//@ loop_invariant sum >= 0;     "

//@ assert sum >= 0;     "

//@ loop_invariant sum >= 0;     "

//@ assert sum > 0;     "

//@ loop_invariant sum >= 0;     "

/*@ assume o >= 0; */
//@ assert sum >= 0;     "

//@ loop_invariant sum >= 0;     "

/*@ assume o >= 0; */
//@ assert sum > 0;     "

//@ old int kk = k; requires i > kk; assignable k; ensures k == i+1; ensures kk == 5;    "

//@ also    "

//@ old int kkk = k+1; requires i < kkk; assignable k; ensures k == i-1; ensures kkk == 7;    "

//@ old int kk = k; requires i > kk; assignable k; ensures k == i+1; ensures kk == 5;    "

//@ also    " // Purposely duplicating the name of the old variable

//@ old int kk = k+1; requires i < kk; assignable k; ensures k == i-1; ensures kk == 7;    "

//@ old int kk = k;    "

//@ {| requires i > kk; assignable k; ensures k == i+1; ensures kk == 5;    "

//@ also    "

//@    requires i < kk; assignable k; ensures k == i-1; ensures kk == 6;    "

//@ |}    "

//@ public normal_behavior     "

//@   requires true;     "

//@ show i, j+1;    "

//@ show k;    "

//@ assert k > 0;    "

//@ show m,k;    "

//@ assert m > 0;    "

//@ ghost int i = 0;      //@ set i = 1;      //@ set System.out.println(i);      System.out.println(\"END\"); }}"

//@ assert false;      System.out.println(\"END\"); }}"

//@ assert false: \"ABC\";      System.out.println(\"END\"); }}"

//@ assert false: (int)args.length;      System.out.println(\"END\"); }}"

//@ assert true: args.length;      System.out.println(\"END\"); }}"

//@ assume false;      System.out.println(\"END\"); }}"

//@ assume false: \"DEF\";      System.out.println(\"END\"); }}"

//@ unreachable;      System.out.println(\"END\"); }}"

/*@ requires i == 0; */
/*@ requires i != 0; */
/*@ requires i > 0; */
/*@ requires i < 0; */
//@ nowarn Precondition;    " +

/*@ requires i != 0; */
//@ nowarn Precondition;    " +

/*@ requires true; */
/*@non_null*/
/*@non_null*/
/*@ requires true; */
/*@non_null*/
/*@non_null*/
/*@nullable*/
/*@ ensures k == i; */
/*@ ensures k == 0; */
/*@ nowarn Postcondition;*/
/*@ ensures k == 0; */
/*@ nowarn Postcondition;*/
/*@ requires true;     also     requires false;     ensures k == 0; */
/*@ requires true;     ensures true;     also     requires false;     ensures k == 0; */
/*@ requires true;     " +
                "     ensures k != i;     " +
                "     also     " +
                "     requires true;     " +
                "     ensures k == 0; */
/*@   requires true;     "
                +"        ensures k != i;     "
                +"      also     "
                +"        requires true;     "
                +"        ensures k == 0; */
/*@ requires true;     "
                +"     signals (java.io.FileNotFoundException e) e == null; */
/*@ requires true;     signals (java.io.FileNotFoundException e) e == null; */
/*@ requires true;     signals_only \    othing; */
/*@ requires true;     signals_only java.io.FileNotFoundException; */
/*@ requires true;     signals_only java.io.FileNotFoundException; */
/*@ requires true;     */
/*@ requires true;     */
/*@ ensures \\result == 4; */
/*@ ensures \\result == 4; */
/*@ ensures (\\lbl ENS \\result == 1); */
/*@ ensures (\\lbl ENS (\\lbl RES \\result) == 1); */
/*@ ensures (\\lbl ENS \\old(k)) == k; */
//@ assert (\\lbl AST \\old(k)) == 0;      k=i; //@ assert (\\lbl AST2 \\old(k)) == 0;     //@ assert (\\lbl AST3 k) == 0;      return i; } " +

//@ ghost int p = (\\lbl AST \\old(k));     "

//@ ghost int kk =  (\\lbl AST2 \\old(k));     "

//@ set kk = (\\lbl AST3 k);      "

//@ set kk = (\\lbl AST4 \\old(k,lab));      "

//@ assert (i==0) <==> (* informal *);      return i; } " +

//@ ghost nullable java.lang.Class t; ghost nullable \\TYPE tt;     "

//@ set tt = (\\lbl A \\elemtype(\\typeof(o)));    "

//@ set tt = (\\lbl B \\elemtype(\\typeof(oo)));    "

//@ set tt = (\\lbl C \\elemtype(\\typeof(o3)));    "

//@ set t = (\\lbl D \\elemtype(java.lang.Class.class));    "

//@ set t = (\\lbl E \\elemtype(java.lang.Boolean[].class));    "

//@ requires JML.informal(\"asd\") && (\\lbl CLS \\erasure(\\typeof(i))) == Object.class;     " +

/*@nullable*/
//@ requires (\\lbl CLS \\typeof(i)) == \\type(Object);     " +

/*@nullable*/
//@ requires (\\lbl CLS \\typeof(i)) == \\type(Object);     " +

//@ assert (\\lbl AST \\typeof(true)) == \\typeof(true);     " +

//@ assert (\\lbl AST2 \\typeof((short)0)) != \\typeof(true);     " +

//@ assert (\\lbl AST3 \\typeof((long)0)) != \\typeof(true);     " +

//@ assert (\\lbl AST4 \\typeof((byte)0)) != \\typeof(true);     " +

//@ assert (\\lbl AST5 \\typeof('c')) != \\typeof(true);     " +

//@ assert (\\lbl AST6 \\typeof(\"c\")) != \\typeof(true);     " +

//@ assert (\\lbl AST7 \\typeof((float)0)) != \\typeof(true);     " +

//@ assert (\\lbl AST8 \\typeof((double)0)) != \\typeof(true);     " +

//@ assert (\\lbl AST9 \\typeof(5/0)) == \\typeof(5/0);     " +

//@ assert (\\lbl AST10 \\typeof(5.0/0.0)) != \\typeof(5/0);     " +

//@ requires (\\lbl CLS \\typeof(i)) == ( \\type(LinkedList<Integer>) );     " +

/*@nullable*/
//@ requires (\\lbl CLS \\typeof(i)) == ( \\type(LinkedList<Integer>) );     " +

/*@nullable*/
//@ requires (\\lbl CLS \\typeof(i)) != ( \\type(LinkedList<Integer>) );     " +

/*@nullable*/
//@ assert \    onnullelements(s2,s2null);     " +

//@ assert \    onnullelements(s2,s2);     " +

//@ assert \    onnullelements(s2null,new Integer[]{5/z});     " +

//@ assert (\\lbl ELEM \    onnullelements(o));     " +

/*@nullable*/
//@ assert (\\lbl ELEM \    onnullelements((\\lbl O o)));     " +

/*@nullable*/
//@ assert (\\lbl STRING \"def\") != null;     " +

//@ assert (\\lbl SHORT (short)(i)) != 0;     " +

//@ assert (\\lbl LONG (long)(i)) != 0;     " +

//@ assert (\\lbl BYTE (byte)(i)) != 0;     " +

//@ assert (\\lbl INT (int)(i)) != 0;     " +

//@ assert (\\lbl FLOAT (float)(i)) != 0;     " +

//@ assert (\\lbl DOUBLE (double)(i)) != 0;     " +

//@ assert (\\lbl CHAR n.charAt(0)) != 0;     " +

//@ assert (\\lbl BOOLEAN (i == 0)) ;     " +

//@ assert (\\lbl OBJECT o) == null;     " +

//@ assert (\\lbl STRING \"abc\") != null;     " +

/*@nullable*/
//@ assert (\\lbl OBJECT null) == null;     " +

//@ assert (\\lbl INT (int)(4)) != 0;     " +

//@ assert (\\lbl SHORT (short)(1)) != 0;     " +

//@ assert (\\lbl LONG (long)(2)) != 0;     " +

//@ assert (\\lbl BYTE (byte)(3)) != 0;     " +

//@ assert (\\lbl FLOAT (float)(5)) != 0;     " +

//@ assert (\\lbl DOUBLE (double)(6)) != 0;     " +

//@ assert (\\lbl CHAR 'a') != 0;     " +

//@ assert (\\lbl BOOLEAN true) ;     " +

//@ assert (\\lbl STRING \"abc\") != null;     " +

//@ ghost \\TYPE c;     " +

//@ set c = \\type(int);     " +

//@ set c = (\\lbl TYP1 c);     " +

//@ set c = \\type(boolean);     " +

//@ set c = (\\lbl TYP2 c);     " +

//@ ghost \\TYPE c;     " +

//@ set c = \\type(java.lang.Object);     " +

//@ set c = (\\lbl TYP1 c);     " +

//@ set c = \\type(Object);     " +

//@ set c = (\\lbl TYP2 c);     " +

//@ set c = \\type(java.lang.String);     " +

//@ set c = (\\lbl TYP3 c);     " +

//@ set c = \\type(String);     " +

//@ set c = (\\lbl TYP4 c);     " +

//@ ghost \\TYPE c;     " +

//@ set c = \\type(java.lang.String[]);     " +

//@ set c = (\\lbl TYP1 c);     " +

//@ set c = \\type(String[]);     " +

//@ set c = (\\lbl TYP2 c);     " +

//@ set c = \\type(java.lang.String[][]);     " +

//@ set c = (\\lbl TYP3 c);     " +

//@ set c = \\type(String[][]);     " +

//@ set c = (\\lbl TYP4 c);     " +

//@ ghost \\TYPE c;     " +

//@ set c = \\type(java.lang.Class<Integer>);     " +

//@ set c = (\\lbl TYP1 c);     " +

//@ ghost boolean bbb = (\\lbl TRUE Class.class == \\erasure(\\type(Class)));     " +

//@ set c = (\\lbl TYP2 c);     " +

//@ ghost \\TYPE c;     " +

//@ set c = \\type(int);     " +

//@ set c = (\\lbl TYP1 c);     " +

//@ set c = \\type(boolean);     " +

//@ set c = (\\lbl TYP2 c);     " +

//@ ghost \\TYPE c;     " +

//@ set c = \\type(java.lang.Object);     " +

//@ set c = (\\lbl TYP1 c);     " +

//@ set c = \\type(Object);     " +

//@ set c = (\\lbl TYP2 c);     " +

//@ set c = \\type(java.lang.String);     " +

//@ set c = (\\lbl TYP3 c);     " +

//@ set c = \\type(String);     " +

//@ set c = (\\lbl TYP4 c);     " +

//@ ghost \\TYPE c;     " +

//@ set c = \\type(java.lang.String[]);     " +

//@ set c = (\\lbl TYP1 c);     " +

//@ set c = \\type(String[]);     " +

//@ set c = (\\lbl TYP2 c);     " +

//@ set c = \\type(java.lang.String[][]);     " +

//@ set c = (\\lbl TYP3 c);     " +

//@ set c = \\type(String[][]);     " +

//@ set c = (\\lbl TYP4 c);     " +

//@ ghost \\TYPE c;     " +

//@ set c = \\type(java.lang.Class<Integer>);     " +

//@ set c = (\\lbl TYP1 c);     " +

//@ ghost boolean c;     " +

//@ set c = o.getClass() <: o.getClass();     " + // Object <: Object  // Class

//@ set c = (\\lbl TYP1 c);     " +

//@ set c = \\typeof(o) <: \\typeof(o);     " +  // Object <: Object // \TYPE

//@ set c = (\\lbl TYP2 c);     " +

//@ set c = \\typeof(o) <: \\typeof(oo);     " + // Object <: String // \TYPE

//@ set c = (\\lbl TYP3 c);     " +

//@ set c = \\typeof(oo) <: \\typeof(o);     " + // String <: Object // \TYPE

//@ set c = (\\lbl TYP4 c);     " +

//@ set c = \\typeof(ob) <: \\typeof(oo);     " + // Boolean <: String // \TYPE

//@ set c = (\\lbl TYP5 c);     " +

//@ ghost boolean c;     " +

//@ set c = s.getClass() <: b.getClass();     " + // String <: Boolean // Class

//@ set c = (\\lbl TYP1 c);     " +

//@ set c = \\typeof(s) <: \\typeof(b);     " +  // String <: Boolean // \TYPE

//@ set c = (\\lbl TYP2 c);     " +

//@ set c = \\type(int) <: \\typeof(o);     " + // int <: Object // \TYPE

//@ set c = (\\lbl TYP3 c);     " +

//@ set c = \\type(int) <: \\type(int);     " + // int <: int  // false

//@ set c = (\\lbl TYP4 c);     " +

//@ set c = \\type(int) <: \\type(boolean);     " + // int <: boolean

//@ set c = (\\lbl TYP5 c);     " +

//@ requires 10/i != 0;     " +

//@ ensures 10/(i-1) == 0;     " +

//@ requires i != 0;     " +

//@ requires 10/i == 10;     " +

//@ ghost public static int i = 0;      //@ public invariant i == 0;      //@ requires i == 1;     static public int m(); }");

//@ ghost static int i = 0;      //@ invariant i == 0;      //@ ensures i == 1;     static int m(); }");

//@ set i = 1;      return 0; }       public static void main(String[] args) { m(); System.out.println(\"END\"); }}"

/*@ model static pure public int mm() { return 5; } */
//@ ghost static public int i = 0;      "

//@ public invariant i == 0;      //@ ensures i == 1;     static public int m(); "

//@ set i = mm();     "

/*@ model public static class AA { static public int mm() { return 5; }} */
//@ ghost public static int i = 0;      "

//@ public invariant i == 0;      "

//@ ensures i == 0;     "

//@ set i = AA.mm();     "

/*@ model public static class AB { static public int mm() { return 5; }} */
//@ ghost public static int i = 0;      "

//@ public invariant i == 0;      "

//@ ensures i == 0;     "

//@ set i = AB.mm();     "

//@ static public invariant i == 0;      "

//@ static public invariant i == 0;      "

//@ public invariant i == 0;    "

//@ public invariant i == 0;"

//@ public invariant i == 0;"

//@ public invariant i == 0;"

//@ public invariant i == 0;"

//@ public initially i == 1;      "

//@ public initially j == 1;      "

//@ public invariant i == j;      "

/*@ assignable j; */
//@ constraint i == \\old(i)+1;      "

//@ invariant i == 0;      "

/*@ private helper */
//@ static model int i;     "

//@ static represents i \\such_that i == j+1;     "

//@ static model int i;      "

//@ static represents i = j+1;      "

//@ debug System.out.println(\"A \" + i);     "

//@ debug System.out.println(\"A \" + i);     "

//@ static ghost int ii;      "

//@ static model int i;      "

//@ static represents i \\such_that i==j+1;      "

//@ static represents i =j+1;      "

//@ debug System.out.println(\"A \" + i);     "

//@ debug System.out.println(\"A \" + i);     "

//@ static ghost int ii;      "

//@ static model int i;      "

//@ static represents i = j+1;      "

//@ static represents i = j;      "

//@ debug System.out.println(\"A \" + i);     "

//@ debug System.out.println(\"A \" + i);     "

//@  represents i = j+1;      "

//@ debug System.out.println(\"A \" + a.i);     "

//@ debug System.out.println(\"B \" + b.i);     "

//@ debug System.out.println(\"B \" + b.i);     "

//@ model  int i; 

//@  represents super.i = j+1;      "

//@ debug System.out.println(\"A \" + a.i);     "

//@ debug System.out.println(\"B \" + b.i);     "

//@ debug System.out.println(\"B \" + b.i);     "

//@ model protected int i; }    "

//@  model int i; represents i = j;     "

//@ debug System.out.println(\"A \" + a.i);     "

//@ debug System.out.println(\"B \" + b.i);     "

//@ model  int i; represents i = PA.j+1;     

//@ debug System.out.println(\"A \" + a.i);     "

//@ debug System.out.println(\"B \" + b.i);     "

//@ debug System.out.println(\"B \" + b.i);     "

//@ model  int i; 

//@ static model int i;     "

//@ debug System.out.println(\"A \" + i);     "

//@ ghost boolean n = (\\forall int i; 0<=i && i<=5; i >= 2);      "

//@ ghost boolean nn = (\\exists int i; 0<=i && i<=5; i >= 2);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost boolean n = (\\forall int i; 0<=i && i<=5; i >= 0);      "

//@ ghost boolean nn = (\\exists int i; 0<=i && i<=5; i >= 6);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost boolean n = (\\forall int i; ; i >= 0);      "

//@ ghost boolean nn = (\\exists int i; i == 4; i >= 6);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost boolean n = (\\forall int i; 0<i && i<=5; (\\exists int j; 0<=j && j < 5; j<i));      "

//@ ghost boolean nn = (\\forall int i; 0<=i && i<=5; (\\exists int j; 0<=j && j < 5; j<i));      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost long n1 = (\    um_of int i; 0 <= i && i <= 5; true);      "

//@ ghost long n2 = (\    um_of int i; 0 < i && i < 5; true);      "

//@ debug System.out.println(\"A \" + n1 + \" \" + n2);     "

//@ ghost long n = (\    um_of int i; 0 <= i && i < 5; i >= 2);      "

//@ ghost long nn = (\    um_of int i; 0 <= i && i < 5; false);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost int n = (\    um_of int i; 0 <= i && i < 5; i >= m);      "

//@ ghost int nn = (\    um_of int i; 0 <= i && i < 5; m > 0);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn );     "

//@ ensures (\    um_of int i; 0 <= i && i < 5; i >= m) == 3;    "

//@ ensures (\    um_of int i; 0 <= i && i < 5; i >= m) == 4;    "

//@ ghost long n1 = (\    um_of int i,j; 0 <= i && i <= 5 && 0 <= j && j < i; true);      "

//@ debug System.out.println(\"A \" + n1);     "

//@ ghost int n = (\\sum int i; 0<i && i<=5; i+1);      "

//@ ghost int nn = (\\sum int i; 0<i && i<0; i+1);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost int n = (\\product int i; 0<i && i<=5; i+1);      "

//@ ghost int nn = (\\product int i; 0<i && i<0; i+1);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost int n = (\\max int i; 0<=i && i<=5 && (i%2)==0; i+1);      "

//@ ghost int nn = (\\max int i; 0<i && i<0; i+1);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost int n = (\\max int i; 0<=i && i<=5 && (i%2)==0; inc(i));      "

//@ ghost int nn = (\\max int i; -9<=i && i<=5 ; Math.abs(i));      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost short n1 = (\\max int i; 0<=i && i<=5; (short)(i+10));      "

//@ ghost short n2 = (\\min int i; 0<=i && i<=5; (short)(i+10));      "

//@ debug System.out.println(\"A \" + n1 + \" \" + n2);     "

//@ ghost short n1 = (\\max short i; 2<=i && i<=5; i);      "

//@ ghost short n2 = (\\min short i; 2<=i && i<=5; i);      "

//@ debug System.out.println(\"A \" + n1 + \" \" + n2);     "

//@ ghost byte n1 = (\\max int i; 2<=i && i<=5; (byte)i);      "

//@ ghost byte n2 = (\\min int i; 2<=i && i<=5; (byte)i);      "

//@ debug System.out.println(\"A \" + n1 + \" \" + n2);     "

//@ ghost byte n1 = (\\max byte i; 2<=i && i<=5; i);      "

//@ ghost byte n2 = (\\min byte i; 2<=i && i<=5; i);      "

//@ debug System.out.println(\"A \" + n1 + \" \" + n2);     "

//@ ghost long n1 = (\\max int i; 0<=i && i<=5; (i+10L));      "

//@ ghost long n2 = (\\min int i; 0<=i && i<=5; (i+10L));      "

//@ debug System.out.println(\"A \" + n1 + \" \" + n2);     "

//@ ghost long n1 = (\\max long i; 0<=i && i<=5; (i+10L));      "

//@ ghost long n2 = (\\min long i; 0<=i && i<=5; (i+10L));      "

//@ debug System.out.println(\"A \" + n1 + \" \" + n2);     "

//@ ghost double n1 = (\\max int i; 0<=i && i<=5; (double)(i+10.5));      "

//@ ghost double n2 = (\\min int i; 0<=i && i<=5; (double)(i+10.5));      "

//@ debug System.out.println(\"A \" + n1 + \" \" + n2);     "

//@ ghost float n1 = (\\max int i; 0<=i && i<=5; (float)(i+10.5));      "

//@ ghost float n2 = (\\min int i; 0<=i && i<=5; (float)(i+10.5));      "

//@ debug System.out.println(\"A \" + n1 + \" \" + n2);     "

//@ ghost char n1 = (\\max int i; 'a'<i && i<='q'; (char)i);      "

//@ ghost char n2 = (\\min int i; 'a'<i && i<='q'; (char)i);      "

//@ debug System.out.println(\"A \" + n1 + \" \" + n2);     "

//@ ghost char n1 = (\\max char i; 'a'<i && i<='q'; i);      "

//@ ghost char n2 = (\\min char i; 'a'<i && i<='q'; i);      "

//@ debug System.out.println(\"A \" + n1 + \" \" + n2);     "

//@ ghost int n = (\\min int i; 0<=i && i<=5 && (i%2)==1; i+1);      "

//@ ghost int nn = (\\min int i; 0<i && i<0; i+1);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost long n = (\\max int i; 0<=i && i<=5 && (i%2)==0; (long)i+1);      "

//@ ghost long nn = (\\max int i; 0<i && i<0; i+1);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost long n = (\\min int i; 0<=i && i<=5 && (i%2)==1; (long)i+1);      "

//@ ghost long nn = (\\min int i; 0<i && i<0; i+1);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost double n = (\\max int i; 0<=i && i<=5 && (i%2)==0; (double)i+1);      "

//@ ghost double nn = (\\max int i; 0<i && i<0; i+1);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost double n = (\\min int i; 0<=i && i<=5 && (i%2)==1; (double)i+1);      "

//@ ghost double nn = (\\min int i; 0<i && i<0; (double)i+1);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost int n = (\\sum boolean i; bb; (i?2:5));      "

//@ ghost int nn = (\\sum boolean i; !i; (i?2:5));      "

//@ ghost int nnn = (\\sum boolean i; i; (i?2:5));      "

//@ ghost int nnnn = (\\sum boolean i; false; (i?2:5));      "

//@ debug System.out.println(\"A \" + n + \" \" + nn + \" \" + nnn + \" \" + nnnn);     "

//@ ghost int n = (\    um_of Object o; list.contains(o); true);      "

//@ ghost int nn = (\    um_of Object o; list.contains(o) && true; true);      "

//@ ghost int nnn = (\    um_of Object o; list.contains(o) && o == oo; true);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn + \" \" + nnn);     "

//@ model int i; );

//@ debug System.out.println(\"A \" + a.i);     "

//@ debug System.out.println(\"B \" + b.i);     "

//@ debug System.out.println(\"B \" + b.i);     "

//@ model int i; );

//@ debug System.out.println(\"A \" + a.i);     "

//@ debug System.out.println(\"B \" + b.i);     "

//@ debug System.out.println(\"B \" + b.i);     "

/*@non_null*/
/*@ non_null*/
//@ model  int i; represents i = 0; 

/*@non_null*/
/*@nullable*/
/*@nullable*/
//@ ghost int k; set k = A.i;    "

//@ set k = a.i;    "

//@ set k = a.b.i;    "

/*@nullable_by_default*/
/*@non_null*/
 ghost static Object oooo = null;    "

/*@ non_null*/
//@ ghost non_null String loc = null;     "

/*@nullable*/
//@ nullable ghost static Object oooo = null;    "

/*@ nullable*/
//@ ghost String loc = null;     "

/*@nullable*/
//@ static invariant o != ooo;    "

//@ nullable ghost static Object oooo = null;    "

/*@ nullable*/
//@ ghost String loc = null;     "

//@ axiom true;    "

//@ public invariant \\duration(true) == 0;    "

//@ public model long i;    "

//@ public represents i =  \\duration(true);    "

//@ public constraint \\duration(true) == 0;    "

//@ public initially \\duration(true) == 0;    "

//@ hence_by true;     "

//@ assert \\duration(true) == 0;    "

//@ assume \\duration(true) == 0;    "

//@ ghost long k = \\duration(true);    "

//@ set k = \\duration(true);    "

//@ debug k = \\duration(true);    "

//@ ghost long z = \\duration(true);    "

//@ ghost long[] zz = { \\duration(true) } ;    "

/*@ requires \\duration(true) == 0;*/
//@ ensures \\duration(true) == 0;    "

//@ signals (Exception ex) \\duration(true) == 0;    "

//@ signals_only RuntimeException;    "

//@ diverges \\duration(true) == 0;    " // line 23

//@ duration  \\duration(true);    "

//@ working_space \\duration(true);    "

//@   requires \\duration(true) == 0;    "

//@   ensures true;    "

//@ also    "

//@   requires \\duration(true) == 0;    "

//@   signals (Exception ex) true;    "

//@ also    "

//@   requires \\duration(true) == 0;    "

//@   signals_only RuntimeException;    "

//@ also    "

//@   ensures true;    "

//@public  invariant i == 1;     "

//@ public invariant i == 2;     "

//@ public invariant i == 3;     "

//@ public invariant i == 2;     "

//@ public invariant i == 3;     "

//@public  invariant i == 1;     "

//@ static public invariant i == 2;     "

//@ static public invariant i == 3;     "

//@ static public invariant i == 1;     "

//@ also ensures i == 2;     "

//@ also ensures i == 3;     "

//@ ensures false;     "

//@ also ensures i == 2;     "

//@ also private behavior ensures i == 2;     "

//@ also ensures i == 3;     "

//@ ensures false;     "

//@ also ensures i == 2;     "

//@ requires kc == 3; ensures i == 3;     "

//@ also requires kb == 2; ensures i == 2;     "

//@ also requires ka==1; ensures i == 1;     "

//@ requires i > 0;    "

//@ modifies j;    "

//@ ensures j == i;    "

//@ ensures j == 1;    "

//@ requires i > 0;    "

//@ modifies j;    "

//@ ensures j == i;    "

//@ ensures j == 1;    "

//@ requires i > 0;    "

//@ modifies k;    "

//@ ensures j == i;    "

//@ ensures j == 1;    "

/*@ assert i == 0; */
/*@ assert i == -1; */
//@ assert false;      } " +

//@ assert false;            } " +

//@ assert false;      } " +

//@ ensures \\result == i;    "

//@ ensures \\result == i+1;    "

//@ loop_invariant sum >= 0;     "

//@ assert sum >= 0;     "

//@ loop_invariant sum >= 0;     "

//@ assert sum > 0;     "

//@ loop_invariant sum >= 0;     "

/*@ assume o >= 0; */
//@ assert sum >= 0;     "

//@ loop_invariant sum >= 0;     "

/*@ assume o >= 0; */
//@ assert sum > 0;     "

//@ old int kk = k; requires i > kk; assignable k; ensures k == i+1; ensures kk == 5;    "

//@ also    "

//@ old int kkk = k+1; requires i < kkk; assignable k; ensures k == i-1; ensures kkk == 7;    "

//@ old int kk = k; requires i > kk; assignable k; ensures k == i+1; ensures kk == 5;    "

//@ also    " // Purposely duplicating the name of the old variable

//@ old int kk = k+1; requires i < kk; assignable k; ensures k == i-1; ensures kk == 7;    "

//@ old int kk = k;    "

//@ {| requires i > kk; assignable k; ensures k == i+1; ensures kk == 5;    "

//@ also    "

//@    requires i < kk; assignable k; ensures k == i-1; ensures kk == 6;    "

//@ |}    "

//@ public normal_behavior     "

//@   requires true;     "

//@ show i, j+1;    "

//@ show k;    "

//@ assert k > 0;    "

//@ show m,k;    "

//@ assert m > 0;    "

//@ ghost int i = 0;      //@ set i = 1;      //@ set System.out.println(i);      System.out.println(\"END\"); }}"

//@ assert false;      System.out.println(\"END\"); }}"

//@ assert false: \"ABC\";      System.out.println(\"END\"); }}"

//@ assert false: (int)args.length;      System.out.println(\"END\"); }}"

//@ assert true: args.length;      System.out.println(\"END\"); }}"

//@ assume false;      System.out.println(\"END\"); }}"

//@ assume false: \"DEF\";      System.out.println(\"END\"); }}"

//@ unreachable;      System.out.println(\"END\"); }}"

/*@ requires i == 0; */
/*@ requires i != 0; */
/*@ requires i > 0; */
/*@ requires i < 0; */
//@ nowarn Precondition;    " +

/*@ requires i != 0; */
//@ nowarn Precondition;    " +

/*@ requires true; */
/*@non_null*/
/*@non_null*/
/*@ requires true; */
/*@non_null*/
/*@non_null*/
/*@nullable*/
/*@ ensures k == i; */
/*@ ensures k == 0; */
/*@ nowarn Postcondition;*/
/*@ ensures k == 0; */
/*@ nowarn Postcondition;*/
/*@ requires true;     also     requires false;     ensures k == 0; */
/*@ requires true;     ensures true;     also     requires false;     ensures k == 0; */
/*@ requires true;     " +
                "     ensures k != i;     " +
                "     also     " +
                "     requires true;     " +
                "     ensures k == 0; */
/*@   requires true;     "
                +"        ensures k != i;     "
                +"      also     "
                +"        requires true;     "
                +"        ensures k == 0; */
/*@ requires true;     "
                +"     signals (java.io.FileNotFoundException e) e == null; */
/*@ requires true;     signals (java.io.FileNotFoundException e) e == null; */
/*@ requires true;     signals_only \    othing; */
/*@ requires true;     signals_only java.io.FileNotFoundException; */
/*@ requires true;     signals_only java.io.FileNotFoundException; */
/*@ requires true;     */
/*@ requires true;     */
/*@ ensures \\result == 4; */
/*@ ensures \\result == 4; */
/*@ ensures (\\lbl ENS \\result == 1); */
/*@ ensures (\\lbl ENS (\\lbl RES \\result) == 1); */
/*@ ensures (\\lbl ENS \\old(k)) == k; */
//@ assert (\\lbl AST \\old(k)) == 0;      k=i; //@ assert (\\lbl AST2 \\old(k)) == 0;     //@ assert (\\lbl AST3 k) == 0;      return i; } " +

//@ ghost int p = (\\lbl AST \\old(k));     "

//@ ghost int kk =  (\\lbl AST2 \\old(k));     "

//@ set kk = (\\lbl AST3 k);      "

//@ set kk = (\\lbl AST4 \\old(k,lab));      "

//@ assert (i==0) <==> (* informal *);      return i; } " +

//@ ghost nullable java.lang.Class t; ghost nullable \\TYPE tt;     "

//@ set tt = (\\lbl A \\elemtype(\\typeof(o)));    "

//@ set tt = (\\lbl B \\elemtype(\\typeof(oo)));    "

//@ set tt = (\\lbl C \\elemtype(\\typeof(o3)));    "

//@ set t = (\\lbl D \\elemtype(java.lang.Class.class));    "

//@ set t = (\\lbl E \\elemtype(java.lang.Boolean[].class));    "

//@ requires JML.informal(\"asd\") && (\\lbl CLS \\erasure(\\typeof(i))) == Object.class;     " +

/*@nullable*/
//@ requires (\\lbl CLS \\typeof(i)) == \\type(Object);     " +

/*@nullable*/
//@ requires (\\lbl CLS \\typeof(i)) == \\type(Object);     " +

//@ assert (\\lbl AST \\typeof(true)) == \\typeof(true);     " +

//@ assert (\\lbl AST2 \\typeof((short)0)) != \\typeof(true);     " +

//@ assert (\\lbl AST3 \\typeof((long)0)) != \\typeof(true);     " +

//@ assert (\\lbl AST4 \\typeof((byte)0)) != \\typeof(true);     " +

//@ assert (\\lbl AST5 \\typeof('c')) != \\typeof(true);     " +

//@ assert (\\lbl AST6 \\typeof(\"c\")) != \\typeof(true);     " +

//@ assert (\\lbl AST7 \\typeof((float)0)) != \\typeof(true);     " +

//@ assert (\\lbl AST8 \\typeof((double)0)) != \\typeof(true);     " +

//@ assert (\\lbl AST9 \\typeof(5/0)) == \\typeof(5/0);     " +

//@ assert (\\lbl AST10 \\typeof(5.0/0.0)) != \\typeof(5/0);     " +

//@ requires (\\lbl CLS \\typeof(i)) == ( \\type(LinkedList<Integer>) );     " +

/*@nullable*/
//@ requires (\\lbl CLS \\typeof(i)) == ( \\type(LinkedList<Integer>) );     " +

/*@nullable*/
//@ requires (\\lbl CLS \\typeof(i)) != ( \\type(LinkedList<Integer>) );     " +

/*@nullable*/
//@ assert \    onnullelements(s2,s2null);     " +

//@ assert \    onnullelements(s2,s2);     " +

//@ assert \    onnullelements(s2null,new Integer[]{5/z});     " +

//@ assert (\\lbl ELEM \    onnullelements(o));     " +

/*@nullable*/
//@ assert (\\lbl ELEM \    onnullelements((\\lbl O o)));     " +

/*@nullable*/
//@ assert (\\lbl STRING \"def\") != null;     " +

//@ assert (\\lbl SHORT (short)(i)) != 0;     " +

//@ assert (\\lbl LONG (long)(i)) != 0;     " +

//@ assert (\\lbl BYTE (byte)(i)) != 0;     " +

//@ assert (\\lbl INT (int)(i)) != 0;     " +

//@ assert (\\lbl FLOAT (float)(i)) != 0;     " +

//@ assert (\\lbl DOUBLE (double)(i)) != 0;     " +

//@ assert (\\lbl CHAR n.charAt(0)) != 0;     " +

//@ assert (\\lbl BOOLEAN (i == 0)) ;     " +

//@ assert (\\lbl OBJECT o) == null;     " +

//@ assert (\\lbl STRING \"abc\") != null;     " +

/*@nullable*/
//@ assert (\\lbl OBJECT null) == null;     " +

//@ assert (\\lbl INT (int)(4)) != 0;     " +

//@ assert (\\lbl SHORT (short)(1)) != 0;     " +

//@ assert (\\lbl LONG (long)(2)) != 0;     " +

//@ assert (\\lbl BYTE (byte)(3)) != 0;     " +

//@ assert (\\lbl FLOAT (float)(5)) != 0;     " +

//@ assert (\\lbl DOUBLE (double)(6)) != 0;     " +

//@ assert (\\lbl CHAR 'a') != 0;     " +

//@ assert (\\lbl BOOLEAN true) ;     " +

//@ assert (\\lbl STRING \"abc\") != null;     " +

//@ ghost \\TYPE c;     " +

//@ set c = \\type(int);     " +

//@ set c = (\\lbl TYP1 c);     " +

//@ set c = \\type(boolean);     " +

//@ set c = (\\lbl TYP2 c);     " +

//@ ghost \\TYPE c;     " +

//@ set c = \\type(java.lang.Object);     " +

//@ set c = (\\lbl TYP1 c);     " +

//@ set c = \\type(Object);     " +

//@ set c = (\\lbl TYP2 c);     " +

//@ set c = \\type(java.lang.String);     " +

//@ set c = (\\lbl TYP3 c);     " +

//@ set c = \\type(String);     " +

//@ set c = (\\lbl TYP4 c);     " +

//@ ghost \\TYPE c;     " +

//@ set c = \\type(java.lang.String[]);     " +

//@ set c = (\\lbl TYP1 c);     " +

//@ set c = \\type(String[]);     " +

//@ set c = (\\lbl TYP2 c);     " +

//@ set c = \\type(java.lang.String[][]);     " +

//@ set c = (\\lbl TYP3 c);     " +

//@ set c = \\type(String[][]);     " +

//@ set c = (\\lbl TYP4 c);     " +

//@ ghost \\TYPE c;     " +

//@ set c = \\type(java.lang.Class<Integer>);     " +

//@ set c = (\\lbl TYP1 c);     " +

//@ ghost boolean bbb = (\\lbl TRUE Class.class == \\erasure(\\type(Class)));     " +

//@ set c = (\\lbl TYP2 c);     " +

//@ ghost \\TYPE c;     " +

//@ set c = \\type(int);     " +

//@ set c = (\\lbl TYP1 c);     " +

//@ set c = \\type(boolean);     " +

//@ set c = (\\lbl TYP2 c);     " +

//@ ghost \\TYPE c;     " +

//@ set c = \\type(java.lang.Object);     " +

//@ set c = (\\lbl TYP1 c);     " +

//@ set c = \\type(Object);     " +

//@ set c = (\\lbl TYP2 c);     " +

//@ set c = \\type(java.lang.String);     " +

//@ set c = (\\lbl TYP3 c);     " +

//@ set c = \\type(String);     " +

//@ set c = (\\lbl TYP4 c);     " +

//@ ghost \\TYPE c;     " +

//@ set c = \\type(java.lang.String[]);     " +

//@ set c = (\\lbl TYP1 c);     " +

//@ set c = \\type(String[]);     " +

//@ set c = (\\lbl TYP2 c);     " +

//@ set c = \\type(java.lang.String[][]);     " +

//@ set c = (\\lbl TYP3 c);     " +

//@ set c = \\type(String[][]);     " +

//@ set c = (\\lbl TYP4 c);     " +

//@ ghost \\TYPE c;     " +

//@ set c = \\type(java.lang.Class<Integer>);     " +

//@ set c = (\\lbl TYP1 c);     " +

//@ ghost boolean c;     " +

//@ set c = o.getClass() <: o.getClass();     " + // Object <: Object  // Class

//@ set c = (\\lbl TYP1 c);     " +

//@ set c = \\typeof(o) <: \\typeof(o);     " +  // Object <: Object // \TYPE

//@ set c = (\\lbl TYP2 c);     " +

//@ set c = \\typeof(o) <: \\typeof(oo);     " + // Object <: String // \TYPE

//@ set c = (\\lbl TYP3 c);     " +

//@ set c = \\typeof(oo) <: \\typeof(o);     " + // String <: Object // \TYPE

//@ set c = (\\lbl TYP4 c);     " +

//@ set c = \\typeof(ob) <: \\typeof(oo);     " + // Boolean <: String // \TYPE

//@ set c = (\\lbl TYP5 c);     " +

//@ ghost boolean c;     " +

//@ set c = s.getClass() <: b.getClass();     " + // String <: Boolean // Class

//@ set c = (\\lbl TYP1 c);     " +

//@ set c = \\typeof(s) <: \\typeof(b);     " +  // String <: Boolean // \TYPE

//@ set c = (\\lbl TYP2 c);     " +

//@ set c = \\type(int) <: \\typeof(o);     " + // int <: Object // \TYPE

//@ set c = (\\lbl TYP3 c);     " +

//@ set c = \\type(int) <: \\type(int);     " + // int <: int  // false

//@ set c = (\\lbl TYP4 c);     " +

//@ set c = \\type(int) <: \\type(boolean);     " + // int <: boolean

//@ set c = (\\lbl TYP5 c);     " +

//@ requires 10/i != 0;     " +

//@ ensures 10/(i-1) == 0;     " +

//@ requires i != 0;     " +

//@ requires 10/i == 10;     " +

//@ ghost public static int i = 0;      //@ public invariant i == 0;      //@ requires i == 1;     static public int m(); }");

//@ ghost static int i = 0;      //@ invariant i == 0;      //@ ensures i == 1;     static int m(); }");

//@ set i = 1;      return 0; }       public static void main(String[] args) { m(); System.out.println(\"END\"); }}"

/*@ model static pure public int mm() { return 5; } */
//@ ghost static public int i = 0;      "

//@ public invariant i == 0;      //@ ensures i == 1;     static public int m(); "

//@ set i = mm();     "

/*@ model public static class AA { static public int mm() { return 5; }} */
//@ ghost public static int i = 0;      "

//@ public invariant i == 0;      "

//@ ensures i == 0;     "

//@ set i = AA.mm();     "

/*@ model public static class AB { static public int mm() { return 5; }} */
//@ ghost public static int i = 0;      "

//@ public invariant i == 0;      "

//@ ensures i == 0;     "

//@ set i = AB.mm();     "

//@ static public invariant i == 0;      "

//@ static public invariant i == 0;      "

//@ public invariant i == 0;    "

//@ public invariant i == 0;"

//@ public invariant i == 0;"

//@ public invariant i == 0;"

//@ public invariant i == 0;"

//@ public initially i == 1;      "

//@ public initially j == 1;      "

//@ public invariant i == j;      "

/*@ assignable j; */
//@ constraint i == \\old(i)+1;      "

//@ invariant i == 0;      "

/*@ private helper */
//@ static model int i;     "

//@ static represents i \\such_that i == j+1;     "

//@ static model int i;      "

//@ static represents i = j+1;      "

//@ debug System.out.println(\"A \" + i);     "

//@ debug System.out.println(\"A \" + i);     "

//@ static ghost int ii;      "

//@ static model int i;      "

//@ static represents i \\such_that i==j+1;      "

//@ static represents i =j+1;      "

//@ debug System.out.println(\"A \" + i);     "

//@ debug System.out.println(\"A \" + i);     "

//@ static ghost int ii;      "

//@ static model int i;      "

//@ static represents i = j+1;      "

//@ static represents i = j;      "

//@ debug System.out.println(\"A \" + i);     "

//@ debug System.out.println(\"A \" + i);     "

//@  represents i = j+1;      "

//@ debug System.out.println(\"A \" + a.i);     "

//@ debug System.out.println(\"B \" + b.i);     "

//@ debug System.out.println(\"B \" + b.i);     "

//@ model  int i; 

//@  represents super.i = j+1;      "

//@ debug System.out.println(\"A \" + a.i);     "

//@ debug System.out.println(\"B \" + b.i);     "

//@ debug System.out.println(\"B \" + b.i);     "

//@ model protected int i; }    "

//@  model int i; represents i = j;     "

//@ debug System.out.println(\"A \" + a.i);     "

//@ debug System.out.println(\"B \" + b.i);     "

//@ model  int i; represents i = PA.j+1;     

//@ debug System.out.println(\"A \" + a.i);     "

//@ debug System.out.println(\"B \" + b.i);     "

//@ debug System.out.println(\"B \" + b.i);     "

//@ model  int i; 

//@ static model int i;     "

//@ debug System.out.println(\"A \" + i);     "

//@ ghost boolean n = (\\forall int i; 0<=i && i<=5; i >= 2);      "

//@ ghost boolean nn = (\\exists int i; 0<=i && i<=5; i >= 2);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost boolean n = (\\forall int i; 0<=i && i<=5; i >= 0);      "

//@ ghost boolean nn = (\\exists int i; 0<=i && i<=5; i >= 6);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost boolean n = (\\forall int i; ; i >= 0);      "

//@ ghost boolean nn = (\\exists int i; i == 4; i >= 6);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost boolean n = (\\forall int i; 0<i && i<=5; (\\exists int j; 0<=j && j < 5; j<i));      "

//@ ghost boolean nn = (\\forall int i; 0<=i && i<=5; (\\exists int j; 0<=j && j < 5; j<i));      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost long n1 = (\    um_of int i; 0 <= i && i <= 5; true);      "

//@ ghost long n2 = (\    um_of int i; 0 < i && i < 5; true);      "

//@ debug System.out.println(\"A \" + n1 + \" \" + n2);     "

//@ ghost long n = (\    um_of int i; 0 <= i && i < 5; i >= 2);      "

//@ ghost long nn = (\    um_of int i; 0 <= i && i < 5; false);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost int n = (\    um_of int i; 0 <= i && i < 5; i >= m);      "

//@ ghost int nn = (\    um_of int i; 0 <= i && i < 5; m > 0);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn );     "

//@ ensures (\    um_of int i; 0 <= i && i < 5; i >= m) == 3;    "

//@ ensures (\    um_of int i; 0 <= i && i < 5; i >= m) == 4;    "

//@ ghost long n1 = (\    um_of int i,j; 0 <= i && i <= 5 && 0 <= j && j < i; true);      "

//@ debug System.out.println(\"A \" + n1);     "

//@ ghost int n = (\\sum int i; 0<i && i<=5; i+1);      "

//@ ghost int nn = (\\sum int i; 0<i && i<0; i+1);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost int n = (\\product int i; 0<i && i<=5; i+1);      "

//@ ghost int nn = (\\product int i; 0<i && i<0; i+1);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost int n = (\\max int i; 0<=i && i<=5 && (i%2)==0; i+1);      "

//@ ghost int nn = (\\max int i; 0<i && i<0; i+1);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost int n = (\\max int i; 0<=i && i<=5 && (i%2)==0; inc(i));      "

//@ ghost int nn = (\\max int i; -9<=i && i<=5 ; Math.abs(i));      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost short n1 = (\\max int i; 0<=i && i<=5; (short)(i+10));      "

//@ ghost short n2 = (\\min int i; 0<=i && i<=5; (short)(i+10));      "

//@ debug System.out.println(\"A \" + n1 + \" \" + n2);     "

//@ ghost short n1 = (\\max short i; 2<=i && i<=5; i);      "

//@ ghost short n2 = (\\min short i; 2<=i && i<=5; i);      "

//@ debug System.out.println(\"A \" + n1 + \" \" + n2);     "

//@ ghost byte n1 = (\\max int i; 2<=i && i<=5; (byte)i);      "

//@ ghost byte n2 = (\\min int i; 2<=i && i<=5; (byte)i);      "

//@ debug System.out.println(\"A \" + n1 + \" \" + n2);     "

//@ ghost byte n1 = (\\max byte i; 2<=i && i<=5; i);      "

//@ ghost byte n2 = (\\min byte i; 2<=i && i<=5; i);      "

//@ debug System.out.println(\"A \" + n1 + \" \" + n2);     "

//@ ghost long n1 = (\\max int i; 0<=i && i<=5; (i+10L));      "

//@ ghost long n2 = (\\min int i; 0<=i && i<=5; (i+10L));      "

//@ debug System.out.println(\"A \" + n1 + \" \" + n2);     "

//@ ghost long n1 = (\\max long i; 0<=i && i<=5; (i+10L));      "

//@ ghost long n2 = (\\min long i; 0<=i && i<=5; (i+10L));      "

//@ debug System.out.println(\"A \" + n1 + \" \" + n2);     "

//@ ghost double n1 = (\\max int i; 0<=i && i<=5; (double)(i+10.5));      "

//@ ghost double n2 = (\\min int i; 0<=i && i<=5; (double)(i+10.5));      "

//@ debug System.out.println(\"A \" + n1 + \" \" + n2);     "

//@ ghost float n1 = (\\max int i; 0<=i && i<=5; (float)(i+10.5));      "

//@ ghost float n2 = (\\min int i; 0<=i && i<=5; (float)(i+10.5));      "

//@ debug System.out.println(\"A \" + n1 + \" \" + n2);     "

//@ ghost char n1 = (\\max int i; 'a'<i && i<='q'; (char)i);      "

//@ ghost char n2 = (\\min int i; 'a'<i && i<='q'; (char)i);      "

//@ debug System.out.println(\"A \" + n1 + \" \" + n2);     "

//@ ghost char n1 = (\\max char i; 'a'<i && i<='q'; i);      "

//@ ghost char n2 = (\\min char i; 'a'<i && i<='q'; i);      "

//@ debug System.out.println(\"A \" + n1 + \" \" + n2);     "

//@ ghost int n = (\\min int i; 0<=i && i<=5 && (i%2)==1; i+1);      "

//@ ghost int nn = (\\min int i; 0<i && i<0; i+1);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost long n = (\\max int i; 0<=i && i<=5 && (i%2)==0; (long)i+1);      "

//@ ghost long nn = (\\max int i; 0<i && i<0; i+1);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost long n = (\\min int i; 0<=i && i<=5 && (i%2)==1; (long)i+1);      "

//@ ghost long nn = (\\min int i; 0<i && i<0; i+1);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost double n = (\\max int i; 0<=i && i<=5 && (i%2)==0; (double)i+1);      "

//@ ghost double nn = (\\max int i; 0<i && i<0; i+1);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost double n = (\\min int i; 0<=i && i<=5 && (i%2)==1; (double)i+1);      "

//@ ghost double nn = (\\min int i; 0<i && i<0; (double)i+1);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost int n = (\\sum boolean i; bb; (i?2:5));      "

//@ ghost int nn = (\\sum boolean i; !i; (i?2:5));      "

//@ ghost int nnn = (\\sum boolean i; i; (i?2:5));      "

//@ ghost int nnnn = (\\sum boolean i; false; (i?2:5));      "

//@ debug System.out.println(\"A \" + n + \" \" + nn + \" \" + nnn + \" \" + nnnn);     "

//@ ghost int n = (\    um_of Object o; list.contains(o); true);      "

//@ ghost int nn = (\    um_of Object o; list.contains(o) && true; true);      "

//@ ghost int nnn = (\    um_of Object o; list.contains(o) && o == oo; true);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn + \" \" + nnn);     "

//@ model int i; );

//@ debug System.out.println(\"A \" + a.i);     "

//@ debug System.out.println(\"B \" + b.i);     "

//@ debug System.out.println(\"B \" + b.i);     "

//@ model int i; );

//@ debug System.out.println(\"A \" + a.i);     "

//@ debug System.out.println(\"B \" + b.i);     "

//@ debug System.out.println(\"B \" + b.i);     "

/*@non_null*/
/*@ non_null*/
//@ model  int i; represents i = 0; 

/*@non_null*/
/*@nullable*/
/*@nullable*/
//@ ghost int k; set k = A.i;    "

//@ set k = a.i;    "

//@ set k = a.b.i;    "

/*@nullable_by_default*/
/*@non_null*/
 ghost static Object oooo = null;    "

/*@ non_null*/
//@ ghost non_null String loc = null;     "

/*@nullable*/
//@ nullable ghost static Object oooo = null;    "

/*@ nullable*/
//@ ghost String loc = null;     "

/*@nullable*/
//@ static invariant o != ooo;    "

//@ nullable ghost static Object oooo = null;    "

/*@ nullable*/
//@ ghost String loc = null;     "

//@ axiom true;    "

//@ public invariant \\duration(true) == 0;    "

//@ public model long i;    "

//@ public represents i =  \\duration(true);    "

//@ public constraint \\duration(true) == 0;    "

//@ public initially \\duration(true) == 0;    "

//@ hence_by true;     "

//@ assert \\duration(true) == 0;    "

//@ assume \\duration(true) == 0;    "

//@ ghost long k = \\duration(true);    "

//@ set k = \\duration(true);    "

//@ debug k = \\duration(true);    "

//@ ghost long z = \\duration(true);    "

//@ ghost long[] zz = { \\duration(true) } ;    "

/*@ requires \\duration(true) == 0;*/
//@ ensures \\duration(true) == 0;    "

//@ signals (Exception ex) \\duration(true) == 0;    "

//@ signals_only RuntimeException;    "

//@ diverges \\duration(true) == 0;    " // line 23

//@ duration  \\duration(true);    "

//@ working_space \\duration(true);    "

//@   requires \\duration(true) == 0;    "

//@   ensures true;    "

//@ also    "

//@   requires \\duration(true) == 0;    "

//@   signals (Exception ex) true;    "

//@ also    "

//@   requires \\duration(true) == 0;    "

//@   signals_only RuntimeException;    "

//@ also    "

//@   ensures true;    "

//@public  invariant i == 1;     "

//@ public invariant i == 2;     "

//@ public invariant i == 3;     "

//@ public invariant i == 2;     "

//@ public invariant i == 3;     "

//@public  invariant i == 1;     "

//@ static public invariant i == 2;     "

//@ static public invariant i == 3;     "

//@ static public invariant i == 1;     "

//@ also ensures i == 2;     "

//@ also ensures i == 3;     "

//@ ensures false;     "

//@ also ensures i == 2;     "

//@ also private behavior ensures i == 2;     "

//@ also ensures i == 3;     "

//@ ensures false;     "

//@ also ensures i == 2;     "

//@ requires kc == 3; ensures i == 3;     "

//@ also requires kb == 2; ensures i == 2;     "

//@ also requires ka==1; ensures i == 1;     "

//@ requires i > 0;    "

//@ modifies j;    "

//@ ensures j == i;    "

//@ ensures j == 1;    "

//@ requires i > 0;    "

//@ modifies j;    "

//@ ensures j == i;    "

//@ ensures j == 1;    "

//@ requires i > 0;    "

//@ modifies k;    "

//@ ensures j == i;    "

//@ ensures j == 1;    "

/*@ assert i == 0; */
/*@ assert i == -1; */
//@ assert false;      } " +

//@ assert false;            } " +

//@ assert false;      } " +

//@ ensures \\result == i;    "

//@ ensures \\result == i+1;    "

//@ loop_invariant sum >= 0;     "

//@ assert sum >= 0;     "

//@ loop_invariant sum >= 0;     "

//@ assert sum > 0;     "

//@ loop_invariant sum >= 0;     "

/*@ assume o >= 0; */
//@ assert sum >= 0;     "

//@ loop_invariant sum >= 0;     "

/*@ assume o >= 0; */
//@ assert sum > 0;     "

//@ old int kk = k; requires i > kk; assignable k; ensures k == i+1; ensures kk == 5;    "

//@ also    "

//@ old int kkk = k+1; requires i < kkk; assignable k; ensures k == i-1; ensures kkk == 7;    "

//@ old int kk = k; requires i > kk; assignable k; ensures k == i+1; ensures kk == 5;    "

//@ also    " // Purposely duplicating the name of the old variable

//@ old int kk = k+1; requires i < kk; assignable k; ensures k == i-1; ensures kk == 7;    "

//@ old int kk = k;    "

//@ {| requires i > kk; assignable k; ensures k == i+1; ensures kk == 5;    "

//@ also    "

//@    requires i < kk; assignable k; ensures k == i-1; ensures kk == 6;    "

//@ |}    "

//@ public normal_behavior     "

//@   requires true;     "

//@ show i, j+1;    "

//@ show k;    "

//@ assert k > 0;    "

//@ show m,k;    "

//@ assert m > 0;    "

//@ loop_invariant i <9 ;     " +

//@ decreases 10-i;     " +

//@ loop_invariant i <= 10 ;     " +

//@ decreases 7-i;     " +

//@ loop_invariant i == \\count ;     " +

//@ decreases 10-\\count;     " +

//@ loop_invariant i <= 10 ;     " +

//@ ghost int save = \\count;    " +

//@ loop_invariant \\count <= save;     " +

//@ ghost int i = 0;     " +

//@ loop_invariant i <= a.length ;     " +

//@ decreases a.length-i;     " +

//@ set i = i + 1;    " +

//@ ghost int i = 0;     " +

//@ loop_invariant i < a.length ;     " +

//@ decreases a.length-i-2;     " +

//@ set i = i + 1;    " +

//@ loop_invariant i>= 0;     " +

//@ decreases i;     " +

//@ loop_invariant i + \\count == \\old(i);     " +

//@ decreases i;     " +

//@ loop_invariant i>= 0;     " +

//@ decreases i;     " +

//@ loop_invariant i>= 0;     " +

//@ decreases i-2;     " +

//@ loop_invariant i>= 0;     " +

//@ decreases 10-i;     " +

//@ loop_invariant i>= 0;     " +

//@ decreases i;     " +

//@ loop_invariant i>= 0;     " +

//@ decreases i;     " +

//@ loop_invariant i>= 0;     " +

//@ decreases i;     " +

/*@ loop_invariant i + \\count == \\old(i); */
//@ decreases i;     " +

/*@ loop_invariant i + \\count == \\old(i); */
//@ assert i == -1;    " +

//@ loop_invariant i>= 0;     " +

//@ decreases i;     " +

//@ loop_invariant sum >= 0;     "

//@ assert sum >= 0;     "

//@ loop_invariant sum >= 0;     "

//@ assert sum > 0;     "

//@ loop_invariant sum >= 0;     "

/*@ assume o >= 0; */
//@ assert sum >= 0;     "

//@ loop_invariant sum >= 0;     "

/*@ assume o >= 0; */
//@ assert sum > 0;     "

//@ loop_invariant i <9 ;     " +

//@ decreases 10-i;     " +

//@ loop_invariant i <= 10 ;     " +

//@ decreases 7-i;     " +

//@ loop_invariant i == \\count ;     " +

//@ decreases 10-\\count;     " +

//@ loop_invariant i <= 10 ;     " +

//@ ghost int save = \\count;    " +

//@ loop_invariant \\count <= save;     " +

//@ ghost int i = 0;     " +

//@ loop_invariant i <= a.length ;     " +

//@ decreases a.length-i;     " +

//@ set i = i + 1;    " +

//@ ghost int i = 0;     " +

//@ loop_invariant i < a.length ;     " +

//@ decreases a.length-i-2;     " +

//@ set i = i + 1;    " +

//@ loop_invariant i>= 0;     " +

//@ decreases i;     " +

//@ loop_invariant i + \\count == \\old(i);     " +

//@ decreases i;     " +

//@ loop_invariant i>= 0;     " +

//@ decreases i;     " +

//@ loop_invariant i>= 0;     " +

//@ decreases i-2;     " +

//@ loop_invariant i>= 0;     " +

//@ decreases 10-i;     " +

//@ loop_invariant i>= 0;     " +

//@ decreases i;     " +

//@ loop_invariant i>= 0;     " +

//@ decreases i;     " +

//@ loop_invariant i>= 0;     " +

//@ decreases i;     " +

/*@ loop_invariant i + \\count == \\old(i); */
//@ decreases i;     " +

/*@ loop_invariant i + \\count == \\old(i); */
//@ assert i == -1;    " +

//@ loop_invariant i>= 0;     " +

//@ decreases i;     " +

//@ loop_invariant sum >= 0;     "

//@ assert sum >= 0;     "

//@ loop_invariant sum >= 0;     "

//@ assert sum > 0;     "

//@ loop_invariant sum >= 0;     "

/*@ assume o >= 0; */
//@ assert sum >= 0;     "

//@ loop_invariant sum >= 0;     "

/*@ assume o >= 0; */
//@ assert sum > 0;     "

//@ loop_invariant i <9 ;     " +

//@ decreases 10-i;     " +

//@ loop_invariant i <= 10 ;     " +

//@ decreases 7-i;     " +

//@ loop_invariant i == \\count ;     " +

//@ decreases 10-\\count;     " +

//@ loop_invariant i <= 10 ;     " +

//@ ghost int save = \\count;    " +

//@ loop_invariant \\count <= save;     " +

//@ ghost int i = 0;     " +

//@ loop_invariant i <= a.length ;     " +

//@ decreases a.length-i;     " +

//@ set i = i + 1;    " +

//@ ghost int i = 0;     " +

//@ loop_invariant i < a.length ;     " +

//@ decreases a.length-i-2;     " +

//@ set i = i + 1;    " +

//@ loop_invariant i>= 0;     " +

//@ decreases i;     " +

//@ loop_invariant i + \\count == \\old(i);     " +

//@ decreases i;     " +

//@ loop_invariant i>= 0;     " +

//@ decreases i;     " +

//@ loop_invariant i>= 0;     " +

//@ decreases i-2;     " +

//@ loop_invariant i>= 0;     " +

//@ decreases 10-i;     " +

//@ loop_invariant i>= 0;     " +

//@ decreases i;     " +

//@ loop_invariant i>= 0;     " +

//@ decreases i;     " +

//@ loop_invariant i>= 0;     " +

//@ decreases i;     " +

/*@ loop_invariant i + \\count == \\old(i); */
//@ decreases i;     " +

/*@ loop_invariant i + \\count == \\old(i); */
//@ assert i == -1;    " +

//@ loop_invariant i>= 0;     " +

//@ decreases i;     " +

//@ loop_invariant sum >= 0;     "

//@ assert sum >= 0;     "

//@ loop_invariant sum >= 0;     "

//@ assert sum > 0;     "

//@ loop_invariant sum >= 0;     "

/*@ assume o >= 0; */
//@ assert sum >= 0;     "

//@ loop_invariant sum >= 0;     "

/*@ assume o >= 0; */
//@ assert sum > 0;     "

//@ loop_invariant i <9 ;     " +

//@ decreases 10-i;     " +

//@ loop_invariant i <= 10 ;     " +

//@ decreases 7-i;     " +

//@ loop_invariant i == \\count ;     " +

//@ decreases 10-\\count;     " +

//@ loop_invariant i <= 10 ;     " +

//@ ghost int save = \\count;    " +

//@ loop_invariant \\count <= save;     " +

//@ ghost int i = 0;     " +

//@ loop_invariant i <= a.length ;     " +

//@ decreases a.length-i;     " +

//@ set i = i + 1;    " +

//@ ghost int i = 0;     " +

//@ loop_invariant i < a.length ;     " +

//@ decreases a.length-i-2;     " +

//@ set i = i + 1;    " +

//@ loop_invariant i>= 0;     " +

//@ decreases i;     " +

//@ loop_invariant i + \\count == \\old(i);     " +

//@ decreases i;     " +

//@ loop_invariant i>= 0;     " +

//@ decreases i;     " +

//@ loop_invariant i>= 0;     " +

//@ decreases i-2;     " +

//@ loop_invariant i>= 0;     " +

//@ decreases 10-i;     " +

//@ loop_invariant i>= 0;     " +

//@ decreases i;     " +

//@ loop_invariant i>= 0;     " +

//@ decreases i;     " +

//@ loop_invariant i>= 0;     " +

//@ decreases i;     " +

/*@ loop_invariant i + \\count == \\old(i); */
//@ decreases i;     " +

/*@ loop_invariant i + \\count == \\old(i); */
//@ assert i == -1;    " +

//@ loop_invariant i>= 0;     " +

//@ decreases i;     " +

//@ loop_invariant sum >= 0;     "

//@ assert sum >= 0;     "

//@ loop_invariant sum >= 0;     "

//@ assert sum > 0;     "

//@ loop_invariant sum >= 0;     "

/*@ assume o >= 0; */
//@ assert sum >= 0;     "

//@ loop_invariant sum >= 0;     "

/*@ assume o >= 0; */
//@ assert sum > 0;     "

//@ loop_invariant i <9 ;     " +

//@ decreases 10-i;     " +

//@ loop_invariant i <= 10 ;     " +

//@ decreases 7-i;     " +

//@ loop_invariant i == \\count ;     " +

//@ decreases 10-\\count;     " +

//@ loop_invariant i <= 10 ;     " +

//@ ghost int save = \\count;    " +

//@ loop_invariant \\count <= save;     " +

//@ ghost int i = 0;     " +

//@ loop_invariant i <= a.length ;     " +

//@ decreases a.length-i;     " +

//@ set i = i + 1;    " +

//@ ghost int i = 0;     " +

//@ loop_invariant i < a.length ;     " +

//@ decreases a.length-i-2;     " +

//@ set i = i + 1;    " +

//@ loop_invariant i>= 0;     " +

//@ decreases i;     " +

//@ loop_invariant i + \\count == \\old(i);     " +

//@ decreases i;     " +

//@ loop_invariant i>= 0;     " +

//@ decreases i;     " +

//@ loop_invariant i>= 0;     " +

//@ decreases i-2;     " +

//@ loop_invariant i>= 0;     " +

//@ decreases 10-i;     " +

//@ loop_invariant i>= 0;     " +

//@ decreases i;     " +

//@ loop_invariant i>= 0;     " +

//@ decreases i;     " +

//@ loop_invariant i>= 0;     " +

//@ decreases i;     " +

/*@ loop_invariant i + \\count == \\old(i); */
//@ decreases i;     " +

/*@ loop_invariant i + \\count == \\old(i); */
//@ assert i == -1;    " +

//@ loop_invariant i>= 0;     " +

//@ decreases i;     " +

//@ loop_invariant sum >= 0;     "

//@ assert sum >= 0;     "

//@ loop_invariant sum >= 0;     "

//@ assert sum > 0;     "

//@ loop_invariant sum >= 0;     "

/*@ assume o >= 0; */
//@ assert sum >= 0;     "

//@ loop_invariant sum >= 0;     "

/*@ assume o >= 0; */
//@ assert sum > 0;     "

//@ requires JML.informal(\"asd\") && (\\lbl CLS JML.erasure(\\typeof(i))) == Object.class;     "

/*@nullable*/
//@ requires JML.informal(\"asd\") && (\\lbl CLS JML.erasure(\\typeof(i))) == Object.class;     "

/*@nullable*/
//@ requires JML.informal(\"asd\") && (\\lbl CLS JML.erasure(\\typeof(i))) == Object.class;     "

/*@nullable*/
//@ requires JML.informal(\"asd\") && (\\lbl CLS JML.erasure(\\typeof(i))) == Object.class;     "

/*@nullable*/
//@ requires JML.informal(\"asd\") && (\\lbl CLS JML.erasure(\\typeof(i))) == Object.class;     "

/*@nullable*/
/*@ code_java_math*/
//@ readable z if bb;     "

//@ readable x if b;     "

//@ readable y if b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

/*@ code_java_math*/
//@ writable z if bb;     "

//@ writable x if b;     "

//@ writable y if b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

/*@ code_java_math*/
//@ readable z if bb;     "

//@ readable x if b;     "

//@ readable y if b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

/*@ code_java_math*/
//@ writable z if bb;     "

//@ writable x if b;     "

//@ writable y if b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

/*@ code_java_math*/
//@ readable z if bb;     "

//@ readable x if b;     "

//@ readable y if b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

/*@ code_java_math*/
//@ writable z if bb;     "

//@ writable x if b;     "

//@ writable y if b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

/*@ code_java_math*/
//@ readable z if bb;     "

//@ readable x if b;     "

//@ readable y if b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

/*@ code_java_math*/
//@ writable z if bb;     "

//@ writable x if b;     "

//@ writable y if b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

/*@ code_java_math*/
//@ readable z if bb;     "

//@ readable x if b;     "

//@ readable y if b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

/*@ code_java_math*/
//@ writable z if bb;     "

//@ writable x if b;     "

//@ writable y if b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

/*@ signals (Exception e) false;*/
/*@ requires false;*/
/*@ signals (Exception e) false;*/
//@ assert false;    "

//@ signals_only Exception;    "

//@ assert args.length != 0;    "

//@ assert args.length != 0;    "

/*@ signals (Exception e) false;*/
/*@ requires false;*/
/*@ signals (Exception e) false;*/
//@ assert false;    "

//@ signals_only Exception;    "

//@ assert args.length != 0;    "

//@ assert args.length != 0;    "

/*@ signals (Exception e) false;*/
/*@ requires false;*/
/*@ signals (Exception e) false;*/
//@ assert false;    "

//@ signals_only Exception;    "

//@ assert args.length != 0;    "

//@ assert args.length != 0;    "

/*@ signals (Exception e) false;*/
/*@ requires false;*/
/*@ signals (Exception e) false;*/
//@ assert false;    "

//@ signals_only Exception;    "

//@ assert args.length != 0;    "

//@ assert args.length != 0;    "

/*@ signals (Exception e) false;*/
/*@ requires false;*/
/*@ signals (Exception e) false;*/
//@ assert false;    "

//@ signals_only Exception;    "

//@ assert args.length != 0;    "

//@ assert args.length != 0;    "

/*@ ensures true; implies_that  ensures false; for_example ensures true; */
/*@ ensures true; implies_that behavior ensures false; for_example example ensures true; */
/*@ ensures true; implies_that normal_behavior ensures false; for_example normal_example ensures true; */
/*@ ensures true; implies_that exceptional_behavior signals_only Exception; for_example exceptional_example requires true; */
/*@ ensures true; implies_that example ensures false; for_example behavior ensures true; */
/*@ ensures true; implies_that normal_example ensures false; for_example normal_behavior ensures true; */
/*@ ensures true; implies_that exceptional_example requires false; for_example exceptional_behavior requires true; */
/*@ ensures true; implies_that  ensures false; also requires true; for_example ensures true; also normal_example ensures false; */
/*@ ensures true; implies_that public behavior ensures false; */
/*@ ensures true; for_example public normal_example ensures false; */
/*@ ensures true; implies_that  ensures false; for_example ensures true; */
/*@ ensures true; implies_that behavior ensures false; for_example example ensures true; */
/*@ ensures true; implies_that normal_behavior ensures false; for_example normal_example ensures true; */
/*@ ensures true; implies_that exceptional_behavior signals_only Exception; for_example exceptional_example requires true; */
/*@ ensures true; implies_that example ensures false; for_example behavior ensures true; */
/*@ ensures true; implies_that normal_example ensures false; for_example normal_behavior ensures true; */
/*@ ensures true; implies_that exceptional_example requires false; for_example exceptional_behavior requires true; */
/*@ ensures true; implies_that  ensures false; also requires true; for_example ensures true; also normal_example ensures false; */
/*@ ensures true; implies_that public behavior ensures false; */
/*@ ensures true; for_example public normal_example ensures false; */
/*@ ensures true; implies_that  ensures false; for_example ensures true; */
/*@ ensures true; implies_that behavior ensures false; for_example example ensures true; */
/*@ ensures true; implies_that normal_behavior ensures false; for_example normal_example ensures true; */
/*@ ensures true; implies_that exceptional_behavior signals_only Exception; for_example exceptional_example requires true; */
/*@ ensures true; implies_that example ensures false; for_example behavior ensures true; */
/*@ ensures true; implies_that normal_example ensures false; for_example normal_behavior ensures true; */
/*@ ensures true; implies_that exceptional_example requires false; for_example exceptional_behavior requires true; */
/*@ ensures true; implies_that  ensures false; also requires true; for_example ensures true; also normal_example ensures false; */
/*@ ensures true; implies_that public behavior ensures false; */
/*@ ensures true; for_example public normal_example ensures false; */
/*@ ensures true; implies_that  ensures false; for_example ensures true; */
/*@ ensures true; implies_that behavior ensures false; for_example example ensures true; */
/*@ ensures true; implies_that normal_behavior ensures false; for_example normal_example ensures true; */
/*@ ensures true; implies_that exceptional_behavior signals_only Exception; for_example exceptional_example requires true; */
/*@ ensures true; implies_that example ensures false; for_example behavior ensures true; */
/*@ ensures true; implies_that normal_example ensures false; for_example normal_behavior ensures true; */
/*@ ensures true; implies_that exceptional_example requires false; for_example exceptional_behavior requires true; */
/*@ ensures true; implies_that  ensures false; also requires true; for_example ensures true; also normal_example ensures false; */
/*@ ensures true; implies_that public behavior ensures false; */
/*@ ensures true; for_example public normal_example ensures false; */
/*@ ensures true; implies_that  ensures false; for_example ensures true; */
/*@ ensures true; implies_that behavior ensures false; for_example example ensures true; */
/*@ ensures true; implies_that normal_behavior ensures false; for_example normal_example ensures true; */
/*@ ensures true; implies_that exceptional_behavior signals_only Exception; for_example exceptional_example requires true; */
/*@ ensures true; implies_that example ensures false; for_example behavior ensures true; */
/*@ ensures true; implies_that normal_example ensures false; for_example normal_behavior ensures true; */
/*@ ensures true; implies_that exceptional_example requires false; for_example exceptional_behavior requires true; */
/*@ ensures true; implies_that  ensures false; also requires true; for_example ensures true; also normal_example ensures false; */
/*@ ensures true; implies_that public behavior ensures false; */
/*@ ensures true; for_example public normal_example ensures false; */
//@ requires positions != null && list != null ==> positions.length == list.length*2;

/*@nullable*/
/*@requires ensures pure */
//@requires ensures pure      ",

/*@nowarn A; nowarn B,requires,C; requires ensures pure */
/*@requires */
/*@requires */
/*@ ==> <== <: <==> <=!=> <- */
/*@ ==  <=  <  */
/*@ <<< <<<= <: <:= @ */
/*@ <=! + */
/*@ <=!= + */
/*@ -> */
/*@ \\result */
/*@ \\result\\result */
/*@ \\result     \\result*/
/*@ \\result result*/
/*@ \\xyz result*/
/*@ \\ \\result*/
//@*/ requires",

//@requires",

//@requires //@ requires",

/*@requires /*@ requires */
/*@requires //@ requires       requires */
/*@requires //@ requires */
//@requires /*@ requires     requires */ requires",

//@requires // requires",

//@requires /* requires */ ensures ",

//@requires /* requires ensures      signals */ modifies ",

/*@requires // modifies      ensures */
/*@requires /* modifies      ensures */
//@ requires",new ITokenKind[]{REQUIRES,EOF},null);

//@ requires    ",new ITokenKind[]{REQUIRES,EOF},null);

//@ requires     ",

//@ requires\r ",

//@ requires\r    ",

//@ requires    requires",

//@ requires @     ",

//@    requires ",

//@@@@@    requires ",

//@@x\\@@@    requires ",

//@@\\@x@@    requires ",

/*@ requires    requires@*/
/*@ requires      requires@*/
/*@ requires    @requires@*/
/*@ requires    @@@requires@*/
/*@ requires     @requires@*/
/*@ requires      @@@requires@*/
/*@ \\result      @@@\\xyz@*/
/*@ \\result(* requires *)*/
/*@ \\result(* requires *****)*/
/*@ \\result(* requires **** *)*/
/*@ \\result(* requires **** */
/*@ \\result(* requires *    *** */
/*@ \\result(* requires *    *** ",
                new ITokenKind[]{ERROR,EOF},
                null, //new int[]{4,11,11,30,30,31},
                1);
        checkMessages("/TEST.java:1: unclosed comment",1);
    }

    // Testing an unclosed informal comment in a LINE comment
    @Test public void testInformalComment5() {
        helpScanner("//@ \\result(* requires ****      public",
                new ITokenKind[]{IDENTIFIER,INFORMAL_COMMENT,EJML,PUBLIC,EOF},
                new int[]{4,11,11,28,28,29,30,36,36,36},
                1);
        checkMessages("/TEST.java:1: The informal expression is not closed",13);
    }

    // Testing an unclosed informal comment in a LINE comment
    @Test public void testInformalComment5a() {
        helpScanner("//@ \\result(* requires *****",
                new ITokenKind[]{IDENTIFIER,INFORMAL_COMMENT,EOF},
                new int[]{4,11,11,28,28,28},
                1);
        checkMessages("/TEST.java:1: The informal expression is not closed",13);
    }

    // Testing an unclosed informal comment in a LINE comment
    @Test public void testInformalComment6() {
        helpScanner("//@ \\result(* requires ***\"*) \" requires    ",
                new ITokenKind[]{IDENTIFIER,INFORMAL_COMMENT,ERROR,EOF},
                new int[]{4,11,11,29,30,40,40,40},  // FIXME - check posiiton of EOF
                1);
        checkMessages("/TEST.java:1: unclosed string literal",31);
    }

    @Test public void testStringLiteral() {
        Scanner sc = fac.newScanner("\"\\tA\\\\B\"", true);
        sc.nextToken();
        assertEquals(STRINGLITERAL,sc.token().kind);
        assertEquals("\tA\\B",sc.token().stringVal());
    }

    @Test public void testCharLiteral() {
        Scanner sc = fac.newScanner("\'\\t\'", true);
        sc.nextToken();
        assertEquals(CHARLITERAL,sc.token().kind);
        assertEquals("\t",sc.token().stringVal());
    }

    @Test public void testIntLiteralWithUnderscore() {
        String v = "123_456";
        Scanner sc = fac.newScanner(v, true);
        sc.nextToken();
        assertEquals(INTLITERAL,sc.token().kind);
        assertEquals("123456",sc.token().stringVal());
        assertEquals(123456,Integer.parseInt(sc.token().stringVal()));
    }

    @Test public void testIntLiteralWithUnderscoreBin() {
        String v = "0b0101_1010";
        Scanner sc = fac.newScanner(v, true);
        sc.nextToken();
        assertEquals(INTLITERAL,sc.token().kind);
        assertEquals("01011010",sc.token().stringVal());
        assertEquals(90,Integer.parseInt(sc.token().stringVal(),2));
    }

    @Test public void testIntLiteralWithUnderscoreHex() {
        String v = "0xDE_AF";
        Scanner sc = fac.newScanner(v, true);
        sc.nextToken();
        assertEquals(INTLITERAL,sc.token().kind);
        assertEquals("DEAF",sc.token().stringVal());
        assertEquals(57007,Integer.parseInt(sc.token().stringVal(),16));
    }

    @Test public void testIntLiteralWithUnderscoreHexLong() {
        String v = "0xDEAF_DEAF";
        Scanner sc = fac.newScanner(v, true);
        sc.nextToken();
        assertEquals(INTLITERAL,sc.token().kind);
        assertEquals("DEAFDEAF",sc.token().stringVal());
        assertEquals(3736067759L,Long.parseLong(sc.token().stringVal(),16));
    }

    @Test public void testDotDot() {
        helpScanner("//@..",
                new ITokenKind[]{DOT_DOT,EOF},
                new int[]{3,5,5,5},
                0);
    }

//    @Test public void testDotDot2() {
//        helpScanner("//@ modifies ..;",
//                new ITokenKind[]{ASSIGNABLE,DOT_DOT,SEMI,EOF},
//                null,
//                0);
//    }

    @Test public void testDotDot2a() {
        helpScanner("//@ 123..456;",
                new ITokenKind[]{INTLITERAL,DOT_DOT,INTLITERAL,SEMI,EOF},
                null,
                0);
    }

//    @Test public void testDotDot3() {
//        helpScanner("//@ modifies a[b .. c];",
//                new ITokenKind[]{ASSIGNABLE,IDENTIFIER,LBRACKET,IDENTIFIER,DOT_DOT,IDENTIFIER,RBRACKET,SEMI,EOF},
//                null,
//                0);
//    }
//
//    @Test public void testDotDot4() {
//        helpScanner("//@ modifies a[0..4];",
//                new ITokenKind[]{ASSIGNABLE,IDENTIFIER,LBRACKET,INTLITERAL,DOT_DOT,INTLITERAL,RBRACKET,SEMI,EOF},
//                null,
//                0);
//    }
//
//    @Test public void testDotDot4a() {
//        helpScanner("//@ modifies a[0 ..4];",
//                new ITokenKind[]{ASSIGNABLE,IDENTIFIER,LBRACKET,INTLITERAL,DOT_DOT,INTLITERAL,RBRACKET,SEMI,EOF},
//                null,
//                0);
//    }
//
//    @Test public void testDotDot5() {
//        helpScanner("//@ modifies ..234;",
//                new ITokenKind[]{ASSIGNABLE,DOT_DOT,INTLITERAL,SEMI,EOF},
//                null,
//                0);
//    }
//
//    @Test public void testDotDot6() {
//        helpScanner("//@ modifies .234;",
//                new ITokenKind[]{ASSIGNABLE,DOUBLELITERAL,SEMI,EOF},
//                null,
//                0);
//    }
//
//    @Test public void testDotDot7() {
//        helpScanner("//@ modifies 0.234;",
//                new ITokenKind[]{ASSIGNABLE,DOUBLELITERAL,SEMI,EOF},
//                null,
//                0);
//    }
//
//    @Test public void testDotDot8() {
//        helpScanner("//@ modifies a[0. .4];",
//                new ITokenKind[]{ASSIGNABLE,IDENTIFIER,LBRACKET,DOUBLELITERAL,DOUBLELITERAL,RBRACKET,SEMI,EOF},
//                null,
//                0);
//    }

    @Test public void testDotDot9() {
        helpScanner("//@ 0xApA     ",
                new ITokenKind[]{DOUBLELITERAL,IDENTIFIER,EJML,EOF},
                null,
                1);
        checkMessages("/TEST.java:1: malformed floating point literal",5);
    }

    @Test public void testDotDot10() {
        helpScanner("//@ 1.0eZ      ",
                new ITokenKind[]{DOUBLELITERAL,IDENTIFIER,EJML,EOF},
                null,
                1);
        checkMessages("/TEST.java:1: malformed floating point literal",5);
    }

    @Test public void testDotDot11() {
        helpScanner("//@ 0xA.0pZ     ",
                new ITokenKind[]{DOUBLELITERAL,IDENTIFIER,EJML,EOF},
                null,
                1);
        checkMessages("/TEST.java:1: malformed floating point literal",5);
    }

    @Test public void testDotDot12() {
        helpScanner("//@ 0xA.Z     ",
                new ITokenKind[]{DOUBLELITERAL,IDENTIFIER,EJML,EOF},
                null,
                1);
        checkMessages("/TEST.java:1: malformed floating point literal",5);
    }

    @Test public void testConditionalKey1() {
        helpScanner("//+POS@ requires      /*+POS@ requires */
//@ requires positions != null && list != null ==> positions.length == list.length*2;

/*@nullable*/
/*@requires ensures pure */
//@requires ensures pure      ",

/*@nowarn A; nowarn B,requires,C; requires ensures pure */
/*@requires */
/*@requires */
/*@ ==> <== <: <==> <=!=> <- */
/*@ ==  <=  <  */
/*@ <<< <<<= <: <:= @ */
/*@ <=! + */
/*@ <=!= + */
/*@ -> */
/*@ \\result */
/*@ \\result\\result */
/*@ \\result     \\result*/
/*@ \\result result*/
/*@ \\xyz result*/
/*@ \\ \\result*/
//@*/ requires",

//@requires",

//@requires //@ requires",

/*@requires /*@ requires */
/*@requires //@ requires       requires */
/*@requires //@ requires */
//@requires /*@ requires     requires */ requires",

//@requires // requires",

//@requires /* requires */ ensures ",

//@requires /* requires ensures      signals */ modifies ",

/*@requires // modifies      ensures */
/*@requires /* modifies      ensures */
//@ requires",new ITokenKind[]{REQUIRES,EOF},null);

//@ requires    ",new ITokenKind[]{REQUIRES,EOF},null);

//@ requires     ",

//@ requires\r ",

//@ requires\r    ",

//@ requires    requires",

//@ requires @     ",

//@    requires ",

//@@@@@    requires ",

//@@x\\@@@    requires ",

//@@\\@x@@    requires ",

/*@ requires    requires@*/
/*@ requires      requires@*/
/*@ requires    @requires@*/
/*@ requires    @@@requires@*/
/*@ requires     @requires@*/
/*@ requires      @@@requires@*/
/*@ \\result      @@@\\xyz@*/
/*@ \\result(* requires *)*/
/*@ \\result(* requires *****)*/
/*@ \\result(* requires **** *)*/
/*@ \\result(* requires **** */
/*@ \\result(* requires *    *** */
/*@ \\result(* requires *    *** ",
                new ITokenKind[]{ERROR,EOF},
                null, //new int[]{4,11,11,30,30,31},
                1);
        checkMessages("/TEST.java:1: unclosed comment",1);
    }

    // Testing an unclosed informal comment in a LINE comment
    @Test public void testInformalComment5() {
        helpScanner("//@ \\result(* requires ****      public",
                new ITokenKind[]{IDENTIFIER,INFORMAL_COMMENT,EJML,PUBLIC,EOF},
                new int[]{4,11,11,28,28,29,30,36,36,36},
                1);
        checkMessages("/TEST.java:1: The informal expression is not closed",13);
    }

    // Testing an unclosed informal comment in a LINE comment
    @Test public void testInformalComment5a() {
        helpScanner("//@ \\result(* requires *****",
                new ITokenKind[]{IDENTIFIER,INFORMAL_COMMENT,EOF},
                new int[]{4,11,11,28,28,28},
                1);
        checkMessages("/TEST.java:1: The informal expression is not closed",13);
    }

    // Testing an unclosed informal comment in a LINE comment
    @Test public void testInformalComment6() {
        helpScanner("//@ \\result(* requires ***\"*) \" requires    ",
                new ITokenKind[]{IDENTIFIER,INFORMAL_COMMENT,ERROR,EOF},
                new int[]{4,11,11,29,30,40,40,40},  // FIXME - check posiiton of EOF
                1);
        checkMessages("/TEST.java:1: unclosed string literal",31);
    }

    @Test public void testStringLiteral() {
        Scanner sc = fac.newScanner("\"\\tA\\\\B\"", true);
        sc.nextToken();
        assertEquals(STRINGLITERAL,sc.token().kind);
        assertEquals("\tA\\B",sc.token().stringVal());
    }

    @Test public void testCharLiteral() {
        Scanner sc = fac.newScanner("\'\\t\'", true);
        sc.nextToken();
        assertEquals(CHARLITERAL,sc.token().kind);
        assertEquals("\t",sc.token().stringVal());
    }

    @Test public void testIntLiteralWithUnderscore() {
        String v = "123_456";
        Scanner sc = fac.newScanner(v, true);
        sc.nextToken();
        assertEquals(INTLITERAL,sc.token().kind);
        assertEquals("123456",sc.token().stringVal());
        assertEquals(123456,Integer.parseInt(sc.token().stringVal()));
    }

    @Test public void testIntLiteralWithUnderscoreBin() {
        String v = "0b0101_1010";
        Scanner sc = fac.newScanner(v, true);
        sc.nextToken();
        assertEquals(INTLITERAL,sc.token().kind);
        assertEquals("01011010",sc.token().stringVal());
        assertEquals(90,Integer.parseInt(sc.token().stringVal(),2));
    }

    @Test public void testIntLiteralWithUnderscoreHex() {
        String v = "0xDE_AF";
        Scanner sc = fac.newScanner(v, true);
        sc.nextToken();
        assertEquals(INTLITERAL,sc.token().kind);
        assertEquals("DEAF",sc.token().stringVal());
        assertEquals(57007,Integer.parseInt(sc.token().stringVal(),16));
    }

    @Test public void testIntLiteralWithUnderscoreHexLong() {
        String v = "0xDEAF_DEAF";
        Scanner sc = fac.newScanner(v, true);
        sc.nextToken();
        assertEquals(INTLITERAL,sc.token().kind);
        assertEquals("DEAFDEAF",sc.token().stringVal());
        assertEquals(3736067759L,Long.parseLong(sc.token().stringVal(),16));
    }

    @Test public void testDotDot() {
        helpScanner("//@..",
                new ITokenKind[]{DOT_DOT,EOF},
                new int[]{3,5,5,5},
                0);
    }

//    @Test public void testDotDot2() {
//        helpScanner("//@ modifies ..;",
//                new ITokenKind[]{ASSIGNABLE,DOT_DOT,SEMI,EOF},
//                null,
//                0);
//    }

    @Test public void testDotDot2a() {
        helpScanner("//@ 123..456;",
                new ITokenKind[]{INTLITERAL,DOT_DOT,INTLITERAL,SEMI,EOF},
                null,
                0);
    }

//    @Test public void testDotDot3() {
//        helpScanner("//@ modifies a[b .. c];",
//                new ITokenKind[]{ASSIGNABLE,IDENTIFIER,LBRACKET,IDENTIFIER,DOT_DOT,IDENTIFIER,RBRACKET,SEMI,EOF},
//                null,
//                0);
//    }
//
//    @Test public void testDotDot4() {
//        helpScanner("//@ modifies a[0..4];",
//                new ITokenKind[]{ASSIGNABLE,IDENTIFIER,LBRACKET,INTLITERAL,DOT_DOT,INTLITERAL,RBRACKET,SEMI,EOF},
//                null,
//                0);
//    }
//
//    @Test public void testDotDot4a() {
//        helpScanner("//@ modifies a[0 ..4];",
//                new ITokenKind[]{ASSIGNABLE,IDENTIFIER,LBRACKET,INTLITERAL,DOT_DOT,INTLITERAL,RBRACKET,SEMI,EOF},
//                null,
//                0);
//    }
//
//    @Test public void testDotDot5() {
//        helpScanner("//@ modifies ..234;",
//                new ITokenKind[]{ASSIGNABLE,DOT_DOT,INTLITERAL,SEMI,EOF},
//                null,
//                0);
//    }
//
//    @Test public void testDotDot6() {
//        helpScanner("//@ modifies .234;",
//                new ITokenKind[]{ASSIGNABLE,DOUBLELITERAL,SEMI,EOF},
//                null,
//                0);
//    }
//
//    @Test public void testDotDot7() {
//        helpScanner("//@ modifies 0.234;",
//                new ITokenKind[]{ASSIGNABLE,DOUBLELITERAL,SEMI,EOF},
//                null,
//                0);
//    }
//
//    @Test public void testDotDot8() {
//        helpScanner("//@ modifies a[0. .4];",
//                new ITokenKind[]{ASSIGNABLE,IDENTIFIER,LBRACKET,DOUBLELITERAL,DOUBLELITERAL,RBRACKET,SEMI,EOF},
//                null,
//                0);
//    }

    @Test public void testDotDot9() {
        helpScanner("//@ 0xApA     ",
                new ITokenKind[]{DOUBLELITERAL,IDENTIFIER,EJML,EOF},
                null,
                1);
        checkMessages("/TEST.java:1: malformed floating point literal",5);
    }

    @Test public void testDotDot10() {
        helpScanner("//@ 1.0eZ      ",
                new ITokenKind[]{DOUBLELITERAL,IDENTIFIER,EJML,EOF},
                null,
                1);
        checkMessages("/TEST.java:1: malformed floating point literal",5);
    }

    @Test public void testDotDot11() {
        helpScanner("//@ 0xA.0pZ     ",
                new ITokenKind[]{DOUBLELITERAL,IDENTIFIER,EJML,EOF},
                null,
                1);
        checkMessages("/TEST.java:1: malformed floating point literal",5);
    }

    @Test public void testDotDot12() {
        helpScanner("//@ 0xA.Z     ",
                new ITokenKind[]{DOUBLELITERAL,IDENTIFIER,EJML,EOF},
                null,
                1);
        checkMessages("/TEST.java:1: malformed floating point literal",5);
    }

    @Test public void testConditionalKey1() {
        helpScanner("//+POS@ requires      /*+POS@ requires */
//@ requires positions != null && list != null ==> positions.length == list.length*2;

/*@nullable*/
/*@requires ensures pure */
//@requires ensures pure      ",

/*@nowarn A; nowarn B,requires,C; requires ensures pure */
/*@requires */
/*@requires */
/*@ ==> <== <: <==> <=!=> <- */
/*@ ==  <=  <  */
/*@ <<< <<<= <: <:= @ */
/*@ <=! + */
/*@ <=!= + */
/*@ -> */
/*@ \\result */
/*@ \\result\\result */
/*@ \\result     \\result*/
/*@ \\result result*/
/*@ \\xyz result*/
/*@ \\ \\result*/
//@*/ requires",

//@requires",

//@requires //@ requires",

/*@requires /*@ requires */
/*@requires //@ requires       requires */
/*@requires //@ requires */
//@requires /*@ requires     requires */ requires",

//@requires // requires",

//@requires /* requires */ ensures ",

//@requires /* requires ensures      signals */ modifies ",

/*@requires // modifies      ensures */
/*@requires /* modifies      ensures */
//@ requires",new ITokenKind[]{REQUIRES,EOF},null);

//@ requires    ",new ITokenKind[]{REQUIRES,EOF},null);

//@ requires     ",

//@ requires\r ",

//@ requires\r    ",

//@ requires    requires",

//@ requires @     ",

//@    requires ",

//@@@@@    requires ",

//@@x\\@@@    requires ",

//@@\\@x@@    requires ",

/*@ requires    requires@*/
/*@ requires      requires@*/
/*@ requires    @requires@*/
/*@ requires    @@@requires@*/
/*@ requires     @requires@*/
/*@ requires      @@@requires@*/
/*@ \\result      @@@\\xyz@*/
/*@ \\result(* requires *)*/
/*@ \\result(* requires *****)*/
/*@ \\result(* requires **** *)*/
/*@ \\result(* requires **** */
/*@ \\result(* requires *    *** */
/*@ \\result(* requires *    *** ",
                new ITokenKind[]{ERROR,EOF},
                null, //new int[]{4,11,11,30,30,31},
                1);
        checkMessages("/TEST.java:1: unclosed comment",1);
    }

    // Testing an unclosed informal comment in a LINE comment
    @Test public void testInformalComment5() {
        helpScanner("//@ \\result(* requires ****      public",
                new ITokenKind[]{IDENTIFIER,INFORMAL_COMMENT,EJML,PUBLIC,EOF},
                new int[]{4,11,11,28,28,29,30,36,36,36},
                1);
        checkMessages("/TEST.java:1: The informal expression is not closed",13);
    }

    // Testing an unclosed informal comment in a LINE comment
    @Test public void testInformalComment5a() {
        helpScanner("//@ \\result(* requires *****",
                new ITokenKind[]{IDENTIFIER,INFORMAL_COMMENT,EOF},
                new int[]{4,11,11,28,28,28},
                1);
        checkMessages("/TEST.java:1: The informal expression is not closed",13);
    }

    // Testing an unclosed informal comment in a LINE comment
    @Test public void testInformalComment6() {
        helpScanner("//@ \\result(* requires ***\"*) \" requires    ",
                new ITokenKind[]{IDENTIFIER,INFORMAL_COMMENT,ERROR,EOF},
                new int[]{4,11,11,29,30,40,40,40},  // FIXME - check posiiton of EOF
                1);
        checkMessages("/TEST.java:1: unclosed string literal",31);
    }

    @Test public void testStringLiteral() {
        Scanner sc = fac.newScanner("\"\\tA\\\\B\"", true);
        sc.nextToken();
        assertEquals(STRINGLITERAL,sc.token().kind);
        assertEquals("\tA\\B",sc.token().stringVal());
    }

    @Test public void testCharLiteral() {
        Scanner sc = fac.newScanner("\'\\t\'", true);
        sc.nextToken();
        assertEquals(CHARLITERAL,sc.token().kind);
        assertEquals("\t",sc.token().stringVal());
    }

    @Test public void testIntLiteralWithUnderscore() {
        String v = "123_456";
        Scanner sc = fac.newScanner(v, true);
        sc.nextToken();
        assertEquals(INTLITERAL,sc.token().kind);
        assertEquals("123456",sc.token().stringVal());
        assertEquals(123456,Integer.parseInt(sc.token().stringVal()));
    }

    @Test public void testIntLiteralWithUnderscoreBin() {
        String v = "0b0101_1010";
        Scanner sc = fac.newScanner(v, true);
        sc.nextToken();
        assertEquals(INTLITERAL,sc.token().kind);
        assertEquals("01011010",sc.token().stringVal());
        assertEquals(90,Integer.parseInt(sc.token().stringVal(),2));
    }

    @Test public void testIntLiteralWithUnderscoreHex() {
        String v = "0xDE_AF";
        Scanner sc = fac.newScanner(v, true);
        sc.nextToken();
        assertEquals(INTLITERAL,sc.token().kind);
        assertEquals("DEAF",sc.token().stringVal());
        assertEquals(57007,Integer.parseInt(sc.token().stringVal(),16));
    }

    @Test public void testIntLiteralWithUnderscoreHexLong() {
        String v = "0xDEAF_DEAF";
        Scanner sc = fac.newScanner(v, true);
        sc.nextToken();
        assertEquals(INTLITERAL,sc.token().kind);
        assertEquals("DEAFDEAF",sc.token().stringVal());
        assertEquals(3736067759L,Long.parseLong(sc.token().stringVal(),16));
    }

    @Test public void testDotDot() {
        helpScanner("//@..",
                new ITokenKind[]{DOT_DOT,EOF},
                new int[]{3,5,5,5},
                0);
    }

//    @Test public void testDotDot2() {
//        helpScanner("//@ modifies ..;",
//                new ITokenKind[]{ASSIGNABLE,DOT_DOT,SEMI,EOF},
//                null,
//                0);
//    }

    @Test public void testDotDot2a() {
        helpScanner("//@ 123..456;",
                new ITokenKind[]{INTLITERAL,DOT_DOT,INTLITERAL,SEMI,EOF},
                null,
                0);
    }

//    @Test public void testDotDot3() {
//        helpScanner("//@ modifies a[b .. c];",
//                new ITokenKind[]{ASSIGNABLE,IDENTIFIER,LBRACKET,IDENTIFIER,DOT_DOT,IDENTIFIER,RBRACKET,SEMI,EOF},
//                null,
//                0);
//    }
//
//    @Test public void testDotDot4() {
//        helpScanner("//@ modifies a[0..4];",
//                new ITokenKind[]{ASSIGNABLE,IDENTIFIER,LBRACKET,INTLITERAL,DOT_DOT,INTLITERAL,RBRACKET,SEMI,EOF},
//                null,
//                0);
//    }
//
//    @Test public void testDotDot4a() {
//        helpScanner("//@ modifies a[0 ..4];",
//                new ITokenKind[]{ASSIGNABLE,IDENTIFIER,LBRACKET,INTLITERAL,DOT_DOT,INTLITERAL,RBRACKET,SEMI,EOF},
//                null,
//                0);
//    }
//
//    @Test public void testDotDot5() {
//        helpScanner("//@ modifies ..234;",
//                new ITokenKind[]{ASSIGNABLE,DOT_DOT,INTLITERAL,SEMI,EOF},
//                null,
//                0);
//    }
//
//    @Test public void testDotDot6() {
//        helpScanner("//@ modifies .234;",
//                new ITokenKind[]{ASSIGNABLE,DOUBLELITERAL,SEMI,EOF},
//                null,
//                0);
//    }
//
//    @Test public void testDotDot7() {
//        helpScanner("//@ modifies 0.234;",
//                new ITokenKind[]{ASSIGNABLE,DOUBLELITERAL,SEMI,EOF},
//                null,
//                0);
//    }
//
//    @Test public void testDotDot8() {
//        helpScanner("//@ modifies a[0. .4];",
//                new ITokenKind[]{ASSIGNABLE,IDENTIFIER,LBRACKET,DOUBLELITERAL,DOUBLELITERAL,RBRACKET,SEMI,EOF},
//                null,
//                0);
//    }

    @Test public void testDotDot9() {
        helpScanner("//@ 0xApA     ",
                new ITokenKind[]{DOUBLELITERAL,IDENTIFIER,EJML,EOF},
                null,
                1);
        checkMessages("/TEST.java:1: malformed floating point literal",5);
    }

    @Test public void testDotDot10() {
        helpScanner("//@ 1.0eZ      ",
                new ITokenKind[]{DOUBLELITERAL,IDENTIFIER,EJML,EOF},
                null,
                1);
        checkMessages("/TEST.java:1: malformed floating point literal",5);
    }

    @Test public void testDotDot11() {
        helpScanner("//@ 0xA.0pZ     ",
                new ITokenKind[]{DOUBLELITERAL,IDENTIFIER,EJML,EOF},
                null,
                1);
        checkMessages("/TEST.java:1: malformed floating point literal",5);
    }

    @Test public void testDotDot12() {
        helpScanner("//@ 0xA.Z     ",
                new ITokenKind[]{DOUBLELITERAL,IDENTIFIER,EJML,EOF},
                null,
                1);
        checkMessages("/TEST.java:1: malformed floating point literal",5);
    }

    @Test public void testConditionalKey1() {
        helpScanner("//+POS@ requires      /*+POS@ requires */
//@ requires positions != null && list != null ==> positions.length == list.length*2;

/*@nullable*/
/*@requires ensures pure */
//@requires ensures pure      ",

/*@nowarn A; nowarn B,requires,C; requires ensures pure */
/*@requires */
/*@requires */
/*@ ==> <== <: <==> <=!=> <- */
/*@ ==  <=  <  */
/*@ <<< <<<= <: <:= @ */
/*@ <=! + */
/*@ <=!= + */
/*@ -> */
/*@ \\result */
/*@ \\result\\result */
/*@ \\result     \\result*/
/*@ \\result result*/
/*@ \\xyz result*/
/*@ \\ \\result*/
//@*/ requires",

//@requires",

//@requires //@ requires",

/*@requires /*@ requires */
/*@requires //@ requires       requires */
/*@requires //@ requires */
//@requires /*@ requires     requires */ requires",

//@requires // requires",

//@requires /* requires */ ensures ",

//@requires /* requires ensures      signals */ modifies ",

/*@requires // modifies      ensures */
/*@requires /* modifies      ensures */
//@ requires",new ITokenKind[]{REQUIRES,EOF},null);

//@ requires    ",new ITokenKind[]{REQUIRES,EOF},null);

//@ requires     ",

//@ requires\r ",

//@ requires\r    ",

//@ requires    requires",

//@ requires @     ",

//@    requires ",

//@@@@@    requires ",

//@@x\\@@@    requires ",

//@@\\@x@@    requires ",

/*@ requires    requires@*/
/*@ requires      requires@*/
/*@ requires    @requires@*/
/*@ requires    @@@requires@*/
/*@ requires     @requires@*/
/*@ requires      @@@requires@*/
/*@ \\result      @@@\\xyz@*/
/*@ \\result(* requires *)*/
/*@ \\result(* requires *****)*/
/*@ \\result(* requires **** *)*/
/*@ \\result(* requires **** */
/*@ \\result(* requires *    *** */
/*@ \\result(* requires *    *** ",
                new ITokenKind[]{ERROR,EOF},
                null, //new int[]{4,11,11,30,30,31},
                1);
        checkMessages("/TEST.java:1: unclosed comment",1);
    }

    // Testing an unclosed informal comment in a LINE comment
    @Test public void testInformalComment5() {
        helpScanner("//@ \\result(* requires ****      public",
                new ITokenKind[]{IDENTIFIER,INFORMAL_COMMENT,EJML,PUBLIC,EOF},
                new int[]{4,11,11,28,28,29,30,36,36,36},
                1);
        checkMessages("/TEST.java:1: The informal expression is not closed",13);
    }

    // Testing an unclosed informal comment in a LINE comment
    @Test public void testInformalComment5a() {
        helpScanner("//@ \\result(* requires *****",
                new ITokenKind[]{IDENTIFIER,INFORMAL_COMMENT,EOF},
                new int[]{4,11,11,28,28,28},
                1);
        checkMessages("/TEST.java:1: The informal expression is not closed",13);
    }

    // Testing an unclosed informal comment in a LINE comment
    @Test public void testInformalComment6() {
        helpScanner("//@ \\result(* requires ***\"*) \" requires    ",
                new ITokenKind[]{IDENTIFIER,INFORMAL_COMMENT,ERROR,EOF},
                new int[]{4,11,11,29,30,40,40,40},  // FIXME - check posiiton of EOF
                1);
        checkMessages("/TEST.java:1: unclosed string literal",31);
    }

    @Test public void testStringLiteral() {
        Scanner sc = fac.newScanner("\"\\tA\\\\B\"", true);
        sc.nextToken();
        assertEquals(STRINGLITERAL,sc.token().kind);
        assertEquals("\tA\\B",sc.token().stringVal());
    }

    @Test public void testCharLiteral() {
        Scanner sc = fac.newScanner("\'\\t\'", true);
        sc.nextToken();
        assertEquals(CHARLITERAL,sc.token().kind);
        assertEquals("\t",sc.token().stringVal());
    }

    @Test public void testIntLiteralWithUnderscore() {
        String v = "123_456";
        Scanner sc = fac.newScanner(v, true);
        sc.nextToken();
        assertEquals(INTLITERAL,sc.token().kind);
        assertEquals("123456",sc.token().stringVal());
        assertEquals(123456,Integer.parseInt(sc.token().stringVal()));
    }

    @Test public void testIntLiteralWithUnderscoreBin() {
        String v = "0b0101_1010";
        Scanner sc = fac.newScanner(v, true);
        sc.nextToken();
        assertEquals(INTLITERAL,sc.token().kind);
        assertEquals("01011010",sc.token().stringVal());
        assertEquals(90,Integer.parseInt(sc.token().stringVal(),2));
    }

    @Test public void testIntLiteralWithUnderscoreHex() {
        String v = "0xDE_AF";
        Scanner sc = fac.newScanner(v, true);
        sc.nextToken();
        assertEquals(INTLITERAL,sc.token().kind);
        assertEquals("DEAF",sc.token().stringVal());
        assertEquals(57007,Integer.parseInt(sc.token().stringVal(),16));
    }

    @Test public void testIntLiteralWithUnderscoreHexLong() {
        String v = "0xDEAF_DEAF";
        Scanner sc = fac.newScanner(v, true);
        sc.nextToken();
        assertEquals(INTLITERAL,sc.token().kind);
        assertEquals("DEAFDEAF",sc.token().stringVal());
        assertEquals(3736067759L,Long.parseLong(sc.token().stringVal(),16));
    }

    @Test public void testDotDot() {
        helpScanner("//@..",
                new ITokenKind[]{DOT_DOT,EOF},
                new int[]{3,5,5,5},
                0);
    }

//    @Test public void testDotDot2() {
//        helpScanner("//@ modifies ..;",
//                new ITokenKind[]{ASSIGNABLE,DOT_DOT,SEMI,EOF},
//                null,
//                0);
//    }

    @Test public void testDotDot2a() {
        helpScanner("//@ 123..456;",
                new ITokenKind[]{INTLITERAL,DOT_DOT,INTLITERAL,SEMI,EOF},
                null,
                0);
    }

//    @Test public void testDotDot3() {
//        helpScanner("//@ modifies a[b .. c];",
//                new ITokenKind[]{ASSIGNABLE,IDENTIFIER,LBRACKET,IDENTIFIER,DOT_DOT,IDENTIFIER,RBRACKET,SEMI,EOF},
//                null,
//                0);
//    }
//
//    @Test public void testDotDot4() {
//        helpScanner("//@ modifies a[0..4];",
//                new ITokenKind[]{ASSIGNABLE,IDENTIFIER,LBRACKET,INTLITERAL,DOT_DOT,INTLITERAL,RBRACKET,SEMI,EOF},
//                null,
//                0);
//    }
//
//    @Test public void testDotDot4a() {
//        helpScanner("//@ modifies a[0 ..4];",
//                new ITokenKind[]{ASSIGNABLE,IDENTIFIER,LBRACKET,INTLITERAL,DOT_DOT,INTLITERAL,RBRACKET,SEMI,EOF},
//                null,
//                0);
//    }
//
//    @Test public void testDotDot5() {
//        helpScanner("//@ modifies ..234;",
//                new ITokenKind[]{ASSIGNABLE,DOT_DOT,INTLITERAL,SEMI,EOF},
//                null,
//                0);
//    }
//
//    @Test public void testDotDot6() {
//        helpScanner("//@ modifies .234;",
//                new ITokenKind[]{ASSIGNABLE,DOUBLELITERAL,SEMI,EOF},
//                null,
//                0);
//    }
//
//    @Test public void testDotDot7() {
//        helpScanner("//@ modifies 0.234;",
//                new ITokenKind[]{ASSIGNABLE,DOUBLELITERAL,SEMI,EOF},
//                null,
//                0);
//    }
//
//    @Test public void testDotDot8() {
//        helpScanner("//@ modifies a[0. .4];",
//                new ITokenKind[]{ASSIGNABLE,IDENTIFIER,LBRACKET,DOUBLELITERAL,DOUBLELITERAL,RBRACKET,SEMI,EOF},
//                null,
//                0);
//    }

    @Test public void testDotDot9() {
        helpScanner("//@ 0xApA     ",
                new ITokenKind[]{DOUBLELITERAL,IDENTIFIER,EJML,EOF},
                null,
                1);
        checkMessages("/TEST.java:1: malformed floating point literal",5);
    }

    @Test public void testDotDot10() {
        helpScanner("//@ 1.0eZ      ",
                new ITokenKind[]{DOUBLELITERAL,IDENTIFIER,EJML,EOF},
                null,
                1);
        checkMessages("/TEST.java:1: malformed floating point literal",5);
    }

    @Test public void testDotDot11() {
        helpScanner("//@ 0xA.0pZ     ",
                new ITokenKind[]{DOUBLELITERAL,IDENTIFIER,EJML,EOF},
                null,
                1);
        checkMessages("/TEST.java:1: malformed floating point literal",5);
    }

    @Test public void testDotDot12() {
        helpScanner("//@ 0xA.Z     ",
                new ITokenKind[]{DOUBLELITERAL,IDENTIFIER,EJML,EOF},
                null,
                1);
        checkMessages("/TEST.java:1: malformed floating point literal",5);
    }

    @Test public void testConditionalKey1() {
        helpScanner("//+POS@ requires      /*+POS@ requires */
//@ requires positions != null && list != null ==> positions.length == list.length*2;

/*@nullable*/
/*@requires ensures pure */
//@requires ensures pure      ",

/*@nowarn A; nowarn B,requires,C; requires ensures pure */
/*@requires */
/*@requires */
/*@ ==> <== <: <==> <=!=> <- */
/*@ ==  <=  <  */
/*@ <<< <<<= <: <:= @ */
/*@ <=! + */
/*@ <=!= + */
/*@ -> */
/*@ \\result */
/*@ \\result\\result */
/*@ \\result     \\result*/
/*@ \\result result*/
/*@ \\xyz result*/
/*@ \\ \\result*/
//@*/ requires",

//@requires",

//@requires //@ requires",

/*@requires /*@ requires */
/*@requires //@ requires       requires */
/*@requires //@ requires */
//@requires /*@ requires     requires */ requires",

//@requires // requires",

//@requires /* requires */ ensures ",

//@requires /* requires ensures      signals */ modifies ",

/*@requires // modifies      ensures */
/*@requires /* modifies      ensures */
//@ requires",new ITokenKind[]{REQUIRES,EOF},null);

//@ requires    ",new ITokenKind[]{REQUIRES,EOF},null);

//@ requires     ",

//@ requires\r ",

//@ requires\r    ",

//@ requires    requires",

//@ requires @     ",

//@    requires ",

//@@@@@    requires ",

//@@x\\@@@    requires ",

//@@\\@x@@    requires ",

/*@ requires    requires@*/
/*@ requires      requires@*/
/*@ requires    @requires@*/
/*@ requires    @@@requires@*/
/*@ requires     @requires@*/
/*@ requires      @@@requires@*/
/*@ \\result      @@@\\xyz@*/
/*@ \\result(* requires *)*/
/*@ \\result(* requires *****)*/
/*@ \\result(* requires **** *)*/
/*@ \\result(* requires **** */
/*@ \\result(* requires *    *** */
/*@ \\result(* requires *    *** ",
                new ITokenKind[]{ERROR,EOF},
                null, //new int[]{4,11,11,30,30,31},
                1);
        checkMessages("/TEST.java:1: unclosed comment",1);
    }

    // Testing an unclosed informal comment in a LINE comment
    @Test public void testInformalComment5() {
        helpScanner("//@ \\result(* requires ****      public",
                new ITokenKind[]{IDENTIFIER,INFORMAL_COMMENT,EJML,PUBLIC,EOF},
                new int[]{4,11,11,28,28,29,30,36,36,36},
                1);
        checkMessages("/TEST.java:1: The informal expression is not closed",13);
    }

    // Testing an unclosed informal comment in a LINE comment
    @Test public void testInformalComment5a() {
        helpScanner("//@ \\result(* requires *****",
                new ITokenKind[]{IDENTIFIER,INFORMAL_COMMENT,EOF},
                new int[]{4,11,11,28,28,28},
                1);
        checkMessages("/TEST.java:1: The informal expression is not closed",13);
    }

    // Testing an unclosed informal comment in a LINE comment
    @Test public void testInformalComment6() {
        helpScanner("//@ \\result(* requires ***\"*) \" requires    ",
                new ITokenKind[]{IDENTIFIER,INFORMAL_COMMENT,ERROR,EOF},
                new int[]{4,11,11,29,30,40,40,40},  // FIXME - check posiiton of EOF
                1);
        checkMessages("/TEST.java:1: unclosed string literal",31);
    }

    @Test public void testStringLiteral() {
        Scanner sc = fac.newScanner("\"\\tA\\\\B\"", true);
        sc.nextToken();
        assertEquals(STRINGLITERAL,sc.token().kind);
        assertEquals("\tA\\B",sc.token().stringVal());
    }

    @Test public void testCharLiteral() {
        Scanner sc = fac.newScanner("\'\\t\'", true);
        sc.nextToken();
        assertEquals(CHARLITERAL,sc.token().kind);
        assertEquals("\t",sc.token().stringVal());
    }

    @Test public void testIntLiteralWithUnderscore() {
        String v = "123_456";
        Scanner sc = fac.newScanner(v, true);
        sc.nextToken();
        assertEquals(INTLITERAL,sc.token().kind);
        assertEquals("123456",sc.token().stringVal());
        assertEquals(123456,Integer.parseInt(sc.token().stringVal()));
    }

    @Test public void testIntLiteralWithUnderscoreBin() {
        String v = "0b0101_1010";
        Scanner sc = fac.newScanner(v, true);
        sc.nextToken();
        assertEquals(INTLITERAL,sc.token().kind);
        assertEquals("01011010",sc.token().stringVal());
        assertEquals(90,Integer.parseInt(sc.token().stringVal(),2));
    }

    @Test public void testIntLiteralWithUnderscoreHex() {
        String v = "0xDE_AF";
        Scanner sc = fac.newScanner(v, true);
        sc.nextToken();
        assertEquals(INTLITERAL,sc.token().kind);
        assertEquals("DEAF",sc.token().stringVal());
        assertEquals(57007,Integer.parseInt(sc.token().stringVal(),16));
    }

    @Test public void testIntLiteralWithUnderscoreHexLong() {
        String v = "0xDEAF_DEAF";
        Scanner sc = fac.newScanner(v, true);
        sc.nextToken();
        assertEquals(INTLITERAL,sc.token().kind);
        assertEquals("DEAFDEAF",sc.token().stringVal());
        assertEquals(3736067759L,Long.parseLong(sc.token().stringVal(),16));
    }

    @Test public void testDotDot() {
        helpScanner("//@..",
                new ITokenKind[]{DOT_DOT,EOF},
                new int[]{3,5,5,5},
                0);
    }

//    @Test public void testDotDot2() {
//        helpScanner("//@ modifies ..;",
//                new ITokenKind[]{ASSIGNABLE,DOT_DOT,SEMI,EOF},
//                null,
//                0);
//    }

    @Test public void testDotDot2a() {
        helpScanner("//@ 123..456;",
                new ITokenKind[]{INTLITERAL,DOT_DOT,INTLITERAL,SEMI,EOF},
                null,
                0);
    }

//    @Test public void testDotDot3() {
//        helpScanner("//@ modifies a[b .. c];",
//                new ITokenKind[]{ASSIGNABLE,IDENTIFIER,LBRACKET,IDENTIFIER,DOT_DOT,IDENTIFIER,RBRACKET,SEMI,EOF},
//                null,
//                0);
//    }
//
//    @Test public void testDotDot4() {
//        helpScanner("//@ modifies a[0..4];",
//                new ITokenKind[]{ASSIGNABLE,IDENTIFIER,LBRACKET,INTLITERAL,DOT_DOT,INTLITERAL,RBRACKET,SEMI,EOF},
//                null,
//                0);
//    }
//
//    @Test public void testDotDot4a() {
//        helpScanner("//@ modifies a[0 ..4];",
//                new ITokenKind[]{ASSIGNABLE,IDENTIFIER,LBRACKET,INTLITERAL,DOT_DOT,INTLITERAL,RBRACKET,SEMI,EOF},
//                null,
//                0);
//    }
//
//    @Test public void testDotDot5() {
//        helpScanner("//@ modifies ..234;",
//                new ITokenKind[]{ASSIGNABLE,DOT_DOT,INTLITERAL,SEMI,EOF},
//                null,
//                0);
//    }
//
//    @Test public void testDotDot6() {
//        helpScanner("//@ modifies .234;",
//                new ITokenKind[]{ASSIGNABLE,DOUBLELITERAL,SEMI,EOF},
//                null,
//                0);
//    }
//
//    @Test public void testDotDot7() {
//        helpScanner("//@ modifies 0.234;",
//                new ITokenKind[]{ASSIGNABLE,DOUBLELITERAL,SEMI,EOF},
//                null,
//                0);
//    }
//
//    @Test public void testDotDot8() {
//        helpScanner("//@ modifies a[0. .4];",
//                new ITokenKind[]{ASSIGNABLE,IDENTIFIER,LBRACKET,DOUBLELITERAL,DOUBLELITERAL,RBRACKET,SEMI,EOF},
//                null,
//                0);
//    }

    @Test public void testDotDot9() {
        helpScanner("//@ 0xApA     ",
                new ITokenKind[]{DOUBLELITERAL,IDENTIFIER,EJML,EOF},
                null,
                1);
        checkMessages("/TEST.java:1: malformed floating point literal",5);
    }

    @Test public void testDotDot10() {
        helpScanner("//@ 1.0eZ      ",
                new ITokenKind[]{DOUBLELITERAL,IDENTIFIER,EJML,EOF},
                null,
                1);
        checkMessages("/TEST.java:1: malformed floating point literal",5);
    }

    @Test public void testDotDot11() {
        helpScanner("//@ 0xA.0pZ     ",
                new ITokenKind[]{DOUBLELITERAL,IDENTIFIER,EJML,EOF},
                null,
                1);
        checkMessages("/TEST.java:1: malformed floating point literal",5);
    }

    @Test public void testDotDot12() {
        helpScanner("//@ 0xA.Z     ",
                new ITokenKind[]{DOUBLELITERAL,IDENTIFIER,EJML,EOF},
                null,
                1);
        checkMessages("/TEST.java:1: malformed floating point literal",5);
    }

    @Test public void testConditionalKey1() {
        helpScanner("//+POS@ requires      /*+POS@ requires */
/*@ non_null*/
//@ modifies foundErrors;

/*@ nullable*/
//@ modifies foundErrors;

/*@ non_null*/
//@ modifies foundErrors;

/*@ nullable*/
//@ modifies foundErrors;

/*@ non_null*/
//@ modifies foundErrors;

/*@ nullable*/
//@ modifies foundErrors;

/*@ non_null*/
//@ modifies foundErrors;

/*@ nullable*/
//@ modifies foundErrors;

/*@ non_null*/
//@ modifies foundErrors;

/*@ nullable*/
//@ modifies foundErrors;

/*@ non_null*/
/*@ non_null*/
/*@ non_null*/
/*@ non_null*/
/*@ non_null*/
/*@ non_null*/
/*@ non_null*/
/*@ non_null*/
/*@ non_null*/
/*@ non_null*/
//@ loop_invariant i>=0; decreasing -i;      for (int i=0; i<10; i++) {}      }}"

//@  loop_modifies k; loop_invariant i>=0; decreasing -i;     for (int i=0; i<10; i++) {}      }}"

//@ loop_modifies x;      for (int i=0; i<10; i++) {}      }}"

//@ loop_modifies j;      for (int i=0; i<10; i++) {}      }}"

//@ loop_modifies \    othing;      for (int i=0; i<10; i++) {}      }}"

//@ loop_modifies \\everything;      for (int i=0; i<10; i++) {}      }}"

//@ loop_modifies ;      for (int i=0; i<10; i++) {}      }}"

//@ loop_modifies k[;      for (int i=0; i<10; i++) {}      }}"

//@ loop_modifies k.;      for (int i=0; i<10; i++) {}      }}"

//@ loop_modifies k k k;      for (int i=0; i<10; i++) {}      }}"

//@ loop_modifies k,,;      for (int i=0; i<10; i++) {}      }}"

//@ loop_invariant o != null; decreasing 6;      for (Object o: list) {}      }}"

//@ loop_invariant i>=0; decreasing i;      while (i>=0) {}      }}"

//@ loop_invariant j;     for (int i=0; i<10; i++) {}      }}"

//@ loop_invariant j;     int a = 0;      }}"

//@ loop_invariant j;          }}"

//@ loop_invariant j;     j=true;     }}"

/*@ assume true; assert o==o;*/
//@ assume true: \"a\";     //@ assert false: \"b\";          }}"

/*@ assume 0; assert o;*/
/*@ assume ; assert ;*/
/*@ assume true assert false;*/
//@ unreachable;      i = 0;     }}"

//@ unreachable      i = 0;     }}"

//@ ghost int j; set j = 1;      i = 0;     }}"

//@ ghost int j; set j = 1      i = 0;     }}"

//@ ghost int j; set if (true) {};      i = 0;     }}"

//@ ghost boolean j; set j =  (o <==> \\old(o));      i = 0;     }}"

//@ ghost int j; debug m();      i = 0;     }}"

//@ ghost int j; debug m()      i = 0;     }}"

//@ ghost int j; debug while (i>0) {};      i = 0;     }}"

//@ ghost int j; final ghost int k = 0;      i = 0;     }}"

//@ ghost int j; ghost final int k = 0;      i = 0;     }}"

//@ refining ensures i ==0;      i = 0;     }}"

//@ refining normal_behavior ensures i ==0; also behavior ensures i >= 0;      i = 0;     }}"

//@ refining also ensures i ==0;      i = 0;     }}"

//@ refining public behavior ensures i ==0;      i = 0;     }}"

//@ loop_invariant i>=0; decreasing -i;      for (int i=0; i<10; i++) {}      }}"

//@  loop_modifies k; loop_invariant i>=0; decreasing -i;     for (int i=0; i<10; i++) {}      }}"

//@ loop_modifies x;      for (int i=0; i<10; i++) {}      }}"

//@ loop_modifies j;      for (int i=0; i<10; i++) {}      }}"

//@ loop_modifies \    othing;      for (int i=0; i<10; i++) {}      }}"

//@ loop_modifies \\everything;      for (int i=0; i<10; i++) {}      }}"

//@ loop_modifies ;      for (int i=0; i<10; i++) {}      }}"

//@ loop_modifies k[;      for (int i=0; i<10; i++) {}      }}"

//@ loop_modifies k.;      for (int i=0; i<10; i++) {}      }}"

//@ loop_modifies k k k;      for (int i=0; i<10; i++) {}      }}"

//@ loop_modifies k,,;      for (int i=0; i<10; i++) {}      }}"

//@ loop_invariant o != null; decreasing 6;      for (Object o: list) {}      }}"

//@ loop_invariant i>=0; decreasing i;      while (i>=0) {}      }}"

//@ loop_invariant j;     for (int i=0; i<10; i++) {}      }}"

//@ loop_invariant j;     int a = 0;      }}"

//@ loop_invariant j;          }}"

//@ loop_invariant j;     j=true;     }}"

/*@ assume true; assert o==o;*/
//@ assume true: \"a\";     //@ assert false: \"b\";          }}"

/*@ assume 0; assert o;*/
/*@ assume ; assert ;*/
/*@ assume true assert false;*/
//@ unreachable;      i = 0;     }}"

//@ unreachable      i = 0;     }}"

//@ ghost int j; set j = 1;      i = 0;     }}"

//@ ghost int j; set j = 1      i = 0;     }}"

//@ ghost int j; set if (true) {};      i = 0;     }}"

//@ ghost boolean j; set j =  (o <==> \\old(o));      i = 0;     }}"

//@ ghost int j; debug m();      i = 0;     }}"

//@ ghost int j; debug m()      i = 0;     }}"

//@ ghost int j; debug while (i>0) {};      i = 0;     }}"

//@ ghost int j; final ghost int k = 0;      i = 0;     }}"

//@ ghost int j; ghost final int k = 0;      i = 0;     }}"

//@ refining ensures i ==0;      i = 0;     }}"

//@ refining normal_behavior ensures i ==0; also behavior ensures i >= 0;      i = 0;     }}"

//@ refining also ensures i ==0;      i = 0;     }}"

//@ refining public behavior ensures i ==0;      i = 0;     }}"

//@ loop_invariant i>=0; decreasing -i;      for (int i=0; i<10; i++) {}      }}"

//@  loop_modifies k; loop_invariant i>=0; decreasing -i;     for (int i=0; i<10; i++) {}      }}"

//@ loop_modifies x;      for (int i=0; i<10; i++) {}      }}"

//@ loop_modifies j;      for (int i=0; i<10; i++) {}      }}"

//@ loop_modifies \    othing;      for (int i=0; i<10; i++) {}      }}"

//@ loop_modifies \\everything;      for (int i=0; i<10; i++) {}      }}"

//@ loop_modifies ;      for (int i=0; i<10; i++) {}      }}"

//@ loop_modifies k[;      for (int i=0; i<10; i++) {}      }}"

//@ loop_modifies k.;      for (int i=0; i<10; i++) {}      }}"

//@ loop_modifies k k k;      for (int i=0; i<10; i++) {}      }}"

//@ loop_modifies k,,;      for (int i=0; i<10; i++) {}      }}"

//@ loop_invariant o != null; decreasing 6;      for (Object o: list) {}      }}"

//@ loop_invariant i>=0; decreasing i;      while (i>=0) {}      }}"

//@ loop_invariant j;     for (int i=0; i<10; i++) {}      }}"

//@ loop_invariant j;     int a = 0;      }}"

//@ loop_invariant j;          }}"

//@ loop_invariant j;     j=true;     }}"

/*@ assume true; assert o==o;*/
//@ assume true: \"a\";     //@ assert false: \"b\";          }}"

/*@ assume 0; assert o;*/
/*@ assume ; assert ;*/
/*@ assume true assert false;*/
//@ unreachable;      i = 0;     }}"

//@ unreachable      i = 0;     }}"

//@ ghost int j; set j = 1;      i = 0;     }}"

//@ ghost int j; set j = 1      i = 0;     }}"

//@ ghost int j; set if (true) {};      i = 0;     }}"

//@ ghost boolean j; set j =  (o <==> \\old(o));      i = 0;     }}"

//@ ghost int j; debug m();      i = 0;     }}"

//@ ghost int j; debug m()      i = 0;     }}"

//@ ghost int j; debug while (i>0) {};      i = 0;     }}"

//@ ghost int j; final ghost int k = 0;      i = 0;     }}"

//@ ghost int j; ghost final int k = 0;      i = 0;     }}"

//@ refining ensures i ==0;      i = 0;     }}"

//@ refining normal_behavior ensures i ==0; also behavior ensures i >= 0;      i = 0;     }}"

//@ refining also ensures i ==0;      i = 0;     }}"

//@ refining public behavior ensures i ==0;      i = 0;     }}"

//@ loop_invariant i>=0; decreasing -i;      for (int i=0; i<10; i++) {}      }}"

//@  loop_modifies k; loop_invariant i>=0; decreasing -i;     for (int i=0; i<10; i++) {}      }}"

//@ loop_modifies x;      for (int i=0; i<10; i++) {}      }}"

//@ loop_modifies j;      for (int i=0; i<10; i++) {}      }}"

//@ loop_modifies \    othing;      for (int i=0; i<10; i++) {}      }}"

//@ loop_modifies \\everything;      for (int i=0; i<10; i++) {}      }}"

//@ loop_modifies ;      for (int i=0; i<10; i++) {}      }}"

//@ loop_modifies k[;      for (int i=0; i<10; i++) {}      }}"

//@ loop_modifies k.;      for (int i=0; i<10; i++) {}      }}"

//@ loop_modifies k k k;      for (int i=0; i<10; i++) {}      }}"

//@ loop_modifies k,,;      for (int i=0; i<10; i++) {}      }}"

//@ loop_invariant o != null; decreasing 6;      for (Object o: list) {}      }}"

//@ loop_invariant i>=0; decreasing i;      while (i>=0) {}      }}"

//@ loop_invariant j;     for (int i=0; i<10; i++) {}      }}"

//@ loop_invariant j;     int a = 0;      }}"

//@ loop_invariant j;          }}"

//@ loop_invariant j;     j=true;     }}"

/*@ assume true; assert o==o;*/
//@ assume true: \"a\";     //@ assert false: \"b\";          }}"

/*@ assume 0; assert o;*/
/*@ assume ; assert ;*/
/*@ assume true assert false;*/
//@ unreachable;      i = 0;     }}"

//@ unreachable      i = 0;     }}"

//@ ghost int j; set j = 1;      i = 0;     }}"

//@ ghost int j; set j = 1      i = 0;     }}"

//@ ghost int j; set if (true) {};      i = 0;     }}"

//@ ghost boolean j; set j =  (o <==> \\old(o));      i = 0;     }}"

//@ ghost int j; debug m();      i = 0;     }}"

//@ ghost int j; debug m()      i = 0;     }}"

//@ ghost int j; debug while (i>0) {};      i = 0;     }}"

//@ ghost int j; final ghost int k = 0;      i = 0;     }}"

//@ ghost int j; ghost final int k = 0;      i = 0;     }}"

//@ refining ensures i ==0;      i = 0;     }}"

//@ refining normal_behavior ensures i ==0; also behavior ensures i >= 0;      i = 0;     }}"

//@ refining also ensures i ==0;      i = 0;     }}"

//@ refining public behavior ensures i ==0;      i = 0;     }}"

//@ loop_invariant i>=0; decreasing -i;      for (int i=0; i<10; i++) {}      }}"

//@  loop_modifies k; loop_invariant i>=0; decreasing -i;     for (int i=0; i<10; i++) {}      }}"

//@ loop_modifies x;      for (int i=0; i<10; i++) {}      }}"

//@ loop_modifies j;      for (int i=0; i<10; i++) {}      }}"

//@ loop_modifies \    othing;      for (int i=0; i<10; i++) {}      }}"

//@ loop_modifies \\everything;      for (int i=0; i<10; i++) {}      }}"

//@ loop_modifies ;      for (int i=0; i<10; i++) {}      }}"

//@ loop_modifies k[;      for (int i=0; i<10; i++) {}      }}"

//@ loop_modifies k.;      for (int i=0; i<10; i++) {}      }}"

//@ loop_modifies k k k;      for (int i=0; i<10; i++) {}      }}"

//@ loop_modifies k,,;      for (int i=0; i<10; i++) {}      }}"

//@ loop_invariant o != null; decreasing 6;      for (Object o: list) {}      }}"

//@ loop_invariant i>=0; decreasing i;      while (i>=0) {}      }}"

//@ loop_invariant j;     for (int i=0; i<10; i++) {}      }}"

//@ loop_invariant j;     int a = 0;      }}"

//@ loop_invariant j;          }}"

//@ loop_invariant j;     j=true;     }}"

/*@ assume true; assert o==o;*/
//@ assume true: \"a\";     //@ assert false: \"b\";          }}"

/*@ assume 0; assert o;*/
/*@ assume ; assert ;*/
/*@ assume true assert false;*/
//@ unreachable;      i = 0;     }}"

//@ unreachable      i = 0;     }}"

//@ ghost int j; set j = 1;      i = 0;     }}"

//@ ghost int j; set j = 1      i = 0;     }}"

//@ ghost int j; set if (true) {};      i = 0;     }}"

//@ ghost boolean j; set j =  (o <==> \\old(o));      i = 0;     }}"

//@ ghost int j; debug m();      i = 0;     }}"

//@ ghost int j; debug m()      i = 0;     }}"

//@ ghost int j; debug while (i>0) {};      i = 0;     }}"

//@ ghost int j; final ghost int k = 0;      i = 0;     }}"

//@ ghost int j; ghost final int k = 0;      i = 0;     }}"

//@ refining ensures i ==0;      i = 0;     }}"

//@ refining normal_behavior ensures i ==0; also behavior ensures i >= 0;      i = 0;     }}"

//@ refining also ensures i ==0;      i = 0;     }}"

//@ refining public behavior ensures i ==0;      i = 0;     }}"

//@ ghost int i = (\\lbl A 0);     }"

//@ ghost int i = (\\lbl A 0);     }"

//@ assert \\count == i;     " +

//@ assert \\count == i;     " +

//@ assert \\values.size() >= 0;     " +

//@ assert \\values.size() >= 0;     " +

//@ signals (Exception) \\exception != null;    " +

//@ signals (Exception) \\exception != null;    " +

/*@ secret */
/*@ secret */
//@ query    " +

//@ query    " +

//@ assignable a[0..];    " +

//@ assignable a[0..];    " +

//@  model static int i; static represents i <- j;

//@ ghost int i = (\\lbl A 0);     }"

//@ ghost int i = (\\lbl A 0);     }"

//@ assert \\count == i;     " +

//@ assert \\count == i;     " +

//@ assert \\values.size() >= 0;     " +

//@ assert \\values.size() >= 0;     " +

//@ signals (Exception) \\exception != null;    " +

//@ signals (Exception) \\exception != null;    " +

/*@ secret */
/*@ secret */
//@ query    " +

//@ query    " +

//@ assignable a[0..];    " +

//@ assignable a[0..];    " +

//@  model static int i; static represents i <- j;

//@ ghost int i = (\\lbl A 0);     }"

//@ ghost int i = (\\lbl A 0);     }"

//@ assert \\count == i;     " +

//@ assert \\count == i;     " +

//@ assert \\values.size() >= 0;     " +

//@ assert \\values.size() >= 0;     " +

//@ signals (Exception) \\exception != null;    " +

//@ signals (Exception) \\exception != null;    " +

/*@ secret */
/*@ secret */
//@ query    " +

//@ query    " +

//@ assignable a[0..];    " +

//@ assignable a[0..];    " +

//@  model static int i; static represents i <- j;

//@ ghost int i = (\\lbl A 0);     }"

//@ ghost int i = (\\lbl A 0);     }"

//@ assert \\count == i;     " +

//@ assert \\count == i;     " +

//@ assert \\values.size() >= 0;     " +

//@ assert \\values.size() >= 0;     " +

//@ signals (Exception) \\exception != null;    " +

//@ signals (Exception) \\exception != null;    " +

/*@ secret */
/*@ secret */
//@ query    " +

//@ query    " +

//@ assignable a[0..];    " +

//@ assignable a[0..];    " +

//@  model static int i; static represents i <- j;

//@ ghost int i = (\\lbl A 0);     }"

//@ ghost int i = (\\lbl A 0);     }"

//@ assert \\count == i;     " +

//@ assert \\count == i;     " +

//@ assert \\values.size() >= 0;     " +

//@ assert \\values.size() >= 0;     " +

//@ signals (Exception) \\exception != null;    " +

//@ signals (Exception) \\exception != null;    " +

/*@ secret */
/*@ secret */
//@ query    " +

//@ query    " +

//@ assignable a[0..];    " +

//@ assignable a[0..];    " +

//@  model static int i; static represents i <- j;

//@ public model JMLDataGroup streamState;

//@ public model JMLDataGroup streamState;

//@ public model JMLDataGroup streamState;

//@ public model JMLDataGroup streamState;

//@ public model JMLDataGroup streamState;

//@ assert k;    }

//@ assert <Object>\\old(k);    }}"

/*@ also requires true; */
/*@ requires true; */
/*@ requires true; */
/*@ also requires true; */
/*@ also requires true; */
/*@ requires true; */
/*@ public normal_behavior requires true; */
/*@ also requires true; */
/*@ also requires true; */
/*@ requires true; */
/*@ requires true; */
/*@ also requires true; */
/*@ also public normal_behavior requires true; */
/*@ public normal_behavior requires true; */
//@ assert \\old;    }

//@ assert \\old();    }

//@ assert \\pre();    }

//@ assert \\old(k);    }

//@ assert \\old(b);    }}");

//@ assert \\pre(b,k);    }

//@ assert \\old(b,5);    }

//@ assert \\old(b,k);    }}"

//@ requires \\old(b);      void m() { }

//@ ensures \\old(b,k);      void m() { }

//@ requires \\pre(b);      void m() { }

//@ assert \\old(b,k);    }}"

//@ assert \\old(bb) && \\old(bb,k);    }}"

//@ assert \\old(b,k);    }}"

//@ assert \\max(\\lockset);    }

//@ assert \\max;    }

//@ assert \\max();    }

//@ assert \\max(k);    }

//@ assert \\max(b,k);    }

//@ assert \\invariant_for(i);    }}"

//@ assert \\invariant_for(k);    }}"

//@ assert \\invariant_for(A);    }}"

//@ assert \\invariant_for();    }}"

//@ assert \\invariant_for(Integer,k);    }}"

//@ assert \\invariant_for(Integer,k);    }}"

//@ assert \\invariant_for(Integer,k);    }}"

//@ assert \\invariant_for();    }}"

//@ assert \\type(A,k);    }}"

//@ assert \\type();    }}"

//@ assert \\type(b);    }}"

//@ assert \\type(true);    }}"

//@ assert \\type(int);    }}"

//@ assert \\type(int[][]);    }}"

//@ assert \\type(Object);    }}"

//@ assert \\type(java.lang.Object);    }}"

//@ assert \\type(java.lang.Object[][]);    }}"

//@ assert \\type(A);    }}"

//@ assert \\type(void);    }}"

//@ assert \\type(Void);    }}"

//@ assert \\typeof(b);    }

//@ assert \\result;    }}"

//@ ensures \\result;     void m() {     }

//@ assert \\result;     void m() {     }

/*@ ensures \\result == 1; */
/*@ ensures \\result == 1; */
/*@ ensures \\result     ; */
//@ return true;    }}"

/*@ ensures \\result     ; */
//@ int t;    }}"

/*@ ghost \\TYPE t; */
/*@ ghost \\TYPE t,tt; */
/*@ ghost \\bigint i; model \\real r; ghost \\TYPE t; */
/*@  \\TYPE t; */
/*@ @Ghost int i; */
/*@ ghost \\TYPE t; */
//@ensures t <: t;    void m() {}}");

/*@ ghost \\TYPE t; */
//@ensures c <: c;    void m() {}}");

/*@ ghost \\TYPE t; */
//@ensures c <: c;    void m() {}}");

/*@ ghost \\TYPE t; */
//@ensures c <: c;    void m() {}}");

/*@ ghost \\TYPE t; */
//@ensures t <: \\typeof(o);    void m() {}}"

/*@ ghost \\TYPE t; */
//@ensures o.getClass() <: Object.class;    void m() {}}"

/*@ ghost \\TYPE t; */
//@ensures JML.erasure(t) <: c;    void m() {}}");

/*@ ghost \\TYPE t; */
//@ensures t <: 5;    void m() {}

/*@ ghost \\TYPE t; */
//@ensures true <: c;    void m() {}

//@ ghost \\TYPE t = \\type(java.lang.Integer);

//@ ghost \\TYPE t = \\type(java.util.List);

//@ ghost \\TYPE t = \\type(java.util.List<Integer>);

//@ ghost Class<?> t = \\erasure(\\type(java.lang.Integer));

//@ ghost Class<?> t = \\erasure(\\type(java.util.List));

//@ ghost Class<?> t = \\erasure(\\type(java.util.List<Integer>));

//@requires \\result == 0;     int m() {return 0;}

//@ invariant new JMLSetType { Integer i | c.contains(i) && i<10};           }"

//@ requires new JMLSetType { Integer i | c.contains(i) && i<10};      void m() {}      }"

//@ ghost Object j;      //@ requires m( (\\exists int i; 0 < i && i <10; m(i)) );     /*@pure*/boolean m(int k) { return false; }     

//@ ghost int k = new JMLSetType { Integer i | c.contains(i) && i<10};      void m() {}      }"

//@ ghost Object k = new JMLSetType { Integer i | c.contains(i) && p<10};      void m() {}      }"

//@ ghost Object k = new JMLSetType { Integer i | c.contains(i) && i<10};      void m() {}      }"

//@ ghost Object j = m( (\\exists int i; 0 < i && i <10; m(i)) );     boolean m(int k) { return false; }     

//@ ghost Object j = m( (\\exists int i; 0 < i && i <10; m(i)) );     boolean m(boolean k) { return false; } boolean m(int p) { return false; }     }"

//@ ghost Object j = m( (\\exists int i; 0 < i && i <10; m(i)) );     boolean m(boolean k) { return false; }      }"

//@ ghost boolean j = ( (\\exists int i; 0 < i && i <10; m(p)) );     boolean m(int k) { return false; }      }"

//@ ghost int k = new JMLSetType { Integer i | c.contains(i) && i<10};     }      }"

//@ ghost Object k = new JMLSetType { Integer i | c.contains(i) && p<10};     }      }"

//@ ghost Object k = new JMLSetType { Integer i | c.contains(i) && i<10};     }      }"

//@ ghost Object j = m( (\\exists int i; 0 < i && i <10; m(i)) );      return false; }     

//@ ghost boolean j = ( (\\exists int i; 0 < i && i <10; m(i)) );      return false; }     }"

//@ ghost boolean j = ( (\\exists int i; 0 < i && i <10; m(p)) );      return false; }     

//@ ghost Object k;       java.util.Collection c;  void m() { //@ set k = new JMLSetType { Integer i | c.contains(i) && i<10};     }      }"

//@ ghost int j;            boolean m(int k) { //@ set j = m( (\\exists int i; 0 < i && i <10; m(i)) );      return false; }     

//@ ghost Object j;      /*@pure*/ boolean m(int i) { return false; }    //@ invariant m( (\\exists int i; 0 < i && i <10; m(i)) );      

//@ ghost Object j;      /*@pure*/ boolean m(int i) { return false; }    //@ invariant m( (\\forall int i; 0 < i && i <10; m(i)) );      

//@ ghost Object j;      /*@pure*/ boolean m(int i) { return false; }    //@ invariant (\    um_of int i; 0 < i && i <10; m(i)) ;      

//@ ghost Object j;      boolean m(int i) { return false; }    //@ invariant (\\max long i; 0 < i && i <10; i) ;      

//@ ghost Object j;      boolean m(float i) { return false; }    //@ invariant (\\sum long i; 0 < i && i <10; i) ;      

//@ ghost Object j;      boolean m(double i) { return false; }    //@ invariant (\\product long i,k; 0 < i && k <10; i) ;      

//@ ghost Object j;      boolean m(double i) { return false; }    //@ invariant (\\product long i; j; i) ;      

//@ invariant (\\product long i; 0 < j && i <10; i) ;      

//@ invariant (\\exists int i; 0 < i && i <10;  i > -1) ;      //@ static invariant (\\exists int i; 0 < i && i <10;  i > -1) ;      void m() {}}"

//@ invariant (\\exists int i; 0 < i && i <10;  i > m) ;      //@ static invariant (\\exists int i; 0 < i && i <10;  i > m) ;      void m() {}}"

//@ static invariant (\\exists int i; 0 < i && i <10;  i > s) ;      //@ static invariant (\\exists int i; 0 < i && i <10;  i > s) ;      void m() {}}"

//@ ghost boolean b = (\\exists int i; 0 < i && i <10;  i > m) ;      //@ static ghost boolean bb = (\\exists int i; 0 < i && i <10;  i > m) ;      //@ requires b && bb;     void m() {}}"

//@ ghost boolean b = (\\exists int i; 0 < i && i <10;  i > s) ;      //@ static ghost boolean bb = (\\exists int i; 0 < i && i <10;  i > s) ;      //@ requires b && bb;     void m() {}}"

//@ requires (\\exists int i; 0 < i && i <10;  i > -1) ;       void m() {}}"

//@ requires (\\exists int i; 0 < i && i <10;  i > -1) ;       static void m() {}}"

//@ assert (\\let int i = 0; i != 0);     }}"

//@ assert 0 == (\\let int i = 0, int j = 2; i - j);     }}"

//@ assert (\\let int i = 0; i);     }}"

//@ assert (\\let int i; i==0);     }}"

//@ assert (\\let int i=0; i==0);      i = true; }}"

//@ assert (\\let int i=0; i==0);      i = true; }}"

//@ invariant (\\let int i=0; i==0);       }"

//@ assert (\\let int i=0; i==j);       }}"

//@ invariant (\\let int i=0; i==j);       }"

//@ assert (\\let int i=0; i==j);       }}"

//@ invariant (\\let int i=0; i==j);       }"

//@ requires  i; also requires \\same;      boolean m(boolean i) { return false; }

//@ requires 1+\\same;      boolean m(double i) { return false; },

//@ requires i; also requires !\\same;      boolean m(boolean i) { return false; }

//@ requires \\same;      boolean m(double i) { return false; }

//@ ensures \\same;      boolean m(double i) { return false; }

//@ invariant o < oo;      }"

//@ invariant o < oo;      }"

//@ invariant o <= oo;      }"

//@ invariant o <= oo;      }"

//@ invariant o < true;      }"

//@ invariant o < 5;      }"

//@ invariant o < 5;      }"

//@ invariant o <# oo;      }"

//@ invariant o <#= oo;      }"

//@ invariant \\fresh(o);       }"

//@ ensures \\fresh(o);      void m() {}      }"

//@ ensures \\fresh(o,oo);      void m() {}       }"

//@ ensures \\fresh();      void m() {}       }"

//@ ensures   \\fresh(i);      void m() {}       }"

//@ ensures   \\fresh(o) + 1 == 0;      void m() {}       }"

//@ ghost boolean k = \\fresh(o);       }"

//@ invariant \\only_assigned(o) || \\only_accessed(o) || \\only_captured(o) || \    ot_assigned(o) || \    ot_modified(o);       }"

//@ ensures \\only_assigned(o) || \\only_accessed(o) || \\only_captured(o) || \    ot_assigned(o) || \    ot_modified(o);      void m() {}      }"

//@ ghost boolean k = \\only_assigned(o) || \\only_accessed(o) || \\only_captured(o) || \    ot_assigned(o) || \    ot_modified(o);       }"

//@ invariant (* stuff *);     //@ ghost int k = (* stuff *);       }"

//@ public model int duration;       void m() { //@ set duration = 0;     }      }"

//@ model import java.util.List;     public class A {     //@ ghost List k;     List n;       }"

//@ model import java.util.*;     public class A {     //@ ghost List k;     List n;       }"

//@ model import java.util.List;     public class A {     //@ ghost List k;     List n;       }"

//@ import java.util.List;     public class A {     //@ ghost List k;     List n;       }"

/*@ model */
/*@ model */
/*@ model import */
/*@ instance ghost V r; @*/
//@ loop_invariant 0<=i && i <= blub.length;    "

/*@nullable @*/
//@ loop_invariant 0<=i && i <= blub.length;    "

/*@nullable @*/
/*@ in height; @*/
/*@ public model int height;    "
                +"      in_redundantly height;    "
                +"      public invariant 0 < height;    "
                +"      public constraint \\old(height) == height;    "
                +"      private represents height = my_height;    "
                +"      private invariant 0 < my_height;    "
                +"  @*/
/*@ in height; @*/
/*@ public model int height;    "
                +"      in_redundantly height2;    "
                +"  @*/
/*@ public model int height2;    "
                +"      in_redundantly height;    "
                +"  @*/
//@ ghost boolean b4 = \\type(java.util.Map<java.util.List<?>,?>) <: \\type(java.util.List<?>);

/*@ public invariant (\\sum Integer i; 0<=i && i < 6; new Object()); */
//@ ghost boolean bb = (\\forall int i; 0<=i && i <=4; 0!=(\\lbl LBL i));    "

//@ model public void m1bad(java.util.function.Function<Integer,Integer> f) ;    "

//@ public behavior requires true;    "

//@ protected behavior requires true;    "

//@ behavior requires true;    "

//@ private behavior requires true;    "

//@ requires true;    "

//@ public behavior requires true;    "  // Warning

//@ protected behavior requires true;    "

//@ behavior requires true;    "

//@ private behavior requires true;    "

//@ requires true;    "

//@ public behavior requires true;    " // Warning

//@ protected behavior requires true;    " // Warning

//@ behavior requires true;    "  // Warning

//@ private behavior requires true;    "

//@ requires true;    "

//@ public behavior requires true;    " // Warning

//@ protected behavior requires true;    " // Warning

//@ behavior requires true;    "

//@ private behavior requires true;    "

//@ requires true;    "

//@ assert k;    }

//@ assert <Object>\\old(k);    }}"

/*@ also requires true; */
/*@ requires true; */
/*@ requires true; */
/*@ also requires true; */
/*@ also requires true; */
/*@ requires true; */
/*@ public normal_behavior requires true; */
/*@ also requires true; */
/*@ also requires true; */
/*@ requires true; */
/*@ requires true; */
/*@ also requires true; */
/*@ also public normal_behavior requires true; */
/*@ public normal_behavior requires true; */
//@ assert \\old;    }

//@ assert \\old();    }

//@ assert \\pre();    }

//@ assert \\old(k);    }

//@ assert \\old(b);    }}");

//@ assert \\pre(b,k);    }

//@ assert \\old(b,5);    }

//@ assert \\old(b,k);    }}"

//@ requires \\old(b);      void m() { }

//@ ensures \\old(b,k);      void m() { }

//@ requires \\pre(b);      void m() { }

//@ assert \\old(b,k);    }}"

//@ assert \\old(bb) && \\old(bb,k);    }}"

//@ assert \\old(b,k);    }}"

//@ assert \\max(\\lockset);    }

//@ assert \\max;    }

//@ assert \\max();    }

//@ assert \\max(k);    }

//@ assert \\max(b,k);    }

//@ assert \\invariant_for(i);    }}"

//@ assert \\invariant_for(k);    }}"

//@ assert \\invariant_for(A);    }}"

//@ assert \\invariant_for();    }}"

//@ assert \\invariant_for(Integer,k);    }}"

//@ assert \\invariant_for(Integer,k);    }}"

//@ assert \\invariant_for(Integer,k);    }}"

//@ assert \\invariant_for();    }}"

//@ assert \\type(A,k);    }}"

//@ assert \\type();    }}"

//@ assert \\type(b);    }}"

//@ assert \\type(true);    }}"

//@ assert \\type(int);    }}"

//@ assert \\type(int[][]);    }}"

//@ assert \\type(Object);    }}"

//@ assert \\type(java.lang.Object);    }}"

//@ assert \\type(java.lang.Object[][]);    }}"

//@ assert \\type(A);    }}"

//@ assert \\type(void);    }}"

//@ assert \\type(Void);    }}"

//@ assert \\typeof(b);    }

//@ assert \\result;    }}"

//@ ensures \\result;     void m() {     }

//@ assert \\result;     void m() {     }

/*@ ensures \\result == 1; */
/*@ ensures \\result == 1; */
/*@ ensures \\result     ; */
//@ return true;    }}"

/*@ ensures \\result     ; */
//@ int t;    }}"

/*@ ghost \\TYPE t; */
/*@ ghost \\TYPE t,tt; */
/*@ ghost \\bigint i; model \\real r; ghost \\TYPE t; */
/*@  \\TYPE t; */
/*@ @Ghost int i; */
/*@ ghost \\TYPE t; */
//@ensures t <: t;    void m() {}}");

/*@ ghost \\TYPE t; */
//@ensures c <: c;    void m() {}}");

/*@ ghost \\TYPE t; */
//@ensures c <: c;    void m() {}}");

/*@ ghost \\TYPE t; */
//@ensures c <: c;    void m() {}}");

/*@ ghost \\TYPE t; */
//@ensures t <: \\typeof(o);    void m() {}}"

/*@ ghost \\TYPE t; */
//@ensures o.getClass() <: Object.class;    void m() {}}"

/*@ ghost \\TYPE t; */
//@ensures JML.erasure(t) <: c;    void m() {}}");

/*@ ghost \\TYPE t; */
//@ensures t <: 5;    void m() {}

/*@ ghost \\TYPE t; */
//@ensures true <: c;    void m() {}

//@ ghost \\TYPE t = \\type(java.lang.Integer);

//@ ghost \\TYPE t = \\type(java.util.List);

//@ ghost \\TYPE t = \\type(java.util.List<Integer>);

//@ ghost Class<?> t = \\erasure(\\type(java.lang.Integer));

//@ ghost Class<?> t = \\erasure(\\type(java.util.List));

//@ ghost Class<?> t = \\erasure(\\type(java.util.List<Integer>));

//@requires \\result == 0;     int m() {return 0;}

//@ invariant new JMLSetType { Integer i | c.contains(i) && i<10};           }"

//@ requires new JMLSetType { Integer i | c.contains(i) && i<10};      void m() {}      }"

//@ ghost Object j;      //@ requires m( (\\exists int i; 0 < i && i <10; m(i)) );     /*@pure*/boolean m(int k) { return false; }     

//@ ghost int k = new JMLSetType { Integer i | c.contains(i) && i<10};      void m() {}      }"

//@ ghost Object k = new JMLSetType { Integer i | c.contains(i) && p<10};      void m() {}      }"

//@ ghost Object k = new JMLSetType { Integer i | c.contains(i) && i<10};      void m() {}      }"

//@ ghost Object j = m( (\\exists int i; 0 < i && i <10; m(i)) );     boolean m(int k) { return false; }     

//@ ghost Object j = m( (\\exists int i; 0 < i && i <10; m(i)) );     boolean m(boolean k) { return false; } boolean m(int p) { return false; }     }"

//@ ghost Object j = m( (\\exists int i; 0 < i && i <10; m(i)) );     boolean m(boolean k) { return false; }      }"

//@ ghost boolean j = ( (\\exists int i; 0 < i && i <10; m(p)) );     boolean m(int k) { return false; }      }"

//@ ghost int k = new JMLSetType { Integer i | c.contains(i) && i<10};     }      }"

//@ ghost Object k = new JMLSetType { Integer i | c.contains(i) && p<10};     }      }"

//@ ghost Object k = new JMLSetType { Integer i | c.contains(i) && i<10};     }      }"

//@ ghost Object j = m( (\\exists int i; 0 < i && i <10; m(i)) );      return false; }     

//@ ghost boolean j = ( (\\exists int i; 0 < i && i <10; m(i)) );      return false; }     }"

//@ ghost boolean j = ( (\\exists int i; 0 < i && i <10; m(p)) );      return false; }     

//@ ghost Object k;       java.util.Collection c;  void m() { //@ set k = new JMLSetType { Integer i | c.contains(i) && i<10};     }      }"

//@ ghost int j;            boolean m(int k) { //@ set j = m( (\\exists int i; 0 < i && i <10; m(i)) );      return false; }     

//@ ghost Object j;      /*@pure*/ boolean m(int i) { return false; }    //@ invariant m( (\\exists int i; 0 < i && i <10; m(i)) );      

//@ ghost Object j;      /*@pure*/ boolean m(int i) { return false; }    //@ invariant m( (\\forall int i; 0 < i && i <10; m(i)) );      

//@ ghost Object j;      /*@pure*/ boolean m(int i) { return false; }    //@ invariant (\    um_of int i; 0 < i && i <10; m(i)) ;      

//@ ghost Object j;      boolean m(int i) { return false; }    //@ invariant (\\max long i; 0 < i && i <10; i) ;      

//@ ghost Object j;      boolean m(float i) { return false; }    //@ invariant (\\sum long i; 0 < i && i <10; i) ;      

//@ ghost Object j;      boolean m(double i) { return false; }    //@ invariant (\\product long i,k; 0 < i && k <10; i) ;      

//@ ghost Object j;      boolean m(double i) { return false; }    //@ invariant (\\product long i; j; i) ;      

//@ invariant (\\product long i; 0 < j && i <10; i) ;      

//@ invariant (\\exists int i; 0 < i && i <10;  i > -1) ;      //@ static invariant (\\exists int i; 0 < i && i <10;  i > -1) ;      void m() {}}"

//@ invariant (\\exists int i; 0 < i && i <10;  i > m) ;      //@ static invariant (\\exists int i; 0 < i && i <10;  i > m) ;      void m() {}}"

//@ static invariant (\\exists int i; 0 < i && i <10;  i > s) ;      //@ static invariant (\\exists int i; 0 < i && i <10;  i > s) ;      void m() {}}"

//@ ghost boolean b = (\\exists int i; 0 < i && i <10;  i > m) ;      //@ static ghost boolean bb = (\\exists int i; 0 < i && i <10;  i > m) ;      //@ requires b && bb;     void m() {}}"

//@ ghost boolean b = (\\exists int i; 0 < i && i <10;  i > s) ;      //@ static ghost boolean bb = (\\exists int i; 0 < i && i <10;  i > s) ;      //@ requires b && bb;     void m() {}}"

//@ requires (\\exists int i; 0 < i && i <10;  i > -1) ;       void m() {}}"

//@ requires (\\exists int i; 0 < i && i <10;  i > -1) ;       static void m() {}}"

//@ assert (\\let int i = 0; i != 0);     }}"

//@ assert 0 == (\\let int i = 0, int j = 2; i - j);     }}"

//@ assert (\\let int i = 0; i);     }}"

//@ assert (\\let int i; i==0);     }}"

//@ assert (\\let int i=0; i==0);      i = true; }}"

//@ assert (\\let int i=0; i==0);      i = true; }}"

//@ invariant (\\let int i=0; i==0);       }"

//@ assert (\\let int i=0; i==j);       }}"

//@ invariant (\\let int i=0; i==j);       }"

//@ assert (\\let int i=0; i==j);       }}"

//@ invariant (\\let int i=0; i==j);       }"

//@ requires  i; also requires \\same;      boolean m(boolean i) { return false; }

//@ requires 1+\\same;      boolean m(double i) { return false; },

//@ requires i; also requires !\\same;      boolean m(boolean i) { return false; }

//@ requires \\same;      boolean m(double i) { return false; }

//@ ensures \\same;      boolean m(double i) { return false; }

//@ invariant o < oo;      }"

//@ invariant o < oo;      }"

//@ invariant o <= oo;      }"

//@ invariant o <= oo;      }"

//@ invariant o < true;      }"

//@ invariant o < 5;      }"

//@ invariant o < 5;      }"

//@ invariant o <# oo;      }"

//@ invariant o <#= oo;      }"

//@ invariant \\fresh(o);       }"

//@ ensures \\fresh(o);      void m() {}      }"

//@ ensures \\fresh(o,oo);      void m() {}       }"

//@ ensures \\fresh();      void m() {}       }"

//@ ensures   \\fresh(i);      void m() {}       }"

//@ ensures   \\fresh(o) + 1 == 0;      void m() {}       }"

//@ ghost boolean k = \\fresh(o);       }"

//@ invariant \\only_assigned(o) || \\only_accessed(o) || \\only_captured(o) || \    ot_assigned(o) || \    ot_modified(o);       }"

//@ ensures \\only_assigned(o) || \\only_accessed(o) || \\only_captured(o) || \    ot_assigned(o) || \    ot_modified(o);      void m() {}      }"

//@ ghost boolean k = \\only_assigned(o) || \\only_accessed(o) || \\only_captured(o) || \    ot_assigned(o) || \    ot_modified(o);       }"

//@ invariant (* stuff *);     //@ ghost int k = (* stuff *);       }"

//@ public model int duration;       void m() { //@ set duration = 0;     }      }"

//@ model import java.util.List;     public class A {     //@ ghost List k;     List n;       }"

//@ model import java.util.*;     public class A {     //@ ghost List k;     List n;       }"

//@ model import java.util.List;     public class A {     //@ ghost List k;     List n;       }"

//@ import java.util.List;     public class A {     //@ ghost List k;     List n;       }"

/*@ model */
/*@ model */
/*@ model import */
/*@ instance ghost V r; @*/
//@ loop_invariant 0<=i && i <= blub.length;    "

/*@nullable @*/
//@ loop_invariant 0<=i && i <= blub.length;    "

/*@nullable @*/
/*@ in height; @*/
/*@ public model int height;    "
                +"      in_redundantly height;    "
                +"      public invariant 0 < height;    "
                +"      public constraint \\old(height) == height;    "
                +"      private represents height = my_height;    "
                +"      private invariant 0 < my_height;    "
                +"  @*/
/*@ in height; @*/
/*@ public model int height;    "
                +"      in_redundantly height2;    "
                +"  @*/
/*@ public model int height2;    "
                +"      in_redundantly height;    "
                +"  @*/
//@ ghost boolean b4 = \\type(java.util.Map<java.util.List<?>,?>) <: \\type(java.util.List<?>);

/*@ public invariant (\\sum Integer i; 0<=i && i < 6; new Object()); */
//@ ghost boolean bb = (\\forall int i; 0<=i && i <=4; 0!=(\\lbl LBL i));    "

//@ model public void m1bad(java.util.function.Function<Integer,Integer> f) ;    "

//@ public behavior requires true;    "

//@ protected behavior requires true;    "

//@ behavior requires true;    "

//@ private behavior requires true;    "

//@ requires true;    "

//@ public behavior requires true;    "  // Warning

//@ protected behavior requires true;    "

//@ behavior requires true;    "

//@ private behavior requires true;    "

//@ requires true;    "

//@ public behavior requires true;    " // Warning

//@ protected behavior requires true;    " // Warning

//@ behavior requires true;    "  // Warning

//@ private behavior requires true;    "

//@ requires true;    "

//@ public behavior requires true;    " // Warning

//@ protected behavior requires true;    " // Warning

//@ behavior requires true;    "

//@ private behavior requires true;    "

//@ requires true;    "

//@ assert k;    }

//@ assert <Object>\\old(k);    }}"

/*@ also requires true; */
/*@ requires true; */
/*@ requires true; */
/*@ also requires true; */
/*@ also requires true; */
/*@ requires true; */
/*@ public normal_behavior requires true; */
/*@ also requires true; */
/*@ also requires true; */
/*@ requires true; */
/*@ requires true; */
/*@ also requires true; */
/*@ also public normal_behavior requires true; */
/*@ public normal_behavior requires true; */
//@ assert \\old;    }

//@ assert \\old();    }

//@ assert \\pre();    }

//@ assert \\old(k);    }

//@ assert \\old(b);    }}");

//@ assert \\pre(b,k);    }

//@ assert \\old(b,5);    }

//@ assert \\old(b,k);    }}"

//@ requires \\old(b);      void m() { }

//@ ensures \\old(b,k);      void m() { }

//@ requires \\pre(b);      void m() { }

//@ assert \\old(b,k);    }}"

//@ assert \\old(bb) && \\old(bb,k);    }}"

//@ assert \\old(b,k);    }}"

//@ assert \\max(\\lockset);    }

//@ assert \\max;    }

//@ assert \\max();    }

//@ assert \\max(k);    }

//@ assert \\max(b,k);    }

//@ assert \\invariant_for(i);    }}"

//@ assert \\invariant_for(k);    }}"

//@ assert \\invariant_for(A);    }}"

//@ assert \\invariant_for();    }}"

//@ assert \\invariant_for(Integer,k);    }}"

//@ assert \\invariant_for(Integer,k);    }}"

//@ assert \\invariant_for(Integer,k);    }}"

//@ assert \\invariant_for();    }}"

//@ assert \\type(A,k);    }}"

//@ assert \\type();    }}"

//@ assert \\type(b);    }}"

//@ assert \\type(true);    }}"

//@ assert \\type(int);    }}"

//@ assert \\type(int[][]);    }}"

//@ assert \\type(Object);    }}"

//@ assert \\type(java.lang.Object);    }}"

//@ assert \\type(java.lang.Object[][]);    }}"

//@ assert \\type(A);    }}"

//@ assert \\type(void);    }}"

//@ assert \\type(Void);    }}"

//@ assert \\typeof(b);    }

//@ assert \\result;    }}"

//@ ensures \\result;     void m() {     }

//@ assert \\result;     void m() {     }

/*@ ensures \\result == 1; */
/*@ ensures \\result == 1; */
/*@ ensures \\result     ; */
//@ return true;    }}"

/*@ ensures \\result     ; */
//@ int t;    }}"

/*@ ghost \\TYPE t; */
/*@ ghost \\TYPE t,tt; */
/*@ ghost \\bigint i; model \\real r; ghost \\TYPE t; */
/*@  \\TYPE t; */
/*@ @Ghost int i; */
/*@ ghost \\TYPE t; */
//@ensures t <: t;    void m() {}}");

/*@ ghost \\TYPE t; */
//@ensures c <: c;    void m() {}}");

/*@ ghost \\TYPE t; */
//@ensures c <: c;    void m() {}}");

/*@ ghost \\TYPE t; */
//@ensures c <: c;    void m() {}}");

/*@ ghost \\TYPE t; */
//@ensures t <: \\typeof(o);    void m() {}}"

/*@ ghost \\TYPE t; */
//@ensures o.getClass() <: Object.class;    void m() {}}"

/*@ ghost \\TYPE t; */
//@ensures JML.erasure(t) <: c;    void m() {}}");

/*@ ghost \\TYPE t; */
//@ensures t <: 5;    void m() {}

/*@ ghost \\TYPE t; */
//@ensures true <: c;    void m() {}

//@ ghost \\TYPE t = \\type(java.lang.Integer);

//@ ghost \\TYPE t = \\type(java.util.List);

//@ ghost \\TYPE t = \\type(java.util.List<Integer>);

//@ ghost Class<?> t = \\erasure(\\type(java.lang.Integer));

//@ ghost Class<?> t = \\erasure(\\type(java.util.List));

//@ ghost Class<?> t = \\erasure(\\type(java.util.List<Integer>));

//@requires \\result == 0;     int m() {return 0;}

//@ invariant new JMLSetType { Integer i | c.contains(i) && i<10};           }"

//@ requires new JMLSetType { Integer i | c.contains(i) && i<10};      void m() {}      }"

//@ ghost Object j;      //@ requires m( (\\exists int i; 0 < i && i <10; m(i)) );     /*@pure*/boolean m(int k) { return false; }     

//@ ghost int k = new JMLSetType { Integer i | c.contains(i) && i<10};      void m() {}      }"

//@ ghost Object k = new JMLSetType { Integer i | c.contains(i) && p<10};      void m() {}      }"

//@ ghost Object k = new JMLSetType { Integer i | c.contains(i) && i<10};      void m() {}      }"

//@ ghost Object j = m( (\\exists int i; 0 < i && i <10; m(i)) );     boolean m(int k) { return false; }     

//@ ghost Object j = m( (\\exists int i; 0 < i && i <10; m(i)) );     boolean m(boolean k) { return false; } boolean m(int p) { return false; }     }"

//@ ghost Object j = m( (\\exists int i; 0 < i && i <10; m(i)) );     boolean m(boolean k) { return false; }      }"

//@ ghost boolean j = ( (\\exists int i; 0 < i && i <10; m(p)) );     boolean m(int k) { return false; }      }"

//@ ghost int k = new JMLSetType { Integer i | c.contains(i) && i<10};     }      }"

//@ ghost Object k = new JMLSetType { Integer i | c.contains(i) && p<10};     }      }"

//@ ghost Object k = new JMLSetType { Integer i | c.contains(i) && i<10};     }      }"

//@ ghost Object j = m( (\\exists int i; 0 < i && i <10; m(i)) );      return false; }     

//@ ghost boolean j = ( (\\exists int i; 0 < i && i <10; m(i)) );      return false; }     }"

//@ ghost boolean j = ( (\\exists int i; 0 < i && i <10; m(p)) );      return false; }     

//@ ghost Object k;       java.util.Collection c;  void m() { //@ set k = new JMLSetType { Integer i | c.contains(i) && i<10};     }      }"

//@ ghost int j;            boolean m(int k) { //@ set j = m( (\\exists int i; 0 < i && i <10; m(i)) );      return false; }     

//@ ghost Object j;      /*@pure*/ boolean m(int i) { return false; }    //@ invariant m( (\\exists int i; 0 < i && i <10; m(i)) );      

//@ ghost Object j;      /*@pure*/ boolean m(int i) { return false; }    //@ invariant m( (\\forall int i; 0 < i && i <10; m(i)) );      

//@ ghost Object j;      /*@pure*/ boolean m(int i) { return false; }    //@ invariant (\    um_of int i; 0 < i && i <10; m(i)) ;      

//@ ghost Object j;      boolean m(int i) { return false; }    //@ invariant (\\max long i; 0 < i && i <10; i) ;      

//@ ghost Object j;      boolean m(float i) { return false; }    //@ invariant (\\sum long i; 0 < i && i <10; i) ;      

//@ ghost Object j;      boolean m(double i) { return false; }    //@ invariant (\\product long i,k; 0 < i && k <10; i) ;      

//@ ghost Object j;      boolean m(double i) { return false; }    //@ invariant (\\product long i; j; i) ;      

//@ invariant (\\product long i; 0 < j && i <10; i) ;      

//@ invariant (\\exists int i; 0 < i && i <10;  i > -1) ;      //@ static invariant (\\exists int i; 0 < i && i <10;  i > -1) ;      void m() {}}"

//@ invariant (\\exists int i; 0 < i && i <10;  i > m) ;      //@ static invariant (\\exists int i; 0 < i && i <10;  i > m) ;      void m() {}}"

//@ static invariant (\\exists int i; 0 < i && i <10;  i > s) ;      //@ static invariant (\\exists int i; 0 < i && i <10;  i > s) ;      void m() {}}"

//@ ghost boolean b = (\\exists int i; 0 < i && i <10;  i > m) ;      //@ static ghost boolean bb = (\\exists int i; 0 < i && i <10;  i > m) ;      //@ requires b && bb;     void m() {}}"

//@ ghost boolean b = (\\exists int i; 0 < i && i <10;  i > s) ;      //@ static ghost boolean bb = (\\exists int i; 0 < i && i <10;  i > s) ;      //@ requires b && bb;     void m() {}}"

//@ requires (\\exists int i; 0 < i && i <10;  i > -1) ;       void m() {}}"

//@ requires (\\exists int i; 0 < i && i <10;  i > -1) ;       static void m() {}}"

//@ assert (\\let int i = 0; i != 0);     }}"

//@ assert 0 == (\\let int i = 0, int j = 2; i - j);     }}"

//@ assert (\\let int i = 0; i);     }}"

//@ assert (\\let int i; i==0);     }}"

//@ assert (\\let int i=0; i==0);      i = true; }}"

//@ assert (\\let int i=0; i==0);      i = true; }}"

//@ invariant (\\let int i=0; i==0);       }"

//@ assert (\\let int i=0; i==j);       }}"

//@ invariant (\\let int i=0; i==j);       }"

//@ assert (\\let int i=0; i==j);       }}"

//@ invariant (\\let int i=0; i==j);       }"

//@ requires  i; also requires \\same;      boolean m(boolean i) { return false; }

//@ requires 1+\\same;      boolean m(double i) { return false; },

//@ requires i; also requires !\\same;      boolean m(boolean i) { return false; }

//@ requires \\same;      boolean m(double i) { return false; }

//@ ensures \\same;      boolean m(double i) { return false; }

//@ invariant o < oo;      }"

//@ invariant o < oo;      }"

//@ invariant o <= oo;      }"

//@ invariant o <= oo;      }"

//@ invariant o < true;      }"

//@ invariant o < 5;      }"

//@ invariant o < 5;      }"

//@ invariant o <# oo;      }"

//@ invariant o <#= oo;      }"

//@ invariant \\fresh(o);       }"

//@ ensures \\fresh(o);      void m() {}      }"

//@ ensures \\fresh(o,oo);      void m() {}       }"

//@ ensures \\fresh();      void m() {}       }"

//@ ensures   \\fresh(i);      void m() {}       }"

//@ ensures   \\fresh(o) + 1 == 0;      void m() {}       }"

//@ ghost boolean k = \\fresh(o);       }"

//@ invariant \\only_assigned(o) || \\only_accessed(o) || \\only_captured(o) || \    ot_assigned(o) || \    ot_modified(o);       }"

//@ ensures \\only_assigned(o) || \\only_accessed(o) || \\only_captured(o) || \    ot_assigned(o) || \    ot_modified(o);      void m() {}      }"

//@ ghost boolean k = \\only_assigned(o) || \\only_accessed(o) || \\only_captured(o) || \    ot_assigned(o) || \    ot_modified(o);       }"

//@ invariant (* stuff *);     //@ ghost int k = (* stuff *);       }"

//@ public model int duration;       void m() { //@ set duration = 0;     }      }"

//@ model import java.util.List;     public class A {     //@ ghost List k;     List n;       }"

//@ model import java.util.*;     public class A {     //@ ghost List k;     List n;       }"

//@ model import java.util.List;     public class A {     //@ ghost List k;     List n;       }"

//@ import java.util.List;     public class A {     //@ ghost List k;     List n;       }"

/*@ model */
/*@ model */
/*@ model import */
/*@ instance ghost V r; @*/
//@ loop_invariant 0<=i && i <= blub.length;    "

/*@nullable @*/
//@ loop_invariant 0<=i && i <= blub.length;    "

/*@nullable @*/
/*@ in height; @*/
/*@ public model int height;    "
                +"      in_redundantly height;    "
                +"      public invariant 0 < height;    "
                +"      public constraint \\old(height) == height;    "
                +"      private represents height = my_height;    "
                +"      private invariant 0 < my_height;    "
                +"  @*/
/*@ in height; @*/
/*@ public model int height;    "
                +"      in_redundantly height2;    "
                +"  @*/
/*@ public model int height2;    "
                +"      in_redundantly height;    "
                +"  @*/
//@ ghost boolean b4 = \\type(java.util.Map<java.util.List<?>,?>) <: \\type(java.util.List<?>);

/*@ public invariant (\\sum Integer i; 0<=i && i < 6; new Object()); */
//@ ghost boolean bb = (\\forall int i; 0<=i && i <=4; 0!=(\\lbl LBL i));    "

//@ model public void m1bad(java.util.function.Function<Integer,Integer> f) ;    "

//@ public behavior requires true;    "

//@ protected behavior requires true;    "

//@ behavior requires true;    "

//@ private behavior requires true;    "

//@ requires true;    "

//@ public behavior requires true;    "  // Warning

//@ protected behavior requires true;    "

//@ behavior requires true;    "

//@ private behavior requires true;    "

//@ requires true;    "

//@ public behavior requires true;    " // Warning

//@ protected behavior requires true;    " // Warning

//@ behavior requires true;    "  // Warning

//@ private behavior requires true;    "

//@ requires true;    "

//@ public behavior requires true;    " // Warning

//@ protected behavior requires true;    " // Warning

//@ behavior requires true;    "

//@ private behavior requires true;    "

//@ requires true;    "

//@ assert k;    }

//@ assert <Object>\\old(k);    }}"

/*@ also requires true; */
/*@ requires true; */
/*@ requires true; */
/*@ also requires true; */
/*@ also requires true; */
/*@ requires true; */
/*@ public normal_behavior requires true; */
/*@ also requires true; */
/*@ also requires true; */
/*@ requires true; */
/*@ requires true; */
/*@ also requires true; */
/*@ also public normal_behavior requires true; */
/*@ public normal_behavior requires true; */
//@ assert \\old;    }

//@ assert \\old();    }

//@ assert \\pre();    }

//@ assert \\old(k);    }

//@ assert \\old(b);    }}");

//@ assert \\pre(b,k);    }

//@ assert \\old(b,5);    }

//@ assert \\old(b,k);    }}"

//@ requires \\old(b);      void m() { }

//@ ensures \\old(b,k);      void m() { }

//@ requires \\pre(b);      void m() { }

//@ assert \\old(b,k);    }}"

//@ assert \\old(bb) && \\old(bb,k);    }}"

//@ assert \\old(b,k);    }}"

//@ assert \\max(\\lockset);    }

//@ assert \\max;    }

//@ assert \\max();    }

//@ assert \\max(k);    }

//@ assert \\max(b,k);    }

//@ assert \\invariant_for(i);    }}"

//@ assert \\invariant_for(k);    }}"

//@ assert \\invariant_for(A);    }}"

//@ assert \\invariant_for();    }}"

//@ assert \\invariant_for(Integer,k);    }}"

//@ assert \\invariant_for(Integer,k);    }}"

//@ assert \\invariant_for(Integer,k);    }}"

//@ assert \\invariant_for();    }}"

//@ assert \\type(A,k);    }}"

//@ assert \\type();    }}"

//@ assert \\type(b);    }}"

//@ assert \\type(true);    }}"

//@ assert \\type(int);    }}"

//@ assert \\type(int[][]);    }}"

//@ assert \\type(Object);    }}"

//@ assert \\type(java.lang.Object);    }}"

//@ assert \\type(java.lang.Object[][]);    }}"

//@ assert \\type(A);    }}"

//@ assert \\type(void);    }}"

//@ assert \\type(Void);    }}"

//@ assert \\typeof(b);    }

//@ assert \\result;    }}"

//@ ensures \\result;     void m() {     }

//@ assert \\result;     void m() {     }

/*@ ensures \\result == 1; */
/*@ ensures \\result == 1; */
/*@ ensures \\result     ; */
//@ return true;    }}"

/*@ ensures \\result     ; */
//@ int t;    }}"

/*@ ghost \\TYPE t; */
/*@ ghost \\TYPE t,tt; */
/*@ ghost \\bigint i; model \\real r; ghost \\TYPE t; */
/*@  \\TYPE t; */
/*@ @Ghost int i; */
/*@ ghost \\TYPE t; */
//@ensures t <: t;    void m() {}}");

/*@ ghost \\TYPE t; */
//@ensures c <: c;    void m() {}}");

/*@ ghost \\TYPE t; */
//@ensures c <: c;    void m() {}}");

/*@ ghost \\TYPE t; */
//@ensures c <: c;    void m() {}}");

/*@ ghost \\TYPE t; */
//@ensures t <: \\typeof(o);    void m() {}}"

/*@ ghost \\TYPE t; */
//@ensures o.getClass() <: Object.class;    void m() {}}"

/*@ ghost \\TYPE t; */
//@ensures JML.erasure(t) <: c;    void m() {}}");

/*@ ghost \\TYPE t; */
//@ensures t <: 5;    void m() {}

/*@ ghost \\TYPE t; */
//@ensures true <: c;    void m() {}

//@ ghost \\TYPE t = \\type(java.lang.Integer);

//@ ghost \\TYPE t = \\type(java.util.List);

//@ ghost \\TYPE t = \\type(java.util.List<Integer>);

//@ ghost Class<?> t = \\erasure(\\type(java.lang.Integer));

//@ ghost Class<?> t = \\erasure(\\type(java.util.List));

//@ ghost Class<?> t = \\erasure(\\type(java.util.List<Integer>));

//@requires \\result == 0;     int m() {return 0;}

//@ invariant new JMLSetType { Integer i | c.contains(i) && i<10};           }"

//@ requires new JMLSetType { Integer i | c.contains(i) && i<10};      void m() {}      }"

//@ ghost Object j;      //@ requires m( (\\exists int i; 0 < i && i <10; m(i)) );     /*@pure*/boolean m(int k) { return false; }     

//@ ghost int k = new JMLSetType { Integer i | c.contains(i) && i<10};      void m() {}      }"

//@ ghost Object k = new JMLSetType { Integer i | c.contains(i) && p<10};      void m() {}      }"

//@ ghost Object k = new JMLSetType { Integer i | c.contains(i) && i<10};      void m() {}      }"

//@ ghost Object j = m( (\\exists int i; 0 < i && i <10; m(i)) );     boolean m(int k) { return false; }     

//@ ghost Object j = m( (\\exists int i; 0 < i && i <10; m(i)) );     boolean m(boolean k) { return false; } boolean m(int p) { return false; }     }"

//@ ghost Object j = m( (\\exists int i; 0 < i && i <10; m(i)) );     boolean m(boolean k) { return false; }      }"

//@ ghost boolean j = ( (\\exists int i; 0 < i && i <10; m(p)) );     boolean m(int k) { return false; }      }"

//@ ghost int k = new JMLSetType { Integer i | c.contains(i) && i<10};     }      }"

//@ ghost Object k = new JMLSetType { Integer i | c.contains(i) && p<10};     }      }"

//@ ghost Object k = new JMLSetType { Integer i | c.contains(i) && i<10};     }      }"

//@ ghost Object j = m( (\\exists int i; 0 < i && i <10; m(i)) );      return false; }     

//@ ghost boolean j = ( (\\exists int i; 0 < i && i <10; m(i)) );      return false; }     }"

//@ ghost boolean j = ( (\\exists int i; 0 < i && i <10; m(p)) );      return false; }     

//@ ghost Object k;       java.util.Collection c;  void m() { //@ set k = new JMLSetType { Integer i | c.contains(i) && i<10};     }      }"

//@ ghost int j;            boolean m(int k) { //@ set j = m( (\\exists int i; 0 < i && i <10; m(i)) );      return false; }     

//@ ghost Object j;      /*@pure*/ boolean m(int i) { return false; }    //@ invariant m( (\\exists int i; 0 < i && i <10; m(i)) );      

//@ ghost Object j;      /*@pure*/ boolean m(int i) { return false; }    //@ invariant m( (\\forall int i; 0 < i && i <10; m(i)) );      

//@ ghost Object j;      /*@pure*/ boolean m(int i) { return false; }    //@ invariant (\    um_of int i; 0 < i && i <10; m(i)) ;      

//@ ghost Object j;      boolean m(int i) { return false; }    //@ invariant (\\max long i; 0 < i && i <10; i) ;      

//@ ghost Object j;      boolean m(float i) { return false; }    //@ invariant (\\sum long i; 0 < i && i <10; i) ;      

//@ ghost Object j;      boolean m(double i) { return false; }    //@ invariant (\\product long i,k; 0 < i && k <10; i) ;      

//@ ghost Object j;      boolean m(double i) { return false; }    //@ invariant (\\product long i; j; i) ;      

//@ invariant (\\product long i; 0 < j && i <10; i) ;      

//@ invariant (\\exists int i; 0 < i && i <10;  i > -1) ;      //@ static invariant (\\exists int i; 0 < i && i <10;  i > -1) ;      void m() {}}"

//@ invariant (\\exists int i; 0 < i && i <10;  i > m) ;      //@ static invariant (\\exists int i; 0 < i && i <10;  i > m) ;      void m() {}}"

//@ static invariant (\\exists int i; 0 < i && i <10;  i > s) ;      //@ static invariant (\\exists int i; 0 < i && i <10;  i > s) ;      void m() {}}"

//@ ghost boolean b = (\\exists int i; 0 < i && i <10;  i > m) ;      //@ static ghost boolean bb = (\\exists int i; 0 < i && i <10;  i > m) ;      //@ requires b && bb;     void m() {}}"

//@ ghost boolean b = (\\exists int i; 0 < i && i <10;  i > s) ;      //@ static ghost boolean bb = (\\exists int i; 0 < i && i <10;  i > s) ;      //@ requires b && bb;     void m() {}}"

//@ requires (\\exists int i; 0 < i && i <10;  i > -1) ;       void m() {}}"

//@ requires (\\exists int i; 0 < i && i <10;  i > -1) ;       static void m() {}}"

//@ assert (\\let int i = 0; i != 0);     }}"

//@ assert 0 == (\\let int i = 0, int j = 2; i - j);     }}"

//@ assert (\\let int i = 0; i);     }}"

//@ assert (\\let int i; i==0);     }}"

//@ assert (\\let int i=0; i==0);      i = true; }}"

//@ assert (\\let int i=0; i==0);      i = true; }}"

//@ invariant (\\let int i=0; i==0);       }"

//@ assert (\\let int i=0; i==j);       }}"

//@ invariant (\\let int i=0; i==j);       }"

//@ assert (\\let int i=0; i==j);       }}"

//@ invariant (\\let int i=0; i==j);       }"

//@ requires  i; also requires \\same;      boolean m(boolean i) { return false; }

//@ requires 1+\\same;      boolean m(double i) { return false; },

//@ requires i; also requires !\\same;      boolean m(boolean i) { return false; }

//@ requires \\same;      boolean m(double i) { return false; }

//@ ensures \\same;      boolean m(double i) { return false; }

//@ invariant o < oo;      }"

//@ invariant o < oo;      }"

//@ invariant o <= oo;      }"

//@ invariant o <= oo;      }"

//@ invariant o < true;      }"

//@ invariant o < 5;      }"

//@ invariant o < 5;      }"

//@ invariant o <# oo;      }"

//@ invariant o <#= oo;      }"

//@ invariant \\fresh(o);       }"

//@ ensures \\fresh(o);      void m() {}      }"

//@ ensures \\fresh(o,oo);      void m() {}       }"

//@ ensures \\fresh();      void m() {}       }"

//@ ensures   \\fresh(i);      void m() {}       }"

//@ ensures   \\fresh(o) + 1 == 0;      void m() {}       }"

//@ ghost boolean k = \\fresh(o);       }"

//@ invariant \\only_assigned(o) || \\only_accessed(o) || \\only_captured(o) || \    ot_assigned(o) || \    ot_modified(o);       }"

//@ ensures \\only_assigned(o) || \\only_accessed(o) || \\only_captured(o) || \    ot_assigned(o) || \    ot_modified(o);      void m() {}      }"

//@ ghost boolean k = \\only_assigned(o) || \\only_accessed(o) || \\only_captured(o) || \    ot_assigned(o) || \    ot_modified(o);       }"

//@ invariant (* stuff *);     //@ ghost int k = (* stuff *);       }"

//@ public model int duration;       void m() { //@ set duration = 0;     }      }"

//@ model import java.util.List;     public class A {     //@ ghost List k;     List n;       }"

//@ model import java.util.*;     public class A {     //@ ghost List k;     List n;       }"

//@ model import java.util.List;     public class A {     //@ ghost List k;     List n;       }"

//@ import java.util.List;     public class A {     //@ ghost List k;     List n;       }"

/*@ model */
/*@ model */
/*@ model import */
/*@ instance ghost V r; @*/
//@ loop_invariant 0<=i && i <= blub.length;    "

/*@nullable @*/
//@ loop_invariant 0<=i && i <= blub.length;    "

/*@nullable @*/
/*@ in height; @*/
/*@ public model int height;    "
                +"      in_redundantly height;    "
                +"      public invariant 0 < height;    "
                +"      public constraint \\old(height) == height;    "
                +"      private represents height = my_height;    "
                +"      private invariant 0 < my_height;    "
                +"  @*/
/*@ in height; @*/
/*@ public model int height;    "
                +"      in_redundantly height2;    "
                +"  @*/
/*@ public model int height2;    "
                +"      in_redundantly height;    "
                +"  @*/
//@ ghost boolean b4 = \\type(java.util.Map<java.util.List<?>,?>) <: \\type(java.util.List<?>);

/*@ public invariant (\\sum Integer i; 0<=i && i < 6; new Object()); */
//@ ghost boolean bb = (\\forall int i; 0<=i && i <=4; 0!=(\\lbl LBL i));    "

//@ model public void m1bad(java.util.function.Function<Integer,Integer> f) ;    "

//@ public behavior requires true;    "

//@ protected behavior requires true;    "

//@ behavior requires true;    "

//@ private behavior requires true;    "

//@ requires true;    "

//@ public behavior requires true;    "  // Warning

//@ protected behavior requires true;    "

//@ behavior requires true;    "

//@ private behavior requires true;    "

//@ requires true;    "

//@ public behavior requires true;    " // Warning

//@ protected behavior requires true;    " // Warning

//@ behavior requires true;    "  // Warning

//@ private behavior requires true;    "

//@ requires true;    "

//@ public behavior requires true;    " // Warning

//@ protected behavior requires true;    " // Warning

//@ behavior requires true;    "

//@ private behavior requires true;    "

//@ requires true;    "

//@ assert k;    }

//@ assert <Object>\\old(k);    }}"

/*@ also requires true; */
/*@ requires true; */
/*@ requires true; */
/*@ also requires true; */
/*@ also requires true; */
/*@ requires true; */
/*@ public normal_behavior requires true; */
/*@ also requires true; */
/*@ also requires true; */
/*@ requires true; */
/*@ requires true; */
/*@ also requires true; */
/*@ also public normal_behavior requires true; */
/*@ public normal_behavior requires true; */
//@ assert \\old;    }

//@ assert \\old();    }

//@ assert \\pre();    }

//@ assert \\old(k);    }

//@ assert \\old(b);    }}");

//@ assert \\pre(b,k);    }

//@ assert \\old(b,5);    }

//@ assert \\old(b,k);    }}"

//@ requires \\old(b);      void m() { }

//@ ensures \\old(b,k);      void m() { }

//@ requires \\pre(b);      void m() { }

//@ assert \\old(b,k);    }}"

//@ assert \\old(bb) && \\old(bb,k);    }}"

//@ assert \\old(b,k);    }}"

//@ assert \\max(\\lockset);    }

//@ assert \\max;    }

//@ assert \\max();    }

//@ assert \\max(k);    }

//@ assert \\max(b,k);    }

//@ assert \\invariant_for(i);    }}"

//@ assert \\invariant_for(k);    }}"

//@ assert \\invariant_for(A);    }}"

//@ assert \\invariant_for();    }}"

//@ assert \\invariant_for(Integer,k);    }}"

//@ assert \\invariant_for(Integer,k);    }}"

//@ assert \\invariant_for(Integer,k);    }}"

//@ assert \\invariant_for();    }}"

//@ assert \\type(A,k);    }}"

//@ assert \\type();    }}"

//@ assert \\type(b);    }}"

//@ assert \\type(true);    }}"

//@ assert \\type(int);    }}"

//@ assert \\type(int[][]);    }}"

//@ assert \\type(Object);    }}"

//@ assert \\type(java.lang.Object);    }}"

//@ assert \\type(java.lang.Object[][]);    }}"

//@ assert \\type(A);    }}"

//@ assert \\type(void);    }}"

//@ assert \\type(Void);    }}"

//@ assert \\typeof(b);    }

//@ assert \\result;    }}"

//@ ensures \\result;     void m() {     }

//@ assert \\result;     void m() {     }

/*@ ensures \\result == 1; */
/*@ ensures \\result == 1; */
/*@ ensures \\result     ; */
//@ return true;    }}"

/*@ ensures \\result     ; */
//@ int t;    }}"

/*@ ghost \\TYPE t; */
/*@ ghost \\TYPE t,tt; */
/*@ ghost \\bigint i; model \\real r; ghost \\TYPE t; */
/*@  \\TYPE t; */
/*@ @Ghost int i; */
/*@ ghost \\TYPE t; */
//@ensures t <: t;    void m() {}}");

/*@ ghost \\TYPE t; */
//@ensures c <: c;    void m() {}}");

/*@ ghost \\TYPE t; */
//@ensures c <: c;    void m() {}}");

/*@ ghost \\TYPE t; */
//@ensures c <: c;    void m() {}}");

/*@ ghost \\TYPE t; */
//@ensures t <: \\typeof(o);    void m() {}}"

/*@ ghost \\TYPE t; */
//@ensures o.getClass() <: Object.class;    void m() {}}"

/*@ ghost \\TYPE t; */
//@ensures JML.erasure(t) <: c;    void m() {}}");

/*@ ghost \\TYPE t; */
//@ensures t <: 5;    void m() {}

/*@ ghost \\TYPE t; */
//@ensures true <: c;    void m() {}

//@ ghost \\TYPE t = \\type(java.lang.Integer);

//@ ghost \\TYPE t = \\type(java.util.List);

//@ ghost \\TYPE t = \\type(java.util.List<Integer>);

//@ ghost Class<?> t = \\erasure(\\type(java.lang.Integer));

//@ ghost Class<?> t = \\erasure(\\type(java.util.List));

//@ ghost Class<?> t = \\erasure(\\type(java.util.List<Integer>));

//@requires \\result == 0;     int m() {return 0;}

//@ invariant new JMLSetType { Integer i | c.contains(i) && i<10};           }"

//@ requires new JMLSetType { Integer i | c.contains(i) && i<10};      void m() {}      }"

//@ ghost Object j;      //@ requires m( (\\exists int i; 0 < i && i <10; m(i)) );     /*@pure*/boolean m(int k) { return false; }     

//@ ghost int k = new JMLSetType { Integer i | c.contains(i) && i<10};      void m() {}      }"

//@ ghost Object k = new JMLSetType { Integer i | c.contains(i) && p<10};      void m() {}      }"

//@ ghost Object k = new JMLSetType { Integer i | c.contains(i) && i<10};      void m() {}      }"

//@ ghost Object j = m( (\\exists int i; 0 < i && i <10; m(i)) );     boolean m(int k) { return false; }     

//@ ghost Object j = m( (\\exists int i; 0 < i && i <10; m(i)) );     boolean m(boolean k) { return false; } boolean m(int p) { return false; }     }"

//@ ghost Object j = m( (\\exists int i; 0 < i && i <10; m(i)) );     boolean m(boolean k) { return false; }      }"

//@ ghost boolean j = ( (\\exists int i; 0 < i && i <10; m(p)) );     boolean m(int k) { return false; }      }"

//@ ghost int k = new JMLSetType { Integer i | c.contains(i) && i<10};     }      }"

//@ ghost Object k = new JMLSetType { Integer i | c.contains(i) && p<10};     }      }"

//@ ghost Object k = new JMLSetType { Integer i | c.contains(i) && i<10};     }      }"

//@ ghost Object j = m( (\\exists int i; 0 < i && i <10; m(i)) );      return false; }     

//@ ghost boolean j = ( (\\exists int i; 0 < i && i <10; m(i)) );      return false; }     }"

//@ ghost boolean j = ( (\\exists int i; 0 < i && i <10; m(p)) );      return false; }     

//@ ghost Object k;       java.util.Collection c;  void m() { //@ set k = new JMLSetType { Integer i | c.contains(i) && i<10};     }      }"

//@ ghost int j;            boolean m(int k) { //@ set j = m( (\\exists int i; 0 < i && i <10; m(i)) );      return false; }     

//@ ghost Object j;      /*@pure*/ boolean m(int i) { return false; }    //@ invariant m( (\\exists int i; 0 < i && i <10; m(i)) );      

//@ ghost Object j;      /*@pure*/ boolean m(int i) { return false; }    //@ invariant m( (\\forall int i; 0 < i && i <10; m(i)) );      

//@ ghost Object j;      /*@pure*/ boolean m(int i) { return false; }    //@ invariant (\    um_of int i; 0 < i && i <10; m(i)) ;      

//@ ghost Object j;      boolean m(int i) { return false; }    //@ invariant (\\max long i; 0 < i && i <10; i) ;      

//@ ghost Object j;      boolean m(float i) { return false; }    //@ invariant (\\sum long i; 0 < i && i <10; i) ;      

//@ ghost Object j;      boolean m(double i) { return false; }    //@ invariant (\\product long i,k; 0 < i && k <10; i) ;      

//@ ghost Object j;      boolean m(double i) { return false; }    //@ invariant (\\product long i; j; i) ;      

//@ invariant (\\product long i; 0 < j && i <10; i) ;      

//@ invariant (\\exists int i; 0 < i && i <10;  i > -1) ;      //@ static invariant (\\exists int i; 0 < i && i <10;  i > -1) ;      void m() {}}"

//@ invariant (\\exists int i; 0 < i && i <10;  i > m) ;      //@ static invariant (\\exists int i; 0 < i && i <10;  i > m) ;      void m() {}}"

//@ static invariant (\\exists int i; 0 < i && i <10;  i > s) ;      //@ static invariant (\\exists int i; 0 < i && i <10;  i > s) ;      void m() {}}"

//@ ghost boolean b = (\\exists int i; 0 < i && i <10;  i > m) ;      //@ static ghost boolean bb = (\\exists int i; 0 < i && i <10;  i > m) ;      //@ requires b && bb;     void m() {}}"

//@ ghost boolean b = (\\exists int i; 0 < i && i <10;  i > s) ;      //@ static ghost boolean bb = (\\exists int i; 0 < i && i <10;  i > s) ;      //@ requires b && bb;     void m() {}}"

//@ requires (\\exists int i; 0 < i && i <10;  i > -1) ;       void m() {}}"

//@ requires (\\exists int i; 0 < i && i <10;  i > -1) ;       static void m() {}}"

//@ assert (\\let int i = 0; i != 0);     }}"

//@ assert 0 == (\\let int i = 0, int j = 2; i - j);     }}"

//@ assert (\\let int i = 0; i);     }}"

//@ assert (\\let int i; i==0);     }}"

//@ assert (\\let int i=0; i==0);      i = true; }}"

//@ assert (\\let int i=0; i==0);      i = true; }}"

//@ invariant (\\let int i=0; i==0);       }"

//@ assert (\\let int i=0; i==j);       }}"

//@ invariant (\\let int i=0; i==j);       }"

//@ assert (\\let int i=0; i==j);       }}"

//@ invariant (\\let int i=0; i==j);       }"

//@ requires  i; also requires \\same;      boolean m(boolean i) { return false; }

//@ requires 1+\\same;      boolean m(double i) { return false; },

//@ requires i; also requires !\\same;      boolean m(boolean i) { return false; }

//@ requires \\same;      boolean m(double i) { return false; }

//@ ensures \\same;      boolean m(double i) { return false; }

//@ invariant o < oo;      }"

//@ invariant o < oo;      }"

//@ invariant o <= oo;      }"

//@ invariant o <= oo;      }"

//@ invariant o < true;      }"

//@ invariant o < 5;      }"

//@ invariant o < 5;      }"

//@ invariant o <# oo;      }"

//@ invariant o <#= oo;      }"

//@ invariant \\fresh(o);       }"

//@ ensures \\fresh(o);      void m() {}      }"

//@ ensures \\fresh(o,oo);      void m() {}       }"

//@ ensures \\fresh();      void m() {}       }"

//@ ensures   \\fresh(i);      void m() {}       }"

//@ ensures   \\fresh(o) + 1 == 0;      void m() {}       }"

//@ ghost boolean k = \\fresh(o);       }"

//@ invariant \\only_assigned(o) || \\only_accessed(o) || \\only_captured(o) || \    ot_assigned(o) || \    ot_modified(o);       }"

//@ ensures \\only_assigned(o) || \\only_accessed(o) || \\only_captured(o) || \    ot_assigned(o) || \    ot_modified(o);      void m() {}      }"

//@ ghost boolean k = \\only_assigned(o) || \\only_accessed(o) || \\only_captured(o) || \    ot_assigned(o) || \    ot_modified(o);       }"

//@ invariant (* stuff *);     //@ ghost int k = (* stuff *);       }"

//@ public model int duration;       void m() { //@ set duration = 0;     }      }"

//@ model import java.util.List;     public class A {     //@ ghost List k;     List n;       }"

//@ model import java.util.*;     public class A {     //@ ghost List k;     List n;       }"

//@ model import java.util.List;     public class A {     //@ ghost List k;     List n;       }"

//@ import java.util.List;     public class A {     //@ ghost List k;     List n;       }"

/*@ model */
/*@ model */
/*@ model import */
/*@ instance ghost V r; @*/
//@ loop_invariant 0<=i && i <= blub.length;    "

/*@nullable @*/
//@ loop_invariant 0<=i && i <= blub.length;    "

/*@nullable @*/
/*@ in height; @*/
/*@ public model int height;    "
                +"      in_redundantly height;    "
                +"      public invariant 0 < height;    "
                +"      public constraint \\old(height) == height;    "
                +"      private represents height = my_height;    "
                +"      private invariant 0 < my_height;    "
                +"  @*/
/*@ in height; @*/
/*@ public model int height;    "
                +"      in_redundantly height2;    "
                +"  @*/
/*@ public model int height2;    "
                +"      in_redundantly height;    "
                +"  @*/
//@ ghost boolean b4 = \\type(java.util.Map<java.util.List<?>,?>) <: \\type(java.util.List<?>);

/*@ public invariant (\\sum Integer i; 0<=i && i < 6; new Object()); */
//@ ghost boolean bb = (\\forall int i; 0<=i && i <=4; 0!=(\\lbl LBL i));    "

//@ model public void m1bad(java.util.function.Function<Integer,Integer> f) ;    "

//@ public behavior requires true;    "

//@ protected behavior requires true;    "

//@ behavior requires true;    "

//@ private behavior requires true;    "

//@ requires true;    "

//@ public behavior requires true;    "  // Warning

//@ protected behavior requires true;    "

//@ behavior requires true;    "

//@ private behavior requires true;    "

//@ requires true;    "

//@ public behavior requires true;    " // Warning

//@ protected behavior requires true;    " // Warning

//@ behavior requires true;    "  // Warning

//@ private behavior requires true;    "

//@ requires true;    "

//@ public behavior requires true;    " // Warning

//@ protected behavior requires true;    " // Warning

//@ behavior requires true;    "

//@ private behavior requires true;    "

//@ requires true;    "

//@ ghost \\bigint b = 0; );

//@ ghost \\real b = 0; );

//@ ghost \\TYPE b ; );

//@ ghost \\bigint b = 0; ghost \\bigint bb = -b; );

//@ ghost \\bigint b = 0; ghost \\bigint bb = b + b; set bb = b-b; set bb = b*b; set bb = b/b;     }}");

//@ ghost map<string,string> b ; );

//@ ghost map<Object,Object> b ; );

//@ ghost \\bigint b = 0; );

//@ ghost \\real b = 0; );

//@ ghost \\TYPE b ; );

//@ ghost \\bigint b = 0; ghost \\bigint bb = -b; );

//@ ghost \\bigint b = 0; ghost \\bigint bb = b + b; set bb = b-b; set bb = b*b; set bb = b/b;     }}");

//@ ghost map<string,string> b ; );

//@ ghost map<Object,Object> b ; );

//@ ghost \\bigint b = 0; );

//@ ghost \\real b = 0; );

//@ ghost \\TYPE b ; );

//@ ghost \\bigint b = 0; ghost \\bigint bb = -b; );

//@ ghost \\bigint b = 0; ghost \\bigint bb = b + b; set bb = b-b; set bb = b*b; set bb = b/b;     }}");

//@ ghost map<string,string> b ; );

//@ ghost map<Object,Object> b ; );

//@ ghost \\bigint b = 0; );

//@ ghost \\real b = 0; );

//@ ghost \\TYPE b ; );

//@ ghost \\bigint b = 0; ghost \\bigint bb = -b; );

//@ ghost \\bigint b = 0; ghost \\bigint bb = b + b; set bb = b-b; set bb = b*b; set bb = b/b;     }}");

//@ ghost map<string,string> b ; );

//@ ghost map<Object,Object> b ; );

//@ ghost \\bigint b = 0; );

//@ ghost \\real b = 0; );

//@ ghost \\TYPE b ; );

//@ ghost \\bigint b = 0; ghost \\bigint bb = -b; );

//@ ghost \\bigint b = 0; ghost \\bigint bb = b + b; set bb = b-b; set bb = b*b; set bb = b/b;     }}");

//@ ghost map<string,string> b ; );

//@ ghost map<Object,Object> b ; );

/*@ private invariant (\\forall int i; i>0; i!= 0); */
/*@ public invariant (\\forall int i; i>0; i!= 0); */
/*@ public invariant 0 == (\\let int i = 0; i); */
/*@  invariant i == 0; */
/*@  invariant this.i == 0; */
/*@ spec_public */
/*@  public normal_behavior requires this.i == 0; */
/*@ spec_public */
/*@  public normal_behavior requires this.i == 0; */
//@ model import java.util.List;     //@     //@     /*@ */ /*@ */ public class TestJava {   }");

/*@ private invariant (\\forall int i; i>0; i!= 0); */
/*@ public invariant (\\forall int i; i>0; i!= 0); */
/*@ public invariant 0 == (\\let int i = 0; i); */
/*@  invariant i == 0; */
/*@  invariant this.i == 0; */
/*@ spec_public */
/*@  public normal_behavior requires this.i == 0; */
/*@ spec_public */
/*@  public normal_behavior requires this.i == 0; */
//@ model import java.util.List;     //@     //@     /*@ */ /*@ */ public class TestJava {   }");

/*@ private invariant (\\forall int i; i>0; i!= 0); */
/*@ public invariant (\\forall int i; i>0; i!= 0); */
/*@ public invariant 0 == (\\let int i = 0; i); */
/*@  invariant i == 0; */
/*@  invariant this.i == 0; */
/*@ spec_public */
/*@  public normal_behavior requires this.i == 0; */
/*@ spec_public */
/*@  public normal_behavior requires this.i == 0; */
//@ model import java.util.List;     //@     //@     /*@ */ /*@ */ public class TestJava {   }");

/*@ private invariant (\\forall int i; i>0; i!= 0); */
/*@ public invariant (\\forall int i; i>0; i!= 0); */
/*@ public invariant 0 == (\\let int i = 0; i); */
/*@  invariant i == 0; */
/*@  invariant this.i == 0; */
/*@ spec_public */
/*@  public normal_behavior requires this.i == 0; */
/*@ spec_public */
/*@  public normal_behavior requires this.i == 0; */
//@ model import java.util.List;     //@     //@     /*@ */ /*@ */ public class TestJava {   }");

/*@ private invariant (\\forall int i; i>0; i!= 0); */
/*@ public invariant (\\forall int i; i>0; i!= 0); */
/*@ public invariant 0 == (\\let int i = 0; i); */
/*@  invariant i == 0; */
/*@  invariant this.i == 0; */
/*@ spec_public */
/*@  public normal_behavior requires this.i == 0; */
/*@ spec_public */
/*@  public normal_behavior requires this.i == 0; */
//@ model import java.util.List;     //@     //@     /*@ */ /*@ */ public class TestJava {   }");

//@ invariant b;);

//@ invariant k;,

//@ invariant bb;);

//@ static invariant bb;

//@ static invariant bb;);

//@ constraint b;);

//@ constraint k;,

//@ constraint bb;);

//@ constraint bb for \\everything;);

//@ constraint bb for A(), m, m(int), m(Object);

//@ static constraint bb for A();

//@ static constraint bb ;

//@ static constraint bb ;);

//@ constraint bb for m;);

//@ constraint bb for mm;);

//@ constraint bb for this.m;);

//@ constraint bb for A.m;);

//@ constraint bb for m(int););

//@ constraint bb for mm(int);

//@ constraint bb for this.m(int[],Object););

//@ constraint bb for a.m(java.lang.Integer););

//@ constraint bb for A.m(java.lang.Integer););

//@ constraint bb for A.m(java.lang.Integer);

//@ constraint bb for a.m(java.lang.Integer););

//@ constraint bb for m(java.lang.Integer);    } class B { void m(Integer i) {} }"

//@ constraint bb for B.m(java.lang.Integer);    } class B { void m(Integer i) {} }"

//@ axiom b;);

//@ axiom k;,

//@ axiom bb;);

//@ initially b;);

//@ initially k;,

//@ initially bb;);

//@ initially x;,

//@ static initially b;

//@ model int i; represents i = true;

//@ model int i; represents i <- true;

//@ model int i; represents i \\such_that 0;

//@ model int i; represents j = 0;

//@ model int i; represents i :0;

//@ model int j; represents j = ;

//@ model int i; represents j = 0

//@ model int i; represents x = 0

//@ model int i; represents x.* = 0

//@ model int i; represents x[*] = 0

//@ model int i; represents x[3] = 0;

//@ model int i; static represents i = 0;

//@ model static int i; represents i = 0;

//@ ghost int i; represents i = 0;

//@ represents i = 0;

//@ ghost int i; represents i = 0;);

//@ represents i = 0;);

//@ static represents i = 0;    } class B { //@ static model int i; 

//@ model static int i; static represents i = k;

//@ model static int i; static represents i = j;

//@  model static int i; static represents i <- j;

//@ ensures ((boolean)\\result);     int m() { return 0; }}"

//@ ensures ((short)\\result) == 0;     int m() { return 0; }}"

//@ public normal_behavior ensures true; public model boolean m();      }"

//@ forall int i,j; old boolean k=true, m = false; requires i == 0;      public void m() {}}"

//@ forall int i=0,j; old boolean k, m = false; requires i == 0;      public void m() {}}"

//@ old int i=true; old boolean m=0; requires i == 0;      public void m() {}}"

//@ forall int j; old int k=0; requires i+j<k;      public void m(int i) {}}"

//@ forall boolean j; old boolean  k=true; requires i+j<k;      public void m(boolean i) {}}"

//@ forall boolean j; old boolean k=true; requires i+j<k;      public void m(boolean i) {}}"

//@ forall int i; old int k=0   ; requires i<k;      public void m(int i) {}}"

//@ forall int k; old int k=0   ; requires i<k;      public void m(int i) {}}"

//@ forall int j; old int k=0   ; requires i<k;     //@{| forall int m; ensures k<m; also ensures k<m; |}      public void m(int i) {}}"

//@ forall int j; old int k=0   ; requires i<k;     //@{| forall int k; ensures k<m; also ensures i==0; |}      public void m(int i) {}}"

//@signals(Exception e) true;      void m(){}}");

//@signals(Exception) true;      void m(){}}");

//@signals(Object e) true;      void m(){}

//@signals true;      void m(){}

//@signals(RuntimeException ) ;      void m(){}}"

//@signals(java.io.IOException e) 2;      void m(){}

//@signals(int e) true;      void m(){}

//@signals(java.io.IOException e) e==null;      void m(){}}");

//@signals_only \    othing;    void m() {}}");

//@signals_only RuntimeException;    void m() {}}");

//@signals_only RuntimeException,Exception;    void m() {}}");

//@signals_only ;    void m() {}

//@signals_only RuntimeException java.lang.Exception;    void m() {}

//@signals_only RuntimeException,;    void m() {}

//@signals_only RuntimeException,,RuntimeException;    void m() {}

//@signals_only RuntimeException    void m() {}

//@signals_only RuntimeException[];    void m() {}

//@signals_only int;    void m() {}

//@signals_only Q;    void m() {}

//@ model JMLDataGroup k;      int n; //@ in k; 

//@ in k, this.k, super.kk;     } class B { //@ model int kk; 

/*@ spec_public */
//@ in k, this.k, super.kk;     } class B { //@ model int kk; 

/*@ spec_public */
//@ in m; 

//@ model static int m;      int n; //@ in m; 

//@ model JMLDataGroup k;      A next; //@ maps next.next \\into k; 

//@ model JMLDataGroup k;      A[] next; //@ maps next[*].next \\into k; 

//@ model JMLDataGroup k;      A[] next; //@ maps next[*] \\into k; 

//@ model JMLDataGroup k;      A[] next; //@ maps next[2 .. 3].next \\into k,k; 

//@ model JMLDataGroup k;      A[] next; //@ maps next[2].next \\into this.k; 

//@initializer static_initializer 

//@initializer static_initializer initializer static_initializer

//@ ensures i==0; initializer ensures j == 0; static_initializer 

//@ ensures i == 0; static_initializer 

//@ ensures i == 0; static_initializer );

//@ {} static {} {} static {}

//@ ensures i==0;      {} //@ ensures i==0;      static {} 

//@ ensures i==0;      static { i = 0; } 

//@ monitors_for i = j,a.k,Object.class;      }"

//@ monitors_for i = 5;      }"

//@ monitors_for i <- m;      }"

//@ monitors_for k = i,A.k;      }"

//@ monitors_for k = Object;      }"

//@ monitors_for z = i;      } class B { public Object z; }"

//@ readable j if i == null; writable j if i == null;      } class B { public Object z; }"

//@ readable k if i == null; writable k if i == null;      } class B { public Object z; }"

//@ readable z if i == null; writable z if i == null;      } class B { Object z; }"

//@ readable k if k == null; writable k if k == null;      } class B { public Object z; }"

//@ readable i if this == null; writable i if this == null;      } class B { public Object z; }"

//@ readable k if this == null; writable k if this == null;      } class B { public Object z; }"

//@ readable k if Object.class == null; writable k if Object.class == null;      } class B { public Object z; }"

//@ invariant b;);

//@ invariant k;,

//@ invariant bb;);

//@ static invariant bb;

//@ static invariant bb;);

//@ constraint b;);

//@ constraint k;,

//@ constraint bb;);

//@ constraint bb for \\everything;);

//@ constraint bb for A(), m, m(int), m(Object);

//@ static constraint bb for A();

//@ static constraint bb ;

//@ static constraint bb ;);

//@ constraint bb for m;);

//@ constraint bb for mm;);

//@ constraint bb for this.m;);

//@ constraint bb for A.m;);

//@ constraint bb for m(int););

//@ constraint bb for mm(int);

//@ constraint bb for this.m(int[],Object););

//@ constraint bb for a.m(java.lang.Integer););

//@ constraint bb for A.m(java.lang.Integer););

//@ constraint bb for A.m(java.lang.Integer);

//@ constraint bb for a.m(java.lang.Integer););

//@ constraint bb for m(java.lang.Integer);    } class B { void m(Integer i) {} }"

//@ constraint bb for B.m(java.lang.Integer);    } class B { void m(Integer i) {} }"

//@ axiom b;);

//@ axiom k;,

//@ axiom bb;);

//@ initially b;);

//@ initially k;,

//@ initially bb;);

//@ initially x;,

//@ static initially b;

//@ model int i; represents i = true;

//@ model int i; represents i <- true;

//@ model int i; represents i \\such_that 0;

//@ model int i; represents j = 0;

//@ model int i; represents i :0;

//@ model int j; represents j = ;

//@ model int i; represents j = 0

//@ model int i; represents x = 0

//@ model int i; represents x.* = 0

//@ model int i; represents x[*] = 0

//@ model int i; represents x[3] = 0;

//@ model int i; static represents i = 0;

//@ model static int i; represents i = 0;

//@ ghost int i; represents i = 0;

//@ represents i = 0;

//@ ghost int i; represents i = 0;);

//@ represents i = 0;);

//@ static represents i = 0;    } class B { //@ static model int i; 

//@ model static int i; static represents i = k;

//@ model static int i; static represents i = j;

//@  model static int i; static represents i <- j;

//@ ensures ((boolean)\\result);     int m() { return 0; }}"

//@ ensures ((short)\\result) == 0;     int m() { return 0; }}"

//@ public normal_behavior ensures true; public model boolean m();      }"

//@ forall int i,j; old boolean k=true, m = false; requires i == 0;      public void m() {}}"

//@ forall int i=0,j; old boolean k, m = false; requires i == 0;      public void m() {}}"

//@ old int i=true; old boolean m=0; requires i == 0;      public void m() {}}"

//@ forall int j; old int k=0; requires i+j<k;      public void m(int i) {}}"

//@ forall boolean j; old boolean  k=true; requires i+j<k;      public void m(boolean i) {}}"

//@ forall boolean j; old boolean k=true; requires i+j<k;      public void m(boolean i) {}}"

//@ forall int i; old int k=0   ; requires i<k;      public void m(int i) {}}"

//@ forall int k; old int k=0   ; requires i<k;      public void m(int i) {}}"

//@ forall int j; old int k=0   ; requires i<k;     //@{| forall int m; ensures k<m; also ensures k<m; |}      public void m(int i) {}}"

//@ forall int j; old int k=0   ; requires i<k;     //@{| forall int k; ensures k<m; also ensures i==0; |}      public void m(int i) {}}"

//@signals(Exception e) true;      void m(){}}");

//@signals(Exception) true;      void m(){}}");

//@signals(Object e) true;      void m(){}

//@signals true;      void m(){}

//@signals(RuntimeException ) ;      void m(){}}"

//@signals(java.io.IOException e) 2;      void m(){}

//@signals(int e) true;      void m(){}

//@signals(java.io.IOException e) e==null;      void m(){}}");

//@signals_only \    othing;    void m() {}}");

//@signals_only RuntimeException;    void m() {}}");

//@signals_only RuntimeException,Exception;    void m() {}}");

//@signals_only ;    void m() {}

//@signals_only RuntimeException java.lang.Exception;    void m() {}

//@signals_only RuntimeException,;    void m() {}

//@signals_only RuntimeException,,RuntimeException;    void m() {}

//@signals_only RuntimeException    void m() {}

//@signals_only RuntimeException[];    void m() {}

//@signals_only int;    void m() {}

//@signals_only Q;    void m() {}

//@ model JMLDataGroup k;      int n; //@ in k; 

//@ in k, this.k, super.kk;     } class B { //@ model int kk; 

/*@ spec_public */
//@ in k, this.k, super.kk;     } class B { //@ model int kk; 

/*@ spec_public */
//@ in m; 

//@ model static int m;      int n; //@ in m; 

//@ model JMLDataGroup k;      A next; //@ maps next.next \\into k; 

//@ model JMLDataGroup k;      A[] next; //@ maps next[*].next \\into k; 

//@ model JMLDataGroup k;      A[] next; //@ maps next[*] \\into k; 

//@ model JMLDataGroup k;      A[] next; //@ maps next[2 .. 3].next \\into k,k; 

//@ model JMLDataGroup k;      A[] next; //@ maps next[2].next \\into this.k; 

//@initializer static_initializer 

//@initializer static_initializer initializer static_initializer

//@ ensures i==0; initializer ensures j == 0; static_initializer 

//@ ensures i == 0; static_initializer 

//@ ensures i == 0; static_initializer );

//@ {} static {} {} static {}

//@ ensures i==0;      {} //@ ensures i==0;      static {} 

//@ ensures i==0;      static { i = 0; } 

//@ monitors_for i = j,a.k,Object.class;      }"

//@ monitors_for i = 5;      }"

//@ monitors_for i <- m;      }"

//@ monitors_for k = i,A.k;      }"

//@ monitors_for k = Object;      }"

//@ monitors_for z = i;      } class B { public Object z; }"

//@ readable j if i == null; writable j if i == null;      } class B { public Object z; }"

//@ readable k if i == null; writable k if i == null;      } class B { public Object z; }"

//@ readable z if i == null; writable z if i == null;      } class B { Object z; }"

//@ readable k if k == null; writable k if k == null;      } class B { public Object z; }"

//@ readable i if this == null; writable i if this == null;      } class B { public Object z; }"

//@ readable k if this == null; writable k if this == null;      } class B { public Object z; }"

//@ readable k if Object.class == null; writable k if Object.class == null;      } class B { public Object z; }"

//@ invariant b;);

//@ invariant k;,

//@ invariant bb;);

//@ static invariant bb;

//@ static invariant bb;);

//@ constraint b;);

//@ constraint k;,

//@ constraint bb;);

//@ constraint bb for \\everything;);

//@ constraint bb for A(), m, m(int), m(Object);

//@ static constraint bb for A();

//@ static constraint bb ;

//@ static constraint bb ;);

//@ constraint bb for m;);

//@ constraint bb for mm;);

//@ constraint bb for this.m;);

//@ constraint bb for A.m;);

//@ constraint bb for m(int););

//@ constraint bb for mm(int);

//@ constraint bb for this.m(int[],Object););

//@ constraint bb for a.m(java.lang.Integer););

//@ constraint bb for A.m(java.lang.Integer););

//@ constraint bb for A.m(java.lang.Integer);

//@ constraint bb for a.m(java.lang.Integer););

//@ constraint bb for m(java.lang.Integer);    } class B { void m(Integer i) {} }"

//@ constraint bb for B.m(java.lang.Integer);    } class B { void m(Integer i) {} }"

//@ axiom b;);

//@ axiom k;,

//@ axiom bb;);

//@ initially b;);

//@ initially k;,

//@ initially bb;);

//@ initially x;,

//@ static initially b;

//@ model int i; represents i = true;

//@ model int i; represents i <- true;

//@ model int i; represents i \\such_that 0;

//@ model int i; represents j = 0;

//@ model int i; represents i :0;

//@ model int j; represents j = ;

//@ model int i; represents j = 0

//@ model int i; represents x = 0

//@ model int i; represents x.* = 0

//@ model int i; represents x[*] = 0

//@ model int i; represents x[3] = 0;

//@ model int i; static represents i = 0;

//@ model static int i; represents i = 0;

//@ ghost int i; represents i = 0;

//@ represents i = 0;

//@ ghost int i; represents i = 0;);

//@ represents i = 0;);

//@ static represents i = 0;    } class B { //@ static model int i; 

//@ model static int i; static represents i = k;

//@ model static int i; static represents i = j;

//@  model static int i; static represents i <- j;

//@ ensures ((boolean)\\result);     int m() { return 0; }}"

//@ ensures ((short)\\result) == 0;     int m() { return 0; }}"

//@ public normal_behavior ensures true; public model boolean m();      }"

//@ forall int i,j; old boolean k=true, m = false; requires i == 0;      public void m() {}}"

//@ forall int i=0,j; old boolean k, m = false; requires i == 0;      public void m() {}}"

//@ old int i=true; old boolean m=0; requires i == 0;      public void m() {}}"

//@ forall int j; old int k=0; requires i+j<k;      public void m(int i) {}}"

//@ forall boolean j; old boolean  k=true; requires i+j<k;      public void m(boolean i) {}}"

//@ forall boolean j; old boolean k=true; requires i+j<k;      public void m(boolean i) {}}"

//@ forall int i; old int k=0   ; requires i<k;      public void m(int i) {}}"

//@ forall int k; old int k=0   ; requires i<k;      public void m(int i) {}}"

//@ forall int j; old int k=0   ; requires i<k;     //@{| forall int m; ensures k<m; also ensures k<m; |}      public void m(int i) {}}"

//@ forall int j; old int k=0   ; requires i<k;     //@{| forall int k; ensures k<m; also ensures i==0; |}      public void m(int i) {}}"

//@signals(Exception e) true;      void m(){}}");

//@signals(Exception) true;      void m(){}}");

//@signals(Object e) true;      void m(){}

//@signals true;      void m(){}

//@signals(RuntimeException ) ;      void m(){}}"

//@signals(java.io.IOException e) 2;      void m(){}

//@signals(int e) true;      void m(){}

//@signals(java.io.IOException e) e==null;      void m(){}}");

//@signals_only \    othing;    void m() {}}");

//@signals_only RuntimeException;    void m() {}}");

//@signals_only RuntimeException,Exception;    void m() {}}");

//@signals_only ;    void m() {}

//@signals_only RuntimeException java.lang.Exception;    void m() {}

//@signals_only RuntimeException,;    void m() {}

//@signals_only RuntimeException,,RuntimeException;    void m() {}

//@signals_only RuntimeException    void m() {}

//@signals_only RuntimeException[];    void m() {}

//@signals_only int;    void m() {}

//@signals_only Q;    void m() {}

//@ model JMLDataGroup k;      int n; //@ in k; 

//@ in k, this.k, super.kk;     } class B { //@ model int kk; 

/*@ spec_public */
//@ in k, this.k, super.kk;     } class B { //@ model int kk; 

/*@ spec_public */
//@ in m; 

//@ model static int m;      int n; //@ in m; 

//@ model JMLDataGroup k;      A next; //@ maps next.next \\into k; 

//@ model JMLDataGroup k;      A[] next; //@ maps next[*].next \\into k; 

//@ model JMLDataGroup k;      A[] next; //@ maps next[*] \\into k; 

//@ model JMLDataGroup k;      A[] next; //@ maps next[2 .. 3].next \\into k,k; 

//@ model JMLDataGroup k;      A[] next; //@ maps next[2].next \\into this.k; 

//@initializer static_initializer 

//@initializer static_initializer initializer static_initializer

//@ ensures i==0; initializer ensures j == 0; static_initializer 

//@ ensures i == 0; static_initializer 

//@ ensures i == 0; static_initializer );

//@ {} static {} {} static {}

//@ ensures i==0;      {} //@ ensures i==0;      static {} 

//@ ensures i==0;      static { i = 0; } 

//@ monitors_for i = j,a.k,Object.class;      }"

//@ monitors_for i = 5;      }"

//@ monitors_for i <- m;      }"

//@ monitors_for k = i,A.k;      }"

//@ monitors_for k = Object;      }"

//@ monitors_for z = i;      } class B { public Object z; }"

//@ readable j if i == null; writable j if i == null;      } class B { public Object z; }"

//@ readable k if i == null; writable k if i == null;      } class B { public Object z; }"

//@ readable z if i == null; writable z if i == null;      } class B { Object z; }"

//@ readable k if k == null; writable k if k == null;      } class B { public Object z; }"

//@ readable i if this == null; writable i if this == null;      } class B { public Object z; }"

//@ readable k if this == null; writable k if this == null;      } class B { public Object z; }"

//@ readable k if Object.class == null; writable k if Object.class == null;      } class B { public Object z; }"

//@ invariant b;);

//@ invariant k;,

//@ invariant bb;);

//@ static invariant bb;

//@ static invariant bb;);

//@ constraint b;);

//@ constraint k;,

//@ constraint bb;);

//@ constraint bb for \\everything;);

//@ constraint bb for A(), m, m(int), m(Object);

//@ static constraint bb for A();

//@ static constraint bb ;

//@ static constraint bb ;);

//@ constraint bb for m;);

//@ constraint bb for mm;);

//@ constraint bb for this.m;);

//@ constraint bb for A.m;);

//@ constraint bb for m(int););

//@ constraint bb for mm(int);

//@ constraint bb for this.m(int[],Object););

//@ constraint bb for a.m(java.lang.Integer););

//@ constraint bb for A.m(java.lang.Integer););

//@ constraint bb for A.m(java.lang.Integer);

//@ constraint bb for a.m(java.lang.Integer););

//@ constraint bb for m(java.lang.Integer);    } class B { void m(Integer i) {} }"

//@ constraint bb for B.m(java.lang.Integer);    } class B { void m(Integer i) {} }"

//@ axiom b;);

//@ axiom k;,

//@ axiom bb;);

//@ initially b;);

//@ initially k;,

//@ initially bb;);

//@ initially x;,

//@ static initially b;

//@ model int i; represents i = true;

//@ model int i; represents i <- true;

//@ model int i; represents i \\such_that 0;

//@ model int i; represents j = 0;

//@ model int i; represents i :0;

//@ model int j; represents j = ;

//@ model int i; represents j = 0

//@ model int i; represents x = 0

//@ model int i; represents x.* = 0

//@ model int i; represents x[*] = 0

//@ model int i; represents x[3] = 0;

//@ model int i; static represents i = 0;

//@ model static int i; represents i = 0;

//@ ghost int i; represents i = 0;

//@ represents i = 0;

//@ ghost int i; represents i = 0;);

//@ represents i = 0;);

//@ static represents i = 0;    } class B { //@ static model int i; 

//@ model static int i; static represents i = k;

//@ model static int i; static represents i = j;

//@  model static int i; static represents i <- j;

//@ ensures ((boolean)\\result);     int m() { return 0; }}"

//@ ensures ((short)\\result) == 0;     int m() { return 0; }}"

//@ public normal_behavior ensures true; public model boolean m();      }"

//@ forall int i,j; old boolean k=true, m = false; requires i == 0;      public void m() {}}"

//@ forall int i=0,j; old boolean k, m = false; requires i == 0;      public void m() {}}"

//@ old int i=true; old boolean m=0; requires i == 0;      public void m() {}}"

//@ forall int j; old int k=0; requires i+j<k;      public void m(int i) {}}"

//@ forall boolean j; old boolean  k=true; requires i+j<k;      public void m(boolean i) {}}"

//@ forall boolean j; old boolean k=true; requires i+j<k;      public void m(boolean i) {}}"

//@ forall int i; old int k=0   ; requires i<k;      public void m(int i) {}}"

//@ forall int k; old int k=0   ; requires i<k;      public void m(int i) {}}"

//@ forall int j; old int k=0   ; requires i<k;     //@{| forall int m; ensures k<m; also ensures k<m; |}      public void m(int i) {}}"

//@ forall int j; old int k=0   ; requires i<k;     //@{| forall int k; ensures k<m; also ensures i==0; |}      public void m(int i) {}}"

//@signals(Exception e) true;      void m(){}}");

//@signals(Exception) true;      void m(){}}");

//@signals(Object e) true;      void m(){}

//@signals true;      void m(){}

//@signals(RuntimeException ) ;      void m(){}}"

//@signals(java.io.IOException e) 2;      void m(){}

//@signals(int e) true;      void m(){}

//@signals(java.io.IOException e) e==null;      void m(){}}");

//@signals_only \    othing;    void m() {}}");

//@signals_only RuntimeException;    void m() {}}");

//@signals_only RuntimeException,Exception;    void m() {}}");

//@signals_only ;    void m() {}

//@signals_only RuntimeException java.lang.Exception;    void m() {}

//@signals_only RuntimeException,;    void m() {}

//@signals_only RuntimeException,,RuntimeException;    void m() {}

//@signals_only RuntimeException    void m() {}

//@signals_only RuntimeException[];    void m() {}

//@signals_only int;    void m() {}

//@signals_only Q;    void m() {}

//@ model JMLDataGroup k;      int n; //@ in k; 

//@ in k, this.k, super.kk;     } class B { //@ model int kk; 

/*@ spec_public */
//@ in k, this.k, super.kk;     } class B { //@ model int kk; 

/*@ spec_public */
//@ in m; 

//@ model static int m;      int n; //@ in m; 

//@ model JMLDataGroup k;      A next; //@ maps next.next \\into k; 

//@ model JMLDataGroup k;      A[] next; //@ maps next[*].next \\into k; 

//@ model JMLDataGroup k;      A[] next; //@ maps next[*] \\into k; 

//@ model JMLDataGroup k;      A[] next; //@ maps next[2 .. 3].next \\into k,k; 

//@ model JMLDataGroup k;      A[] next; //@ maps next[2].next \\into this.k; 

//@initializer static_initializer 

//@initializer static_initializer initializer static_initializer

//@ ensures i==0; initializer ensures j == 0; static_initializer 

//@ ensures i == 0; static_initializer 

//@ ensures i == 0; static_initializer );

//@ {} static {} {} static {}

//@ ensures i==0;      {} //@ ensures i==0;      static {} 

//@ ensures i==0;      static { i = 0; } 

//@ monitors_for i = j,a.k,Object.class;      }"

//@ monitors_for i = 5;      }"

//@ monitors_for i <- m;      }"

//@ monitors_for k = i,A.k;      }"

//@ monitors_for k = Object;      }"

//@ monitors_for z = i;      } class B { public Object z; }"

//@ readable j if i == null; writable j if i == null;      } class B { public Object z; }"

//@ readable k if i == null; writable k if i == null;      } class B { public Object z; }"

//@ readable z if i == null; writable z if i == null;      } class B { Object z; }"

//@ readable k if k == null; writable k if k == null;      } class B { public Object z; }"

//@ readable i if this == null; writable i if this == null;      } class B { public Object z; }"

//@ readable k if this == null; writable k if this == null;      } class B { public Object z; }"

//@ readable k if Object.class == null; writable k if Object.class == null;      } class B { public Object z; }"

//@ invariant b;);

//@ invariant k;,

//@ invariant bb;);

//@ static invariant bb;

//@ static invariant bb;);

//@ constraint b;);

//@ constraint k;,

//@ constraint bb;);

//@ constraint bb for \\everything;);

//@ constraint bb for A(), m, m(int), m(Object);

//@ static constraint bb for A();

//@ static constraint bb ;

//@ static constraint bb ;);

//@ constraint bb for m;);

//@ constraint bb for mm;);

//@ constraint bb for this.m;);

//@ constraint bb for A.m;);

//@ constraint bb for m(int););

//@ constraint bb for mm(int);

//@ constraint bb for this.m(int[],Object););

//@ constraint bb for a.m(java.lang.Integer););

//@ constraint bb for A.m(java.lang.Integer););

//@ constraint bb for A.m(java.lang.Integer);

//@ constraint bb for a.m(java.lang.Integer););

//@ constraint bb for m(java.lang.Integer);    } class B { void m(Integer i) {} }"

//@ constraint bb for B.m(java.lang.Integer);    } class B { void m(Integer i) {} }"

//@ axiom b;);

//@ axiom k;,

//@ axiom bb;);

//@ initially b;);

//@ initially k;,

//@ initially bb;);

//@ initially x;,

//@ static initially b;

//@ model int i; represents i = true;

//@ model int i; represents i <- true;

//@ model int i; represents i \\such_that 0;

//@ model int i; represents j = 0;

//@ model int i; represents i :0;

//@ model int j; represents j = ;

//@ model int i; represents j = 0

//@ model int i; represents x = 0

//@ model int i; represents x.* = 0

//@ model int i; represents x[*] = 0

//@ model int i; represents x[3] = 0;

//@ model int i; static represents i = 0;

//@ model static int i; represents i = 0;

//@ ghost int i; represents i = 0;

//@ represents i = 0;

//@ ghost int i; represents i = 0;);

//@ represents i = 0;);

//@ static represents i = 0;    } class B { //@ static model int i; 

//@ model static int i; static represents i = k;

//@ model static int i; static represents i = j;

//@  model static int i; static represents i <- j;

//@ ensures ((boolean)\\result);     int m() { return 0; }}"

//@ ensures ((short)\\result) == 0;     int m() { return 0; }}"

//@ public normal_behavior ensures true; public model boolean m();      }"

//@ forall int i,j; old boolean k=true, m = false; requires i == 0;      public void m() {}}"

//@ forall int i=0,j; old boolean k, m = false; requires i == 0;      public void m() {}}"

//@ old int i=true; old boolean m=0; requires i == 0;      public void m() {}}"

//@ forall int j; old int k=0; requires i+j<k;      public void m(int i) {}}"

//@ forall boolean j; old boolean  k=true; requires i+j<k;      public void m(boolean i) {}}"

//@ forall boolean j; old boolean k=true; requires i+j<k;      public void m(boolean i) {}}"

//@ forall int i; old int k=0   ; requires i<k;      public void m(int i) {}}"

//@ forall int k; old int k=0   ; requires i<k;      public void m(int i) {}}"

//@ forall int j; old int k=0   ; requires i<k;     //@{| forall int m; ensures k<m; also ensures k<m; |}      public void m(int i) {}}"

//@ forall int j; old int k=0   ; requires i<k;     //@{| forall int k; ensures k<m; also ensures i==0; |}      public void m(int i) {}}"

//@signals(Exception e) true;      void m(){}}");

//@signals(Exception) true;      void m(){}}");

//@signals(Object e) true;      void m(){}

//@signals true;      void m(){}

//@signals(RuntimeException ) ;      void m(){}}"

//@signals(java.io.IOException e) 2;      void m(){}

//@signals(int e) true;      void m(){}

//@signals(java.io.IOException e) e==null;      void m(){}}");

//@signals_only \    othing;    void m() {}}");

//@signals_only RuntimeException;    void m() {}}");

//@signals_only RuntimeException,Exception;    void m() {}}");

//@signals_only ;    void m() {}

//@signals_only RuntimeException java.lang.Exception;    void m() {}

//@signals_only RuntimeException,;    void m() {}

//@signals_only RuntimeException,,RuntimeException;    void m() {}

//@signals_only RuntimeException    void m() {}

//@signals_only RuntimeException[];    void m() {}

//@signals_only int;    void m() {}

//@signals_only Q;    void m() {}

//@ model JMLDataGroup k;      int n; //@ in k; 

//@ in k, this.k, super.kk;     } class B { //@ model int kk; 

/*@ spec_public */
//@ in k, this.k, super.kk;     } class B { //@ model int kk; 

/*@ spec_public */
//@ in m; 

//@ model static int m;      int n; //@ in m; 

//@ model JMLDataGroup k;      A next; //@ maps next.next \\into k; 

//@ model JMLDataGroup k;      A[] next; //@ maps next[*].next \\into k; 

//@ model JMLDataGroup k;      A[] next; //@ maps next[*] \\into k; 

//@ model JMLDataGroup k;      A[] next; //@ maps next[2 .. 3].next \\into k,k; 

//@ model JMLDataGroup k;      A[] next; //@ maps next[2].next \\into this.k; 

//@initializer static_initializer 

//@initializer static_initializer initializer static_initializer

//@ ensures i==0; initializer ensures j == 0; static_initializer 

//@ ensures i == 0; static_initializer 

//@ ensures i == 0; static_initializer );

//@ {} static {} {} static {}

//@ ensures i==0;      {} //@ ensures i==0;      static {} 

//@ ensures i==0;      static { i = 0; } 

//@ monitors_for i = j,a.k,Object.class;      }"

//@ monitors_for i = 5;      }"

//@ monitors_for i <- m;      }"

//@ monitors_for k = i,A.k;      }"

//@ monitors_for k = Object;      }"

//@ monitors_for z = i;      } class B { public Object z; }"

//@ readable j if i == null; writable j if i == null;      } class B { public Object z; }"

//@ readable k if i == null; writable k if i == null;      } class B { public Object z; }"

//@ readable z if i == null; writable z if i == null;      } class B { Object z; }"

//@ readable k if k == null; writable k if k == null;      } class B { public Object z; }"

//@ readable i if this == null; writable i if this == null;      } class B { public Object z; }"

//@ readable k if this == null; writable k if this == null;      } class B { public Object z; }"

//@ readable k if Object.class == null; writable k if Object.class == null;      } class B { public Object z; }"

































/* Solution:

*/
//@ invariant contents != null;

//@ invariant 0 <= n;

//@ invariant n <= contents.length;

//@ requires input != null;

//@ requires b != null;

// error in code corrected

// error in code corrected

// @ loop_invariant i>=0 && i<=n+1;

// error in code corrected

//@ ensures \result >= 0;

/*@ pure @*/
//@ loop_invariant i>=0 && i<=n;

//@ loop_invariant count >= 0;

// error in code corrected

//@ assert new_contents.length == 2*n+1 ; // this should not fail?

//@ assert n >= 0;

//@ assert 2*n+1 > n;

//@ assert  n < new_contents.length;

//@ requires b != null;

//@ requires src != null;

//@ requires srcOff >=0;

//@ requires dest != null;

//@ requires destOff >=0;

//@ requires length >=0;

//@ requires srcOff + length <= src.length;

//@ requires destOff + length <= dest.length;

//@ assignable dest[*];

/*@ loop_invariant i>=0 && i<=length; @*/
/* Solution:

*/
// NOTE: no specification yet that the elements of the Bag.contents array are

// what they are supposed tdo be (e.g. only slightly changed by add, remove,

// properly initalized by initializers).

/*@ code_java_math */
//@ invariant contents != null;

//@ invariant 0 <= n;

//@ invariant n <= contents.length;

//@ requires input != null;

// default assignable includes this.n and this.contents and this.contents[*]

//@ requires b != null;

// error in code corrected

// added by DRC, so that invariants hold before a method call

//@ loop_invariant 0 <= i && i <= n && n >= 0 && n <= contents.length; // added by DRC

// error in code corrected

//@ loop_invariant i>=0 && i<=n && n >= 0 && n <= contents.length; // DRC modified

// error in code corrected

// DRC modified

//@ ensures \result >= 0;

/*@ pure @*/
//@ loop_invariant i>=0 && i<=n;

//@ loop_invariant count >= 0;

//@ modifies n, contents, contents[*];  // added by DRC

// error in code corrected

//@ requires b != null;

//@ modifies n,contents; // DRC added

// DRC added

//@ requires src != null;

//@ requires srcOff >=0;

//@ requires dest != null;

//@ requires destOff >=0;

//@ requires length >=0;

//@ requires srcOff + length <= src.length;

//@ requires destOff + length <= dest.length;

//@ assignable dest[*];

/*@ loop_invariant i>=0 && i<=length; @*/
// This example had a problem with crashing, because of the lack of helper

// on the functions used in the invariant.

/*@ code_java_math */
//@ public invariant x() + y() > 0;

/*@ spec_public */
/*@ spec_public */
//@ requires the_x + the_y > 0;

//@ ensures x() == the_x && y() == the_y;

//@ ensures \result == my_x;

/*@ pure helper @*/
//@ ensures \result == my_y;

/*@ pure helper @*/
//@ ensures \result == x() + y() + the_operand;

/*@ pure @*/
// This example had a problem with crashing, because of the lack of helper

// on the functions used in the invariant.

/*@ code_java_math */
//@ public invariant x() + y() > 0;

/*@ spec_public */
/*@ spec_public */
//@ requires the_x + the_y > 0;

//@ ensures x() == the_x && y() == the_y;

//@ ensures \result == my_x;

/*@ pure @*/
//@ ensures \result == my_y;

/*@ pure @*/
//@ ensures \result == x() + y() + the_operand;

/*@ pure @*/
//@ requires pp.position.x >= 0 && pp.position.x < xSize;

//@ ensures piece == pp;

//@ pure

//@ public invariant piece.position.x >= 0 && piece.position.x < xSize;

//@ normal_behavior

//@ requires inRange(p);

//@ assignable piece.position;

//@ assert inRange(piece.position);

//@ ensures \result == ( p.x >= 0 && p.x < xSize );

//@ pure helper

//@ ensures position == p;

//@ pure

//@ normal_behavior

//@ assignable position;

//@ ensures position == p;

// From DMZ - 10/16/2013

//@ assert !(b & bb);

//@ assert (b | bb);

//@ assert !(b ^ bb);

//@ assert (b & bb); // FALSE

/*
 * Extended Static Checking Exercise
 * Fall 2013 CSCI181F - Verification-centric Software Engineering
 * Daniel M. Zimmerman
 */
//package annotated;

/**
 * A class that represents a quantity of (U.S.) cash in dollars
 * and cents. The quantity can be positive or negative (representing
 * an asset or a debt). Instances of this class are immutable, so it has
 * only queries (and a constructor).
 *
 * @author Daniel M. Zimmerman
 * @version 2013-10-17
 */
/*@ code_java_math */
// invariants for sane amounts of dollars and cents

//@ public invariant -CENTS_IN_DOLLAR < my_cents && my_cents < CENTS_IN_DOLLAR;

//@ public invariant !(my_cents > 0 && my_dollars < 0);

//@ public invariant !(my_cents < 0 && my_dollars > 0);

/**
   * The number of cents in one dollar.
   */
/**
   * The number of dollars.
   */
/*@ spec_public */
/**
   * The number of cents.
   */
/*@ spec_public */
//@ requires -100 < the_cents && the_cents < 100;

//@ requires !(the_cents > 0 && the_dollars < 0);

//@ requires !(the_cents < 0 && the_dollars > 0);

//@ ensures my_dollars == the_dollars && my_cents == the_cents;

/**
   * Constructs a new CashAmount representing the specified amount of cash.
   *
   * @param the_dollars The number of dollars.
   * @param the_cents The number of cents.
   */
/**
   * @return a new CashAmount representing the negation of this
   * CashAmount.
   */
/*@ ensures \result.my_dollars * CENTS_IN_DOLLAR + \result.my_cents ==
              the_amount.my_dollars * CENTS_IN_DOLLAR + the_amount.my_cents +
              my_dollars * CENTS_IN_DOLLAR + my_cents;
   */
/**
   * Increases this CashAmount by the specified CashAmount.
   *
   * @param the_amount The amount to increase by.
   * @return The resulting CashAmount.
   */
/**
   * Decreases this CashAmount by the specified CashAmount.
   *
   * @param the_amount The amount to decrease by.
   * @return The resulting CashAmount.
   */
/**
   * @return The number of dollars in this CashAmount.
   */
//@ ensures \result == my_dollars;

/*@ pure helper */
/**
   * @return The number of cents in this CashAmount.
   */
//@ ensures \result == my_cents;

/*@ pure helper */
/*@ ensures \result <==> the_other.my_dollars == my_dollars &&
                           the_other.my_cents == my_cents;
   */
/**
   * Compare this CashAmount with the specified CashAmount for being identical.
   * Being identical here means "has exactly the same numbers of dollars and cents."
   *
   * @param the_other The other CashAmount.
   * @return true if the two amounts are identical, false otherwise.
   */
/*@ pure helper */
/*@ ensures \result <==>
                 the_other.my_dollars * CENTS_IN_DOLLAR + the_other.my_cents ==
                 my_dollars * CENTS_IN_DOLLAR + my_cents;
   */
/**
   * Compare this CashAmount with the specified CashAmount for equivalence.
   * Equivalent here means "represents the same total number of cents".
   *
   * @param the_other The other CashAmount.
   * @return true if the two amounts are equivalent, false otherwise.
   */
/*@ pure helper */


//@ ensures o.equals(oo);

//@ pure

/*@ non_null*/


//@ ensures o != null && o.equals(oo);

//@ pure

/*@ non_null*/


//@ ensures oo.equals(o);

//@ pure

/*@ non_null*/


//@ ensures o.equals(oo);

//@ pure

/*@ non_null*/


//@ ensures o.equals(oo);

//@ pure

/*@ non_null*/


//@ ensures o.equals(oo);

//@ pure

/*@ non_null*/
//@ public invariant good();

//@ pure helper

//@ also ensures \result;

//@ pure helper

/*@ public normal_behavior
      requires 0 <= the_input;
      ensures \result == 0;
    also public exceptional_behavior
      requires the_input < 0;
      signals (IllegalArgumentException e) true;
      signals_only IllegalArgumentException;
*/
/*@   requires 0 <= the_input;
      ensures \result == 0;
    also
      requires the_input < 0;
      diverges true;
      signals (IllegalArgumentException e) true;
      signals_only IllegalArgumentException;
*/
/*
I get an OpenJML ESC Error:

"An error while executing a proof script for sort: (error "Parse Error: <shell>:1.33:Symbol Real not declared as a type")

when trying to ESC the following method (ignore the fact that it doesn't actually calculate a square root  ):

I then get an error marker saying "Not implemented for static checking: diverges clause"; which is fine, but the proof script error that popped up was pretty unnerving. Also, if I write it this way:

[ see escDiverges2 ]

It checks fine. But isn't the diverges clause in exceptional_behavior just "true" by default, the same as I had specified it in my lightweight spec?

*/
// This example from DMZ on 10/23 - has a problem proving the loop invariant with the exists

//@ requires the_array.length > 0;

/*@ ensures (\forall int i; 0 <= i && i < the_array.length;
               the_array[i] <= \result);
   */
/*@ ensures (\exists int i; 0 <= i && i < the_array.length;
               the_array[i] == \result);
   */
/**
   * A method that finds the maximum value in an array.
   *
   * @param the_array The array to find the maximum value in.
   * @return The index of the maximum value. If it appears more
   * than once, we do not define which of the indices we return.
   */
/*@ pure */
//@ assume the_array[0] >= Integer.MIN_VALUE;

//@ loop_invariant 0 <= i;

//@ loop_invariant i <= the_array.length;

//@ loop_invariant (\forall int j; 0 <= j && j < i; the_array[j] <= result);

//@ loop_invariant i > 0 ==> (\exists int j; 0 <= j && j < i; the_array[j] == result);

//@ loop_invariant i == 0 ==> result == Integer.MIN_VALUE;

//@ decreasing the_array.length - i;

// This example from DMZ on 10/23 - has a problem proving the loop invariant with the exists

//@ requires the_array.length > 0;

/*@ ensures (\forall int i; 0 <= i && i < the_array.length;
               the_array[i] <= \result);
   */
/*@ ensures (\exists int i; 0 <= i && i < the_array.length;
               the_array[i] == \result);
   */
/**
   * A method that finds the maximum value in an array.
   *
   * @param the_array The array to find the maximum value in.
   * @return The index of the maximum value. If it appears more
   * than once, we do not define which of the indices we return.
   */
/*@ pure */
//@ loop_invariant 0 <= i;

//@ loop_invariant i <= the_array.length;

//@ loop_invariant (\forall int j; 0 <= j && j < i; the_array[j] <= result);

//@ loop_invariant i > 0 ==> (\exists int j; 0 <= j && j < i; the_array[j] == result);

//@ loop_invariant i == 0 ==> result == the_array[0];

//@ decreasing the_array.length - i;

// This example from DMZ on 10/23 - has a problem proving the loop invariant with the exists

//@ requires the_array.length > 0;

/*@ ensures (\forall int i; 0 <= i && i < the_array.length;
               the_array[i] <= \result);
   */
/*@ ensures (\exists int i; 0 <= i && i < the_array.length;
               the_array[i] == \result);
   */
/**
   * A method that finds the maximum value in an array.
   *
   * @param the_array The array to find the maximum value in.
   * @return The index of the maximum value. If it appears more
   * than once, we do not define which of the indices we return.
   */
/*@ pure */
//@ assume the_array[0] >= Integer.MIN_VALUE;

//@ loop_invariant 0 <= i;

//@ loop_invariant i <= the_array.length;

//@ loop_invariant (\forall int j; 0 <= j && j < i; the_array[j] <= result);

//@ loop_invariant i > 0 ==> (\exists int j; 0 <= j && j < i; the_array[j] == result);

//@ decreasing the_array.length - i;

// Problem reported by DMZ on 10/30

/**
 * Implements a doubly linked list.
 *
 * @author Kevin Vigue
 * @version 9/18/2013
 * @param <T> Type stored in list.
 */
/**
   * The linked list node after this one.
   *
   * @author Kevin Vigue
   * @version 9/18/2013
   */
/*@ nullable spec_public */
/**
   * The linked list node before this one.
   *
   * @author Kevin Vigue
   * @version 9/18/2013
   */
/*@ nullable spec_public */
/**
   * The value stored in this linked list node.
   *
   * @author Kevin Vigue
   * @version 9/18/2013
   */
/*@ nullable spec_public */
//@ public invariant my_next != this;

//@ public invariant my_prev != this;

//@ public invariant my_next != null ==> my_next != my_prev;

/**
   * Constructor that takes a value.
   *
   * @author Kevin Vigue
   * @version 9/18/2013
   * @param a_value Data to be stored in my_value.
   */
/**
   * Constructor that lets you specify my_prev, my_value, and my_next.
   *
   * @author Kevin Vigue
   * @version 9/18/2013
   * @param a_prev Doubly linked list that comes before this one.
   * @param a_value Value to be stored in this node.
   * @param a_next Doubly linked list that comes after this one.
   */
//@ requires a_prev != this && a_next != this && (a_next != null ==> a_next != a_prev);

/**
   * Getter for my_value.
   *
   * @author Kevin Vigue
   * @version 9/18/2013
   * @return The value in this node.
   */

/**
   * Setter for my_value.
   *
   * @author Kevin Vigue
   * @version 9/18/2013
   * @param a_value New value for this node.
   */
//@ assignable my_value;

//@ ensures my_value == a_value;


/**
   * Getter for my_prev.
   *
   * @author Kevin Vigue
   * @version 9/18/2013
   * @return The doubly linked list before this one.
   */

/**
   * Setter for my_prev.
   *
   * @author Kevin Vigue
   * @version 9/18/2013
   * @param a_doubly_linked_list New node to come before this one.
   */
//@ requires this != a_doubly_linked_list && (my_next != null ==> a_doubly_linked_list != my_next);

//@ assignable my_prev;

//@ ensures my_prev == a_doubly_linked_list;


// A doubly linked list's next is not itself.

/**
   * Getter for my_next.
   *
   * @author Kevin Vigue
   * @version 9/18/2013
   * @return The doubly linked list after this one.
   */

/**
   * Setter for my_next.
   *
   * @author Kevin Vigue
   * @version 9/18/2013
   * @param a_doubly_linked_list New node to come after this one.
   */
//@ requires this != a_doubly_linked_list && (a_doubly_linked_list != null ==> a_doubly_linked_list != my_prev);

//@ assignable my_next;

//@ ensures my_next == a_doubly_linked_list;


// A doubly linked list's prev is not itself.

/**
   * Removes this node from the larger doubly linked list structure.
   *
   * @author Kevin Vigue
   * @version 9/18/2013
   */
//@ requires my_prev != null && my_next != null;

//@ requires my_prev != my_next.my_next;

//@ requires my_prev.my_prev != my_next;

//@ public invariant value > 0;

//@ in value;

//@ public model int value;

//@ private represents value = my_value;

//@ requires value_1 > 0;

//@ ensures value == value_1;

/*@ spec_public */
//@ pure

//@ public invariant value > 0;

//@ in value;

//@ public model int value;

//@ private represents value = my_value;

//@ requires value_1 > 0;

//@ ensures value == value_1;

/*@ spec_public */
//@ public invariant value > 0;

//@ in value;

//@ public model int value;

//@ private represents value = my_value;

//@ requires value_1 > 0;

//@ ensures value == value_1;

/*@ spec_public */
//@ signals_only     othing;

/*@ spec_public @*/
//@ requires str!=null;

//@ ensures value == str; // should this be value.equals(str)?

//@ assignable value;

//@ensures \result == value; // likewise, should this be .equals?

/*@ pure @*/
// <<< this is the line that generates the error.

/*@ code_java_math */
//@ in value;

//@ public model int value;

//@ private represents value = -rep;

//@ public invariant value >= 0;

//@ requires v >= 0;

//@ modifies this.*;

//@ ensures value == v;

//@ requires this != other;

//@ modifies value;

//@ ensures value == (other.value + \old(value));

//@ ghost boolean b = (\lbl SAME this == other);

//@ assignable     othing;

//@ ensures \result.value == (other.value + value);

//@ public invariant m();

//@ ensures \result;

/*@ pure */
//@ requires m();

//@ public invariant m();

/*@ pure */
//@ requires m();

//@ public invariant m();

/*@ pure */
//@ requires m();

/*
 * Fall 2013 CSCI181G - Homework 6
 * Static and Runtime Checking
 */
/**
 * A trivial string class that supports initialization,
 * concatenation and the substring operation.
 *
 * @author Daniel M. Zimmerman
 * @author YOUR NAME HERE
 * @version 2013-11-04
 */
/*
   * The class should have a history constraint about the fact
   * that it is immutable ("final" on the array isn't quite good enough).
   */
// Instance Fields

/**
   * The character data of this SimpleString.
   */
//@ in chars;

//@ public model char[] chars;

//@ private represents chars = my_chars;

// Constructors

/**
   * Constructs a new SimpleString with the contents of the specified
   * array of characters in the order they appear in the array.
   *
   * @param the_chars The array of characters.
   */
//@ ensures (\forall int i; 0 <= i && i < chars.length; chars[i] == the_chars[i]);

//@ assignable chars;

//@ maintaining (\forall int j; 0 <= j && j < i; my_chars[j] == the_chars[j]);

//@ maintaining 0 <= i && i <= my_chars.length;

//@ decreasing my_chars.length - i;

/*
 * Fall 2013 CSCI181G - Homework 6
 * Static and Runtime Checking
 */
/**
 * A trivial string class that supports initialization,
 * concatenation and the substring operation.
 *
 * @author Daniel M. Zimmerman
 * @author YOUR NAME HERE
 * @version 2013-11-04
 */
/*
   * The class should have a history constraint about the fact
   * that it is immutable ("final" on the array isn't quite good enough).
   */
// Instance Fields

/**
   * The character data of this SimpleString.
   */
/*@ spec_public */
// Constructors

/**
   * Constructs a new SimpleString with the contents of the specified
   * array of characters in the order they appear in the array.
   *
   * @param the_chars The array of characters.
   */
//@ ensures my_chars.length == the_chars.length;

//@ ensures (\forall int i; 0 <= i && i < my_chars.length; my_chars[i] == the_chars[i]);

//@ maintaining (\forall int j; 0 <= j && j < i; my_chars[j] == the_chars[j]);

//@ maintaining 0 <= i && i <= my_chars.length;

//@ decreasing my_chars.length - i;

/*
 * Fall 2013 CSCI181G - Homework 6
 * Static and Runtime Checking
 */
/**
 * A trivial string class that supports initialization,
 * concatenation and the substring operation.
 *
 * @author Daniel M. Zimmerman
 * @author YOUR NAME HERE
 * @version 2013-11-04
 */
/*
   * The class should have a history constraint about the fact
   * that it is immutable ("final" on the array isn't quite good enough).
   */
// Instance Fields

/**
   * The character data of this SimpleString.
   */
/*@ spec_public */
/*@ spec_public */
/*@ spec_public */
/*@ spec_public */
// Constructors

/**
     * Constructs a new SimpleString with the contents of the specified
     * array of characters in the order they appear in the array.
     *
     * @param the_array The array of characters.
     */
//@ ensures (\forall int i; 0 <= i && i < my_chars.length; my_chars[i] == the_array[i]);


// @ assert the_array != null;

// @ assert the_array != null;

// @ assert my_chars != null;

// @ assert my_chars.length == the_array.length;

// @ assert (\typeof(the_array)) == \type(char[]);

// @ assert (\typeof(my_chars)) == \type(char[]);

// @ assert \erasure(\typeof(my_chars)) == \erasure(\type(char[]));

// @ assert \elemtype(\typeof(the_array)) == \type(char);

// @ assert \elemtype(\typeof(my_chars)) == \type(char);

// @ assert my_chars instanceof char[];

// @ assert the_array instanceof char[];

// @ assert true;

/**
     * Constructs a new SimpleString with the contents of the specified
     * array of ints in the order they appear in the array.
     *
     * @param the_array The array of ints.
     */
//@ ensures (\forall int i; 0 <= i && i < my_ints.length; my_ints[i] == the_array[i]);


/**
     * Constructs a new SimpleString with the contents of the specified
     * array of ints in the order they appear in the array.
     *
     * @param the_array The array of ints.
     */
//@ ensures my_Objects.length == the_array.length;

//@ ensures (\forall int i; 0 <= i && i < my_Objects.length; my_Objects[i] == the_array[i]);


//@ ensures my_Integers.length == the_array.length;

//@ ensures (\forall int i; 0 <= i && i < my_Integers.length; my_Integers[i] == the_array[i]);


/*
 * Fall 2013 CSCI181G - Homework 6
 * Static and Runtime Checking
 */
/**
 * A trivial string class that supports initialization,
 * concatenation and the substring operation.
 *
 * @author Daniel M. Zimmerman
 * @author YOUR NAME HERE
 * @version 2013-11-04
 */
/*
   * The class should have a history constraint about the fact
   * that it is immutable ("final" on the array isn't quite good enough).
   */
// Instance Fields

/**
   * The character data of this SimpleString.
   */
/*@ spec_public */
/*@ spec_public */
/*@ spec_public */
/*@ spec_public */
// Constructors

/**
     * Constructs a new SimpleString with the contents of the specified
     * array of characters in the order they appear in the array.
     *
     * @param the_array The array of characters.
     */
//@ ensures (\forall int i; 0 <= i && i < my_chars.length; my_chars[i] == the_array[i]);


// @ assert the_array != null;

// @ assert the_array != null;

// @ assert my_chars != null;

// @ assert my_chars.length == the_array.length;

// @ assert (\typeof(the_array)) == \type(char[]);

// @ assert (\typeof(my_chars)) == \type(char[]);

// @ assert \erasure(\typeof(my_chars)) == \erasure(\type(char[]));

// @ assert \elemtype(\typeof(the_array)) == \type(char);

// @ assert \elemtype(\typeof(my_chars)) == \type(char);

// @ assert my_chars instanceof char[];

// @ assert the_array instanceof char[];

// @ assert true;

/**
     * Constructs a new SimpleString with the contents of the specified
     * array of ints in the order they appear in the array.
     *
     * @param the_array The array of ints.
     */
//@ ensures (\forall int i; 0 <= i && i < my_ints.length; my_ints[i] == the_array[i]);


/**
     * Constructs a new SimpleString with the contents of the specified
     * array of ints in the order they appear in the array.
     *
     * @param the_array The array of ints.
     */
//@ ensures my_Objects.length == the_array.length;

//@ ensures (\forall int i; 0 <= i && i < my_Objects.length; my_Objects[i] == the_array[i]);


//@ assert the_array.length >= 0;

//@ assert the_array instanceof Object[];

//@ assert my_Objects instanceof Object[];

//@ assert \elemtype(\typeof(the_array)) <: \elemtype(\typeof(my_Objects));

//@ assert 0 + the_array.length <= ((Object[])the_array).length;

//@ assert 0 + the_array.length <= ((Object[])my_Objects).length;

//@ ensures my_Integers.length == the_array.length;

//@ ensures (\forall int i; 0 <= i && i < my_Integers.length; my_Integers[i] == the_array[i]);


//@ requires k < 0;

//@ ensures \result == 0;

//@ also

//@ requires true;

//@ requires k >= 0;

//@ ensures \result != 0;

//@ loop_invariant 0 <= i && i <= 10;

//@ loop_invariant i == j;

//@ decreases 10-i;

//@ loop_invariant 0 <= i && i <= 10;

//@ loop_invariant i == j;

//@ loop_invariant i == \count;

//@ decreases 9-i;

//@ loop_invariant 0 <= i && i <= 10;

//@ loop_invariant i == j;

//@ decreases 8-i;

//@ ensures \result == 41;

//@ requires true;

//@ ensures \result != 0;

//@ requires true;

//@ ensures \result != 0;

//@ assert \typeof(o) == \type(Object);

//@ requires true;

//@ assignable k;

//@ signals (Exception e) false;

//@ requires true;

//@ assignable k;

//@ ensures k == 2;

//@ signals (Exception e) k == 1;

//@ requires true;

//@ assignable k;

//@ ensures k == 2;

//@ signals (Exception e) k == 1;

//@ assert i == 0 &&     onnullelements(a);

//@ assert     ot_modified(i);

//@ assert i == 4 &&     ot_modified(i);

//@ loop_invariant j == i && 0 <= i && i <= k;

//@ assert j == k;

//@ loop_invariant j == i && 0 <= i && i <= k;

//@ assert j == k;

//@ loop_invariant j == i && 0 <= i && i <= k;

//@ assert false;

//@ assert j == k;

//@ loop_invariant j == i && 0 <= i && i <= k;

//@ decreases j;

//@ assert j == k;

//@ loop_invariant j == i && 0 <= i && i <= k;

//@ decreases i-j;

//@ assert j == k;

//@ loop_invariant j == i && 0 <= i && i <= k;

//@ decreases k-j-1;

//@ assert j == k;

//@ loop_invariant j == i && 0 <= i && i <= k;

//@ decreases k-j-2;

//@ assert j == k;

//@ loop_invariant j == 2*i && 0 <= i && i <= k;

//@ assert j == k+k;

//@ loop_invariant j == 2*i && 0 <= i && i <= k;

//@ assert j == k+k;

//@ loop_invariant j == 2*i && 0 <= i && i <= k;

//@ assert j == k+k;

//@ loop_invariant j == 2*i && 0 <= i && i < k;

//@ decreases k-i;

//@ assert j == k+k;

//@ loop_invariant j == 2*i && 0 <= i && i < k;

//@ assert j == k+k;

//@ loop_invariant j == 2*i && 0 <= i && i < k;

//@ assert j == k+k;

//@ loop_invariant j == \count && 0 <= \count && \count <= a.length;

//@ assert j == a.length;

//@ loop_invariant j == 0 && 0 <= \count && \count <= a.length;

//@ assert j == a.length;

//@ loop_invariant j == \count && 0 <= \count && \count <= a.length;

//@ loop_invariant j == \count && 0 <= \count && \count <= a.length;

//@ decreases a.length - j;

//@ assert j == a.length;

//@ loop_invariant j == \count && 0 <= \count && \count <= a.length;

//@ decreases j;

//@ assert j == a.length;

//@ loop_invariant j == \count && 0 <= \count && \count <= a.length;

//@ decreases -j;

//@ assert j == a.length;

//@ ensures \result == 41;

//@ requires true;

//@ ensures \result != 0;

//@ assert k != 7;

//@ assert (k == 7) ==> (k != 7);

//@ assert !((k != 7) ==> (k == 7));

//@ ghost int x = 9;

//@ set x = x + 9;

//@ debug x = 0;

//@ set x = (\lbl AAA k+1);

//-ESC@ set x = (\lbl BBB k+1);

//@ assume a.length > 10;

/*
 * Extended Static Checking Exercise
 * Fall 2013 CSCI181F - Verification-centric Software Engineering
 * Daniel M. Zimmerman
 */
/**
 * A class that implements a growable array of objects, based
 * on an old implementation of java.util.Vector - original source
 * by Lee Boynton and Jonathan Payne, Sun Microsystems.
 *
 * @author Daniel M. Zimmerman
 * @version 2013-10-24 (based on v1.38, 12/18/97)
 */
//@ public invariant my_element_data != null;

//@ public invariant my_element_count >= 0;

//@ public invariant my_element_count <= my_element_data.length;

//@ public invariant my_capacity_increment > 0;

/**
   * The array buffer into which the components of the vector are
   * stored. The capacity of the vector is the length of this array buffer.
   *
   * @since   JDK1.0
   */
//@ public invariant \elemtype(\typeof(my_element_data)) == \type(Object);

/*@ spec_public */
/**
   * The number of valid components in the vector.
   *
   * @since   JDK1.0
   */
/*@ spec_public */
/**
   * The amount by which the capacity of the vector is automatically
   * incremented when its size becomes greater than its capacity. If
   * the capacity increment is <code>0</code>, the capacity of the
   * vector is doubled each time it needs to grow.
   *
   * @since   JDK1.0
   */
/*@ spec_public */
/**
   * Constructs an empty vector with the specified initial capacity and
   * capacity increment.
   *
   * @param   the_initial_capacity     the initial capacity of the vector.
   * @param   the_capacity_increment   the amount by which the capacity is
   *                                   increased when the vector overflows.
   * @since   JDK1.0
   */
//@ requires the_initial_capacity >= 0 && the_capacity_increment > 0;

/**
   * Adds an element to the vector.
   *
   * @param the_object The element to add.
   */
// create a new array

// ERROR - could be negative

//@ ghost Object[] nd = new_data;

//@ loop_invariant 0 <= i && i <= my_element_count && new_data == nd;

//@ decreases my_element_count - i;

/**
   * Copies the components of this vector into the specified array.
   * The array must be big enough to hold all the objects in this  vector.
   *
   * @param   the_array   the array into which the components get copied.
   * @since   JDK1.0
   */
//@ loop_invariant 0 <= i && i <= my_element_count;

//@ decreases i;

/**
   * Searches for the first occurrence of the given argument, beginning the
   * search at <code>index</code>, and testing for equality using the
   * <code>equals</code> method.
   *
   * @param the_elem an object.
   * @param the_index the index to start searching from.
   * @return the index of the first occurrence of the object argument in this
   *         vector at position <code>index</code> or later in the vector;
   *         returns <code>-1</code> if the object is not found.
   * @see java.lang.Object#equals(java.lang.Object)
   * @since JDK1.0
   */
//@ loop_invariant the_index == i || (the_index <= i && i <= my_element_count);

//@ decreases my_element_count - i;

/**
   * Returns the component at the specified index.
   *
   * @param the_index an index into this vector.
   * @return the component at the specified index.
   * @exception ArrayIndexOutOfBoundsException if an invalid index was given.
   * @since JDK1.0
   */
//@ invariant a >= 0;

//@ requires a < 0;

//@ assert a ==1;  // result of geta() is 0 so result of getb() should be 1 and assertion should pass.

/*@  public normal_behavior
    @     ensures \result == 0;  // postcond 1  // incorrect postCondition
    @*/
/*@ pure @*/
/*@  public normal_behavior
    @     ensures \result == geta() + 1;   // postcond 2
    @*/
/** Documentation of class A */
// NESTED CLASSES

/** DOcumentation for class B. */
/** Documentation for a model nested class but not BNInterface. */
//@ static @Model public class MB {  }

// ENUMS

/** */
/** Model enum */
//@ model protected static enum mconsts { MEA, MEB }

// ANNOTATIONS

/** */
/** Model annotation */
//@ model public @interface MAnnot {}

/** Documentation of class A */
// CONSTRUCTORS

/** Documentation of a constructor with specs */
//@ requires true;

/** Documentation of a constructor without specs */
/*@ nullable*/
/** Documentation for a model constructor with specs. */
//@ requires i == 0;

//@ model public A(int i) {}

//@ requires i == 0.0;

//@ model public A(float i) {}

//@ requires i == null;

//@ model public A(Object i) {}

/** Documentation for a model constructor with no specs. */
//@ model public A(int i,int j, @NonNull Object k , non_null Object m) {}

//@ requires j >= 0;

//@ model public A(float nodocs ,int j , int k) {}

// CLASS SPECS

//@ invariant true;

//@ constraint false;

//@ initially true;

//@ axiom true;

//@ represents bb_model = 0;

// ENUMS

/** */
/** Model enum */
// FIXME  @ model protected static enum mconsts { MEA, MEB }

// ANNOTATIONS

/** */
/** Model annotation */
//@ model public @interface MAnnot {}

// FIELDS

/** Documentation for a model field */
/*@
 public secret model int i;
 secret represents i = 0;
*/
/** Documentatino for a ghost field and for fboth */
/*@
 ghost int ghost_i;
*/

//@ in i;

//@ maps a.i \into i;


//@ in i;

//@ in i;

//@ maps a.i \into i;

// METHODS

/** Documentation for a model method with specs - adl */
//@ also requires true;

//@ model @Deprecated Object adl(int i);

/** Documentation for a model method mdl_nospecs and for nodocnospecs */
//@ model int mdl_nospecs(int i);

//@ requires i == 0;

//@ model void ambig(int i);

//@ requires i == 0.0;

//@ model void ambig(float i);

//@ requires i == null;

//@ model void ambig(Object i);

//@ requires i == "";

//@ model void ambig(String i);

/** Doc but no specs */
/** Documentation of method m with specs. More info. */
//@ requires true;

//@ ensures \result == 0;

//@ signals (java.io.FileNotFoundException e) true;

//@ signals_only java.io.FileNotFoundException;

/** Documentation of method m with specs. More info. */
//@ requires true;

//@ ensures \result == 0;

//@ modifies a;

//@ signals (java.io.FileNotFoundException e) true;

//@ signals_only java.io.FileNotFoundException;

//@ requires true;

//@ ensures \result == 0;

//@ signals (java.io.FileNotFoundException e) true;

//@ signals_only java.io.FileNotFoundException;

/** @param s input
    @return output
*/


//@ public normal_behavior

//@  requires true;

//@  ensures true;

//@ also public behavior

//@  requires false;

//@  ensures false;



// NESTED CLASSES

/** DOcumentation for class B. */
//@invariant false && true;

/** Documentation for a model nested class but not BNInterface. */
//@ static @Model public class MB { invariant true;  void qqq() {} }

//@ static model public class MC extends BB {}

/**/
/*@ invariant false; */
/** Documentation for a model nested interface. */
//@ model public static interface BMInterface {}

/*@ invariant false; */
//@ ensures false;

//@ model Object adl(int i);

//@ ensures false;

/*@ invariant false && false; */
//@ ensures false && false;

//@ model @NonNull Object adl(int i);

//@ ensures false && false;

//@ invariant false;

//@ ensures z_public == 10;

//@ ensures z_public == 11;

//@ public model int mdla();

//@ public model int mdlb();

//@ private model void mdlc();

//@ ghost public int bb_ghost;

//@ model public int bb_model;

//@ ghost private int bb_private;

//@ model static public class BBBM {}

//@ model public CEmpty(Object o) {}

//@ ghost public int ghhost_i;

//@ model public int model_i;

//@ model public int model_m();

//@ model public static class CNested {}

//@ model class CCM {}

// @ model class M {}

//@ ghost public int gp_public;

//@ ghost protected int gp_protected;

//@ ghost int gp_package;

//@ ghost private int gp_private;

//@ model public void qp_public() {};

//@ model protected void qp_protected() {}

//@ model void qp_package() {}

//@ model private void qp_private() {}

/** public constructor */
/** protected constructor */
/** package constructor */
/** private constructor */
/** public model constructor */
//@ model public PVis(Object o) {}

/** protected model constructor */
//@ model protected PVis(float i) {}

/** package model constructor */
//@ model PVis(float i, float j) {}

/** private model constructor */
//@ model private PVis(float i, float j, float k) {}

//@ model public static class Dp_public {}

//@ model protected static class Dp_protected {}

//@ model static class Dp_package {}

//@ model private static class Dp_private {}

/** public nested model enum */
//@ model public static enum EMp_public { EMAp }

/** protected nested model enum */
//@ model protected static enum EMp_protected { EMBp }

/** package nested model enum */
//@ model static enum EMp_package { EMCp }

/** private nested model enum */
//@ model private static enum EMp_private { EMDp }

/** public nested interface */
/** protected nested interface */
/** package nested interface */
/** private nested interface */
/** public nested model interface */
//@ model public static interface IMp_public {  }

/** protected nested model interface */
//@ model protected static interface IMp_protected {  }

/** package nested model interface */
//@ model static interface IMp_package {  }

/** private nested model interface */
//@ model private static interface IMp_private {  }

/** public nested annotation */
/** protected nested annotation */
/** package nested annotation */
/** private nested annotation */
/** public nested model annotation */
//@ model public static @interface AMp_public {  }

/** protected nested model annotation */
//@ model protected static @interface AMp_protected {  }

/** package nested model annotation */
//@ model static @interface AMp_package {  }

/** private nested model annotation */
//@ model private static @interface AMp_private {  }

/** public field */
/** protected field */
/** package field */
/** private field */
/** public ghost field */
//@ ghost public int g_public;

/** protected ghost field */
//@ ghost protected int g_protected;

/** package ghost field */
//@ ghost int g_package;

/** private ghost field */
//@ ghost private int g_private;

/** public method */
/** protected method */
/** package method */
/** private method */
/** public model method */
//@ model public void q_public() {};

/** protected model method */
//@ model protected void q_protected() {}

/** package model method */
//@ model void q_package() {}

/** private model method */
//@ model private void q_private() {}

/** public constructor */
/** protected constructor */
/** package constructor */
/** private constructor */
/** public model constructor */
//@ model public Vis(Object o) {}

/** protected model constructor */
//@ model protected Vis(float i) {}

/** package model constructor */
//@ model Vis(float i, float j) {}

/** private model constructor */
//@ model private Vis(float i, float j, float k) {}

/** public nested class */
/** protected nested class */
/** package nested class */
/** private nested class */
/** public nested model class */
//@ model public static class D_public {}

/** protected nested model class */
//@ model protected static class D_protected {}

/** package nested model class */
//@ model static class D_package {}

/** private nested model class */
//@ model private static class D_private {}

/** public nested enum */
/** protected nested enum */
/** package nested enum */
/** private nested enum */
/** public nested model enum */
//@ model public static enum EM_public { EMA }

/** protected nested model enum */
//@ model protected static enum EM_protected { EMB }

/** package nested model enum */
//@ model static enum EM_package { EMC }

/** private nested model enum */
//@ model private static enum EM_private { EMD }

/** public nested interface */
/** protected nested interface */
/** package nested interface */
/** private nested interface */
/** public nested model interface */
//@ model public static interface IM_public {  }

/** protected nested model interface */
//@ model protected static interface IM_protected {  }

/** package nested model interface */
//@ model static interface IM_package {  }

/** private nested model interface */
//@ model private static interface IM_private {  }

/** public nested annotation */
/** protected nested annotation */
/** package nested annotation */
/** private nested annotation */
/** public nested model annotation */
//@ model public static @interface AM_public {  }

/** protected nested model annotation */
//@ model protected static @interface AM_protected {  }

/** package nested model annotation */
//@ model static @interface AM_package {  }

/** private nested model annotation */
//@ model private static @interface AM_private {  }

//@ ghost public int gs_public;

//@ ghost protected int gs_protected;

//@ ghost int gs_package;

//@ ghost private int gs_private;

//@ model public void qs_public() {};

//@ model protected void qs_protected() {}

//@ model void qs_package() {}

//@ model private void qs_private() {}

/** public constructor */
/** protected constructor */
/** package constructor */
/** private constructor */
/** public model constructor */
//@ model public SVis(Object o) {}

/** protected model constructor */
//@ model protected SVis(float i) {}

/** package model constructor */
//@ model SVis(float i, float j) {}

/** private model constructor */
//@ model private SVis(float i, float j, float k) {}

//@ model public static class Ds_public {}

//@ model protected static class Ds_protected {}

//@ model static class Ds_package {}

//@ model private static class Ds_private {}

/** public nested model enum */
//@ model public static enum EMs_public { EMAs }

/** protected nested model enum */
//@ model protected static enum EMs_protected { EMBs }

/** package nested model enum */
//@ model static enum EMs_package { EMCs }

/** private nested model enum */
//@ model private static enum EMs_private { EMDs }

/** public nested interface */
/** protected nested interface */
/** package nested interface */
/** private nested interface */
/** public nested model interface */
//@ model public static interface IMs_public {  }

/** protected nested model interface */
//@ model protected static interface IMs_protected {  }

/** package nested model interface */
//@ model static interface IMs_package {  }

/** private nested model interface */
//@ model private static interface IMs_private {  }

/** public nested annotation */
/** protected nested annotation */
/** package nested annotation */
/** private nested annotation */
/** public nested model annotation */
//@ model public static @interface AMs_public {  }

/** protected nested model annotation */
//@ model protected static @interface AMs_protected {  }

/** package nested model annotation */
//@ model static @interface AMs_package {  }

/** private nested model annotation */
//@ model private static @interface AMs_private {  }

/*@ normal_behavior
	  @ requires x != null;
      @ requires x.length >= 1;
	  @  ensures \result == (\forall int k; 0<k && k<x.length; x[k-1] <= x[k]);
	  @*/
//@ loop_invariant 1 <= i && i <= x.length;

//@ loop_invariant result == (\forall int j; 1 <= j && j < i; x[j-1] <= x[j]);

//@ decreasing x.length - i;

/*@ normal_behavior
	  @ requires x >= 0;
	  @ ensures \result == x*(x+1)/2;
	  @*/
//@ assume i*(i+1)/2 == ((i-1)*i/2) + i;

//@ loop_invariant 1 <= i && i <= x + 1;

//@ loop_invariant i*(i+1)/2 == ((i-1)*i/2) + i;

//@ loop_invariant result == (i-1)*i/2;

//@ decreasing (x - i);

//@ assume i*(i+1)/2 == ((i-1)*i/2) + i;

/*@ normal_behavior
	  @ requires x != null;
	  @ ensures (\forall int i; 0 <= i && i < x.length; x[i] <= \result);
	 */
//@ requires x.length > 0;

//@ loop_invariant 1 <= i && i <= x.length;

//@ loop_invariant (\forall int j; 0 <= j && j < i; x[j] <= max);

//@ decreasing x.length - i;

/*@ public model class MContents {
    public boolean foo() { return true; }
    }
    @*/
/*@ public static model class SMContents {
    public boolean foo() { return true; }
    }
    @*/
/*@ public model class MIndexedContents extends ModelClassExampleBug<E>.MContents {
          public boolean foo() { return false; }
        }

        public static model class SMIndexedContents extends ModelClassExampleBug<E>.SMContents { // ERROR
          public boolean foo() { return false; }
        }
    @*/
// ERROR

/*@
    public static model class Contents {
          public boolean foo() { return true; }
      }
    @*/
/*@
     public static model class IndexedContents extends NonGenericModelClassExampleBug.Contents {
          public boolean foo() { return false; }
     }
@*/
// This class tests that jmldoc knows how to print all kinds of expressions

//@ pure

//@ invariant i + 2 * 3 - 4 / 5 + 6 % i + (i << 5) + (i >> 6) + (i >>> i) == -10;

//@ invariant i > 0 && i < 0 && i == 0 && (i <= +10 ? i >= 0 : i != 0);

//@ invariant b || !b && (b ==> b) && ( b <==> b ) && ( b <=!=> b ) && (b <== b);

//@ invariant (i & 1) + (i ^ 1) + (i | 1) + (~i) == 0;

//@ invariant \type(int) <: \typeof(o);

//@ invariant \type(int) <#= \typeof(o);

//@ invariant \type(int) <# \typeof(o);

//@ invariant o instanceof java.lang.String;

//@ invariant true && false && (i == 10.0) && (i < -10e4) && (i > +.4e+5) && (i > +.4e+50);

//@ invariant "asd" != (Object)null && 'c' != 'd' && 'a' != '\045' && "45" != "    \"'\034";

//@ invariant (int)9 == 9 && (char)3 == 'd' && (float)4 == (double)5 && (short)1 == (byte)(-1) && (long)-13 == -12;

//@ invariant (new int[]{1,2,3}).length == 3 && (new int[]{1,2,3})[0] == 1 && a[3] == 6;

//@ invariant (new PP()).i == 0;

//  FIXME @ invariant (new PP() { int m() { return 5; } }) != null;

//@ invariant (\forall int i; i != 0) && (\forall int k; k > 0; k >-1);

//@ invariant (\exists int i; i != 0) && (\exists int k; k > 0; k >-1);

//@ invariant (    um_of int i; i == 0) == (    um_of int k; k > 0; k >-1);

//@ invariant (\max int i; i>0 && i<10; i ) == (\min int i; i>0 && i<10; i );

//@ invariant (\sum int i; i>0 && i<10; i ) == (\product int i; i>0 && i<10; i );

//@ invariant this.i == 0 && super.bb() && PP.class != null;

//@ invariant (* informal predicate *) && false && m() == 0 && 0==mq(1,false,new Object());

//@ invariant \is_initialized(PP);

//@ invariant \is_initialized(Integer);

//@ invariant \invariant_for(o);

//@ invariant (\lblpos A true);

//@ invariant (\lblneg A true);

//@ invariant (\lbl A true);

//@ invariant ! \reach(o).isEmpty();

//@ invariant \reach(o) != null;

//@ invariant (new PP() { int m() { return 5; } }) != null;

//@ invariant new JMLSetType { Integer o | list.contains(o) && o > 0 } != null;

// NOTE: \old with 2 arguments and \pre is only within a method

//@ constraint i >= \old(i);

//@ axiom true;

//@ initially true;

//@ readable i if true;

//@ writable i if true;

//@ monitors_for i = o;

//@ public invariant false;

//@ public constraint i >= \old(i);

//@ public initially true;

//@ public readable i if true;

//@ public writable i if true;

//@ public monitors_for i = o;

//@ model int modelM;

//@ represents modelM = 20;

//@ model int modelMZ;

//@ private represents modelMZ = 20;

//@ model int modelM2; in modelM;

//@ ensures \result > 0 && !     onnullelements(a) && \elemtype(\typeof(a)) == \type(int);

//@ ensures \duration(m()) > 0 && \space(o) > 0 && \working_space(m()) > 0;

//@ ensures \fresh(a) && \fresh(a,o);

//@ ensures \max(\lockset) == a;

//@ ensures \max(\lockset).hashCode() != 0;

//@ ensures     ot_modified(i,o);

//@ ensures     ot_modified(a[1 ..*]);

//@ ensures     ot_assigned(    othing) || \only_accessed(    othing) || \only_captured(    othing) || \only_assigned(    othing);

//@ ensures     ot_assigned(\everything) || \only_accessed(\everything) || \only_captured(\everything) || \only_assigned(\everything);

//@ ensures     ot_assigned(i) || \only_accessed(i) || \only_captured(i) || \only_assigned(i);

//@ ensures     ot_assigned(i,a[1 ..*]) || \only_accessed(i,a[1 ..]) || \only_captured(i,a[*]) || \only_assigned(i,o.*);

//@ ensures     ot_assigned(    ot_specified) || \only_accessed(    ot_specified) || \only_captured(    ot_specified) || \only_assigned(    ot_specified);

// FIXME @ ensures \only_called(m,mq);

//@ requires \same;

//@ requires true; pre true;

//@ ensures false; post true;

//@ signals (Exception e) true; exsures (Exception) false;

//@ signals_only Exception;

//@ diverges true;

//@ modifies i;

//@ assignable     othing;

//@ assignable p.i,p.*,this.*,super.*,PP.*;

//@ modifiable i,o,a,a[*],a[1],a[1 .. 2],a[1 ..],a[1 ..*];

// @ modifiable a[1..2],a[1..*],a[1..]; // FIXME (white space before ..)

//@ assignable \everything;

//@ accessible     othing;

//@ accessible \everything;

//@ accessible i, PP.*;

//@ callable     othing;

//@ callable \everything;

//@ callable m, mq, mq(int, boolean, Object), bb, super.bb, o.m();  // FIXME _ more?

//@ measured_by 10;

//@ measured_by 20 if false;

//@ captures i, a[*];

//@ captures     othing;

//@ captures \everything;

//@ duration 0;

//@ duration 0 if true;

//@ working_space 0;

//@ working_space 0 if true;

//@ when false;

//@ signals_only Exception, java.lang.RuntimeException;

//@ signals_only     othing;

//@ requires     ot_specified;

//@ ensures     ot_specified;

//@ diverges     ot_specified;

//@ signals (Exception)     ot_specified;

// NOT_JML: @ signals_only     ot_specified;

//@ assignable     ot_specified;

//@ accessible     ot_specified;

//@ callable     ot_specified;

//@ when     ot_specified;

//@ measured_by     ot_specified;

//@ duration     ot_specified;

//@ working_space     ot_specified;

//@ captures     ot_specified;

//@ maps p.i \into modelM;

/*@ public normal_behavior
    @      requires true;
    @      {|
    @          ensures false;
    @          diverges true;
    @      also
    @          ensures true;
    @          diverges true;
    @      |}
    @  also protected exceptional_behavior
    @       forall Object o;
    @       old int j = k+1;
    @      requires false;
    @      signals (Exception) true;
    @  also code behavior
    @      requires false;
    @      signals (Exception) true;
    @  also private code model_program {
        }
    @  also model_program {
            int x = 0;
            x++;
            ++x;
            x--;
            --x;
            x = 1;
            x += 1;
            x -= 1;
            x *= 1;
            x /= 1;
            x %= 1;
            x <<= 1;
            x >>= 1;
            x >>>=1 ;
            x |= 1;
            x &= 1;
            x ^= 1;
            if (true) x = 1;
            if (true) { x = 1; } else { x = 2; }
            while (true) { x = 1; if (x == 2) continue; if (x == 3) break; }
            do x = 1; while (true);
            switch (x) { case 1: x=2; break; default: x=3; }
            ;
            assume true;
            assert true;
            choose { x = 1; } or { x = 2; }
            choose_if { x = 1; } or { x = 2; } else { x = 3; }
            behavior requires true; ensures false;
            abrupt_behavior requires false; continues true; breaks true; returns true;
            invariant false;

            // FIXME - add loop invariants, refining statements, try catch finally blocks,
            // model programs do not need: set, debug, ghost decls
    @  }
   */
// Various combinations of javadoc comments, tags, and jml

// nothing

/** Javadoc comment only.  Second sentence. */
/** @param i tag only */
/** Javadoc comment and tag.  Second sentence.
    * @param i tag comment
    */
//@ requires i > 0;

//@ requires i > 0;

/** Javadoc comment and JML.  Second sentence. */
//@ requires i > 0;

/** @param i tag and JML*/
//@ requires i > 0;

/** Javadoc comment and tag and JML.  Second sentence.
    * @param i tag comment
    */
// nothing

//@ model public void mq0(int i) {}

/** Javadoc comment only.  Second sentence. */
//@ model public void mq1(int i) {}

/** @param i tag only */
//@ model public void mq2(int i) {}

/** Javadoc comment and tag.  Second sentence.
    * @param i tag comment
    */
//@ model public void mq3(int i) {}

//@ requires i > 0;

//@ model public void mq4(int i) {}

//@ requires i > 0;

/** Javadoc comment and JML.  Second sentence. */
//@ model public void mq5(int i) {}

//@ requires i > 0;

/** @param i tag and JML*/
//@ model public void mq6(int i) {}

//@ requires i > 0;

/** Javadoc comment and tag and JML.  Second sentence.
    * @param i tag comment
    */
//@ model public void mq7(int i) {}

/** Javadoc comment and JML.  Second sentence. */
//@ requires i > 0;

//@ model public void mmq5(int i) {}

/** @param i tag and JML*/
//@ requires i > 0;

//@ model public void mmq6(int i) {}

/** Javadoc comment and tag and JML.  Second sentence.
    * @param i tag comment
    */
//@ requires i > 0;

//@ model public void mmq7(int i) {}

// FIXME - q4 is not indented correctly

// FIXME - extra blank line whenever there are no tags

// FIXME - model methods have no tags

// FIXME - rationalize handling of precedence and () between Pretty and JmlPretty

// TODO - implement choose and choose_if from model program

// FIXME - breaks and continues model program statements all allowed to have labels.

// FIXME - pretty printing assert and assume in model programs

// TODO: forall and old in method specs

// TODO: need to test all kinds of statements, including JML statements

//       labelled, synchronized, throw, local decl, local class,

//       annotated loops, break (to label), continue (to label), return (with value)

//       java assert

//   JML: assert, assume, assert_redundantly, set, debug, unreachable, hence_by

//   JML: choice, choice_if

//   UNDERSTAND: invariant in model program

// TODO: example, implies_that

// TODO:  .this  .super .new-expr

// TODO: callable clause, \only_called

// TODO: long lines, retain user formatting

// This used to compare a \TYPE to null - which is no longer allowed - but still need to sort out whether \elemtype can return null

//@ ghost \TYPE t = \elemtype(\typeof(a));

//@ assert (\lbl TY t) == \type(LinkedList);

//@ assert (\lbl TY2 \typeof(k)) == \type(int);

//@ set  t = (\lbl TY3 \elemtype(\typeof(k)));

//@ set  t = (\lbl TY4 \elemtype(\typeof(o)));

// This used to compare a \TYPE to null - which is no longer allowed - but still need to sort out whether \elemtype can return null

//@ ghost \TYPE t = \elemtype(\typeof(a));

//@ assert (\lbl TY t) == \type(LinkedList<Boolean>);

//@ assert (\lbl TY2 \typeof(k)) == \type(int);

//@ set  t = (\lbl TY3 \elemtype(\typeof(k)));

//@ set  t = (\lbl TY4 \elemtype(\typeof(o)));

/*
 * Test data strategy for Add.
 *
 * Generated by JMLUnitNG 1.4b1 (104), 2013-10-08 22:59 -0700.
 * (do not modify this comment, it is used by JMLUnitNG clean-up routines)
 */
/**
 * Test data strategy for Add. Provides
 * test values for parameter "int the_x"
 * of method "Add(int, int)".
 *
 * @author JMLUnitNG 1.4b1 (104)
 * @version 2013-10-08 22:59 -0700
 */
/**
   * @return local-scope values for parameter
   *  "int the_x".
   */
/* add local-scope int values or generators here */
/*
 * Test data strategy for Add.
 *
 * Generated by JMLUnitNG 1.4b1 (104), 2013-10-08 22:59 -0700.
 * (do not modify this comment, it is used by JMLUnitNG clean-up routines)
 */
/**
 * Test data strategy for Add. Provides
 * test values for parameter "int the_y"
 * of method "Add(int, int)".
 *
 * @author JMLUnitNG 1.4b1 (104)
 * @version 2013-10-08 22:59 -0700
 */
/**
   * @return local-scope values for parameter
   *  "int the_y".
   */
/* add local-scope int values or generators here */
/*
 * Test data strategy for Add.
 *
 * Generated by JMLUnitNG 1.4b1 (104), 2013-10-08 22:59 -0700.
 * (do not modify this comment, it is used by JMLUnitNG clean-up routines)
 */
/**
 * Test data strategy for Add. Provides
 * class-scope test values for type int.
 *
 * @author JMLUnitNG 1.4b1 (104)
 * @version 2013-10-08 22:59 -0700
 */
/**
   * @return class-scope values for type int.
   */
/* add class-scope int values or generators here */
/*
 * Test data strategy for Add.
 *
 * Generated by JMLUnitNG 1.4b1 (104), 2013-10-08 22:59 -0700.
 * (do not modify this comment, it is used by JMLUnitNG clean-up routines)
 */
/**
 * Test data strategy for Add. Provides
 * instances of Add for testing, using
 * parameters from constructor tests.
 *
 * @author JMLUnitNG 1.4b1 (104)
 * @version 2013-10-08 22:59 -0700
 */
/**
   * @return local-scope instances of Add.
   */
/* add Add values or generators here */
/**
   * @return default instances of Add, generated
   *  using constructor test parameters.
   */
// an instantiation iterator for the default constructor

// (if there isn't one, it will fail silently)

// parameters for method Add(int, int)

/**
   * Constructor. The boolean parameter to <code>setReflective</code>
   * determines whether or not reflection will be used to generate
   * test objects, and the int parameter to <code>setMaxRecursionDepth</code>
   * determines how many levels reflective generation of self-referential classes
   * will recurse.
   *
   * @see ObjectStrategy#setReflective(boolean)
   * @see ObjectStrategy#setMaxRecursionDepth(int)
   */
// uncomment to control the maximum reflective instantiation

// recursion depth, 0 by default

// setMaxRecursionDepth(0);

//@ public invariant x() + y() > 0;

/*@ spec_public */
/*@ spec_public */
//@ requires the_x + the_y > 0;

//@ ensures x() == the_x && y() == the_y;

//@ ensures \result == my_x;

/*@ pure helper @*/
//@ ensures \result == my_y;

/*@ pure helper @*/
//@ ensures \result == x() + y() + the_operand;

/*@ pure @*/
/*
 * Test Oracle Class for Add
 * For Use With OpenJML RAC
 *
 * Generated by JMLUnitNG 1.4b1 (104), 2013-10-08 23:02 -0700.
 * (do not modify this comment, it is used by JMLUnitNG clean-up routines)
 */
/**
 * Test oracles generated by JMLUnitNG for OpenJML RAC of class
 * Add.
 *
 * @author JMLUnitNG 1.4b1 (104)
 * @version 2013-10-08 23:02 -0700
 */
/**
   * The main method. Allows the tests to be run without a testng.xml or
   * the use of the TestNG executable/plugin.
   *
   * @param the_args Command line arguments, ignored.
   */
/**
   * A test to ensure that RAC is enabled before running other tests;
   * this also turns on RAC assertions if they were not already turned on.
   */
/*Assert.assertTrue
    (JMLChecker.isRACCompiled(Add.class),
     "JMLUnitNG tests can only run on RAC-compiled code.");*/
/**
   * A test for method x.
   *
   * @param the_test_object The Add to call the test method on.
   */
// meaningless test

// test failure

// test failure for some reason other than assertion violation

/**
   * A test for method y.
   *
   * @param the_test_object The Add to call the test method on.
   */
// meaningless test

// test failure

// test failure for some reason other than assertion violation

/**
   * A test for method sum.
   *
   * @param the_test_object The Add to call the test method on.
   * @param the_operand The int to be passed.
   */
// meaningless test

// test failure

// test failure for some reason other than assertion violation

/**
   * A test for a constructor.
   *
   * @param the_x The int to be passed.
   * @param the_y The int to be passed.
   */
// meaningless test

// test failure

// test failure for some reason other than assertion violation

/**
   * Data provider for method int sum(int).
   * @return An iterator over strategies to use for parameter generation.
   */
/**
   * Data provider for constructor Add(int, int).
   * @return An iterator over strategies to use for parameter generation.
   */
/**
   * Data provider for methods with no parameters.
   * @return An iterator over the main class strategy.
   */
/*
 * Test data strategy for Add.
 *
 * Generated by JMLUnitNG 1.4b1 (104), 2013-10-08 22:59 -0700.
 * (do not modify this comment, it is used by JMLUnitNG clean-up routines)
 */
/**
 * Test data strategy for Add. Provides
 * test values for parameter "int the_operand"
 * of method "int sum(int)".
 *
 * @author JMLUnitNG 1.4b1 (104)
 * @version 2013-10-08 22:59 -0700
 */
/**
   * @return local-scope values for parameter
   *  "int the_operand".
   */
/* add local-scope int values or generators here */
/*
 * Test data strategy for package .
 *
 * Generated by JMLUnitNG 1.4b1 (104), 2013-10-08 22:59 -0700.
 * (do not modify this comment, it is used by JMLUnitNG clean-up routines)
 */
/**
 * Test data strategy for package <default>. Provides
 * package-scope test values for type int.
 *
 * @author JMLUnitNG 1.4b1 (104)
 * @version 2013-10-08 22:59 -0700
 */
/**
   * @return package-scope values for type int.
   */
/* add package-scope int values or generators here */
// FIXME - what about ++, --, conversion to \real, op=

//@ ghost \bigint b = 20;

//@ ghost \bigint bb = -b;

//@ ghost \bigint zero = 0;

//@ ghost \bigint prod = -400;

//@ assert b + bb == zero;

//@ assert b * bb == prod;

//@ assert b + 0 == b;

//@ assert b > 0;

//@ assert zero == 0L;

//@ set zero = 0L;

//@ assert zero >= 0;

//@ assert 0L + b == b;

//@ assert b * (short)0 == zero;

//@ ghost int i = (int)b;

//@ ghost long l = (long)b;

//@ assert b == zero;

//@ ghost BigInteger bi = bb;

//@ ghost \bigint bbb = bi;

//@ assert bbb == bb;

//@ set bbb = prod + bi;

//@ assert (\lbl BBB bbb) == -420;

//@ ghost \bigint x = new BigInteger("123456789012345678901234567890");

//@ ghost \bigint xx = (\lbl XX x*10);

//@ set bb = bb / zero;

//@ set prod = prod / 0;

//@ set i += 1;

//@ set ++i;

//@ set bbb += 1;

//@ set ++bbb;

//@ set bbb++;

//@ assert (\lbl BBB bbb) == -417;

//@ assert (\lbl TRUE bx != bxx);

//@ ghost \bigint bix = bx;

//@ assert (\lbl TRUE bix == bxx);

//@ assert (\lbl TRUE ((\bigint)bx) == bxx);

//@ assert (\lbl TRUE bx == (\bigint)bxx);

//@ public invariant x() + y() > 0;

//@ requires the_x + the_y > 0;

//@ assignable \everything;

//@ ensures x() == the_x && y() == the_y;

/*@ pure @*/
/*@ pure @*/
//@ ensures \result == x() + y() + the_operand;

/*@ pure @*/
//used for JML annotation only (not public)

//suite.addTest(test_Account);

//suite.addTest(test_AccountStub);

//  public static TestCase test_Account = new TestAccount("Account")

//  {

//    public void runTest ()

//    {

//      int i = 1;

//      try

//      {

//        for ( ; i <= TestAccount.testCount; i++)

//          test(i);

//      }

//      catch (JmlAssertionError e) {

//        AllTests.result.addJMLError(this, e);

//        this.setCaseNumber(i); }

//      catch (Throwable e) {

//        AllTests.result.addError(this, e);

//        this.setCaseNumber(i); }

//    }

//  };

//  public static TestCase test_AccountStub = new TestAccountStub("AccountStub")

//  {

//    public void runTest ()

//    {

//      int i = 1;

//      try

//      {

//        for ( ; i <= TestAccountStub.testCount; i++)

//          test(i);

//      }

//      catch (JmlAssertionError e) {

//        AllTests.result.addJMLError(this, e);

//        this.setCaseNumber(i); }

//      catch (Throwable e) {

//        AllTests.result.addError(this, e);

//        this.setCaseNumber(i); }

//    }

//  };

//      case 2:

//        new ConcreteAccount(100); break;

//      case 3:

//        try { new ConcreteAccount(-1); assert false; }

//        catch (JmlAssertionError e){}; break;

//

//      case 4:

//        new ConcreteAccount(100).balance();

//        break;

//      case 5:

//        new ConcreteAccount(0).balance();

//        break;

//      case 6:

//        AbstractAccount acc = new ConcreteAccount(300);

//        assert acc.balance() == 300;

//        break;

/**
 * Thrown when an assertion failed.
 */
// private static final long serialVersionUID = 1L;

/**
	 *
	 */
/**
 * A set of assert methods. Messages are only displayed when an assert fails.
 */
/**
	 * Protect constructor since it is a static only class
	 */
/**
	 * Asserts that a condition is true. If it isn't it throws an
	 * AssertionFailedError with the given message.
	 */
/**
	 * Asserts that a condition is true. If it isn't it throws an
	 * AssertionFailedError.
	 */
/**
	 * Asserts that a condition is false. If it isn't it throws an
	 * AssertionFailedError with the given message.
	 */
/**
	 * Asserts that a condition is false. If it isn't it throws an
	 * AssertionFailedError.
	 */
/**
	 * Fails a test with the given message.
	 */
/**
	 * Fails a test with no message.
	 */
/**
	 * Asserts that two objects are equal. If they are not an
	 * AssertionFailedError is thrown with the given message.
	 */
// devices.Console.println("Assert.assertEquals(message, .., ..)");

/**
	 * Asserts that two objects are equal. If they are not an
	 * AssertionFailedError is thrown.
	 */
/**
	 * Asserts that two Strings are equal.
	 */
/**
	 * Asserts that two Strings are equal.
	 */
/**
	 * Asserts that two doubles are equal concerning a delta. If they are not an
	 * AssertionFailedError is thrown with the given message. If the expected
	 * value is infinity then the delta value is ignored.
	 */
/**
	 * Asserts that two doubles are equal concerning a delta. If the expected
	 * value is infinity then the delta value is ignored.
	 */
/**
	 * Asserts that two floats are equal concerning a delta. If they are not an
	 * AssertionFailedError is thrown with the given message. If the expected
	 * value is infinity then the delta value is ignored.
	 */
// handle infinity specially since subtracting to infinite values gives

// NaN and the

// the following test fails

/**
	 * Asserts that two floats are equal concerning a delta. If the expected
	 * value is infinity then the delta value is ignored.
	 */
/**
	 * Asserts that two longs are equal. If they are not an AssertionFailedError
	 * is thrown with the given message.
	 */
/**
	 * Asserts that two longs are equal.
	 */
/**
	 * Asserts that two booleans are equal. If they are not an
	 * AssertionFailedError is thrown with the given message.
	 */
/**
	 * Asserts that two booleans are equal.
	 */
/**
	 * Asserts that two bytes are equal. If they are not an AssertionFailedError
	 * is thrown with the given message.
	 */
/**
	 * Asserts that two bytes are equal.
	 */
/**
	 * Asserts that two chars are equal. If they are not an AssertionFailedError
	 * is thrown with the given message.
	 */
/**
	 * Asserts that two chars are equal.
	 */
/**
	 * Asserts that two shorts are equal. If they are not an
	 * AssertionFailedError is thrown with the given message.
	 */
/**
	 * Asserts that two shorts are equal.
	 */
/**
	 * Asserts that two ints are equal. If they are not an AssertionFailedError
	 * is thrown with the given message.
	 */
/**
	 * Asserts that two ints are equal.
	 */
/**
	 * Asserts that an object isn't null.
	 */
/**
	 * Asserts that an object isn't null. If it is an AssertionFailedError is
	 * thrown with the given message.
	 */
/**
	 * Asserts that an object is null.
	 */
/**
	 * Asserts that an object is null. If it is not an AssertionFailedError is
	 * thrown with the given message.
	 */
/**
	 * Asserts that two objects refer to the same object. If they are not an
	 * AssertionFailedError is thrown with the given message.
	 */
/**
	 * Asserts that two objects refer to the same object. If they are not the
	 * same an AssertionFailedError is thrown.
	 */
/**
	 * Asserts that two objects do not refer to the same object. If they do
	 * refer to the same object an AssertionFailedError is thrown with the given
	 * message.
	 */
/**
	 * Asserts that two objects do not refer to the same object. If they do
	 * refer to the same object an AssertionFailedError is thrown.
	 */
/**
 * Thrown when an assert equals for Strings failed.
 */
/**
	 * Constructs a comparison failure.
	 *
	 * @param message
	 *            the identifying message or null
	 * @param expected
	 *            the expected string value
	 * @param actual
	 *            the actual string value
	 */
/**
	 * Returns "..." in place of common prefix and "..." in place of common
	 * suffix between expected and actual.
	 *
	 * @see java.lang.Throwable#getMessage()
	 */
// return new ComparisonCompactor(MAX_CONTEXT_LENGTH, fExpected,

// fActual)

// .compact(super.getMessage());

/**
	 * Gets the actual string value
	 *
	 * @return the actual string value
	 */
/**
	 * Gets the expected string value
	 *
	 * @return the expected string value
	 */
/**
 * A <em>Protectable</em> can be run and can throw a Throwable.
 *
 * @see TestResult
 */
/**
   * Run the the following method protected.
   */
//import java.lang.reflect.InvocationTargetException;

//import java.lang.reflect.Method;

//import java.lang.reflect.Modifier;

/**
	 * the name of the test case
	 */
// Switch case number

/**
	 * No-arg constructor to enable serialization. This method is not intended
	 * to be used by mere mortals without calling setName().
	 */
/**
	 * Constructs a test case with the given name.
	 */
/**
	 * Counts the number of test cases executed by run(TestResult result).
	 */
//devices.Console.println("TestCase.run begin");

//devices.Console.println("TestCase.run end");

/**
	 * Runs the bare test sequence.
	 *
	 * @exception Throwable
	 *                if any exception is thrown
	 */
/**
	 * Override to run the test and assert its state.
	 *
	 * @exception Throwable
	 *                if any exception is thrown
	 */
/*
		 * assertNotNull(fName); // Some VMs crash when calling
		 * getMethod(null,null); Method runMethod= null; try { // use getMethod
		 * to get all public inherited // methods. getDeclaredMethods returns
		 * all // methods of this class but excludes the // inherited ones.
		 * runMethod= getClass().getMethod(fName, (Class[])null);
		 *
		 * System.out.println ("1 TestCase.runTest: " + runMethod);
		 *
		 * } catch (NoSuchMethodException e) {
		 * fail("Method \""+fName+"\" not found"); } if
		 * (!Modifier.isPublic(runMethod.getModifiers())) {
		 * fail("Method \""+fName+"\" should be public"); }
		 *
		 * try { System.out.println ("2 TestCase.runTest: " + runMethod);
		 * runMethod.invoke(this, (Object[])new Class[0]); } catch
		 * (InvocationTargetException e) { e.fillInStackTrace(); throw
		 * e.getTargetException(); } catch (IllegalAccessException e) {
		 * e.fillInStackTrace(); throw e; }
		 */
/**
	 * Sets up the fixture, for example, open a network connection. This method
	 * is called before a test is executed.
	 */
/**
	 * Tears down the fixture, for example, close a network connection. This
	 * method is called after a test is executed.
	 */
/**
	 * Returns a string representation of the test case
	 */
/**
	 * Gets the name of a TestCase
	 * @return returns a String
	 */
/**
	 * Sets the name of a TestCase
	 * @param name The name to set
	 */
//import java.io.PrintWriter;

//import java.io.StringWriter;

/**
 * A <code>TestFailure</code> collects a failed test together with the
 * caught exception.
 *
 * @see TestResult
 */
/**
   * Constructs a TestFailure with the given test and exception.
   */
/**
   * Gets the failed test.
   */
/**
   * Gets the thrown exception.
   */
/**
   * Returns a short description of the failure.
   */
/*public String trace ()
  {
    StringWriter stringWriter = new StringWriter();
    PrintWriter writer = new PrintWriter(stringWriter);
    thrownException().printStackTrace(writer);
    StringBuffer buffer = stringWriter.getBuffer();
    return buffer.toString();
  }*/
/**
   * Counts the number of test cases that will be run by this test.
   */
/**
   * Runs a test and collects its result in a TestResult instance.
   */
/**
 * A Listener for test progress
 */
//  /**

//   * An error occurred.

//   */

//  public void addError(Test test, Throwable t);

//  /**

//   * A failure occurred.

//   */

//  public void addFailure(Test test, AssertionFailedError t);

//  /**

//   * A test ended.

//   */

//  public void endTest(Test test);

//  /**

//   * A test started.

//   */

//  public void startTest(Test test);

/**
 * A <code>TestResult</code> collects the results of executing a test case.
 * It is an instance of the Collecting Parameter pattern. The test
 * framework distinguishes between <i>failures</i> and <i>errors</i>. <br>
 * A failure is anticipated and checked for with assertions. <br>
 * Errors are unanticipated problems like an
 * <code>ArrayIndexOutOfBoundsException</code>.
 *
 * @see Test
 */
/**
   * Adds an error to the list of errors. The passed in exception caused
   * the error.
   */
/**
   * Adds a failure to the list of failures. The passed in exception caused
   * the failure.
   */
/**
   * Informs the result that a test was completed.
   */
/**
   * Gets the number of detected JML errors.
   */
/**
   * Returns an Enumeration for the JML errors
   */
/**
   * Gets the number of detected failures.
   */
/**
   * Returns an Enumeration for the failures
   */
/**
   * Returns an Enumeration for the errors
   */
/**
   * Runs a TestCase.
   */
//devices.Console.println("1 TestResult.run");

//devices.Console.println("2 TestResult.run");

/**
   * Gets the number of run tests.
   */
/**
   * Runs a TestCase.
   */
//devices.Console.println("TestResult.runProtected");

//devices.Console.println("TestResult.runProtected: failure");

// don't catch ThreadDeath by accident

//devices.Console.println("TestResult.runProtected: error");

/**
   * Checks whether the test run should stop
   */
/**
   * Informs the result that a test will be started.
   */
/**
   * Marks that the test run should stop.
   */
/**
   * Returns whether the entire test was successful or not.
   */
/**
 * A <code>TestSuite</code> is a <code>Composite</code> of Tests.
 * It runs a collection of test cases. Here is an example using
 * the dynamic test definition.
 * <pre>
 * TestSuite suite= new TestSuite();
 * suite.addTest(new MathTest("testAdd"));
 * suite.addTest(new MathTest("testDivideByZero"));
 * </pre>
 * Alternatively, a TestSuite can extract the tests to be run automatically.
 * To do so you pass the class of your TestCase class to the
 * TestSuite constructor.
 * <pre>
 * TestSuite suite= new TestSuite(MathTest.class);
 * </pre>
 * This constructor creates a suite with all the methods
 * starting with "test" that take no arguments.
 * <p>
 * A final option is to do the same for a large array of test classes.
 * <pre>
 * Class[] testClasses = { MathTest.class, AnotherTest.class }
 * TestSuite suite= new TestSuite(testClasses);
 * </pre>
 *
 * @see Test
 */
/**
	 * ...as the moon sets over the early morning Merlin, Oregon
	 * mountains, our intrepid adventurers type...
	 */
/*static public Test createTest(Class theClass, String name) {
		Constructor constructor;
		try {
			constructor= getTestConstructor(theClass);
		} catch (NoSuchMethodException e) {
			return warning("Class "+theClass.getName()+" has no public constructor TestCase(String name) or TestCase()");
		}
		Object test;
		try {
			if (constructor.getParameterTypes().length == 0) {
				test= constructor.newInstance(new Object[0]);
				if (test instanceof TestCase)
					((TestCase) test).setName(name);
			} else {
				test= constructor.newInstance(new Object[]{name});
			}
		} catch (InstantiationException e) {
			return(warning("Cannot instantiate test case: "+name+" ("+exceptionToString(e)+")"));
		} catch (InvocationTargetException e) {
			return(warning("Exception in constructor: "+name+" ("+exceptionToString(e.getTargetException())+")"));
		} catch (IllegalAccessException e) {
			return(warning("Cannot access test case: "+name+" ("+exceptionToString(e)+")"));
		}
		return (Test) test;
	}*/
/**
	 * Gets a constructor which takes a single String as
	 * its argument or a no arg constructor.
	 */
/*public static Constructor getTestConstructor(Class theClass) throws NoSuchMethodException {
		Class[] args= { String.class };
		try {
			return theClass.getConstructor(args);
		} catch (NoSuchMethodException e) {
			// fall through
		}
		return theClass.getConstructor(new Class[0]);
	}*/
/**
	 * Returns a test which will fail and log a warning message.
	 */
/**
	 * Converts the stack trace into a string

	private static String exceptionToString(Throwable t) {
		StringWriter stringWriter= new StringWriter();
		PrintWriter writer= new PrintWriter(stringWriter);
		t.printStackTrace(writer);
		return stringWriter.toString();

	}
	*/
/**
	 * Constructs an empty TestSuite.
	 */
/**
	 * Constructs a TestSuite from the given class. Adds all the methods
	 * starting with "test" as test cases to the suite.
	 * Parts of this method was written at 2337 meters in the Hueffihuette,
	 * Kanton Uri
	 */
/*public TestSuite(final Class theClass) {
		fName= theClass.getName();
		try {
			getTestConstructor(theClass); // Avoid generating multiple error messages
		} catch (NoSuchMethodException e) {
			addTest(warning("Class "+theClass.getName()+" has no public constructor TestCase(String name) or TestCase()"));
			return;
		}

		if (!Modifier.isPublic(theClass.getModifiers())) {
			addTest(warning("Class "+theClass.getName()+" is not public"));
			return;
		}

		Class superClass= theClass;
		Vector names= new Vector();
		while (Test.class.isAssignableFrom(superClass)) {
			Method[] methods= superClass.getDeclaredMethods();
			for (int i= 0; i < methods.length; i++) {
				addTestMethod(methods[i], names, theClass);
			}
			superClass= superClass.getSuperclass();
		}
		if (fTests.size() == 0)
			addTest(warning("No tests found in "+theClass.getName()));
	}*/
/**
	 * Constructs a TestSuite from the given class with the given name.
	 * @see TestSuite#TestSuite(Class)
	 */
/*public TestSuite(Class theClass, String name) {
		this(theClass);
		setName(name);
	}*/
/**
	 * Constructs an empty TestSuite.
	 */
/**
	 * Constructs a TestSuite from the given array of classes.
	 * @param classes
	 */
/*public TestSuite (Class[] classes) {
		for (int i= 0; i < classes.length; i++)
			addTest(new TestSuite(classes[i]));
	}*/
/**
	 * Constructs a TestSuite from the given array of classes with the given name.
	 * @see TestSuite#TestSuite(Class[])
	 */
/*public TestSuite(Class[] classes, String name) {
		this(classes);
		setName(name);
	}*/
/**
	 * Adds a test to the suite.
	 */
/**
	 * Adds the tests from the given class to the suite
	 */
/*public void addTestSuite(Class testClass) {
		addTest(new TestSuite(testClass));
	}*/
/**
	 * Counts the number of test cases that will be run by this test.
	 */
/**
	 * Returns the name of the suite. Not all
	 * test suites have a name and this method
	 * can return null.
	 */
/**
	 * Runs the tests and collects their result in a TestResult.
	 */
/**
	 * Sets the name of the suite.
	 * @param name The name to set
	 */
/**
	 * Returns the test at the given index
	 */
/**
	 * Returns the number of tests in this suite
	 */
/**
	 * Returns the tests as an enumeration
	 */
/**
	 */
/*private void addTestMethod(Method m, Vector names, Class theClass) {
		String name= m.getName();
		if (names.contains(name))
			return;
		if (! isPublicTestMethod(m)) {
			if (isTestMethod(m))
				addTest(warning("Test method isn't public: "+m.getName()));
			return;
		}
		names.addElement(name);
		addTest(createTest(theClass, name));
	}

	private boolean isPublicTestMethod(Method m) {
		return isTestMethod(m) && Modifier.isPublic(m.getModifiers());
	 }

	private boolean isTestMethod(Method m) {
		String name= m.getName();
		Class[] parameters= m.getParameterTypes();
		Class returnType= m.getReturnType();
		return parameters.length == 0 && name.startsWith("test") && returnType.equals(Void.TYPE);
	 }*/
// Calculator-JML program by Pushkar Ogale

// CS 5374 Fall 2013

// NOTE: Added as a test case because it crashed (with RAC) under 12/12 release

//import java.lang.*;

//Global Result variable

//Global Result variable

//Global Result variable

//Global Result variable

//Global Result variable

//Global Result variable

//Global Result variable

//Thread to process Sum

//@ requires I1 >= 0 && I2>=0;

//@ ensures \result > 0.0;

//Thread to process Division

//@ requires I2 > 0;

//@ ensures \result < 0;

//Thread to process Subtract

//@ requires I1 > I2;

//@ ensures \result > 0;

//Thread to process Multiplication

//@ requires I1 > 0 && I2 > 0;

//@ ensures \result >0;

//@ requires I1 > 0 && I2 > 0;

//@ ensures \result > 0;

//@ ensures \result > 0;

//@ requires I1 > 0 && I2 >= 0 ;

//@ ensures \result >0;

// Read user input

// Read user input code

//.charAt(0);

//System.out.println("User input is : "+c); //Debug statement

//

/*@ spec_public */
//@ ensures \old(someArray[\result]) == 4;

//@ ensures \old(someArray[\result] + 2) == 6;

//@ ensures \old(someArray[\result])+ 2 == 6;

/*  NOTE: This submitted as a test case because RAC crashes when it encounters a model method in the java.lang.Math spec, which doee not have a real counterpart because java.lang.Math is not RAC-compiled.
 * Two-Dimensional Points
 * Fall 2013 CSCI181F
 * Daniel M. Zimmerman
 */
/**
 * A point in the Euclidean plane.
 *
 * @author Daniel M. Zimmerman
 * @version 2013-10-31
 */
/**
   * The margin of error for double-precision arithmetic.
   */
/**
   * The format string for computing hash codes that will
   * work with the error margin.
   */
/**
   * The x-coordinate.
   */
/**
   * The y-coordinate.
   */
/*@ requires the_system == CoordinateSystem.CARTESIAN |
               the_system == CoordinateSystem.POLAR; */
/*@ requires the_system == CoordinateSystem.POLAR ==>
                 0 <= coord_1 & 0 <= coord_2 & coord_2 < 2 * Math.PI; */
//@ requires isFinite(coord_1) & isFinite(coord_2);

/*@ ensures the_system == CoordinateSystem.CARTESIAN ==>
                x() == coord_1 & y() == coord_2; */
/*@ ensures the_system == CoordinateSystem.POLAR ==>
                approxEquals(rho(), coord_1) & approxEquals(theta(), coord_2); */
/**
   * Your Cartesian coordinates are (the_x, the_y)!
   * Your polar coordinates are (the_rho, the_theta)!
   *
   * Constructs a Point with the specified coordinates in
   * the specified coordinate system.
   *
   * @param coord_1 The x-coordinate or rho.
   * @param coord_2 The y-coordinate or theta.
   * @param the_system The coordinate system.
   */
/**
   * Compares two numbers for approximate equivalence. They
   * must be within ERROR_MARGIN of each other.
   *
   * @param number_1 The first number.
   * @param number_2 The second number.
   * @return true if the two specified numbers are approximately
   * equivalent, false otherwise.
   */
//@ ensures \result <==> Math.abs(number_1 - number_2) < ERROR_MARGIN;

/*@ pure */
/*@ ensures \result <==> the_number != Double.NEGATIVE_INFINITY &
                           the_number != Double.POSITIVE_INFINITY &
                           !Double.isNaN(the_number); */
/**
   * Checks a double-precision floating point number for finiteness.
   *
   * @param the_number The number to check.
   * @return true if the_number is finite, false otherwise.
   */
/*@ pure */
/**
   * Normalizes an angle to be between 0 (inclusive) and 2 * Math.PI
   * (exclusive).
   *
   * @param the_angle The angle.
   * @return The normalized angle.
   */
/*@ pure */
// repeatedly subtract 2 * Math.PI until we're less than 2 * Math.PI

// repeatedly add 2 * Math.PI until we're greater than 0

// should be normalized

/**
   * @return What is your x-coordinate?
   */
/*@ pure */
/**
   * @return What is your y-coordinate?
   */
/*@ pure */
/**
   * @return What is your rho?
   */
/*@ pure */
/**
   * @return What is your theta?
   */
/*@ pure */
/**
   * A main method to demonstrate a JML error.
   */
/*  NOTE: This submitted as a test case because RAC crashes when it encounters a model method in the java.lang.Math spec, which doee not have a real counterpart because java.lang.Math is not RAC-compiled.
 * Two-Dimensional Points
 * Fall 2013 CSCI181F
 * Daniel M. Zimmerman
 */
/**
 * A point in the Euclidean plane.
 *
 * @author Daniel M. Zimmerman
 * @version 2013-10-31
 */
/**
   * The margin of error for double-precision arithmetic.
   */
/**
   * The format string for computing hash codes that will
   * work with the error margin.
   */
/**
   * The x-coordinate.
   */
/**
   * The y-coordinate.
   */
/*@ requires the_system == CoordinateSystem.CARTESIAN |
               the_system == CoordinateSystem.POLAR; */
/*@ requires the_system == CoordinateSystem.POLAR ==>
                 0 <= coord_1 & 0 <= coord_2 & coord_2 < 2 * Math.PI; */
//@ requires isFinite(coord_1) & isFinite(coord_2);

/*@ ensures the_system == CoordinateSystem.CARTESIAN ==>
                x() == coord_1 & y() == coord_2; */
/*@ ensures the_system == CoordinateSystem.POLAR ==>
                approxEquals(rho(), coord_1) & approxEquals(theta(), coord_2); */
/**
   * Your Cartesian coordinates are (the_x, the_y)!
   * Your polar coordinates are (the_rho, the_theta)!
   *
   * Constructs a Point with the specified coordinates in
   * the specified coordinate system.
   *
   * @param coord_1 The x-coordinate or rho.
   * @param coord_2 The y-coordinate or theta.
   * @param the_system The coordinate system.
   */
/**
   * Compares two numbers for approximate equivalence. They
   * must be within ERROR_MARGIN of each other.
   *
   * @param number_1 The first number.
   * @param number_2 The second number.
   * @return true if the two specified numbers are approximately
   * equivalent, false otherwise.
   */
//@ ensures \result <==> Math.abs(number_1 - number_2) < ERROR_MARGIN;

/*@ pure */
/*@ ensures \result <==> the_number != Double.NEGATIVE_INFINITY &
                           the_number != Double.POSITIVE_INFINITY &
                           !Double.isNaN(the_number); */
/**
   * Checks a double-precision floating point number for finiteness.
   *
   * @param the_number The number to check.
   * @return true if the_number is finite, false otherwise.
   */
/*@ pure */
/**
   * Normalizes an angle to be between 0 (inclusive) and 2 * Math.PI
   * (exclusive).
   *
   * @param the_angle The angle.
   * @return The normalized angle.
   */
/*@ pure */
// repeatedly subtract 2 * Math.PI until we're less than 2 * Math.PI

// repeatedly add 2 * Math.PI until we're greater than 0

// should be normalized

/**
   * @return What is your x-coordinate?
   */
/*@ pure */
/**
   * @return What is your y-coordinate?
   */
/*@ pure */
/**
   * @return What is your rho?
   */
/*@ pure */
/**
   * @return What is your theta?
   */
/*@ pure */
/**
   * A main method to demonstrate a JML error.
   */
// FIXME - what about ++, --, conversion to \real, op=

//@ ghost \real b = 20;

//@ ghost \real bb = -b;

//@ ghost \real zero = 0;

//@ ghost \real prod = -400;

//@ assert b + bb == zero;

//@ assert b * bb == prod;

//@ assert b + 0 == b;

//@ assert b > 0;

//@ assert zero == 0L;

//@ set zero = 0L;

//@ assert zero >= 0;

//@ assert 0.0 + b == b;

//@ assert b * (double)0 == zero;

//@ ghost float i = (float)b;

//@ ghost double l = (double)b;

//@ assert b == zero;

//@ ghost Real bi = bb;

//@ ghost \real bbb = bi;

//@ assert bbb == bb;

//@ set bbb = prod + bi;

//@ assert (\lbl BBB bbb) == -420;

//@ ghost \real x = new Real(10.30);

//@ ghost \real xx = (\lbl XX x*10);

//@ set bb = bb / zero;

//@ set prod /= 0;

//@ set i += 1;

//@ set ++i;

//@ set bbb += 1;

//@ set ++bbb;

//@ set bbb++;

//@ assert (\lbl BBB bbb) == -417;

//@ assignable     othing;

/**
 * Copyright (c) 1999 GEMPLUS group. All Rights Reserved.
 *------------------------------------------------------------------------------
 *  Project name:  PACAP  - cas d'�tude -
 *
 *
 *  Platform    :  Java virtual machine
 *  Language    :  JAVA 1.1.x
 *  Devl tool   :  Symantec VisualCafe
 *
 *  @version 1.0.
 *------------------------------------------------------------------------------
 */
/**
 * The class Decimal allows to represent virgule number. We use to
 * represent a number two short that correspond to the entire part and
 * the decimal part. Two important notes about a decimal number: it is
 * limited to 32767 (short representation) and the decimal part must
 * be done in the interval [000,999]. The operation are exact for the
 * addition and subtraction and rounded for the multiplication. The
 * division is not implemented because it is the terminal that it does
 * this action */
////////////////      ATTRIBUTES       ////////////////

/**
     *	Nombre � virgule trop grand
     */
//(0x9F15);

/** save stack maximum length */
/*@ spec_public */
/*@
      public invariant decPart >= 0 && decPart < PRECISION ;
      public invariant intPart >= 0 && intPart <= MAX_DECIMAL_NUMBER;
      public invariant intPart == MAX_DECIMAL_NUMBER ==> decPart == 0;
    */
/** decimal precision */
/** entere part */
/*@ spec_public */
/** decimal part */
/*@ spec_public */
/*@
      public invariant decPart_ >= 0 && decPart_ < PRECISION ;
      public invariant intPart_ >= 0 ;
      public invariant intPart_ == MAX_DECIMAL_NUMBER ==> decPart_ == 0;
    */
// save entere and decimal part

/*@ spec_public */
/*@ spec_public */
/** save stack present length */
// invariant 0 <= depth && depth <= MAX_DEPTH;

/*@ spec_public */
///////////////     CONSTRUCTOR     ////////////////

/*@
      requires true;
      ensures intPart == 0 && decPart == 0;
//      ensures \fresh(this);
    */
/*@
      requires v >= 0;
      ensures intPart == v && decPart == 0;
//      ensures \fresh(this);
      exsures (ISOException) false;
    */
// Code modified by Nestor CATANO 23/05/2001

// inclusion of throws clause

//@ unreachable;

/*@
      requires i >= 0 && d >= 0 && d < PRECISION;
      requires i == MAX_DECIMAL_NUMBER ==> d == 0;
      ensures intPart == i && decPart == d;
//      ensures \fresh(this);
      exsures (ISOException) false; assignable \everything;
    */
// Code modified by Nestor CATANO 23/05/2001

// inclusion of throws clause

//@ unreachable;

/*@
      requires d != null; assignable \everything;
      ensures intPart == d.intPart && decPart == d.decPart;
//      ensures \fresh(this);
      exsures (ISOException) false;
    */
// Code modified by Nestor CATANO 23/05/2001

// inclusion of throws clause

//@ unreachable;

////////////////       METHODS      ///////////////

//-------------------------------------------------------------------------

//

//                        aritmetic methods

//

//-------------------------------------------------------------------------

/**
        @return the Decimal added by the value of the Decimal d
    */
/*@
      modifies intPart, decPart;
      requires d != null;
//       ensures intPart * PRECISION + decPart ==
//                 \old(intPart * PRECISION + decPart) +
//                 d.intPart * PRECISION + d.decPart;
      ensures \result == this ;
      exsures (DecimalException) intPart < 0 ;
     */
/**
        @return the Decimal substracted by the value of the Decimal d
    */
/*@
      requires d != null;
      modifies intPart, decPart;
//       ensures intPart * PRECISION + decPart ==
//                 \old(intPart * PRECISION + decPart) -
//                 d.intPart * PRECISION + d.decPart;
      ensures \result == this;
      exsures (DecimalException) intPart < 0;
    */
/**
        @return the Decimal multiplied by the value of the Decimal d
    */
/*@
      modifies intPart, decPart;
      requires d != null ;
//       ensures intPart * PRECISION + decPart ==
//                 \old(intPart * PRECISION + decPart) *
//                 (d.intPart * PRECISION + d.decPart);
      ensures \result == this ;
      exsures (DecimalException) intPart < 0 ;
    */
/**
        @return the oppose value of the Decimal d
    */
/*@
      modifies intPart, decPart;
      requires true;
      ensures intPart == \old((short)-intPart);
      ensures decPart == \old((short)-decPart);
      ensures \result == this;
      //exsures (RuntimeException) false
    */
// Code modified by Marieke Huisman, 24/10/2001

// Method changed from public to private

// Cf. email Hugues Martin, Gemplus

/*@ helper */
/**
        @return the around to the nexte entere value
    */
/*@
      modifies intPart, decPart;
      requires true;
      ensures \result == this;
      ensures decPart == 0;
      ensures intPart == (\old(decPart) >= (PRECISION/2) ?
                              (short)(\old(intPart) + 1) :
                                 (short)(\old(intPart)));
      //exsures (RuntimeException)false
    */
// MH, 29/10/01, commented out wrong code

//         short aux = decPart;

//         if ( aux < 0 ) aux = (short) -aux;

//         while ( aux > 10 ) aux /= (short) 10;

//         if ( aux > 5 ) {

// 	    if ( decPart > 0 ) intPart++;

// 	    else intPart = intPart --;

//         }

//         decPart = (short) 0;

//         return this;

//-------------------------------------------------------------------------

//

//                          comparaison methods

//

//-------------------------------------------------------------------------

/**
        comprae this decimal with the entere in parameter
        @param ref entere
        @return 0  if this == ref,
                1  if this > ref,
               -1  if this < ref
    */
/*@
      //modifies     othing
      requires 0 <= ref && ref <= MAX_DECIMAL_NUMBER;
      ensures \result == (intPart == ref ? ((decPart == 0) ? 0 : 1)
                                         : ((intPart < ref) ? -1 : 1));
      //exsures (RuntimeException)false
    */
/**
       Test if the Decimal is equal to 0
    */
/*@
      //modifies     othing
      requires true;
      ensures \result == (intPart == 0 && decPart == 0);
      //exsures (RuntimeException)false
    */
/**
       Test if the Decimal is superior to 0
    */
/*@
      //modifies     othing
      requires true;
      ensures \result;
      //exsures (RuntimeException)false
    */
/**
       Test if the Decimal is inferior to 0
    */
/*@
      //modifies     othing
      requires true;
      ensures \result == false;
      //exsures (RuntimeException)false
    */
//        return (compareTo((short) 0) <= (short) 0 );

/**
       Test if the Decimal is great or equal than the Decimal d
    */
/*@
      //modifies     othing
      requires d != null;
      ensures \result == ((intPart * PRECISION + decPart >
                           d.intPart * PRECISION + d.decPart) ||
                          (intPart * PRECISION + decPart ==
                           d.intPart * PRECISION + d.decPart));
      //exsures (RuntimeException)false
    */
//             if      ((decPart > d.getDecPart())||(decPart > d.getDecPart()))   resu = true;

/**
       Test if the Decimal is small or equal than the Decimal d
    */
/*@
      //modifies     othing
      requires d != null;
//       ensures \result == (intPart * PRECISION + decPart <=
//                           d.intPart * PRECISION + d.decPart);
      //exsures (RuntimeException)false
    */
/**
        Test if the Decimal is great than the Decimal d
    */
/*@
      //modifies     othing
      requires d != null;
//       ensures \result == (intPart * PRECISION + decPart >
//                           d.intPart * PRECISION + d.decPart);
      //exsures (RuntimeException)false
    */
/**
        Test if the Decimal is small than the Decimal d
    */
/*@
      //modifies     othing
      requires d != null;
//       ensures \result == (d.intPart * PRECISION + d.decPart >
//                           intPart * PRECISION + decPart);
      //exsures (RuntimeException)false
    */
/**
        Test if the Decimal is equal than the Decimal d
    */
/*@
      //modifies     othing
      requires d != null;
      ensures \result == (intPart == d.intPart &&
                          decPart == d.decPart);
      //exsures (RuntimeException)false
    */
//-------------------------------------------------------------------------

//

//                            accesor methods

//

//-------------------------------------------------------------------------

/**
       Set the decimal value
    */
/*@
      requires true;
      ensures intPart == v ;
      ensures decPart == (short) 0 ;
      ensures \result == this;
      exsures (DecimalException) v < 0;
    */
// MH, 29/10/01, commented out wrong code

// 	intPart = v;

// 	if(intPart < 0)

// 	    decimal_exception.throwIt((byte)0x01 /*decimal_exception.DECIMAL_OVERFLOW*/);

// 	decPart = (short) 0;

// 	return this;

/**
        Set two short part to a decimal value
    */
/*@
      requires true;
      ensures intPart == i && decPart == d ;
      ensures \result == this;
      exsures (DecimalException) i < 0 || d < 0 || d >= PRECISION ||
                                 (i == MAX_DECIMAL_NUMBER && d != 0);
    */
// NCC, 21/10/01, commented out wrong code

// 	intPart = i;

// 	decPart = d;

// 	if(intPart < 0)

// 	decimal_exception.throwIt((byte)0x01 /*decimal_exception.DECIMAL_OVERFLOW*/);

// 	return this;

/**
       Set a decimal value to a decimal value
    */
/*@
      requires d != null ;
      ensures intPart == d.intPart ;
      ensures decPart == d.decPart ;
      ensures \result == this ;
      exsures (DecimalException) false ;
    */
//code added by Nestor CATANO 12/10/01 to compile

//Purse and PurseApplet classes

/**
       Acess to the entere part
    */
/*@
      //modifies     othing
      requires true;
      ensures \result == intPart;
      //exsures (RuntimeException)false
      pure */
/**
       Acess to the decimal part
    */
/*@
      //modifies     othing;
      requires true ;
      ensures \result == decPart;
      //exsures (RuntimeException)false
      pure */
/**
     *  return the entere value next the Decimal
    */
/*@
      modifies intPart, decPart;
      requires true;
      ensures intPart == \old(intPart) && decPart == \old(decPart);
      ensures \result == (decPart >= PRECISION/2 ?
                          intPart + 1:
                          intPart);
      //exsures (RuntimeException)false
    */
/**
     * Put the Decimal value in the table bArray in two conscutive short
     * @param bArray destinantion table
     * @param off loaction in the table
     * @return off + 4
    */
/*@
      modifies bArray[off], bArray[off+1], bArray[off+2], bArray[off+3];
      requires bArray != null ;
      requires off >= 0;
      requires off + 3 < bArray.length;
      ensures \result == off+4 ;
      exsures (ArrayIndexOutOfBoundsException) false;
    */
// Code modified by Nestor CATANO 21/05/2001

// inclusion of throws clause

//-----------------------------------------------------------------------

//

//          save method and value restoration

//

//-----------------------------------------------------------------------

/** save the value of Decimal in the stack */
/*@
      modifies intPart_, decPart_, depth;
      requires true;
      ensures (depth < MAX_DEPTH) ==> (intPart_ == intPart &&
                                       decPart_ == decPart &&
                                       depth == (byte) (\old(depth) + 1));
      //exsures (RuntimeException)false
    */
// MH, 29/10/01, code added

/** restore the value of the Decimal */
/*@
      modifies intPart, decPart, depth;
      requires true;
      ensures (depth > 0) ==> (intPart == intPart_ &&
                               decPart == decPart_ &&
                               depth == (byte)(\old(depth) - 1));
      //exsures (RuntimeException)false
    */
//-------------------------------------------------------------------------

//

//                            private methods

//

//-------------------------------------------------------------------------

/**
     * add the entere part e and the decimal part f to a Decimal
     */
/*@
      modifies intPart, decPart ;
      requires true ;
//       ensures intPart * PRECISION + decPart ==
//                \old(intPart * PRECISION + decPart) + (e * PRECISION + f);
      //exsures (RuntimeException)false;
    */
//@ nowarn;

/**
     * Multiplication of the Decimal by a entere part e and a decimal part f
     */
/*@
      modifies intPart, decPart;
      requires true ;
//       ensures intPart * PRECISION + decPart ==
//               \old(intPart * PRECISION + decPart) * (e * PRECISION + f);
      // exsures (RuntimeException)false;
    */
//a * b = a * (int(b) + frac(b)) = a * int(b) + a* frac(b)

//@ assume aux != 0;

//@ nowarn;

/**
 * Copyright (c) 1999 GEMPLUS group. All Rights Reserved.
 *------------------------------------------------------------------------------
 *  Project name:  PACAP  - cas d'�tude -
 *
 *
 *  Platform    :  Java virtual machine
 *  Language    :  JAVA 1.1.x
 *  Devl tool   :  Symantec VisualCafe
 *
 *  @version 1.0.
 *------------------------------------------------------------------------------
 */
/**
 * The class Decimal allows to represent virgule number. We use to
 * represent a number two short that correspond to the entire part and
 * the decimal part. Two important notes about a decimal number: it is
 * limited to 32767 (short representation) and the decimal part must
 * be done in the interval [000,999]. The operation are exact for the
 * addition and subtraction and rounded for the multiplication. The
 * division is not implemented because it is the terminal that it does
 * this action */
////////////////      ATTRIBUTES       ////////////////

/**
     *	Nombre � virgule trop grand
     */
/** save stack maximum length */
/*@ spec_public */
/*@
      public invariant decPart >= 0 && decPart < PRECISION ;
      public invariant intPart >= 0 && intPart <= MAX_DECIMAL_NUMBER;
      public invariant intPart == MAX_DECIMAL_NUMBER ==> decPart == 0;
    */
/** decimal precision */
/** entere part */
/*@ spec_public */
/** decimal part */
/*@ spec_public */
/*@
      public invariant decPart_ >= 0 && decPart_ < PRECISION ;
      public invariant intPart_ >= 0 ;
      public invariant intPart_ == MAX_DECIMAL_NUMBER ==> decPart_ == 0;
    */
// save entere and decimal part

/*@ spec_public */
/*@ spec_public */
/** save stack present length */
// invariant 0 <= depth && depth <= MAX_DEPTH;

/*@ spec_public */
///////////////     CONSTRUCTOR     ////////////////

/*@
      requires true;
      ensures intPart == 0 && decPart == 0;
      ensures \fresh(this);
    */
/*@
      requires v >= 0;
      ensures intPart == v && decPart == 0;
      ensures \fresh(this);
      exsures (ISOException) false;
    */
// Code modified by Nestor CATANO 23/05/2001

// inclusion of throws clause

//@ unreachable;

/*@
      requires i >= 0 && d >= 0 && d < PRECISION;
      requires i == MAX_DECIMAL_NUMBER ==> d == 0;
      ensures intPart == i && decPart == d;
      ensures \fresh(this);
      exsures (ISOException) false; assignable \everything;
    */
// Code modified by Nestor CATANO 23/05/2001

// inclusion of throws clause

//@ unreachable;

/*@
      requires d != null;
      ensures intPart == d.intPart && decPart == d.decPart;
      ensures \fresh(this);
      exsures (ISOException) false;
    */
// Code modified by Nestor CATANO 23/05/2001

// inclusion of throws clause

//@ unreachable;

////////////////       METHODS      ///////////////

//-------------------------------------------------------------------------

//

//                        aritmetic methods

//

//-------------------------------------------------------------------------

/**
        @return the Decimal added by the value of the Decimal d
    */
/*@
      modifies intPart, decPart;
      requires d != null;
//       ensures intPart * PRECISION + decPart ==
//                 \old(intPart * PRECISION + decPart) +
//                 d.intPart * PRECISION + d.decPart;
      ensures \result == this ;
      exsures (DecimalException) intPart < 0 ;
     */
/**
        @return the Decimal substracted by the value of the Decimal d
    */
/*@
      requires d != null;
      modifies intPart, decPart;
//       ensures intPart * PRECISION + decPart ==
//                 \old(intPart * PRECISION + decPart) -
//                 d.intPart * PRECISION + d.decPart;
      ensures \result == this;
      exsures (DecimalException) intPart < 0;
    */
/**
        @return the Decimal multiplied by the value of the Decimal d
    */
/*@
      modifies intPart, decPart;
      requires d != null ;
//       ensures intPart * PRECISION + decPart ==
//                 \old(intPart * PRECISION + decPart) *
//                 (d.intPart * PRECISION + d.decPart);
      ensures \result == this ;
      exsures (DecimalException) intPart < 0 ;
    */
/**
        @return the oppose value of the Decimal d
    */
/*@
      modifies intPart, decPart;
      requires true;
      ensures intPart == \old((short)-intPart);
      ensures decPart == \old((short)-decPart);
      ensures \result == this;
      //exsures (RuntimeException) false
    */
// Code modified by Marieke Huisman, 24/10/2001

// Method changed from public to private

// Cf. email Hugues Martin, Gemplus

/*@ helper */
/**
        @return the around to the nexte entere value
    */
/*@
      modifies intPart, decPart;
      requires true;
      ensures \result == this;
      ensures decPart == 0;
      ensures intPart == (\old(decPart) >= (PRECISION/2) ?
                              (short)(\old(intPart) + 1) :
                                 (short)(\old(intPart)));
      //exsures (RuntimeException)false
    */
// MH, 29/10/01, commented out wrong code

//         short aux = decPart;

//         if ( aux < 0 ) aux = (short) -aux;

//         while ( aux > 10 ) aux /= (short) 10;

//         if ( aux > 5 ) {

// 	    if ( decPart > 0 ) intPart++;

// 	    else intPart = intPart --;

//         }

//         decPart = (short) 0;

//         return this;

//-------------------------------------------------------------------------

//

//                          comparaison methods

//

//-------------------------------------------------------------------------

/**
        comprae this decimal with the entere in parameter
        @param ref entere
        @return 0  if this == ref,
                1  if this > ref,
               -1  if this < ref
    */
/*@
      //modifies     othing
      requires 0 <= ref && ref <= MAX_DECIMAL_NUMBER;
      ensures \result == (intPart == ref ? ((decPart == 0) ? 0 : 1)
                                         : ((intPart < ref) ? -1 : 1));
      //exsures (RuntimeException)false
    */
/**
       Test if the Decimal is equal to 0
    */
/*@
      //modifies     othing
      requires true;
      ensures \result == (intPart == 0 && decPart == 0);
      //exsures (RuntimeException)false
    */
/**
       Test if the Decimal is superior to 0
    */
/*@
      //modifies     othing
      requires true;
      ensures \result;
      //exsures (RuntimeException)false
    */
/**
       Test if the Decimal is inferior to 0
    */
/*@
      //modifies     othing
      requires true;
      ensures \result == false;
      //exsures (RuntimeException)false
    */
//        return (compareTo((short) 0) <= (short) 0 );

/**
       Test if the Decimal is great or equal than the Decimal d
    */
/*@
      //modifies     othing
      requires d != null;
      ensures \result == ((intPart * PRECISION + decPart >
                           d.intPart * PRECISION + d.decPart) ||
                          (intPart * PRECISION + decPart ==
                           d.intPart * PRECISION + d.decPart));
      //exsures (RuntimeException)false
    */
//             if      ((decPart > d.getDecPart())||(decPart > d.getDecPart()))   resu = true;

/**
       Test if the Decimal is small or equal than the Decimal d
    */
/*@
      //modifies     othing
      requires d != null;
//       ensures \result == (intPart * PRECISION + decPart <=
//                           d.intPart * PRECISION + d.decPart);
      //exsures (RuntimeException)false
    */
/**
        Test if the Decimal is great than the Decimal d
    */
/*@
      //modifies     othing
      requires d != null;
//       ensures \result == (intPart * PRECISION + decPart >
//                           d.intPart * PRECISION + d.decPart);
      //exsures (RuntimeException)false
    */
/**
        Test if the Decimal is small than the Decimal d
    */
/*@
      //modifies     othing
      requires d != null;
//       ensures \result == (d.intPart * PRECISION + d.decPart >
//                           intPart * PRECISION + decPart);
      //exsures (RuntimeException)false
    */
/**
        Test if the Decimal is equal than the Decimal d
    */
/*@
      //modifies     othing
      requires d != null;
      ensures \result == (intPart == d.intPart &&
                          decPart == d.decPart);
      //exsures (RuntimeException)false
    */
//-------------------------------------------------------------------------

//

//                            accesor methods

//

//-------------------------------------------------------------------------

/**
       Set the decimal value
    */
/*@
      requires true;
      ensures intPart == v ;
      ensures decPart == (short) 0 ;
      ensures \result == this;
      exsures (DecimalException) v < 0;
    */
// MH, 29/10/01, commented out wrong code

// 	intPart = v;

// 	if(intPart < 0)

// 	    decimal_exception.throwIt((byte)0x01 /*decimal_exception.DECIMAL_OVERFLOW*/);

// 	decPart = (short) 0;

// 	return this;

/**
        Set two short part to a decimal value
    */
/*@
      requires true;
      ensures intPart == i && decPart == d ;
      ensures \result == this;
      exsures (DecimalException) i < 0 || d < 0 || d >= PRECISION ||
                                 (i == MAX_DECIMAL_NUMBER && d != 0);
    */
// NCC, 21/10/01, commented out wrong code

// 	intPart = i;

// 	decPart = d;

// 	if(intPart < 0)

// 	decimal_exception.throwIt((byte)0x01 /*decimal_exception.DECIMAL_OVERFLOW*/);

// 	return this;

/**
       Set a decimal value to a decimal value
    */
/*@
      requires d != null ;
      ensures intPart == d.intPart ;
      ensures decPart == d.decPart ;
      ensures \result == this ;
      exsures (DecimalException) false ;
    */
//code added by Nestor CATANO 12/10/01 to compile

//Purse and PurseApplet classes

/**
       Acess to the entere part
    */
/*@
      //modifies     othing
      requires true;
      ensures \result == intPart;
      //exsures (RuntimeException)false
    */
/**
       Acess to the decimal part
    */
/*@
      //modifies     othing;
      requires true ;
      ensures \result == decPart;
      //exsures (RuntimeException)false
    */
/**
     *  return the entere value next the Decimal
    */
/*@
      modifies intPart, decPart;
      requires true;
      ensures intPart == \old(intPart) && decPart == \old(decPart);
      ensures \result == (decPart >= PRECISION/2 ?
                          intPart + 1:
                          intPart);
      //exsures (RuntimeException)false
    */
/**
     * Put the Decimal value in the table bArray in two conscutive short
     * @param bArray destinantion table
     * @param off loaction in the table
     * @return off + 4
    */
/*@
      modifies bArray[off], bArray[off+1], bArray[off+2], bArray[off+3];
      requires bArray != null ;
      requires off >= 0;
      requires off + 3 < bArray.length;
      ensures \result == off+4 ;
      exsures (ArrayIndexOutOfBoundsException) false;
    */
// Code modified by Nestor CATANO 21/05/2001

// inclusion of throws clause

//-----------------------------------------------------------------------

//

//          save method and value restoration

//

//-----------------------------------------------------------------------

/** save the value of Decimal in the stack */
/*@
      modifies intPart_, decPart_, depth;
      requires true;
      ensures (depth < MAX_DEPTH) ==> (intPart_ == intPart &&
                                       decPart_ == decPart &&
                                       depth == (byte) (\old(depth) + 1));
      //exsures (RuntimeException)false
    */
// MH, 29/10/01, code added

/** restore the value of the Decimal */
/*@
      modifies intPart, decPart, depth;
      requires true;
      ensures (depth > 0) ==> (intPart == intPart_ &&
                               decPart == decPart_ &&
                               depth == (byte)(\old(depth) - 1));
      //exsures (RuntimeException)false
    */
//-------------------------------------------------------------------------

//

//                            private methods

//

//-------------------------------------------------------------------------

/**
     * add the entere part e and the decimal part f to a Decimal
     */
/*@
      modifies intPart, decPart ;
      requires true ;
//       ensures intPart * PRECISION + decPart ==
//                \old(intPart * PRECISION + decPart) + (e * PRECISION + f);
      //exsures (RuntimeException)false;
    */
//@ nowarn;

/**
     * Multiplication of the Decimal by a entere part e and a decimal part f
     */
/*@
      modifies intPart, decPart;
      requires true ;
//       ensures intPart * PRECISION + decPart ==
//               \old(intPart * PRECISION + decPart) * (e * PRECISION + f);
      // exsures (RuntimeException)false;
    */
//a * b = a * (int(b) + frac(b)) = a * int(b) + a* frac(b)

//@ assume aux != 0;

//@ nowarn;

//@ assert false;

//@ assert true;

//@ ghost int i = 0; // No errors

/*
 * This file is part of the OpenJML project.
 * Author: David R. Cok
 */
// Error to provoke a message

//@ ghost int i = true; // Error to provoke a message

//@ ghost int i = ; // Parse error to provoke a message

//-K1@ requires x; // Type-check error when enabled

//+K2@ requires x; // Type-check error when enabled

//+K2-K2@ requires x; // Type-check error when enabled

//-K1-K2@ requires x; // Type-check error when enabled

//+K1+K3@ requires x; // Type-check error when enabled

// Comment should be ignored

//-K1 @ requires x;

//@ ghost int i = 0; // No errors

//@ ghost int i = 0; // No errors

//@ requires z ; // BAD

//@ assert args.length != 2;

// The original problem was that spec_public fields were included

// in rewritten code in places where Java private variables were

// not allowed.

/*@ spec_public */
/*@ spec_public */
/*@ requires length < 10;
	  @ requires !contains(value);
	  @ ensures length == \old(length) + 1;
	  @*/
/*@ requires index < length;
	  @ ensures \result == values[index];
	  @*/
/*@ pure */
/*@
	  @ requires index1 < length;
	  @ requires index2 < length;
	  @ ensures values[index1] == \old(values[index2]);
	  @ ensures values[index2] == \old(values[index1]);
	  @*/
/*@
	  @ requires contains(value);
	  @ ensures !contains(value);
	  @ ensures \old(values)[\result] == value;
	  @ ensures \result == \old(find(value));
	  @ ensures length == \old(length) - 1;
	  @*/
/*@
	  @ ensures \result >= 0;
	  @ ensures \result <= length;
	  @ ensures contains(value) ==> value == values[\result];
	  @ ensures !contains(value) ==> \result == length;
	  @*/
/*@
	  @ ensures \result == (\exists int i; 0 <= i && i < length; value == values[i]);
	  @*/
// index2==2 is too big

// Code is buggy

_by_default

//@ public invariant x == y;

//@ also public normal_behavior

//@   ensures \result == (x == y);

//@ pure

//@ assert res;


//@ public invariant xxxx != null;

//@ also public normal_behavior

//@ ensures \result == (xxxx != null);

//@ pure

//@ public normal_behavior

//@ pure

//@ public normal_behavior

//@ pure

_by_default

//@ public invariant x == y;

//@ also public normal_behavior

//@   ensures \result == (x == y);

//@ pure

//@ assert res;


//@ public invariant xxxx != null;

//@ also public normal_behavior

//@ ensures \result == (xxxx != null);

//@ pure

//@ public normal_behavior

//@ pure

//@ public normal_behavior

//@ pure

//@ invariant contents != null;

//@ invariant 0 <= n;

//@ invariant n <= contents.length;

//@ requires input != null;

//@ requires b != null;

//@ ensures \result >= 0;

/*@ pure @*/
//@ loop_invariant i>=0 && i<=n;

//@ loop_invariant count >= 0;

//@ assert new_contents.length == 2*n+1 ; // this should not fail?

//@ assert n >= 0;

//@ assert 2*n+1 > n;

//@ assert  n < new_contents.length;

//@ requires b != null;

//@ requires src != null;

//@ requires srcOff >=0;

//@ requires dest != null;

//@ requires destOff >=0;

//@ requires length >=0;

//@ requires srcOff + length <= src.length;

//@ requires destOff + length <= dest.length;

//@ assignable dest[*];

/*@ loop_invariant i>=0 && i<=length; @*/
//@ invariant contents != null;

//@ invariant 0 <= n;

//@ invariant n <= contents.length;

//@ requires input != null;

//@ requires b != null;

//@ ensures \result >= 0;

/*@ pure @*/
//@ loop_invariant i>=0 && i<=n;

//@ loop_invariant count >= 0;

//@ assert new_contents.length == 2*n+1 ; // this should not fail?

//@ assert n >= 0;

//@ assert 2*n+1 > n;

//@ assert  n < new_contents.length;

//@ requires b != null;

//@ requires src != null;

//@ requires srcOff >=0;

//@ requires dest != null;

//@ requires destOff >=0;

//@ requires length >=0;

//@ requires srcOff + length <= src.length;

//@ requires destOff + length <= dest.length;

//@ assignable dest[*];

/*@ loop_invariant i>=0 && i<=length; @*/
/*@ code_bigint_math */
//@ invariant contents != null;

//@ invariant 0 <= n;

//@ invariant n <= contents.length;

//@ requires input != null;

//@ requires b != null;

//@ loop_invariant 0 <= i && i <= n && n >= 0 && n <= contents.length; // added by DRC

//@ loop_invariant i>=0 && i<=n && n >= 0 && n <= contents.length; // DRC modified

//@ ensures \result >= 0;

/*@ pure @*/
//@ loop_invariant i>=0 && i<=n;

//@ loop_invariant count >= 0;

//@ modifies n, contents, contents[*];  // added by DRC

//@ requires b != null;

//@ modifies n,contents; // DRC added

//@ requires src != null;

//@ requires srcOff >=0;

//@ requires dest != null;

//@ requires destOff >=0;

//@ requires length >=0;

//@ requires srcOff + length <= src.length;

//@ requires destOff + length <= dest.length;

//@ assignable dest[*];

/*@ loop_invariant i>=0 && i<=length; @*/
/*@ code_bigint_math */
//@ invariant contents != null;

//@ invariant 0 <= n;

//@ invariant n <= contents.length;

//@ requires input != null;

//@ requires b != null;

//@ loop_invariant 0 <= i && i <= n && n >= 0 && n <= contents.length; // added by DRC

//@ loop_invariant i>=0 && i<=n && n >= 0 && n <= contents.length; // DRC modified

//@ ensures \result >= 0;

/*@ pure @*/
//@ loop_invariant i>=0 && i<=n;

//@ loop_invariant count >= 0;

//@ modifies n, contents, contents[*];  // added by DRC

//@ requires b != null;

//@ modifies n,contents; // DRC added

//@ requires src != null;

//@ requires srcOff >=0;

//@ requires dest != null;

//@ requires destOff >=0;

//@ requires length >=0;

//@ requires srcOff + length <= src.length;

//@ requires destOff + length <= dest.length;

//@ assignable dest[*];

/*@ loop_invariant i>=0 && i<=length; @*/
//@ requires operator == '+' || operator == '*' || operator == '-' || operator == '/' || operator == '%' || operator == '&' || operator == '|' || operator == '^';

//@{|

//@ requires operator == '+';

//@ requires num1 + num2 <= Integer.MAX_VALUE;

//@ requires num1 + num2 >= Integer.MIN_VALUE;

//@ ensures \result == num1 + num2;

//@ also

//@ requires operator == '*';

//@ requires num1 * num2 <= Integer.MAX_VALUE;

//@ requires num1 * num2 >= Integer.MIN_VALUE;

//@ ensures \result == num1 * num2;

//@ also

//@ requires operator == '-';

//@ requires num1 - num2 <= Integer.MAX_VALUE;

//@ requires num1 - num2 >= Integer.MIN_VALUE;

//@ ensures \result == num1 - num2;

//@ also

//@ requires operator == '/';

//@ requires num2 != 0;

//@ requires num1 / num2 <= Integer.MAX_VALUE;

//@ requires num1 / num2 >= Integer.MIN_VALUE;

//@ ensures \result == (num1 / num2);

//@ also

//@ requires operator == '%';

//@ requires num2 != 0;

//@ requires num1 % num2 <= Integer.MAX_VALUE;

//@ requires num1 % num2 >= Integer.MIN_VALUE;

//@ ensures \result == (num1 % num2);

//@ also

//@ requires operator == '&';

//@ ensures \result == (num1 & num2);

//@ also

//@ requires operator == '|';

//@ ensures \result == (num1 | num2);

//@ also

//@ requires operator == '^';

//@ ensures \result == (num1 ^ num2);

//@ |}

//@ also

//@ requires operator != '+' && operator != '-' && operator != '*' && operator != '/' && operator != '%' && operator != '&' && operator != '^' && operator != '|';

//@ ensures \result == -1;

//@ requires operator == '+' || operator == '*' || operator == '-' || operator == '/' || operator == '%' || operator == '&' || operator == '|' || operator == '^';

//@{|

//@ requires operator == '+';

//@ requires num1 + num2 <= Integer.MAX_VALUE;

//@ requires num1 + num2 >= Integer.MIN_VALUE;

//@ ensures \result == num1 + num2;

//@ also

//@ requires operator == '*';

//@ requires num1 * num2 <= Integer.MAX_VALUE;

//@ requires num1 * num2 >= Integer.MIN_VALUE;

//@ ensures \result == num1 * num2;

//@ also

//@ requires operator == '-';

//@ requires num1 - num2 <= Integer.MAX_VALUE;

//@ requires num1 - num2 >= Integer.MIN_VALUE;

//@ ensures \result == num1 - num2;

//@ also

//@ requires operator == '/';

//@ requires num2 != 0;

//@ requires num1 / num2 <= Integer.MAX_VALUE;

//@ requires num1 / num2 >= Integer.MIN_VALUE;

//@ ensures \result == (num1 / num2);

//@ also

//@ requires operator == '%';

//@ requires num2 != 0;

//@ requires num1 % num2 <= Integer.MAX_VALUE;

//@ requires num1 % num2 >= Integer.MIN_VALUE;

//@ ensures \result == (num1 % num2);

//@ also

//@ requires operator == '&';

//@ ensures \result == (num1 & num2);

//@ also

//@ requires operator == '|';

//@ ensures \result == (num1 | num2);

//@ also

//@ requires operator == '^';

//@ ensures \result == (num1 ^ num2);

//@ |}

//@ also

//@ requires operator != '+' && operator != '-' && operator != '*' && operator != '/' && operator != '%' ;

//@ ensures \result == -1;

//@ requires operator == '+' || operator == '*' || operator == '-' || operator == '/' || operator == '%' || operator == '&' || operator == '|' || operator == '^';

//@{|

//@ requires operator == '+';

//@ requires num1 + num2 <= Integer.MAX_VALUE;

//@ requires num1 + num2 >= Integer.MIN_VALUE;

//@ ensures \result == num1 + num2;

//@ also

//@ requires operator == '*';

//@ requires num1 * num2 <= Integer.MAX_VALUE;

//@ requires num1 * num2 >= Integer.MIN_VALUE;

//@ ensures \result == num1 * num2;

//@ also

//@ requires operator == '-';

//@ requires num1 - num2 <= Integer.MAX_VALUE;

//@ requires num1 - num2 >= Integer.MIN_VALUE;

//@ ensures \result == num1 - num2;

//@ also

//@ requires operator == '/';

//@ requires num2 != 0;

//@ requires num1 / num2 <= Integer.MAX_VALUE;

//@ requires num1 / num2 >= Integer.MIN_VALUE;

//@ ensures \result == (num1 / num2);

//@ also

//@ requires operator == '%';

//@ requires num2 != 0;

//@ requires num1 % num2 <= Integer.MAX_VALUE;

//@ requires num1 % num2 >= Integer.MIN_VALUE;

//@ ensures \result == (num1 % num2);

//@ also

//@ requires operator == '&';

//@ ensures \result == (num1 & num2);

//@ also

//@ requires operator == '|';

//@ ensures \result == (num1 | num2);

//@ also

//@ requires operator == '^';

//@ ensures \result == (num1 ^ num2);

//@ |}

//@ also

//@ requires operator != '+' && operator != '-' && operator != '*' && operator != '/' && operator != '%' && operator != '&' && operator != '^' && operator != '|';

//@ ensures \result == -1;

//@ requires operator == '+' || operator == '*' || operator == '-' || operator == '/' || operator == '%' || operator == '&' || operator == '|' || operator == '^';

//@{|

//@ requires operator == '+';

//@ requires num1 + num2 <= Integer.MAX_VALUE;

//@ requires num1 + num2 >= Integer.MIN_VALUE;

//@ ensures \result == num1 + num2;

//@ also

//@ requires operator == '*';

//@ requires num1 * num2 <= Integer.MAX_VALUE;

//@ requires num1 * num2 >= Integer.MIN_VALUE;

//@ ensures \result == num1 * num2;

//@ also

//@ requires operator == '-';

//@ requires num1 - num2 <= Integer.MAX_VALUE;

//@ requires num1 - num2 >= Integer.MIN_VALUE;

//@ ensures \result == num1 - num2;

//@ also

//@ requires operator == '/';

//@ requires num2 != 0;

//@ requires num1 / num2 <= Integer.MAX_VALUE;

//@ requires num1 / num2 >= Integer.MIN_VALUE;

//@ ensures \result == (num1 / num2);

//@ also

//@ requires operator == '%';

//@ requires num2 != 0;

//@ requires num1 % num2 <= Integer.MAX_VALUE;

//@ requires num1 % num2 >= Integer.MIN_VALUE;

//@ ensures \result == (num1 % num2);

//@ also

//@ requires operator == '&';

//@ ensures \result == (num1 & num2);

//@ also

//@ requires operator == '|';

//@ ensures \result == (num1 | num2);

//@ also

//@ requires operator == '^';

//@ ensures \result == (num1 ^ num2);

//@ |}

//@ also

//@ requires operator != '+' && operator != '-' && operator != '*' && operator != '/' && operator != '%' ;

//@ ensures \result == -1;

/*@ spec_public@*/
//@ public normal_behavior

//@ assignable reverse;

//@ ensures \result <==> reverse.equals(original);

//@ ghost int i_counter;

//@ set i_counter = 0;

//@ maintaining i >= -1 && i < original.length();

//@ maintaining \forall int k; 0<=k & k<i_counter; reverse.charAt(k) == original.charAt(length-1-k);

//@ decreases i;

//@ maintaining reverse != null && reverse instanceof String && i_counter == reverse.length();

//@ maintaining i_counter + i + 1 == length;

//@ assert \forall int k; 0<=k & k<i_counter; reverse.charAt(k) == original.charAt(length-1-k);

//@ assert reverse.length() == i_counter;

//@ assert reverse.length() == i_counter+1;

//@ assert reverse.charAt(i_counter) == original.charAt(length-1-i_counter);

//@ assert \forall int k; 0<=k & k<=i_counter; reverse.charAt(k) == original.charAt(length-1-k);

//@ set i_counter = i_counter + 1;

//@ assert i_counter == length;

//@ assignable reverse;

//@ ensures \result <==> reverse.equals(original);

//@ ghost int i_counter;

//@ set i_counter = 0;

//@ maintaining i >= -1 && i < original.length();

//@ decreases i;

//@ maintaining i_counter + i + 1 == length;

//@ set i_counter = i_counter + 1;

//@ assert i_counter == length;

//@ public normal_behavior

//@ assignable reverse;

//@ ensures \result <==> reverse.equals(original);

//@ ghost int i_counter;

//@ set i_counter = 0;

//@ maintaining i >= -1 && i < original.length();

//@ decreases i;

//@ maintaining i_counter + i + 1 == length;

//@ assume reverse instanceof String;

//@ set i_counter = i_counter + 1;

//@ assert i_counter == length;

/*@ spec_public@*/
//@ public normal_behavior

//@ assignable reverse;

//@ ensures \result <==> reverse.equals(original);

//@ ghost int i_counter;

//@ set i_counter = 0;

//@ maintaining i >= -1 && i < original.length();

//@ maintaining \forall int k; 0<=k & k<i_counter; reverse.charAt(k) == original.charAt(length-1-k);

//@ decreases i;

//@ maintaining reverse != null && reverse instanceof String && i_counter == reverse.length();

//@ maintaining i_counter + i + 1 == length;

//@ assert \forall int k; 0<=k & k<i_counter; reverse.charAt(k) == original.charAt(length-1-k);

//@ assert reverse.length() == i_counter;

//@ assert reverse.length() == i_counter+1;

//@ assert reverse.charAt(i_counter) == original.charAt(length-1-i_counter);

//@ assert \forall int k; 0<=k & k<=i_counter; reverse.charAt(k) == original.charAt(length-1-k);

//@ set i_counter = i_counter + 1;

//@ assert i_counter == length;

//@ assignable reverse;

//@ ensures \result <==> reverse.equals(original);

//@ ghost int i_counter;

//@ set i_counter = 0;

//@ maintaining i >= -1 && i < original.length();

//@ decreases i;

//@ maintaining i_counter + i + 1 == length;

//@ set i_counter = i_counter + 1;

//@ assert i_counter == length;

//@ public normal_behavior

//@ assignable reverse;

//@ ensures \result <==> reverse.equals(original);

//@ ghost int i_counter;

//@ set i_counter = 0;

//@ maintaining i >= -1 && i < original.length();

//@ decreases i;

//@ maintaining i_counter + i + 1 == length;

//@ assume reverse instanceof String;

//@ set i_counter = i_counter + 1;

//@ assert i_counter == length;

//@ public normal_behavior

//@ requires d != 0;

//@ pure function

/*@ spec_public nullable @*/
//@ requires 1 <= n && n < Integer.MAX_VALUE;

//@ assignable primeArray;

//@ ensures primeArray.length == n;

//@ ensures (\forall int i, j; 0 <= i && i < primeArray.length && 2 <= j && j <= primeArray[i]/2; !div(primeArray[i],j));

//@ ensures (\forall int i,j; 0 <= i && i < primeArray.length && 0 <= j && j < primeArray.length && i != j; primeArray[i] != primeArray[j]);

//@ assert num == 3;

//@ assert primeArray[0] == 2;

//@ assert num != primeArray[0];

//@ ghost int maxnumber = Integer.MAX_VALUE;

//@ ghost int count_counter = 2;

//@ maintaining (\forall int i, k; 0 <= i && i < count-1 && 2 <= k && k <= primeArray[i]/2; !div(primeArray[i],k));

//@ maintaining (\forall int i, k; 0 <= i && i < count-1 && 0 <= k && k < count-1 && i != k; primeArray[i] != primeArray[k]);

//@ maintaining (\forall int i; 0 <= i && i < count-1; primeArray[i] < num); // Added this line to Amirfarhad's submission

//@ maintaining num >= 3;

//@ maintaining count >= 2 && count <= n + 1;

//@ maintaining count_counter == count;

//@ loop_invariant status == 1;

//@ decreases maxnumber - num;

//@ maintaining j> 1 && j <= num/2 + 1;

//@ maintaining status == 1;

//@ maintaining (\forall int k; 0 <= k && k < count - 1; num != primeArray[k]);

//@ maintaining (\forall int k; 2 <= k && k < j; !div(num,k));

//@ decreases num - j;

//@ assert div(num,j);

//@ assert !div(num,j);

//@ assert status != 0;

//@ assert (\forall int k; 0 <= k && k < count - 1; num != primeArray[k]);

//@ assert (\forall int i; i >= 2 && i <= num/2; !div(num,i));

//@ assert primeArray[count -1] == num;

//@ set count_counter = count_counter + 1;

//@ assume num < Integer.MAX_VALUE;

//@ public normal_behavior

//@ requires d != 0;

//@ pure function

/*@ spec_public nullable @*/
//@ requires 1 <= n && n < Integer.MAX_VALUE;

//@ assignable primeArray;

//@ ensures primeArray.length == n;

//@ ensures (\forall int i, j; 0 <= i && i < primeArray.length && 2 <= j && j <= primeArray[i]/2; !div(primeArray[i],j));

//@ ensures (\forall int i,j; 0 <= i && i < primeArray.length && 0 <= j && j < primeArray.length && i != j; primeArray[i] != primeArray[j]);

//@ assert num == 3;

//@ assert primeArray[0] == 2;

//@ assert num != primeArray[0];

//@ ghost int maxnumber = Integer.MAX_VALUE;

//@ ghost int count_counter = 2;

//@ maintaining (\forall int i, k; 0 <= i && i < count-1 && 2 <= k && k <= primeArray[i]/2; !div(primeArray[i],k));

//@ maintaining (\forall int i, k; 0 <= i && i < count-1 && 0 <= k && k < count-1 && i != k; primeArray[i] != primeArray[k]);

//@ maintaining (\forall int i; 0 <= i && i < count-1; primeArray[i] < num); // Added this line to Amirfarhad's submission

//@ maintaining num >= 3;

//@ maintaining count >= 2 && count <= n + 1;

//@ maintaining count_counter == count;

//@ loop_invariant status == 1;

//@ decreases maxnumber - num;

//@ maintaining j> 1 && j <= num/2 + 1;

//@ maintaining status == 1;

//@ maintaining (\forall int k; 0 <= k && k < count - 1; num != primeArray[k]);

//@ maintaining (\forall int k; 2 <= k && k < j; !div(num,k));

//@ decreases num - j;

//@ assert div(num,j);

//@ assert !div(num,j);

//@ assert status != 0;

//@ assert (\forall int k; 0 <= k && k < count - 1; num != primeArray[k]);

//@ assert (\forall int i; i >= 2 && i <= num/2; !div(num,i));

//@ assert primeArray[count -1] == num;

//@ set count_counter = count_counter + 1;

//@ assume num < Integer.MAX_VALUE;

//@ public normal_behavior

//@ requires range > 0;

//@ requires repeat >= 0;

//@ ensures (\forall int k; 0 <= k && k < \result.size() ; \result.get(k) >= 0 && \result.get(k) < range);

//@ ensures repeat == \result.size();

//@ decreases repeat - counter;

//@ maintaining (\lbl RS randomNumbers.size()) == (\lbl CN counter)-1;

//@ maintaining randomNumbers.size() <= repeat;

//@ maintaining 0 <= selected && selected < range;

//@ maintaining (\forall int i; 0 <= i && i < randomNumbers.size(); 0 <= randomNumbers.get(i) && randomNumbers.get(i) <range);

//@ assert randomNumbers.get(randomNumbers.size()-1) == selected;

//@ assert 0 <= randomNumbers.get(randomNumbers.size()-1);

//@ assert randomNumbers.get(randomNumbers.size()-1) < range;

//@ assert randomNumbers.size() == repeat && counter-1 == repeat;

//@ public normal_behavior

//@ requires range > 0;

//@ requires repeat >= 0;

//@ ensures (\forall int k; 0 <= k && k < \result.size() ; \result.get(k) >= 0 && \result.get(k) < range);

//@ ensures repeat == \result.size();

//@ decreases repeat - counter;

//@ maintaining randomNumbers.size() == counter-1;

//@ maintaining randomNumbers.size() <= repeat;

//@ maintaining 0 <= selected && selected < range;

//@ maintaining (\forall int i; 0 <= i && i < randomNumbers.size(); 0 <= randomNumbers.get(i) && randomNumbers.get(i) <range);

//@ assert randomNumbers.get(randomNumbers.size()-1) == selected;

//@ assert 0 <= randomNumbers.get(randomNumbers.size()-1);

//@ assert randomNumbers.get(randomNumbers.size()-1) < range;

//@ assert randomNumbers.size() == repeat && counter-1 == repeat;

//@ public normal_behavior

//@ requires range > 0;

//@ requires repeat >= 0;

//@ ensures (\forall int k; 0 <= k && k < \result.size() ; \result.get(k) >= 0 && \result.get(k) < range);

//@ ensures repeat == \result.size();

//@ decreases repeat - counter;

//@ maintaining (\lbl RS randomNumbers.size()) == (\lbl CN counter)-1;

//@ maintaining randomNumbers.size() <= repeat;

//@ maintaining 0 <= selected && selected < range;

//@ maintaining (\forall int i; 0 <= i && i < randomNumbers.size(); 0 <= randomNumbers.get(i) && randomNumbers.get(i) <range);

//@ assert randomNumbers.get(randomNumbers.size()-1) == selected;

//@ assert 0 <= randomNumbers.get(randomNumbers.size()-1);

//@ assert randomNumbers.get(randomNumbers.size()-1) < range;

//@ assert randomNumbers.size() == repeat && counter-1 == repeat;

//@ public normal_behavior

//@ requires range > 0;

//@ requires repeat >= 0;

//@ ensures (\forall int k; 0 <= k && k < \result.size() ; \result.get(k) >= 0 && \result.get(k) < range);

//@ ensures repeat == \result.size();

//@ decreases repeat - counter;

//@ maintaining randomNumbers.size() == counter-1;

//@ maintaining randomNumbers.size() <= repeat;

//@ maintaining 0 <= selected && selected < range;

//@ maintaining (\forall int i; 0 <= i && i < randomNumbers.size(); 0 <= randomNumbers.get(i) && randomNumbers.get(i) <range);

//@ assert randomNumbers.get(randomNumbers.size()-1) == selected;

//@ assert 0 <= randomNumbers.get(randomNumbers.size()-1);

//@ assert randomNumbers.get(randomNumbers.size()-1) < range;

//@ assert randomNumbers.size() == repeat && counter-1 == repeat;

//@ requires x(i);

//@ requires pos(i);

//@ ensures \result == i > 10;

//@ pure

//@ ensures \result == i > 0;

//@ pure

//@ requires x(i);

//@ requires pos(i);

//@ ensures \result == i > 10;

//@ pure

//@ ensures \result == i > 0;

//@ pure

//@ assert i >= 0; // FAILS

//@ assert i >= 0; // OK

//@ assume i >= 0;

//@ assert i >= 0; // OK

//@ check  i >= 0; // FAILS

//@ assert i >= 0; // FAILS

//@ assert i >= 0; // FAILS

//@ assert i >= 0; // OK

//@ assume i >= 0;

//@ assert i >= 0; // OK

//@ check  i >= 0; // FAILS

//@ assert i >= 0; // FAILS

//@ public normal_behavior

//@   ensures \fresh(x);

//@ pure

//@ public normal_behavior

//@   ensures \fresh(x);

//@ pure

//@ public normal_behavior

//@   ensures \fresh(x);

//@ pure

//@ public normal_behavior

//@   ensures \fresh(x);

//@ pure

//@ public normal_behavior

//@   ensures true;

//@ public normal_behavior

//@   ensures true;

/*@
    static public datatype N {}
     */
//@ datatype X {};

/*@
    model
    public void mm(NN<Integer> x) {
        NN<Integer> xx = NN.<Integer>Empty();
        xx = NN.<Integer>Cons(1,xx);
        boolean b = xx.isEmpty();
        b = x.isCons();
        Integer i = xx.head();
        xx = xx.tail();
    }
    */
/*@
datatype NN<T> {
    Empty(),
    Cons(T head, NN<T> tail)
    ;

    int length() {
       return match (this) {
         case Empty() -> 0;
         case Cons(_,t) -> 1+ t.length();
       };
     }

    NN<T> of(T t) { return Cons(t, Empty()); }

}
 */
/*@
    static public datatype N {}
     */
//@ datatype X {};

/*@
    model
    public void mm(NN<Integer> x) {
        NN<Integer> xx = NN.<Integer>Empty();
        xx = NN.<Integer>Cons(1,xx);
        boolean b = xx.isEmpty();
        b = x.isCons();
        Integer i = xx.head();
        xx = xx.tail();
    }
    */
/*@
datatype NN<T> {
    Empty(),
    Cons(T head, NN<T> tail)
    ;

    int length() {
       return match (this) {
         case Empty() -> 0;
         case Cons(_,t) -> 1+ t.length();
       };
     }

    NN<T> of(T t) { return Cons(t, Empty()); }

}
 */
//@   requires BB;

//@   requires CC;

//@   ensures \result == true;

//@ also

//@   requires DD;

//@   requires EE;

//@   ensures \result == true;

//@ also

//@   requires \else;

//@   ensures \result == false;

//@ pure

//@ requires m();

//@ ensures \result == true;

//@ unreachable;

//@ requires AA;

//@ {|

//@   requires BB;

//@   requires CC;

//@   ensures \result == true;

//@ also

//@   requires DD;

//@   requires EE;

//@   ensures \result == true;

//@ also

//@   requires \else;

//@   ensures \result == false;

//@ |}

//@   requires BB;

//@   requires CC;

//@   ensures \result == true;

//@ also

//@   requires DD;

//@   requires EE;

//@   ensures \result == true;

//@ also

//@   requires \else;

//@   ensures \result == false;

//@ pure

//@ requires m();

//@ ensures \result == true;

//@ unreachable;

//@ requires AA;

//@ {|

//@   requires BB;

//@   requires CC;

//@   ensures \result == true;

//@ also

//@   requires DD;

//@   requires EE;

//@   ensures \result == true;

//@ also

//@   requires \else;

//@   ensures \result == false;

//@ |}

//@ assert EEE.AA instanceof EEE;

//@ assert \type(EEE) <: \type(Enum<EEE>);  // FIXME - needs work

//@ assert EEE.class <: Enum.class;

//@ pure

//@ assert EEE.AA.toString().equals("AA");  // Needs work on strings

//@ pure

//@ assert EEE.AA.name().equals("AA");  // Needs work on strings

//@ pure

//@ assume (\forall EEE ee; ee != null ==> (\exists \bigint i; 0<=i && i<EEE._JMLvalues.length; EEE._JMLvalues[i] == ee)); // FIXME - failig

//@ assume (\forall EEE ee; ee != null ==> (\exists \bigint i; 0<=i && i<ev.length; ev[i] == ee)); // FIXME - failig

//@ show ev, EEE._JMLvalues, ev[0], EEE._JMLvalues[0];

//@ assert (\forall EEE ee; ee != null ==> (\exists \bigint i; 0<=i && i<ev.length; ev[i] == ee)); // FIXME - failig

//@ assert EEE.AA instanceof EEE;

//@ assert \type(EEE) <: \type(Enum<EEE>);  // FIXME - needs work

//@ assert EEE.class <: Enum.class;

//@ pure

//@ assert EEE.AA.toString().equals("AA");  // Needs work on strings

//@ pure

//@ assert EEE.AA.name().equals("AA");  // Needs work on strings

//@ pure

//@ assume (\forall EEE ee; ee != null ==> (\exists \bigint i; 0<=i && i<EEE._JMLvalues.length; EEE._JMLvalues[i] == ee)); // FIXME - failig

//@ assume (\forall EEE ee; ee != null ==> (\exists \bigint i; 0<=i && i<ev.length; ev[i] == ee)); // FIXME - failig

//@ show ev, EEE._JMLvalues, ev[0], EEE._JMLvalues[0];

//@ assert (\forall EEE ee; ee != null ==> (\exists \bigint i; 0<=i && i<ev.length; ev[i] == ee)); // FIXME - failig

//@ spec_public

//@ public final static invariant AA.code == 4;

//@ public final static invariant BB.code == 8;

//@ public final static invariant CC.code == 7;

//@ private normal_behavior

//@   ensures code == c;

//@ pure

//@ show EEE.AA.code, EEE.BB.code;

//@ assert EEE.AA.code == 4;

//@ assert EEE.BB.code == 8;

//@ assert EEE.CC.code == 7;

//@ assert EEE.AA.code == 9; // Expected failure

//@ spec_public

//@ public final static invariant AA.code == 4;

//@ public final static invariant BB.code == 8;

//@ public final static invariant CC.code == 7;

//@ private normal_behavior

//@   ensures code == c;

//@ pure

//@ show EEE.AA.code, EEE.BB.code;

//@ assert EEE.AA.code == 4;

//@ assert EEE.BB.code == 8;

//@ assert EEE.CC.code == 7;

//@ assert EEE.AA.code == 9; // Expected failure

//@ assert EEE.AA == EEE.AA;

//@ assert EEE.AA != EEE.BB;

//@ pure

//@ assert EEE.AA.toString() == EEE.AA.name();

//@ pure

//@ assert EEE.AA.name() == EEE.AA.name();

//@ assert EEE.AA.name() != EEE.BB.name();

//@ assert e == EEE.AA || e == EEE.BB || e == EEE.CC || e == EEE.DD;

//@ unreachable;

//@ pure

//@ assert ev.length == 4 ;

//@ assert EEE.values() == EEE.values();

//@ assert EEE.values() == e.values();

//@ pure

//@ show EEE._JMLvalues, EEE._JMLvalues[0];

//@ assert ev.length == 4 ;

//@ assert ev[0] == EEE.AA;

//@ assert ev[1] == EEE.BB;

//@ assert ev[2] == EEE.CC;

//@ assert ev[3] == EEE.DD;

//@ pure

//@ assume (\forall EEE ee; ee != null ==> (\exists int i; 0<=i && i<ev.length; ev[i] == ee)); // FIXME - failig

//@ assert ev.length == 4 ;

//@ assert b;

//@ pure

//@ assert (\exists int i; 0<=i && i<ev.length; ev[i] == e);  // FIXME - Failinng

//@ pure


//@ assert e != null && s != null;

//@ assert e == EEE.AA || e == EEE.BB || e == EEE.CC || e == EEE.DD;

//@ assert s == null;

//@ pure


//@ assert e != null;

//@ assert ssss != null;

//@ assert e == EEE.AA || e == EEE.BB || e == EEE.CC || e == EEE.DD;

//@ assert ssss == null;

//@ pure

//@ assert ee.ordinal() < EEE.values().length;

//@ ensures !\fresh(\result);

//@ pure

//@ pure

//@ assert \fresh(e); // false

//@ pure

//@ assert !\fresh(e);

//@ assert EEE.AA == EEE.AA;

//@ assert EEE.AA != EEE.BB;

//@ pure

//@ assert EEE.AA.toString() == EEE.AA.name();

//@ pure

//@ assert EEE.AA.name() == EEE.AA.name();

//@ assert EEE.AA.name() != EEE.BB.name();

//@ assert e == EEE.AA || e == EEE.BB || e == EEE.CC || e == EEE.DD;

//@ unreachable;

//@ pure

//@ assert ev.length == 4 ;

//@ assert EEE.values() == EEE.values();

//@ assert EEE.values() == e.values();

//@ pure

//@ show EEE._JMLvalues, EEE._JMLvalues[0];

//@ assert ev.length == 4 ;

//@ assert ev[0] == EEE.AA;

//@ assert ev[1] == EEE.BB;

//@ assert ev[2] == EEE.CC;

//@ assert ev[3] == EEE.DD;

//@ pure

//@ assume (\forall EEE ee; ee != null ==> (\exists int i; 0<=i && i<ev.length; ev[i] == ee)); // FIXME - failig

//@ assert ev.length == 4 ;

//@ assert b;

//@ pure

//@ assert (\exists int i; 0<=i && i<ev.length; ev[i] == e);  // FIXME - Failinng

//@ pure


//@ assert e != null && s != null;

//@ assert e == EEE.AA || e == EEE.BB || e == EEE.CC || e == EEE.DD;

//@ assert s == null;

//@ pure


//@ assert e != null;

//@ assert ssss != null;

//@ assert e == EEE.AA || e == EEE.BB || e == EEE.CC || e == EEE.DD;

//@ assert ssss == null;

//@ pure

//@ assert ee.ordinal() < EEE.values().length;

//@ ensures !\fresh(\result);

//@ pure

//@ pure

//@ assert \fresh(e); // false

//@ pure

//@ assert !\fresh(e);

//@ requires m >= 0 && n>= 0;  // FIXME - fails to prove if m is allowed to be 0

//@ ensures \fresh(\result);

//@ ensures \result.length == m;

//@ ensures \forall int i; 0<=i<m; \result[i] != null && \result[i].length == n;

//@ ensures \forall int e; 0<=e<m; \forall int k; 0 <= k < n; \result[e][k] == e+k;

//@ assume m == 2 && n == 2;

//@ assert a != null;

//@ assert a.length == m;

//@ assert m > 0 ==> a[0] != null;  // FIXME - proof fails if the following are not assumed

//@ assert m > 0 ==> a[0].length == n;

//@ assert \forall int i; 0 <= i < m; a[i] != null && a[i].length == n;

//@ assert \forall int e; 0<=e<m; \forall int k; 0 <= k < m; (e != k ==> a[e] != a[k]);

//@ loop_invariant 0 <= i <= m;

//@ loop_invariant \forall int k; 0<=k<m; a[k] != null && a[k].length == n;

//@ loop_invariant \forall int e; 0<=e<m; \forall int k; 0 <= k < m; (e != k ==> a[e] != a[k]);

//@ loop_invariant \forall int e; 0<=e<i; \forall int k; 0 <= k < n; a[e][k] == e+k;

//@ loop_modifies a[*][*];

//@ loop_decreases m-i;

//@ loop_invariant 0 <= j <= n;

//@ loop_invariant \forall int k; 0<=k<m; a[k] != null && a[k].length == n;

//@ loop_invariant \forall int e; 0<=e<m; \forall int k; 0 <= k < m; (e != k ==> a[e] != a[k]);

//@ loop_invariant \forall int e; 0<=e<i; \forall int k; 0 <= k < n; a[e][k] == e+k;

//@ loop_invariant \forall int k; 0 <= k < j; a[i][k] == i+k;

//@ loop_modifies a[*][*];

//@ loop_decreases n-j;

//@ assert \forall int k; 0 <= k < n; a[i][k] == i+k;

//@ assert \forall int e; 0<=e<m; \forall int k; 0 <= k < n; a[e][k] == e+k;

//@ assume a != null;

//@ assume a.length == 5;

//@ assume a[1] != null && a[2] != null;

//@ assume a[1].length == 6;

//@ assume a[2].length == 7;

//@ assume a[2][3] ==7;

//@ assert a.length == 5; //OK

//@ assert a[1].length == 6; //OK

//@ assert a[2].length == 7; //OK

//@ assert a[2][3] ==7; //OK

//@ assume a != null;

//@ assume a.length == 5;

//@ assume a[1] != null && a[2] != null;

//@ assume a[1].length == 6;

//@ assume a[2].length == 7;

//@ assume a[2][3] ==7;

//@ havoc a[*][*];

//@ assert a.length == 5 && a[1].length == 6 && a[2].length == 7 && a[2][3] ==7;  // FAILS

//@ assume a != null;

//@ assume a.length == 5;

//@ assume a[1] != null && a[2] != null;

//@ assume a[1].length == 6;

//@ assume a[2].length == 7;

//@ assume a[2][3] ==7;

//@ assert a.length == 5; // OK

//@ assert a[1].length == 6; // OK

//@ assert a[2].length == 7; // OK

//@ assert a[2][3] ==7; // OK

//@ assert b[2] == 13; // OK

//@ requires m >= 0 && n>= 0;  // FIXME - fails to prove if m is allowed to be 0

//@ ensures \fresh(\result);

//@ ensures \result.length == m;

//@ ensures \forall int i; 0<=i<m; \result[i] != null && \result[i].length == n;

//@ ensures \forall int e; 0<=e<m; \forall int k; 0 <= k < n; \result[e][k] == e+k;

//@ assume m == 2 && n == 2;

//@ assert a != null;

//@ assert a.length == m;

//@ assert m > 0 ==> a[0] != null;  // FIXME - proof fails if the following are not assumed

//@ assert m > 0 ==> a[0].length == n;

//@ assert \forall int i; 0 <= i < m; a[i] != null && a[i].length == n;

//@ assert \forall int e; 0<=e<m; \forall int k; 0 <= k < m; (e != k ==> a[e] != a[k]);

//@ loop_invariant 0 <= i <= m;

//@ loop_invariant \forall int k; 0<=k<m; a[k] != null && a[k].length == n;

//@ loop_invariant \forall int e; 0<=e<m; \forall int k; 0 <= k < m; (e != k ==> a[e] != a[k]);

//@ loop_invariant \forall int e; 0<=e<i; \forall int k; 0 <= k < n; a[e][k] == e+k;

//@ loop_modifies a[*][*];

//@ loop_decreases m-i;

//@ loop_invariant 0 <= j <= n;

//@ loop_invariant \forall int k; 0<=k<m; a[k] != null && a[k].length == n;

//@ loop_invariant \forall int e; 0<=e<m; \forall int k; 0 <= k < m; (e != k ==> a[e] != a[k]);

//@ loop_invariant \forall int e; 0<=e<i; \forall int k; 0 <= k < n; a[e][k] == e+k;

//@ loop_invariant \forall int k; 0 <= k < j; a[i][k] == i+k;

//@ loop_modifies a[*][*];

//@ loop_decreases n-j;

//@ assert \forall int k; 0 <= k < n; a[i][k] == i+k;

//@ assert \forall int e; 0<=e<m; \forall int k; 0 <= k < n; a[e][k] == e+k;

//@ assume a != null;

//@ assume a.length == 5;

//@ assume a[1] != null && a[2] != null;

//@ assume a[1].length == 6;

//@ assume a[2].length == 7;

//@ assume a[2][3] ==7;

//@ assert a.length == 5; //OK

//@ assert a[1].length == 6; //OK

//@ assert a[2].length == 7; //OK

//@ assert a[2][3] ==7; //OK

//@ assume a != null;

//@ assume a.length == 5;

//@ assume a[1] != null && a[2] != null;

//@ assume a[1].length == 6;

//@ assume a[2].length == 7;

//@ assume a[2][3] ==7;

//@ havoc a[*][*];

//@ assert a.length == 5 && a[1].length == 6 && a[2].length == 7 && a[2][3] ==7;  // FAILS

//@ assume a != null;

//@ assume a.length == 5;

//@ assume a[1] != null && a[2] != null;

//@ assume a[1].length == 6;

//@ assume a[2].length == 7;

//@ assume a[2][3] ==7;

//@ assert a.length == 5; // OK

//@ assert a[1].length == 6; // OK

//@ assert a[2].length == 7; // OK

//@ assert a[2][3] ==7; // OK

//@ assert b[2] == 13; // OK

//@ requires matrix.length > 0;

//@ requires matrix[0].length > 0;

//@ requires (\forall int k; 0 <= k < matrix.length; matrix[k] != null);

//@ requires (\forall int k; 0 <= k < matrix.length; matrix[0].length == matrix[k].length);

//@ ensures (\forall int i, j; 0 <= i < matrix.length && 0 <= j < matrix[0].length; matrix[i][j] == \result[j][i]);

//@ ensures matrix.length == \result[0].length;

//@ ensures matrix[0].length == \result.length;

//@ assert \forall int i; 0 <= i < n; transpose[i] != null && transpose[i].length == m;

//@ assert \forall int e; 0<=e<n; \forall int k; 0 <= k < n; (e != k ==> transpose[e] != transpose[k]);

//@ assert \forall int e; 0<=e<n; (\forall int k; 0 <= k < m; transpose[e] != matrix[k]);

//@ maintaining 0 <= c <= n;

//@ maintaining \forall int i; 0<=i<c; (\forall int j; 0 <= j < m ; transpose[i][j] == matrix[j][i]);

//@ decreases n - c;

//@ maintaining 0 <= d <= m;

//@ maintaining (\forall int j; 0 <= j < d; transpose[c][j] == matrix[j][c]);

//@ decreases m - d;

//@ requires matrix.length > 0;

//@ requires (\forall int k; 0 <= k && k < matrix.length; matrix[k] != null);

//@ requires (\forall int k; 0 <= k && k < matrix.length; matrix[0].length == matrix[k].length);

//@ ensures matrix.length == \result[0].length;

//@ ensures matrix[0].length == \result.length;

//@ ensures (\forall int i, j; 0 <= i < matrix.length && 0 <= j < matrix[0].length; matrix[i][j] == \result[j][i]);

//@ assert n > 0 ==> transpose[0] != null;

//@ assert n > 0 ==> transpose[0].length == n;

//@ assert \forall int i; 0 <= i < n; transpose[i] != null && transpose[i].length == m;

//@ assert \forall int e; 0<=e<n; \forall int k; 0 <= k < n; (e != k ==> transpose[e] != transpose[k]);

//@ maintaining 0 <= d && d <= n;

//@ maintaining (\forall int j, i; 0 <= j < matrix.length && 0 <= i < d; transpose[i][j] == matrix[j][i]);

//@ decreases n - d;

//@ maintaining 0 <= c && c <= m;

//@ maintaining (\forall int j; 0 <= j < c; transpose[d][j] == matrix[j][d]);

//@ decreases m - c;

//@ assume n >= 0;

//@ assume m >= 0;

//@ maintaining 0 <= c && c <= m;

//@ maintaining \forall int i; 0<=i<n; transpose[i] != null && transpose[i].length == m;

//@ loop_modifies transpose[*][*];

//@ decreases m - c;

//@ maintaining 0 <= d && d <= n;

//@ maintaining \forall int i; 0<=i<n; transpose[i] != null && transpose[i].length == m;

//@ loop_modifies transpose[*][*];

//@ decreases n - d;

//@ assert n > 0 ==> m == transpose[0].length;

//@ assert n == transpose.length;

//@ requires matrix.length > 0;

//@ requires matrix[0].length > 0;

//@ requires (\forall int k; 0 <= k < matrix.length; matrix[k] != null);

//@ requires (\forall int k; 0 <= k < matrix.length; matrix[0].length == matrix[k].length);

//@ ensures (\forall int i, j; 0 <= i < matrix.length && 0 <= j < matrix[0].length; matrix[i][j] == \result[j][i]);

//@ ensures matrix.length == \result[0].length;

//@ ensures matrix[0].length == \result.length;

//@ assert \forall int i; 0 <= i < n; transpose[i] != null && transpose[i].length == m;

//@ assert \forall int e; 0<=e<n; \forall int k; 0 <= k < n; (e != k ==> transpose[e] != transpose[k]);

//@ assert \forall int e; 0<=e<n; (\forall int k; 0 <= k < m; transpose[e] != matrix[k]);

//@ maintaining 0 <= c <= n;

//@ maintaining \forall int i; 0<=i<c; (\forall int j; 0 <= j < m ; transpose[i][j] == matrix[j][i]);

//@ decreases n - c;

//@ maintaining 0 <= d <= m;

//@ maintaining (\forall int j; 0 <= j < d; transpose[c][j] == matrix[j][c]);

//@ decreases m - d;

//@ requires matrix.length > 0;

//@ requires (\forall int k; 0 <= k && k < matrix.length; matrix[k] != null);

//@ requires (\forall int k; 0 <= k && k < matrix.length; matrix[0].length == matrix[k].length);

//@ ensures matrix.length == \result[0].length;

//@ ensures matrix[0].length == \result.length;

//@ ensures (\forall int i, j; 0 <= i < matrix.length && 0 <= j < matrix[0].length; matrix[i][j] == \result[j][i]);

//@ assert n > 0 ==> transpose[0] != null;

//@ assert n > 0 ==> transpose[0].length == n;

//@ assert \forall int i; 0 <= i < n; transpose[i] != null && transpose[i].length == m;

//@ assert \forall int e; 0<=e<n; \forall int k; 0 <= k < n; (e != k ==> transpose[e] != transpose[k]);

//@ maintaining 0 <= d && d <= n;

//@ maintaining (\forall int j, i; 0 <= j < matrix.length && 0 <= i < d; transpose[i][j] == matrix[j][i]);

//@ decreases n - d;

//@ maintaining 0 <= c && c <= m;

//@ maintaining (\forall int j; 0 <= j < c; transpose[d][j] == matrix[j][d]);

//@ decreases m - c;

//@ assume n >= 0;

//@ assume m >= 0;

//@ maintaining 0 <= c && c <= m;

//@ maintaining \forall int i; 0<=i<n; transpose[i] != null && transpose[i].length == m;

//@ loop_modifies transpose[*][*];

//@ decreases m - c;

//@ maintaining 0 <= d && d <= n;

//@ maintaining \forall int i; 0<=i<n; transpose[i] != null && transpose[i].length == m;

//@ loop_modifies transpose[*][*];

//@ decreases n - d;

//@ assert n > 0 ==> m == transpose[0].length;

//@ assert n == transpose.length;

//@ requires matrix.length > 0;

//@ requires (\forall int k; 0 <= k && k < matrix.length; matrix[k] != null);

//@ requires (\forall int k; 0 <= k && k < matrix.length; matrix[0].length == matrix[k].length);

//@ ensures (\forall int i, j; i >= 0 && j >= 0 && i < matrix.length && j < matrix[0].length; matrix[i][j] == \result[j][i]);

//@ ensures matrix.length == \result[0].length;

//@ ensures matrix[0].length == \result.length;

//@ assume \forall int i; 0<=i<n; transpose[i] != null && transpose[i].length == m;

//@ assume \forall int i; 0<=i<n; \forall int j; 0<=j<n; i != j ==> transpose[i] != transpose[j];

//@ assert transpose.length == n;

//@ assert (\forall int k; 0 <= k && k < n; transpose[k] != null && transpose[k].length == m);

//@ maintaining (\forall int i, j; i >= 0 && j >= 0 && i < c && j < n ; matrix[i][j] == transpose[j][i]);

//@ maintaining c >= 0 && c <= m;

//@ decreases m - c;

//@ maintaining (\forall int j; 0 <= j && j < d; matrix[c][j] == transpose[j][c]);

//@ maintaining (\forall int k; 0 < k && k < matrix.length; matrix[k].length == n);

//@ maintaining transpose.length == n;

//@ maintaining (\forall int k; 0 < k && k < transpose.length; transpose[k].length == m);

//@ maintaining 0 <= d && d <= n;

//@ decreases n - d;

//@ maintaining d < n ==> (transpose[d].length == m);

//@ maintaining 0 <= c && c < m;

//@ assert d < transpose.length && transpose.length == n;

//@ assert d >= 0;

//@ assert c <  transpose[0].length && transpose[0].length == m;

//@ assert transpose[d][c] == matrix[c][d];

//@ requires matrix.length > 0;

//@ requires (\forall int k; 0 <= k && k < matrix.length; matrix[k] != null);

//@ requires (\forall int k; 0 <= k && k < matrix.length; matrix[0].length == matrix[k].length);

//@ ensures (\forall int i, j; i >= 0 && j >= 0 && i < matrix.length && j < matrix[0].length; matrix[i][j] == \result[j][i]);

//@ ensures matrix.length == \result[0].length;

//@ ensures matrix[0].length == \result.length;

//@ assume \forall int i; 0<=i<n; transpose[i] != null && transpose[i].length == m;

//@ assume \forall int i; 0<=i<n; \forall int j; 0<=j<n; i != j ==> transpose[i] != transpose[j];

//@ assert transpose.length == n;

//@ assert (\forall int k; 0 <= k && k < n; transpose[k] != null && transpose[k].length == m);

//@ maintaining (\forall int i, j; i >= 0 && j >= 0 && i < c && j < n ; matrix[i][j] == transpose[j][i]);

//@ maintaining c >= 0 && c <= m;

//@ decreases m - c;

//@ maintaining (\forall int j; 0 <= j && j < d; matrix[c][j] == transpose[j][c]);

//@ maintaining (\forall int k; 0 < k && k < matrix.length; matrix[k].length == n);

//@ maintaining transpose.length == n;

//@ maintaining (\forall int k; 0 < k && k < transpose.length; transpose[k].length == m);

//@ maintaining 0 <= d && d <= n;

//@ decreases n - d;

//@ maintaining d < n ==> (transpose[d].length == m);

//@ maintaining 0 <= c && c < m;

//@ assert d < transpose.length && transpose.length == n;

//@ assert d >= 0;

//@ assert c <  transpose[0].length && transpose[0].length == m;

//@ assert transpose[d][c] == matrix[c][d];

//@ public normal_behavior

//@   ensures init;

//@ public C();

//@ public normal_behavior

//@   ensures init;

//@ public C();

//@ public normal_behavior

//@   ensures init;

//@ model public A();

//@ assert a.init;

//@ also public normal_behavior

//@   requires true;

//@   ensures false;



//@ abstract public String toString();

//@ public normal_behavior

//@   ensures init;

//@ model public A();

//@ assert a.init;

//@ also public normal_behavior

//@   requires true;

//@   ensures false;



//@ abstract public String toString();

/*@ code_bigint_math */
//@ public invariant x() + y() > 0;

/*@ spec_public */
/*@ spec_public */
//@ requires the_x + the_y > 0;

//@ ensures x() == the_x && y() == the_y;

//@ ensures \result == my_x;

/*@ pure helper @*/
//@ ensures \result == my_y;

/*@ pure helper @*/
//@ ensures \result == x() + y() + the_operand;

/*@ pure @*/
/*@ code_bigint_math */
//@ public invariant x() + y() > 0;

/*@ spec_public */
/*@ spec_public */
//@ requires the_x + the_y > 0;

//@ ensures x() == the_x && y() == the_y;

//@ ensures \result == my_x;

/*@ pure helper @*/
//@ ensures \result == my_y;

/*@ pure helper @*/
//@ ensures \result == x() + y() + the_operand;

/*@ pure @*/
//@ public invariant x() + y() > 0;

/*@ spec_public */
/*@ spec_public */
//@ requires the_x + the_y > 0;

//@ ensures x() == the_x && y() == the_y;

//@ ensures \result == my_x;

/*@ pure @*/
//@ ensures \result == my_y;

/*@ pure @*/
//@ ensures \result == x() + y() + the_operand;

/*@ pure @*/
//@ public invariant x() + y() > 0;

/*@ spec_public */
/*@ spec_public */
//@ requires the_x + the_y > 0;

//@ ensures x() == the_x && y() == the_y;

//@ ensures \result == my_x;

/*@ pure @*/
//@ ensures \result == my_y;

/*@ pure @*/
//@ ensures \result == x() + y() + the_operand;

/*@ pure @*/
//@ requires a != null && a.length == 10;

//@ requires b != null && b.length == 30;

//@ assignable b[*];

//@ assert (\forall int i; i <10 && i <= 20; b[i] == \old(b[i]));

//@ assert (\forall int i; 10<=i && i <20; b[i] == a[i-10]);

//@ requires a != null && a.length == 10;

//@ requires b != null && b.length == 30;

//@ assignable b[*];

//@ assert (\forall int i; i <10 && i <= 20; b[i] == \old(b[i]));

//@ assert (\forall int i; 10<=i && i <20; b[i] == a[i-10]);

//@ requires a != null && a.length == 10;

//@ requires b != null && b.length == 30;

//@ assignable b[*];

//@ assert (\forall int i; i <10 && i <= 20; b[i] == \old(b[i]));

//@ assert (\forall int i; 10<=i && i <20; b[i] == a[i-10]);

//@ requires a != null && a.length == 10;

//@ requires b != null && b.length == 30;

//@ assignable b[*];

//@ assert (\forall int i; i <10 && i <= 20; b[i] == \old(b[i]));

//@ assert (\forall int i; 10<=i && i <20; b[i] == a[i-10]);

//@ requires a != null && a.length == 10;

//@ requires b != null && b.length == 30;

//@ assignable b[*];

//@ assert (\forall int i; i <10 && i <= 20; b[i] == \old(b[i]));

//@ assert (\forall int i; 10<=i && i <20; b[i] == a[i-10]);

//@ requires a != null && a.length == 10;

//@ requires b != null && b.length == 30;

//@ assignable b[*];

//@ assert (\forall int i; i <10 && i <= 20; b[i] == \old(b[i]));

//@ assert (\forall int i; 10<=i && i <20; b[i] == a[i-10]);

//@ requires a != null && a.length == 10;

//@ requires b != null && b.length == 30;

//@ requires \elemtype(\typeof(a)) <: \elemtype(\typeof(b));

//@ assignable b[*];

//@ assert (\forall int i; i <10 && i <= 20; b[i] == \old(b[i]));

//@ assert (\forall int i; 10<=i && i <20; b[i] == a[i-10]);

//@ requires a != null && a.length == 10;

//@ requires b != null && b.length == 30;

//@ assignable b[*];

//@ assert (\forall int i; i <10 && i <= 20; b[i] == \old(b[i]));

//@ assert (\forall int i; 10<=i && i <20; b[i] == a[i-10]);

//@ requires a != null && a.length == 10;

//@ requires b != null && b.length == 30;

//@ assignable b[*];

//@ assert (\forall int i; i <10 && i <= 20; b[i] == \old(b[i]));

//@ assert (\forall int i; 10<=i && i <20; b[i] == a[i-10]);

//@ requires a != null && a.length == 10;

//@ requires b != null && b.length == 30;

//@ assignable b[*];

//@ assert (\forall int i; i <10 && i <= 20; b[i] == \old(b[i]));

//@ assert (\forall int i; 10<=i && i <20; b[i] == a[i-10]);

//@ requires a != null && a.length == 10;

//@ requires b != null && b.length == 30;

//@ assignable b[*];

//@ assert (\forall int i; i <10 && i <= 20; b[i] == \old(b[i]));

//@ assert (\forall int i; 10<=i && i <20; b[i] == a[i-10]);

//@ requires a != null && a.length == 10;

//@ requires b != null && b.length == 30;

//@ assignable b[*];

//@ assert (\forall int i; i <10 && i <= 20; b[i] == \old(b[i]));

//@ assert (\forall int i; 10<=i && i <20; b[i] == a[i-10]);

//@ requires a != null && a.length == 10;

//@ requires b != null && b.length == 30;

//@ assignable b[*];

//@ assert (\forall int i; i <10 && i <= 20; b[i] == \old(b[i]));

//@ assert (\forall int i; 10<=i && i <20; b[i] == a[i-10]);

//@ requires a != null && a.length == 10;

//@ requires b != null && b.length == 30;

//@ requires \elemtype(\typeof(a)) <: \elemtype(\typeof(b));

//@ assignable b[*];

//@ assert (\forall int i; i <10 && i <= 20; b[i] == \old(b[i]));

//@ assert (\forall int i; 10<=i && i <20; b[i] == a[i-10]);

//@ requires pp.position.x >= 0 && pp.position.x < xSize;

//@ ensures piece == pp;

//@ pure

//@ public invariant piece.position.x >= 0 && piece.position.x < xSize;

//@ normal_behavior

//@ requires inRange(p);

//@ assignable piece.position;

//@ assert inRange(piece.position);

//@ ensures \result == ( p.x >= 0 && p.x < xSize );

//@ pure helper

//@ ensures position == p;

//@ pure

//@ normal_behavior

//@ assignable position;

//@ ensures position == p;

//@ requires pp.position.x >= 0 && pp.position.x < xSize;

//@ ensures piece == pp;

//@ pure

//@ public invariant piece.position.x >= 0 && piece.position.x < xSize;

//@ normal_behavior

//@ requires inRange(p);

//@ assignable piece.position;

//@ assert inRange(piece.position);

//@ ensures \result == ( p.x >= 0 && p.x < xSize );

//@ pure helper

//@ ensures position == p;

//@ pure

//@ normal_behavior

//@ assignable position;

//@ ensures position == p;

//@ assert !(b & bb);

//@ assert (b | bb);

//@ assert !(b ^ bb);

//@ assert (b & bb); // FALSE

//@ assert !(b & bb);

//@ assert (b | bb);

//@ assert !(b ^ bb);

//@ assert (b & bb); // FALSE

//@ requires i < 100;

//@ ensures \result == i;

//@ refining normal_behavior

//@   assignable a;

//@   ensures a == i+10;

//@ requires i < 100;

//@ ensures \result == i;

//@ refining normal_behavior

//@   assignable a;

//@   ensures a == i+10;

/*@ code_bigint_math */
//@ public invariant -CENTS_IN_DOLLAR < my_cents && my_cents < CENTS_IN_DOLLAR;

//@ public invariant !(my_cents > 0 && my_dollars < 0);

//@ public invariant !(my_cents < 0 && my_dollars > 0);

/*@ spec_public */
/*@ spec_public */
//@ requires -100 < the_cents && the_cents < 100;

//@ requires !(the_cents > 0 && the_dollars < 0);

//@ requires !(the_cents < 0 && the_dollars > 0);

//@ ensures my_dollars == the_dollars && my_cents == the_cents;

/*@ ensures \result.my_dollars * CENTS_IN_DOLLAR + \result.my_cents ==
              the_amount.my_dollars * CENTS_IN_DOLLAR + the_amount.my_cents +
              my_dollars * CENTS_IN_DOLLAR + my_cents;
   */
//@ ensures \result == my_dollars;

/*@ pure helper */
//@ ensures \result == my_cents;

/*@ pure helper */
/*@ ensures \result <==> the_other.my_dollars == my_dollars &&
                           the_other.my_cents == my_cents;
   */
/*@ pure helper */
/*@ ensures \result <==>
                 the_other.my_dollars * CENTS_IN_DOLLAR + the_other.my_cents ==
                 my_dollars * CENTS_IN_DOLLAR + my_cents;
   */
/*@ pure helper */
/*@ code_bigint_math */
//@ public invariant -CENTS_IN_DOLLAR < my_cents && my_cents < CENTS_IN_DOLLAR;

//@ public invariant !(my_cents > 0 && my_dollars < 0);

//@ public invariant !(my_cents < 0 && my_dollars > 0);

/*@ spec_public */
/*@ spec_public */
//@ requires -100 < the_cents && the_cents < 100;

//@ requires !(the_cents > 0 && the_dollars < 0);

//@ requires !(the_cents < 0 && the_dollars > 0);

//@ ensures my_dollars == the_dollars && my_cents == the_cents;

/*@ ensures \result.my_dollars * CENTS_IN_DOLLAR + \result.my_cents ==
              the_amount.my_dollars * CENTS_IN_DOLLAR + the_amount.my_cents +
              my_dollars * CENTS_IN_DOLLAR + my_cents;
   */
//@ ensures \result == my_dollars;

/*@ pure helper */
//@ ensures \result == my_cents;

/*@ pure helper */
/*@ ensures \result <==> the_other.my_dollars == my_dollars &&
                           the_other.my_cents == my_cents;
   */
/*@ pure helper */
/*@ ensures \result <==>
                 the_other.my_dollars * CENTS_IN_DOLLAR + the_other.my_cents ==
                 my_dollars * CENTS_IN_DOLLAR + my_cents;
   */
/*@ pure helper */
//@ nullable_by_default


//@ assert i == \old(i);

//@ assert bb != null;

//@ assert \fresh(bb);

//@ assert java.util.Arrays.equalArrays(bb,b);


//@ assert i == \old(i);

//@ assert bb != null;

//@ assert \fresh(bb);

//@ assert java.util.Arrays.equalArrays(bb,b);


//@ assert i == \old(i);

//@ assert bb != null;

//@ assert \fresh(bb);

//@ assert java.util.Arrays.equalArrays(bb,b);


//@ assert i == \old(i);

//@ assert bb != null;

//@ assert \fresh(bb);

//@ assert java.util.Arrays.equalArrays(bb,b);


//@ assert i == \old(i);

//@ assert bb != null;

//@ assert \fresh(bb);

//@ assert java.util.Arrays.equalArrays(bb,b);


//@ assert i == \old(i);

//@ assert bb != null;

//@ assert \fresh(bb);

//@ assert java.util.Arrays.equalArrays(bb,b);


//@ assert i == \old(i);

//@ assert bb != null;

//@ assert \fresh(bb);

//@ assert java.util.Arrays.equalArrays(bb,b);


//@ assert i == \old(i);

//@ assert bb != null;

//@ assert \fresh(bb);

//@ assert java.util.Arrays.equalArrays(bb,b);

//@ assert i == \old(i);

//@ public normal_behavior

//@   assignable     othing;

//@ nullable_by_default


//@ assert i == \old(i);

//@ assert bb != null;

//@ assert \fresh(bb);

//@ assert java.util.Arrays.equalArrays(bb,b);


//@ assert i == \old(i);

//@ assert bb != null;

//@ assert \fresh(bb);

//@ assert java.util.Arrays.equalArrays(bb,b);


//@ assert i == \old(i);

//@ assert bb != null;

//@ assert \fresh(bb);

//@ assert java.util.Arrays.equalArrays(bb,b);


//@ assert i == \old(i);

//@ assert bb != null;

//@ assert \fresh(bb);

//@ assert java.util.Arrays.equalArrays(bb,b);


//@ assert i == \old(i);

//@ assert bb != null;

//@ assert \fresh(bb);

//@ assert java.util.Arrays.equalArrays(bb,b);


//@ assert i == \old(i);

//@ assert bb != null;

//@ assert \fresh(bb);

//@ assert java.util.Arrays.equalArrays(bb,b);


//@ assert i == \old(i);

//@ assert bb != null;

//@ assert \fresh(bb);

//@ assert java.util.Arrays.equalArrays(bb,b);


//@ assert i == \old(i);

//@ assert bb != null;

//@ assert \fresh(bb);

//@ assert java.util.Arrays.equalArrays(bb,b);

//@ assert i == \old(i);

//@ public normal_behavior

//@   assignable     othing;

_by_default

//@ public normal_behavior

//@   assignable xx;

//@ spec_public

//@ private normal_behavior

//@   assignable xx;

//@ public normal_behavior

//@ pure

_by_default

//@ public normal_behavior

//@   assignable xx;

//@ spec_public

//@ private normal_behavior

//@   assignable xx;

//@ public normal_behavior

//@ pure




//@ ensures o.equals(oo);

//@ pure

/*@ non_null*/

//@ ensures o.equals(oo);

//@ pure

/*@ non_null*/



//@ ensures o != null && o.equals(oo);

//@ pure

/*@ non_null*/

//@ ensures o != null && o.equals(oo);

//@ pure

/*@ non_null*/



//@ ensures oo.equals(o);

//@ pure

/*@ non_null*/

//@ ensures oo.equals(o);

//@ pure

/*@ non_null*/



//@ ensures o.equals(oo);

//@ pure

/*@ non_null*/

//@ ensures o.equals(oo);

//@ pure

/*@ non_null*/



//@ ensures o.equals(oo);

//@ pure

/*@ non_null*/

//@ ensures o.equals(oo);

//@ pure

/*@ non_null*/



//@ ensures o.equals(oo);

//@ pure

/*@ non_null*/

//@ ensures o.equals(oo);

//@ pure

/*@ non_null*/
//@ public invariant good();

//@ pure helper

//@ also ensures \result;

//@ pure helper

//@ public invariant good();

//@ pure helper

//@ also ensures \result;

//@ pure helper

//@ ensures true;

//@ function

//@ model static public int comp(int a);

//@ ensures a == b;

//@ set a = comp(10);

//@ set c = 20;

//@ set b = comp(10);

//@ assert a == b;

//@ ensures comp(10) == comp(10);

//@ ensures true;

//@ function

//@ model static public int comp(int a);

//@ ensures a == b;

//@ set a = comp(10);

//@ set c = 20;

//@ set b = comp(10);

//@ assert a == b;

//@ ensures comp(10) == comp(10);

//@ immutable

//@ ensures true;

//@ function

//@ ensures a == b;

//@ assert a == b;

//@ ensures true;

//@ function

//@ assignable \everything;

//@ ensures acomp(10) == acomp(10);

//@ immutable

//@ ensures true;

//@ function

//@ ensures a == b;

//@ assert a == b;

//@ ensures true;

//@ function

//@ assignable \everything;

//@ ensures acomp(10) == acomp(10);

/*@ public normal_behavior
      requires 0 <= the_input;
      ensures \result == 0;
    also public exceptional_behavior
      requires the_input < 0;
      signals (IllegalArgumentException e) true;
      signals_only IllegalArgumentException;
*/
/*@ public normal_behavior
      requires 0 <= the_input;
      ensures \result == 0;
    also public exceptional_behavior
      requires the_input < 0;
      signals (IllegalArgumentException e) true;
      signals_only IllegalArgumentException;
*/
/*@   requires 0 <= the_input;
      ensures \result == 0;
    also
      requires the_input < 0;
      diverges true;
      signals (IllegalArgumentException e) true;
      signals_only IllegalArgumentException;
*/
/*@   requires 0 <= the_input;
      ensures \result == 0;
    also
      requires the_input < 0;
      diverges true;
      signals (IllegalArgumentException e) true;
      signals_only IllegalArgumentException;
*/
//@ requires the_array.length > 0;

/*@ ensures (\forall int i; 0 <= i && i < the_array.length;
               the_array[i] <= \result);
   */
/*@ ensures (\exists int i; 0 <= i && i < the_array.length;
               the_array[i] == \result);
   */
/*@ pure */
//@ assume the_array[0] >= Integer.MIN_VALUE;

//@ loop_invariant 0 <= i;

//@ loop_invariant i <= the_array.length;

//@ loop_invariant (\forall int j; 0 <= j && j < i; the_array[j] <= result);

//@ loop_invariant i > 0 ==> (\exists int j; 0 <= j && j < i; the_array[j] == result);

//@ loop_invariant i == 0 ==> result == Integer.MIN_VALUE;

//@ decreasing the_array.length - i;

//@ requires the_array.length > 0;

/*@ ensures (\forall int i; 0 <= i && i < the_array.length;
               the_array[i] <= \result);
   */
/*@ ensures (\exists int i; 0 <= i && i < the_array.length;
               the_array[i] == \result);
   */
/*@ pure */
//@ assume the_array[0] >= Integer.MIN_VALUE;

//@ loop_invariant 0 <= i;

//@ loop_invariant i <= the_array.length;

//@ loop_invariant (\forall int j; 0 <= j && j < i; the_array[j] <= result);

//@ loop_invariant i > 0 ==> (\exists int j; 0 <= j && j < i; the_array[j] == result);

//@ loop_invariant i == 0 ==> result == Integer.MIN_VALUE;

//@ decreasing the_array.length - i;

//@ requires the_array.length > 0;

/*@ ensures (\forall int i; 0 <= i && i < the_array.length;
               the_array[i] <= \result);
   */
/*@ ensures (\exists int i; 0 <= i && i < the_array.length;
               the_array[i] == \result);
   */
/*@ pure */
//@ loop_invariant 0 <= i;

//@ loop_invariant i <= the_array.length;

//@ loop_invariant (\forall int j; 0 <= j && j < i; the_array[j] <= result);

//@ loop_invariant i > 0 ==> (\exists int j; 0 <= j && j < i; the_array[j] == result);

//@ loop_invariant i == 0 ==> result == the_array[0];

//@ decreasing the_array.length - i;

//@ requires the_array.length > 0;

/*@ ensures (\forall int i; 0 <= i && i < the_array.length;
               the_array[i] <= \result);
   */
/*@ ensures (\exists int i; 0 <= i && i < the_array.length;
               the_array[i] == \result);
   */
/*@ pure */
//@ loop_invariant 0 <= i;

//@ loop_invariant i <= the_array.length;

//@ loop_invariant (\forall int j; 0 <= j && j < i; the_array[j] <= result);

//@ loop_invariant i > 0 ==> (\exists int j; 0 <= j && j < i; the_array[j] == result);

//@ loop_invariant i == 0 ==> result == the_array[0];

//@ decreasing the_array.length - i;

//@ requires the_array.length > 0;

/*@ ensures (\forall int i; 0 <= i && i < the_array.length;
               the_array[i] <= \result);
   */
/*@ ensures (\exists int i; 0 <= i && i < the_array.length;
               the_array[i] == \result);
   */
/*@ pure */
//@ assume the_array[0] >= Integer.MIN_VALUE;

//@ loop_invariant 0 <= i;

//@ loop_invariant i <= the_array.length;

//@ loop_invariant (\forall int j; 0 <= j && j < i; the_array[j] <= result);

//@ loop_invariant i > 0 ==> (\exists int j; 0 <= j && j < i; the_array[j] == result);

//@ decreasing the_array.length - i;

//@ requires the_array.length > 0;

/*@ ensures (\forall int i; 0 <= i && i < the_array.length;
               the_array[i] <= \result);
   */
/*@ ensures (\exists int i; 0 <= i && i < the_array.length;
               the_array[i] == \result);
   */
/*@ pure */
//@ assume the_array[0] >= Integer.MIN_VALUE;

//@ loop_invariant 0 <= i;

//@ loop_invariant i <= the_array.length;

//@ loop_invariant (\forall int j; 0 <= j && j < i; the_array[j] <= result);

//@ loop_invariant i > 0 ==> (\exists int j; 0 <= j && j < i; the_array[j] == result);

//@ decreasing the_array.length - i;

/*@ nullable spec_public */
/*@ nullable spec_public */
/*@ nullable spec_public */
//@ public invariant my_next != this;

//@ public invariant my_prev != this;

//@ public invariant my_next != null ==> my_next != my_prev;

//@ requires (a_next != null ==> a_next != a_prev);


//@ assignable my_value;

//@ ensures my_value == a_value;



//@ requires this != a_doubly_linked_list && (my_next != null ==> a_doubly_linked_list != my_next);

//@ assignable my_prev;

//@ ensures my_prev == a_doubly_linked_list;



//@ requires this != a_doubly_linked_list && (a_doubly_linked_list != null ==> a_doubly_linked_list != my_prev);

//@ assignable my_next;

//@ ensures my_next == a_doubly_linked_list;


//@ requires my_prev != null && my_next != null;

//@ requires my_prev != my_next.my_next;

//@ requires my_prev.my_prev != my_next;

//@ assignable my_prev.my_next, my_next.my_prev;

/*@ nullable spec_public */
/*@ nullable spec_public */
/*@ nullable spec_public */
//@ public invariant my_next != this;

//@ public invariant my_prev != this;

//@ public invariant my_next != null ==> my_next != my_prev;

//@ requires (a_next != null ==> a_next != a_prev);


//@ assignable my_value;

//@ ensures my_value == a_value;



//@ requires this != a_doubly_linked_list && (my_next != null ==> a_doubly_linked_list != my_next);

//@ assignable my_prev;

//@ ensures my_prev == a_doubly_linked_list;



//@ requires this != a_doubly_linked_list && (a_doubly_linked_list != null ==> a_doubly_linked_list != my_prev);

//@ assignable my_next;

//@ ensures my_next == a_doubly_linked_list;


//@ requires my_prev != null && my_next != null;

//@ requires my_prev != my_next.my_next;

//@ requires my_prev.my_prev != my_next;

//@ assignable my_prev.my_next, my_next.my_prev;

//@ public normal_behavior // Avoids bit arithmetic

//@   ensures \result == \bigint_math(i < 0 ? ((long)i - Integer.MIN_VALUE - Integer.MIN_VALUE) : i);

//@   ensures 0 <= \result && \result <= Integer.MAX_UNSIGNED_INT;

//@ pure helper function // FIXME - causes infeasibility if written as a function with separated ensures conjuncts

//@ public normal_behavior

//@   old long msecs = 1000 * toUnsignedLongBuggy(seconds);

//@   requires msecs < 1000000;

//@   ensures \result == msecs;

//@ pure code_java_math spec_safe_math

//@ assert t < 1000000;

//@ public normal_behavior // Avoids bit arithmetic

//@   ensures \result == \bigint_math(i < 0 ? ((long)i - Integer.MIN_VALUE - Integer.MIN_VALUE) : i);

//@   ensures 0 <= \result && \result <= Integer.MAX_UNSIGNED_INT;

//@ pure helper function // FIXME - causes infeasibility if written as a function with separated ensures conjuncts

//@ public normal_behavior

//@   old long msecs = 1000 * toUnsignedLongBuggy(seconds);

//@   requires msecs < 1000000;

//@   ensures \result == msecs;

//@ pure code_java_math spec_safe_math

//@ assert t < 1000000;

//@ public normal_behavior // Avoids bit arithmetic

//@   ensures \result == (i < 0 ? ((long)i - Integer.MIN_VALUE - Integer.MIN_VALUE) : i) && 0 <= \result && \result <= Integer.MAX_UNSIGNED_INT;

//@ pure helper function

//@ public normal_behavior

//@   old long msecs = 1000 * toUnsignedLongBuggy(seconds);

//@   requires msecs < 1000000;

//@   ensures \result == msecs;

//@ pure code_java_math spec_safe_math

//@ assert t < 1000000;

//@ public normal_behavior // Avoids bit arithmetic

//@   ensures \result == (i < 0 ? ((long)i - Integer.MIN_VALUE - Integer.MIN_VALUE) : i) && 0 <= \result && \result <= Integer.MAX_UNSIGNED_INT;

//@ pure helper function

//@ public normal_behavior

//@   old long msecs = 1000 * toUnsignedLongBuggy(seconds);

//@   requires msecs < 1000000;

//@   ensures \result == msecs;

//@ pure code_java_math spec_safe_math

//@ assert t < 1000000;

//@ requires e != null;

//@ assert e == TestEnum.EE.AA | e == TestEnum.EE.BB;

//@ assert TestEnum.EE.AA != TestEnum.EE.BB;

//@ assert \distinct(TestEnum.EE.AA, TestEnum.EE.BB, null);

//@ requires e != null;

//@ assert e == TestEnum.EE.AA | e == TestEnum.EE.BB;

//@ assert TestEnum.EE.AA != TestEnum.EE.BB;

//@ assert \distinct(TestEnum.EE.AA, TestEnum.EE.BB, null);

//@ requires cause != null;

//@ assert this != cause;

//@ requires cause != null;

//@ assert this != cause;

//@ public normal_behavior

//@   requires f != null && g != null;

//@   ensures \result != null && (\forall Integer i,r;; \ensures(\result,r,i) == (\exists Integer t;; \ensures(g,t,i) && \ensures(f,r,t)));

//@ also public normal_behavior

//@   requires i != Integer.MIN_VALUE;

//@   ensures \result != null && \result == i - 1;

//@ also public normal_behavior

//@   requires i != Integer.MAX_VALUE;

//@   ensures \result != null && \result == i + 1;

//@ also public normal_behavior

//@   requires i != Integer.MAX_VALUE;

//@   ensures \result != null && \result > i;

//@   requires k != null && k != Integer.MAX_VALUE;

//@ assert (int)h == (int)k;

//@   requires k != Integer.MAX_VALUE;

//@ assert h >= k;

//@   requires k != Integer.MAX_VALUE;

//@ assert h == k;

//@ public normal_behavior

//@   requires f != null && g != null;

//@   ensures \result != null && (\forall Integer i,r;; \ensures(\result,r,i) == (\exists Integer t;; \ensures(g,t,i) && \ensures(f,r,t)));

//@ also public normal_behavior

//@   requires i != Integer.MIN_VALUE;

//@   ensures \result != null && \result == i - 1;

//@ also public normal_behavior

//@   requires i != Integer.MAX_VALUE;

//@   ensures \result != null && \result == i + 1;

//@ also public normal_behavior

//@   requires i != Integer.MAX_VALUE;

//@   ensures \result != null && \result > i;

//@   requires k != null && k != Integer.MAX_VALUE;

//@ assert (int)h == (int)k;

//@   requires k != Integer.MAX_VALUE;

//@ assert h >= k;

//@   requires k != Integer.MAX_VALUE;

//@ assert h == k;

//@ public normal_behavior

//@   ensures \result == (i<0 ? ((long)i - Integer.MIN_VALUE - Integer.MIN_VALUE) : i);

//@   ensures 0 <= \result && \result <= 0xffff_ffffL;

//@ pure helper function

//@ model public static long cv(int i);

//@ public normal_behavior

//@   ensures \result == cv(i);

//@ pure helper

//@ ensures \result == cv(i);

//@ public normal_behavior

//@   ensures \result == (i<0 ? ((long)i - Integer.MIN_VALUE - Integer.MIN_VALUE) : i) && 0 <= \result && \result <= 0xffff_ffffL;

//@ pure helper function

//@ model public static long cv2(int i);

//@ public normal_behavior

//@   ensures \result == cv2(i);

//@ pure helper

//@ ensures \result == cv2(i);

//@ public normal_behavior

//@   ensures \result == (i<0 ? ((long)i - Integer.MIN_VALUE - Integer.MIN_VALUE) : i);

//@   ensures 0 <= \result && \result <= 0xffff_ffffL;

//@ pure helper

//@ model public static long cv3(int i);

//@ public normal_behavior

//@   ensures \result == cv3(i);

//@ pure helper

//@ ensures \result == cv3(i);

//@ public normal_behavior

//@   ensures \result == (i<0 ? ((long)i - Integer.MIN_VALUE - Integer.MIN_VALUE) : i);

//@   ensures 0 <= \result && \result <= 0xffff_ffffL;

//@ pure helper function

//@ model public static long cv(int i);

//@ public normal_behavior

//@   ensures \result == cv(i);

//@ pure helper

//@ ensures \result == cv(i);

//@ public normal_behavior

//@   ensures \result == (i<0 ? ((long)i - Integer.MIN_VALUE - Integer.MIN_VALUE) : i) && 0 <= \result && \result <= 0xffff_ffffL;

//@ pure helper function

//@ model public static long cv2(int i);

//@ public normal_behavior

//@   ensures \result == cv2(i);

//@ pure helper

//@ ensures \result == cv2(i);

//@ public normal_behavior

//@   ensures \result == (i<0 ? ((long)i - Integer.MIN_VALUE - Integer.MIN_VALUE) : i);

//@   ensures 0 <= \result && \result <= 0xffff_ffffL;

//@ pure helper

//@ model public static long cv3(int i);

//@ public normal_behavior

//@   ensures \result == cv3(i);

//@ pure helper

//@ ensures \result == cv3(i);

_by_default

//@ private normal_behavior

//@   ensures \fresh(\result);

//@ pure helper

_by_default

//@ private normal_behavior

//@   ensures \fresh(\result);

//@ pure helper

//@ public normal_behavior

//@ requires ii >= 0 && ii < arr.length;

//@ old int oldI = ii;

//@ assignable ii, arr[ii];

//@ ensures arr[oldI] == v;

//@ ensures ii == oldI + 1;

//@ assert st.count() == 5;

//@ assume arr.length == 5;

//@ loop_invariant Test.ii == \count;

//@ loop_invariant (\forall int j; j>=0 && j<\count; arr[j] == j+1);

//@ loop_modifies Test.ii, Test.arr[*];

//@ inlined_loop;

//@ assert Test.ii == st.count();

//@ assert arr[0] == 1;

//@ assert arr[4] == 5;

//@ assert (\forall int j; j>=0 && j<arr.length; arr[j] == j+1);

//@ requires ii >= 0 && ii < arr.length;

//@ old int oldI = ii;

//@ assignable ii, arr[ii];

//@ ensures arr[oldI] == v;

//@ ensures ii == oldI + 1;

//@ assert st.count() == 5;

//@ loop_invariant ii == \count;

//@ loop_invariant (\forall int j; j>=0 && j<\count; arr[j] == j+1);

//@ loop_modifies ii, arr[*];

//@ inlined_loop;

//@ show ii, st.values.length, st.count();

//@ assert ii == st.count();

//@ assert arr[0] == 1;

//@ assert arr[4] == 5;

//@ assert (\forall int j; j>=0 && j<arr.length; arr[j] == j+1);

//@ public normal_behavior

//@ requires ii >= 0 && ii < arr.length;

//@ old int oldI = ii;

//@ assignable ii, arr[ii];

//@ ensures arr[oldI] == v;

//@ ensures ii == oldI + 1;

//@ assert st.count() == 5;

//@ assume arr.length == 5;

//@ loop_invariant Test.ii == \count;

//@ loop_invariant (\forall int j; j>=0 && j<\count; arr[j] == j+1);

//@ loop_modifies Test.ii, Test.arr[*];

//@ inlined_loop;

//@ assert Test.ii == st.count();

//@ assert arr[0] == 1;

//@ assert arr[4] == 5;

//@ assert (\forall int j; j>=0 && j<arr.length; arr[j] == j+1);

//@ requires ii >= 0 && ii < arr.length;

//@ old int oldI = ii;

//@ assignable ii, arr[ii];

//@ ensures arr[oldI] == v;

//@ ensures ii == oldI + 1;

//@ assert st.count() == 5;

//@ loop_invariant ii == \count;

//@ loop_invariant (\forall int j; j>=0 && j<\count; arr[j] == j+1);

//@ loop_modifies ii, arr[*];

//@ inlined_loop;

//@ show ii, st.values.length, st.count();

//@ assert ii == st.count();

//@ assert arr[0] == 1;

//@ assert arr[4] == 5;

//@ assert (\forall int j; j>=0 && j<arr.length; arr[j] == j+1);

//@ public invariant value > 0;

//@ in value;

//@ public model int value;

//@ private represents value = my_value;

//@ requires value_1 > 0;

//@ ensures value == value_1;

//@ public invariant value > 0;

//@ in value;

//@ public model int value;

//@ private represents value = my_value;

//@ requires value_1 > 0;

//@ ensures value == value_1;

/*@ spec_public */
//@ pure

/*@ spec_public */
//@ pure

//@ public invariant value > 0;

//@ in value;

//@ public model int value;

//@ private represents value = my_value;

//@ requires value_1 > 0;

//@ ensures value == value_1;

//@ public invariant value > 0;

//@ in value;

//@ public model int value;

//@ private represents value = my_value;

//@ requires value_1 > 0;

//@ ensures value == value_1;

/*@ spec_public */
/*@ spec_public */
//@ public invariant value > 0;

//@ in value;

//@ public model int value;

//@ private represents value = my_value;

//@ requires value_1 > 0;

//@ ensures value == value_1;

//@ public invariant value > 0;

//@ in value;

//@ public model int value;

//@ private represents value = my_value;

//@ requires value_1 > 0;

//@ ensures value == value_1;

/*@ spec_public */
//@ signals_only     othing;

/*@ spec_public */
//@ signals_only     othing;

/*@ spec_public @*/
//@ requires str!=null;

//@ ensures value == str; // should this be value.equals(str)?

//@ensures \result == value; // likewise, should this be .equals?

/*@ pure @*/
/*@ spec_public @*/
//@ requires str!=null;

//@ ensures value == str; // should this be value.equals(str)?

//@ensures \result == value; // likewise, should this be .equals?

/*@ pure @*/
//@ ensures \fresh(\result);

//@ assert b == a.getConfigurationSizes(); // Error - fails because result is fresh

//@ ensures \fresh(\result);

//@ assert b == a.getConfigurationSizes(); // Error - fails because result is fresh

//@ ensures !\fresh(\result);

//@ assert b == a.getConfigurationSizes(); // Error - fails because result is fresh

//@ ensures !\fresh(\result);

//@ assert b == a.getConfigurationSizes(); // Error - fails because result is fresh



//@ pure  // FIXME - should be able to get rid of this


//@ pure  // FIXME - should be able to get rid of this




//@ public normal_behavior

//@   requires p >= 0;

//@   ensures (p&1) ==  p%2;

//@ pure

//@ requires k >= 0;

//@ requires k <= Integer.MAX_VALUE/16;

//@ assert b;

//@ requires k <= Integer.MAX_VALUE/2 && k >= -1; // The -1 just so the counterexample is always the same

//@ show k;

//@ use lemma((k+1));

//@ assert b;

//@ requires k >= 0;

//@ requires k <= Integer.MAX_VALUE/2 && k >= Integer.MIN_VALUE/2;

//@ show k;

//@ use lemma((k+1));

//@ assert b;

//@ public normal_behavior

//@   requires p >= 0;

//@   ensures (p&1) ==  p%2;

//@ pure

//@ requires k >= 0;

//@ requires k <= Integer.MAX_VALUE/16;

//@ assert b;

//@ requires k <= Integer.MAX_VALUE/2 && k >= -1; // The -1 just so the counterexample is always the same

//@ show k;

//@ use lemma((k+1));

//@ assert b;

//@ requires k >= 0;

//@ requires k <= Integer.MAX_VALUE/2 && k >= Integer.MIN_VALUE/2;

//@ show k;

//@ use lemma((k+1));

//@ assert b;

_by_default

//@ normal_behavior

//@   requires (\let int c = cc; c != 0);

//@ pure

//@ assert cc != 0;

//@ normal_behavior

//@   requires (\let int c = cc; c != 0);

//@ pure

//@ @org.jmlspecs.annotation.Options("-solver-seed=2000")

//@ assert cc != 0;

//@ nullable

//@ normal_behavior

//@   requires a != null && a.length == 10;

//@   requires (\forall int i; 0 <= i < 5; a[i+i] == 0);

//@ pure

//@ assert a[2]== 0; // OK // but fails

//@ assert a[3]== 0; // ERROR

//@ normal_behavior

//@   requires a != null && a.length == 10;

//@   requires (\forall int i; 0 <= i < 5; (\let int ii = 2*i; a[ii] == 0));

//@ pure

//@ assert a[2]== 0; // OK // forall does not work well with let

//@ assert a[3]== 0; // ERROR

//@ normal_behavior

//@   requires a != null && a.length == 10;

//@   requires (\forall int i; 0 <= i < 5; (\let int ii = i; a[ii] == 0));

//@ pure

//@ assert a[2]== 0; // OK

//@ assert a[3]== 0; // OK

//@ normal_behavior

//@   requires a != null && a.length == 10;

//@   requires (\forall \bigint i; 0 <= i < 5; (\let \bigint ii = i; a[ii] == 0));

//@ pure

//@ assert a[2]== 0; // OK

//@ assert a[3]== 0; // OK

//@ normal_behavior

//@   requires a != null && a.length == 10;

//@   requires (\forall int i; 0 <= i < 5; a[i] == 0);

//@ pure

//@ assert a[2]== 0; // OK

//@ assert a[3]== 0; // OK

//@ assert (\let \bigint i = cc+1; i == i);

//@ assert (\let \bigint i = cc+1; i-2 == cc-1);

//@ assert (\forall \bigint i; \let \bigint ii = i+i; ii == ii);

_by_default

//@ normal_behavior

//@   requires (\let int c = cc; c != 0);

//@ pure

//@ assert cc != 0;

//@ normal_behavior

//@   requires (\let int c = cc; c != 0);

//@ pure

//@ @org.jmlspecs.annotation.Options("-solver-seed=2000")

//@ assert cc != 0;

//@ nullable

//@ normal_behavior

//@   requires a != null && a.length == 10;

//@   requires (\forall int i; 0 <= i < 5; a[i+i] == 0);

//@ pure

//@ assert a[2]== 0; // OK // but fails

//@ assert a[3]== 0; // ERROR

//@ normal_behavior

//@   requires a != null && a.length == 10;

//@   requires (\forall int i; 0 <= i < 5; (\let int ii = 2*i; a[ii] == 0));

//@ pure

//@ assert a[2]== 0; // OK // forall does not work well with let

//@ assert a[3]== 0; // ERROR

//@ normal_behavior

//@   requires a != null && a.length == 10;

//@   requires (\forall int i; 0 <= i < 5; (\let int ii = i; a[ii] == 0));

//@ pure

//@ assert a[2]== 0; // OK

//@ assert a[3]== 0; // OK

//@ normal_behavior

//@   requires a != null && a.length == 10;

//@   requires (\forall \bigint i; 0 <= i < 5; (\let \bigint ii = i; a[ii] == 0));

//@ pure

//@ assert a[2]== 0; // OK

//@ assert a[3]== 0; // OK

//@ normal_behavior

//@   requires a != null && a.length == 10;

//@   requires (\forall int i; 0 <= i < 5; a[i] == 0);

//@ pure

//@ assert a[2]== 0; // OK

//@ assert a[3]== 0; // OK

//@ assert (\let \bigint i = cc+1; i == i);

//@ assert (\let \bigint i = cc+1; i-2 == cc-1);

//@ assert (\forall \bigint i; \let \bigint ii = i+i; ii == ii);

//@ requires a != null && a.length > 10;

//@ loop_invariant 5<=i && i<=8;

//@ assignable i,a[4..7];

//@ writes i,a[4..7];

//@ assert a[3] == 10;  // OK

//@ requires a != null && a.length > 10;

//@ loop_invariant 5<=i && i<=8;

//@ loop_assignable i,a[4..7];

//@ loop_writes i,a[4..7];

//@ loop_modifies i,a[4..7];

//@ assert a[3] == 10;  // OK

//@ requires a != null && a.length > 10;

//@ loop_invariant 5<=i && i<=8;

//@ assignable i,a[4..7];

//@ writes i,a[4..7];

//@ assert a[3] == 10;  // OK

//@ requires a != null && a.length > 10;

//@ loop_invariant 5<=i && i<=8;

//@ loop_assignable i,a[4..7];

//@ loop_writes i,a[4..7];

//@ loop_modifies i,a[4..7];

//@ assert a[3] == 10;  // OK

//@ requires a != null && a.length > 10;

//@ loop_invariant 5<=i && i<=8;

//@ assert a[3] == 10; // Not proved since the default loop_modifies is a[*]

//@ requires a != null && a.length > 10;

//@ loop_invariant 5<=i && i<=8;

//@ loop_modifies i,a[4..7];

//@ assert a[3] == 10;  // OK

//@ requires a != null && a.length > 10;

//@ loop_invariant 5<=i && i<=8;

//@ assert a[3] == 10; // Not proved since the default loop_modifies is a[*]

//@ requires a != null && a.length > 10;

//@ loop_invariant 5<=i && i<=8;

//@ loop_modifies i,a[4..7];

//@ assert a[3] == 10;  // OK

//@ requires     onnullelements(list.values);

//@ loop_invariant \forall \bigint k; 0 <= k < \count; list.values[k] >= 0;

//@ assert \forall \bigint k; 0 <= k < list.values.length; list.values[k] >= 0;

//@ requires     onnullelements(list);

//@ loop_invariant \forall \bigint k; 0 <= k < \count; list[k] >= 0;

//@ assert \forall \bigint k; 0 <= k < list.length; list[k] >= 0;

//@ requires     onnullelements(list.values);

//@ loop_invariant \forall \bigint k; 0 <= k < \count; list.values[k] >= 0;

//@ assert \forall \bigint k; 0 <= k < list.values.length; list.values[k] >= 0;

//@ requires     onnullelements(list);

//@ loop_invariant \forall \bigint k; 0 <= k < \count; list[k] >= 0;

//@ assert \forall \bigint k; 0 <= k < list.length; list[k] >= 0;

//@ in value;

//@ public model int value;

//@ private represents value = -rep;

//@ public invariant value >= 0;

//@ requires v >= 0;

//@ ensures value == v;

//@ pure

//@ requires this != other;

//@ modifies value;

//@ ensures value == (other.value + \old(value));

//@ ghost boolean b = (\lbl SAME this == other);

//@ assignable     othing;

//@ ensures \result.value == (other.value + value);

//@ in value;

//@ public model int value;

//@ private represents value = -rep;

//@ public invariant value >= 0;

//@ requires v >= 0;

//@ ensures value == v;

//@ pure

//@ requires this != other;

//@ modifies value;

//@ ensures value == (other.value + \old(value));

//@ ghost boolean b = (\lbl SAME this == other);

//@ assignable     othing;

//@ ensures \result.value == (other.value + value);

_by_default

//@ public model int _base;

//@ public normal_behavior ensures true; pure

//@ public normal_behavior ensures \result._base == i; pure

//@ public normal_behavior ensures \result._base == this._base + i;

//@ public normal_behavior ensures \result == _base; pure

_by_default

//@ in _base;

//@ public represents _base = value1;

//@ public normal_behavior ensures _base == i; pure

_by_default

//@ in _base;

//@ public represents _base = value2;

//@ public normal_behavior ensures _base == i; pure

_by_default

//@ public model int _base;

//@ public normal_behavior ensures true; pure

//@ public normal_behavior ensures \result._base == i; pure

//@ public normal_behavior ensures \result._base == this._base + i;

//@ public normal_behavior ensures \result == _base; pure

_by_default

//@ in _base;

//@ public represents _base = value1;

//@ public normal_behavior ensures _base == i; pure

_by_default

//@ in _base;

//@ public represents _base = value2;

//@ public normal_behavior ensures _base == i; pure

_by_default

//@ public model int _base;

//@ public normal_behavior ensures true; pure

//@ public normal_behavior ensures \result._base == i; pure

//@ public normal_behavior ensures \result._base == this._base + i;

//@ public normal_behavior ensures \result == _base; pure

_by_default

//@ in _base;

//@ public represents _base = value1;

//@ public normal_behavior ensures value1 == i; pure  // value1 here instead of _base -- what is to tell the value of _base?

_by_default

//@ in _base;

//@ public represents _base = value2;

//@ public normal_behavior ensures value2 == i; pure  // Uses value2 instead of _base here

_by_default

//@ public model int _base;

//@ public normal_behavior ensures true; pure

//@ public normal_behavior ensures \result._base == i; pure

//@ public normal_behavior ensures \result._base == this._base + i;

//@ public normal_behavior ensures \result == _base; pure

_by_default

//@ in _base;

//@ public represents _base = value1;

//@ public normal_behavior ensures value1 == i; pure  // value1 here instead of _base -- what is to tell the value of _base?

_by_default

//@ in _base;

//@ public represents _base = value2;

//@ public normal_behavior ensures value2 == i; pure  // Uses value2 instead of _base here

_by_default

//@ public model int _base;

//@ public normal_behavior ensures true; pure

//@ public normal_behavior ensures \result._base == i; pure

//@ public normal_behavior ensures \result._base == this._base + i;

//@ public normal_behavior ensures \result == _base; pure

_by_default

//@ in _base;

//@ public represents _base = value1;

//@ public normal_behavior ensures value1 == i; pure

_by_default

//@ in _base;

//@ public represents _base = value2;

//@ public normal_behavior ensures value2 == i; pure

_by_default

//@ public model int _base;

//@ public normal_behavior ensures true; pure

//@ public normal_behavior ensures \result._base == i; pure

//@ public normal_behavior ensures \result._base == this._base + i;

//@ public normal_behavior ensures \result == _base; pure

_by_default

//@ in _base;

//@ public represents _base = value1;

//@ public normal_behavior ensures value1 == i; pure

_by_default

//@ in _base;

//@ public represents _base = value2;

//@ public normal_behavior ensures value2 == i; pure

//@ public normal_behavior

//@   old int iiiii = 20;

//@   requires iiiii - 10 >= 0;

//@   {|

//@   requires b;

//@   old int jjjjj = qq(iiiii);

//@   requires a.length > 10000;

//@   assignable a[jjjjj-100];

//@   ensures \result == jjjjj - iiiii;

//@   also

//@   requires !b;

//@   old int kkkkk = qq(10+iiiii);

//@   ensures \result == iiiii - 20 + 100;

//@   |}

//@ public normal_behavior

//@   requires k < 1000;

//@   ensures \result == k + 100;

//@ pure

//@ public normal_behavior

//@   old int iiiii = 20;

//@   requires iiiii - 10 >= 0;

//@   {|

//@   requires b;

//@   old int jjjjj = qq(iiiii);

//@   requires a.length > 10000;

//@   assignable a[jjjjj-100];

//@   ensures \result == jjjjj - iiiii;

//@   also

//@   requires !b;

//@   old int kkkkk = qq(10+iiiii);

//@   ensures \result == iiiii - 20 + 100;

//@   |}

//@ public normal_behavior

//@   requires k < 1000;

//@   ensures \result == k + 100;

//@ pure

//@ assert A.m() == 1;

//@ assert B.m() == 2;

//@ assert C.m() == 3;

//@ assert k == 2;

//@ ensures \result == 1;

//@ pure spec_public

//@ public normal_behavior ensures \result == 1;

//@ pure

//@ ensures \result == 2;

//@ pure spec_public

//@ also public normal_behavior ensures \result == 2;

//@ pure

//@ ensures \result == 3;

//@ pure spec_public

//@ assert A.m() == 1;

//@ assert B.m() == 2;

//@ assert C.m() == 3;

//@ assert k == 2;

//@ ensures \result == 1;

//@ pure spec_public

//@ public normal_behavior ensures \result == 1;

//@ pure

//@ ensures \result == 2;

//@ pure spec_public

//@ also public normal_behavior ensures \result == 2;

//@ pure

//@ ensures \result == 3;

//@ pure spec_public

//@ public instance invariant charArray.owner == this;

//@ assert sb.stringLength <= sb.value.length;

/*@ nullable @*/
/*@ nullable @*/
/*@ nullable @*/
/*@ nullable @*/
/*@ nullable @*/
/*@ nullable @*/
/*@ nullable @*/
/*@ nullable @*/
/*@ nullable @*/
/*@ nullable @*/
/*@ nullable @*/
/*@ nullable @*/
/*@ nullable @*/
//@ public instance invariant charArray.owner == this;

//@ assert sb.stringLength <= sb.value.length;

/*@ nullable @*/
/*@ nullable @*/
/*@ nullable @*/
/*@ nullable @*/
/*@ nullable @*/
/*@ nullable @*/
/*@ nullable @*/
/*@ nullable @*/
/*@ nullable @*/
/*@ nullable @*/
/*@ nullable @*/
/*@ nullable @*/
/*@ nullable @*/
//@ public invariant m();

//@ ensures \result;

/*@ pure */
//@ requires m();

//@ public invariant m();

//@ ensures \result;

/*@ pure */
//@ requires m();

//@ public invariant m();

/*@ pure */
//@ requires m();

//@ public invariant m();

/*@ pure */
//@ requires m();

//@ public invariant m();

/*@ pure */
//@ requires m();

//@ public invariant m();

/*@ pure */
//@ requires m();

//@ old int nnnn = 120+4;

//@ ensures \result <= nnnn;

//@ old int nnnn = 120+4;

//@ ensures \result <= nnnn;

/*@ normal_behavior
   @ requires 0 <= x && x < a.length;
   @ requires 0 <= y && y < a.length;
   @ requires x != y;

   @ ensures 0 <= \result;
   @ ensures \result <= a.length-x && \result <= a.length-y;
   @ ensures (\forall int i; x <= i && i < x+\result; a[i] == a[y+i-x] );
   @ ensures \result == a.length-x || \result == a.length-y || a[x+\result] != a[y+\result];

   @ pure @*/
/*@ loop_modifies l;
         @ maintaining 0 <= l && l+x <= a.length && l+y <= a.length && x!=y;
         @ maintaining (\forall int z; x <= z && z < x+l; a[z] == a[y+z-x] );
         @ decreasing a.length-l;
         @*/
/*@ normal_behavior
   @ requires 0 <= x && x < a.length;
   @ requires 0 <= y && y < a.length;
   @ requires x != y;

   @ ensures 0 <= \result;
   @ ensures \result <= a.length-x && \result <= a.length-y;
   @ ensures (\forall int i; x <= i && i < x+\result; a[i] == a[y+i-x] );
   @ ensures \result == a.length-x || \result == a.length-y || a[x+\result] != a[y+\result];

   @ pure @*/
/*@ loop_modifies l;
         @ maintaining 0 <= l && l+x <= a.length && l+y <= a.length && x!=y;
         @ maintaining (\forall int z; x <= z && z < x+l; a[z] == a[y+z-x] );
         @ decreasing a.length-l;
         @*/
/*@ public normal_behaviour
      @  requires sa.a != null;
      @  requires 0 <= a && a < sa.a.length;
      @  requires 0 <= b && b < sa.a.length;
      @  requires 0 <= c && c < sa.a.length;
      @  requires sa.compare(a,b) > 0;
      @  requires sa.compare(b,c) > 0;
      @  ensures sa.compare(a,c) > 0;
      @  pure helper
      @*/
/*@ public normal_behaviour
      @  requires sa.a != null;
      @  requires k > 0;
      @  requires 0 <= a && a <= sa.a.length - k;
      @  requires 0 <= b && b < sa.a.length;
      @  requires 0 <= c && c <= sa.a.length - k;
      @  requires sa.compare(a,b) >= 0;
      @  requires sa.compare(b,c) > 0;
      @  requires (\forall int t; a <= t && t < a+k; sa.a[t] == sa.a[c+t-a]);
      @  ensures  (\forall int t; a <= t && t < a+k; sa.a[t] == sa.a[b+t-a]);
      @  ensures  (\forall int t; b <= t && t < b+k; sa.a[t] == sa.a[c+t-b]);
      @  ensures  b < sa.a.length - k;
      @  pure helper
      @*/
/*@ public normal_behaviour
      @  requires \invariant_for(sa);
      @  requires 0 <= i && i < j && j < sa.a.length;
      @  ensures sa.compare(sa.suffixes[j], sa.suffixes[i]) > 0;
      @  pure helper
      @*/
/*@ decreases j - m;
          @ assignable     othing;
          @ loop_invariant sa.compare(sa.suffixes[m], sa.suffixes[i]) > 0 && i+1 <= m && m <= j;
          @*/
/*@ public normal_behaviour
      @  requires sa.a != null;
      @  requires 0 <= i && i < sa.a.length;
      @  ensures sa.compare(i,i) == 0;
      @  pure helper
      @*/
/*@ public normal_behaviour
      @  requires \invariant_for(sa);
      @  requires 0 <= i && i < j && j < sa.a.length;
      @  requires
      @     sa.suffixes[i] + k <= sa.a.length &&  sa.suffixes[j] + k <= sa.a.length &&
      @     (\forall int t; 0 <=t && t < k; sa.a[sa.suffixes[i]+t] == sa.a[sa.suffixes[j]+t]);
      @  ensures
      @     sa.suffixes[i+1] + k <= sa.a.length &&
      @     (\forall int t; 0 <=t && t < k; sa.a[sa.suffixes[i]+t] == sa.a[sa.suffixes[i+1]+t]);
      @  ensures \result;
      @  pure helper
      @*/
/*@ public normal_behaviour
      @  requires sa.a != null;
      @  requires 0 <= a && a < sa.a.length;
      @  requires 0 <= b && b < sa.a.length;
      @  requires 0 <= c && c < sa.a.length;
      @  requires sa.compare(a,b) > 0;
      @  requires sa.compare(b,c) > 0;
      @  ensures sa.compare(a,c) > 0;
      @  pure helper
      @*/
/*@ public normal_behaviour
      @  requires sa.a != null;
      @  requires k > 0;
      @  requires 0 <= a && a <= sa.a.length - k;
      @  requires 0 <= b && b < sa.a.length;
      @  requires 0 <= c && c <= sa.a.length - k;
      @  requires sa.compare(a,b) >= 0;
      @  requires sa.compare(b,c) > 0;
      @  requires (\forall int t; a <= t && t < a+k; sa.a[t] == sa.a[c+t-a]);
      @  ensures  (\forall int t; a <= t && t < a+k; sa.a[t] == sa.a[b+t-a]);
      @  ensures  (\forall int t; b <= t && t < b+k; sa.a[t] == sa.a[c+t-b]);
      @  ensures  b < sa.a.length - k;
      @  pure helper
      @*/
/*@ public normal_behaviour
      @  requires \invariant_for(sa);
      @  requires 0 <= i && i < j && j < sa.a.length;
      @  ensures sa.compare(sa.suffixes[j], sa.suffixes[i]) > 0;
      @  pure helper
      @*/
/*@ decreases j - m;
          @ assignable     othing;
          @ loop_invariant sa.compare(sa.suffixes[m], sa.suffixes[i]) > 0 && i+1 <= m && m <= j;
          @*/
/*@ public normal_behaviour
      @  requires sa.a != null;
      @  requires 0 <= i && i < sa.a.length;
      @  ensures sa.compare(i,i) == 0;
      @  pure helper
      @*/
/*@ public normal_behaviour
      @  requires \invariant_for(sa);
      @  requires 0 <= i && i < j && j < sa.a.length;
      @  requires
      @     sa.suffixes[i] + k <= sa.a.length &&  sa.suffixes[j] + k <= sa.a.length &&
      @     (\forall int t; 0 <=t && t < k; sa.a[sa.suffixes[i]+t] == sa.a[sa.suffixes[j]+t]);
      @  ensures
      @     sa.suffixes[i+1] + k <= sa.a.length &&
      @     (\forall int t; 0 <=t && t < k; sa.a[sa.suffixes[i]+t] == sa.a[sa.suffixes[i+1]+t]);
      @  ensures \result;
      @  pure helper
      @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@ normal_behavior
     @ requires \invariant_for(sa);
     @ requires sa.a.length >= 2;
     @ ensures 0 <= s && s < sa.a.length;
     @ ensures 0 <= t && t < sa.a.length;
     @ ensures 0 <= l && l < sa.a.length;
     @ ensures s+l <= sa.a.length && t+l <= sa.a.length;
     @ ensures (\forall int j; 0 <= j && j < l; sa.a[s+j] == sa.a[t+j]);
     @ ensures s != t || l == 0;
     @ ensures !(\exists int i,k; 0 <= i && i < k && k < sa.a.length-l;
     @            (\forall int j; k <= j && j <= k+l; sa.a[j] == sa.a[j-k+i]));
     @         // there is no LRS of length l+1
     @*/
/*@ loop_modifies x,s,t,l;
         @ maintaining sa != null && \invariant_for(sa);
         @ maintaining 0 <= s && s < sa.a.length;
         @ maintaining 0 <= t && t < sa.a.length;
         @ maintaining 0 <= l && l < sa.a.length;
         @ maintaining s+l <= sa.a.length && t+l <= sa.a.length;
         @ maintaining s != t || l == 0;
         @ maintaining 0 < x && x <= sa.a.length;
         @ maintaining (\forall int j; s <= j && j <s+l; sa.a[j] == sa.a[j-s+t]);
         @ maintaining !(\exists int w; 0 < w && w < x
         @               && sa.suffixes[w-1] < sa.a.length-l
         @               && sa.suffixes[w]   < sa.a.length-l;
         @               (\forall int j; sa.suffixes[w-1]+0 <= j && j <= sa.suffixes[w-1]+l;
         @                sa.a[j] == sa.a[sa.suffixes[w]+j-sa.suffixes[w-1]]));
         @ decreasing sa.a.length-x;
         @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@ normal_behavior
     @ requires \invariant_for(sa);
     @ requires sa.a.length >= 2;
     @ ensures 0 <= s && s < sa.a.length;
     @ ensures 0 <= t && t < sa.a.length;
     @ ensures 0 <= l && l < sa.a.length;
     @ ensures s+l <= sa.a.length && t+l <= sa.a.length;
     @ ensures (\forall int j; 0 <= j && j < l; sa.a[s+j] == sa.a[t+j]);
     @ ensures s != t || l == 0;
     @ ensures !(\exists int i,k; 0 <= i && i < k && k < sa.a.length-l;
     @            (\forall int j; k <= j && j <= k+l; sa.a[j] == sa.a[j-k+i]));
     @         // there is no LRS of length l+1
     @*/
/*@ loop_modifies x,s,t,l;
         @ maintaining sa != null && \invariant_for(sa);
         @ maintaining 0 <= s && s < sa.a.length;
         @ maintaining 0 <= t && t < sa.a.length;
         @ maintaining 0 <= l && l < sa.a.length;
         @ maintaining s+l <= sa.a.length && t+l <= sa.a.length;
         @ maintaining s != t || l == 0;
         @ maintaining 0 < x && x <= sa.a.length;
         @ maintaining (\forall int j; s <= j && j <s+l; sa.a[j] == sa.a[j-s+t]);
         @ maintaining !(\exists int w; 0 < w && w < x
         @               && sa.suffixes[w-1] < sa.a.length-l
         @               && sa.suffixes[w]   < sa.a.length-l;
         @               (\forall int j; sa.suffixes[w-1]+0 <= j && j <= sa.suffixes[w-1]+l;
         @                sa.a[j] == sa.a[sa.suffixes[w]+j-sa.suffixes[w-1]]));
         @ decreasing sa.a.length-x;
         @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@ public invariant
      @           (\forall int i; 0 <= i && i < a.length;
      @           (\exists int j; 0 <= j && j < a.length; suffixes[j]==i));
      @           // suffixes is a permutation on indices
      @ public invariant
      @         (\forall int i; 0 <= i && i < a.length;
      @                  0 <= suffixes[i] && suffixes[i] < a.length);
      @           // indices are in range (follows from above, cannot hurt)
      @ public invariant (\forall int i; 0 < i && i < a.length;
      @                        suffixes[i-1] != suffixes[i]);
      @           // indices are unique (follows from above, cannot hurt)
      @ public invariant (\forall int i; 0 < i && i < a.length;
      @                        compare(suffixes[i],suffixes[i-1]) > 0);
      @           // suffixes is ordered lexicographically
      @ public invariant a.length == suffixes.length;
      @*/
/*@ public normal_behavior
      @ ensures this.a == a;
      @*/
/*@ pure @*/
/*@ loop_modifies suffixes[*];
          @ maintaining 0 <= i && i <= a.length;
          @ maintaining (\forall int j; 0 <= j && j < i; suffixes[j] == j);
          @ decreasing a.length-i;
          @*/
/*@ normal_behavior
      @ requires a != null;
      @ requires 0 <= x && x < a.length;
      @ requires 0 <= y && y < a.length;
      @ ensures \result <  0 <==>
      @           (\exists int j; x <= j && j < a.length-y+x;
      @               ((j < a.length && a[j] < a[y+j-x] ) || j == a.length)
      @               && (\forall int k; x <= k && k < j; a[k] == a[k-x+y]));
      @ ensures \result == 0 <==> x == y;
      @ ensures \result >  0 <==>
      @           (\exists int j; x <= j && j < a.length;
      @               ((j < a.length-y+x && a[j] > a[y+j-x] ) || j == a.length-y+x)
      @               && (\forall int k; x <= k && k < j; a[k] == a[k-x+y]));
      @ ensures \result == -compare(y,x);
      @ accessible a, a[*];
      @ spec_public pure helper
      @*/
//@ private normal_behavior

//@   assignable data[*];

//@   ensures (\forall int k; 0 < k && k < data.length; data[k] >= data[k-1]);

/*@ helper @*/
/*@ loop_writes data[*];
              @ maintaining 0 <= l && l <= k;
              @ maintaining (\forall int i; l < i && i <= k;
              @                 compare(data[i],data[i-1]) > 0);
              @ maintaining (\forall int i; 0 < i && i < data.length
              @                 && !( l < i && i <= k);
              @                 data[i] == \old(data[i]));
              @ decreasing l;
              @*/
/*@ private normal_behavior
      @ requires 0 < x && x < data.length;
      @ ensures data[x] == \old(data[x-1]);
      @ ensures data[x-1] == \old(data[x]);
      @ assignable data[x], data[x-1];
      @*/
/*@ helper @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@ public invariant
      @           (\forall int i; 0 <= i && i < a.length;
      @           (\exists int j; 0 <= j && j < a.length; suffixes[j]==i));
      @           // suffixes is a permutation on indices
      @ public invariant
      @         (\forall int i; 0 <= i && i < a.length;
      @                  0 <= suffixes[i] && suffixes[i] < a.length);
      @           // indices are in range (follows from above, cannot hurt)
      @ public invariant (\forall int i; 0 < i && i < a.length;
      @                        suffixes[i-1] != suffixes[i]);
      @           // indices are unique (follows from above, cannot hurt)
      @ public invariant (\forall int i; 0 < i && i < a.length;
      @                        compare(suffixes[i],suffixes[i-1]) > 0);
      @           // suffixes is ordered lexicographically
      @ public invariant a.length == suffixes.length;
      @*/
/*@ public normal_behavior
      @ ensures this.a == a;
      @*/
/*@ pure @*/
/*@ loop_modifies suffixes[*];
          @ maintaining 0 <= i && i <= a.length;
          @ maintaining (\forall int j; 0 <= j && j < i; suffixes[j] == j);
          @ decreasing a.length-i;
          @*/
/*@ normal_behavior
      @ requires a != null;
      @ requires 0 <= x && x < a.length;
      @ requires 0 <= y && y < a.length;
      @ ensures \result <  0 <==>
      @           (\exists int j; x <= j && j < a.length-y+x;
      @               ((j < a.length && a[j] < a[y+j-x] ) || j == a.length)
      @               && (\forall int k; x <= k && k < j; a[k] == a[k-x+y]));
      @ ensures \result == 0 <==> x == y;
      @ ensures \result >  0 <==>
      @           (\exists int j; x <= j && j < a.length;
      @               ((j < a.length-y+x && a[j] > a[y+j-x] ) || j == a.length-y+x)
      @               && (\forall int k; x <= k && k < j; a[k] == a[k-x+y]));
      @ ensures \result == -compare(y,x);
      @ accessible a, a[*];
      @ spec_public pure helper
      @*/
//@ private normal_behavior

//@   assignable data[*];

//@   ensures (\forall int k; 0 < k && k < data.length; data[k] >= data[k-1]);

/*@ helper @*/
/*@ loop_writes data[*];
              @ maintaining 0 <= l && l <= k;
              @ maintaining (\forall int i; l < i && i <= k;
              @                 compare(data[i],data[i-1]) > 0);
              @ maintaining (\forall int i; 0 < i && i < data.length
              @                 && !( l < i && i <= k);
              @                 data[i] == \old(data[i]));
              @ decreasing l;
              @*/
/*@ private normal_behavior
      @ requires 0 < x && x < data.length;
      @ ensures data[x] == \old(data[x-1]);
      @ ensures data[x-1] == \old(data[x]);
      @ assignable data[x], data[x-1];
      @*/
/*@ helper @*/
/*@ normal_behavior
   @ requires 0 <= x && x < a.length;
   @ requires 0 <= y && y < a.length;
   @ requires x != y;

   @ ensures 0 <= \result;
   @ ensures \result <= a.length-x && \result <= a.length-y;
   @ ensures (\forall int i; x <= i && i < x+\result; a[i] == a[y+i-x] );
   @ ensures \result == a.length-x || \result == a.length-y || a[x+\result] != a[y+\result];

   @ pure @*/
/*@ loop_modifies l;
         @ maintaining 0 <= l && l+x <= a.length && l+y <= a.length && x!=y;
         @ maintaining (\forall int z; x <= z && z < x+l; a[z] == a[y+z-x] );
         @ decreasing a.length-l;
         @*/
/*@ normal_behavior
   @ requires 0 <= x && x < a.length;
   @ requires 0 <= y && y < a.length;
   @ requires x != y;

   @ ensures 0 <= \result;
   @ ensures \result <= a.length-x && \result <= a.length-y;
   @ ensures (\forall int i; x <= i && i < x+\result; a[i] == a[y+i-x] );
   @ ensures \result == a.length-x || \result == a.length-y || a[x+\result] != a[y+\result];

   @ pure @*/
/*@ loop_modifies l;
         @ maintaining 0 <= l && l+x <= a.length && l+y <= a.length && x!=y;
         @ maintaining (\forall int z; x <= z && z < x+l; a[z] == a[y+z-x] );
         @ decreasing a.length-l;
         @*/
/*@ public normal_behaviour
      @  requires sa.a != null;
      @  requires 0 <= a && a < sa.a.length;
      @  requires 0 <= b && b < sa.a.length;
      @  requires 0 <= c && c < sa.a.length;
      @  requires sa.compare(a,b) > 0;
      @  requires sa.compare(b,c) > 0;
      @  ensures sa.compare(a,c) > 0;
      @  pure helper
      @*/
//@ skipesc // Times out

/*@ public normal_behaviour
      @  requires sa.a != null;
      @  requires k > 0;
      @  requires 0 <= a && a <= sa.a.length - k;
      @  requires 0 <= b && b < sa.a.length;
      @  requires 0 <= c && c <= sa.a.length - k;
      @  requires sa.compare(a,b) >= 0;
      @  requires sa.compare(b,c) > 0;
      @  requires (\forall int t; a <= t && t < a+k; sa.a[t] == sa.a[c+t-a]);
      @  ensures  (\forall int t; a <= t && t < a+k; sa.a[t] == sa.a[b+t-a]);
      @  ensures  (\forall int t; b <= t && t < b+k; sa.a[t] == sa.a[c+t-b]);
      @  ensures  b < sa.a.length - k;
      @  pure helper
      @*/
//@ skipesc // Time out

/*@ public normal_behaviour
      @  requires \invariant_for(sa);
      @  requires 0 <= i && i < j && j < sa.a.length;
      @  ensures sa.compare(sa.suffixes[j], sa.suffixes[i]) > 0;
      @  pure helper
      @*/
//@ skipesc // Various proof failures

/*@ decreases j - m;
          @ loop_modifies     othing;
          @ loop_invariant sa.compare(sa.suffixes[m], sa.suffixes[i]) > 0 && i+1 <= m && m <= j;
          @*/
/*@ public normal_behaviour
      @  requires sa.a != null;
      @  requires 0 <= i && i < sa.a.length;
      @  ensures sa.compare(i,i) == 0;
      @  pure helper
      @*/
/*@ public normal_behaviour
      @  requires \invariant_for(sa);
      @  requires 0 <= i && i < j && j < sa.a.length;
      @  requires
      @     sa.suffixes[i] + k <= sa.a.length &&  sa.suffixes[j] + k <= sa.a.length &&
      @     (\forall int t; 0 <=t && t < k; sa.a[sa.suffixes[i]+t] == sa.a[sa.suffixes[j]+t]);
      @  ensures
      @     sa.suffixes[i+1] + k <= sa.a.length &&
      @     (\forall int t; 0 <=t && t < k; sa.a[sa.suffixes[i]+t] == sa.a[sa.suffixes[i+1]+t]);
      @  ensures \result;
      @  pure helper
      @*/
//@ skipesc // Time out

/*@ public normal_behaviour
      @  requires sa.a != null;
      @  requires 0 <= a && a < sa.a.length;
      @  requires 0 <= b && b < sa.a.length;
      @  requires 0 <= c && c < sa.a.length;
      @  requires sa.compare(a,b) > 0;
      @  requires sa.compare(b,c) > 0;
      @  ensures sa.compare(a,c) > 0;
      @  pure helper
      @*/
//@ skipesc // Times out

/*@ public normal_behaviour
      @  requires sa.a != null;
      @  requires k > 0;
      @  requires 0 <= a && a <= sa.a.length - k;
      @  requires 0 <= b && b < sa.a.length;
      @  requires 0 <= c && c <= sa.a.length - k;
      @  requires sa.compare(a,b) >= 0;
      @  requires sa.compare(b,c) > 0;
      @  requires (\forall int t; a <= t && t < a+k; sa.a[t] == sa.a[c+t-a]);
      @  ensures  (\forall int t; a <= t && t < a+k; sa.a[t] == sa.a[b+t-a]);
      @  ensures  (\forall int t; b <= t && t < b+k; sa.a[t] == sa.a[c+t-b]);
      @  ensures  b < sa.a.length - k;
      @  pure helper
      @*/
//@ skipesc // Time out

/*@ public normal_behaviour
      @  requires \invariant_for(sa);
      @  requires 0 <= i && i < j && j < sa.a.length;
      @  ensures sa.compare(sa.suffixes[j], sa.suffixes[i]) > 0;
      @  pure helper
      @*/
//@ skipesc // Various proof failures

/*@ decreases j - m;
          @ loop_modifies     othing;
          @ loop_invariant sa.compare(sa.suffixes[m], sa.suffixes[i]) > 0 && i+1 <= m && m <= j;
          @*/
/*@ public normal_behaviour
      @  requires sa.a != null;
      @  requires 0 <= i && i < sa.a.length;
      @  ensures sa.compare(i,i) == 0;
      @  pure helper
      @*/
/*@ public normal_behaviour
      @  requires \invariant_for(sa);
      @  requires 0 <= i && i < j && j < sa.a.length;
      @  requires
      @     sa.suffixes[i] + k <= sa.a.length &&  sa.suffixes[j] + k <= sa.a.length &&
      @     (\forall int t; 0 <=t && t < k; sa.a[sa.suffixes[i]+t] == sa.a[sa.suffixes[j]+t]);
      @  ensures
      @     sa.suffixes[i+1] + k <= sa.a.length &&
      @     (\forall int t; 0 <=t && t < k; sa.a[sa.suffixes[i]+t] == sa.a[sa.suffixes[i+1]+t]);
      @  ensures \result;
      @  pure helper
      @*/
//@ skipesc // Time out

/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
//@ ensures sa == arr;

//@ skipesc // Proof failures

/*@ normal_behavior
     @ requires \invariant_for(sa);
     @ requires sa.a.length >= 2;
     @ ensures 0 <= s && s < sa.a.length;
     @ ensures 0 <= t && t < sa.a.length;
     @ ensures 0 <= l && l < sa.a.length;
     @ ensures s+l <= sa.a.length && t+l <= sa.a.length;
     @ ensures (\forall int j; 0 <= j && j < l; sa.a[s+j] == sa.a[t+j]);
     @ ensures s != t || l == 0;
     @ ensures !(\exists int i,k; 0 <= i && i < k && k < sa.a.length-l;
     @            (\forall int j; k <= j && j <= k+l; sa.a[j] == sa.a[j-k+i]));
     @         // there is no LRS of length l+1
     @*/
//@ skipesc // Time out

/*@ loop_modifies x,s,t,l;
         @ maintaining sa != null && \invariant_for(sa);
         @ maintaining 0 <= s && s < sa.a.length;
         @ maintaining 0 <= t && t < sa.a.length;
         @ maintaining 0 <= l && l < sa.a.length;
         @ maintaining s+l <= sa.a.length && t+l <= sa.a.length;
         @ maintaining s != t || l == 0;
         @ maintaining 0 < x && x <= sa.a.length;
         @ maintaining (\forall int j; s <= j && j <s+l; sa.a[j] == sa.a[j-s+t]);
         @ maintaining !(\exists int w; 0 < w && w < x
         @               && sa.suffixes[w-1] < sa.a.length-l
         @               && sa.suffixes[w]   < sa.a.length-l;
         @               (\forall int j; sa.suffixes[w-1]+0 <= j && j <= sa.suffixes[w-1]+l;
         @                sa.a[j] == sa.a[sa.suffixes[w]+j-sa.suffixes[w-1]]));
         @ decreasing sa.a.length-x;
         @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
//@ ensures sa == arr;

//@ skipesc // Proof failures

/*@ normal_behavior
     @ requires \invariant_for(sa);
     @ requires sa.a.length >= 2;
     @ ensures 0 <= s && s < sa.a.length;
     @ ensures 0 <= t && t < sa.a.length;
     @ ensures 0 <= l && l < sa.a.length;
     @ ensures s+l <= sa.a.length && t+l <= sa.a.length;
     @ ensures (\forall int j; 0 <= j && j < l; sa.a[s+j] == sa.a[t+j]);
     @ ensures s != t || l == 0;
     @ ensures !(\exists int i,k; 0 <= i && i < k && k < sa.a.length-l;
     @            (\forall int j; k <= j && j <= k+l; sa.a[j] == sa.a[j-k+i]));
     @         // there is no LRS of length l+1
     @*/
//@ skipesc // Time out

/*@ loop_modifies x,s,t,l;
         @ maintaining sa != null && \invariant_for(sa);
         @ maintaining 0 <= s && s < sa.a.length;
         @ maintaining 0 <= t && t < sa.a.length;
         @ maintaining 0 <= l && l < sa.a.length;
         @ maintaining s+l <= sa.a.length && t+l <= sa.a.length;
         @ maintaining s != t || l == 0;
         @ maintaining 0 < x && x <= sa.a.length;
         @ maintaining (\forall int j; s <= j && j <s+l; sa.a[j] == sa.a[j-s+t]);
         @ maintaining !(\exists int w; 0 < w && w < x
         @               && sa.suffixes[w-1] < sa.a.length-l
         @               && sa.suffixes[w]   < sa.a.length-l;
         @               (\forall int j; sa.suffixes[w-1]+0 <= j && j <= sa.suffixes[w-1]+l;
         @                sa.a[j] == sa.a[sa.suffixes[w]+j-sa.suffixes[w-1]]));
         @ decreasing sa.a.length-x;
         @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@ public invariant
      @           (\forall int i; 0 <= i && i < a.length;
      @           (\exists int j; 0 <= j && j < a.length; suffixes[j]==i));
      @           // suffixes is a permutation on indices
      @ public invariant
      @         (\forall int i; 0 <= i && i < a.length;
      @                  0 <= suffixes[i] && suffixes[i] < a.length);
      @           // indices are in range (follows from above, cannot hurt)
      @ public invariant (\forall int i; 0 < i && i < a.length;
      @                        suffixes[i-1] != suffixes[i]);
      @           // indices are unique (follows from above, cannot hurt)
      @ public invariant (\forall int i; 0 < i && i < a.length;
      @                        compare(suffixes[i],suffixes[i-1]) > 0);
      @           // suffixes is ordered lexicographically
      @ public invariant a.length == suffixes.length;
      @*/
/*@ public normal_behavior
      @ ensures this.a == a;
      @*/
//@ skipesc // Various proof failures

/*@ pure @*/
/*@ loop_modifies suffixes[*];
          @ maintaining 0 <= i && i <= a.length;
          @ maintaining (\forall int j; 0 <= j && j < i; suffixes[j] == j);
          @ decreasing a.length-i;
          @*/
/*@ normal_behavior
      @ requires a != null;
      @ requires 0 <= x && x < a.length;
      @ requires 0 <= y && y < a.length;
      @ ensures \result <  0 <==>
      @           (\exists int j; x <= j && j < a.length-y+x;
      @               ((j < a.length && a[j] < a[y+j-x] ) || j == a.length)
      @               && (\forall int k; x <= k && k < j; a[k] == a[k-x+y]));
      @ ensures \result == 0 <==> x == y;
      @ ensures \result >  0 <==>
      @           (\exists int j; x <= j && j < a.length;
      @               ((j < a.length-y+x && a[j] > a[y+j-x] ) || j == a.length-y+x)
      @               && (\forall int k; x <= k && k < j; a[k] == a[k-x+y]));
      @ // ensures \result == -compare(y,x);
      @ accessible a, a[*];
      @ spec_public pure helper
      @*/
//@ skipesc // Various proof failures

//@ private normal_behavior

//@   assignable data[*];

//@   ensures (\forall int k; 0 < k && k < data.length; data[k] >= data[k-1]);

//@ skipesc // Various proof failures

/*@ helper @*/
/*@ loop_modifies data[*];
              @ maintaining 0 <= l && l <= k;
              @ maintaining (\forall int i; l < i && i <= k;
              @                 compare(data[i],data[i-1]) > 0);
              @ maintaining (\forall int i; 0 < i && i < data.length
              @                 && !( l < i && i <= k);
              @                 data[i] == \old(data[i]));
              @ decreasing l;
              @*/
/*@ private normal_behavior
      @ requires 0 < x && x < data.length;
      @ ensures data[x] == \old(data[x-1]);
      @ ensures data[x-1] == \old(data[x]);
      @ assignable data[x], data[x-1];
      @*/
/*@ helper @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@ public invariant
      @           (\forall int i; 0 <= i && i < a.length;
      @           (\exists int j; 0 <= j && j < a.length; suffixes[j]==i));
      @           // suffixes is a permutation on indices
      @ public invariant
      @         (\forall int i; 0 <= i && i < a.length;
      @                  0 <= suffixes[i] && suffixes[i] < a.length);
      @           // indices are in range (follows from above, cannot hurt)
      @ public invariant (\forall int i; 0 < i && i < a.length;
      @                        suffixes[i-1] != suffixes[i]);
      @           // indices are unique (follows from above, cannot hurt)
      @ public invariant (\forall int i; 0 < i && i < a.length;
      @                        compare(suffixes[i],suffixes[i-1]) > 0);
      @           // suffixes is ordered lexicographically
      @ public invariant a.length == suffixes.length;
      @*/
/*@ public normal_behavior
      @ ensures this.a == a;
      @*/
//@ skipesc // Various proof failures

/*@ pure @*/
/*@ loop_modifies suffixes[*];
          @ maintaining 0 <= i && i <= a.length;
          @ maintaining (\forall int j; 0 <= j && j < i; suffixes[j] == j);
          @ decreasing a.length-i;
          @*/
/*@ normal_behavior
      @ requires a != null;
      @ requires 0 <= x && x < a.length;
      @ requires 0 <= y && y < a.length;
      @ ensures \result <  0 <==>
      @           (\exists int j; x <= j && j < a.length-y+x;
      @               ((j < a.length && a[j] < a[y+j-x] ) || j == a.length)
      @               && (\forall int k; x <= k && k < j; a[k] == a[k-x+y]));
      @ ensures \result == 0 <==> x == y;
      @ ensures \result >  0 <==>
      @           (\exists int j; x <= j && j < a.length;
      @               ((j < a.length-y+x && a[j] > a[y+j-x] ) || j == a.length-y+x)
      @               && (\forall int k; x <= k && k < j; a[k] == a[k-x+y]));
      @ // ensures \result == -compare(y,x);
      @ accessible a, a[*];
      @ spec_public pure helper
      @*/
//@ skipesc // Various proof failures

//@ private normal_behavior

//@   assignable data[*];

//@   ensures (\forall int k; 0 < k && k < data.length; data[k] >= data[k-1]);

//@ skipesc // Various proof failures

/*@ helper @*/
/*@ loop_modifies data[*];
              @ maintaining 0 <= l && l <= k;
              @ maintaining (\forall int i; l < i && i <= k;
              @                 compare(data[i],data[i-1]) > 0);
              @ maintaining (\forall int i; 0 < i && i < data.length
              @                 && !( l < i && i <= k);
              @                 data[i] == \old(data[i]));
              @ decreasing l;
              @*/
/*@ private normal_behavior
      @ requires 0 < x && x < data.length;
      @ ensures data[x] == \old(data[x-1]);
      @ ensures data[x-1] == \old(data[x]);
      @ assignable data[x], data[x-1];
      @*/
/*@ helper @*/
//@ ensures a < 0 ==> \result == 1;

//@ ensures b < 0 ==> \result == 1;

//@ ensures a + b < 0 ==> \result == 1;

//@ ensures a >= 0 && b >= 0 && a+b >= 10 ==> \result == 2;

//@ ensures a < 0 ==> \result == 2;

//@ ensures b < 0 ==> \result == 2;

//@ ensures a + b < 0 ==> \result == 2;

//@ ensures a >= 0 && b >= 0 && a+b >= 10 ==> \result == 1;

//@ ensures a < 0 ==> \result == 1;

//@ ensures b < 0 ==> \result == 1;

//@ ensures a + b < 0 ==> \result == 1;

//@ ensures a >= 0 && b >= 0 && a+b >= 10 ==> \result == 2;

//@ ensures a < 0 ==> \result == 2;

//@ ensures b < 0 ==> \result == 2;

//@ ensures a + b < 0 ==> \result == 2;

//@ ensures a >= 0 && b >= 0 && a+b >= 10 ==> \result == 1;

//@ in chars;

//@ public model char[] chars;

//@ private represents chars = my_chars;

//@ ensures (\forall int i; 0 <= i && i < chars.length; chars[i] == the_chars[i]);

//@

//@ maintaining (\forall int j; 0 <= j && j < i; my_chars[j] == the_chars[j]);

//@ maintaining 0 <= i && i <= my_chars.length;

//@ decreasing my_chars.length - i;

//@ in chars;

//@ public model char[] chars;

//@ private represents chars = my_chars;

//@ ensures (\forall int i; 0 <= i && i < chars.length; chars[i] == the_chars[i]);

//@

//@ maintaining (\forall int j; 0 <= j && j < i; my_chars[j] == the_chars[j]);

//@ maintaining 0 <= i && i <= my_chars.length;

//@ decreasing my_chars.length - i;

/*@ spec_public */
//@ ensures my_chars.length == the_chars.length;

//@ ensures (\forall int i; 0 <= i && i < my_chars.length; my_chars[i] == the_chars[i]);

//@ maintaining (\forall int j; 0 <= j && j < i; my_chars[j] == the_chars[j]);

//@ maintaining 0 <= i && i <= my_chars.length;

//@ decreasing my_chars.length - i;

/*@ spec_public */
//@ ensures my_chars.length == the_chars.length;

//@ ensures (\forall int i; 0 <= i && i < my_chars.length; my_chars[i] == the_chars[i]);

//@ maintaining (\forall int j; 0 <= j && j < i; my_chars[j] == the_chars[j]);

//@ maintaining 0 <= i && i <= my_chars.length;

//@ decreasing my_chars.length - i;

/*@ spec_public nullable */
/*@ spec_public nullable */
/*@ spec_public nullable */
/*@ spec_public nullable */
//@ ensures (\forall int i; 0 <= i && i < my_chars.length; my_chars[i] == the_array[i]);


//@ ensures (\forall int i; 0 <= i && i < my_ints.length; my_ints[i] == the_array[i]);


//@ ensures my_Objects.length == the_array.length;

//@ ensures (\forall int i; 0 <= i && i < my_Objects.length; my_Objects[i] == the_array[i]);


//@ ensures my_Integers.length == the_array.length;

//@ ensures (\forall int i; 0 <= i && i < my_Integers.length; my_Integers[i] == the_array[i]);


/*@ spec_public nullable */
/*@ spec_public nullable */
/*@ spec_public nullable */
/*@ spec_public nullable */
//@ ensures (\forall int i; 0 <= i && i < my_chars.length; my_chars[i] == the_array[i]);


//@ ensures (\forall int i; 0 <= i && i < my_ints.length; my_ints[i] == the_array[i]);


//@ ensures my_Objects.length == the_array.length;

//@ ensures (\forall int i; 0 <= i && i < my_Objects.length; my_Objects[i] == the_array[i]);


//@ ensures my_Integers.length == the_array.length;

//@ ensures (\forall int i; 0 <= i && i < my_Integers.length; my_Integers[i] == the_array[i]);


/*@ spec_public */
/*@ spec_public */
/*@ spec_public */
/*@ spec_public */
//@ ensures (\forall int i; 0 <= i && i < my_chars.length; my_chars[i] == the_array[i]);


//@ ensures (\forall int i; 0 <= i && i < my_ints.length; my_ints[i] == the_array[i]);


//@ ensures my_Objects.length == the_array.length;

//@ ensures (\forall int i; 0 <= i && i < my_Objects.length; my_Objects[i] == the_array[i]);


//@ assert the_array.length >= 0;

//@ assert the_array instanceof Object[];

//@ assert my_Objects instanceof Object[];

//@ assert \elemtype(\typeof(the_array)) <: \elemtype(\typeof(my_Objects));

//@ assert 0 + the_array.length <= ((Object[])the_array).length;

//@ assert 0 + the_array.length <= ((Object[])my_Objects).length;

//@ ensures my_Integers.length == the_array.length;

//@ ensures (\forall int i; 0 <= i && i < my_Integers.length; my_Integers[i] == the_array[i]);


/*@ spec_public */
/*@ spec_public */
/*@ spec_public */
/*@ spec_public */
//@ ensures (\forall int i; 0 <= i && i < my_chars.length; my_chars[i] == the_array[i]);


//@ ensures (\forall int i; 0 <= i && i < my_ints.length; my_ints[i] == the_array[i]);


//@ ensures my_Objects.length == the_array.length;

//@ ensures (\forall int i; 0 <= i && i < my_Objects.length; my_Objects[i] == the_array[i]);


//@ assert the_array.length >= 0;

//@ assert the_array instanceof Object[];

//@ assert my_Objects instanceof Object[];

//@ assert \elemtype(\typeof(the_array)) <: \elemtype(\typeof(my_Objects));

//@ assert 0 + the_array.length <= ((Object[])the_array).length;

//@ assert 0 + the_array.length <= ((Object[])my_Objects).length;

//@ ensures my_Integers.length == the_array.length;

//@ ensures (\forall int i; 0 <= i && i < my_Integers.length; my_Integers[i] == the_array[i]);


//@ public normal_behavior

//@   ensures \result == "ABC".equals(s);

//@ pure

//@ public normal_behavior

//@   ensures "ABC".equals(s) ==> \result == 1;

//@   ensures "ABD".equals(s) ==> \result == 2;

//@   ensures "DEF".equals(s) ==> \result == 3;

//@   ensures !("ABC".equals(s)|"ABD".equals(s)|"DEF".equals(s)) ==> \result == -1;

//@ pure

//@ public normal_behavior

//@   ensures \result == "ABC".equals(s);

//@ pure

//@ public normal_behavior

//@   ensures "ABC".equals(s) ==> \result == 1;

//@   ensures "ABD".equals(s) ==> \result == 2;

//@   ensures "DEF".equals(s) ==> \result == 3;

//@   ensures !("ABC".equals(s)|"ABD".equals(s)|"DEF".equals(s)) ==> \result == -1;

//@ pure

//@ requires k < 0;

//@ ensures \result == 0;

//@ also

//@ requires true;

//@ requires k >= 0;

//@ ensures \result != 0;

//@ requires k < 0;

//@ ensures \result == 0;

//@ also

//@ requires true;

//@ requires k >= 0;

//@ ensures \result != 0;

//@ loop_invariant 0 <= i && i <= 10;

//@ loop_invariant i == j;

//@ decreases 10-i;

//@ loop_invariant 0 <= i && i <= 10;

//@ loop_invariant i == j;

//@ loop_invariant i == \count;

//@ decreases 9-i;

//@ loop_invariant 0 <= i && i <= 10;

//@ loop_invariant i == j;

//@ decreases 8-i;

//@ loop_invariant 0 <= i && i <= 10;

//@ loop_invariant i == j;

//@ decreases 10-i;

//@ loop_invariant 0 <= i && i <= 10;

//@ loop_invariant i == j;

//@ loop_invariant i == \count;

//@ decreases 9-i;

//@ loop_invariant 0 <= i && i <= 10;

//@ loop_invariant i == j;

//@ decreases 8-i;

//@ ensures \result == 41;

//@ requires true;

//@ ensures \result != 0;

//@ ensures \result == 41;

//@ requires true;

//@ ensures \result != 0;

//@ requires true;

//@ ensures \result != 0;

//@ assert \typeof(o) == \type(Object);

//@ requires true;

//@ ensures \result != 0;

//@ assert \typeof(o) == \type(Object);

//@ requires true;

//@ assignable k;

//@ signals (Exception e) false;

//@ requires true;

//@ assignable k;

//@ ensures k == 2;

//@ signals (Exception e) k == 1;

//@ requires true;

//@ assignable k;

//@ ensures k == 2;

//@ signals (Exception e) k == 1;

//@ requires true;

//@ assignable k;

//@ signals (Exception e) false;

//@ requires true;

//@ assignable k;

//@ ensures k == 2;

//@ signals (Exception e) k == 1;

//@ requires true;

//@ assignable k;

//@ ensures k == 2;

//@ signals (Exception e) k == 1;

//@ assert i == 0 &&     onnullelements(a);

//@ assert     ot_modified(i);

//@ assert i == 4 &&     ot_modified(i);

//@ assert i == 0 &&     onnullelements(a);

//@ assert     ot_modified(i);

//@ assert i == 4 &&     ot_modified(i);

//@ loop_invariant j == i && 0 <= i && i <= k;

//@ assert j == k;

//@ loop_invariant j == i && 0 <= i && i <= k;

//@ assert j == k;

//@ loop_invariant j == i && 0 <= i && i <= k;

//@ assert false;

//@ assert j == k;

//@ loop_invariant j == i && 0 <= i && i <= k;

//@ decreases j;

//@ assert j == k;

//@ loop_invariant j == i && 0 <= i && i <= k;

//@ decreases i-j;

//@ assert j == k;

//@ loop_invariant j == i && 0 <= i && i <= k;

//@ decreases k-j-1;

//@ assert j == k;

//@ loop_invariant j == i && 0 <= i && i <= k;

//@ decreases k-j-2;

//@ assert j == k;

//@ loop_invariant j == 2*i && 0 <= i && i <= k;

//@ assert j == k+k;

//@ loop_invariant j == 2*i && 0 <= i && i <= k;

//@ assert j == k+k;

//@ loop_invariant j == 2*i && 0 <= i && i <= k;

//@ assert j == k+k;

//@ loop_invariant j == 2*i && 0 <= i && i < k;

//@ decreases k-i;

//@ assert j == k+k;

//@ loop_invariant j == 2*i && 0 <= i && i < k;

//@ assert j == k+k;

//@ loop_invariant j == 2*i && 0 <= i && i < k;

//@ assert j == k+k;

//@ loop_invariant j == \count && 0 <= \count && \count <= a.length;

//@ assert j == a.length;

//@ loop_invariant j == 0 && 0 <= \count && \count <= a.length;

//@ assert j == a.length;

//@ loop_invariant j == \count && 0 <= \count && \count <= a.length;

//@ loop_invariant j == \count && 0 <= \count && \count <= a.length;

//@ decreases a.length - j;

//@ assert j == a.length;

//@ loop_invariant j == \count && 0 <= \count && \count <= a.length;

//@ decreases j;

//@ assert j == a.length;

//@ loop_invariant j == \count && 0 <= \count && \count <= a.length;

//@ decreases -j;

//@ assert j == a.length;

//@ loop_invariant j == i && 0 <= i && i <= k;

//@ assert j == k;

//@ loop_invariant j == i && 0 <= i && i <= k;

//@ assert j == k;

//@ loop_invariant j == i && 0 <= i && i <= k;

//@ assert false;

//@ assert j == k;

//@ loop_invariant j == i && 0 <= i && i <= k;

//@ decreases j;

//@ assert j == k;

//@ loop_invariant j == i && 0 <= i && i <= k;

//@ decreases i-j;

//@ assert j == k;

//@ loop_invariant j == i && 0 <= i && i <= k;

//@ decreases k-j-1;

//@ assert j == k;

//@ loop_invariant j == i && 0 <= i && i <= k;

//@ decreases k-j-2;

//@ assert j == k;

//@ loop_invariant j == 2*i && 0 <= i && i <= k;

//@ assert j == k+k;

//@ loop_invariant j == 2*i && 0 <= i && i <= k;

//@ assert j == k+k;

//@ loop_invariant j == 2*i && 0 <= i && i <= k;

//@ assert j == k+k;

//@ loop_invariant j == 2*i && 0 <= i && i < k;

//@ decreases k-i;

//@ assert j == k+k;

//@ loop_invariant j == 2*i && 0 <= i && i < k;

//@ assert j == k+k;

//@ loop_invariant j == 2*i && 0 <= i && i < k;

//@ assert j == k+k;

//@ loop_invariant j == \count && 0 <= \count && \count <= a.length;

//@ assert j == a.length;

//@ loop_invariant j == 0 && 0 <= \count && \count <= a.length;

//@ assert j == a.length;

//@ loop_invariant j == \count && 0 <= \count && \count <= a.length;

//@ loop_invariant j == \count && 0 <= \count && \count <= a.length;

//@ decreases a.length - j;

//@ assert j == a.length;

//@ loop_invariant j == \count && 0 <= \count && \count <= a.length;

//@ decreases j;

//@ assert j == a.length;

//@ loop_invariant j == \count && 0 <= \count && \count <= a.length;

//@ decreases -j;

//@ assert j == a.length;

//@ ensures \result == 41;

//@ requires true;

//@ ensures \result != 0;

//@ assert k != 7;

//@ assert (k == 7) ==> (k != 7);

//@ assert !((k != 7) ==> (k == 7));

//@ ghost int x = 9;

//@ set x = x + 9;

//@ debug x = 0;

//@ set x = (\lbl AAA k+1);

//@ maintaining m == 14 + z && 0 <= z && z <= 4;

//@ assume a.length > 10;

//@ ensures \result == 41;

//@ requires true;

//@ ensures \result != 0;

//@ assert k != 7;

//@ assert (k == 7) ==> (k != 7);

//@ assert !((k != 7) ==> (k == 7));

//@ ghost int x = 9;

//@ set x = x + 9;

//@ debug x = 0;

//@ set x = (\lbl AAA k+1);

//@ maintaining m == 14 + z && 0 <= z && z <= 4;

//@ assume a.length > 10;

//@ public invariant my_element_data != null;

//@ public invariant my_element_count >= 0;

//@ public invariant my_element_count <= my_element_data.length;

//@ public invariant my_capacity_increment > 0;

//@ public invariant \elemtype(\typeof(my_element_data)) == \type(Object);

/*@ spec_public */
/*@ spec_public */
/*@ spec_public */
//@ requires the_initial_capacity >= 0 && the_capacity_increment > 0;

//@ ghost Object[] nd = new_data;

//@ loop_invariant 0 <= i && i <= my_element_count && new_data == nd;

//@ decreases my_element_count - i;

//@ loop_invariant 0 <= i && i <= my_element_count;

//@ decreases i;

//@ loop_invariant the_index == i || (the_index <= i && i <= my_element_count);

//@ decreases my_element_count - i;

//@ requires the_index >= 0;

//@ public invariant my_element_data != null;

//@ public invariant my_element_count >= 0;

//@ public invariant my_element_count <= my_element_data.length;

//@ public invariant my_capacity_increment > 0;

//@ public invariant \elemtype(\typeof(my_element_data)) == \type(Object);

/*@ spec_public */
/*@ spec_public */
/*@ spec_public */
//@ requires the_initial_capacity >= 0 && the_capacity_increment > 0;

//@ ghost Object[] nd = new_data;

//@ loop_invariant 0 <= i && i <= my_element_count && new_data == nd;

//@ decreases my_element_count - i;

//@ loop_invariant 0 <= i && i <= my_element_count;

//@ decreases i;

//@ loop_invariant the_index == i || (the_index <= i && i <= my_element_count);

//@ decreases my_element_count - i;

//@ requires the_index >= 0;

//@ requires i == 0;

//@ signals (RuntimeException) false; // SHOULD FAIL

//@ reachable; // ERROR

//@ requires i == 0;

//@ signals (RuntimeException) false;

//@ reachable;

//@ requires i == 0;

//@ signals (RuntimeException) false;

//@ reachable;

//@ requires i == 0;

//@ signals (RuntimeException) false;

//@ reachable;

//@ requires i == 0;

//@ signals (RuntimeException) false;

//@ reachable;

//@ requires i == 0;

//@ signals (RuntimeException) false; // SHOULD FAIL

//@ reachable; // ERROR

//@ requires i == 0;

//@ signals (RuntimeException) false;

//@ reachable;

//@ requires i == 0;

//@ signals (RuntimeException) false;

//@ reachable;

//@ requires i == 0;

//@ signals (RuntimeException) false;

//@ reachable;

//@ requires i == 0;

//@ signals (RuntimeException) false;

//@ reachable;

//@ requires n >= 0 && n <= 20;

//@ assert fact == spec_factorial(n);

//@ assert spec_factorial(0) == 1;

//@ maintaining c >= 1 && c <= n+1;

//@ maintaining fact > 0;

//@ maintaining fact <= Long.MAX_VALUE;

//@ maintaining spec_factorial(c - 1) == fact;

//@ decreases n - c;

//@ assert c <= n;

//@ assume fact*c <= Long.MAX_VALUE;

//@ assert c == n+1;

//@ assert spec_factorial(c - 1) == fact;

/*@ requires n > 0 && n <= 20;
            ensures 0 <= \result && \result <= Long.MAX_VALUE;
            ensures \result == n * spec_factorial(n-1);
           also
            requires n == 0;
            ensures \result == 1;
        public static model function pure long spec_factorial(int n){
	    if(n == 0) {
		 return 1;
	    }
	    else {
		//@ assert n > 0 && n <= 20;
		//@ assume n * spec_factorial(n-1) <= Long.MAX_VALUE;
		return n * spec_factorial(n-1);
	    }

        }@*/
//@ requires n >= 0 && n <= 20;

//@ assert fact == spec_factorial(n);

//@ assert spec_factorial(0) == 1;

//@ maintaining c >= 1 && c <= n+1;

//@ maintaining fact > 0;

//@ maintaining fact <= Long.MAX_VALUE;

//@ maintaining spec_factorial(c - 1) == fact;

//@ decreases n - c;

//@ assert c <= n;

//@ assume fact*c <= Long.MAX_VALUE;

//@ assert c == n+1;

//@ assert spec_factorial(c - 1) == fact;

/*@ requires n > 0 && n <= 20;
            ensures 0 <= \result && \result <= Long.MAX_VALUE;
            ensures \result == n * spec_factorial(n-1);
           also
            requires n == 0;
            ensures \result == 1;
        public static model function pure long spec_factorial(int n){
	    if(n == 0) {
		 return 1;
	    }
	    else {
		//@ assert n > 0 && n <= 20;
		//@ assume n * spec_factorial(n-1) <= Long.MAX_VALUE;
		return n * spec_factorial(n-1);
	    }

        }@*/
//@ requires n >= 0 && n <= 19;

//@ ensures \result == spec_factorial(n);

//@ assert fact == spec_factorial(n);

//@ assert spec_factorial(0) == 1;

//@ maintaining c >= 1 && c <= n+1;

//@ maintaining fact > 0;

//@ maintaining fact <= Long.MAX_VALUE;

//@ maintaining spec_factorial(c - 1) == fact;

//@ loop_writes c, fact;

//@ decreases n - c;

//@ assert spec_factorial(c-1) == fact;

//@ assert c <= n;

//@ assume fact*c <= Long.MAX_VALUE;

//@ assert spec_factorial(c) == c * spec_factorial(c-1);

//@ assert spec_factorial(c) == fact;

//@ assert c == n+1;

//@ assert spec_factorial(c - 1) == fact;

/*@ requires n > 0 && n <= 20;
        ensures 0 <= \result && \result <= Long.MAX_VALUE;
        ensures \result == n * spec_factorial(n-1);
     also
        requires n == 0;
        ensures \result == 1;
     public static model function pure long spec_factorial(int n){
        if (n == 0) {
            return 1;
        } else {
            //@ assert n > 0 && n <= 20;
            //@ assume n * spec_factorial(n-1) <= Long.MAX_VALUE;
            return n * spec_factorial(n-1);
        }
    }
    @*/
//@ requires n >= 0 && n <= 19;

//@ ensures \result == spec_factorial(n);

//@ assert fact == spec_factorial(n);

//@ assert spec_factorial(0) == 1;

//@ maintaining c >= 1 && c <= n+1;

//@ maintaining fact > 0;

//@ maintaining fact <= Long.MAX_VALUE;

//@ maintaining spec_factorial(c - 1) == fact;

//@ loop_writes c, fact;

//@ decreases n - c;

//@ assert spec_factorial(c-1) == fact;

//@ assert c <= n;

//@ assume fact*c <= Long.MAX_VALUE;

//@ assert spec_factorial(c) == c * spec_factorial(c-1);

//@ assert spec_factorial(c) == fact;

//@ assert c == n+1;

//@ assert spec_factorial(c - 1) == fact;

/*@ requires n > 0 && n <= 20;
        ensures 0 <= \result && \result <= Long.MAX_VALUE;
        ensures \result == n * spec_factorial(n-1);
     also
        requires n == 0;
        ensures \result == 1;
     public static model function pure long spec_factorial(int n){
        if (n == 0) {
            return 1;
        } else {
            //@ assert n > 0 && n <= 20;
            //@ assume n * spec_factorial(n-1) <= Long.MAX_VALUE;
            return n * spec_factorial(n-1);
        }
    }
    @*/
//@ requires i >= 0;

//@ also feasible_behavior

//@   requires i == 12;

//@ reachable;

//@ requires i >= 0;

//@ also feasible_behavior

//@   requires i == 12 || i == 2;

//@ reachable;

//@ requires i >= 0;

//@ also feasible_behavior

//@   requires i == 12 || i == -2;

//@ reachable;

//@ requires i >= 0;

//@ also feasible_behavior

//@   requires i == 12;

//@ reachable;

//@ requires i >= 0;

//@ also feasible_behavior

//@   requires i == 12 || i == 2;

//@ reachable;

//@ requires i >= 0;

//@ also feasible_behavior

//@   requires i == 12 || i == -2;

//@ reachable;

//@ invariant a >= 0;

//@ requires a < 0;

//@ invariant a >= 0;

//@ requires a < 0;

//@ assert a ==1;  // result of geta() is 0 so result of getb() should be 1 and assertion should pass.

/*@  public normal_behavior
    @     ensures \result == 0;  // postcond 1  // incorrect postCondition
    @*/
/*@ pure @*/
/*@  public normal_behavior
    @     ensures \result == geta() + 1;   // postcond 2
    @*/
//@ assert a ==1;  // result of geta() is 0 so result of getb() should be 1 and assertion should pass.

/*@  public normal_behavior
    @     ensures \result == 0;  // postcond 1  // incorrect postCondition
    @*/
/*@ pure @*/
/*@  public normal_behavior
    @     ensures \result == geta() + 1;   // postcond 2
    @*/
//@ requires num >= 0;

//@ ensures \result == num;

//@ ensures \result >= 0;

//@ also

//@ requires num < 0 && num > Integer.MIN_VALUE;

//@ ensures \result == -num;

//@ ensures \result >= 0;

/*@ pure @*/
//@ requires num >= 0;

//@ ensures \result == num;

//@ ensures \result >= 0;

//@ also

//@ requires num < 0 && num > Long.MIN_VALUE;

//@ ensures \result == -num;

//@ ensures \result >= 0;

/*@ pure @*/
//@ requires num >= 0;

//@ ensures \result == num;

//@ ensures \result >= 0;

//@ also

//@ requires num < 0 && num > Integer.MIN_VALUE;

//@ ensures \result == -num;

//@ ensures \result >= 0;

/*@ pure @*/
//@ requires num >= 0;

//@ ensures \result == num;

//@ ensures \result >= 0;

//@ also

//@ requires num < 0 && num > Long.MIN_VALUE;

//@ ensures \result == -num;

//@ ensures \result >= 0;

/*@ pure @*/
//@ public normal_behavior

//@ requires d != 0;

//@ pure function

//@ requires num1 != Integer.MAX_VALUE && num1 != Integer.MAX_VALUE && num1 > Integer.MIN_VALUE + 1 && num2 > Integer.MIN_VALUE + 1;

//@ {|

//@ requires num1 != 0 && num2 != 0;

//@ old int tnum1 = Math.abs(num1);

//@ old int tnum2 = Math.abs(num2);

//@ old int greater = (tnum1 > tnum2) ? tnum1 : tnum2;

//@ old int smaller = (tnum1 > tnum2) ? tnum2 : tnum1;

//@ ensures \result > 0;

//@ ensures div(tnum1,\result) == 0;

//@ ensures div(tnum2,\result) == 0;

//@ ensures (\forall int i; i > \result && i <= smaller; div(smaller,i) == 0 ==> div(greater,i) != 0);

//@ also

//@ requires num1 == 0 && num2 != 0;

//@ requires num2 != Integer.MIN_VALUE;

//@ ensures \result == Math.abs(num2);

//@ also

//@ requires num1 != 0 && num2 == 0;

//@ requires num1 != Integer.MIN_VALUE;

//@ old int tnum1a = Math.abs(num1);  // FIXME: If we eliminnate this old clause, things work, but otherwise not.

//@ ensures \result == \lbl TNUM1a tnum1a;

//@ |}

//@ assume div(num1, gcd) == 0 && div(num2, gcd) == 0;

//@ show \old(num1), \old(num2), num1, num2, num1>num2, Integer.MAX_VALUE;

//@ maintaining gcd <= num1 && gcd <= num2;

//@ maintaining i > 0 && i <= num1 + 1 && i<= num2 + 1;

//@ maintaining 0 < gcd && gcd <= i;

//@ maintaining div(num1, gcd) == 0 && div(num2, gcd) == 0;

//@ maintaining (\forall int j; 1 <= j &&  j<i; div(num1, j) == 0 && div(num2, j) == 0 ==> j <= gcd);

//@ decreases num1 - i;

//@ public normal_behavior

//@ requires d != 0;

//@ pure function

//@ requires num1 != Integer.MAX_VALUE && num1 != Integer.MAX_VALUE && num1 > Integer.MIN_VALUE + 1 && num2 > Integer.MIN_VALUE + 1;

//@ {|

//@ requires num1 != 0 && num2 != 0;

//@ old int tnum1 = Math.abs(num1);

//@ old int tnum2 = Math.abs(num2);

//@ old int greater = (tnum1 > tnum2) ? tnum1 : tnum2;

//@ old int smaller = (tnum1 > tnum2) ? tnum2 : tnum1;

//@ ensures \result > 0;

//@ ensures div(tnum1,\result) == 0;

//@ ensures div(tnum2,\result) == 0;

//@ ensures (\forall int i; i > \result && i <= smaller; div(smaller,i) == 0 ==> div(greater,i) != 0);

//@ also

//@ requires num1 == 0 && num2 != 0;

//@ requires num2 != Integer.MIN_VALUE;

//@ ensures \result == Math.abs(num2);

//@ also

//@ requires num1 != 0 && num2 == 0;

//@ requires num1 != Integer.MIN_VALUE;

//@ old int tnum1a = Math.abs(num1);  // FIXME: If we eliminnate this old clause, things work, but otherwise not.

//@ ensures \result == \lbl TNUM1a tnum1a;

//@ |}

//@ assume div(num1, gcd) == 0 && div(num2, gcd) == 0;

//@ show \old(num1), \old(num2), num1, num2, num1>num2, Integer.MAX_VALUE;

//@ maintaining gcd <= num1 && gcd <= num2;

//@ maintaining i > 0 && i <= num1 + 1 && i<= num2 + 1;

//@ maintaining 0 < gcd && gcd <= i;

//@ maintaining div(num1, gcd) == 0 && div(num2, gcd) == 0;

//@ maintaining (\forall int j; 1 <= j &&  j<i; div(num1, j) == 0 && div(num2, j) == 0 ==> j <= gcd);

//@ decreases num1 - i;

//@ requires System.out.isOpen && System.err.isOpen;

//@ requires \invariant_for(System.out);

//@ requires \invariant_for(System.err);

//@ assume \invariant_for(System.err);

//@ assume System.err.isOpen;

//@ requires System.out.isOpen && System.err.isOpen;

//@ requires \invariant_for(System.out);

//@ requires \invariant_for(System.err);

//@ assume \invariant_for(System.err);

//@ assume System.err.isOpen;

//@ ensures (elements.contains(s));

//@ ensures (elements.contains(s));

//@ model import org.jmlspecs.models.JMLEqualsToObjectMap;

/*@ spec_public nullable @*/
//@ model import org.jmlspecs.models.JMLEqualsToObjectMap;

/*@ spec_public nullable @*/
//@ requires true;

//@ ensures pat.length == 0 ==> \result == true;

//@ ensures a.length == 0  && pat.length == 1 ==> \result == true;

//@ ensures a.length == 0  && pat.length > 1 ==> \result == false;

//@ ensures pat.length > 0 && a.length > 0 ==>  Relaxed.diffIndex(pat, a) == pat.length ==> \result == true;

//@ maintaining 0 <= index && index <= pat.length;

//@ maintaining 0 <= index - shift && index - shift <= a.length && 0 <= shift && shift <= 1;

//@ maintaining  Relaxed.diffIndex(pat, a) > index ==>(\forall int i; 0 <= i && i < index; pat[i] == a[i]) ;

//@ maintaining  Relaxed.diffIndex(pat, a) >  index ==> (\forall int j; Relaxed.diffIndex(pat, a) < j && j < index; pat[j] == a[j - 1]);

//@ decreases pat.length - index - shift;

//@ requires true;

//@ ensures 0 <= \result && \result <= pat.length;

//@ ensures (\forall int i; 0 <= i && i < \result; pat[i] == a[i]);

//@ ensures (pat.length > \result) && (a.length > \result) ==> pat[\result] != a[\result];

/*@ pure function @*/
//@ maintaining 0 <= index && index <= pat.length && index <= a.length;

//@ maintaining (\forall int i; 0 <= i && i < index; pat[i] == a[i]);

//@ decreases pat.length - index;

//@ requires true;

//@ ensures pat.length == 0 ==> \result == true;

//@ ensures a.length == 0  && pat.length == 1 ==> \result == true;

//@ ensures a.length == 0  && pat.length > 1 ==> \result == false;

//@ ensures pat.length > 0 && a.length > 0 ==>  Relaxed.diffIndex(pat, a) == pat.length ==> \result == true;

//@ maintaining 0 <= index && index <= pat.length;

//@ maintaining 0 <= index - shift && index - shift <= a.length && 0 <= shift && shift <= 1;

//@ maintaining  Relaxed.diffIndex(pat, a) > index ==>(\forall int i; 0 <= i && i < index; pat[i] == a[i]) ;

//@ maintaining  Relaxed.diffIndex(pat, a) >  index ==> (\forall int j; Relaxed.diffIndex(pat, a) < j && j < index; pat[j] == a[j - 1]);

//@ decreases pat.length - index - shift;

//@ requires true;

//@ ensures 0 <= \result && \result <= pat.length;

//@ ensures (\forall int i; 0 <= i && i < \result; pat[i] == a[i]);

//@ ensures (pat.length > \result) && (a.length > \result) ==> pat[\result] != a[\result];

/*@ pure function @*/
//@ maintaining 0 <= index && index <= pat.length && index <= a.length;

//@ maintaining (\forall int i; 0 <= i && i < index; pat[i] == a[i]);

//@ decreases pat.length - index;

//@ ensures pat.length > 0 && a.length > 0 ==>  Relaxed.diffIndex(pat, a) == pat.length ==> \result == true;

//@ maintaining  ( Relaxed.diffIndex(pat, a) >  0 ==> (\forall int j; Relaxed.diffIndex(pat, a) < j && j < 0; pat[j] == a[j - 1]));

//@ loop_writes pat;

//@ maintaining  ( Relaxed.diffIndex(pat, a) >  0 ==> (\forall int j; Relaxed.diffIndex(pat, a) < j && j < 0; pat[j] == a[j - 1]));

/*@ pure  @*/
//@ ensures pat.length > 0 && a.length > 0 ==>  Relaxed.diffIndex(pat, a) == pat.length ==> \result == true;

//@ maintaining  ( Relaxed.diffIndex(pat, a) >  0 ==> (\forall int j; Relaxed.diffIndex(pat, a) < j && j < 0; pat[j] == a[j - 1]));

//@ loop_writes pat;

//@ maintaining  ( Relaxed.diffIndex(pat, a) >  0 ==> (\forall int j; Relaxed.diffIndex(pat, a) < j && j < 0; pat[j] == a[j - 1]));

/*@ pure  @*/
//@ assert myp.getFirst() == 5 && myp.getSecond() == 4;

//@ assert pm.getMax() == 5 && r.get(1) == 4;

//@ assert myp.getFirst() == 5 && myp.getSecond() == 4;

//@ assert pm.getMax() == 5 && r.get(1) == 4;

/*@ spec_public @*/
/*@ assignable first, second;
      @ ensures first == fst && second == snd; @*/
/*@ ensures \result == first; @*/
/*@ pure @*/
/*@ ensures \result == second; @*/
/*@ public model_program {
      @   normal_behavior
      @     ensures \result != null && \result instanceof ArrayList<S>
      @          && \result.size() == 2;
      @   \result.add(0,p.run(first));
      @   \result.add(1,p.run(second));
      @   return res;
      @ } @*/
/*@ spec_public @*/
/*@ assignable first, second;
      @ ensures first == fst && second == snd; @*/
/*@ ensures \result == first; @*/
/*@ pure @*/
/*@ ensures \result == second; @*/
/*@ public model_program {
      @   normal_behavior
      @     ensures \result != null && \result instanceof ArrayList<S>
      @          && \result.size() == 2;
      @   \result.add(0,p.run(first));
      @   \result.add(1,p.run(second));
      @   return res;
      @ } @*/
/*@ spec_public @*/
//@ in objectState;

/*@ assignable maxSeen;
      @ ensures maxSeen == Math.max(\old(maxSeen),x); @*/
//@ ensures \result == maxSeen;

/*@ pure @*/
/*@ spec_public @*/
//@ in objectState;

/*@ assignable maxSeen;
      @ ensures maxSeen == Math.max(\old(maxSeen),x); @*/
//@ ensures \result == maxSeen;

/*@ pure @*/
//@ assignable objectState;

//@ assignable objectState;

//@ assert myp.getFirst() == 5 && myp.getSecond() == 4;

//@ assert pm.getMax() == 5 && r.get(1) == 4;

//@ assert myp.getFirst() == 5 && myp.getSecond() == 4;

//@ assert pm.getMax() == 5 && r.get(1) == 4;

/*@ spec_public @*/
/*@ ensures first == fst && second == snd;
      @ pure @*/
/*@ ensures \result == first; pure @*/
/*@ ensures \result == second; pure @*/
/*@ public model_program {
      @   normal_behavior
      @     ensures res != null && res instanceof ArrayList<S>
      @          && res.size() == 2;
      @   res.add(0,p.run(first));
      @   res.add(1,p.run(second));
      @   return res;
      @ } @*/
/*@ spec_public @*/
/*@ ensures first == fst && second == snd;
      @ pure @*/
/*@ ensures \result == first; pure @*/
/*@ ensures \result == second; pure @*/
/*@ public model_program {
      @   normal_behavior
      @     ensures res != null && res instanceof ArrayList<S>
      @          && res.size() == 2;
      @   res.add(0,p.run(first));
      @   res.add(1,p.run(second));
      @   return res;
      @ } @*/
/*@ spec_public @*/
//@ in objectState;

/*@ also assignable maxSeen;
      @ ensures maxSeen == Math.max(\old(maxSeen),x); @*/
//@ ensures \result == maxSeen;

/*@ pure @*/
/*@ spec_public @*/
//@ in objectState;

/*@ also assignable maxSeen;
      @ ensures maxSeen == Math.max(\old(maxSeen),x); @*/
//@ ensures \result == maxSeen;

/*@ pure @*/
//@ assignable objectState;

//@ assignable objectState;

/*@ spec_public @*/
//@ in objectState;

/*@ also
      @   requires 0 <= i && i < a.length;
      @   assignable maxSeen;
      @   ensures maxSeen == Math.max(\old(maxSeen),a[i]); @*/
//@ ensures \result == maxSeen;

/*@ pure @*/
/*@ spec_public @*/
//@ in objectState;

/*@ also
      @   requires 0 <= i && i < a.length;
      @   assignable maxSeen;
      @   ensures maxSeen == Math.max(\old(maxSeen),a[i]); @*/
//@ ensures \result == maxSeen;

/*@ pure @*/
/*@ public normal_behavior
      @   requires 0 <= i && i < a.length;
      @   assignable objectState, a[i];   @*/
/*@ public normal_behavior
      @   requires 0 <= i && i < a.length;
      @   assignable objectState, a[i];   @*/
/*@ extract @*/
//@ maintaining 0 <= i && i <= a.length;

//@ decreasing a.length - i;

/*@ extract @*/
//@ maintaining 0 <= i && i <= a.length;

//@ decreasing a.length - i;

//@ assert pm.getMax() == 5;

//@ assert pm.getMax() == 5;

//@ ensures theList != null;

//@ ensures theList.size() == 1;

//@ assignable     othing;

//@ ensures theList != null;

//@ ensures theList.size() == 1;

//@ assignable     othing;

//@ ensures theList != null;

//@ ensures theList.indexOf(a) == 0;

//@ ensures theList != null;

//@ ensures theList.size() == 1;

//@ assignable     othing;

//@ ensures theList != null;

//@ ensures theList.indexOf(a) == 0;

//@ ensures theList != null;

//@ ensures theList.size() == 1;

//@ assignable     othing;

//@ ensures theList != null;

//@ ensures theList.size() == 1;

//@ pure

//@ assignable     othing;

//@ ensures theList != null;

//@ ensures theList.size() == 1;

//@ pure

//@ assignable     othing;

//@ public normal_behavior

//@   requires size > 0;

//@   ensures \result != null;

//@   ensures \result.length == size;

//@   ensures \result[0] == 0;

//@ public normal_behavior

//@   requires size > 0;

//@   ensures \result != null;

//@   ensures \result.length == size;

//@   ensures \result[0] == 0;

/*@ spec_public @*/
//@ public normal_behavior

//@   accessible \everything;

//@   requires a != null;

//@   ensures theList != null;

//@   ensures theList.size() == 1;

//@   ensures theList.contains(a);

//@ pure

/*@ spec_public @*/
//@ public normal_behavior

//@   accessible \everything;

//@   requires a != null;

//@   ensures theList != null;

//@   ensures theList.size() == 1;

//@   ensures theList.contains(a);

//@ pure

/*@ pure @*/
/*@ pure @*/
/*@ pure @*/
/*@ public normal_behavior
	@   requires b != null;
	@   requires b.limit >= 1;
	@   ensures \result == b.contents[0];
	@*/
/*@ pure @*/
/*@ public normal_behavior
	@   requires b != null;
	@   requires b.limit >= 1;
	@   ensures \result == b.contents[0];
	@*/
/*@ pure @*/
/*@ public normal_behavior
	@   requires b != null;
	@   requires b.limit >= 1;
	@   ensures \result == b.contents[0];
	@*/
/*@ pure @*/
//@ requires cause.getMessage()!=null;

//@ requires cause.getMessage()!=null;

//@ requires cause.getMessage()!=null;

//@ requires cause.getMessage()!=null;

//@ assert b1 != null;

//@ assert b1.length == 10;

//@ assert b2 != null;

//@ assert b2.length == 10;

//@ assert b1 != b2;

//@ assert b1 != null;

//@ assert b1.length == 10;

//@ assert b2 != null;

//@ assert b2.length == 10;

//@ assert b2 != b1;

//@ assert b3 != null;

//@ assert b3.length == 10;

//@ assert b1 != b3;

//@ assert b2 != b3;

//@ assert b4 != null;

//@ assert b4.length == 10;

//@ assert b1 != b4;

//@ assert b2 != b4;

//@ assert b3 != b4;

//@ assert b5 != null;

//@ assert b5.length == 10;

//@ assert b1 != b5;

//@ assert b2 != b5;

//@ assert b3 != b5;

//@ assert b4 != b5;

//@ assert b6 != null;

//@ assert b6.length == 10;

//@ assert b1 != b6;

//@ assert b2 != b6;

//@ assert b3 != b6;

//@ assert b4 != b6;

//@ assert b5 != b6;

//@ assert b7 != null;

//@ assert b7.length == 10;

//@ assert b1 != b7;

//@ assert b2 != b7;

//@ assert b3 != b7;

//@ assert b4 != b7;

//@ assert b5 != b7;

//@ assert b6 != b7;

//@ assert b8 != null;

//@ assert b8.length == 10;

//@ assert b1 != b8;

//@ assert b2 != b8;

//@ assert b3 != b8;

//@ assert b4 != b8;

//@ assert b5 != b8;

//@ assert b6 != b8;

//@ assert b7 != b8;

//@ assert b9 != null;

//@ assert b9.length == 10;

//@ assert b1 != b9;

//@ assert b2 != b9;

//@ assert b3 != b9;

//@ assert b4 != b9;

//@ assert b5 != b9;

//@ assert b6 != b9;

//@ assert b7 != b9;

//@ assert b8 != b9;

//@ assert b10 != b1;

//@ assert b1 != null;

//@ assert b1.length == 10;

//@ assert b2 != null;

//@ assert b2.length == 10;

//@ assert b1 != b2;

//@ assert b1 != null;

//@ assert b1.length == 10;

//@ assert b2 != null;

//@ assert b2.length == 10;

//@ assert b2 != b1;

//@ assert b3 != null;

//@ assert b3.length == 10;

//@ assert b1 != b3;

//@ assert b2 != b3;

//@ assert b4 != null;

//@ assert b4.length == 10;

//@ assert b1 != b4;

//@ assert b2 != b4;

//@ assert b3 != b4;

//@ assert b5 != null;

//@ assert b5.length == 10;

//@ assert b1 != b5;

//@ assert b2 != b5;

//@ assert b3 != b5;

//@ assert b4 != b5;

//@ assert b6 != null;

//@ assert b6.length == 10;

//@ assert b1 != b6;

//@ assert b2 != b6;

//@ assert b3 != b6;

//@ assert b4 != b6;

//@ assert b5 != b6;

//@ assert b7 != null;

//@ assert b7.length == 10;

//@ assert b1 != b7;

//@ assert b2 != b7;

//@ assert b3 != b7;

//@ assert b4 != b7;

//@ assert b5 != b7;

//@ assert b6 != b7;

//@ assert b8 != null;

//@ assert b8.length == 10;

//@ assert b1 != b8;

//@ assert b2 != b8;

//@ assert b3 != b8;

//@ assert b4 != b8;

//@ assert b5 != b8;

//@ assert b6 != b8;

//@ assert b7 != b8;

//@ assert b9 != null;

//@ assert b9.length == 10;

//@ assert b1 != b9;

//@ assert b2 != b9;

//@ assert b3 != b9;

//@ assert b4 != b9;

//@ assert b5 != b9;

//@ assert b6 != b9;

//@ assert b7 != b9;

//@ assert b8 != b9;

//@ assert b10 != b1;

/*@ public normal_behavior
	  @   requires size >= 0 && size < 128;
	  @   assignable     othing;
	  @   ensures \fresh(\result);
	  @   ensures \result.length == size;
	  @   //ensures \forall int i; 0 <= i && i < size; \result[i] == (byte) 0x00;
	  @*/
/*@ public normal_behavior
	  @   requires size >= 0 && size < 128;
	  @   assignable     othing;
	  @   ensures \fresh(\result);
	  @   ensures \result.length == size;
	  @   //ensures \forall int i; 0 <= i && i < size; \result[i] == (byte) 0x00;
	  @*/
//@ assert b1 != null;

//@ assert b1.length == 10;

//@ assert b2 != null;

//@ assert b2.length == 10;

//@ assert b1 != b2;

//@ assert b1 != null;

//@ assert b1.length == 10;

//@ assert b2 != null;

//@ assert b2.length == 10;

//@ assert b2 != b1;

//@ assert b3 != null;

//@ assert b3.length == 10;

//@ assert b1 != b3;

//@ assert b2 != b3;

//@ assert b1 != null;

//@ assert b1.length == 10;

//@ assert b2 != null;

//@ assert b2.length == 10;

//@ assert b1 != b2;

//@ assert b1 != null;

//@ assert b1.length == 10;

//@ assert b2 != null;

//@ assert b2.length == 10;

//@ assert b2 != b1;

//@ assert b3 != null;

//@ assert b3.length == 10;

//@ assert b1 != b3;

//@ assert b2 != b3;

/*@ spec_public @*/
/*@ public normal_behavior
      @   ensures \fresh(contents);
      @ pure */
/*@ public normal_behavior
      @   requires cont != null;
      @   ensures contents == cont;
      @ pure
      @*/
/*@ public normal_behavior
      @   requires size >= 0;
      @   ensures \fresh(\result);
      @   ensures \fresh(\result.contents);
      @*/
/*@ spec_public @*/
/*@ public normal_behavior
      @   ensures \fresh(contents);
      @ pure */
/*@ public normal_behavior
      @   requires cont != null;
      @   ensures contents == cont;
      @ pure
      @*/
/*@ public normal_behavior
      @   requires size >= 0;
      @   ensures \fresh(\result);
      @   ensures \fresh(\result.contents);
      @*/
//@ assert seq.isEmpty(); // failed to verify even though this is explicitly ensured in the spec for the constructor

//@ assert seq.int_length() == 1; // also failed

//@ assert seq.isEmpty(); // failed to verify even though this is explicitly ensured in the spec for the constructor

//@ assert seq.int_length() == 1; // also failed

/*@ private normal_behavior
      @   assignable     othing;
      @*/
/*@ helper @*/
/*@ public normal_behavior
      @   assignable     othing;
      @   ensures \fresh(\result);
      @*/
/*@ pure @*/
/*@ private normal_behavior
      @   assignable     othing;
      @*/
/*@ helper @*/
/*@ public normal_behavior
      @   assignable     othing;
      @   ensures \fresh(\result);
      @*/
/*@ pure @*/
/*@ spec_public @*/
/*@ private normal_behavior
      @   assignable     othing;
      @   ensures true;
      @*/
/*@ helper @*/
/*@ public normal_behavior
      @   assignable     othing;
      @   ensures \result.a == 127;
      @*/
/*@ pure @*/
/*@ also public normal_behavior
      @   assignable     othing;
      @   ensures \result <==> (obj instanceof Container) && ((Container) obj).a == a;
      @*/
/*@ pure @*/
/*@ spec_public non_null @*/
/*@ private normal_behavior
          @   assignable     othing;
          @   ensures true;
          @*/
/*@ helper @*/
/*@ public normal_behavior
          @   assignable     othing;
          @   //ensures Container.allocate() instanceof Container;
          @   ensures \result.c.equals(Container.allocate());
          @   // edit: turning this around into "Container.allocate().equals(\result.c)" does
          @   // establish that \result.c is an instance of Container, but the type system and
          @   // fact that \result.c != null should already establish this
          @*/
//@ assert user instanceof ContainerUser; // passes

//@ assert cont instanceof Container;     // passes

//@ assert user.c.a == 127;               // passes

//@ assert user.c instanceof Container;   // fails - fixed

/*@ spec_public @*/
/*@ private normal_behavior
      @   assignable     othing;
      @   ensures true;
      @*/
/*@ helper @*/
/*@ public normal_behavior
      @   assignable     othing;
      @   ensures \result.a == 127;
      @*/
/*@ pure @*/
/*@ also public normal_behavior
      @   assignable     othing;
      @   ensures \result <==> (obj instanceof Container) && ((Container) obj).a == a;
      @*/
/*@ pure @*/
/*@ spec_public non_null @*/
/*@ private normal_behavior
          @   assignable     othing;
          @   ensures true;
          @*/
/*@ helper @*/
/*@ public normal_behavior
          @   assignable     othing;
          @   //ensures Container.allocate() instanceof Container;
          @   ensures \result.c.equals(Container.allocate());
          @   // edit: turning this around into "Container.allocate().equals(\result.c)" does
          @   // establish that \result.c is an instance of Container, but the type system and
          @   // fact that \result.c != null should already establish this
          @*/
//@ assert user instanceof ContainerUser; // passes

//@ assert cont instanceof Container;     // passes

//@ assert user.c.a == 127;               // passes

//@ assert user.c instanceof Container;   // fails - fixed

/*@ private normal_behavior
      @   assignable     othing;
      @*/
/*@ helper @*/
/*@ public normal_behavior
      @   assignable     othing;
      @*/
/*@ pure @*/
/*@ non_null @*/
/*@ private normal_behavior
          @   assignable     othing;
          @*/
/*@ helper @*/
/*@ public normal_behavior
          @   assignable     othing;
          @*/
/*@ private normal_behavior
      @   assignable     othing;
      @*/
/*@ helper @*/
/*@ public normal_behavior
      @   assignable     othing;
      @*/
/*@ pure @*/
/*@ non_null @*/
/*@ private normal_behavior
          @   assignable     othing;
          @*/
/*@ helper @*/
/*@ public normal_behavior
          @   assignable     othing;
          @*/
/*@ non_null @*/
/*@ public normal_behavior
      @   assignable c;
      @*/
//@ assert c instanceof Object;

/*@ non_null @*/
/*@ public normal_behavior
      @   assignable c;
      @*/
//@ assert c instanceof Object;

/*@ public normal_behavior
      @   ensures this.a == a;
      @ pure */
/*@ public normal_behavior
      @   requires a < 1000000; assignable a; // limit just to avoid overflow warnings
      @   ensures this.a == \old(this.a) + 1;
      @   ensures \fresh(\result);
      @   ensures \result.equals(new Initializer(\old(a)));
      @*/
/*@ also public normal_behavior
      @   assignable     othing;
      @   ensures \result <==> obj instanceof Initializer && ((Initializer) obj).a == a;
      @*/
/*@ pure @*/
/*@ public normal_behavior
      @   ensures this.a == a;
      @ pure */
/*@ public normal_behavior
      @   requires a < 1000000; assignable a; // limit just to avoid overflow warnings
      @   ensures this.a == \old(this.a) + 1;
      @   ensures \fresh(\result);
      @   ensures \result.equals(new Initializer(\old(a)));
      @*/
/*@ also public normal_behavior
      @   assignable     othing;
      @   ensures \result <==> obj instanceof Initializer && ((Initializer) obj).a == a;
      @*/
/*@ pure @*/
/*@ public normal_behavior
      @   assignable     othing;
      @   ensures this.a == a;
      @*/
/*@ public normal_behavior
      @   requires a < 1000000; assignable a; // limit just to avoid overflow warnings
      @   ensures this.a == \old(this.a) + 1;
      @   ensures \fresh(\result);
      @   ensures \result.equals(\old(new Initializer(a)));
      @*/
/*@ also public normal_behavior
      @   assignable     othing;
      @   ensures \result <==> obj instanceof Initializer && ((Initializer) obj).a == a;
      @*/
/*@ pure @*/
/*@ public normal_behavior
      @   assignable     othing;
      @   ensures this.a == a;
      @*/
/*@ public normal_behavior
      @   requires a < 1000000; assignable a; // limit just to avoid overflow warnings
      @   ensures this.a == \old(this.a) + 1;
      @   ensures \fresh(\result);
      @   ensures \result.equals(\old(new Initializer(a)));
      @*/
/*@ also public normal_behavior
      @   assignable     othing;
      @   ensures \result <==> obj instanceof Initializer && ((Initializer) obj).a == a;
      @*/
/*@ pure @*/
/*@ public normal_behavior
      @   ensures \result == 4;
      @*/
/*@ public normal_behavior
      @   ensures \result == 4;
      @*/
/*@ public normal_behavior
      @   ensures \result == 7;
      @*/
//@ assert i == 4;

//@ assert j == 3;

/*@ public normal_behavior
      @   ensures \result == 7;
      @*/
//@ assert i == 4;

//@ assert j == 3;

/*@ public normal_behavior
      @   ensures \result == 3;
      @*/
/*@ public normal_behavior
      @   ensures \result == 3;
      @*/
//@ requires length > 0;

//@ requires URANDOM.isOpen;

//@ requires URANDOM.availableBytes > 0;

//@ requires length > 0;

//@ requires URANDOM.isOpen;

//@ requires URANDOM.availableBytes > 0;

/*@ spec_public @*/
//@ assert ptr_ != 0;

/*@ spec_public @*/
//@ assert ptr_ != 0;

/*@ public normal_behavior
      @   assignable     othing;
      @   ensures true;
      @ public function static model pure int chomp(int i);
      @*/
//@ axiom \forall int i, j; 489 <= i && i < 526 && 0 <= j && j < 10; i == j ==> chomp(i) == chomp(j);

//@ ghost int a = chomp(500);

//@ ghost int b = chomp(500);

//@ assert a == b;

/*@ public normal_behavior
      @   assignable     othing;
      @   ensures true;
      @ public function static model pure int chomp(int i);
      @*/
//@ axiom \forall int i, j; 489 <= i && i < 526 && 0 <= j && j < 10; i == j ==> chomp(i) == chomp(j);

//@ ghost int a = chomp(500);

//@ ghost int b = chomp(500);

//@ assert a == b;

//@static invariant TEN == 10;

//@assert TEN > 0;

//@ assert TEN > 0;

//@static invariant TEN == 10;

//@assert TEN > 0;

//@ assert TEN > 0;

//@ assert \elemtype(\typeof(a)) == \type(int);

//@ assert b != a;

//@ assert Arrays.equals(a,b);

//@ assert \elemtype(\typeof(a)) == \type(int);

//@ assert b != a;

//@ assert Arrays.equals(a,b);

/*@
  ensures  Crypto.encrypt(this.Na).equals(\result);  pure // - won't be provable in this simplified example
  @*/
//@ pure

/*@
  ensures  Crypto.encrypt(this.Na).equals(\result);  pure // - won't be provable in this simplified example
  @*/
//@ pure

//@ pure non_null

//@ pure non_null

//@ pure non_null

//@ pure non_null

//@ pure non_null

//@ pure non_null

/*@ spec_public */
/*@ spec_public */
//@ assignable     othing;

//@ ensures this.field == field && this.data != null;

//@ assignable     othing;

//@ ensures this.field == field && this.data != null && \fresh(this.data);

//@ assignable     othing;

//@ ensures this.field == field && this.data != null;

//@ skipesc   // FIXME - timesout

/*@ loop_invariant 0 <= i && i <= data.length;
          @ decreases data.length - i;
          @*/
//@ skipesc // FIXME - tiemsout - possibly because of a method call prior to instance fields being set

//@ skipesc // FIXME timesout

/*@ spec_public */
/*@ spec_public */
//@ assignable     othing;

//@ ensures this.field == field && this.data != null;

//@ assignable     othing;

//@ ensures this.field == field && this.data != null && \fresh(this.data);

//@ assignable     othing;

//@ ensures this.field == field && this.data != null;

//@ skipesc   // FIXME - timesout

/*@ loop_invariant 0 <= i && i <= data.length;
          @ decreases data.length - i;
          @*/
//@ skipesc // FIXME - tiemsout - possibly because of a method call prior to instance fields being set

//@ skipesc // FIXME timesout

/*@ spec_public */
/*@ spec_public */
//@ assignable     othing;

//@ ensures this.field == field && this.data != null;

//@ assignable     othing;

//@ ensures this.field == field && this.data != null && \fresh(this.data);

//@ assignable     othing;

//@ ensures this.field == field && this.data != null;

//@ skipesc   // FIXME - timesout

/*@ loop_invariant 0 <= i && i <= data.length;
          @ decreases data.length - i;
          @*/
//@ skipesc // FIXME - tiemsout - possibly because of a method call prior to instance fields being set

//@ skipesc // FIXME timesout

/*@ spec_public */
/*@ spec_public */
//@ assignable     othing;

//@ ensures this.field == field && this.data != null;

//@ assignable     othing;

//@ ensures this.field == field && this.data != null && \fresh(this.data);

//@ assignable     othing;

//@ ensures this.field == field && this.data != null;

//@ skipesc   // FIXME - timesout

/*@ loop_invariant 0 <= i && i <= data.length;
          @ decreases data.length - i;
          @*/
//@ skipesc // FIXME - tiemsout - possibly because of a method call prior to instance fields being set

//@ skipesc // FIXME timesout

/*@ spec_public */
/*@ spec_public */
//@ assignable     othing;

//@ ensures this.field == field && this.data != null;

//@ assignable     othing;

//@ ensures this.field == field && this.data != null && \fresh(this.data);

//@ assignable     othing;

//@ ensures this.field == field && this.data != null;

//@ skipesc   // FIXME - timesout

/*@ loop_invariant 0 <= i && i <= data.length;
          @ decreases data.length - i;
          @*/
//@ skipesc // FIXME - tiemsout - possibly because of a method call prior to instance fields being set

//@ skipesc // FIXME timesout

/*@ spec_public */
/*@ spec_public */
//@ assignable     othing;

//@ ensures this.field == field && this.data != null;

//@ assignable     othing;

//@ ensures this.field == field && this.data != null && \fresh(this.data);

//@ assignable     othing;

//@ ensures this.field == field && this.data != null;

//@ skipesc   // FIXME - timesout

/*@ loop_invariant 0 <= i && i <= data.length;
          @ decreases data.length - i;
          @*/
//@ skipesc // FIXME - tiemsout - possibly because of a method call prior to instance fields being set

//@ skipesc // FIXME timesout

/*@ spec_public */
/*@ spec_public */
//@ assignable     othing;

//@ ensures this.field == field && this.data != null;

//@ assignable     othing;

//@ ensures this.field == field && this.data != null && \fresh(this.data);

//@ assignable     othing;

//@ ensures this.field == field && this.data != null;

//@ skipesc   // FIXME - timesout

/*@ loop_invariant 0 <= i && i <= data.length;
          @ decreases data.length - i;
          @*/
//@ skipesc // FIXME - tiemsout - possibly because of a method call prior to instance fields being set

//@ skipesc // FIXME timesout















//@ ensures \fresh(\result);

//@ pure

//@ ensures \fresh(\result);

//@ pure

//@ ensures \fresh(\result);

//@ pure

//@ ensures \fresh(\result);

//@ pure

//@ ensures \fresh(\result);

//@ pure

//@ ensures \fresh(\result);

//@ pure

//@ ensures \fresh(\result);

//@ pure

//@ requires (\exists int i; 0 <= i && i < ivec.length; ivec[i] == 0);

/*@ pure @*/
/*@ requires (\exists int i; 0 <= i && i < target.length;
      @                           target[i] == 0
      @         && (\forall int j; 0 <= j && j < src.length;
      @                            j <= i ==> src[j] != 0); @*/
//@ requires true;

/*@ requires (\exists int i; 0 <= i && i < left.length;
      @                           left[i] == 0);
      @       && (\exists int i; 0 <= i && i < right.length;
      @                           right[i] == 0); @*/
//@ requires (\exists int i; 0 <= i && i < ivec.length; ivec[i] == 0);

/*@ pure @*/
/*@ requires (\exists int i; 0 <= i && i < target.length;
      @                           target[i] == 0
      @         && (\forall int j; 0 <= j && j < src.length;
      @                            j <= i ==> src[j] != 0); @*/
//@ requires true;

/*@ requires (\exists int i; 0 <= i && i < left.length;
      @                           left[i] == 0);
      @       && (\exists int i; 0 <= i && i < right.length;
      @                           right[i] == 0); @*/
//@ model import org.jmlspecs.models.JMLObjectBag;

//@ public instance model JMLObjectBag queue;

/*@ public normal_behavior
      @  ensures queue.equals(\old(queue).insert(o));
      @  modifies queue;
      @*/
/*@non_null@*/
/*@ public normal_behavior
      @  requires !isEmpty();
      @  ensures \old(queue).has(\result) &&
      @       queue.equals(\old(queue).remove(\result)) &&
      @   (\forall Comparable o; queue.has(o); \result.compareTo(o) <= 0);
      @  modifies queue;
      @*/
/*@non_null@*/
/*@ public normal_behavior
      @  ensures \result == (queue.isEmpty());
      @*/
/*@pure@*/
//@ model import org.jmlspecs.models.JMLObjectBag;

//@ public instance model JMLObjectBag queue;

/*@ public normal_behavior
      @  ensures queue.equals(\old(queue).insert(o));
      @  modifies queue;
      @*/
/*@non_null@*/
/*@ public normal_behavior
      @  requires !isEmpty();
      @  ensures \old(queue).has(\result) &&
      @       queue.equals(\old(queue).remove(\result)) &&
      @   (\forall Comparable o; queue.has(o); \result.compareTo(o) <= 0);
      @  modifies queue;
      @*/
/*@non_null@*/
/*@ public normal_behavior
      @  ensures \result == (queue.isEmpty());
      @*/
/*@pure@*/
/*@ spec_public @*/
//@ in state;

/*@ spec_public @*/
//@ in state;

//@ public invariant lb <= ub;

//@ public invariant ub == Integer.MAX_VALUE <==> inclusive;

//@ requires l <= u;

//@ assignable state;

//@ ensures lb == l && ub == u;

//@ ensures \result == lb;

/*@ pure @*/
//@ ensures \result == ub;

/*@ pure @*/
//@ also

//@   ensures \result <==> (lb <= i && i < ub) || (inclusive && i == ub);

/*@ pure @*/
//@ assert (i < lb || i >= ub) && (!inclusive || i != ub);

//@ assert i >= ub && (!inclusive || i != ub);

//@ contains(i);

//@ assert lb <= i && i < ub || (inclusive && i == ub);

//@ assert i == ub && ub == Integer.MAX_VALUE;

//@ !contains(i);

/*@ pure @*/
/*@ spec_public @*/
//@ in state;

/*@ spec_public @*/
//@ in state;

//@ public invariant lb <= ub;

//@ public invariant ub == Integer.MAX_VALUE <==> inclusive;

//@ requires l <= u;

//@ assignable state;

//@ ensures lb == l && ub == u;

//@ ensures \result == lb;

/*@ pure @*/
//@ ensures \result == ub;

/*@ pure @*/
//@ also

//@   ensures \result <==> (lb <= i && i < ub) || (inclusive && i == ub);

/*@ pure @*/
//@ assert (i < lb || i >= ub) && (!inclusive || i != ub);

//@ assert i >= ub && (!inclusive || i != ub);

//@ contains(i);

//@ assert lb <= i && i < ub || (inclusive && i == ub);

//@ assert i == ub && ub == Integer.MAX_VALUE;

//@ !contains(i);

/*@ pure @*/
//@ model import org.jmlspecs.lang.JMLDataGroup;

//@ public instance model JMLDataGroup state;

/*@ pure @*/
//@ requires size() > 0;

//@ assignable state;

//@ ensures contains(\result);

//@ assignable state;

//@ ensures contains(i) && size() >= \old(size());

//@ assignable state;

//@ ensures !contains(i) && size() <= \old(size());

//@ ensures \result >= 0;

/*@ pure @*/
//@ model import org.jmlspecs.lang.JMLDataGroup;

//@ public instance model JMLDataGroup state;

/*@ pure @*/
//@ requires size() > 0;

//@ assignable state;

//@ ensures contains(\result);

//@ assignable state;

//@ ensures contains(i) && size() >= \old(size());

//@ assignable state;

//@ ensures !contains(i) && size() <= \old(size());

//@ ensures \result >= 0;

/*@ pure @*/
//@ model import org.jmlspecs.models.JMLObjectBag;

//@ in queue;

//@ in queue;

/*@ private represents queue = computeQueue(); @*/
/*@ private invariant elems != null;
      @ private invariant \typeof(elems) == \type(Comparable[]);
      @ private invariant elems.length > 0;
      @ private invariant 0 <= numElems && numElems <= elems.length;
      @ private invariant
      @   (\forall int i; 0 <= i && i < numElems; elems[i] != null);
      @
      @ private invariant
      @   (\forall int i; 0 <= i && i < numElems;
      @     (2*i+1 < numElems ==> elems[i].compareTo(elems[2*i+1]) <= 0)
      @  && (2*i+2 < numElems ==> elems[i].compareTo(elems[2*i+2]) <= 0));
      @*/
/*@
    private model pure non_null JMLObjectBag computeQueue() {
	JMLObjectBag bag = new JMLObjectBag();
	for (int i= 0; i < numElems; i++)
	    bag = bag.insert(elems[i]);
	return bag;
    }
    @*/
/*@ ensures elems.length > \old(elems.length)
      @       && numElems == \old(numElems);
      @ modifies queue;
      @*/
//@ model import org.jmlspecs.models.JMLObjectBag;

//@ in queue;

//@ in queue;

/*@ private represents queue = computeQueue(); @*/
/*@ private invariant elems != null;
      @ private invariant \typeof(elems) == \type(Comparable[]);
      @ private invariant elems.length > 0;
      @ private invariant 0 <= numElems && numElems <= elems.length;
      @ private invariant
      @   (\forall int i; 0 <= i && i < numElems; elems[i] != null);
      @
      @ private invariant
      @   (\forall int i; 0 <= i && i < numElems;
      @     (2*i+1 < numElems ==> elems[i].compareTo(elems[2*i+1]) <= 0)
      @  && (2*i+2 < numElems ==> elems[i].compareTo(elems[2*i+2]) <= 0));
      @*/
/*@
    private model pure non_null JMLObjectBag computeQueue() {
	JMLObjectBag bag = new JMLObjectBag();
	for (int i= 0; i < numElems; i++)
	    bag = bag.insert(elems[i]);
	return bag;
    }
    @*/
/*@ ensures elems.length > \old(elems.length)
      @       && numElems == \old(numElems);
      @ modifies queue;
      @*/
//@ model import org.jmlspecs.models.JMLObjectBag;

//@ public instance model JMLObjectBag queue;

/*@ public normal_behavior
      @  ensures queue.equals(\old(queue).insert(o));
      @  modifies queue;
      @*/
/*@non_null@*/
/*@ public normal_behavior
      @  requires !isEmpty();
      @  ensures \old(queue).has(\result) &&
      @       queue.equals(\old(queue).remove(\result)) &&
      @   (\forall Comparable o; \old(queue).has(o); \result.compareTo(o) <= 0);
      @  modifies queue;
      @*/
/*@non_null@*/
/*@ public normal_behavior
      @  ensures \result == (queue.isEmpty());
      @*/
/*@pure@*/
//@ model import org.jmlspecs.models.JMLObjectBag;

//@ public instance model JMLObjectBag queue;

/*@ public normal_behavior
      @  ensures queue.equals(\old(queue).insert(o));
      @  modifies queue;
      @*/
/*@non_null@*/
/*@ public normal_behavior
      @  requires !isEmpty();
      @  ensures \old(queue).has(\result) &&
      @       queue.equals(\old(queue).remove(\result)) &&
      @   (\forall Comparable o; \old(queue).has(o); \result.compareTo(o) <= 0);
      @  modifies queue;
      @*/
/*@non_null@*/
/*@ public normal_behavior
      @  ensures \result == (queue.isEmpty());
      @*/
/*@pure@*/
//@ model import org.jmlspecs.models.JMLObjectBag;

//@ in queue;

//@ in queue;

//@ private ghost non_null JMLObjectBag ghostQueue; in queue;

//@ private represents queue <- ghostQueue;

/*@ private invariant elems != null;
      @ private invariant \typeof(elems) == \type(Comparable[]);
      @ private invariant elems.length > 0;
      @ private invariant 0 <= numElems && numElems <= elems.length;
      @ private invariant
      @   (\forall int i; 0 <= i && i < numElems; elems[i] != null);
      @
      @ private invariant
      @   (\forall int i; 0 <= i && i < numElems;
      @     (2*i+1 < numElems ==> elems[i].compareTo(elems[2*i+1]) <= 0)
      @  && (2*i+2 < numElems ==> elems[i].compareTo(elems[2*i+2]) <= 0));
      @*/
//@ set ghostQueue = new JMLObjectBag();

/*@ ensures elems.length > \old(elems.length)
      @       && numElems == \old(numElems);
      @ modifies queue;
      @*/
/*@non_null@*/
//@ set ghostQueue = ghostQueue.insert(o);

/*@non_null@*/
//@ set ghostQueue = ghostQueue.remove(first);

/*@pure@*/
/*@non_null@*/
//@ model import org.jmlspecs.models.JMLObjectBag;

//@ in queue;

//@ in queue;

//@ private ghost non_null JMLObjectBag ghostQueue; in queue;

//@ private represents queue <- ghostQueue;

/*@ private invariant elems != null;
      @ private invariant \typeof(elems) == \type(Comparable[]);
      @ private invariant elems.length > 0;
      @ private invariant 0 <= numElems && numElems <= elems.length;
      @ private invariant
      @   (\forall int i; 0 <= i && i < numElems; elems[i] != null);
      @
      @ private invariant
      @   (\forall int i; 0 <= i && i < numElems;
      @     (2*i+1 < numElems ==> elems[i].compareTo(elems[2*i+1]) <= 0)
      @  && (2*i+2 < numElems ==> elems[i].compareTo(elems[2*i+2]) <= 0));
      @*/
//@ set ghostQueue = new JMLObjectBag();

/*@ ensures elems.length > \old(elems.length)
      @       && numElems == \old(numElems);
      @ modifies queue;
      @*/
/*@non_null@*/
//@ set ghostQueue = ghostQueue.insert(o);

/*@non_null@*/
//@ set ghostQueue = ghostQueue.remove(first);

/*@pure@*/
/*@non_null@*/
//@ model import org.jmlspecs.models.JMLObjectBag;

//@ public instance model JMLObjectBag queue;

/*@ public normal_behavior
      @  ensures queue.equals(\old(queue).insert(o));
      @  modifies queue;
      @*/
/*@non_null@*/
/*@ public normal_behavior
      @  requires !isEmpty();
      @  ensures \old(queue).has(\result) &&
      @       queue.equals(\old(queue).remove(\result)) &&
      @   (\forall Comparable o; queue.has(o); \result.compareTo(o) <= 0);
      @  modifies queue;
      @*/
/*@non_null@*/
/*@ public normal_behavior
      @  ensures \result == (queue.isEmpty());
      @*/
/*@pure@*/
//@ model import org.jmlspecs.models.JMLObjectBag;

//@ public instance model JMLObjectBag queue;

/*@ public normal_behavior
      @  ensures queue.equals(\old(queue).insert(o));
      @  modifies queue;
      @*/
/*@non_null@*/
/*@ public normal_behavior
      @  requires !isEmpty();
      @  ensures \old(queue).has(\result) &&
      @       queue.equals(\old(queue).remove(\result)) &&
      @   (\forall Comparable o; queue.has(o); \result.compareTo(o) <= 0);
      @  modifies queue;
      @*/
/*@non_null@*/
/*@ public normal_behavior
      @  ensures \result == (queue.isEmpty());
      @*/
/*@pure@*/
/*@ private represents size <- numElems; @*/
/*@ ensures elems.length > \old(elems.length)
      @       && numElems == \old(numElems);
      @*/
/*@ private represents size <- numElems; @*/
/*@ ensures elems.length > \old(elems.length)
      @       && numElems == \old(numElems);
      @*/
//@ public instance model int size;

//@ public invariant size >= 0;

/*@ public normal_behavior
      @  ensures size == \old(size) + 1;
      @*/
/*@non_null@*/
/*@ public normal_behavior
      @  requires !isEmpty();
      @  ensures size == \old(size) - 1;
      @*/
/*@non_null@*/
/*@ public normal_behavior
      @  ensures \result == (size == 0);
      @*/
/*@pure@*/
//@ public instance model int size;

//@ public invariant size >= 0;

/*@ public normal_behavior
      @  ensures size == \old(size) + 1;
      @*/
/*@non_null@*/
/*@ public normal_behavior
      @  requires !isEmpty();
      @  ensures size == \old(size) - 1;
      @*/
/*@non_null@*/
/*@ public normal_behavior
      @  ensures \result == (size == 0);
      @*/
/*@pure@*/
//@ reachable;

//@ reachable;

//@ reachable;

//@ reachable;

/*@ spec_public @*/
//@ public invariant 0 <= age && age < 150;

//@ ensures age == 0;

/*@ public normal_behavior
      @   requires 0 <= newAge && newAge < 150;
      @   assignable age;
      @   ensures age == newAge;
      @   ensures \result == this;
//      @ also
//      @ public exceptional_behavior
//      @   requires newAge < 0 || newAge >= 150;
//      @   signals_only Exception;
      @*/
/*@ spec_public @*/
//@ public invariant 0 <= age && age < 150;

//@ ensures age == 0;

/*@ public normal_behavior
      @   requires 0 <= newAge && newAge < 150;
      @   assignable age;
      @   ensures age == newAge;
      @   ensures \result == this;
//      @ also
//      @ public exceptional_behavior
//      @   requires newAge < 0 || newAge >= 150;
//      @   signals_only Exception;
      @*/
//@ @org.jmlspecs.annotation.Options("-checkFeasibility=none")

//@ @org.jmlspecs.annotation.Options("-checkFeasibility=none")

//@ reachable;

//@ reachable;

//@ signals (Exception e) e instanceof NullPointerException;

//@ old boolean e = f == 0;

//@ requires e;

//@ refining signals (Exception e) e instanceof NullPointerException;

//@ refining

//@ old boolean e = f == 0;

//@ ensures e==0;

//@ signals (Exception e) e instanceof NullPointerException;

//@ old boolean e = f == 0;

//@ requires e;

//@ refining signals (Exception e) e instanceof NullPointerException;

//@ refining

//@ old boolean e = f == 0;

//@ ensures e==0;

//@ model import org.jmlspecs.models.JMLObjectBag;

/*@ private invariant elems != null;
      @ private invariant \elemtype(\typeof(elems)) == \type(Comparable<Object>);
      @ private invariant elems.length > 0;
      @ private invariant 0 <= numElems && numElems <= elems.length;
      @ private invariant
      @   (\forall int i; 0 <= i && i < numElems; elems[i] != null);
      @
      @ private invariant
      @   (\forall int i; 0 <= i && i < numElems;
      @     (2*i+1 < numElems ==> elems[i].compareTo(elems[2*i+1]) <= 0)
      @  && (2*i+2 < numElems ==> elems[i].compareTo(elems[2*i+2]) <= 0));
      @*/
/*@
    public model helper pure non_null JMLObjectBag computeQueue() {
	JMLObjectBag bag = new JMLObjectBag();
	for (int i= 0; i < numElems; i++)
	    bag = bag.insert(elems[i]);
	return bag;
    }
    @*/
/*@ ensures elems.length > \old(elems.length)
      @       && numElems == \old(numElems);
      @*/
/*@non_null@*/
/*@non_null@*/
/*@non_null@*/
//@ model import org.jmlspecs.models.JMLObjectBag;

/*@ private invariant elems != null;
      @ private invariant \elemtype(\typeof(elems)) == \type(Comparable<Object>);
      @ private invariant elems.length > 0;
      @ private invariant 0 <= numElems && numElems <= elems.length;
      @ private invariant
      @   (\forall int i; 0 <= i && i < numElems; elems[i] != null);
      @
      @ private invariant
      @   (\forall int i; 0 <= i && i < numElems;
      @     (2*i+1 < numElems ==> elems[i].compareTo(elems[2*i+1]) <= 0)
      @  && (2*i+2 < numElems ==> elems[i].compareTo(elems[2*i+2]) <= 0));
      @*/
/*@
    public model helper pure non_null JMLObjectBag computeQueue() {
	JMLObjectBag bag = new JMLObjectBag();
	for (int i= 0; i < numElems; i++)
	    bag = bag.insert(elems[i]);
	return bag;
    }
    @*/
/*@ ensures elems.length > \old(elems.length)
      @       && numElems == \old(numElems);
      @*/
/*@non_null@*/
/*@non_null@*/
/*@non_null@*/
//@ model import org.jmlspecs.models.JMLObjectBag;

//@ public instance model JMLObjectBag queue;

//@ public represents queue = computeQueue();

//@ helper pure

/*@ public normal_behavior
      @  ensures queue.equals(\old(queue).insert(o));
      @*/
/*@non_null@*/
/*@ public normal_behavior
      @  requires !isEmpty();
      @  ensures \old(queue).has(\result) &&
      @       queue.equals(\old(queue).remove(\result)) &&
      @   (\forall Comparable o; queue.has(o); \result.compareTo(o) <= 0);
      @*/
/*@non_null@*/
/*@ public normal_behavior
      @  ensures \result == (queue.isEmpty());
      @*/
/*@pure@*/
//@ model import org.jmlspecs.models.JMLObjectBag;

//@ public instance model JMLObjectBag queue;

//@ public represents queue = computeQueue();

//@ helper pure

/*@ public normal_behavior
      @  ensures queue.equals(\old(queue).insert(o));
      @*/
/*@non_null@*/
/*@ public normal_behavior
      @  requires !isEmpty();
      @  ensures \old(queue).has(\result) &&
      @       queue.equals(\old(queue).remove(\result)) &&
      @   (\forall Comparable o; queue.has(o); \result.compareTo(o) <= 0);
      @*/
/*@non_null@*/
/*@ public normal_behavior
      @  ensures \result == (queue.isEmpty());
      @*/
/*@pure@*/
//@ ensures \result == a - b;

//@ {|

//@   requires a == b;

//@  also

//@   requires a < b;

//@ |}

//@ ensures \result == a - b;

//@ {|

//@   requires a == b;

//@  also

//@   requires a < b;

//@ |}

/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
//@ ensures \result == (a * c)/(0.06 * b);

/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
//@ ensures \result == (a * c)/(0.06 * b);

//@requires  i *  j *  k <  Integer.MAX_VALUE;

//@requires  i *  j *  k <  Integer.MAX_VALUE;

//@requires (\bigint) i * (\bigint) j * (\bigint) k < (\bigint) Integer.MAX_VALUE;

//@requires (\bigint) i * (\bigint) j * (\bigint) k < (\bigint) Integer.MAX_VALUE;

/*@
	 private static invariant (\sum int i; list.contains(i); i) >= 0;
	 @*/
/*@
	 private static invariant (\sum int i; list.contains(i); i) >= 0;
	 @*/
/*@
	 private invariant (\sum Integer i; list.contains(i); i) >= 0;
	 @*/
/*@
	 private invariant (\sum Integer i; list.contains(i); i) >= 0;
	 @*/
//@ public behavior

//@  ensures true;

//@ public normal_behavior

//@  ensures true;

//@ public behavior

//@  ensures true;

//@  signals_only Exception;

//@ public behavior

//@  ensures true;

//@ public normal_behavior

//@  ensures true;

//@ public behavior

//@  ensures true;

//@  signals_only Exception;

//@requires \forall int i; 0 <= i && i < array.length-1; array[i] <= array[i+1];

//@requires \forall int i; (\bigint)0 <= i && i < array.length-1; array[i] <= array[i+1];

//@requires \forall Integer i; 0 <= i && i < array.length-1; array[i] <= array[i+1];

//@requires \forall Integer i; 0 <= i && i < array.length-1; array[i] <= array[i+1];

//@requires \forall int i; 0 <= i && i < array.length-1; array[i] <= array[i+1];

//@requires \forall int i; (\bigint)0 <= i && i < array.length-1; array[i] <= array[i+1];

//@requires \forall Integer i; 0 <= i && i < array.length-1; array[i] <= array[i+1];

//@requires \forall Integer i; 0 <= i && i < array.length-1; array[i] <= array[i+1];

//@ public invariant n > 0;

//@ public behavior

//@    ensures n == nn;

//@ pure

//@ public invariant n > 0;

//@ public behavior

//@    ensures n == nn;

//@ pure

//@ public normal_behavior

//@   ensures true;

//@ public normal_behavior

//@   ensures true;

//@ also public normal_behavior

//@   ensures \result >= i;

//@ public normal_behavior

//@   ensures \result > i;

//@ public normal_behavior

//@   ensures \result > i;  // FAILS

//@ also public normal_behavior

//@   ensures \result >= i;

//@ public normal_behavior

//@   ensures \result > i;

//@ public normal_behavior

//@   ensures \result > i;  // FAILS

/*@ spec_public @*/
/*@
      public model int countVals;
      represents countVals = (\sum int i; 0<=i && i<vals.length; vals[i]);
      @*/
//@requires countVals > 0;

/*@ spec_public @*/
/*@
      public model int countVals;
      represents countVals = (\sum int i; 0<=i && i<vals.length; vals[i]);
      @*/
//@requires countVals > 0;

_by_default

//@ in buffer;

//@ public represents buffer = buf;

//@   assert (\forall int k; d<=k && k < d+length; buffer[k] == src[s-d+k]);

//@ requires length >= 0;

//@ requires s >= 0;

//@ requires s + length <= src.length;

//@ requires d >= 0;

//@ requires d + length <= buf.length;

//@   assignable buf[d..d+length-1];

//@   ensures (\forall int k; d<=k && k < d+length; buffer[k] == src[s-d+k]);

//@ requires length >= 0;

//@ requires s >= 0;

//@ requires s + length <= src.length;

//@ requires d >= 0;

//@ requires d + length <= buf.length;

//@   assignable buf[d..d+length-1];

//@   ensures java.util.Arrays.equalArrays(buffer,d,src,s,length);

//@ requires length >= 0;

//@ requires s >= 0;

//@ requires s + length <= src.length;

//@ requires d >= 0;

//@ requires d + length <= buf.length;

//@   assignable buf[d..d+length-1];

//@   ensures (\forall int k; s<=k && k < s+length; buffer[d-s+k] == src[k]);

//@ public normal_behavior

//@   requires src.length >= buffer.length;

//@   assignable buffer[*];

//@   ensures (\forall int k; 0<=k && k<buffer.length; buf[k] == src[k]);

//@ public normal_behavior

//@   requires src.length >= buffer.length;

//@   assignable buffer[*];

//@   ensures (\forall int k; 0<=k && k<buffer.length; buffer[k] == src[k]);

//@ requires length >= 0;

//@ requires s >= 0;

//@ requires s + length <= src.length;

//@ requires d >= 0;

//@ requires d + length <= buf.length;

//@ requires d == 0 && s == 0;

//@   assignable \everything;

//@ assume  (\forall int k; 0<=k && k<length; buf[k] == src[k]);

//@ assert  (\forall int k; 0<=k && k<length; buf[k] == src[k]);

//@ requires length >= 0;

//@ requires s >= 0;

//@ requires s + length <= src.length;

//@ requires d >= 0;

//@ requires d + length <= buf.length;

//@   assignable \everything;

//@ assume  (\forall int k; d<=k && k<d+length; buf[k] == src[s-d+k]);

//@ assert  (\forall int k; d<=k && k<d+length; buf[k] == src[s-d+k]);

//@ requires length >= 0;

//@ requires s >= 0;

//@ requires s + length <= src.length;

//@ requires d >= 0;

//@ requires d + length <= buf.length;

//@   assignable \everything;

//@ assume  (\forall int k; 0<=k && k<length; buf[d+k] == src[s+k]);

//@ assert  (\forall int k; 0<=k && k<length; buf[d+k] == src[s+k]);

_by_default

//@ public instance model int[] buffer;

//@ public normal_behavior

//@   requires src.length >= buffer.length;

//@   assignable buffer[*];

//@   ensures (\forall int k; 0<=k && k<buffer.length; buffer[k] == src[k]);

//@ requires length >= 0;

//@ requires s >= 0;

//@ requires s + length <= src.length;

//@ requires d >= 0;

//@ requires d + length <= buffer.length;

//@   assignable buffer[d..d+length-1];

//@   ensures (\forall int k; d<=k && k < d+length; buffer[k] == src[s-d+k]);

_by_default

//@ in buffer;

//@ public represents buffer = buf;

//@   assert (\forall int k; d<=k && k < d+length; buffer[k] == src[s-d+k]);

//@ requires length >= 0;

//@ requires s >= 0;

//@ requires s + length <= src.length;

//@ requires d >= 0;

//@ requires d + length <= buf.length;

//@   assignable buf[d..d+length-1];

//@   ensures (\forall int k; d<=k && k < d+length; buffer[k] == src[s-d+k]);

//@ requires length >= 0;

//@ requires s >= 0;

//@ requires s + length <= src.length;

//@ requires d >= 0;

//@ requires d + length <= buf.length;

//@   assignable buf[d..d+length-1];

//@   ensures java.util.Arrays.equalArrays(buffer,d,src,s,length);

//@ requires length >= 0;

//@ requires s >= 0;

//@ requires s + length <= src.length;

//@ requires d >= 0;

//@ requires d + length <= buf.length;

//@   assignable buf[d..d+length-1];

//@   ensures (\forall int k; s<=k && k < s+length; buffer[d-s+k] == src[k]);

//@ public normal_behavior

//@   requires src.length >= buffer.length;

//@   assignable buffer[*];

//@   ensures (\forall int k; 0<=k && k<buffer.length; buf[k] == src[k]);

//@ public normal_behavior

//@   requires src.length >= buffer.length;

//@   assignable buffer[*];

//@   ensures (\forall int k; 0<=k && k<buffer.length; buffer[k] == src[k]);

//@ requires length >= 0;

//@ requires s >= 0;

//@ requires s + length <= src.length;

//@ requires d >= 0;

//@ requires d + length <= buf.length;

//@ requires d == 0 && s == 0;

//@   assignable \everything;

//@ assume  (\forall int k; 0<=k && k<length; buf[k] == src[k]);

//@ assert  (\forall int k; 0<=k && k<length; buf[k] == src[k]);

//@ requires length >= 0;

//@ requires s >= 0;

//@ requires s + length <= src.length;

//@ requires d >= 0;

//@ requires d + length <= buf.length;

//@   assignable \everything;

//@ assume  (\forall int k; d<=k && k<d+length; buf[k] == src[s-d+k]);

//@ assert  (\forall int k; d<=k && k<d+length; buf[k] == src[s-d+k]);

//@ requires length >= 0;

//@ requires s >= 0;

//@ requires s + length <= src.length;

//@ requires d >= 0;

//@ requires d + length <= buf.length;

//@   assignable \everything;

//@ assume  (\forall int k; 0<=k && k<length; buf[d+k] == src[s+k]);

//@ assert  (\forall int k; 0<=k && k<length; buf[d+k] == src[s+k]);

_by_default

//@ public instance model int[] buffer;

//@ public normal_behavior

//@   requires src.length >= buffer.length;

//@   assignable buffer[*];

//@   ensures (\forall int k; 0<=k && k<buffer.length; buffer[k] == src[k]);

//@ requires length >= 0;

//@ requires s >= 0;

//@ requires s + length <= src.length;

//@ requires d >= 0;

//@ requires d + length <= buffer.length;

//@   assignable buffer[d..d+length-1];

//@   ensures (\forall int k; d<=k && k < d+length; buffer[k] == src[s-d+k]);

//@ requires length >= 0;

//@ requires length >= 0;

_by_default

//@ assert t.get(1) == 1;

//@ requires i == 1;

//@ model public pure int get(int i);

_by_default

//@ assert t.get(1) == 1;

//@ requires i == 1;

//@ model public pure int get(int i);

_by_default

//@ assert t.cget3(30) == 3;  // ERROR

//@ assert t.get2(20) == 2;  // ERROR

//@ assert t.get3(30) == 2;   // ERROR

//@ assert t.get2(2) == 2;

//@ assert t.get3(3) == 3;

//@ assert t.get(1) == 1;

//@ assert t.cget(1) == 1;  // Exception

//@ model public pure int get2(int i) { return i; }

//@ requires i == 1;

//@ model public pure int cget(int i);

//@ requires i == 3;

//@ model public pure int cget3(int i) { return i; }

//@ requires i == 1;

//@ model public pure int get(int i);

//@ requires i == 2;

//@ model public pure int get2(int i);

//@ requires i == 3;

//@ model public pure int get3(int i) { return i; }

_by_default

//@ assert t.cget3(30) == 3;  // ERROR

//@ assert t.get2(20) == 2;  // ERROR

//@ assert t.get3(30) == 2;   // ERROR

//@ assert t.get2(2) == 2;

//@ assert t.get3(3) == 3;

//@ assert t.get(1) == 1;

//@ assert t.cget(1) == 1;  // Exception

//@ model public pure int get2(int i) { return i; }

//@ requires i == 1;

//@ model public pure int cget(int i);

//@ requires i == 3;

//@ model public pure int cget3(int i) { return i; }

//@ requires i == 1;

//@ model public pure int get(int i);

//@ requires i == 2;

//@ model public pure int get2(int i);

//@ requires i == 3;

//@ model public pure int get3(int i) { return i; }

_by_default

//@ assert get() == 1;

//@ assert getd() == 2;

//@ ensures \result == 1;

//@ model public pure int get();

//@ ensures \result == 2;

//@ model public pure int getd();

_by_default

//@ assert get() == 1;

//@ assert getd() == 2;

//@ ensures \result == 1;

//@ model public pure int get();

//@ ensures \result == 2;

//@ model public pure int getd();

//@ public normal_behavior

//@   requires true;

//@   requires System.out.isOpen;

//@ public normal_behavior

//@   requires true;

//@   requires System.out.isOpen;

//@ public normal_behavior

//@ ensures \result == 10;

//@ public normal_behavior

//@ ensures \result == 10;

//@ public normal_behavior

//@ ensures \result == 10;

//@ public normal_behavior

//@ ensures \result == 10;

_by_default

//@ public normal_behavior

//@   ensures \fresh(\result);

//@ assert t != null;

//@ public invariant t != null;

_by_default

//@ public normal_behavior

//@   ensures true;

//@ pure

//@ public normal_behavior

//@   ensures \fresh(\result);

_by_default

//@ ensures \result == null;


_by_default

//@ public normal_behavior

//@   ensures \fresh(\result);

//@ assert t != null;

//@ public invariant t != null;

_by_default

//@ public normal_behavior

//@   ensures true;

//@ pure

//@ public normal_behavior

//@   ensures \fresh(\result);

_by_default

//@ ensures \result == null;


_by_default

_by_default

_by_default

//@ requires ff != null;   // FIXME - sxhouldn't this be nonnull be default?

//@ requires ff.nnn == 29;

//@ ensures gg == ff.nnn;

//@ pure

//@ assert ff.nnn == 29;

//@ assert ff == Test.this.ff;

//@ requires ff.nnn == 29;

_by_default

//@ requires ff != null;   // FIXME - sxhouldn't this be nonnull be default?

//@ requires ff.nnn == 29;

//@ ensures gg == ff.nnn;

//@ pure

//@ assert ff.nnn == 29;

//@ assert ff == Test.this.ff;

//@ requires ff.nnn == 29;

_by_default

_by_default

_by_default

_by_default

_by_default

_by_default

/*@spec_public @*/
/*@spec_public @*/
/*@ ensures (this.first == null ==> \result == 0);
      @ ensures (this.first != null && this.rest == null) ==> \result == 1;
      @ ensures (this.first != null && this.rest != null) ==> \result == (rest.size() + 1);
      @*/
//@ pure

//@ assume rest != null ==> rest.size() < 1000000000; // Just to avoid overflow warnings

/*@spec_public @*/
/*@spec_public @*/
/*@ ensures (this.first == null ==> \result == 0);
      @ ensures (this.first != null && this.rest == null) ==> \result == 1;
      @ ensures (this.first != null && this.rest != null) ==> \result == (rest.size() + 1);
      @*/
//@ pure

//@ assume rest != null ==> rest.size() < 1000000000; // Just to avoid overflow warnings

/*@spec_public nullable @*/
/*@spec_public nullable @*/


/*@ ensures (this.first == null && \result == 0) ||(this.rest == null && \result == 1)  ||
      @ (\result == rest.size() + 1);
      @ pure
      @*/
//@ assume rest != null ==> rest.size() < 1000000000; // Just to avoid overflow warnings

/*@spec_public nullable @*/
/*@spec_public nullable @*/


/*@ ensures (this.first == null && \result == 0) ||(this.rest == null && \result == 1)  ||
      @ (\result == rest.size() + 1);
      @ pure
      @*/
//@ assume rest != null ==> rest.size() < 1000000000; // Just to avoid overflow warnings

//@ assignable k;

//@ ensures k == 1;

/*@{B}*/
//@ public normal_behavior

//@   requires true;

//@   assignable \everything;

/*@ model
class B implements A {

    //@ also public normal_behavior
    //@   requires true;
    //@ pure
    public void m() {}

}
*/
//@ assignable k;

//@ ensures k == 1;

/*@{B}*/
//@ public normal_behavior

//@   requires true;

//@   assignable \everything;

/*@ model
class B implements A {

    //@ also public normal_behavior
    //@   requires true;
    //@ pure
    public void m() {}

}
*/
/*@ spec_public @*/
/*@ spec_public nullable @*/
/*@ normal_behavior
      @ requires rest == null;
      @ ensures \result == 1;
      @
      @ also
      @
      @ normal_behavior
      @ requires rest != null;
      @ ensures \result == 1 + rest.size();
      @*/
/*@ spec_public pure @*/
/*@ spec_public @*/
/*@ spec_public nullable @*/
/*@ normal_behavior
      @ requires rest == null;
      @ ensures \result == 1;
      @
      @ also
      @
      @ normal_behavior
      @ requires rest != null;
      @ ensures \result == 1 + rest.size();
      @*/
/*@ spec_public pure @*/
//@ public invariant cents >= -100;

//@ public invariant cents <= 100;

//@ public invariant euros > 0 ==> cents >= 0;

//@ public invariant euros < 0 ==> cents <= 0;

/*@ spec_public @*/
/*@ spec_public @*/
//@ requires cents >= -100;

//@ requires cents <= 100;

//@ requires euros > 0 ==> cents >= 0;

//@ requires euros < 0 ==> cents <= 0;

//@ ensures this.cents >= -100;

//@ ensures this.cents <= 100;

//@ ensures this.euros > 0 ==> cents >= 0;

//@ ensures this.euros < 0 ==> cents <= 0;

//@ pure

/*@ pure @*/
//@ public invariant cents >= -100;

//@ public invariant cents <= 100;

//@ public invariant euros > 0 ==> cents >= 0;

//@ public invariant euros < 0 ==> cents <= 0;

/*@ spec_public @*/
/*@ spec_public @*/
//@ requires cents >= -100;

//@ requires cents <= 100;

//@ requires euros > 0 ==> cents >= 0;

//@ requires euros < 0 ==> cents <= 0;

//@ ensures this.cents >= -100;

//@ ensures this.cents <= 100;

//@ ensures this.euros > 0 ==> cents >= 0;

//@ ensures this.euros < 0 ==> cents <= 0;

//@ pure

/*@ pure @*/
/*@requires n >= 0
     *@ensures \result == (\product int i; 0 < i && i <= n; i)
     */
/*@ pure @*/
/*@requires n >= 0
     *@ensures \result == (\product int i; 0 < i && i <= n; i)
     */
/*@ pure @*/
//@ requires -1000000 < x & x < 1000000 & -1000000 < y & y < 1000000;

//@ ensures \result == x + y;

//@ maintaining sum == x + y - n && 0 <= n;

//@ decreases n;

//@ maintaining sum == x + y + n && 0 <= n;

//@ decreases n;

//@ requires -1000000 < x & x < 1000000 & -1000000 < y & y < 1000000;

//@ ensures \result == x + y;

//@ maintaining sum == x + y - n && 0 <= n;

//@ decreases n;

//@ maintaining sum == x + y + n && 0 <= n;

//@ decreases n;

//@ requires a.length == 10;

//@ assert a[0] == 4;

//@ assert a[3] == 7;

//@ assert  x == 3;

//@ requires a.length == 10;

//@ assignable x, a[x];

//@ ensures x == 3;

//@ requires a.length == 10;

//@ assert a[0] == 4;

//@ assert a[4] == 8;

//@ assert x == 4;

//@ requires a.length == 10;

//@ assignable x, a[x .. x+1];

//@ ensures x == 4;

//@ requires a.length == 10;

//@ assert a[0] == 4;

//@ assert a[3] == 7;

//@ assert  x == 3;

//@ requires a.length == 10;

//@ assignable x, a[x];

//@ ensures x == 3;

//@ requires a.length == 10;

//@ assert a[0] == 4;

//@ assert a[4] == 8;

//@ assert x == 4;

//@ requires a.length == 10;

//@ assignable x, a[x .. x+1];

//@ ensures x == 4;

//@ public normal_behavior

//@   requires java.math.BigInteger.parseable(s, 10);

//@   old \bigint b = java.math.BigInteger.parse(s,10);

//@ public normal_behavior

//@   old \bigint b = 10;

//@   ensures \result == b;

//@ public normal_behavior

//@   old \real b = 10;

//@   ensures \result == b;

//@ public normal_behavior

//@   old \TYPE b = \type(void);

//@ public normal_behavior

//@   requires java.math.BigInteger.parseable(s, 10);

//@   old \bigint b = java.math.BigInteger.parse(s,10);

//@ public normal_behavior

//@   old \bigint b = 10;

//@   ensures \result == b;

//@ public normal_behavior

//@   old \real b = 10;

//@   ensures \result == b;

//@ public normal_behavior

//@   old \TYPE b = \type(void);

/*@ public normal_behavior
     @ requires y >= 0;
     @ assignable     othing;
     @ ensures 0.0 <= \result
     @         && \result * \result <= y
     @         && ((0 <= (\result + 1) * (\result + 1))
     @            ==> y < (\result + 1) * (\result + 1));
     @*/
/*@ public normal_behavior
     @ requires y >= 0;
     @ assignable     othing;
     @ ensures 0.0 <= \result
     @         && \result * \result <= y
     @         && ((0 <= (\result + 1) * (\result + 1))
     @            ==> y < (\result + 1) * (\result + 1));
     @*/
//@ model public nullable Object content;

//@ in content;

//@ public normal_behavior

//@   ensures true;

//@ pure

//@ public normal_behavior

//@  assignable this.content;

//@ ensures !h.has(o);

//@ assert !h.has(o);

//@ ensures !h.has(o);

//@ assert !h.has(o);

//@ ensures !h.has(o);

//@ assert !h.has(o);

//@ requires !h.has(o);

//@ ensures !h.has(o);

//@ loop_invariant !h.has(o);

//@ assume !h.has(o);

//@ assert !h.has(o);

//@ requires !h.has(o);

//@ ensures !h.has(o);

//@ loop_invariant !h.has(o);

//@ assume !h.has(o);

//@ assert !h.has(o);

//@ model public nullable Object content;

//@ in content;

//@ public normal_behavior

//@   ensures true;

//@ pure

//@ public normal_behavior

//@  assignable this.content;

//@ ensures !h.has(o);

//@ assert !h.has(o);

//@ ensures !h.has(o);

//@ assert !h.has(o);

//@ ensures !h.has(o);

//@ assert !h.has(o);

//@ requires !h.has(o);

//@ ensures !h.has(o);

//@ loop_invariant !h.has(o);

//@ assume !h.has(o);

//@ assert !h.has(o);

//@ requires !h.has(o);

//@ ensures !h.has(o);

//@ loop_invariant !h.has(o);

//@ assume !h.has(o);

//@ assert !h.has(o);

//@ model import org.jmlspecs.models.*;

/*@ spec_public @*/
/*@
    @  public invariant enrolments != null; // enrolments
    @*/
/*@
    @   assignable     othing;
    @   ensures
    @     enrolments != null && enrolments.isEmpty();
    @*/
/*@
    @ requires e != null;
    @ ensures !\old(enrolments).contains(e) ==>
    @            enrolments.equals(\old(enrolments).add(e));
    @*/
/*@
    @ requires e != null;
    @ ensures !enrolments.contains(e);
    @*/
/*@
    @ requires e != null && enrolments.contains(e);
    @*/
//@ model import org.jmlspecs.models.*;

/*@ spec_public @*/
/*@
    @  public invariant enrolments != null; // enrolments
    @*/
/*@
    @   assignable     othing;
    @   ensures
    @     enrolments != null && enrolments.isEmpty();
    @*/
/*@
    @ requires e != null;
    @ ensures !\old(enrolments).contains(e) ==>
    @            enrolments.equals(\old(enrolments).add(e));
    @*/
/*@
    @ requires e != null;
    @ ensures !enrolments.contains(e);
    @*/
/*@
    @ requires e != null && enrolments.contains(e);
    @*/
//@ public model int a;

//@ represents = 1 * 2 + 3;

//@ public model int a;

//@ represents = 1 * 2 + 3;

//@ model import org.jmlspecs.models.JMLObjectSequence;

//@ model instance JMLObjectSequence theSequence;

//@ private represents theSequence <- abstractionFunction();

/*@ pure helper @*/
//@ model import org.jmlspecs.models.JMLObjectSequence;

//@ model instance JMLObjectSequence theSequence;

//@ private represents theSequence <- abstractionFunction();

/*@ pure helper @*/
//@ model import org.jmlspecs.models.JMLObjectSequence;

//@ model instance JMLObjectSequence theSequence;

//@ private represents theSequence <- abstractionFunction();

/*@ pure @*/
//@ model import org.jmlspecs.models.JMLObjectSequence;

//@ model instance JMLObjectSequence theSequence;

//@ private represents theSequence <- abstractionFunction();

/*@ pure @*/
//@ public invariant next >= 0;

/*@ spec_public @*/
/*@ spec_public @*/
/*@ public behavior
@ ensures \result == (\forall int x; (\forall int y; 0 <= x && x < y && y < a.length; a[x] <= a[y]));
@ assignable     othing;
@ pure public static model boolean isSorted(int[] a);
 */
/*@ public normal_behavior
@ ensures next == 0 && this.indices == indices;
@ assignable     othing;
@*/
/*@ public normal_behavior
@   requires isSorted(a);
@   ensures ((\exists int x; 0 <= x && x < a.length; a[x] == v) ?  \result >= 0 && \result < a.length && a[\result] == v : \result == -1);
@	  assignable     othing;
@*/
/*@ pure @*/
/*@ loop_invariant 0 <= l && l < r && r < a.length
    @                && (\forall int x; 0 <= x && x < l; a[x] < v)
    @                && (\forall int x; r < x && x < a.length; v < a[x]);
    @ decreases r - l;
    @*/
/*@ public normal_behavior
@ requires isSorted(a) && a != indices;
@ requires next < indices.length;
@ ensures (\exists int i; i>=0 && i<a.length; a[i] == v) ? indices[\old(next)] == \result : (next == \old(next) && indices[next] == \old(indices[next]));
@ ensures (\exists int i; i>=0 && i<a.length; a[i] == v) ? a[\result] == v  : \result == -1;
@ assignable indices[next], next;
@ */
/*@
@ public exceptional_behavior
@ requires isSorted(a);
@ requires next >= indices.length;
@ requires  (\exists int i; i>=0 && i<a.length; a[i] == v);
@ signals (ArrayIndexOutOfBoundsException) true;
@ assignable     othing;
@*/
//@ public invariant next >= 0;

/*@ spec_public @*/
/*@ spec_public @*/
/*@ public behavior
@ ensures \result == (\forall int x; (\forall int y; 0 <= x && x < y && y < a.length; a[x] <= a[y]));
@ assignable     othing;
@ pure public static model boolean isSorted(int[] a);
 */
/*@ public normal_behavior
@ ensures next == 0 && this.indices == indices;
@ assignable     othing;
@*/
/*@ public normal_behavior
@   requires isSorted(a);
@   ensures ((\exists int x; 0 <= x && x < a.length; a[x] == v) ?  \result >= 0 && \result < a.length && a[\result] == v : \result == -1);
@	  assignable     othing;
@*/
/*@ pure @*/
/*@ loop_invariant 0 <= l && l < r && r < a.length
    @                && (\forall int x; 0 <= x && x < l; a[x] < v)
    @                && (\forall int x; r < x && x < a.length; v < a[x]);
    @ decreases r - l;
    @*/
/*@ public normal_behavior
@ requires isSorted(a) && a != indices;
@ requires next < indices.length;
@ ensures (\exists int i; i>=0 && i<a.length; a[i] == v) ? indices[\old(next)] == \result : (next == \old(next) && indices[next] == \old(indices[next]));
@ ensures (\exists int i; i>=0 && i<a.length; a[i] == v) ? a[\result] == v  : \result == -1;
@ assignable indices[next], next;
@ */
/*@
@ public exceptional_behavior
@ requires isSorted(a);
@ requires next >= indices.length;
@ requires  (\exists int i; i>=0 && i<a.length; a[i] == v);
@ signals (ArrayIndexOutOfBoundsException) true;
@ assignable     othing;
@*/
/*@ private normal_behavior
	  @ 	assignable values[*].x;
	  @*/
/*@
	  @ private normal_behavior
	  @ 	assignable value.*;
	  @*/
/*@
	  @ private normal_behavior
	  @ 	assignable values[*].*;
	  @*/
/*@ private normal_behavior
	  @ 	assignable values[*].x;
	  @*/
/*@
	  @ private normal_behavior
	  @ 	assignable value.*;
	  @*/
/*@
	  @ private normal_behavior
	  @ 	assignable values[*].*;
	  @*/
/*@
   	@   requires array != null;
   	@   assignable     othing;
   	@   ensures ( 0 <= \result
   	@   		&& \result < array.length
   	@   		&& array[\result] == 5)
   	@   		|| \result == array.length ;
   	@   ensures (\forall int j; 0 <= j && j < \result; array[j] != 5);
   	@*/
/*@pure@*/
/*@ loop_invariant
   		@   0 <= k && k <= array.length
   		@   && (\forall int i; 0 <= i && i < k; array[i] != 5);
   		@  decreases array.length - k;
   		@*/
/*@
   	@   requires array != null;
   	@   assignable     othing;
   	@   ensures \result == array.length || ( 0 <= \result
   	@   		&& \result < array.length
   	@   		&& array[\result] == 5)
   	@   		  ;
   	@   ensures (\forall int j; 0 <= j && j < \result; array[j] != 5);
   	@*/
/*@pure@*/
/*@ loop_invariant
   		@   0 <= k && k <= array.length
   		@   && (\forall int i; 0 <= i && i < k; array[i] != 5);
   		@  decreases array.length - k;
   		@*/
/*@
   	@   requires array != null;
   	@   assignable     othing;
   	@   ensures ( 0 <= \result
   	@   		&& \result < array.length
   	@   		&& array[\result] == 5)
   	@   		| \result == array.length ;
   	@   ensures (\forall int j; 0 <= j && j < \result; array[j] != 5);
   	@*/
/*@pure@*/
/*@ loop_invariant
   		@   0 <= k && k <= array.length
   		@   && (\forall int i; 0 <= i && i < k; array[i] != 5);
   		@  decreases array.length - k;
   		@*/
/*@
   	@   requires array != null;
   	@   assignable     othing;
   	@   ensures ( 0 <= \result
   	@   		&& \result < array.length
   	@   		&& array[\result] == 5)
   	@   		|| \result == array.length ;
   	@   ensures (\forall int j; 0 <= j && j < \result; array[j] != 5);
   	@*/
/*@pure@*/
/*@ loop_invariant
   		@   0 <= k && k <= array.length
   		@   && (\forall int i; 0 <= i && i < k; array[i] != 5);
   		@  decreases array.length - k;
   		@*/
/*@
   	@   requires array != null;
   	@   assignable     othing;
   	@   ensures \result == array.length || ( 0 <= \result
   	@   		&& \result < array.length
   	@   		&& array[\result] == 5)
   	@   		  ;
   	@   ensures (\forall int j; 0 <= j && j < \result; array[j] != 5);
   	@*/
/*@pure@*/
/*@ loop_invariant
   		@   0 <= k && k <= array.length
   		@   && (\forall int i; 0 <= i && i < k; array[i] != 5);
   		@  decreases array.length - k;
   		@*/
/*@
   	@   requires array != null;
   	@   assignable     othing;
   	@   ensures ( 0 <= \result
   	@   		&& \result < array.length
   	@   		&& array[\result] == 5)
   	@   		| \result == array.length ;
   	@   ensures (\forall int j; 0 <= j && j < \result; array[j] != 5);
   	@*/
/*@pure@*/
/*@ loop_invariant
   		@   0 <= k && k <= array.length
   		@   && (\forall int i; 0 <= i && i < k; array[i] != 5);
   		@  decreases array.length - k;
   		@*/
//@ requires b >= +a;

//@ requires b >= +a;

//@ requires b >= Math.max(0, -1 * a);

//@ requires b >= Math.max(0, -1 * a);

//@ requires b >= Math.max(0, (int)(-1.0 * a));

//@ requires b >= Math.max(0, (int)(-1.0 * a));

//@ requires b >= Math.max(0, -a);

//@ requires b >= Math.max(0, -a);

/*@ public normal_behaviour
     @  ensures
     @    a[pos1]  == \old(a[pos2]) &&
     @    a[pos2]  == \old(a[pos1]);
     @*/
/*@ public normal_behaviour
     @  ensures
     @    a[pos1]  == \old(a[pos2]) &&
     @    a[pos2]  == \old(a[pos1]);
     @*/
/*@spec_public@*/
/*@
	  @ public invariant i >= 0;
	  @*/
/*@
	  @ assignable i;
	  @*/
/*@helper@*/
/*@
	  @ assignable this.i;
	  @ requires i < Integer.MAX_VALUE;
	  @ ensures \result == i && i == \old(i) + 1;
	  @*/
/*@spec_public@*/
/*@
	  @ public invariant i >= 0;
	  @*/
/*@
	  @ assignable i;
	  @*/
/*@helper@*/
/*@
	  @ assignable this.i;
	  @ requires i < Integer.MAX_VALUE;
	  @ ensures \result == i && i == \old(i) + 1;
	  @*/
/*@spec_public@*/
/*@
	  @ public invariant i >= 0;
	  @*/
/*@
	  @ assignable i;
	  @ signals (Exception e) false;
	  @*/
/*@helper@*/
/*@
	  @ assignable this.i;
	  @ requires i < Integer.MAX_VALUE;
	  @ ensures \result == i && i == \old(i) + 1;
	  @*/
/*@spec_public@*/
/*@
	  @ public invariant i >= 0;
	  @*/
/*@
	  @ assignable i;
	  @ signals (Exception e) false;
	  @*/
/*@helper@*/
/*@
	  @ assignable this.i;
	  @ requires i < Integer.MAX_VALUE;
	  @ ensures \result == i && i == \old(i) + 1;
	  @*/
/*@ spec_public @*/
/*@ public invariant
@ (* A COMPLETER *);
@*/
//@ requires (* A COMPLETER *);

//@ ensures (* A COMPLETER *);

//@ requires (* A COMPLETER *);

//@ ensures (* A COMPLETER *);

//@ ensures (* A COMPLETER *);

/*@ pure @*/
/*@ ensures \result == true <==>
  @   (n > 1 ) && (\forall int d; 2<= d && d<= n-1; n % d != 0);
  @*/
/*@ pure helper @*/
/*@ spec_public @*/
/*@ public invariant
@ (* A COMPLETER *);
@*/
//@ requires (* A COMPLETER *);

//@ ensures (* A COMPLETER *);

//@ requires (* A COMPLETER *);

//@ ensures (* A COMPLETER *);

//@ ensures (* A COMPLETER *);

/*@ pure @*/
/*@ ensures \result == true <==>
  @   (n > 1 ) && (\forall int d; 2<= d && d<= n-1; n % d != 0);
  @*/
/*@ pure helper @*/
//@ requires y != 0;

//@ ensures Math.abs(\result * y) <= Math.abs(x);

//@ ensures Math.abs(x) - Math.abs(\result * y) < Math.abs(y);

//@ ensures \result != 0 ==> ((\result >= 0) <==> (x>= 0 <==> y>=0));

//@ requires y != 0;

//@ ensures Math.abs(\result * y) <= Math.abs(x);

//@ ensures Math.abs(x) - Math.abs(\result * y) < Math.abs(y);

//@ ensures \result != 0 ==> ((\result >= 0) <==> (x>= 0 <==> y>=0));

//@ public normal_behavior

//@   requires n > 0;

/*@ pure helper @*/
//@ assert maxInt * maxInt <= n && n < (maxInt+1)*(maxInt+1);

//@ loop_invariant 1 <= i && i <= maxInt + 1;

//@ loop_invariant (\forall int j; 1 <= j && j < i; (n%j) != 0);

//@ loop_decreases maxInt + 1 - i;

//@ public normal_behavior

//@   requires n > 0;

/*@ pure helper @*/
//@ assert maxInt * maxInt <= n && n < (maxInt+1)*(maxInt+1);

//@ loop_invariant 1 <= i && i <= maxInt + 1;

//@ loop_invariant (\forall int j; 1 <= j && j < i; (n%j) != 0);

//@ loop_decreases maxInt + 1 - i;

//@ requires is.size() > 0;

//@ assert is.contains(k);

//@ requires is.size() > 0;

//@ assert is.contains(k);

//@ model import org.jmlspecs.lang.JMLDataGroup;

//@ public instance model JMLDataGroup state;

/*@ pure @*/
//@ requires size() > 0;

//@ assignable state;

//@ ensures contains(\result);

//@ assignable state;

//@ ensures contains(i) && size() >= \old(size());

//@ assignable state;

//@ ensures !contains(i) && size() <= \old(size());

//@ ensures \result >= 0;

/*@ pure @*/
//@ model import org.jmlspecs.lang.JMLDataGroup;

//@ public instance model JMLDataGroup state;

/*@ pure @*/
//@ requires size() > 0;

//@ assignable state;

//@ ensures contains(\result);

//@ assignable state;

//@ ensures contains(i) && size() >= \old(size());

//@ assignable state;

//@ ensures !contains(i) && size() <= \old(size());

//@ ensures \result >= 0;

/*@ pure @*/
//@ spec_public

//@ in a;

//@ spec_public

//@ in a;

/*@ spec_public @*/
//@ in state;

//@ public invariant Integer.MIN_VALUE <= lb && lb <= Integer.MAX_VALUE;

//@ public invariant lb <= ub+1;

//@ public invariant Integer.MIN_VALUE <= ub+1 && ub <= Integer.MAX_VALUE;

//@ requires l <= ((long)u)+1;

//@ assignable state;

//@ ensures lb == (long)l && ub == (long)u;

//@ also

//@   ensures \result <==> (lb <= i && i <= ub);

/*@ pure @*/
//@ assert (i < lb || i > ub);

//@ assume i <= ub;

//@ assert contains(i);

//@ assert lb < \old(lb) && ub == \old(ub);

//@ assert i > ub && lb <= i;

//@ assert contains(i);

//@ assert ub > \old(ub) &&     ot_assigned(lb);

//@ assert lb <= i && i <= ub;

//@ assert !contains(i);

/*@ also
      @   ensures \result == ub - lb - 1;
      @*/
/*@ pure @*/
/*@ spec_public @*/
//@ in state;

//@ public invariant Integer.MIN_VALUE <= lb && lb <= Integer.MAX_VALUE;

//@ public invariant lb <= ub+1;

//@ public invariant Integer.MIN_VALUE <= ub+1 && ub <= Integer.MAX_VALUE;

//@ requires l <= ((long)u)+1;

//@ assignable state;

//@ ensures lb == (long)l && ub == (long)u;

//@ also

//@   ensures \result <==> (lb <= i && i <= ub);

/*@ pure @*/
//@ assert (i < lb || i > ub);

//@ assume i <= ub;

//@ assert contains(i);

//@ assert lb < \old(lb) && ub == \old(ub);

//@ assert i > ub && lb <= i;

//@ assert contains(i);

//@ assert ub > \old(ub) &&     ot_assigned(lb);

//@ assert lb <= i && i <= ub;

//@ assert !contains(i);

/*@ also
      @   ensures \result == ub - lb - 1;
      @*/
/*@ pure @*/
//@ model import org.jmlspecs.lang.JMLDataGroup;

//@ public instance model JMLDataGroup state;

/*@ pure @*/
//@ requires size() > 0;

//@ assignable state;

//@ ensures contains(\result);

//@ assignable state;

//@ ensures contains(i);

//@ ensures size() >= \old(size());

//@ assignable state;

//@ ensures !contains(i) && size() <= \old(size());

//@ ensures \result >= 0;

/*@ pure @*/
//@ model import org.jmlspecs.lang.JMLDataGroup;

//@ public instance model JMLDataGroup state;

/*@ pure @*/
//@ requires size() > 0;

//@ assignable state;

//@ ensures contains(\result);

//@ assignable state;

//@ ensures contains(i);

//@ ensures size() >= \old(size());

//@ assignable state;

//@ ensures !contains(i) && size() <= \old(size());

//@ ensures \result >= 0;

/*@ pure @*/
/*@ spec_public @*/
/*@ spec_public @*/
//@ public invariant Integer.MIN_VALUE <= lb && lb <= Integer.MAX_VALUE;

//@ requires i < Integer.MAX_VALUE;

//@ assert ib <= i;

//@ assert ib == i+1;

//@ assert ib > i;

//@ requires il < Integer.MAX_VALUE;

//@ assert lb <= il;

//@ assert lb == il+1;

//@ assert lb > il;

/*@ spec_public @*/
/*@ spec_public @*/
//@ public invariant Integer.MIN_VALUE <= lb && lb <= Integer.MAX_VALUE;

//@ requires i < Integer.MAX_VALUE;

//@ assert ib <= i;

//@ assert ib == i+1;

//@ assert ib > i;

//@ requires il < Integer.MAX_VALUE;

//@ assert lb <= il;

//@ assert lb == il+1;

//@ assert lb > il;

/*@ spec_public @*/
//@ public invariant Integer.MIN_VALUE <= lb && lb <= Integer.MAX_VALUE;

//@ public invariant Integer.MIN_VALUE <= ub+1 && ub <= Integer.MAX_VALUE;

//@ public normal_behavior

//@   requires l <= ((long)u)+1;

//@   assignable     othing;

//@   ensures lb == (long)l && ub == (long)u;

//@ ensures \result == ub;

/*@ pure @*/
//@ ensures \result == ub - lb - 1;

/*@ pure @*/
/*@ spec_public @*/
//@ public invariant Integer.MIN_VALUE <= lb && lb <= Integer.MAX_VALUE;

//@ public invariant Integer.MIN_VALUE <= ub+1 && ub <= Integer.MAX_VALUE;

//@ public normal_behavior

//@   requires l <= ((long)u)+1;

//@   assignable     othing;

//@   ensures lb == (long)l && ub == (long)u;

//@ ensures \result == ub;

/*@ pure @*/
//@ ensures \result == ub - lb - 1;

/*@ pure @*/
//@ spec_public

//@ in a;

//@ spec_public

//@ in a;

/*@ requires p instanceof Doctor
    @       || p instanceof Nurse; @*/
/*@ requires p instanceof Doctor
    @       || p instanceof Nurse; @*/
/*@ spec_public @*/
/*@ pure @*/
/*@ spec_public @*/
/*@ pure @*/
//@ public invariant a.length > 1;

//@ requires a[0] < Integer.MAX_VALUE;

//@ requires a[0] < Integer.MAX_VALUE;

//@ public invariant a.length > 1;

//@ requires a[0] < Integer.MAX_VALUE;

//@ requires a[0] < Integer.MAX_VALUE;

/*@ spec_public @*/
//@ requires count < Integer.MAX_VALUE;

//@ requires count < Integer.MAX_VALUE;

/*@ pure @*/
/*@ spec_public @*/
//@ requires count < Integer.MAX_VALUE;

//@ requires count < Integer.MAX_VALUE;

/*@ pure @*/
//@ ensures \result == this.ok(i);

//@ ensures \result == ok(i);

//@ pure

//@ also ensures \result == (i>=lb);

//@ ensures \result == this.ok(i);

//@ ensures \result == ok(i);

//@ pure

//@ also ensures \result == (i>=lb);

_by_default

//@ private static invariant zz == 1;

//@ private invariant aa == 3;

//@ public normal_behavior

//@   requires i >= 0;

//@ also public exceptional_behavior

//@   requires i < 0;

//@   signals_only RuntimeException;

//@ private invariant aa == 3;

//@ public normal_behavior

//@   requires i >= 0;

//@ also public exceptional_behavior

//@   requires i < 0;

//@   signals_only RuntimeException;

//@ pure

//@ private static invariant zz == 1;

//@ private invariant aa == 3;

//@ public normal_behavior

//@   requires i >= 0;

//@ also public exceptional_behavior

//@   requires i < 0;

//@   signals_only RuntimeException;

//@ private invariant aa == 3;

//@ public normal_behavior

//@   requires i >= 0;

//@ pure

//@ private invariant aa == 3;

//@ public normal_behavior

//@   requires i >= 0;

//@ pure

_by_default

//@ private static invariant zz == 1;

//@ private invariant aa == 3;

//@ public normal_behavior

//@   requires i >= 0;

//@ also public exceptional_behavior

//@   requires i < 0;

//@   signals_only RuntimeException;

//@ private invariant aa == 3;

//@ public normal_behavior

//@   requires i >= 0;

//@ also public exceptional_behavior

//@   requires i < 0;

//@   signals_only RuntimeException;

//@ pure

//@ private static invariant zz == 1;

//@ private invariant aa == 3;

//@ public normal_behavior

//@   requires i >= 0;

//@ also public exceptional_behavior

//@   requires i < 0;

//@   signals_only RuntimeException;

//@ private invariant aa == 3;

//@ public normal_behavior

//@   requires i >= 0;

//@ pure

//@ private invariant aa == 3;

//@ public normal_behavior

//@   requires i >= 0;

//@ pure

//@ spec_public

//@ in a;

//@ spec_public

//@ in a;

_by_default immutable

//@ nullable spec_public

//@ public normal_behavior

//@   { return value != null; }

//@ pure function

_by_default immutable

//@ nullable spec_public

//@ public normal_behavior

//@   { return value != null; }

//@ pure function

_by_default immutable

//@ nullable

//@ public normal_behavior

//@   ensures \result == (value != null);

//@ pure function

_by_default immutable

//@ nullable

//@ public normal_behavior

//@   ensures \result == (value != null);

//@ pure function

//@ nullable

//@ public normal_behavior

//@   { return value != null; }

//@ pure

//@ nullable

//@ public normal_behavior

//@   { return value != null; }

//@ pure


//@ assume o.isPresent();

//@ assert o.value != null;


//@ assert o.isPresent() ==> (o.value != null);


//@ assert (o.value != null);


//@ assume (o.value != null);

//@ assert o.isPresent();


//@ assume o.nn();

//@ assert o.value != null;


//@ assert o.nn() ==> (o.value != null);


//@ assert (o.value != null);


//@ assume (o.value != null);

//@ assert o.nn();


//@ assume o.nn();

//@ assert o.value != null;


//@ assert o.nn() ==> (o.value != null);


//@ assert (o.value != null);


//@ assume (o.value != null);

//@ assert o.nn();


//@ assume o.nn();

//@ assert o.value != null;


//@ assert o.nn() ==> (o.value != null);


//@ assert (o.value != null);


//@ assume (o.value != null);

//@ assert o.nn();


//@ assume o.isPresent();

//@ assert o.value != null;


//@ assert o.isPresent() ==> (o.value != null);


//@ assert (o.value != null);


//@ assume (o.value != null);

//@ assert o.isPresent();


//@ assume o.nn();

//@ assert o.value != null;


//@ assert o.nn() ==> (o.value != null);


//@ assert (o.value != null);


//@ assume (o.value != null);

//@ assert o.nn();


//@ assume o.nn();

//@ assert o.value != null;


//@ assert o.nn() ==> (o.value != null);


//@ assert (o.value != null);


//@ assume (o.value != null);

//@ assert o.nn();


//@ assume o.nn();

//@ assert o.value != null;


//@ assert o.nn() ==> (o.value != null);


//@ assert (o.value != null);


//@ assume (o.value != null);

//@ assert o.nn();

//@ public invariant ac.zero() == 0;

//@ public behavior

//@     requires true;

//@ assert 0 <= ac.x;

//@ public invariant 0 <= x;

//@ public normal_behavior

//@   ensures \result == 0;

//@ pure

//@ public invariant ac.zero() == 0;

//@ public behavior

//@     requires true;

//@ assert 0 <= ac.x;

//@ public invariant 0 <= x;

//@ public normal_behavior

//@   ensures \result == 0;

//@ pure

//@ public invariant ac.zero() == 0;

//@ public behavior

//@     requires true;

//@ assert 0 <= ac.x;

//@ public invariant 0 <= x;

//@ public normal_behavior

//@   ensures \result == 0;

//@ pure

//@ public invariant ac.zero() == 0;

//@ public behavior

//@     requires true;

//@ assert 0 <= ac.x;

//@ public invariant 0 <= x;

//@ public normal_behavior

//@   ensures \result == 0;

//@ pure

//@ pure

//@ pure

//@ pure

//@ pure

//@ public normal_behavior

//@      requires i != Integer.MIN_VALUE;

//@   ensures i == F.finverse( F.f( i ) );

//@ model public static pure void testInverse(int i) { }

//@ ensures \result == -i-1; pure

//@  ensures \result == ~i; pure

//@ assert ~i == -i -1;

//@ assert ~0 == -1;

//@ assert ~1 == -2;

//@ assert ~-1 == 0;

//@ assert ~Integer.MIN_VALUE == Integer.MAX_VALUE;

//@ assert Integer.MIN_VALUE == ~Integer.MAX_VALUE;

//@ assert ~~i == i;

//@ assert ~i == -i -1;

//@ assert ~0 == -1;

//@ assert ~1 == -2;

//@ assert ~-1 == 0;

//@ assert ~Long.MIN_VALUE == Long.MAX_VALUE;

//@ assert Long.MIN_VALUE == ~Long.MAX_VALUE;

//@ assert ~~i == i;

//@ public normal_behavior

//@      requires i != Integer.MIN_VALUE;

//@   ensures i == F.finverse( F.f( i ) );

//@ model public static pure void testInverse(int i) { }

//@ ensures \result == -i-1; pure

//@  ensures \result == ~i; pure

//@ assert ~i == -i -1;

//@ assert ~0 == -1;

//@ assert ~1 == -2;

//@ assert ~-1 == 0;

//@ assert ~Integer.MIN_VALUE == Integer.MAX_VALUE;

//@ assert Integer.MIN_VALUE == ~Integer.MAX_VALUE;

//@ assert ~~i == i;

//@ assert ~i == -i -1;

//@ assert ~0 == -1;

//@ assert ~1 == -2;

//@ assert ~-1 == 0;

//@ assert ~Long.MIN_VALUE == Long.MAX_VALUE;

//@ assert Long.MIN_VALUE == ~Long.MAX_VALUE;

//@ assert ~~i == i;

//@requires (x.length==4);

//@ensures (\result>=-1) && (\result<4);

//@ensures (\result>=0)==>x[\result];

//@ensures (\result==-1)==>(\forall int i; (0<=i) && (i<4); !x[i]);

//@loop_invariant 0<=i && i<=4;

//@requires (x.length==4);

//@ensures (\result>=-1) && (\result<4);

//@ensures (\result>=0)==>x[\result];

//@ensures (\result==-1)==>(\forall int i; (0<=i) && (i<4); !x[i]);

//@loop_invariant 0<=i && i<=4;

//@ loop_invariant 10 <= i && i <= 15;

//@ loop_invariant i == \count + 10;

//@ show \old(i,LoopInit), \old(i,LoopBodyBegin);

//@ assert \old(i,LoopInit) == 10;

//@ assert \old(i,LoopBodyBegin) == \count + 10;

//@ loop_invariant 10 <= i && i <= 15;

//@ loop_invariant i == \count + 10;

//@ show \old(i,LoopInit), \old(i,LoopBodyBegin);

//@ assert \old(i,LoopInit) == 10;

//@ assert \old(i,LoopBodyBegin) == \count + 10;

//@ public invariant addresses.length == 100;

//@ ensures (\forall int i; i >= 0 && i < 100; addresses[i] != null);

//@ ensures (\forall int j,k; 0<=j && j<100 && 0<=k && k<j; addresses[j] != addresses[k]);

//@ ensures (\forall int j; 0<=j && j<100; addresses[j].address == j);

//@ maintaining i >= 0 && i <= 100;

//@ loop_invariant (\forall int j; 0<=j && j<i; addresses[j] != null);

//@ loop_invariant (\forall int j; 0<=j && j<i; \fresh(addresses[j],LoopInit));

//@ loop_invariant (\forall int j; 0<=j && j<i; (\forall int k; 0<=k && k<j; addresses[j] != addresses[k]));

//@ decreasing 100 - i;

//@ havoc jj;

//@ assume 0 <= jj && jj < i ;

//@ show jj,i,addresses[jj],addresses[i], \fresh(addresses[jj],LoopBodyBegin), \fresh(addresses[i],LoopBodyBegin);

//@ assert addresses[i] != addresses[jj];

//@ assert !\fresh(addresses[jj], LoopBodyBegin);

//@ assert \fresh(addresses[i], LoopBodyBegin);

//@ assert (\forall int j; 0<=j && j<=i; (\forall int k; 0<=k && k<j; addresses[j] != addresses[k]));

//@ maintaining i >= 0 && i <= 100;

//@ loop_invariant (\forall int j; 0<=j && j<i; addresses[j].address == j);

//@ decreasing 100 - i;

//@ public invariant addresses.length == 100;

//@ ensures (\forall int i; i >= 0 && i < 100; addresses[i] != null);

//@ ensures (\forall int j,k; 0<=j && j<100 && 0<=k && k<j; addresses[j] != addresses[k]);

//@ ensures (\forall int j; 0<=j && j<100; addresses[j].address == j);

//@ maintaining i >= 0 && i <= 100;

//@ loop_invariant (\forall int j; 0<=j && j<i; addresses[j] != null);

//@ loop_invariant (\forall int j; 0<=j && j<i; \fresh(addresses[j],LoopInit));

//@ loop_invariant (\forall int j; 0<=j && j<i; (\forall int k; 0<=k && k<j; addresses[j] != addresses[k]));

//@ decreasing 100 - i;

//@ havoc jj;

//@ assume 0 <= jj && jj < i ;

//@ show jj,i,addresses[jj],addresses[i], \fresh(addresses[jj],LoopBodyBegin), \fresh(addresses[i],LoopBodyBegin);

//@ assert addresses[i] != addresses[jj];

//@ assert !\fresh(addresses[jj], LoopBodyBegin);

//@ assert \fresh(addresses[i], LoopBodyBegin);

//@ assert (\forall int j; 0<=j && j<=i; (\forall int k; 0<=k && k<j; addresses[j] != addresses[k]));

//@ maintaining i >= 0 && i <= 100;

//@ loop_invariant (\forall int j; 0<=j && j<i; addresses[j].address == j);

//@ decreasing 100 - i;

//@ pure

//@ pure

//@ private exceptional_behavior

//@     signals (IndexOutOfBoundsException ex) true;

//@ private behavior

//@     ensures true;

//@ private exceptional_behavior

//@     signals (IndexOutOfBoundsException ex) true;

//@ private behavior

//@     ensures true;

//@ private exceptional_behavior

//@     signals (IndexOutOfBoundsException ex) true;

//@ private behavior

//@     ensures true;

//@ assert ex.toStringDefined;

//@ private exceptional_behavior

//@     signals (IndexOutOfBoundsException ex) true;

//@ private behavior

//@     ensures true;

//@ assert ex.toStringDefined;

_by_default

//@ public normal_behavior

//@   ensures value == v && other == o;

//@ pure

//@ public normal_behavior

//@   assignable value;

//@   ensures value == v;

//@ assume t.value == 1;

//@ assume t.other == 2;

//@ assert t.other == 2;

//@ assert t.value == 3;

//@ assume t.value == 1;

//@ assume t.other == 2;

//@ assert t.other == 2;

//@ assert t.value == 3;

//@ requires t.length > 10;

//@ requires t[0] != null;

//@ assume t[0].value == 1;

//@ assume t[0].other == 2;

//@ assert t[0].other == 2;

//@ assert t[0].value == 3;

//@ requires t.length > 10;

//@ requires t[0] != null;

//@ assume t[0].value == 1;

//@ assume t[0].other == 2;

//@ assert t[0].other == 2;

//@ assert t[0].value == 3;

//@ requires t.length > 10;

//@ requires t[0] != null;

//@ requires t[0].length > 10;

//@ requires t[0][0] != null;

//@ assume t[0][0].value == 1;

//@ assume t[0][0].other == 2;

//@ assert t[0][0].other == 2;

//@ assert t[0][0].value == 3;

//@ requires t.length > 10;

//@ requires t[0] != null;

//@ requires t[0].length > 10;

//@ requires t[0][0] != null;

//@ assume t[0][0].value == 1;

//@ assume t[0][0].other == 2;

//@ assert t[0][0].other == 2;

//@ assert t[0][0].value == 3;

//@ assume t.value == 1;

//@ assume this.value == 1;

//@ assert this.value == 1; // ERROR - should fail

//@ assert t.value == 3;

//@ requires t != this;

//@ assume t.value == 1;

//@ assume this.value == 1;

//@ assert this.value == 1;

//@ assert t.value == 3;

//@ requires t.length > 10;

//@ requires t[0] != null;

//@ requires t[1] != null;

//@ assume t[0].value == 1;

//@ assume t[1].value == 1;

//@ assert t[1].value == 1;  // Fails

//@ assert t[0].value == 3;

//@ requires t.length > 10;

//@ requires t[0] != null;

//@ requires t[1] != null;

//@ assume t[0].value == 1;

//@ assume t[1].value == 1;

//@ assume t[0] != t[1];

//@ assert t[1].value == 1;

//@ assert t[0].value == 3;

//@ requires t.length > 10;

//@ requires t[0] != null;

//@ requires t[1] != null;

//@ assume t[0].value == 1;

//@ assume t[1].value == 2;

//@ assert t[1].value == 2;

//@ assert t[0].value == 3;

_by_default

//@ public normal_behavior

//@   ensures value == v && other == o;

//@ pure

//@ public normal_behavior

//@   assignable value;

//@   ensures value == v;

//@ assume t.value == 1;

//@ assume t.other == 2;

//@ assert t.other == 2;

//@ assert t.value == 3;

//@ assume t.value == 1;

//@ assume t.other == 2;

//@ assert t.other == 2;

//@ assert t.value == 3;

//@ requires t.length > 10;

//@ requires t[0] != null;

//@ assume t[0].value == 1;

//@ assume t[0].other == 2;

//@ assert t[0].other == 2;

//@ assert t[0].value == 3;

//@ requires t.length > 10;

//@ requires t[0] != null;

//@ assume t[0].value == 1;

//@ assume t[0].other == 2;

//@ assert t[0].other == 2;

//@ assert t[0].value == 3;

//@ requires t.length > 10;

//@ requires t[0] != null;

//@ requires t[0].length > 10;

//@ requires t[0][0] != null;

//@ assume t[0][0].value == 1;

//@ assume t[0][0].other == 2;

//@ assert t[0][0].other == 2;

//@ assert t[0][0].value == 3;

//@ requires t.length > 10;

//@ requires t[0] != null;

//@ requires t[0].length > 10;

//@ requires t[0][0] != null;

//@ assume t[0][0].value == 1;

//@ assume t[0][0].other == 2;

//@ assert t[0][0].other == 2;

//@ assert t[0][0].value == 3;

//@ assume t.value == 1;

//@ assume this.value == 1;

//@ assert this.value == 1; // ERROR - should fail

//@ assert t.value == 3;

//@ requires t != this;

//@ assume t.value == 1;

//@ assume this.value == 1;

//@ assert this.value == 1;

//@ assert t.value == 3;

//@ requires t.length > 10;

//@ requires t[0] != null;

//@ requires t[1] != null;

//@ assume t[0].value == 1;

//@ assume t[1].value == 1;

//@ assert t[1].value == 1;  // Fails

//@ assert t[0].value == 3;

//@ requires t.length > 10;

//@ requires t[0] != null;

//@ requires t[1] != null;

//@ assume t[0].value == 1;

//@ assume t[1].value == 1;

//@ assume t[0] != t[1];

//@ assert t[1].value == 1;

//@ assert t[0].value == 3;

//@ requires t.length > 10;

//@ requires t[0] != null;

//@ requires t[1] != null;

//@ assume t[0].value == 1;

//@ assume t[1].value == 2;

//@ assert t[1].value == 2;

//@ assert t[0].value == 3;

//@ model import org.jmlspecs.models.JMLDouble;

/*@ pure @*/
//@ public ghost static final double tolerance = 0.005;

/*@ ensures JMLDouble.approximatelyEqualTo(
      @             magnitude()*StrictMath.cos(angle()),
      @             \result,
      @             tolerance);
      @*/
/*@ ensures JMLDouble.approximatelyEqualTo(
      @             \result,
      @             magnitude()*StrictMath.sin(angle()),
      @             tolerance);
      @*/
/*@ ensures JMLDouble.approximatelyEqualTo(
      @             StrictMath.sqrt(realPart()*realPart()
      @                       + imaginaryPart()*imaginaryPart()),
      @             \result,
      @             tolerance);
      @*/
/*@ ensures JMLDouble.approximatelyEqualTo(
      @             StrictMath.atan2(imaginaryPart(), realPart()),
      @             \result,
      @             tolerance);
      @*/
//@ requires_redundantly b != null;

//@ ensures_redundantly \result != null;

/*@ ensures JMLDouble.approximatelyEqualTo(
      @             this.realPart() + b.realPart(),
      @             \result.realPart(),
      @             tolerance);
      @ ensures JMLDouble.approximatelyEqualTo(
      @             this.imaginaryPart() + b.imaginaryPart(),
      @             \result.imaginaryPart(),
      @             tolerance);
      @*/
//@ requires_redundantly b != null;

//@ ensures_redundantly \result != null;

/*@ ensures JMLDouble.approximatelyEqualTo(
      @             this.realPart() - b.realPart(),
      @             \result.realPart(),
      @             tolerance);
      @ ensures JMLDouble.approximatelyEqualTo(
      @             this.imaginaryPart() - b.imaginaryPart(),
      @             \result.imaginaryPart(),
      @             tolerance);
      @*/
/*@ public model pure boolean similarAngle(double ang1, double ang2) {
      @    ang1 = positiveRemainder(ang1, 2*StrictMath.PI);
      @    ang2 = positiveRemainder(ang2, 2*StrictMath.PI);
      @    return JMLDouble.approximatelyEqualTo(ang1, ang2, tolerance);
      @ }
      @*/
//@ axiom (\forall double d,dd; dd > 0.0; d%dd > -dd && d%dd < dd);

//@ axiom (\forall double d,dd; d > -dd ==> d+dd > 0.0);

/*@ requires d > 0.0;
      @ ensures \result >= 0.0;
      @ public model pure double positiveRemainder(double n, double d) {
      @    n = n % d;
      @    if (n < 0) {
      @       n += d;
      @    }
      @    return n;
      @ }
      @*/
/*@   requires_redundantly b != null;
      @   requires !Double.isNaN(this.magnitude() * b.magnitude());
      @   requires !Double.isNaN(this.angle()) && !Double.isNaN(b.angle());
      @   ensures_redundantly \result != null;
      @   ensures JMLDouble.approximatelyEqualTo(
      @               this.magnitude() * b.magnitude(),
      @               \result.magnitude(),
      @               tolerance);
      @   ensures similarAngle(this.angle() + b.angle(),
      @                        \result.angle());
      @ also
      @   requires_redundantly b != null;
      @   requires Double.isNaN(this.magnitude() * b.magnitude())
      @         || Double.isNaN(this.angle()) || Double.isNaN(b.angle());
      @   ensures Double.isNaN(\result.realPart());
      @   ensures \result.imaginaryPart() == 0.0;
      @*/
/*@   requires_redundantly b != null;
      @   requires !Double.isNaN(this.magnitude() / b.magnitude());
      @   requires !Double.isNaN(this.angle()) && !Double.isNaN(b.angle());
      @   ensures_redundantly \result != null;
      @   ensures JMLDouble.approximatelyEqualTo(
      @               this.magnitude() / b.magnitude(),
      @               \result.magnitude(),
      @               tolerance);
      @   ensures similarAngle(this.angle() - b.angle(),
      @                        \result.angle());
      @ also
      @   requires_redundantly b != null;
      @   requires Double.isNaN(this.magnitude() / b.magnitude())
      @         || Double.isNaN(this.angle()) || Double.isNaN(b.angle());
      @   ensures Double.isNaN(\result.realPart());
      @   ensures \result.imaginaryPart() == 0.0;
      @*/
/*@ also
      @ ensures \result
      @     <==> o instanceof Complex
      @          && this.realPart() == ((Complex)o).realPart()
      @          && this.imaginaryPart() == ((Complex)o).imaginaryPart();
      @ ensures \result
      @     <==> o instanceof Complex
      @          && this.magnitude() == ((Complex)o).magnitude()
      @          && this.angle() == ((Complex)o).angle();
      @*/
/*@ nullable @*/
//@ model import org.jmlspecs.models.JMLDouble;

/*@ pure @*/
//@ public ghost static final double tolerance = 0.005;

/*@ ensures JMLDouble.approximatelyEqualTo(
      @             magnitude()*StrictMath.cos(angle()),
      @             \result,
      @             tolerance);
      @*/
/*@ ensures JMLDouble.approximatelyEqualTo(
      @             \result,
      @             magnitude()*StrictMath.sin(angle()),
      @             tolerance);
      @*/
/*@ ensures JMLDouble.approximatelyEqualTo(
      @             StrictMath.sqrt(realPart()*realPart()
      @                       + imaginaryPart()*imaginaryPart()),
      @             \result,
      @             tolerance);
      @*/
/*@ ensures JMLDouble.approximatelyEqualTo(
      @             StrictMath.atan2(imaginaryPart(), realPart()),
      @             \result,
      @             tolerance);
      @*/
//@ requires_redundantly b != null;

//@ ensures_redundantly \result != null;

/*@ ensures JMLDouble.approximatelyEqualTo(
      @             this.realPart() + b.realPart(),
      @             \result.realPart(),
      @             tolerance);
      @ ensures JMLDouble.approximatelyEqualTo(
      @             this.imaginaryPart() + b.imaginaryPart(),
      @             \result.imaginaryPart(),
      @             tolerance);
      @*/
//@ requires_redundantly b != null;

//@ ensures_redundantly \result != null;

/*@ ensures JMLDouble.approximatelyEqualTo(
      @             this.realPart() - b.realPart(),
      @             \result.realPart(),
      @             tolerance);
      @ ensures JMLDouble.approximatelyEqualTo(
      @             this.imaginaryPart() - b.imaginaryPart(),
      @             \result.imaginaryPart(),
      @             tolerance);
      @*/
/*@ public model pure boolean similarAngle(double ang1, double ang2) {
      @    ang1 = positiveRemainder(ang1, 2*StrictMath.PI);
      @    ang2 = positiveRemainder(ang2, 2*StrictMath.PI);
      @    return JMLDouble.approximatelyEqualTo(ang1, ang2, tolerance);
      @ }
      @*/
//@ axiom (\forall double d,dd; dd > 0.0; d%dd > -dd && d%dd < dd);

//@ axiom (\forall double d,dd; d > -dd ==> d+dd > 0.0);

/*@ requires d > 0.0;
      @ ensures \result >= 0.0;
      @ public model pure double positiveRemainder(double n, double d) {
      @    n = n % d;
      @    if (n < 0) {
      @       n += d;
      @    }
      @    return n;
      @ }
      @*/
/*@   requires_redundantly b != null;
      @   requires !Double.isNaN(this.magnitude() * b.magnitude());
      @   requires !Double.isNaN(this.angle()) && !Double.isNaN(b.angle());
      @   ensures_redundantly \result != null;
      @   ensures JMLDouble.approximatelyEqualTo(
      @               this.magnitude() * b.magnitude(),
      @               \result.magnitude(),
      @               tolerance);
      @   ensures similarAngle(this.angle() + b.angle(),
      @                        \result.angle());
      @ also
      @   requires_redundantly b != null;
      @   requires Double.isNaN(this.magnitude() * b.magnitude())
      @         || Double.isNaN(this.angle()) || Double.isNaN(b.angle());
      @   ensures Double.isNaN(\result.realPart());
      @   ensures \result.imaginaryPart() == 0.0;
      @*/
/*@   requires_redundantly b != null;
      @   requires !Double.isNaN(this.magnitude() / b.magnitude());
      @   requires !Double.isNaN(this.angle()) && !Double.isNaN(b.angle());
      @   ensures_redundantly \result != null;
      @   ensures JMLDouble.approximatelyEqualTo(
      @               this.magnitude() / b.magnitude(),
      @               \result.magnitude(),
      @               tolerance);
      @   ensures similarAngle(this.angle() - b.angle(),
      @                        \result.angle());
      @ also
      @   requires_redundantly b != null;
      @   requires Double.isNaN(this.magnitude() / b.magnitude())
      @         || Double.isNaN(this.angle()) || Double.isNaN(b.angle());
      @   ensures Double.isNaN(\result.realPart());
      @   ensures \result.imaginaryPart() == 0.0;
      @*/
/*@ also
      @ ensures \result
      @     <==> o instanceof Complex
      @          && this.realPart() == ((Complex)o).realPart()
      @          && this.imaginaryPart() == ((Complex)o).imaginaryPart();
      @ ensures \result
      @     <==> o instanceof Complex
      @          && this.magnitude() == ((Complex)o).magnitude()
      @          && this.angle() == ((Complex)o).angle();
      @*/
/*@ nullable @*/
/*@ pure @*/
/*@ nullable @*/
/*@ pure @*/
/*@ nullable @*/
/*@ pure @*/
/*@   requires mag >= 0 && Double.NEGATIVE_INFINITY < ang
      @         && ang < Double.POSITIVE_INFINITY;
      @   ensures this.magnitude() == mag;
      @   ensures this.angle() == standardizeAngle(ang);
      @ also
      @   requires mag < 0 && Double.NEGATIVE_INFINITY < ang
      @         && ang < Double.POSITIVE_INFINITY;
      @   ensures this.magnitude() == - mag;
      @   ensures this.angle() == standardizeAngle(ang+StrictMath.PI);
      @ also
      @   requires Double.isNaN(mag) || Double.isNaN(ang)
      @            || Double.NEGATIVE_INFINITY == ang
      @            || ang == Double.POSITIVE_INFINITY;
      @   signals_only IllegalArgumentException;
      @*/
/*@   requires Double.NEGATIVE_INFINITY < rad
      @            && rad < Double.POSITIVE_INFINITY;
      @   ensures -StrictMath.PI <= \result && \result <= StrictMath.PI;
      @ also
      @   requires Double.isNaN(rad) || Double.NEGATIVE_INFINITY == rad
      @            || rad == Double.POSITIVE_INFINITY;
      @   signals_only IllegalArgumentException;
      @*/
/*@ pure @*/
/*@ pure @*/
/*@   requires mag >= 0 && Double.NEGATIVE_INFINITY < ang
      @         && ang < Double.POSITIVE_INFINITY;
      @   ensures this.magnitude() == mag;
      @   ensures this.angle() == standardizeAngle(ang);
      @ also
      @   requires mag < 0 && Double.NEGATIVE_INFINITY < ang
      @         && ang < Double.POSITIVE_INFINITY;
      @   ensures this.magnitude() == - mag;
      @   ensures this.angle() == standardizeAngle(ang+StrictMath.PI);
      @ also
      @   requires Double.isNaN(mag) || Double.isNaN(ang)
      @            || Double.NEGATIVE_INFINITY == ang
      @            || ang == Double.POSITIVE_INFINITY;
      @   signals_only IllegalArgumentException;
      @*/
/*@   requires Double.NEGATIVE_INFINITY < rad
      @            && rad < Double.POSITIVE_INFINITY;
      @   ensures -StrictMath.PI <= \result && \result <= StrictMath.PI;
      @ also
      @   requires Double.isNaN(rad) || Double.NEGATIVE_INFINITY == rad
      @            || rad == Double.POSITIVE_INFINITY;
      @   signals_only IllegalArgumentException;
      @*/
/*@ pure @*/
/*@ pure @*/
//@ ensures realPart() == 0.0 && imaginaryPart() == 0.0;

/*@   requires !Double.isNaN(re);
      @   ensures realPart() == re && imaginaryPart() == 0.0;
      @ also
      @   requires Double.isNaN(re);
      @   ensures Double.isNaN(realPart()) && imaginaryPart() == 0.0;
      @*/
/*@
      @ ensures !Double.isNaN(re) ==> realPart() == re;
      @ ensures !Double.isNaN(img) ==> imaginaryPart() == img;
      @ ensures Double.isNaN(re) ==> Double.isNaN(realPart());
      @ ensures Double.isNaN(img) ==> Double.isNaN(imaginaryPart());
      @*/
/*@ pure @*/
//@ ensures realPart() == 0.0 && imaginaryPart() == 0.0;

/*@   requires !Double.isNaN(re);
      @   ensures realPart() == re && imaginaryPart() == 0.0;
      @ also
      @   requires Double.isNaN(re);
      @   ensures Double.isNaN(realPart()) && imaginaryPart() == 0.0;
      @*/
/*@
      @ ensures !Double.isNaN(re) ==> realPart() == re;
      @ ensures !Double.isNaN(img) ==> imaginaryPart() == img;
      @ ensures Double.isNaN(re) ==> Double.isNaN(realPart());
      @ ensures Double.isNaN(img) ==> Double.isNaN(imaginaryPart());
      @*/
//@ in NNNN;

//@ in NNNN3;

//@ spec_public

//@ in NNNN2;

//@ public model int NNNN;

//@ private represents NNNN = count;

//@ public model int NNNN2;

//@ private represents NNNN2 = count2;

//@ public model int NNNN3;

//@ private represents NNNN3 \such_that NNNN3 == count3;

//@ public normal_behavior

//@   assignable \everything;

//@   ensures NNNN == \old(NNNN);  // BOGUS! This should not verify, but it does.

//@ public normal_behavior

//@   requires count2 == 120;

//@   assignable \everything;

//@   ensures NNNN2 == \old(NNNN2);

//@ public normal_behavior

//@   assignable NNNN;

//@   ensures NNNN == \old(NNNN);  // BOGUS! This should not verify, but it does.

//@ public normal_behavior

//@   requires count2 == 120;

//@   assignable NNNN2;

//@   ensures NNNN2 == \old(NNNN2);

//@ public normal_behavior

//@   assignable NNNN3;

//@   ensures NNNN3 == \old(NNNN3);  // BOGUS! This should not verify, but it does.

//@ in NNNN;

//@ in NNNN3;

//@ spec_public

//@ in NNNN2;

//@ public model int NNNN;

//@ private represents NNNN = count;

//@ public model int NNNN2;

//@ private represents NNNN2 = count2;

//@ public model int NNNN3;

//@ private represents NNNN3 \such_that NNNN3 == count3;

//@ public normal_behavior

//@   assignable \everything;

//@   ensures NNNN == \old(NNNN);  // BOGUS! This should not verify, but it does.

//@ public normal_behavior

//@   requires count2 == 120;

//@   assignable \everything;

//@   ensures NNNN2 == \old(NNNN2);

//@ public normal_behavior

//@   assignable NNNN;

//@   ensures NNNN == \old(NNNN);  // BOGUS! This should not verify, but it does.

//@ public normal_behavior

//@   requires count2 == 120;

//@   assignable NNNN2;

//@   ensures NNNN2 == \old(NNNN2);

//@ public normal_behavior

//@   assignable NNNN3;

//@   ensures NNNN3 == \old(NNNN3);  // BOGUS! This should not verify, but it does.

//@ private exceptional_behavior

//@   signals_only MyException;

//@ pure

//@ public normal_behavior

//@   ensures false;

//@ private exceptional_behavior

//@   signals_only MyException;

//@ //pure

//@ public normal_behavior

//@   ensures false;

//@ private exceptional_behavior

//@   signals_only MyException;

//@ pure

//@ public normal_behavior

//@   ensures false;

//@ private exceptional_behavior

//@   signals_only MyException;

//@ //pure

//@ public normal_behavior

//@   ensures false;

//@ public normal_behavior

//@   requires new String(s, cs) != null;

//@ public normal_behavior

//@   requires new String(s, cs) != null;

//@ model public int X;

//@ in X;

//@ private represents X = 0;

//@ public behavior

//@   assignable \everything;

//@ assert !b;  // BAD! This does not hold after a call to havocX

//@ public normal_behavior

//@   assignable X;

//@ private normal_behavior

//@ ensures b == \old(b); // This also should not be valid

//@ model public int X;

//@ in X;

//@ private represents X = 0;

//@ public behavior

//@   assignable \everything;

//@ assert !b;  // BAD! This does not hold after a call to havocX

//@ public normal_behavior

//@   assignable X;

//@ private normal_behavior

//@ ensures b == \old(b); // This also should not be valid

//@ public normal_behavior

//@   ensures \result == x;

//@ pure helper

//@ public normal_behavior

//@   requires y == 10;

//@   requires x == 10;

//@ also

//@ public exceptional_behavior

//@ requires size() != 10;

//@ public normal_behavior

//@   ensures \result == x;

//@ pure helper

//@ public normal_behavior

//@   requires y == 10;

//@   requires x == 10;

//@ also

//@ public exceptional_behavior

//@ requires size() != 10;

//@ requires x >= 0 && y > 0;

//@ requires x >= 0;

//@ requires this.x >= 0;

//@ requires x >= 0 && y > 0;

//@ requires x >= 0;

//@ requires this.x >= 0;

//@ requires t != this;

//@ requires x >= 0 && y > 0;

//@ requires x >= 0;

//@ requires this.x >= 0;

//@ requires x >= 0 && y > 0;

//@ requires x >= 0;

//@ requires this.x >= 0;

//@ requires t != this;

//@ refining ensures false;  // statement spec, but no warning about false assertion

//@ refining ensures false;  // statement spec, but no warning about false assertion

//@ public normal_behavior

//@   requires r != null && s != null;

//@ public normal_behavior

//@   requires r != null && s != null;

//@   assignable r.x;

//@   ensures r.x == 10;

//@   ensures s.x == \old(s.x);  // OpenJML warns about this

//@ public normal_behavior

//@   requires r != null && s != null;

//@ public normal_behavior

//@   requires r != null && s != null;

//@   assignable r.x;

//@   ensures r.x == 10;

//@   ensures s.x == \old(s.x);  // OpenJML warns about this

//@ requires i > 0;;

//@ ensures true;

//@ assert i > 0;

//@ requires true;

//@ requires true;

//@ model public int kk;

//@ requires true;

//@ requires true;

//@ model public static class CC{}

//@ requires true;

//@ requires true;

//@ invariant true;

//@ requires true;

//@ constraint true;

//@ requires true;

//@ axiom true;

//@ requires true;

//@ initially true;

//@ requires i > 0;;

//@ ensures true;

//@ assert i > 0;

//@ requires true;

//@ requires true;

//@ model public int kk;

//@ requires true;

//@ requires true;

//@ model public static class CC{}

//@ requires true;

//@ requires true;

//@ invariant true;

//@ requires true;

//@ constraint true;

//@ requires true;

//@ axiom true;

//@ requires true;

//@ initially true;

_by_default

/*@ immutable pure public static model class Content {

       function helper
       public Object mapsObject(nullable Object key);

       function helper
       public Object mapss(nullable Object key);

       function helper
       public boolean hasMapObject(nullable Object key);

       function helper
       public boolean hasMap(nullable Object key);
     }
    @*/
//@ axiom (\forall Content c; (\forall Object o; c.hasMapObject(o) ==> c.mapsObject(o) == c.mapss(o)) && c.hasMapObject(null) ==> c.mapsObject(null) == c.mapss(null));

//@ axiom (\forall Content c; (\forall Object o; o != null; c.hasMapObject(o) ==> c.mapsObject(o) == c.mapss(o)));

//@ axiom (\forall Content c; c.hasMapObject(null) ==> c.mapsObject(null) == c.mapss(null));

_by_default

/*@ immutable pure public static model class Content {

       function helper
       public Object mapsObject(nullable Object key);

       function helper
       public Object mapss(nullable Object key);

       function helper
       public boolean hasMapObject(nullable Object key);

       function helper
       public boolean hasMap(nullable Object key);
     }
    @*/
//@ axiom (\forall Content c; (\forall Object o; c.hasMapObject(o) ==> c.mapsObject(o) == c.mapss(o)) && c.hasMapObject(null) ==> c.mapsObject(null) == c.mapss(null));

//@ axiom (\forall Content c; (\forall Object o; o != null; c.hasMapObject(o) ==> c.mapsObject(o) == c.mapss(o)));

//@ axiom (\forall Content c; c.hasMapObject(null) ==> c.mapsObject(null) == c.mapss(null));

_by_default

/*@ immutable pure public static model class Content {

       function helper
       public Object mapsObject(nullable Object key);

       function helper
       public Object mapss(nullable Object key);

       function helper
       public boolean hasMapObject(nullable Object key);

       function helper
       public boolean hasMap(nullable Object key);
     }
    @*/
//@ axiom (\forall Content c; (\forall Object o; c.hasMapObject(o) ==> c.mapsObject(o) == c.mapss(o)) && c.hasMapObject(null) ==> c.mapsObject(null) == c.mapss(null));

//@ axiom (\forall Content c; (\forall Object o; o != null; c.hasMapObject(o) ==> c.mapsObject(o) == c.mapss(o)));

//@ axiom (\forall Content c; c.hasMapObject(null) ==> c.mapsObject(null) == c.mapss(null));

_by_default

/*@ immutable pure public static model class Content {

       function helper
       public Object mapsObject(nullable Object key);

       function helper
       public Object mapss(nullable Object key);

       function helper
       public boolean hasMapObject(nullable Object key);

       function helper
       public boolean hasMap(nullable Object key);
     }
    @*/
//@ axiom (\forall Content c; (\forall Object o; c.hasMapObject(o) ==> c.mapsObject(o) == c.mapss(o)) && c.hasMapObject(null) ==> c.mapsObject(null) == c.mapss(null));

//@ axiom (\forall Content c; (\forall Object o; o != null; c.hasMapObject(o) ==> c.mapsObject(o) == c.mapss(o)));

//@ axiom (\forall Content c; c.hasMapObject(null) ==> c.mapsObject(null) == c.mapss(null));

_by_default

/*@ immutable pure public static model class Content {

       function helper
       public Object mapsObject(nullable Object key);

       function helper
       public Object mapss(nullable Object key);

       function helper
       public boolean hasMapObject(nullable Object key);

       function helper
       public boolean hasMap(nullable Object key);
     }
    @*/
//@ axiom (\forall Content c; (\forall Object o; c.hasMapObject(o) ==> c.mapsObject(o) == c.mapss(o)) && c.hasMapObject(null) ==> c.mapsObject(null) == c.mapss(null));

//@ axiom (\forall Content c; (\forall Object o; o != null; c.hasMapObject(o) ==> c.mapsObject(o) == c.mapss(o)));

//@ axiom (\forall Content c; c.hasMapObject(null) ==> c.mapsObject(null) == c.mapss(null));

_by_default

/*@ immutable pure public static model class Content {

       function helper
       public Object mapsObject(nullable Object key);

       function helper
       public Object mapss(nullable Object key);

       function helper
       public boolean hasMapObject(nullable Object key);

       function helper
       public boolean hasMap(nullable Object key);
     }
    @*/
//@ axiom (\forall Content c; (\forall Object o; c.hasMapObject(o) ==> c.mapsObject(o) == c.mapss(o)) && c.hasMapObject(null) ==> c.mapsObject(null) == c.mapss(null));

//@ axiom (\forall Content c; (\forall Object o; o != null; c.hasMapObject(o) ==> c.mapsObject(o) == c.mapss(o)));

//@ axiom (\forall Content c; c.hasMapObject(null) ==> c.mapsObject(null) == c.mapss(null));

_by_default

/*@ immutable pure public static model class Content {

       function helper
       public Object mapsObject(nullable Object key);

       function helper
       public Object mapss(nullable Object key);

       function helper
       public boolean hasMapObject(nullable Object key);

       function helper
       public boolean hasMap(nullable Object key);
     }
    @*/
//@ axiom (\forall Content c; (\forall Object o; c.hasMapObject(o) ==> c.mapsObject(o) == c.mapss(o)) && c.hasMapObject(null) ==> c.mapsObject(null) == c.mapss(null));

//@ axiom (\forall Content c; (\forall Object o; o != null; c.hasMapObject(o) ==> c.mapsObject(o) == c.mapss(o)));

//@ axiom (\forall Content c; c.hasMapObject(null) ==> c.mapsObject(null) == c.mapss(null));

_by_default

/*@ immutable pure public static model class Content {

       function helper
       public Object mapsObject(nullable Object key);

       function helper
       public Object mapss(nullable Object key);

       function helper
       public boolean hasMapObject(nullable Object key);

       function helper
       public boolean hasMap(nullable Object key);
     }
    @*/
//@ axiom (\forall Content c; (\forall Object o; c.hasMapObject(o) ==> c.mapsObject(o) == c.mapss(o)) && c.hasMapObject(null) ==> c.mapsObject(null) == c.mapss(null));

//@ axiom (\forall Content c; (\forall Object o; o != null; c.hasMapObject(o) ==> c.mapsObject(o) == c.mapss(o)));

//@ axiom (\forall Content c; c.hasMapObject(null) ==> c.mapsObject(null) == c.mapss(null));

_by_default

//@ spec_public

//@ private normal_behavior

//@   requires true;

//@ pure

_by_default



//@ public normal_behavior

//@   requires true;

//@ pure

//@ assert aaaa.pppp != null;  // OpenJML is OK

//@ assert aaaa.ssss != null;  // OpenJML reports error

//@ assert bbbb.b != null; // should be true

//@ assert bbbb != this;

//@ public normal_behavior

//@   requires true;

//@ pure

//@ assert aaaa.ssss != null;  // fine



//@ public normal_behavior

//@   requires true;

//@ pure

//@ assert cccc != null;

//@ public normal_behavior

//@ assignable cccc;

//@ ensures this.cccc == c.cccc;

//@ assert c.cccc != null; // Not true when called in a constructor with c == this

//@ assert this.cccc != null;

_by_default

//@ spec_public

//@ private normal_behavior

//@   requires true;

//@ pure

_by_default



//@ public normal_behavior

//@   requires true;

//@ pure

//@ assert aaaa.pppp != null;  // OpenJML is OK

//@ assert aaaa.ssss != null;  // OpenJML reports error

//@ assert bbbb.b != null; // should be true

//@ assert bbbb != this;

//@ public normal_behavior

//@   requires true;

//@ pure

//@ assert aaaa.ssss != null;  // fine



//@ public normal_behavior

//@   requires true;

//@ pure

//@ assert cccc != null;

//@ public normal_behavior

//@ assignable cccc;

//@ ensures this.cccc == c.cccc;

//@ assert c.cccc != null; // Not true when called in a constructor with c == this

//@ assert this.cccc != null;

//@ assert x == 701; // FAILS to prove because specs are not visible

//@ public normal_behavior

//@   ensures true;

//@ private normal_behavior

//@   ensures \result == 701;

//@ assert x == 701; // FAILS to prove because specs are not visible

//@ public normal_behavior

//@   ensures true;

//@ private normal_behavior

//@   ensures \result == 701;

//@ public normal_behavior

//@   ensures true;

//@ private normal_behavior

//@   ensures true;

//@ pure

//@ public normal_behavior

//@   ensures true;

//@ private normal_behavior

//@   ensures true;

//@ pure

/*@ immutable pure public static model class Content {
      @     public normal_behavior
      @       ensures true;
      @     function
      @     public boolean P(nullable Object key);

      @ axiom (\forall Content c; (\forall Object o; c.P(o)));

      @ }
      @
      @*/
//@ public model instance non_null Content content;

//@ public invariant content.P(null);




//@ public normal_behavior

//@   ensures true;

/*@ immutable pure public static model class Content {
      @     public normal_behavior
      @       ensures true;
      @     function
      @     public boolean P(nullable Object key);

      @ axiom (\forall Content c; (\forall Object o; c.P(o)));

      @ }
      @
      @*/
//@ public model instance non_null Content content;

//@ public invariant content.P(null);




//@ public normal_behavior

//@   ensures true;

/*@ immutable pure public static model class Content {
      @     axiom (\forall Content c; (\forall Object o; c.P(o)));
      @     public normal_behavior
      @       ensures true;
      @     function
      @     public boolean P(nullable Object key);

      @ }
      @
      @*/
//@ public model instance non_null Content content;

//@ public invariant content.P(null);




//@ public normal_behavior

//@   ensures true;

/*@ immutable pure public static model class Content {
      @     axiom (\forall Content c; (\forall Object o; c.P(o)));
      @     public normal_behavior
      @       ensures true;
      @     function
      @     public boolean P(nullable Object key);

      @ }
      @
      @*/
//@ public model instance non_null Content content;

//@ public invariant content.P(null);




//@ public normal_behavior

//@   ensures true;

/*@ immutable pure public static model class Content {
      @     public normal_behavior
      @       ensures true;
      @     function
      @     public boolean P(nullable Object key);

      @ }
      @
      @ axiom (\forall Content c; (\forall Object o; c.P(o)));
      @*/
//@ public model instance non_null Content content;

//@ public invariant content.P(null);




//@ public normal_behavior

//@   ensures true;

/*@ immutable pure public static model class Content {
      @     public normal_behavior
      @       ensures true;
      @     function
      @     public boolean P(nullable Object key);

      @ }
      @
      @ axiom (\forall Content c; (\forall Object o; c.P(o)));
      @*/
//@ public model instance non_null Content content;

//@ public invariant content.P(null);




//@ public normal_behavior

//@   ensures true;

//@ axiom (\forall Content c; (\forall Object o; c.P(o)));

/*@ immutable pure public static model class Content {
      @     public normal_behavior
      @       ensures true;
      @     function helper
      @     public boolean P(nullable Object key);

      @ }
      @
      @*/
//@ public model instance non_null Content content;

//@ public invariant content.P(null);




//@ public normal_behavior

//@   ensures true;

//@ axiom (\forall Content c; (\forall Object o; c.P(o)));

/*@ immutable pure public static model class Content {
      @     public normal_behavior
      @       ensures true;
      @     function helper
      @     public boolean P(nullable Object key);

      @ }
      @
      @*/
//@ public model instance non_null Content content;

//@ public invariant content.P(null);




//@ public normal_behavior

//@   ensures true;

//@ nullable_by_default

//@ nullable_by_default

//@ nullable

//@ public normal_behavior

//@   ensures true;

//@ public normal_behavior

//@   ensures true; //\result == xyz;

//@ nullable_by_default

//@ public normal_behavior

//@   ensures true;

//@ pure

//@ public normal_behavior

//@   ensures true;

//@ nullable_by_default

//@ nullable_by_default

//@ nullable

//@ public normal_behavior

//@   ensures true;

//@ public normal_behavior

//@   ensures true; //\result == xyz;

//@ nullable_by_default

//@ public normal_behavior

//@   ensures true;

//@ pure

//@ public normal_behavior

//@   ensures true;

//@ public normal_behavior

//@   requires y >= 0;

//@   requires x + y <= Integer.MAX_VALUE;

//@   ensures \result == x + y;

//@ pure

//@ public normal_behavior

//@   requires y >= 0;

//@   requires x >= 0;

//@   requires x * y <= Integer.MAX_VALUE;

//@   ensures \result == x * y;

//@ pure

//@ public normal_behavior

//@   requires x <= 10 && y <= 15;

//@   requires y >= 0 && x >= 1;

//@   ensures \result == (y == 0 ? 1 : y == 1 ? x : x * mpow(x,y-1));

//@ pure

//@ model public static function helper long mpow(long x, long y);

//@ public normal_behavior

//@   requires x <= 10 && y <= 15;

//@   requires y >= 0 && x >= 1;

//@   ensures (\lbl R \result) == (long)(\lbl MP mpow(x,y));

//@ pure

//@ show x, y;

//@ public normal_behavior

//@   requires y >= 0;

//@   requires x + y <= Integer.MAX_VALUE;

//@   ensures \result == x + y;

//@ pure

//@ public normal_behavior

//@   requires y >= 0;

//@   requires x >= 0;

//@   requires x * y <= Integer.MAX_VALUE;

//@   ensures \result == x * y;

//@ pure

//@ public normal_behavior

//@   requires x <= 10 && y <= 15;

//@   requires y >= 0 && x >= 1;

//@   ensures \result == (y == 0 ? 1 : y == 1 ? x : x * mpow(x,y-1));

//@ pure

//@ model public static function helper long mpow(long x, long y);

//@ public normal_behavior

//@   requires x <= 10 && y <= 15;

//@   requires y >= 0 && x >= 1;

//@   ensures (\lbl R \result) == (long)(\lbl MP mpow(x,y));

//@ pure

//@ show x, y;

//@ code_safe_math spec_bigint_math

//@ ensures \result == a;

//@ ensures \result == a;

//@ requires aa.length > 10;

//@ requires aa.length > 10;

//@ requires aa.length > 10;

//@ requires aa.length > 10;

//@ requires aa.length > 10;

//@ code_safe_math spec_bigint_math

//@ ensures \result == a;

//@ ensures \result == a;

//@ requires aa.length > 10;

//@ requires aa.length > 10;

//@ requires aa.length > 10;

//@ requires aa.length > 10;

//@ requires aa.length > 10;

//@ requires a >= 0 && a <= 10;

//@ ensures \result == a + 1;

//@ requires a >= 0 && a <= 10;

//@ ensures \result == a + 1;

/*@ also
	  @ public normal_behavior
	@ ensures \result <0;
		  */
/*@ pure @*/
/*@ also
	  @ public normal_behavior
	@ ensures \result <==> this.size()!=0;
		  */
/*@ pure @*/
/*@ pure @*/
/*@ pure @*/
/*@ also
	  @ public normal_behavior
			 @   requires !this.containsKey(key);
	@	ensures \result == null;
	*/
/*@ pure @*/
/*@ also
  @ public normal_behavior
@ ensures this.isEmpty()==false;
		@ ensures this.size()!=0;
	  */
/*@ also
	  @ public normal_behavior
	@ ensures \result ==null;
		  */
/*@ also
	  @ public normal_behavior
	@ ensures \result ==null;
		  */
/*@ also
	  @ public normal_behavior
	@ ensures \result <0;
		  */
/*@ pure @*/
/*@ also
	  @ public normal_behavior
	@ ensures \result <==> this.size()!=0;
		  */
/*@ pure @*/
/*@ pure @*/
/*@ pure @*/
/*@ also
	  @ public normal_behavior
			 @   requires !this.containsKey(key);
	@	ensures \result == null;
	*/
/*@ pure @*/
/*@ also
  @ public normal_behavior
@ ensures this.isEmpty()==false;
		@ ensures this.size()!=0;
	  */
/*@ also
	  @ public normal_behavior
	@ ensures \result ==null;
		  */
/*@ also
	  @ public normal_behavior
	@ ensures \result ==null;
		  */
/*@ also
	  @ public normal_behavior
	@ ensures \result <0;
		  */
/*@ pure @*/
/*@ also
	  @ public normal_behavior
	@ ensures \result <==> this.size()!=0;
		  */
/*@ pure @*/
/*@ pure @*/
/*@ pure @*/
/*@ also
	  @ public normal_behavior
			 @   requires !this.containsKey(key);
	@	ensures \result == null;
	*/
/*@ pure @*/
/*@ also
  @ public normal_behavior
@ ensures this.isEmpty()==false;
		@ ensures this.size()!=0;
	  */
/*@ also
	  @ public normal_behavior
	@ ensures \result ==null;
		  */
/*@ also
	  @ public normal_behavior
	@ ensures \result ==null;
		  */
/*@ also
	  @ public normal_behavior
	@ ensures \result <0;
		  */
/*@ pure @*/
/*@ also
	  @ public normal_behavior
	@ ensures \result <==> this.size()!=0;
		  */
/*@ pure @*/
/*@ pure @*/
/*@ pure @*/
/*@ also
	  @ public normal_behavior
			 @   requires !this.containsKey(key);
	@	ensures \result == null;
	*/
/*@ pure @*/
/*@ also
  @ public normal_behavior
@ ensures this.isEmpty()==false;
		@ ensures this.size()!=0;
	  */
/*@ also
	  @ public normal_behavior
	@ ensures \result ==null;
		  */
/*@ also
	  @ public normal_behavior
	@ ensures \result ==null;
		  */
/*@ also
	  @ public normal_behavior
	@ ensures \result <0;
		  */
/*@ pure @*/
/*@ also
	  @ public normal_behavior
	@ ensures \result <==> this.size()!=0;
		  */
/*@ pure @*/
/*@ pure @*/
/*@ pure @*/
/*@ also
	  @ public normal_behavior
			 @   requires !this.containsKey(key);
	@	ensures \result == null;
	*/
/*@ pure @*/
/*@ also
  @ public normal_behavior
@ ensures this.isEmpty()==false;
		@ ensures this.size()!=0;
	  */
/*@ also
	  @ public normal_behavior
	@ ensures \result ==null;
		  */
/*@ also
	  @ public normal_behavior
	@ ensures \result ==null;
		  */
/*@ also
	  @ public normal_behavior
	@ ensures \result <0;
		  */
/*@ pure @*/
/*@ also
	  @ public normal_behavior
	@ ensures \result <==> this.size()!=0;
		  */
/*@ pure @*/
/*@ pure @*/
/*@ pure @*/
/*@ also
	  @ public normal_behavior
			 @   requires !this.containsKey(key);
	@	ensures \result == null;
	*/
/*@ pure @*/
/*@ also
  @ public normal_behavior
@ ensures this.isEmpty()==false;
		@ ensures this.size()!=0;
	  */
/*@ also
	  @ public normal_behavior
	@ ensures \result ==null;
		  */
/*@ also
	  @ public normal_behavior
	@ ensures \result ==null;
		  */
/*@ also
	  @ public normal_behavior
	@ ensures \result <0;
		  */
/*@ pure @*/
/*@ also
	  @ public normal_behavior
	@ ensures \result <==> this.size()!=0;
		  */
/*@ pure @*/
/*@ pure @*/
/*@ pure @*/
/*@ also
	  @ public normal_behavior
			 @   requires !this.containsKey(key);
	@	ensures \result == null;
	*/
/*@ pure @*/
/*@ also
  @ public normal_behavior
@ ensures this.isEmpty()==false;
		@ ensures this.size()!=0;
	  */
/*@ also
	  @ public normal_behavior
	@ ensures \result ==null;
		  */
/*@ also
	  @ public normal_behavior
	@ ensures \result ==null;
		  */
/*@ also
	  @ public normal_behavior
	@ ensures \result <0;
		  */
/*@ pure @*/
/*@ also
	  @ public normal_behavior
	@ ensures \result <==> this.size()!=0;
		  */
/*@ pure @*/
/*@ pure @*/
/*@ pure @*/
/*@ also
	  @ public normal_behavior
			 @   requires !this.containsKey(key);
	@	ensures \result == null;
	*/
/*@ pure @*/
/*@ also
  @ public normal_behavior
@ ensures this.isEmpty()==false;
		@ ensures this.size()!=0;
	  */
/*@ also
	  @ public normal_behavior
	@ ensures \result ==null;
		  */
/*@ also
	  @ public normal_behavior
	@ ensures \result ==null;
		  */
/*@ also
	  @ public normal_behavior
	@ ensures \result <0;
		  */
/*@ pure @*/
/*@ also
	  @ public normal_behavior
	@ ensures \result <==> this.size()!=0;
		  */
/*@ pure @*/
/*@ pure @*/
/*@ pure @*/
/*@ also
	  @ public normal_behavior
			 @   requires !this.containsKey(key);
	@	ensures \result == null;
	*/
/*@ pure @*/
/*@ also
  @ public normal_behavior
@ ensures this.isEmpty()==false;
		@ ensures this.size()!=0;
	  */
/*@ also
	  @ public normal_behavior
	@ ensures \result ==null;
		  */
/*@ also
	  @ public normal_behavior
	@ ensures \result ==null;
		  */
/*@ also
	  @ public normal_behavior
	@ ensures \result <0;
		  */
/*@ pure @*/
/*@ also
	  @ public normal_behavior
	@ ensures \result <==> this.size()!=0;
		  */
/*@ pure @*/
/*@ pure @*/
/*@ pure @*/
/*@ also
	  @ public normal_behavior
			 @   requires !this.containsKey(key);
	@	ensures \result == null;
	*/
/*@ pure @*/
/*@ also
  @ public normal_behavior
@ ensures this.isEmpty()==false;
		@ ensures this.size()!=0;
	  */
/*@ also
	  @ public normal_behavior
	@ ensures \result ==null;
		  */
/*@ also
	  @ public normal_behavior
	@ ensures \result ==null;
		  */
//@ model import org.jmlspecs.models.JMLFloat;

/*@ spec_public */
//@ requires Double.isFinite(temperature);

//@ assignable Celsius;

//@ ensures Math.abs(\result - (((temperature - 32)*5)/9)) <= 0.1;

//@ model import org.jmlspecs.models.JMLFloat;

/*@ spec_public */
//@ requires Double.isFinite(temperature);

//@ assignable Celsius;

//@ ensures Math.abs(\result - (((temperature - 32)*5)/9)) <= 0.1;

//@ model import org.jmlspecs.models.JMLFloat;

/*@ spec_public */
//@ requires Float.isFinite(temperature);

//@ assignable Celsius;

//@ ensures Double.isFinite(Celsius) && Float.isFinite(\result);

//@ ensures JMLFloat.approximatelyEqualTo(\result, (((temperature - 32)*5)/9), 0.1f) == true;

//@ model import org.jmlspecs.models.JMLFloat;

/*@ spec_public */
//@ requires Float.isFinite(temperature);

//@ assignable Celsius;

//@ ensures Double.isFinite(Celsius) && Float.isFinite(\result);

//@ ensures JMLFloat.approximatelyEqualTo(\result, (((temperature - 32)*5)/9), 0.1f) == true;

//@ ensures \result >= 0;

//@ ensures \result >= 0;

//@ requires r > 0;

//@ requires 3*r*r <= Integer.MAX_VALUE;

//@ show r, 3*r, 3*r*r;

//@ show area;

//@ requires r > 0;

//@ requires 3*r*r <= Integer.MAX_VALUE;

//@ @org.jmlspecs.annotation.Options("-code-math=java")

//@ show r, 3*r, 3*r*r;

//@ show area;

//@ requires r > 0;

//@ requires 3*r*r <= Integer.MAX_VALUE;

//@ @org.jmlspecs.annotation.Options("-code-math=math")

//@ show r, 3*r, 3*r*r;

//@ show area;

//@ requires r > 0;

//@ requires 3*r*r <= Integer.MAX_VALUE;

//@ show r, 3*r, 3*r*r;

//@ show area;

//@ requires r > 0;

//@ requires 3*r*r <= Integer.MAX_VALUE;

//@ @org.jmlspecs.annotation.Options("-code-math=java")

//@ show r, 3*r, 3*r*r;

//@ show area;

//@ requires r > 0;

//@ requires 3*r*r <= Integer.MAX_VALUE;

//@ @org.jmlspecs.annotation.Options("-code-math=math")

//@ show r, 3*r, 3*r*r;

//@ show area;

//@ requires r > 0;

//@ requires 3*r*r <= Integer.MAX_VALUE;

//@ requires r > 0;

//@ requires 3*r*r <= Integer.MAX_VALUE;

//@ requires System.out.outputText instanceof String; // FIXME - why is this not known

//@ requires System.out.outputText.isEmpty(); // TODO: Could be implied by a system startup property

//@ ensures System.out.outputText == "foo";

//@ requires System.out.outputText instanceof String; // FIXME - why is this not known

//@ requires System.out.outputText.isEmpty(); // TODO: Could be implied by a system startup property

//@ ensures System.out.outputText == "foo";

//@ forall int oldarr;

//@ forall int oldarr;

//@ assert (a && b) == (o != null);

//@ assert (a && b) == (o != null);

//@ loop_modifies q.values;

//@ loop_invariant \invariant_for(q);

//@ loop_modifies q.values;

//@ loop_invariant \invariant_for(q);

//@ in year;

//@ in month;

//@ in day;

//@ private represents year = _year;

//@ private represents month = _month;

//@ private represents day = _day;

//@ public invariant 1 <= year && year <= Integer.MAX_VALUE;

//@ public invariant 1 <= month && month <= 12;

//@ public invariant 1 <= day && day <= 31;

//@ requires 1 <= year && year <= Integer.MAX_VALUE;

//@ requires 1 <= month && month <= 12;

//@ requires 1 <= day && day <= 31;

//@ ensures this.year == year;

//@ ensures this.month == month;

//@ ensures this.day == day;

/*@ pure @*/
/*@ pure @*/
/*@ pure @*/
/*@ pure @*/
/*@ pure @*/
/*@ requires this != birth;
     @ ensures \result == ((this.year > birth.year)
     @                   || (this.year == birth.year && this.month > birth.month)
     @                   || (this.year == birth.year && this.month == birth.month && this.day > birth.day)); @*/
/*@ pure @*/
//@ assert true;

//@ assert this._year == birth._year;

//@ assert this._year == birth._year && this._month == birth._month;

//@ in year;

//@ in month;

//@ in day;

//@ private represents year = _year;

//@ private represents month = _month;

//@ private represents day = _day;

//@ public invariant 1 <= year && year <= Integer.MAX_VALUE;

//@ public invariant 1 <= month && month <= 12;

//@ public invariant 1 <= day && day <= 31;

//@ requires 1 <= year && year <= Integer.MAX_VALUE;

//@ requires 1 <= month && month <= 12;

//@ requires 1 <= day && day <= 31;

//@ ensures this.year == year;

//@ ensures this.month == month;

//@ ensures this.day == day;

/*@ pure @*/
/*@ pure @*/
/*@ pure @*/
/*@ pure @*/
/*@ pure @*/
/*@ requires this != birth;
     @ ensures \result == ((this.year > birth.year)
     @                   || (this.year == birth.year && this.month > birth.month)
     @                   || (this.year == birth.year && this.month == birth.month && this.day > birth.day)); @*/
/*@ pure @*/
//@ assert true;

//@ assert this._year == birth._year;

//@ assert this._year == birth._year && this._month == birth._month;

/*@ model instance int year ;
       model instance int month ;
       model instance int day ; @*/
//@ ensures \result == this.month;

/*@ pure @*/
//@ ensures \result == this.day;

/*@ pure @*/
//@ ensures \result == this.year;

/*@ pure @*/
/*@ ensures \result <==> (this.year == birth.year) && this.month == birth.month && this.day == birth.day; @*/
/*@ pure @*/
/*@ model instance int year ;
       model instance int month ;
       model instance int day ; @*/
//@ ensures \result == this.month;

/*@ pure @*/
//@ ensures \result == this.day;

/*@ pure @*/
//@ ensures \result == this.year;

/*@ pure @*/
/*@ ensures \result <==> (this.year == birth.year) && this.month == birth.month && this.day == birth.day; @*/
/*@ pure @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
//@ public invariant 0 <= seconds && seconds < 60;

//@ public invariant 0 <= minutes && minutes < 60;

//@ public invariant 0 <= hours && hours < 24;

//@ requires 0 <= hours && hours < 24;

//@ requires 0 <= minutes && minutes < 60;

//@ requires 0 <= seconds && seconds < 60;

//@ ensures this.hours == hours;

//@ ensures this.minutes == minutes;

//@ ensures this.seconds == seconds;

//@ pure

//@ ensures \result == this.hours;

/*@ pure @*/
//@ ensures \result == this.minutes;

/*@ pure @*/
//@ ensures \result == this.seconds;

/*@ pure @*/
//@ ensures \result == (a.hours*3600) + (a.minutes*60) + a.seconds;

/*@ pure spec_public@*/
//@ old int diff = secondCalulation(this) - secondCalulation(stop);

//@ old int _final = (diff < 0) ? (-diff) : (diff);

//@ ensures \result == _final;

/*@ pure @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
//@ public invariant 0 <= seconds && seconds < 60;

//@ public invariant 0 <= minutes && minutes < 60;

//@ public invariant 0 <= hours && hours < 24;

//@ requires 0 <= hours && hours < 24;

//@ requires 0 <= minutes && minutes < 60;

//@ requires 0 <= seconds && seconds < 60;

//@ ensures this.hours == hours;

//@ ensures this.minutes == minutes;

//@ ensures this.seconds == seconds;

//@ pure

//@ ensures \result == this.hours;

/*@ pure @*/
//@ ensures \result == this.minutes;

/*@ pure @*/
//@ ensures \result == this.seconds;

/*@ pure @*/
//@ ensures \result == (a.hours*3600) + (a.minutes*60) + a.seconds;

/*@ pure spec_public@*/
//@ old int diff = secondCalulation(this) - secondCalulation(stop);

//@ old int _final = (diff < 0) ? (-diff) : (diff);

//@ ensures \result == _final;

/*@ pure @*/
/*@
//	  behavior
//	    requires size > 0;
//	    ensures size() == size && memoryConsumed() == 0;
//	@*/
/*@
//	  behavior
//	    requires size > 0;
//	    ensures size() == size && memoryConsumed() == 0;
//	@*/
/*@
//	  behavior
//	    requires size > 0;
//	    ensures size() == size && memoryConsumed() == 0;
//	@*/
/*@
//	  behavior
//	    requires size > 0;
//	    ensures size() == size && memoryConsumed() == 0;
//	@*/
/*@
//	  behavior
//	    requires size > 0;
//	    ensures size() == size && memoryConsumed() == 0;
//	@*/
/*@
//	  behavior
//	    requires size > 0;
//	    ensures size() == size && memoryConsumed() == 0;
//	@*/
/*@
	  also public behaviour
	    requires true;
	    assignable     othing;
	    ensures \result.equals(new RelativeTime(0, 0, this));
	  @*/
/*@
	  also public behaviour
	    requires true;
	    assignable     othing;
	    ensures \result.equals(new RelativeTime(0, 0, this));
	  @*/
/*@
	  also public behaviour
	    requires true;
	    assignable     othing;
	    ensures \result.equals(new RelativeTime(0, 0, this));
	  @*/
/*@
	  also public behaviour
	    requires true;
	    assignable     othing;
	    ensures \result.equals(new RelativeTime(0, 0, this));
	  @*/
/*@
	  also public behaviour
	    requires true;
	    assignable     othing;
	    ensures \result.equals(new RelativeTime(0, 0, this));
	  @*/
/*@
	  also public behaviour
	    requires true;
	    assignable     othing;
	    ensures \result.equals(new RelativeTime(0, 0, this));
	  @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@
	  public normal_behavior
	    requires priority != null && release  != null;
	    ensures true;
	  also
	  public exceptional_behavior
	    requires priority == null;
	    signals (IllegalArgumentException) true;
	  also
	  public exceptional_behavior
	    requires release == null;
	    signals (IllegalArgumentException) true;
	@*/
/*@
	  public behavior
	//      requires MissionSequencer.getPhase() == Phase.EXECUTE;
	    requires Mission.getMission().isRegistered(this);

	//      ensures MissionSequencer.getPhase() == Phase.EXECUTE;
	    ensures Mission.getMission().isRegistered(this);
	//      ensures PriorityScheduler.activated(this);
	  @*/
/*@
	  public normal_behavior
	    requires priority != null && release  != null;
	    ensures true;
	  also
	  public exceptional_behavior
	    requires priority == null;
	    signals (IllegalArgumentException) true;
	  also
	  public exceptional_behavior
	    requires release == null;
	    signals (IllegalArgumentException) true;
	@*/
/*@
	  public behavior
	//      requires MissionSequencer.getPhase() == Phase.EXECUTE;
	    requires Mission.getMission().isRegistered(this);

	//      ensures MissionSequencer.getPhase() == Phase.EXECUTE;
	    ensures Mission.getMission().isRegistered(this);
	//      ensures PriorityScheduler.activated(this);
	  @*/
/*@
	  public normal_behavior
	    requires priority != null && release  != null;
	    ensures true;
	  also
	  public exceptional_behavior
	    requires priority == null;
	    signals (IllegalArgumentException) true;
	  also
	  public exceptional_behavior
	    requires release == null;
	    signals (IllegalArgumentException) true;
	@*/
/*@
	  public behavior
	//      requires MissionSequencer.getPhase() == Phase.EXECUTE;
	    requires Mission.getMission().isRegistered(this);

	//      ensures MissionSequencer.getPhase() == Phase.EXECUTE;
	    ensures Mission.getMission().isRegistered(this);
	//      ensures PriorityScheduler.activated(this);
	  @*/
/*@
	  public normal_behavior
	    requires priority != null && release  != null;
	    ensures true;
	  also
	  public exceptional_behavior
	    requires priority == null;
	    signals (IllegalArgumentException) true;
	  also
	  public exceptional_behavior
	    requires release == null;
	    signals (IllegalArgumentException) true;
	@*/
/*@
	  public behavior
	//      requires MissionSequencer.getPhase() == Phase.EXECUTE;
	    requires Mission.getMission().isRegistered(this);

	//      ensures MissionSequencer.getPhase() == Phase.EXECUTE;
	    ensures Mission.getMission().isRegistered(this);
	//      ensures PriorityScheduler.activated(this);
	  @*/
/*@
	  public normal_behavior
	    requires priority != null && release  != null;
	    ensures true;
	  also
	  public exceptional_behavior
	    requires priority == null;
	    signals (IllegalArgumentException) true;
	  also
	  public exceptional_behavior
	    requires release == null;
	    signals (IllegalArgumentException) true;
	@*/
/*@
	  public behavior
	//      requires MissionSequencer.getPhase() == Phase.EXECUTE;
	    requires Mission.getMission().isRegistered(this);

	//      ensures MissionSequencer.getPhase() == Phase.EXECUTE;
	    ensures Mission.getMission().isRegistered(this);
	//      ensures PriorityScheduler.activated(this);
	  @*/
/*@
	  public normal_behavior
	    requires priority != null && release  != null;
	    ensures true;
	  also
	  public exceptional_behavior
	    requires priority == null;
	    signals (IllegalArgumentException) true;
	  also
	  public exceptional_behavior
	    requires release == null;
	    signals (IllegalArgumentException) true;
	@*/
/*@
	  public behavior
	//      requires MissionSequencer.getPhase() == Phase.EXECUTE;
	    requires Mission.getMission().isRegistered(this);

	//      ensures MissionSequencer.getPhase() == Phase.EXECUTE;
	    ensures Mission.getMission().isRegistered(this);
	//      ensures PriorityScheduler.activated(this);
	  @*/
/*@
	  public normal_behavior
	    requires priority != null;
	    requires release != null;

//	    ensures this.getPriorityParam().getPriority() == priority.getPriority();
//	    ensures this.getReleaseParam().getDeadline() == release.getDeadline();
//	    ensures this.getReleaseParam().getMissHandler() == release.getMissHandler();

	  also
	  public exceptional_behavior
	    requires priority == null;
	    signals (IllegalArgumentException) true;
	  also
	  public exceptional_behavior
	    requires release == null;
	    signals (IllegalArgumentException) true;
	  @*/
/*@
	  also public behavior
	    requires true;

//	    ensures javax.realtime.Clock.getRealtimeClock().getTime().compareTo(
//	              getLastReleaseTime().add(release.getDeadline())) <= 0;
	  @*/
//@ also

//@   requires true;

//@   ensures ??;	// something to add?

//@ also

//@   requires true;

//@   ensures ??;	// something to add?

/*@ spec_public @*/
/*@ spec_public @*/
/*@
	  public normal_behavior
	    requires priority != null;
	    requires release != null;

//	    ensures this.getPriorityParam().getPriority() == priority.getPriority();
//	    ensures this.getReleaseParam().getDeadline() == release.getDeadline();
//	    ensures this.getReleaseParam().getMissHandler() == release.getMissHandler();

	  also
	  public exceptional_behavior
	    requires priority == null;
	    signals (IllegalArgumentException) true;
	  also
	  public exceptional_behavior
	    requires release == null;
	    signals (IllegalArgumentException) true;
	  @*/
/*@
	  also public behavior
	    requires true;

//	    ensures javax.realtime.Clock.getRealtimeClock().getTime().compareTo(
//	              getLastReleaseTime().add(release.getDeadline())) <= 0;
	  @*/
//@ also

//@   requires true;

//@   ensures ??;	// something to add?

//@ also

//@   requires true;

//@   ensures ??;	// something to add?

/*@ spec_public @*/
/*@ spec_public @*/
/*@
	  public normal_behavior
	    requires priority != null;
	    requires release != null;

//	    ensures this.getPriorityParam().getPriority() == priority.getPriority();
//	    ensures this.getReleaseParam().getDeadline() == release.getDeadline();
//	    ensures this.getReleaseParam().getMissHandler() == release.getMissHandler();

	  also
	  public exceptional_behavior
	    requires priority == null;
	    signals (IllegalArgumentException) true;
	  also
	  public exceptional_behavior
	    requires release == null;
	    signals (IllegalArgumentException) true;
	  @*/
/*@
	  also public behavior
	    requires true;

//	    ensures javax.realtime.Clock.getRealtimeClock().getTime().compareTo(
//	              getLastReleaseTime().add(release.getDeadline())) <= 0;
	  @*/
//@ also

//@   requires true;

//@   ensures ??;	// something to add?

//@ also

//@   requires true;

//@   ensures ??;	// something to add?

/*@ spec_public @*/
/*@ spec_public @*/
/*@
	  public normal_behavior
	    requires priority != null;
	    requires release != null;

//	    ensures this.getPriorityParam().getPriority() == priority.getPriority();
//	    ensures this.getReleaseParam().getDeadline() == release.getDeadline();
//	    ensures this.getReleaseParam().getMissHandler() == release.getMissHandler();

	  also
	  public exceptional_behavior
	    requires priority == null;
	    signals (IllegalArgumentException) true;
	  also
	  public exceptional_behavior
	    requires release == null;
	    signals (IllegalArgumentException) true;
	  @*/
/*@
	  also public behavior
	    requires true;

//	    ensures javax.realtime.Clock.getRealtimeClock().getTime().compareTo(
//	              getLastReleaseTime().add(release.getDeadline())) <= 0;
	  @*/
//@ also

//@   requires true;

//@   ensures ??;	// something to add?

//@ also

//@   requires true;

//@   ensures ??;	// something to add?

/*@ spec_public @*/
/*@ spec_public @*/
/*@
	  public normal_behavior
	    requires priority != null;
	    requires release != null;

//	    ensures this.getPriorityParam().getPriority() == priority.getPriority();
//	    ensures this.getReleaseParam().getDeadline() == release.getDeadline();
//	    ensures this.getReleaseParam().getMissHandler() == release.getMissHandler();

	  also
	  public exceptional_behavior
	    requires priority == null;
	    signals (IllegalArgumentException) true;
	  also
	  public exceptional_behavior
	    requires release == null;
	    signals (IllegalArgumentException) true;
	  @*/
/*@
	  also public behavior
	    requires true;

//	    ensures javax.realtime.Clock.getRealtimeClock().getTime().compareTo(
//	              getLastReleaseTime().add(release.getDeadline())) <= 0;
	  @*/
//@ also

//@   requires true;

//@   ensures ??;	// something to add?

//@ also

//@   requires true;

//@   ensures ??;	// something to add?

/*@ spec_public @*/
/*@ spec_public @*/
/*@
	  public normal_behavior
	    requires priority != null;
	    requires release != null;

//	    ensures this.getPriorityParam().getPriority() == priority.getPriority();
//	    ensures this.getReleaseParam().getDeadline() == release.getDeadline();
//	    ensures this.getReleaseParam().getMissHandler() == release.getMissHandler();

	  also
	  public exceptional_behavior
	    requires priority == null;
	    signals (IllegalArgumentException) true;
	  also
	  public exceptional_behavior
	    requires release == null;
	    signals (IllegalArgumentException) true;
	  @*/
/*@
	  also public behavior
	    requires true;

//	    ensures javax.realtime.Clock.getRealtimeClock().getTime().compareTo(
//	              getLastReleaseTime().add(release.getDeadline())) <= 0;
	  @*/
//@ also

//@   requires true;

//@   ensures ??;	// something to add?

//@ also

//@   requires true;

//@   ensures ??;	// something to add?

/*@ spec_public @*/
/*@ spec_public @*/
/*@
//	  public static normal_behavior
//	    requires logic != null;
//	    ensures true;  // not finished
//	  also
//	  public static exceptional_behaviour
//	    requires logic == null;
//	    signals (IllegalStateException) true;
//
//	  @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@
//	  public static normal_behavior
//	    requires logic != null;
//	    ensures true;  // not finished
//	  also
//	  public static exceptional_behaviour
//	    requires logic == null;
//	    signals (IllegalStateException) true;
//
//	  @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@
//	  public static normal_behavior
//	    requires logic != null;
//	    ensures true;  // not finished
//	  also
//	  public static exceptional_behaviour
//	    requires logic == null;
//	    signals (IllegalStateException) true;
//
//	  @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@
//	  public static normal_behavior
//	    requires logic != null;
//	    ensures true;  // not finished
//	  also
//	  public static exceptional_behaviour
//	    requires logic == null;
//	    signals (IllegalStateException) true;
//
//	  @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@
//	  public static normal_behavior
//	    requires logic != null;
//	    ensures true;  // not finished
//	  also
//	  public static exceptional_behaviour
//	    requires logic == null;
//	    signals (IllegalStateException) true;
//
//	  @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@
//	  public static normal_behavior
//	    requires logic != null;
//	    ensures true;  // not finished
//	  also
//	  public static exceptional_behaviour
//	    requires logic == null;
//	    signals (IllegalStateException) true;
//
//	  @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@
	public behavior
	  requires Mission.getMission().getPhase() == Phase.INITIALIZE;
	    requires Mission.getMission().inMissionScope(this);
	  requires !Mission.getMission().isRegistered(this);

	    ensures Mission.getMission().isRegistered(this);
	  @*/
/*@
	public behavior
	  requires Mission.getMission().getPhase() == Phase.CLEANUP;
	  requires Mission.getMission().isRegistered(this);

	  ensures !Mission.getMission().isRegistered(this);
	 @*/
/*@
	public behavior
	  requires Mission.getMission().getPhase() == Phase.INITIALIZE;
	    requires Mission.getMission().inMissionScope(this);
	  requires !Mission.getMission().isRegistered(this);

	    ensures Mission.getMission().isRegistered(this);
	  @*/
/*@
	public behavior
	  requires Mission.getMission().getPhase() == Phase.CLEANUP;
	  requires Mission.getMission().isRegistered(this);

	  ensures !Mission.getMission().isRegistered(this);
	 @*/
/*@
	public behavior
	  requires Mission.getMission().getPhase() == Phase.INITIALIZE;
	    requires Mission.getMission().inMissionScope(this);
	  requires !Mission.getMission().isRegistered(this);

	    ensures Mission.getMission().isRegistered(this);
	  @*/
/*@
	public behavior
	  requires Mission.getMission().getPhase() == Phase.CLEANUP;
	  requires Mission.getMission().isRegistered(this);

	  ensures !Mission.getMission().isRegistered(this);
	 @*/
/*@
	public behavior
	  requires Mission.getMission().getPhase() == Phase.INITIALIZE;
	    requires Mission.getMission().inMissionScope(this);
	  requires !Mission.getMission().isRegistered(this);

	    ensures Mission.getMission().isRegistered(this);
	  @*/
/*@
	public behavior
	  requires Mission.getMission().getPhase() == Phase.CLEANUP;
	  requires Mission.getMission().isRegistered(this);

	  ensures !Mission.getMission().isRegistered(this);
	 @*/
/*@
	public behavior
	  requires Mission.getMission().getPhase() == Phase.INITIALIZE;
	    requires Mission.getMission().inMissionScope(this);
	  requires !Mission.getMission().isRegistered(this);

	    ensures Mission.getMission().isRegistered(this);
	  @*/
/*@
	public behavior
	  requires Mission.getMission().getPhase() == Phase.CLEANUP;
	  requires Mission.getMission().isRegistered(this);

	  ensures !Mission.getMission().isRegistered(this);
	 @*/
/*@
	public behavior
	  requires Mission.getMission().getPhase() == Phase.INITIALIZE;
	    requires Mission.getMission().inMissionScope(this);
	  requires !Mission.getMission().isRegistered(this);

	    ensures Mission.getMission().isRegistered(this);
	  @*/
/*@
	public behavior
	  requires Mission.getMission().getPhase() == Phase.CLEANUP;
	  requires Mission.getMission().isRegistered(this);

	  ensures !Mission.getMission().isRegistered(this);
	 @*/
/*@
	  behavior
	    requires ms != null;
	    ensures this.contains(ms);
	  @*/
/*@
	  behavior
	    requires ms != null;
	    ensures this.contains(ms);
	  @*/
/*@
	  behavior
	    requires ms != null;
	    ensures this.contains(ms);
	  @*/
/*@
	  behavior
	    requires ms != null;
	    ensures this.contains(ms);
	  @*/
/*@
	  behavior
	    requires ms != null;
	    ensures this.contains(ms);
	  @*/
/*@
	  behavior
	    requires ms != null;
	    ensures this.contains(ms);
	  @*/
/*@
	//    also
	//    public exceptional_behaviour
	//      requires ??; // not invoked in appropriate phase
	//      signals (IllegalStateException) true;
	//      @*/
//@ also

//@   requires true;

//@   ensures ??;	// something to add?

/*@
	  protected behavior
	    requires true;
	    ensures true;
	  @*/
//@ also

//@   requires true;

//@   ensures ??; // something to add?

/*@ spec_public @*/
/*@
	//    also
	//    public exceptional_behaviour
	//      requires ??; // not invoked in appropriate phase
	//      signals (IllegalStateException) true;
	//      @*/
//@ also

//@   requires true;

//@   ensures ??;	// something to add?

/*@
	  protected behavior
	    requires true;
	    ensures true;
	  @*/
//@ also

//@   requires true;

//@   ensures ??; // something to add?

/*@ spec_public @*/
/*@
	//    also
	//    public exceptional_behaviour
	//      requires ??; // not invoked in appropriate phase
	//      signals (IllegalStateException) true;
	//      @*/
//@ also

//@   requires true;

//@   ensures ??;	// something to add?

/*@
	  protected behavior
	    requires true;
	    ensures true;
	  @*/
//@ also

//@   requires true;

//@   ensures ??; // something to add?

/*@ spec_public @*/
/*@
	//    also
	//    public exceptional_behaviour
	//      requires ??; // not invoked in appropriate phase
	//      signals (IllegalStateException) true;
	//      @*/
//@ also

//@   requires true;

//@   ensures ??;	// something to add?

/*@
	  protected behavior
	    requires true;
	    ensures true;
	  @*/
//@ also

//@   requires true;

//@   ensures ??; // something to add?

/*@ spec_public @*/
/*@
	//    also
	//    public exceptional_behaviour
	//      requires ??; // not invoked in appropriate phase
	//      signals (IllegalStateException) true;
	//      @*/
//@ also

//@   requires true;

//@   ensures ??;	// something to add?

/*@
	  protected behavior
	    requires true;
	    ensures true;
	  @*/
//@ also

//@   requires true;

//@   ensures ??; // something to add?

/*@ spec_public @*/
/*@
	//    also
	//    public exceptional_behaviour
	//      requires ??; // not invoked in appropriate phase
	//      signals (IllegalStateException) true;
	//      @*/
//@ also

//@   requires true;

//@   ensures ??;	// something to add?

/*@
	  protected behavior
	    requires true;
	    ensures true;
	  @*/
//@ also

//@   requires true;

//@   ensures ??; // something to add?

/*@ spec_public @*/
/*@
	public normal_behavior
	  requires priority != null && release  != null;
	  ensures true;
	also
	public exceptional_behavior
	  requires priority == null;
	  signals (IllegalArgumentException) true;
	also
	public exceptional_behavior
	  requires release == null;
	  signals (IllegalArgumentException) true;
	@*/
/*@
	public normal_behavior
	  requires priority != null && release  != null;
	  ensures true;
	also
	public exceptional_behavior
	  requires priority == null;
	  signals (IllegalArgumentException) true;
	also
	public exceptional_behavior
	  requires release == null;
	  signals (IllegalArgumentException) true;
	@*/
/*@
	public normal_behavior
	  requires priority != null && release  != null;
	  ensures true;
	also
	public exceptional_behavior
	  requires priority == null;
	  signals (IllegalArgumentException) true;
	also
	public exceptional_behavior
	  requires release == null;
	  signals (IllegalArgumentException) true;
	@*/
/*@
	public normal_behavior
	  requires priority != null && release  != null;
	  ensures true;
	also
	public exceptional_behavior
	  requires priority == null;
	  signals (IllegalArgumentException) true;
	also
	public exceptional_behavior
	  requires release == null;
	  signals (IllegalArgumentException) true;
	@*/
/*@
	public normal_behavior
	  requires priority != null && release  != null;
	  ensures true;
	also
	public exceptional_behavior
	  requires priority == null;
	  signals (IllegalArgumentException) true;
	also
	public exceptional_behavior
	  requires release == null;
	  signals (IllegalArgumentException) true;
	@*/
/*@
	public normal_behavior
	  requires priority != null && release  != null;
	  ensures true;
	also
	public exceptional_behavior
	  requires priority == null;
	  signals (IllegalArgumentException) true;
	also
	public exceptional_behavior
	  requires release == null;
	  signals (IllegalArgumentException) true;
	@*/
/*@
	  public normal_behavior
	    requires priority != null && release  != null;
	    ensures true;
	  also
	  public exceptional_behavior
	    requires priority == null;
	    signals (IllegalArgumentException) true;
	  also
	  public exceptional_behavior
	    requires release == null;
	    signals (IllegalArgumentException) true;
	@*/
/*@
	  public normal_behavior
	    requires priority != null && release  != null;
	    ensures true;
	  also
	  public exceptional_behavior
	    requires priority == null;
	    signals (IllegalArgumentException) true;
	  also
	  public exceptional_behavior
	    requires release == null;
	    signals (IllegalArgumentException) true;
	@*/
/*@
	  public normal_behavior
	    requires priority != null && release  != null;
	    ensures true;
	  also
	  public exceptional_behavior
	    requires priority == null;
	    signals (IllegalArgumentException) true;
	  also
	  public exceptional_behavior
	    requires release == null;
	    signals (IllegalArgumentException) true;
	@*/
/*@
	  public normal_behavior
	    requires priority != null && release  != null;
	    ensures true;
	  also
	  public exceptional_behavior
	    requires priority == null;
	    signals (IllegalArgumentException) true;
	  also
	  public exceptional_behavior
	    requires release == null;
	    signals (IllegalArgumentException) true;
	@*/
/*@
	  public normal_behavior
	    requires priority != null && release  != null;
	    ensures true;
	  also
	  public exceptional_behavior
	    requires priority == null;
	    signals (IllegalArgumentException) true;
	  also
	  public exceptional_behavior
	    requires release == null;
	    signals (IllegalArgumentException) true;
	@*/
/*@
	  public normal_behavior
	    requires priority != null && release  != null;
	    ensures true;
	  also
	  public exceptional_behavior
	    requires priority == null;
	    signals (IllegalArgumentException) true;
	  also
	  public exceptional_behavior
	    requires release == null;
	    signals (IllegalArgumentException) true;
	@*/
/*@
	  public behaviour
	    requires true;
	    assignable     othing;
	    ensures \result != null ;
	  @*/
/*@
	  public behaviour
	    requires true;
	    assignable     othing;
	    ensures \result != null ;
	  @*/
/*@
	  public behaviour
	    requires true;
	    assignable     othing;
	    ensures \result != null ;
	  @*/
/*@
	  public behaviour
	    requires true;
	    assignable     othing;
	    ensures \result != null ;
	  @*/
/*@
	  public behaviour
	    requires true;
	    assignable     othing;
	    ensures \result != null ;
	  @*/
/*@
	  public behaviour
	    requires true;
	    assignable     othing;
	    ensures \result != null ;
	  @*/
/*@javax.safetycritical.annotate.Scope("cdx.CollisionDetectorHandler")*/
/*@javax.safetycritical.annotate.Scope("cdx.CollisionDetectorHandler")*/
/*@javax.safetycritical.annotate.Scope("cdx.CollisionDetectorHandler")*/
/*@javax.safetycritical.annotate.Scope("cdx.CollisionDetectorHandler")*/
/*@javax.safetycritical.annotate.Scope("cdx.CollisionDetectorHandler")*/
/*@javax.safetycritical.annotate.Scope("cdx.CollisionDetectorHandler")*/
/*@javax.safetycritical.annotate.Scope("cdx.Level0Safelet")*/
/*@javax.safetycritical.annotate.Scope("cdx.Level0Safelet")*/
/*@javax.safetycritical.annotate.Scope("cdx.Level0Safelet")*/
/*@javax.safetycritical.annotate.Scope("cdx.Level0Safelet")*/
/*@javax.safetycritical.annotate.Scope("cdx.Level0Safelet")*/
/*@javax.safetycritical.annotate.Scope("cdx.Level0Safelet")*/
/*@javax.safetycritical.annotate.Scope("cdx.CollisionDetectorHandler")*/
/*@javax.safetycritical.annotate.Scope("cdx.CollisionDetectorHandler")*/
/*@javax.safetycritical.annotate.Scope("cdx.CollisionDetectorHandler")*/
/*@javax.safetycritical.annotate.Scope("cdx.CollisionDetectorHandler")*/
/*@javax.safetycritical.annotate.Scope("cdx.CollisionDetectorHandler")*/
/*@javax.safetycritical.annotate.Scope("cdx.CollisionDetectorHandler")*/
/*@javax.safetycritical.annotate.Scope("cdx.Level0Safelet")*/
/*@javax.safetycritical.annotate.RunsIn("cdx.CollisionDetectorHandler")*/
//@Override

//@Override

//@Override

/*@javax.safetycritical.annotate.Scope("cdx.Level0Safelet")*/
/*@javax.safetycritical.annotate.RunsIn("cdx.CollisionDetectorHandler")*/
//@Override

//@Override

//@Override

/*@javax.safetycritical.annotate.Scope("cdx.Level0Safelet")*/
/*@javax.safetycritical.annotate.RunsIn("cdx.CollisionDetectorHandler")*/
//@Override

//@Override

//@Override

/*@javax.safetycritical.annotate.Scope("cdx.Level0Safelet")*/
/*@javax.safetycritical.annotate.RunsIn("cdx.CollisionDetectorHandler")*/
//@Override

//@Override

//@Override

/*@javax.safetycritical.annotate.Scope("cdx.Level0Safelet")*/
/*@javax.safetycritical.annotate.RunsIn("cdx.CollisionDetectorHandler")*/
//@Override

//@Override

//@Override

/*@javax.safetycritical.annotate.Scope("cdx.Level0Safelet")*/
/*@javax.safetycritical.annotate.RunsIn("cdx.CollisionDetectorHandler")*/
//@Override

//@Override

//@Override

/*@javax.safetycritical.annotate.Scope("cdx.CollisionDetectorHandler")*/
/*@javax.safetycritical.annotate.Scope("cdx.CollisionDetectorHandler")*/
/*@javax.safetycritical.annotate.Scope("cdx.CollisionDetectorHandler")*/
/*@javax.safetycritical.annotate.Scope("cdx.CollisionDetectorHandler")*/
/*@javax.safetycritical.annotate.Scope("cdx.CollisionDetectorHandler")*/
/*@javax.safetycritical.annotate.Scope("cdx.CollisionDetectorHandler")*/
/*@javax.safetycritical.annotate.Scope("immortal")*/
/*@javax.safetycritical.annotate.Scope("immortal")*/
/*@javax.safetycritical.annotate.Scope("immortal")*/
/*@javax.safetycritical.annotate.Scope("immortal")*/
/*@javax.safetycritical.annotate.Scope("immortal")*/
/*@javax.safetycritical.annotate.Scope("immortal")*/
/*@javax.safetycritical.annotate.Scope("immortal")*/
/*@javax.safetycritical.annotate.RunsIn("cdx.Level0Safelet")*/
/*@javax.safetycritical.annotate.Scope("immortal")*/
/*@javax.safetycritical.annotate.RunsIn("cdx.Level0Safelet")*/
/*@javax.safetycritical.annotate.Scope("immortal")*/
/*@javax.safetycritical.annotate.RunsIn("cdx.Level0Safelet")*/
/*@javax.safetycritical.annotate.Scope("immortal")*/
/*@javax.safetycritical.annotate.RunsIn("cdx.Level0Safelet")*/
/*@javax.safetycritical.annotate.Scope("immortal")*/
/*@javax.safetycritical.annotate.RunsIn("cdx.Level0Safelet")*/
/*@javax.safetycritical.annotate.Scope("immortal")*/
/*@javax.safetycritical.annotate.RunsIn("cdx.Level0Safelet")*/
/*@javax.safetycritical.annotate.Scope("cdx.CollisionDetectorHandler")*/
/*@javax.safetycritical.annotate.Scope("cdx.CollisionDetectorHandler")*/
/*@javax.safetycritical.annotate.Scope("cdx.CollisionDetectorHandler")*/
/*@javax.safetycritical.annotate.Scope("cdx.CollisionDetectorHandler")*/
/*@javax.safetycritical.annotate.Scope("cdx.CollisionDetectorHandler")*/
/*@javax.safetycritical.annotate.Scope("cdx.CollisionDetectorHandler")*/
/*@javax.safetycritical.annotate.Scope("cdx.Level0Safelet")*/
/*@javax.safetycritical.annotate.RunsIn("cdx.CollisionDetectorHandler")*/
/*@javax.safetycritical.annotate.Scope("cdx.Level0Safelet")*/
/*@javax.safetycritical.annotate.RunsIn("cdx.CollisionDetectorHandler")*/
/*@javax.safetycritical.annotate.Scope("cdx.Level0Safelet")*/
/*@javax.safetycritical.annotate.RunsIn("cdx.CollisionDetectorHandler")*/
/*@javax.safetycritical.annotate.Scope("cdx.Level0Safelet")*/
/*@javax.safetycritical.annotate.RunsIn("cdx.CollisionDetectorHandler")*/
/*@javax.safetycritical.annotate.Scope("cdx.Level0Safelet")*/
/*@javax.safetycritical.annotate.RunsIn("cdx.CollisionDetectorHandler")*/
/*@javax.safetycritical.annotate.Scope("cdx.Level0Safelet")*/
/*@javax.safetycritical.annotate.RunsIn("cdx.CollisionDetectorHandler")*/
/*@javax.safetycritical.annotate.Scope("immortal")*/
/*@javax.safetycritical.annotate.AllocFree*/
/*@javax.safetycritical.annotate.Scope("immortal")*/
/*@javax.safetycritical.annotate.AllocFree*/
/*@javax.safetycritical.annotate.Scope("immortal")*/
/*@javax.safetycritical.annotate.AllocFree*/
/*@javax.safetycritical.annotate.Scope("immortal")*/
/*@javax.safetycritical.annotate.AllocFree*/
/*@javax.safetycritical.annotate.Scope("immortal")*/
/*@javax.safetycritical.annotate.AllocFree*/
/*@javax.safetycritical.annotate.Scope("immortal")*/
/*@javax.safetycritical.annotate.AllocFree*/
/*@javax.safetycritical.annotate.Scope("cdx.CollisionDetectorHandler")*/
/*@javax.safetycritical.annotate.Scope("cdx.CollisionDetectorHandler")*/
/*@javax.safetycritical.annotate.Scope("cdx.CollisionDetectorHandler")*/
/*@javax.safetycritical.annotate.Scope("cdx.CollisionDetectorHandler")*/
/*@javax.safetycritical.annotate.Scope("cdx.CollisionDetectorHandler")*/
/*@javax.safetycritical.annotate.Scope("cdx.CollisionDetectorHandler")*/
/*@javax.safetycritical.annotate.Scope("cdx.Level0Safelet")*/
/*@javax.safetycritical.annotate.RunsIn("cdx.CollisionDetectorHandler")*/
/*@javax.safetycritical.annotate.RunsIn("cdx.Level0Safelet")*/
/*@javax.safetycritical.annotate.Scope("cdx.Level0Safelet")*/
/*@javax.safetycritical.annotate.RunsIn("cdx.CollisionDetectorHandler")*/
/*@javax.safetycritical.annotate.RunsIn("cdx.Level0Safelet")*/
/*@javax.safetycritical.annotate.Scope("cdx.Level0Safelet")*/
/*@javax.safetycritical.annotate.RunsIn("cdx.CollisionDetectorHandler")*/
/*@javax.safetycritical.annotate.RunsIn("cdx.Level0Safelet")*/
/*@javax.safetycritical.annotate.Scope("cdx.Level0Safelet")*/
/*@javax.safetycritical.annotate.RunsIn("cdx.CollisionDetectorHandler")*/
/*@javax.safetycritical.annotate.RunsIn("cdx.Level0Safelet")*/
/*@javax.safetycritical.annotate.Scope("cdx.Level0Safelet")*/
/*@javax.safetycritical.annotate.RunsIn("cdx.CollisionDetectorHandler")*/
/*@javax.safetycritical.annotate.RunsIn("cdx.Level0Safelet")*/
/*@javax.safetycritical.annotate.Scope("cdx.Level0Safelet")*/
/*@javax.safetycritical.annotate.RunsIn("cdx.CollisionDetectorHandler")*/
/*@javax.safetycritical.annotate.RunsIn("cdx.Level0Safelet")*/
/*@javax.safetycritical.annotate.Scope("cdx.CollisionDetectorHandler")*/
/*@javax.safetycritical.annotate.Scope("cdx.CollisionDetectorHandler")*/
/*@javax.safetycritical.annotate.Scope("cdx.CollisionDetectorHandler")*/
/*@javax.safetycritical.annotate.Scope("cdx.CollisionDetectorHandler")*/
/*@javax.safetycritical.annotate.Scope("cdx.CollisionDetectorHandler")*/
/*@javax.safetycritical.annotate.Scope("cdx.CollisionDetectorHandler")*/
/*@javax.safetycritical.annotate.Scope("cdx.CollisionDetectorHandler")*/
/*@javax.safetycritical.annotate.Scope("cdx.CollisionDetectorHandler")*/
/*@javax.safetycritical.annotate.Scope("cdx.CollisionDetectorHandler")*/
/*@javax.safetycritical.annotate.Scope("cdx.CollisionDetectorHandler")*/
/*@javax.safetycritical.annotate.Scope("cdx.CollisionDetectorHandler")*/
/*@javax.safetycritical.annotate.Scope("cdx.CollisionDetectorHandler")*/
/*@javax.safetycritical.annotate.Scope("immortal")*/
/*@javax.safetycritical.annotate.Scope("immortal")*/
/*@javax.safetycritical.annotate.Scope("immortal")*/
/*@javax.safetycritical.annotate.Scope("immortal")*/
/*@javax.safetycritical.annotate.Scope("immortal")*/
/*@javax.safetycritical.annotate.Scope("immortal")*/
/*@javax.safetycritical.annotate.Scope("immortal")*/
/*@javax.safetycritical.annotate.Scope("immortal")*/
/*@javax.safetycritical.annotate.Scope("immortal")*/
/*@javax.safetycritical.annotate.Scope("immortal")*/
/*@javax.safetycritical.annotate.Scope("immortal")*/
/*@javax.safetycritical.annotate.Scope("immortal")*/
/*@javax.safetycritical.annotate.Scope("immortal")*/
/*@javax.safetycritical.annotate.Scope("immortal")*/
/*@javax.safetycritical.annotate.Scope("cdx.Level0Safelet")*/
/*@javax.safetycritical.annotate.AllocFree*/
/*@javax.safetycritical.annotate.Scope("cdx.Level0Safelet")*/
/*@javax.safetycritical.annotate.AllocFree*/
/*@javax.safetycritical.annotate.Scope("cdx.Level0Safelet")*/
/*@javax.safetycritical.annotate.AllocFree*/
/*@javax.safetycritical.annotate.Scope("cdx.Level0Safelet")*/
/*@javax.safetycritical.annotate.AllocFree*/
/*@javax.safetycritical.annotate.Scope("cdx.Level0Safelet")*/
/*@javax.safetycritical.annotate.AllocFree*/
/*@javax.safetycritical.annotate.Scope("cdx.Level0Safelet")*/
/*@javax.safetycritical.annotate.AllocFree*/
/*@
//    behaviour
//      requires true;
//
//      ensures !failure;
//      ensures
//        (\forall int i; 0 < i && i < SIZE;
//           sample[i-1].compareTo(sample[i]) < 0);
//      ensures
//        (\forall int i; 0 < i && i < SIZE;
//            (sample[i]).subtract(sample[i-1]).
//               compareTo(resolution) >= 0 );
//    @*/
/*@
//    behaviour
//      requires true;
//
//      ensures !failure;
//      ensures
//        (\forall int i; 0 < i && i < SIZE;
//           sample[i-1].compareTo(sample[i]) < 0);
//      ensures
//        (\forall int i; 0 < i && i < SIZE;
//            (sample[i]).subtract(sample[i-1]).
//               compareTo(resolution) >= 0 );
//    @*/
/*@
//    behaviour
//      requires true;
//
//      ensures !failure;
//      ensures
//        (\forall int i; 0 < i && i < SIZE;
//           sample[i-1].compareTo(sample[i]) < 0);
//      ensures
//        (\forall int i; 0 < i && i < SIZE;
//            (sample[i]).subtract(sample[i-1]).
//               compareTo(resolution) >= 0 );
//    @*/
/*@
//    behaviour
//      requires true;
//
//      ensures !failure;
//      ensures
//        (\forall int i; 0 < i && i < SIZE;
//           sample[i-1].compareTo(sample[i]) < 0);
//      ensures
//        (\forall int i; 0 < i && i < SIZE;
//            (sample[i]).subtract(sample[i-1]).
//               compareTo(resolution) >= 0 );
//    @*/
/*@
//    behaviour
//      requires true;
//
//      ensures !failure;
//      ensures
//        (\forall int i; 0 < i && i < SIZE;
//           sample[i-1].compareTo(sample[i]) < 0);
//      ensures
//        (\forall int i; 0 < i && i < SIZE;
//            (sample[i]).subtract(sample[i-1]).
//               compareTo(resolution) >= 0 );
//    @*/
/*@
//    behaviour
//      requires true;
//
//      ensures !failure;
//      ensures
//        (\forall int i; 0 < i && i < SIZE;
//           sample[i-1].compareTo(sample[i]) < 0);
//      ensures
//        (\forall int i; 0 < i && i < SIZE;
//            (sample[i]).subtract(sample[i-1]).
//               compareTo(resolution) >= 0 );
//    @*/
/*@
//    behaviour
//      requires true;
//
//      ensures !failure;
//      ensures
//        (\forall int i; 0 < i && i < SIZE;
//           sample[i-1].compareTo(sample[i]) < 0);
//      ensures
//        (\forall int i; 0 < i && i < SIZE;
//            (sample[i]).subtract(sample[i-1]).
//               compareTo(resolution) >= 0 );
//    @*/
/*@
//    behaviour
//      requires true;
//
//      ensures !failure;
//      ensures
//        (\forall int i; 0 < i && i < SIZE;
//           sample[i-1].compareTo(sample[i]) < 0);
//      ensures
//        (\forall int i; 0 < i && i < SIZE;
//            (sample[i]).subtract(sample[i-1]).
//               compareTo(resolution) >= 0 );
//    @*/
/*@
//    behaviour
//      requires true;
//
//      ensures !failure;
//      ensures
//        (\forall int i; 0 < i && i < SIZE;
//           sample[i-1].compareTo(sample[i]) < 0);
//
//      ensures
//        (\forall int i; 0 < i && i < SIZE;
//           (sample[i]).subtract(sample[i-1]).
//             compareTo(resolution) >= 0 );
//    @*/
/*@
//    behaviour
//      requires true;
//
//      ensures !failure;
//      ensures
//        (\forall int i; 0 < i && i < SIZE;
//           sample[i-1].compareTo(sample[i]) < 0);
//
//      ensures
//        (\forall int i; 0 < i && i < SIZE;
//           (sample[i]).subtract(sample[i-1]).
//             compareTo(resolution) >= 0 );
//    @*/
/*@
//    behaviour
//      requires true;
//
//      ensures !failure;
//      ensures
//        (\forall int i; 0 < i && i < SIZE;
//           sample[i-1].compareTo(sample[i]) < 0);
//
//      ensures
//        (\forall int i; 0 < i && i < SIZE;
//           (sample[i]).subtract(sample[i-1]).
//             compareTo(resolution) >= 0 );
//    @*/
/*@
//    behaviour
//      requires true;
//
//      ensures !failure;
//      ensures
//        (\forall int i; 0 < i && i < SIZE;
//           sample[i-1].compareTo(sample[i]) < 0);
//
//      ensures
//        (\forall int i; 0 < i && i < SIZE;
//           (sample[i]).subtract(sample[i-1]).
//             compareTo(resolution) >= 0 );
//    @*/
/*@
//    behaviour
//      requires true;
//
//      ensures !failure;
//      ensures
//        (\forall int i; 0 < i && i < SIZE;
//           sample[i-1].compareTo(sample[i]) < 0);
//
//      ensures
//        (\forall int i; 0 < i && i < SIZE;
//           (sample[i]).subtract(sample[i-1]).
//             compareTo(resolution) >= 0 );
//    @*/
/*@
//    behaviour
//      requires true;
//
//      ensures !failure;
//      ensures
//        (\forall int i; 0 < i && i < SIZE;
//           sample[i-1].compareTo(sample[i]) < 0);
//
//      ensures
//        (\forall int i; 0 < i && i < SIZE;
//           (sample[i]).subtract(sample[i-1]).
//             compareTo(resolution) >= 0 );
//    @*/
/*@
//    behaviour
//      requires true;
//
//      ensures !failure;
//      ensures
//        (\forall int i; 0 < i && i < SIZE;
//           sample[i-1].compareTo(sample[i]) < 0);
//
//      ensures
//        (\forall int i; 0 < i && i < SIZE;
//           (sample[i]).subtract(sample[i-1]).
//             compareTo(resolution) >= 0 );
//    @*/
/*@
//    behaviour
//      requires true;
//
//      ensures !failure;
//      ensures
//        (\forall int i; 0 < i && i < SIZE;
//           sample[i-1].compareTo(sample[i]) < 0);
//
//      ensures
//        (\forall int i; 0 < i && i < SIZE;
//           (sample[i]).subtract(sample[i-1]).
//             compareTo(resolution) >= 0 );
//    @*/
/*@
      public behavior  // specification from Safelet
        requires true;

        ensures \result != null;
        ensures (MemoryArea.getMemoryArea(\result) instanceof ManagedMemory.ImmortalMemory);

      also  // indicates there are inherited specifications

        requires true;
        ensures MemoryArea.getMemoryArea(\result) instanceof ManagedMemory.ImmortalMemory;
      @*/
/*@
      public behaviour
        requires true;
        ensures MemoryArea.getMemoryArea(\result) instanceof MissionMemory;
      @*/
/*@
      public behaviour
        requires true;
        ensures MemoryArea.getMemoryArea(\result) instanceof PrivateMemory;
      @*/
/*@
      public behavior  // specification from Safelet
        requires true;

        ensures \result != null;
        ensures (MemoryArea.getMemoryArea(\result) instanceof ManagedMemory.ImmortalMemory);

      also  // indicates there are inherited specifications

        requires true;
        ensures MemoryArea.getMemoryArea(\result) instanceof ManagedMemory.ImmortalMemory;
      @*/
/*@
      public behaviour
        requires true;
        ensures MemoryArea.getMemoryArea(\result) instanceof MissionMemory;
      @*/
/*@
      public behaviour
        requires true;
        ensures MemoryArea.getMemoryArea(\result) instanceof PrivateMemory;
      @*/
/*@
      public behavior  // specification from Safelet
        requires true;

        ensures \result != null;
        ensures (MemoryArea.getMemoryArea(\result) instanceof ManagedMemory.ImmortalMemory);

      also  // indicates there are inherited specifications

        requires true;
        ensures MemoryArea.getMemoryArea(\result) instanceof ManagedMemory.ImmortalMemory;
      @*/
/*@
      public behaviour
        requires true;
        ensures MemoryArea.getMemoryArea(\result) instanceof MissionMemory;
      @*/
/*@
      public behaviour
        requires true;
        ensures MemoryArea.getMemoryArea(\result) instanceof PrivateMemory;
      @*/
/*@
      public behavior  // specification from Safelet
        requires true;

        ensures \result != null;
        ensures (MemoryArea.getMemoryArea(\result) instanceof ManagedMemory.ImmortalMemory);

      also  // indicates there are inherited specifications

        requires true;
        ensures MemoryArea.getMemoryArea(\result) instanceof ManagedMemory.ImmortalMemory;
      @*/
/*@
      public behaviour
        requires true;
        ensures MemoryArea.getMemoryArea(\result) instanceof MissionMemory;
      @*/
/*@
      public behaviour
        requires true;
        ensures MemoryArea.getMemoryArea(\result) instanceof PrivateMemory;
      @*/
/*@
      public behavior  // specification from Safelet
        requires true;

        ensures \result != null;
        ensures (MemoryArea.getMemoryArea(\result) instanceof ManagedMemory.ImmortalMemory);

      also  // indicates there are inherited specifications

        requires true;
        ensures MemoryArea.getMemoryArea(\result) instanceof ManagedMemory.ImmortalMemory;
      @*/
/*@
      public behaviour
        requires true;
        ensures MemoryArea.getMemoryArea(\result) instanceof MissionMemory;
      @*/
/*@
      public behaviour
        requires true;
        ensures MemoryArea.getMemoryArea(\result) instanceof PrivateMemory;
      @*/
/*@
      public behavior  // specification from Safelet
        requires true;

        ensures \result != null;
        ensures (MemoryArea.getMemoryArea(\result) instanceof ManagedMemory.ImmortalMemory);

      also  // indicates there are inherited specifications

        requires true;
        ensures MemoryArea.getMemoryArea(\result) instanceof ManagedMemory.ImmortalMemory;
      @*/
/*@
      public behaviour
        requires true;
        ensures MemoryArea.getMemoryArea(\result) instanceof MissionMemory;
      @*/
/*@
      public behaviour
        requires true;
        ensures MemoryArea.getMemoryArea(\result) instanceof PrivateMemory;
      @*/
/*@
      public behavior  // specification from Safelet
        requires true;

        ensures \result != null;
        ensures (MemoryArea.getMemoryArea(\result) instanceof ManagedMemory.ImmortalMemory);

      also  // indicates there are inherited specifications

        requires true;
        ensures MemoryArea.getMemoryArea(\result) instanceof ManagedMemory.ImmortalMemory;
      @*/
/*@
      public behaviour
        requires true;
        ensures MemoryArea.getMemoryArea(\result) instanceof MissionMemory;
      @*/
/*@
      public behaviour
        requires true;
        ensures MemoryArea.getMemoryArea(\result) instanceof PrivateMemory;
      @*/
/*@
      public behavior  // specification from Safelet
        requires true;

        ensures \result != null;
        ensures (MemoryArea.getMemoryArea(\result) instanceof ManagedMemory.ImmortalMemory);

      also  // indicates there are inherited specifications

        requires true;
        ensures MemoryArea.getMemoryArea(\result) instanceof ManagedMemory.ImmortalMemory;
      @*/
/*@
      public behaviour
        requires true;
        ensures MemoryArea.getMemoryArea(\result) instanceof MissionMemory;
      @*/
/*@
      public behaviour
        requires true;
        ensures MemoryArea.getMemoryArea(\result) instanceof PrivateMemory;
      @*/
/*@
      public behaviour
        requires true;

        // evh6.time < evh2.time < evh3.time < evh2.time < evh2.time < evh3.time
        ensures TestCyclicExecutive.timeRecord[0] < TestCyclicExecutive.timeRecord[1];

//          (\forall int i; 0 < i && i < SIZE-2; timeRecord[i] < timeRecord[i + 1]);
//        // frame 0
//        ensures (timeRecord[1] - timeRecord[0] <= 1* minorCycleInNanos);
//        // frame 1
//        ensures (timeRecord[3] - timeRecord[0] <= 2* minorCycleInNanos);
//        // frame 2
//        ensures (timeRecord[4] - timeRecord[0] <= 3* minorCycleInNanos);
//        // frame 4
//        ensures (timeRecord[5] - timeRecord[0] <= 5* minorCycleInNanos);
//        ensures (timeRecord[6] - timeRecord[0] <= 5* minorCycleInNanos);
    @*/
/*@
      public behaviour
        requires true;

        // evh6.time < evh2.time < evh3.time < evh2.time < evh2.time < evh3.time
        ensures TestCyclicExecutive.timeRecord[0] < TestCyclicExecutive.timeRecord[1];

//          (\forall int i; 0 < i && i < SIZE-2; timeRecord[i] < timeRecord[i + 1]);
//        // frame 0
//        ensures (timeRecord[1] - timeRecord[0] <= 1* minorCycleInNanos);
//        // frame 1
//        ensures (timeRecord[3] - timeRecord[0] <= 2* minorCycleInNanos);
//        // frame 2
//        ensures (timeRecord[4] - timeRecord[0] <= 3* minorCycleInNanos);
//        // frame 4
//        ensures (timeRecord[5] - timeRecord[0] <= 5* minorCycleInNanos);
//        ensures (timeRecord[6] - timeRecord[0] <= 5* minorCycleInNanos);
    @*/
/*@
      public behaviour
        requires true;

        // evh6.time < evh2.time < evh3.time < evh2.time < evh2.time < evh3.time
        ensures TestCyclicExecutive.timeRecord[0] < TestCyclicExecutive.timeRecord[1];

//          (\forall int i; 0 < i && i < SIZE-2; timeRecord[i] < timeRecord[i + 1]);
//        // frame 0
//        ensures (timeRecord[1] - timeRecord[0] <= 1* minorCycleInNanos);
//        // frame 1
//        ensures (timeRecord[3] - timeRecord[0] <= 2* minorCycleInNanos);
//        // frame 2
//        ensures (timeRecord[4] - timeRecord[0] <= 3* minorCycleInNanos);
//        // frame 4
//        ensures (timeRecord[5] - timeRecord[0] <= 5* minorCycleInNanos);
//        ensures (timeRecord[6] - timeRecord[0] <= 5* minorCycleInNanos);
    @*/
/*@
      public behaviour
        requires true;

        // evh6.time < evh2.time < evh3.time < evh2.time < evh2.time < evh3.time
        ensures TestCyclicExecutive.timeRecord[0] < TestCyclicExecutive.timeRecord[1];

//          (\forall int i; 0 < i && i < SIZE-2; timeRecord[i] < timeRecord[i + 1]);
//        // frame 0
//        ensures (timeRecord[1] - timeRecord[0] <= 1* minorCycleInNanos);
//        // frame 1
//        ensures (timeRecord[3] - timeRecord[0] <= 2* minorCycleInNanos);
//        // frame 2
//        ensures (timeRecord[4] - timeRecord[0] <= 3* minorCycleInNanos);
//        // frame 4
//        ensures (timeRecord[5] - timeRecord[0] <= 5* minorCycleInNanos);
//        ensures (timeRecord[6] - timeRecord[0] <= 5* minorCycleInNanos);
    @*/
/*@
      public behaviour
        requires true;

        // evh6.time < evh2.time < evh3.time < evh2.time < evh2.time < evh3.time
        ensures TestCyclicExecutive.timeRecord[0] < TestCyclicExecutive.timeRecord[1];

//          (\forall int i; 0 < i && i < SIZE-2; timeRecord[i] < timeRecord[i + 1]);
//        // frame 0
//        ensures (timeRecord[1] - timeRecord[0] <= 1* minorCycleInNanos);
//        // frame 1
//        ensures (timeRecord[3] - timeRecord[0] <= 2* minorCycleInNanos);
//        // frame 2
//        ensures (timeRecord[4] - timeRecord[0] <= 3* minorCycleInNanos);
//        // frame 4
//        ensures (timeRecord[5] - timeRecord[0] <= 5* minorCycleInNanos);
//        ensures (timeRecord[6] - timeRecord[0] <= 5* minorCycleInNanos);
    @*/
/*@
      public behaviour
        requires true;

        // evh6.time < evh2.time < evh3.time < evh2.time < evh2.time < evh3.time
        ensures TestCyclicExecutive.timeRecord[0] < TestCyclicExecutive.timeRecord[1];

//          (\forall int i; 0 < i && i < SIZE-2; timeRecord[i] < timeRecord[i + 1]);
//        // frame 0
//        ensures (timeRecord[1] - timeRecord[0] <= 1* minorCycleInNanos);
//        // frame 1
//        ensures (timeRecord[3] - timeRecord[0] <= 2* minorCycleInNanos);
//        // frame 2
//        ensures (timeRecord[4] - timeRecord[0] <= 3* minorCycleInNanos);
//        // frame 4
//        ensures (timeRecord[5] - timeRecord[0] <= 5* minorCycleInNanos);
//        ensures (timeRecord[6] - timeRecord[0] <= 5* minorCycleInNanos);
    @*/
/*@
      public behaviour
        requires true;

        // evh6.time < evh2.time < evh3.time < evh2.time < evh2.time < evh3.time
        ensures TestCyclicExecutive.timeRecord[0] < TestCyclicExecutive.timeRecord[1];

//          (\forall int i; 0 < i && i < SIZE-2; timeRecord[i] < timeRecord[i + 1]);
//        // frame 0
//        ensures (timeRecord[1] - timeRecord[0] <= 1* minorCycleInNanos);
//        // frame 1
//        ensures (timeRecord[3] - timeRecord[0] <= 2* minorCycleInNanos);
//        // frame 2
//        ensures (timeRecord[4] - timeRecord[0] <= 3* minorCycleInNanos);
//        // frame 4
//        ensures (timeRecord[5] - timeRecord[0] <= 5* minorCycleInNanos);
//        ensures (timeRecord[6] - timeRecord[0] <= 5* minorCycleInNanos);
    @*/
/*@
      public behaviour
        requires true;

        // evh6.time < evh2.time < evh3.time < evh2.time < evh2.time < evh3.time
        ensures TestCyclicExecutive.timeRecord[0] < TestCyclicExecutive.timeRecord[1];

//          (\forall int i; 0 < i && i < SIZE-2; timeRecord[i] < timeRecord[i + 1]);
//        // frame 0
//        ensures (timeRecord[1] - timeRecord[0] <= 1* minorCycleInNanos);
//        // frame 1
//        ensures (timeRecord[3] - timeRecord[0] <= 2* minorCycleInNanos);
//        // frame 2
//        ensures (timeRecord[4] - timeRecord[0] <= 3* minorCycleInNanos);
//        // frame 4
//        ensures (timeRecord[5] - timeRecord[0] <= 5* minorCycleInNanos);
//        ensures (timeRecord[6] - timeRecord[0] <= 5* minorCycleInNanos);
    @*/
/*@
//      protected behaviour
//        requires true;
//
//        // evh6.time < evh2.time < evh3.time < evh2.time < evh2.time < evh3.time
//        ensures timeRecord[0] < timeRecord[1];
//
////          (\forall int i; 0 < i && i < SIZE-2; timeRecord[i] < timeRecord[i + 1]);
////        // frame 0
////        ensures (timeRecord[1] - timeRecord[0] <= 1* minorCycleInNanos);
////        // frame 1
////        ensures (timeRecord[3] - timeRecord[0] <= 2* minorCycleInNanos);
////        // frame 2
////        ensures (timeRecord[4] - timeRecord[0] <= 3* minorCycleInNanos);
////        // frame 4
////        ensures (timeRecord[5] - timeRecord[0] <= 5* minorCycleInNanos);
////        ensures (timeRecord[6] - timeRecord[0] <= 5* minorCycleInNanos);
//    @*/
/*@
//      protected behaviour
//        requires true;
//
//        // evh6.time < evh2.time < evh3.time < evh2.time < evh2.time < evh3.time
//        ensures timeRecord[0] < timeRecord[1];
//
////          (\forall int i; 0 < i && i < SIZE-2; timeRecord[i] < timeRecord[i + 1]);
////        // frame 0
////        ensures (timeRecord[1] - timeRecord[0] <= 1* minorCycleInNanos);
////        // frame 1
////        ensures (timeRecord[3] - timeRecord[0] <= 2* minorCycleInNanos);
////        // frame 2
////        ensures (timeRecord[4] - timeRecord[0] <= 3* minorCycleInNanos);
////        // frame 4
////        ensures (timeRecord[5] - timeRecord[0] <= 5* minorCycleInNanos);
////        ensures (timeRecord[6] - timeRecord[0] <= 5* minorCycleInNanos);
//    @*/
/*@
//      protected behaviour
//        requires true;
//
//        // evh6.time < evh2.time < evh3.time < evh2.time < evh2.time < evh3.time
//        ensures timeRecord[0] < timeRecord[1];
//
////          (\forall int i; 0 < i && i < SIZE-2; timeRecord[i] < timeRecord[i + 1]);
////        // frame 0
////        ensures (timeRecord[1] - timeRecord[0] <= 1* minorCycleInNanos);
////        // frame 1
////        ensures (timeRecord[3] - timeRecord[0] <= 2* minorCycleInNanos);
////        // frame 2
////        ensures (timeRecord[4] - timeRecord[0] <= 3* minorCycleInNanos);
////        // frame 4
////        ensures (timeRecord[5] - timeRecord[0] <= 5* minorCycleInNanos);
////        ensures (timeRecord[6] - timeRecord[0] <= 5* minorCycleInNanos);
//    @*/
/*@
//      protected behaviour
//        requires true;
//
//        // evh6.time < evh2.time < evh3.time < evh2.time < evh2.time < evh3.time
//        ensures timeRecord[0] < timeRecord[1];
//
////          (\forall int i; 0 < i && i < SIZE-2; timeRecord[i] < timeRecord[i + 1]);
////        // frame 0
////        ensures (timeRecord[1] - timeRecord[0] <= 1* minorCycleInNanos);
////        // frame 1
////        ensures (timeRecord[3] - timeRecord[0] <= 2* minorCycleInNanos);
////        // frame 2
////        ensures (timeRecord[4] - timeRecord[0] <= 3* minorCycleInNanos);
////        // frame 4
////        ensures (timeRecord[5] - timeRecord[0] <= 5* minorCycleInNanos);
////        ensures (timeRecord[6] - timeRecord[0] <= 5* minorCycleInNanos);
//    @*/
/*@
//      protected behaviour
//        requires true;
//
//        // evh6.time < evh2.time < evh3.time < evh2.time < evh2.time < evh3.time
//        ensures timeRecord[0] < timeRecord[1];
//
////          (\forall int i; 0 < i && i < SIZE-2; timeRecord[i] < timeRecord[i + 1]);
////        // frame 0
////        ensures (timeRecord[1] - timeRecord[0] <= 1* minorCycleInNanos);
////        // frame 1
////        ensures (timeRecord[3] - timeRecord[0] <= 2* minorCycleInNanos);
////        // frame 2
////        ensures (timeRecord[4] - timeRecord[0] <= 3* minorCycleInNanos);
////        // frame 4
////        ensures (timeRecord[5] - timeRecord[0] <= 5* minorCycleInNanos);
////        ensures (timeRecord[6] - timeRecord[0] <= 5* minorCycleInNanos);
//    @*/
/*@
//      protected behaviour
//        requires true;
//
//        // evh6.time < evh2.time < evh3.time < evh2.time < evh2.time < evh3.time
//        ensures timeRecord[0] < timeRecord[1];
//
////          (\forall int i; 0 < i && i < SIZE-2; timeRecord[i] < timeRecord[i + 1]);
////        // frame 0
////        ensures (timeRecord[1] - timeRecord[0] <= 1* minorCycleInNanos);
////        // frame 1
////        ensures (timeRecord[3] - timeRecord[0] <= 2* minorCycleInNanos);
////        // frame 2
////        ensures (timeRecord[4] - timeRecord[0] <= 3* minorCycleInNanos);
////        // frame 4
////        ensures (timeRecord[5] - timeRecord[0] <= 5* minorCycleInNanos);
////        ensures (timeRecord[6] - timeRecord[0] <= 5* minorCycleInNanos);
//    @*/
/*@
//      protected behaviour
//        requires true;
//
//        // evh6.time < evh2.time < evh3.time < evh2.time < evh2.time < evh3.time
//        ensures timeRecord[0] < timeRecord[1];
//
////          (\forall int i; 0 < i && i < SIZE-2; timeRecord[i] < timeRecord[i + 1]);
////        // frame 0
////        ensures (timeRecord[1] - timeRecord[0] <= 1* minorCycleInNanos);
////        // frame 1
////        ensures (timeRecord[3] - timeRecord[0] <= 2* minorCycleInNanos);
////        // frame 2
////        ensures (timeRecord[4] - timeRecord[0] <= 3* minorCycleInNanos);
////        // frame 4
////        ensures (timeRecord[5] - timeRecord[0] <= 5* minorCycleInNanos);
////        ensures (timeRecord[6] - timeRecord[0] <= 5* minorCycleInNanos);
//    @*/
/*@
//      protected behaviour
//        requires true;
//
//        // evh6.time < evh2.time < evh3.time < evh2.time < evh2.time < evh3.time
//        ensures timeRecord[0] < timeRecord[1];
//
////          (\forall int i; 0 < i && i < SIZE-2; timeRecord[i] < timeRecord[i + 1]);
////        // frame 0
////        ensures (timeRecord[1] - timeRecord[0] <= 1* minorCycleInNanos);
////        // frame 1
////        ensures (timeRecord[3] - timeRecord[0] <= 2* minorCycleInNanos);
////        // frame 2
////        ensures (timeRecord[4] - timeRecord[0] <= 3* minorCycleInNanos);
////        // frame 4
////        ensures (timeRecord[5] - timeRecord[0] <= 5* minorCycleInNanos);
////        ensures (timeRecord[6] - timeRecord[0] <= 5* minorCycleInNanos);
//    @*/
/*@
    public behaviour
      requires true;

      ensures
          (\forall int i; 0 <= i && i < SIZE-1;
             timeRecord[i] < timeRecord[i + 1]);
    @*/
/*@
      protected behaviour
        requires true;

        ensures
          (\forall int i; 0 <= i && i < SIZE-1;
             timeRecord[i] < timeRecord[i + 1]);
    @*/
/*@
    public behaviour
      requires true;

      ensures
          (\forall int i; 0 <= i && i < SIZE-1;
             timeRecord[i] < timeRecord[i + 1]);
    @*/
/*@
      protected behaviour
        requires true;

        ensures
          (\forall int i; 0 <= i && i < SIZE-1;
             timeRecord[i] < timeRecord[i + 1]);
    @*/
/*@
    public behaviour
      requires true;

      ensures
          (\forall int i; 0 <= i && i < SIZE-1;
             timeRecord[i] < timeRecord[i + 1]);
    @*/
/*@
      protected behaviour
        requires true;

        ensures
          (\forall int i; 0 <= i && i < SIZE-1;
             timeRecord[i] < timeRecord[i + 1]);
    @*/
/*@
    public behaviour
      requires true;

      ensures
          (\forall int i; 0 <= i && i < SIZE-1;
             timeRecord[i] < timeRecord[i + 1]);
    @*/
/*@
      protected behaviour
        requires true;

        ensures
          (\forall int i; 0 <= i && i < SIZE-1;
             timeRecord[i] < timeRecord[i + 1]);
    @*/
/*@
    public behaviour
      requires true;

      ensures
          (\forall int i; 0 <= i && i < SIZE-1;
             timeRecord[i] < timeRecord[i + 1]);
    @*/
/*@
      protected behaviour
        requires true;

        ensures
          (\forall int i; 0 <= i && i < SIZE-1;
             timeRecord[i] < timeRecord[i + 1]);
    @*/
/*@
    public behaviour
      requires true;

      ensures
          (\forall int i; 0 <= i && i < SIZE-1;
             timeRecord[i] < timeRecord[i + 1]);
    @*/
/*@
      protected behaviour
        requires true;

        ensures
          (\forall int i; 0 <= i && i < SIZE-1;
             timeRecord[i] < timeRecord[i + 1]);
    @*/
/*@
    public behaviour
      requires true;

      ensures
          (\forall int i; 0 <= i && i < SIZE-1;
             timeRecord[i] < timeRecord[i + 1]);
    @*/
/*@
      protected behaviour
        requires true;

        ensures
          (\forall int i; 0 <= i && i < SIZE-1;
             timeRecord[i] < timeRecord[i + 1]);
    @*/
/*@
    public behaviour
      requires true;

      ensures
          (\forall int i; 0 <= i && i < SIZE-1;
             timeRecord[i] < timeRecord[i + 1]);
    @*/
/*@
      protected behaviour
        requires true;

        ensures
          (\forall int i; 0 <= i && i < SIZE-1;
             timeRecord[i] < timeRecord[i + 1]);
    @*/
/*@
      protected behaviour
        requires true;

        ensures
          (\forall int i; 0 <= i && i < SIZE-1;
             timeRecord[i] < timeRecord[i + 1]);
    @*/
/*@
      protected behaviour
        requires true;

        ensures
          (\forall int i; 0 <= i && i < SIZE-1;
             timeRecord[i] < timeRecord[i + 1]);
    @*/
/*@
      protected behaviour
        requires true;

        ensures
          (\forall int i; 0 <= i && i < SIZE-1;
             timeRecord[i] < timeRecord[i + 1]);
    @*/
/*@
      protected behaviour
        requires true;

        ensures
          (\forall int i; 0 <= i && i < SIZE-1;
             timeRecord[i] < timeRecord[i + 1]);
    @*/
/*@
      protected behaviour
        requires true;

        ensures
          (\forall int i; 0 <= i && i < SIZE-1;
             timeRecord[i] < timeRecord[i + 1]);
    @*/
/*@
      protected behaviour
        requires true;

        ensures
          (\forall int i; 0 <= i && i < SIZE-1;
             timeRecord[i] < timeRecord[i + 1]);
    @*/
/*@
      protected behaviour
        requires true;

        ensures
          (\forall int i; 0 <= i && i < SIZE-1;
             timeRecord[i] < timeRecord[i + 1]);
    @*/
/*@
      protected behaviour
        requires true;

        ensures
          (\forall int i; 0 <= i && i < SIZE-1;
             timeRecord[i] < timeRecord[i + 1]);
    @*/
/*@
      public behaviour
        requires true;

        ensures
          (\forall int i; 0 <= i && i < TestSafelet2.SIZE;
             TestSafelet2.activationOrder[i].missionNo == i % SequencerStub2.missions.length);
      @*/
/*@
      public behaviour
        requires true;

        ensures
          (\forall int i; 0 <= i && i < TestSafelet2.SIZE;
             TestSafelet2.activationOrder[i].missionNo == i % SequencerStub2.missions.length);
      @*/
/*@
      public behaviour
        requires true;

        ensures
          (\forall int i; 0 <= i && i < TestSafelet2.SIZE;
             TestSafelet2.activationOrder[i].missionNo == i % SequencerStub2.missions.length);
      @*/
/*@
      public behaviour
        requires true;

        ensures
          (\forall int i; 0 <= i && i < TestSafelet2.SIZE;
             TestSafelet2.activationOrder[i].missionNo == i % SequencerStub2.missions.length);
      @*/
/*@
      public behaviour
        requires true;

        ensures
          (\forall int i; 0 <= i && i < TestSafelet2.SIZE;
             TestSafelet2.activationOrder[i].missionNo == i % SequencerStub2.missions.length);
      @*/
/*@
      public behaviour
        requires true;

        ensures
          (\forall int i; 0 <= i && i < TestSafelet2.SIZE;
             TestSafelet2.activationOrder[i].missionNo == i % SequencerStub2.missions.length);
      @*/
/*@
      public behaviour
        requires true;

        ensures
          (\forall int i; 0 <= i && i < TestSafelet2.SIZE;
             TestSafelet2.activationOrder[i].missionNo == i % SequencerStub2.missions.length);
      @*/
/*@
      public behaviour
        requires true;

        ensures
          (\forall int i; 0 <= i && i < TestSafelet2.SIZE;
             TestSafelet2.activationOrder[i].missionNo == i % SequencerStub2.missions.length);
      @*/
/*@
	    also
	      ensures true;
	    @*/
/*@
//	    also
//	      ensures true;
//	    @*/
/*@
	    also
	      ensures true;
	    @*/
/*@
//	    also
//	      ensures true;
//	    @*/
/*@
	    also
	      ensures true;
	    @*/
/*@
//	    also
//	      ensures true;
//	    @*/
/*@
	    also
	      ensures true;
	    @*/
/*@
//	    also
//	      ensures true;
//	    @*/
/*@
	    also
	      ensures true;
	    @*/
/*@
//	    also
//	      ensures true;
//	    @*/
/*@
	    also
	      ensures true;
	    @*/
/*@
//	    also
//	      ensures true;
//	    @*/
/*@
	    also
	      ensures true;
	    @*/
/*@
//	    also
//	      ensures true;
//	    @*/
/*@
	    also
	      ensures true;
	    @*/
/*@
//	    also
//	      ensures true;
//	    @*/
/*@
//	      also
//	        requires true;
//	        ensures true;
//	      @*/
/*@
//	      public behaviour
//	        requires true;
//
//	        ensures
//	          (\forall int i; 0 <= i && i < TestSafelet2.SIZE;
//	             TestSafelet2.activationOrder[i].missionNo == i % SequencerStub2.missions.length);
//	      @*/
/*@
		      also
		        requires true;
		        ensures true;
		      @*/
/*@
		      also
		        requires true;

//		        ensures
//		          (\forall int i; 0 <= i && i < TestSafelet2.SIZE;
//		             TestSafelet2.activationOrder[i].missionNo == i % missions.length);
		      @*/
/*@
//	      also
//	        requires true;
//	        ensures true;
//	      @*/
/*@
//	      public behaviour
//	        requires true;
//
//	        ensures
//	          (\forall int i; 0 <= i && i < TestSafelet2.SIZE;
//	             TestSafelet2.activationOrder[i].missionNo == i % SequencerStub2.missions.length);
//	      @*/
/*@
		      also
		        requires true;
		        ensures true;
		      @*/
/*@
		      also
		        requires true;

//		        ensures
//		          (\forall int i; 0 <= i && i < TestSafelet2.SIZE;
//		             TestSafelet2.activationOrder[i].missionNo == i % missions.length);
		      @*/
/*@
//	      also
//	        requires true;
//	        ensures true;
//	      @*/
/*@
//	      public behaviour
//	        requires true;
//
//	        ensures
//	          (\forall int i; 0 <= i && i < TestSafelet2.SIZE;
//	             TestSafelet2.activationOrder[i].missionNo == i % SequencerStub2.missions.length);
//	      @*/
/*@
		      also
		        requires true;
		        ensures true;
		      @*/
/*@
		      also
		        requires true;

//		        ensures
//		          (\forall int i; 0 <= i && i < TestSafelet2.SIZE;
//		             TestSafelet2.activationOrder[i].missionNo == i % missions.length);
		      @*/
/*@
//	      also
//	        requires true;
//	        ensures true;
//	      @*/
/*@
//	      public behaviour
//	        requires true;
//
//	        ensures
//	          (\forall int i; 0 <= i && i < TestSafelet2.SIZE;
//	             TestSafelet2.activationOrder[i].missionNo == i % SequencerStub2.missions.length);
//	      @*/
/*@
		      also
		        requires true;
		        ensures true;
		      @*/
/*@
		      also
		        requires true;

//		        ensures
//		          (\forall int i; 0 <= i && i < TestSafelet2.SIZE;
//		             TestSafelet2.activationOrder[i].missionNo == i % missions.length);
		      @*/
/*@
//	      also
//	        requires true;
//	        ensures true;
//	      @*/
/*@
//	      public behaviour
//	        requires true;
//
//	        ensures
//	          (\forall int i; 0 <= i && i < TestSafelet2.SIZE;
//	             TestSafelet2.activationOrder[i].missionNo == i % SequencerStub2.missions.length);
//	      @*/
/*@
		      also
		        requires true;
		        ensures true;
		      @*/
/*@
		      also
		        requires true;

//		        ensures
//		          (\forall int i; 0 <= i && i < TestSafelet2.SIZE;
//		             TestSafelet2.activationOrder[i].missionNo == i % missions.length);
		      @*/
/*@
//	      also
//	        requires true;
//	        ensures true;
//	      @*/
/*@
//	      public behaviour
//	        requires true;
//
//	        ensures
//	          (\forall int i; 0 <= i && i < TestSafelet2.SIZE;
//	             TestSafelet2.activationOrder[i].missionNo == i % SequencerStub2.missions.length);
//	      @*/
/*@
		      also
		        requires true;
		        ensures true;
		      @*/
/*@
		      also
		        requires true;

//		        ensures
//		          (\forall int i; 0 <= i && i < TestSafelet2.SIZE;
//		             TestSafelet2.activationOrder[i].missionNo == i % missions.length);
		      @*/
/*@
//	      also
//	        requires true;
//	        ensures true;
//	      @*/
/*@
//	      public behaviour
//	        requires true;
//
//	        ensures
//	          (\forall int i; 0 <= i && i < TestSafelet2.SIZE;
//	             TestSafelet2.activationOrder[i].missionNo == i % SequencerStub2.missions.length);
//	      @*/
/*@
		      also
		        requires true;
		        ensures true;
		      @*/
/*@
		      also
		        requires true;

//		        ensures
//		          (\forall int i; 0 <= i && i < TestSafelet2.SIZE;
//		             TestSafelet2.activationOrder[i].missionNo == i % missions.length);
		      @*/
/*@
//	      also
//	        requires true;
//	        ensures true;
//	      @*/
/*@
//	      public behaviour
//	        requires true;
//
//	        ensures
//	          (\forall int i; 0 <= i && i < TestSafelet2.SIZE;
//	             TestSafelet2.activationOrder[i].missionNo == i % SequencerStub2.missions.length);
//	      @*/
/*@
		      also
		        requires true;
		        ensures true;
		      @*/
/*@
		      also
		        requires true;

//		        ensures
//		          (\forall int i; 0 <= i && i < TestSafelet2.SIZE;
//		             TestSafelet2.activationOrder[i].missionNo == i % missions.length);
		      @*/
/*@
	    also
	      ensures true;
	    @*/
/*@
//	    also
//	      ensures true;
//	    @*/
/*@
	    also
	      ensures true;
	    @*/
/*@
//	    also
//	      ensures true;
//	    @*/
/*@
	    also
	      ensures true;
	    @*/
/*@
//	    also
//	      ensures true;
//	    @*/
/*@
	    also
	      ensures true;
	    @*/
/*@
//	    also
//	      ensures true;
//	    @*/
/*@
	    also
	      ensures true;
	    @*/
/*@
//	    also
//	      ensures true;
//	    @*/
/*@
	    also
	      ensures true;
	    @*/
/*@
//	    also
//	      ensures true;
//	    @*/
/*@
	    also
	      ensures true;
	    @*/
/*@
//	    also
//	      ensures true;
//	    @*/
/*@
//      public behaviour
//        requires true;
//        ensures MemoryArea.getMemoryArea(\result) instanceof MissionMemory;
//      @*/
/*@
//      public behaviour
//        requires true;
//        ensures MemoryArea.getMemoryArea(\result) instanceof MissionMemory;
//      @*/
/*@
//      public behaviour
//        requires true;
//        ensures MemoryArea.getMemoryArea(\result) instanceof MissionMemory;
//      @*/
/*@
//      public behaviour
//        requires true;
//        ensures MemoryArea.getMemoryArea(\result) instanceof MissionMemory;
//      @*/
/*@
//      public behaviour
//        requires true;
//        ensures MemoryArea.getMemoryArea(\result) instanceof MissionMemory;
//      @*/
/*@
//	public behaviour
//	requires true;
//	ensures MemoryArea.getMemoryArea(\result) instanceof PrivateMemory;
//	@*/
/*@
//	public behaviour
//	requires true;
//	ensures MemoryArea.getMemoryArea(\result) instanceof PrivateMemory;
//	@*/
/*@
//	public behaviour
//	requires true;
//	ensures MemoryArea.getMemoryArea(\result) instanceof PrivateMemory;
//	@*/
/*@
//	public behaviour
//	requires true;
//	ensures MemoryArea.getMemoryArea(\result) instanceof PrivateMemory;
//	@*/
/*@
//	public behaviour
//	requires true;
//	ensures MemoryArea.getMemoryArea(\result) instanceof PrivateMemory;
//	@*/
/*@
//      public behavior  // specification from Safelet
//        requires true;
//
//        ensures \result != null;
//        ensures (MemoryArea.getMemoryArea(\result) instanceof ManagedMemory.ImmortalMemory);
//
//      also  // indicates there are inherited specifications
//
//        requires true;
//        ensures MemoryArea.getMemoryArea(\result) instanceof ManagedMemory.ImmortalMemory;
//      @*/
/*@
//      public behavior  // specification from Safelet
//        requires true;
//
//        ensures \result != null;
//        ensures (MemoryArea.getMemoryArea(\result) instanceof ManagedMemory.ImmortalMemory);
//
//      also  // indicates there are inherited specifications
//
//        requires true;
//        ensures MemoryArea.getMemoryArea(\result) instanceof ManagedMemory.ImmortalMemory;
//      @*/
/*@
//      public behavior  // specification from Safelet
//        requires true;
//
//        ensures \result != null;
//        ensures (MemoryArea.getMemoryArea(\result) instanceof ManagedMemory.ImmortalMemory);
//
//      also  // indicates there are inherited specifications
//
//        requires true;
//        ensures MemoryArea.getMemoryArea(\result) instanceof ManagedMemory.ImmortalMemory;
//      @*/
/*@
//      public behavior  // specification from Safelet
//        requires true;
//
//        ensures \result != null;
//        ensures (MemoryArea.getMemoryArea(\result) instanceof ManagedMemory.ImmortalMemory);
//
//      also  // indicates there are inherited specifications
//
//        requires true;
//        ensures MemoryArea.getMemoryArea(\result) instanceof ManagedMemory.ImmortalMemory;
//      @*/
/*@
//      public behavior  // specification from Safelet
//        requires true;
//
//        ensures \result != null;
//        ensures (MemoryArea.getMemoryArea(\result) instanceof ManagedMemory.ImmortalMemory);
//
//      also  // indicates there are inherited specifications
//
//        requires true;
//        ensures MemoryArea.getMemoryArea(\result) instanceof ManagedMemory.ImmortalMemory;
//      @*/
/*@
      public behavior  // specification from Safelet
        requires true;

        ensures \result != null;
        ensures (MemoryArea.getMemoryArea(\result) instanceof ManagedMemory.ImmortalMemory);

      also  // indicates there are inherited specifications

        requires true;
        ensures MemoryArea.getMemoryArea(\result) instanceof ManagedMemory.ImmortalMemory;
      @*/
/*@
      public behaviour
        requires true;
        ensures MemoryArea.getMemoryArea(\result) instanceof MissionMemory;
      @*/
/*@
      public behaviour
        requires true;
        ensures MemoryArea.getMemoryArea(\result) instanceof PrivateMemory;
      @*/
/*@
      public behavior  // specification from Safelet
        requires true;

        ensures \result != null;
        ensures (MemoryArea.getMemoryArea(\result) instanceof ManagedMemory.ImmortalMemory);

      also  // indicates there are inherited specifications

        requires true;
        ensures MemoryArea.getMemoryArea(\result) instanceof ManagedMemory.ImmortalMemory;
      @*/
/*@
      public behaviour
        requires true;
        ensures MemoryArea.getMemoryArea(\result) instanceof MissionMemory;
      @*/
/*@
      public behaviour
        requires true;
        ensures MemoryArea.getMemoryArea(\result) instanceof PrivateMemory;
      @*/
/*@
      public behavior  // specification from Safelet
        requires true;

        ensures \result != null;
        ensures (MemoryArea.getMemoryArea(\result) instanceof ManagedMemory.ImmortalMemory);

      also  // indicates there are inherited specifications

        requires true;
        ensures MemoryArea.getMemoryArea(\result) instanceof ManagedMemory.ImmortalMemory;
      @*/
/*@
      public behaviour
        requires true;
        ensures MemoryArea.getMemoryArea(\result) instanceof MissionMemory;
      @*/
/*@
      public behaviour
        requires true;
        ensures MemoryArea.getMemoryArea(\result) instanceof PrivateMemory;
      @*/
/*@
      public behavior  // specification from Safelet
        requires true;

        ensures \result != null;
        ensures (MemoryArea.getMemoryArea(\result) instanceof ManagedMemory.ImmortalMemory);

      also  // indicates there are inherited specifications

        requires true;
        ensures MemoryArea.getMemoryArea(\result) instanceof ManagedMemory.ImmortalMemory;
      @*/
/*@
      public behaviour
        requires true;
        ensures MemoryArea.getMemoryArea(\result) instanceof MissionMemory;
      @*/
/*@
      public behaviour
        requires true;
        ensures MemoryArea.getMemoryArea(\result) instanceof PrivateMemory;
      @*/
/*@
      public behavior  // specification from Safelet
        requires true;

        ensures \result != null;
        ensures (MemoryArea.getMemoryArea(\result) instanceof ManagedMemory.ImmortalMemory);

      also  // indicates there are inherited specifications

        requires true;
        ensures MemoryArea.getMemoryArea(\result) instanceof ManagedMemory.ImmortalMemory;
      @*/
/*@
      public behaviour
        requires true;
        ensures MemoryArea.getMemoryArea(\result) instanceof MissionMemory;
      @*/
/*@
      public behaviour
        requires true;
        ensures MemoryArea.getMemoryArea(\result) instanceof PrivateMemory;
      @*/
//@ assignable allTrue;

//@ ensures allTrue == (\old(allTrue) && v);

//@ loop_invariant allTrue==(\forall int j; 0<=j && j <\count; s.values[j]);

//@ loop_modifies allTrue;

//@ inlined_loop;

//@ assert allTrue==(\forall int j; 0<=j && j <s.count(); s.values[j]);

//@ assert !allTrue;

//@ loop_invariant allTrue==(\forall int j; 0<=j && j <\count; ss.values[j]);

//@ loop_modifies allTrue;

//@ inlined_loop;

//@ assert allTrue==(\forall int j; 0<=j && j <ss.count(); ss.values[j]);

//@ assert allTrue;

//@ assignable allTrue;

//@ ensures allTrue == (\old(allTrue) && v);

//@ loop_invariant allTrue==(\forall int j; 0<=j && j <\count; s.values[j]);

//@ loop_modifies allTrue;

//@ inlined_loop;

//@ assert allTrue==(\forall int j; 0<=j && j <s.count(); s.values[j]);

//@ assert !allTrue;

//@ loop_invariant allTrue==(\forall int j; 0<=j && j <\count; ss.values[j]);

//@ loop_modifies allTrue;

//@ inlined_loop;

//@ assert allTrue==(\forall int j; 0<=j && j <ss.count(); ss.values[j]);

//@ assert allTrue;

//@ nullable_by_default

//@ assignable noNulls;

//@ ensures noNulls == (\old(noNulls) && v!=null);

//@ assignable allTrue;

//@ ensures allTrue == (\old(allTrue) && v);

/*@ non_null*/

//@ loop_invariant noNulls==(\forall int j; 0<=j && j <\count; s.values[j] != null);

//@ loop_modifies noNulls;

//@ inlined_loop;

//@ assert noNulls==(\forall int j; 0<=j && j <s.count(); s.values[j] != null);

//@ assert !noNulls;

//@ assert (\forall int j; 0<=j && j<s.count(); s.values[j] != null);

//@ loop_invariant (boolean)s.values[0] && !(boolean)s.values[1] && (boolean)s.values[2];

//@ loop_invariant allTrue==(\forall int j; 0<=j && j <\count; (boolean)s.values[j]);

//@ loop_modifies allTrue;

//@ inlined_loop;

//@ assert allTrue==(\forall int j; 0<=j && j <s.count(); (boolean)s.values[j]);

//@ assert !allTrue;

//@ nullable_by_default

//@ assignable noNulls;

//@ ensures noNulls == (\old(noNulls) && v!=null);

//@ assignable allTrue;

//@ ensures allTrue == (\old(allTrue) && v);

/*@ non_null*/

//@ loop_invariant noNulls==(\forall int j; 0<=j && j <\count; s.values[j] != null);

//@ loop_modifies noNulls;

//@ inlined_loop;

//@ assert noNulls==(\forall int j; 0<=j && j <s.count(); s.values[j] != null);

//@ assert !noNulls;

//@ assert (\forall int j; 0<=j && j<s.count(); s.values[j] != null);

//@ loop_invariant (boolean)s.values[0] && !(boolean)s.values[1] && (boolean)s.values[2];

//@ loop_invariant allTrue==(\forall int j; 0<=j && j <\count; (boolean)s.values[j]);

//@ loop_modifies allTrue;

//@ inlined_loop;

//@ assert allTrue==(\forall int j; 0<=j && j <s.count(); (boolean)s.values[j]);

//@ assert !allTrue;

//@ static @Model public class MB {  }

//@ model protected static enum mconsts { MEA, MEB }

//@ model public @interface MAnnot {}

//@ static @Model public class MB {  }

//@ model protected static enum mconsts { MEA, MEB }

//@ model public @interface MAnnot {}

//@ static @Model public class MB {  }

//@ model protected static enum mconsts { MEA, MEB }

//@ model public @interface MAnnot {}

//@ requires true;

/*@ nullable*/
//@ requires i == 0;

//@ model public A(int i) {}

//@ requires i == 0.0;

//@ model public A(float i) {}

//@ requires i == null;

//@ model public A(Object i) {}

//@ model public A(int i,int j, @NonNull Object k , non_null Object m) {}

//@ requires j >= 0;

//@ model public A(float nodocs ,int j , int k) {}

//@ invariant true;

//@ constraint false;

//@ initially true;

//@ axiom true;

//@ represents bb_model = 0;

//@ model public @interface MAnnot {}

/*@
 public secret model int i;
 secret represents i = 0;
*/
/*@
 ghost int ghost_i;
*/

//@ in i;

//@ maps a.i \into i;


//@ in i;

//@ in i;

//@ maps a.i \into i;

//@ also requires true;

//@ model @Deprecated Object adl(int i);

//@ model int mdl_nospecs(int i);

//@ requires i == 0;

//@ model void ambig(int i);

//@ requires i == 0.0;

//@ model void ambig(float i);

//@ requires i == null;

//@ model void ambig(Object i);

//@ requires i == "";

//@ model void ambig(String i);

//@ requires true;

//@ ensures \result == 0;

//@ signals (java.io.FileNotFoundException e) true;

//@ signals_only java.io.FileNotFoundException;

//@ requires true;

//@ ensures \result == 0;

//@ modifies a;

//@ signals (java.io.FileNotFoundException e) true;

//@ signals_only java.io.FileNotFoundException;

//@ requires true;

//@ ensures \result == 0;

//@ signals (java.io.FileNotFoundException e) true;

//@ signals_only java.io.FileNotFoundException;



//@ public normal_behavior

//@  requires true;

//@  ensures true;

//@ also public behavior

//@  requires false;

//@  ensures false;



//@invariant false && true;

//@ static @Model public class MB { invariant true;  void qqq() {} }

//@ static model public class MC extends BB {}

/*@ invariant false; */
//@ model public static interface BMInterface {}

/*@ invariant false; */
//@ ensures false;

//@ model Object adl(int i);

//@ ensures false;

/*@ invariant false && false; */
//@ ensures false && false;

//@ model @NonNull Object adl(int i);

//@ ensures false && false;

//@ invariant false;

//@ ensures z_public == 10;

//@ ensures z_public == 11;

//@ public model int mdla();

//@ public model int mdlb();

//@ private model void mdlc();

//@ ghost public int bb_ghost;

//@ model public int bb_model;

//@ ghost private int bb_private;

//@ model static public class BBBM {}

//@ model public CEmpty(Object o) {}

//@ ghost public int ghhost_i;

//@ model public int model_i;

//@ model public int model_m();

//@ model public static class CNested {}

//@ model class CCM {}

//@ requires true;

/*@ nullable*/
//@ requires i == 0;

//@ model public A(int i) {}

//@ requires i == 0.0;

//@ model public A(float i) {}

//@ requires i == null;

//@ model public A(Object i) {}

//@ model public A(int i,int j, @NonNull Object k , non_null Object m) {}

//@ requires j >= 0;

//@ model public A(float nodocs ,int j , int k) {}

//@ invariant true;

//@ constraint false;

//@ initially true;

//@ axiom true;

//@ represents bb_model = 0;

//@ model public @interface MAnnot {}

/*@
 public secret model int i;
 secret represents i = 0;
*/
/*@
 ghost int ghost_i;
*/

//@ in i;

//@ maps a.i \into i;


//@ in i;

//@ in i;

//@ maps a.i \into i;

//@ also requires true;

//@ model @Deprecated Object adl(int i);

//@ model int mdl_nospecs(int i);

//@ requires i == 0;

//@ model void ambig(int i);

//@ requires i == 0.0;

//@ model void ambig(float i);

//@ requires i == null;

//@ model void ambig(Object i);

//@ requires i == "";

//@ model void ambig(String i);

//@ requires true;

//@ ensures \result == 0;

//@ signals (java.io.FileNotFoundException e) true;

//@ signals_only java.io.FileNotFoundException;

//@ requires true;

//@ ensures \result == 0;

//@ modifies a;

//@ signals (java.io.FileNotFoundException e) true;

//@ signals_only java.io.FileNotFoundException;

//@ requires true;

//@ ensures \result == 0;

//@ signals (java.io.FileNotFoundException e) true;

//@ signals_only java.io.FileNotFoundException;



//@ public normal_behavior

//@  requires true;

//@  ensures true;

//@ also public behavior

//@  requires false;

//@  ensures false;



//@invariant false && true;

//@ static @Model public class MB { invariant true;  void qqq() {} }

//@ static model public class MC extends BB {}

/*@ invariant false; */
//@ model public static interface BMInterface {}

/*@ invariant false; */
//@ ensures false;

//@ model Object adl(int i);

//@ ensures false;

/*@ invariant false && false; */
//@ ensures false && false;

//@ model @NonNull Object adl(int i);

//@ ensures false && false;

//@ invariant false;

//@ ensures z_public == 10;

//@ ensures z_public == 11;

//@ public model int mdla();

//@ public model int mdlb();

//@ private model void mdlc();

//@ ghost public int bb_ghost;

//@ model public int bb_model;

//@ ghost private int bb_private;

//@ model static public class BBBM {}

//@ model public CEmpty(Object o) {}

//@ ghost public int ghhost_i;

//@ model public int model_i;

//@ model public int model_m();

//@ model public static class CNested {}

//@ model class CCM {}

//@ requires true;

/*@ nullable*/
//@ requires i == 0;

//@ model public A(int i) {}

//@ requires i == 0.0;

//@ model public A(float i) {}

//@ requires i == null;

//@ model public A(Object i) {}

//@ model public A(int i,int j, @NonNull Object k , non_null Object m) {}

//@ requires j >= 0;

//@ model public A(float nodocs ,int j , int k) {}

//@ invariant true;

//@ constraint false;

//@ initially true;

//@ axiom true;

//@ represents bb_model = 0;

//@ model public @interface MAnnot {}

/*@
 public secret model int i;
 secret represents i = 0;
*/
/*@
 ghost int ghost_i;
*/

//@ in i;

//@ maps a.i \into i;


//@ in i;

//@ in i;

//@ maps a.i \into i;

//@ also requires true;

//@ model @Deprecated Object adl(int i);

//@ model int mdl_nospecs(int i);

//@ requires i == 0;

//@ model void ambig(int i);

//@ requires i == 0.0;

//@ model void ambig(float i);

//@ requires i == null;

//@ model void ambig(Object i);

//@ requires i == "";

//@ model void ambig(String i);

//@ requires true;

//@ ensures \result == 0;

//@ signals (java.io.FileNotFoundException e) true;

//@ signals_only java.io.FileNotFoundException;

//@ requires true;

//@ ensures \result == 0;

//@ modifies a;

//@ signals (java.io.FileNotFoundException e) true;

//@ signals_only java.io.FileNotFoundException;

//@ requires true;

//@ ensures \result == 0;

//@ signals (java.io.FileNotFoundException e) true;

//@ signals_only java.io.FileNotFoundException;



//@ public normal_behavior

//@  requires true;

//@  ensures true;

//@ also public behavior

//@  requires false;

//@  ensures false;



//@invariant false && true;

//@ static @Model public class MB { invariant true;  void qqq() {} }

//@ static model public class MC extends BB {}

/*@ invariant false; */
//@ model public static interface BMInterface {}

/*@ invariant false; */
//@ ensures false;

//@ model Object adl(int i);

//@ ensures false;

/*@ invariant false && false; */
//@ ensures false && false;

//@ model @NonNull Object adl(int i);

//@ ensures false && false;

//@ invariant false;

//@ ensures z_public == 10;

//@ ensures z_public == 11;

//@ public model int mdla();

//@ public model int mdlb();

//@ private model void mdlc();

//@ ghost public int bb_ghost;

//@ model public int bb_model;

//@ ghost private int bb_private;

//@ model static public class BBBM {}

//@ model public CEmpty(Object o) {}

//@ ghost public int ghhost_i;

//@ model public int model_i;

//@ model public int model_m();

//@ model public static class CNested {}

//@ model class CCM {}

//@ ghost public int gp_public;

//@ ghost protected int gp_protected;

//@ ghost int gp_package;

//@ ghost private int gp_private;

//@ model public void qp_public() {};

//@ model protected void qp_protected() {}

//@ model void qp_package() {}

//@ model private void qp_private() {}

//@ model public PVis(Object o) {}

//@ model protected PVis(float i) {}

//@ model PVis(float i, float j) {}

//@ model private PVis(float i, float j, float k) {}

//@ model public static class Dp_public {}

//@ model protected static class Dp_protected {}

//@ model static class Dp_package {}

//@ model private static class Dp_private {}

//@ model public static enum EMp_public { EMAp }

//@ model protected static enum EMp_protected { EMBp }

//@ model static enum EMp_package { EMCp }

//@ model private static enum EMp_private { EMDp }

//@ model public static interface IMp_public {  }

//@ model protected static interface IMp_protected {  }

//@ model static interface IMp_package {  }

//@ model private static interface IMp_private {  }

//@ model public static @interface AMp_public {  }

//@ model protected static @interface AMp_protected {  }

//@ model static @interface AMp_package {  }

//@ model private static @interface AMp_private {  }

//@ ghost public int gp_public;

//@ ghost protected int gp_protected;

//@ ghost int gp_package;

//@ ghost private int gp_private;

//@ model public void qp_public() {};

//@ model protected void qp_protected() {}

//@ model void qp_package() {}

//@ model private void qp_private() {}

//@ model public PVis(Object o) {}

//@ model protected PVis(float i) {}

//@ model PVis(float i, float j) {}

//@ model private PVis(float i, float j, float k) {}

//@ model public static class Dp_public {}

//@ model protected static class Dp_protected {}

//@ model static class Dp_package {}

//@ model private static class Dp_private {}

//@ model public static enum EMp_public { EMAp }

//@ model protected static enum EMp_protected { EMBp }

//@ model static enum EMp_package { EMCp }

//@ model private static enum EMp_private { EMDp }

//@ model public static interface IMp_public {  }

//@ model protected static interface IMp_protected {  }

//@ model static interface IMp_package {  }

//@ model private static interface IMp_private {  }

//@ model public static @interface AMp_public {  }

//@ model protected static @interface AMp_protected {  }

//@ model static @interface AMp_package {  }

//@ model private static @interface AMp_private {  }

//@ ghost public int gp_public;

//@ ghost protected int gp_protected;

//@ ghost int gp_package;

//@ ghost private int gp_private;

//@ model public void qp_public() {};

//@ model protected void qp_protected() {}

//@ model void qp_package() {}

//@ model private void qp_private() {}

//@ model public PVis(Object o) {}

//@ model protected PVis(float i) {}

//@ model PVis(float i, float j) {}

//@ model private PVis(float i, float j, float k) {}

//@ model public static class Dp_public {}

//@ model protected static class Dp_protected {}

//@ model static class Dp_package {}

//@ model private static class Dp_private {}

//@ model public static enum EMp_public { EMAp }

//@ model protected static enum EMp_protected { EMBp }

//@ model static enum EMp_package { EMCp }

//@ model private static enum EMp_private { EMDp }

//@ model public static interface IMp_public {  }

//@ model protected static interface IMp_protected {  }

//@ model static interface IMp_package {  }

//@ model private static interface IMp_private {  }

//@ model public static @interface AMp_public {  }

//@ model protected static @interface AMp_protected {  }

//@ model static @interface AMp_package {  }

//@ model private static @interface AMp_private {  }

//@ ghost public int gp_public;

//@ ghost protected int gp_protected;

//@ ghost int gp_package;

//@ ghost private int gp_private;

//@ model public void qp_public() {};

//@ model protected void qp_protected() {}

//@ model void qp_package() {}

//@ model private void qp_private() {}

//@ model public PVis(Object o) {}

//@ model protected PVis(float i) {}

//@ model PVis(float i, float j) {}

//@ model private PVis(float i, float j, float k) {}

//@ model public static class Dp_public {}

//@ model protected static class Dp_protected {}

//@ model static class Dp_package {}

//@ model private static class Dp_private {}

//@ model public static enum EMp_public { EMAp }

//@ model protected static enum EMp_protected { EMBp }

//@ model static enum EMp_package { EMCp }

//@ model private static enum EMp_private { EMDp }

//@ model public static interface IMp_public {  }

//@ model protected static interface IMp_protected {  }

//@ model static interface IMp_package {  }

//@ model private static interface IMp_private {  }

//@ model public static @interface AMp_public {  }

//@ model protected static @interface AMp_protected {  }

//@ model static @interface AMp_package {  }

//@ model private static @interface AMp_private {  }

//@ ghost public int g_public;

//@ ghost protected int g_protected;

//@ ghost int g_package;

//@ ghost private int g_private;

//@ model public void q_public() {};

//@ model protected void q_protected() {}

//@ model void q_package() {}

//@ model private void q_private() {}

//@ model public Vis(Object o) {}

//@ model protected Vis(float i) {}

//@ model Vis(float i, float j) {}

//@ model private Vis(float i, float j, float k) {}

//@ model public static class D_public {}

//@ model protected static class D_protected {}

//@ model static class D_package {}

//@ model private static class D_private {}

//@ model public static enum EM_public { EMA }

//@ model protected static enum EM_protected { EMB }

//@ model static enum EM_package { EMC }

//@ model private static enum EM_private { EMD }

//@ model public static interface IM_public {  }

//@ model protected static interface IM_protected {  }

//@ model static interface IM_package {  }

//@ model private static interface IM_private {  }

//@ model public static @interface AM_public {  }

//@ model protected static @interface AM_protected {  }

//@ model static @interface AM_package {  }

//@ model private static @interface AM_private {  }

//@ ghost public int gs_public;

//@ ghost protected int gs_protected;

//@ ghost int gs_package;

//@ ghost private int gs_private;

//@ model public void qs_public() {};

//@ model protected void qs_protected() {}

//@ model void qs_package() {}

//@ model private void qs_private() {}

//@ model public SVis(Object o) {}

//@ model protected SVis(float i) {}

//@ model SVis(float i, float j) {}

//@ model private SVis(float i, float j, float k) {}

//@ model public static class Ds_public {}

//@ model protected static class Ds_protected {}

//@ model static class Ds_package {}

//@ model private static class Ds_private {}

//@ model public static enum EMs_public { EMAs }

//@ model protected static enum EMs_protected { EMBs }

//@ model static enum EMs_package { EMCs }

//@ model private static enum EMs_private { EMDs }

//@ model public static interface IMs_public {  }

//@ model protected static interface IMs_protected {  }

//@ model static interface IMs_package {  }

//@ model private static interface IMs_private {  }

//@ model public static @interface AMs_public {  }

//@ model protected static @interface AMs_protected {  }

//@ model static @interface AMs_package {  }

//@ model private static @interface AMs_private {  }

//@ ghost public int g_public;

//@ ghost protected int g_protected;

//@ ghost int g_package;

//@ ghost private int g_private;

//@ model public void q_public() {};

//@ model protected void q_protected() {}

//@ model void q_package() {}

//@ model private void q_private() {}

//@ model public Vis(Object o) {}

//@ model protected Vis(float i) {}

//@ model Vis(float i, float j) {}

//@ model private Vis(float i, float j, float k) {}

//@ model public static class D_public {}

//@ model protected static class D_protected {}

//@ model static class D_package {}

//@ model private static class D_private {}

//@ model public static enum EM_public { EMA }

//@ model protected static enum EM_protected { EMB }

//@ model static enum EM_package { EMC }

//@ model private static enum EM_private { EMD }

//@ model public static interface IM_public {  }

//@ model protected static interface IM_protected {  }

//@ model static interface IM_package {  }

//@ model private static interface IM_private {  }

//@ model public static @interface AM_public {  }

//@ model protected static @interface AM_protected {  }

//@ model static @interface AM_package {  }

//@ model private static @interface AM_private {  }

//@ ghost public int gs_public;

//@ ghost protected int gs_protected;

//@ ghost int gs_package;

//@ ghost private int gs_private;

//@ model public void qs_public() {};

//@ model protected void qs_protected() {}

//@ model void qs_package() {}

//@ model private void qs_private() {}

//@ model public SVis(Object o) {}

//@ model protected SVis(float i) {}

//@ model SVis(float i, float j) {}

//@ model private SVis(float i, float j, float k) {}

//@ model public static class Ds_public {}

//@ model protected static class Ds_protected {}

//@ model static class Ds_package {}

//@ model private static class Ds_private {}

//@ model public static enum EMs_public { EMAs }

//@ model protected static enum EMs_protected { EMBs }

//@ model static enum EMs_package { EMCs }

//@ model private static enum EMs_private { EMDs }

//@ model public static interface IMs_public {  }

//@ model protected static interface IMs_protected {  }

//@ model static interface IMs_package {  }

//@ model private static interface IMs_private {  }

//@ model public static @interface AMs_public {  }

//@ model protected static @interface AMs_protected {  }

//@ model static @interface AMs_package {  }

//@ model private static @interface AMs_private {  }

//@ ghost public int g_public;

//@ ghost protected int g_protected;

//@ ghost int g_package;

//@ ghost private int g_private;

//@ model public void q_public() {};

//@ model protected void q_protected() {}

//@ model void q_package() {}

//@ model private void q_private() {}

//@ model public Vis(Object o) {}

//@ model protected Vis(float i) {}

//@ model Vis(float i, float j) {}

//@ model private Vis(float i, float j, float k) {}

//@ model public static class D_public {}

//@ model protected static class D_protected {}

//@ model static class D_package {}

//@ model private static class D_private {}

//@ model public static enum EM_public { EMA }

//@ model protected static enum EM_protected { EMB }

//@ model static enum EM_package { EMC }

//@ model private static enum EM_private { EMD }

//@ model public static interface IM_public {  }

//@ model protected static interface IM_protected {  }

//@ model static interface IM_package {  }

//@ model private static interface IM_private {  }

//@ model public static @interface AM_public {  }

//@ model protected static @interface AM_protected {  }

//@ model static @interface AM_package {  }

//@ model private static @interface AM_private {  }

//@ ghost public int gs_public;

//@ ghost protected int gs_protected;

//@ ghost int gs_package;

//@ ghost private int gs_private;

//@ model public void qs_public() {};

//@ model protected void qs_protected() {}

//@ model void qs_package() {}

//@ model private void qs_private() {}

//@ model public SVis(Object o) {}

//@ model protected SVis(float i) {}

//@ model SVis(float i, float j) {}

//@ model private SVis(float i, float j, float k) {}

//@ model public static class Ds_public {}

//@ model protected static class Ds_protected {}

//@ model static class Ds_package {}

//@ model private static class Ds_private {}

//@ model public static enum EMs_public { EMAs }

//@ model protected static enum EMs_protected { EMBs }

//@ model static enum EMs_package { EMCs }

//@ model private static enum EMs_private { EMDs }

//@ model public static interface IMs_public {  }

//@ model protected static interface IMs_protected {  }

//@ model static interface IMs_package {  }

//@ model private static interface IMs_private {  }

//@ model public static @interface AMs_public {  }

//@ model protected static @interface AMs_protected {  }

//@ model static @interface AMs_package {  }

//@ model private static @interface AMs_private {  }

/*@ normal_behavior
	  @ requires x != null;
      @ requires x.length >= 1;
	  @  ensures \result == (\forall int k; 0<k && k<x.length; x[k-1] <= x[k]);
	  @*/
//@ loop_invariant 1 <= i && i <= x.length;

//@ loop_invariant result == (\forall int j; 1 <= j && j < i; x[j-1] <= x[j]);

//@ decreasing x.length - i;

/*@ normal_behavior
	  @ requires x >= 0;
	  @ ensures \result == x*(x+1)/2;
	  @*/
//@ assume i*(i+1)/2 == ((i-1)*i/2) + i;

//@ loop_invariant 1 <= i && i <= x + 1;

//@ loop_invariant i*(i+1)/2 == ((i-1)*i/2) + i;

//@ loop_invariant result == (i-1)*i/2;

//@ decreasing (x - i);

//@ assume i*(i+1)/2 == ((i-1)*i/2) + i;

/*@ normal_behavior
	  @ requires x != null;
	  @ ensures (\forall int i; 0 <= i && i < x.length; x[i] <= \result);
	 */
//@ requires x.length > 0;

//@ loop_invariant 1 <= i && i <= x.length;

//@ loop_invariant (\forall int j; 0 <= j && j < i; x[j] <= max);

//@ decreasing x.length - i;

/*@ normal_behavior
	  @ requires x != null;
      @ requires x.length >= 1;
	  @  ensures \result == (\forall int k; 0<k && k<x.length; x[k-1] <= x[k]);
	  @*/
//@ loop_invariant 1 <= i && i <= x.length;

//@ loop_invariant result == (\forall int j; 1 <= j && j < i; x[j-1] <= x[j]);

//@ decreasing x.length - i;

/*@ normal_behavior
	  @ requires x >= 0;
	  @ ensures \result == x*(x+1)/2;
	  @*/
//@ assume i*(i+1)/2 == ((i-1)*i/2) + i;

//@ loop_invariant 1 <= i && i <= x + 1;

//@ loop_invariant i*(i+1)/2 == ((i-1)*i/2) + i;

//@ loop_invariant result == (i-1)*i/2;

//@ decreasing (x - i);

//@ assume i*(i+1)/2 == ((i-1)*i/2) + i;

/*@ normal_behavior
	  @ requires x != null;
	  @ ensures (\forall int i; 0 <= i && i < x.length; x[i] <= \result);
	 */
//@ requires x.length > 0;

//@ loop_invariant 1 <= i && i <= x.length;

//@ loop_invariant (\forall int j; 0 <= j && j < i; x[j] <= max);

//@ decreasing x.length - i;

/*@ public model class MContents {
    public boolean foo() { return true; }
    }
    @*/
/*@ public static model class SMContents {
    public boolean foo() { return true; }
    }
    @*/
/*@ public model class MContents {
    public boolean foo() { return true; }
    }
    @*/
/*@ public static model class SMContents {
    public boolean foo() { return true; }
    }
    @*/
/*@ public model class MIndexedContents extends ModelClassExampleBug<E>.MContents {
          public boolean foo() { return false; }
        }

        public static model class SMIndexedContents extends ModelClassExampleBug<E>.SMContents { // ERROR
          public boolean foo() { return false; }
        }
    @*/
/*@ public model class MIndexedContents extends ModelClassExampleBug<E>.MContents {
          public boolean foo() { return false; }
        }

        public static model class SMIndexedContents extends ModelClassExampleBug<E>.SMContents { // ERROR
          public boolean foo() { return false; }
        }
    @*/
/*@
    public static model class Contents {
          public boolean foo() { return true; }
      }
    @*/
/*@
    public static model class Contents {
          public boolean foo() { return true; }
      }
    @*/
/*@
     public static model class IndexedContents extends NonGenericModelClassExampleBug.Contents {
          public boolean foo() { return false; }
     }
@*/
/*@
     public static model class IndexedContents extends NonGenericModelClassExampleBug.Contents {
          public boolean foo() { return false; }
     }
@*/
//@ old nullable Object o = oo;

//@ requires o != null;


//@ old Object o = oo;

//@ requires o != null;


//@ old nullable Object o = oo;

//@ requires o != null;


//@ old Object o = oo;

//@ requires o != null;


//@ public normal_behavior

//@   requires a.length > 100;

//@   requires i>=0 && i < 5;

//@   old int ii = 2*i;

//@   {|

//@     requires j >= 0 && j < 10;

//@   also

//@     requires j >= 0 && j < 10;

//@   |}

//@   old int iij = ii + j;

//@   assignable a[ii];

//@   ensures \result == iij;

//@ public normal_behavior

//@   requires a.length > 100;

//@   requires i>=0 && i < 5;

//@   old int ii = 2*i;

//@   {|

//@     requires j >= 0 && j < 10;

//@   also

//@     requires j >= 0 && j < 10;

//@   |}

//@   old int iij = ii + j;

//@   assignable a[ii];

//@   ensures \result == iij;

//@ public normal_behavior

//@   requires i >= 42;

//@   ensures \result == 420;

//@ public normal_behavior

//@   requires i >= 42;

//@   ensures \result == 420;

//@ also

//@   requires p >= 0;

//@   requires p >= 10;

//@   requires p >= 20;

//@ also

//@   requires p >= 5;

//@   requires p >= 15;

//@   requires p >= 25;

//@ also

//@   requires p >= 0;

//@   requires p >= 10;

//@   requires p >= 20;

//@ also

//@   requires p >= 5;

//@   requires p >= 15;

//@   requires p >= 25;

//@ also

//@   requires q >= 0 &&  q >= 10 && q >= 20;

//@ also

//@   requires q >= 5 && q >= 15 && q >= 25;

//@ also

//@   requires q >= 0 &&  q >= 10 && q >= 20;

//@ also

//@   requires q >= 5 && q >= 15 && q >= 25;

//@   requires r >= 5;

//@   {|

//@   requires r >= 10;

//@   requires r >= 20;

//@ also

//@   requires r >= 15;

//@   requires r >= 25;

//@   |}

//@   requires r >= 5;

//@   {|

//@   requires r >= 10;

//@   requires r >= 20;

//@ also

//@   requires r >= 15;

//@   requires r >= 25;

//@   |}

//@ also

//@   requires p >= 0;

//@   requires p >= 10;

//@   requires p >= 20;

//@ also

//@   requires p >= 5;

//@   requires p >= 15;

//@   requires p >= 25;








//@ also

//@   requires p >= 0;

//@   requires p >= 10;

//@   requires p >= 20;

//@ also

//@   requires p >= 5;

//@   requires p >= 15;

//@   requires p >= 25;








//@ also

//@   requires q >= 0 &&  q >= 10 && q >= 20;



//@ also

//@   requires q >= 0 &&  q >= 10 && q >= 20;



//@   requires r >= 5;

//@   {|

//@   requires r >= 10;

//@   requires r >= 20;

//@ also

//@   requires r >= 15;

//@   requires r >= 25;

//@   |}



//@   requires r >= 5;

//@   {|

//@   requires r >= 10;

//@   requires r >= 20;

//@ also

//@   requires r >= 15;

//@   requires r >= 25;

//@   |}



//@ public normal_behavior a:

//@  old int y = i + 2;

//@ also public normal_behavior b:

//@  old int x = i - 1;

//@  old int y = i + 1;

//@ requires x >= 0;

//@ assert i - 1 == \old(x,a);

//@ public normal_behavior a:

//@  old int y = i + 2;

//@ also public normal_behavior b:

//@  old int x = i - 1;

//@  old int y = i + 1;

//@ requires x >= 0;

//@ assert i - 1 == \old(x,a);

//@ public normal_behavior a:

//@  old int y = i + 2;

//@ also public normal_behavior b:

//@ old int x = i - 1;

//@ old int y = i + 1;

//@ requires x >= 0;

//@ assert i - 1 == \old(x,b);

//@ assert \old(y,b) == i + 1;

//@ assert \old(y,a) == i + 2;

//@ public normal_behavior a:

//@   requires b;

//@   old int x = i + 1;

//@ also public normal_behavior b:

//@   requires !b;

//@   old int x = i -1;

//@ assert \old(x,a) == i + 1;

//@ assert \old(x,b) == i - 1;

//@ public normal_behavior a:

//@   requires b;

//@   old int x = i + 1;

//@ also public normal_behavior b:

//@   requires !b;

//@   old int x = i -1;

//@ assert \old(x,a) == i + 1;

//@ assert \old(x,b) == i - 1;

//@ public normal_behavior a:

//@   requires b;

//@   old int x = i + 1;

//@ also public normal_behavior b:

//@   requires !b;

//@   old int x = i -1;

//@ assert \old(x,a) == i + 1;

//@ assert \old(x,b) == i - 1;

//@ public normal_behavior a:

//@  old int y = i + 2;

//@ also public normal_behavior b:

//@ old int x = i - 1;

//@ old int y = i + 1;

//@ requires x >= 0;

//@ assert i - 1 == \old(x,b);

//@ assert \old(y,b) == i + 1;

//@ assert \old(y,a) == i + 2;

//@ public normal_behavior a:

//@   requires b;

//@   old int x = i + 1;

//@ also public normal_behavior b:

//@   requires !b;

//@   old int x = i -1;

//@ assert \old(x,a) == i + 1;

//@ assert \old(x,b) == i - 1;

//@ public normal_behavior a:

//@   requires b;

//@   old int x = i + 1;

//@ also public normal_behavior b:

//@   requires !b;

//@   old int x = i -1;

//@ assert \old(x,a) == i + 1;

//@ assert \old(x,b) == i - 1;

//@ public normal_behavior a:

//@   requires b;

//@   old int x = i + 1;

//@ also public normal_behavior b:

//@   requires !b;

//@   old int x = i -1;

//@ assert \old(x,a) == i + 1;

//@ assert \old(x,b) == i - 1;

//@ pure

//@ invariant i + 2 * 3 - 4 / 5 + 6 % i + (i << 5) + (i >> 6) + (i >>> i) == -10;

//@ invariant i > 0 && i < 0 && i == 0 && (i <= +10 ? i >= 0 : i != 0);

//@ invariant b || !b && (b ==> b) && ( b <==> b ) && ( b <=!=> b ) && (b <== b);

//@ invariant (i & 1) + (i ^ 1) + (i | 1) + (~i) == 0;

//@ invariant \type(int) <: \typeof(o);

//@ invariant \type(int) <#= \typeof(o);

//@ invariant \type(int) <# \typeof(o);

//@ invariant o instanceof java.lang.String;

//@ invariant true && false && (i == 10.0) && (i < -10e4) && (i > +.4e+5) && (i > +.4e+50);

//@ invariant "asd" != (Object)null && 'c' != 'd' && 'a' != '\045' && "45" != "    \"'\034";

//@ invariant (int)9 == 9 && (char)3 == 'd' && (float)4 == (double)5 && (short)1 == (byte)(-1) && (long)-13 == -12;

//@ invariant (new int[]{1,2,3}).length == 3 && (new int[]{1,2,3})[0] == 1 && a[3] == 6;

//@ invariant (new PP()).i == 0;

//@ invariant (\forall int i; i != 0) && (\forall int k; k > 0; k >-1);

//@ invariant (\exists int i; i != 0) && (\exists int k; k > 0; k >-1);

//@ invariant (    um_of int i; i == 0) == (    um_of int k; k > 0; k >-1);

//@ invariant (\max int i; i>0 && i<10; i ) == (\min int i; i>0 && i<10; i );

//@ invariant (\sum int i; i>0 && i<10; i ) == (\product int i; i>0 && i<10; i );

//@ invariant this.i == 0 && super.bb() && PP.class != null;

//@ invariant (* informal predicate *) && false && m() == 0 && 0==mq(1,false,new Object());

//@ invariant \is_initialized(PP);

//@ invariant \is_initialized(Integer);

//@ invariant \invariant_for(o);

//@ invariant (\lblpos A true);

//@ invariant (\lblneg A true);

//@ invariant (\lbl A true);

//@ invariant ! \reach(o).isEmpty();

//@ invariant \reach(o) != null;

//@ invariant (new PP() { int m() { return 5; } }) != null;

//@ invariant new JMLSetType { Integer o | list.contains(o) && o > 0 } != null;

//@ constraint i >= \old(i);

//@ axiom true;

//@ initially true;

//@ readable i if true;

//@ writable i if true;

//@ monitors_for i = o;

//@ public invariant false;

//@ public constraint i >= \old(i);

//@ public initially true;

//@ public readable i if true;

//@ public writable i if true;

//@ public monitors_for i = o;

//@ model int modelM;

//@ represents modelM = 20;

//@ model int modelMZ;

//@ private represents modelMZ = 20;

//@ model int modelM2; in modelM;

//@ ensures \result > 0 && !     onnullelements(a) && \elemtype(\typeof(a)) == \type(int);

//@ ensures \duration(m()) > 0 && \space(o) > 0 && \working_space(m()) > 0;

//@ ensures \fresh(a) && \fresh(a,o);

//@ ensures \max(\lockset) == a;

//@ ensures \max(\lockset).hashCode() != 0;

//@ ensures     ot_modified(i,o);

//@ ensures     ot_modified(a[1 ..*]);

//@ ensures     ot_assigned(    othing) || \only_accessed(    othing) || \only_captured(    othing) || \only_assigned(    othing);

//@ ensures     ot_assigned(\everything) || \only_accessed(\everything) || \only_captured(\everything) || \only_assigned(\everything);

//@ ensures     ot_assigned(i) || \only_accessed(i) || \only_captured(i) || \only_assigned(i);

//@ ensures     ot_assigned(i,a[1 ..*]) || \only_accessed(i,a[1 ..]) || \only_captured(i,a[*]) || \only_assigned(i,o.*);

//@ ensures     ot_assigned(    ot_specified) || \only_accessed(    ot_specified) || \only_captured(    ot_specified) || \only_assigned(    ot_specified);

//@ requires \same;

//@ requires true; pre true;

//@ ensures false; post true;

//@ signals (Exception e) true; exsures (Exception) false;

//@ signals_only Exception;

//@ diverges true;

//@ modifies i;

//@ assignable     othing;

//@ assignable p.i,p.*,this.*,super.*,PP.*;

//@ modifiable i,o,a,a[*],a[1],a[1 .. 2],a[1 ..],a[1 ..*];

//@ assignable \everything;

//@ accessible     othing;

//@ accessible \everything;

//@ accessible i, PP.*;

//@ callable     othing;

//@ callable \everything;

//@ callable m, mq, mq(int, boolean, Object), bb, super.bb, o.m();  // FIXME _ more?

//@ measured_by 10;

//@ measured_by 20 if false;

//@ captures i, a[*];

//@ captures     othing;

//@ captures \everything;

//@ duration 0;

//@ duration 0 if true;

//@ working_space 0;

//@ working_space 0 if true;

//@ when false;

//@ signals_only Exception, java.lang.RuntimeException;

//@ signals_only     othing;

//@ requires     ot_specified;

//@ ensures     ot_specified;

//@ diverges     ot_specified;

//@ signals (Exception)     ot_specified;

//@ assignable     ot_specified;

//@ accessible     ot_specified;

//@ callable     ot_specified;

//@ when     ot_specified;

//@ measured_by     ot_specified;

//@ duration     ot_specified;

//@ working_space     ot_specified;

//@ captures     ot_specified;

//@ maps p.i \into modelM;

/*@ public normal_behavior
    @      requires true;
    @      {|
    @          ensures false;
    @          diverges true;
    @      also
    @          ensures true;
    @          diverges true;
    @      |}
    @  also protected exceptional_behavior
    @       forall Object o;
    @       old int j = k+1;
    @      requires false;
    @      signals (Exception) true;
    @  also code behavior
    @      requires false;
    @      signals (Exception) true;
    @  also private code model_program {
        }
    @  also model_program {
            int x = 0;
            x++;
            ++x;
            x--;
            --x;
            x = 1;
            x += 1;
            x -= 1;
            x *= 1;
            x /= 1;
            x %= 1;
            x <<= 1;
            x >>= 1;
            x >>>=1 ;
            x |= 1;
            x &= 1;
            x ^= 1;
            if (true) x = 1;
            if (true) { x = 1; } else { x = 2; }
            while (true) { x = 1; if (x == 2) continue; if (x == 3) break; }
            do x = 1; while (true);
            switch (x) { case 1: x=2; break; default: x=3; }
            ;
            assume true;
            assert true;
            choose { x = 1; } or { x = 2; }
            choose_if { x = 1; } or { x = 2; } else { x = 3; }
            behavior requires true; ensures false;
            abrupt_behavior requires false; continues true; breaks true; returns true;
            invariant false;

            // FIXME - add loop invariants, refining statements, try catch finally blocks,
            // model programs do not need: set, debug, ghost decls
    @  }
   */
//@ requires i > 0;

//@ requires i > 0;

//@ requires i > 0;

//@ requires i > 0;

//@ model public void mq0(int i) {}

//@ model public void mq1(int i) {}

//@ model public void mq2(int i) {}

//@ model public void mq3(int i) {}

//@ requires i > 0;

//@ model public void mq4(int i) {}

//@ requires i > 0;

//@ model public void mq5(int i) {}

//@ requires i > 0;

//@ model public void mq6(int i) {}

//@ requires i > 0;

//@ model public void mq7(int i) {}

//@ requires i > 0;

//@ model public void mmq5(int i) {}

//@ requires i > 0;

//@ model public void mmq6(int i) {}

//@ requires i > 0;

//@ model public void mmq7(int i) {}

//@ pure

//@ invariant i + 2 * 3 - 4 / 5 + 6 % i + (i << 5) + (i >> 6) + (i >>> i) == -10;

//@ invariant i > 0 && i < 0 && i == 0 && (i <= +10 ? i >= 0 : i != 0);

//@ invariant b || !b && (b ==> b) && ( b <==> b ) && ( b <=!=> b ) && (b <== b);

//@ invariant (i & 1) + (i ^ 1) + (i | 1) + (~i) == 0;

//@ invariant \type(int) <: \typeof(o);

//@ invariant \type(int) <#= \typeof(o);

//@ invariant \type(int) <# \typeof(o);

//@ invariant o instanceof java.lang.String;

//@ invariant true && false && (i == 10.0) && (i < -10e4) && (i > +.4e+5) && (i > +.4e+50);

//@ invariant "asd" != (Object)null && 'c' != 'd' && 'a' != '\045' && "45" != "    \"'\034";

//@ invariant (int)9 == 9 && (char)3 == 'd' && (float)4 == (double)5 && (short)1 == (byte)(-1) && (long)-13 == -12;

//@ invariant (new int[]{1,2,3}).length == 3 && (new int[]{1,2,3})[0] == 1 && a[3] == 6;

//@ invariant (new PP()).i == 0;

//@ invariant (\forall int i; i != 0) && (\forall int k; k > 0; k >-1);

//@ invariant (\exists int i; i != 0) && (\exists int k; k > 0; k >-1);

//@ invariant (    um_of int i; i == 0) == (    um_of int k; k > 0; k >-1);

//@ invariant (\max int i; i>0 && i<10; i ) == (\min int i; i>0 && i<10; i );

//@ invariant (\sum int i; i>0 && i<10; i ) == (\product int i; i>0 && i<10; i );

//@ invariant this.i == 0 && super.bb() && PP.class != null;

//@ invariant (* informal predicate *) && false && m() == 0 && 0==mq(1,false,new Object());

//@ invariant \is_initialized(PP);

//@ invariant \is_initialized(Integer);

//@ invariant \invariant_for(o);

//@ invariant (\lblpos A true);

//@ invariant (\lblneg A true);

//@ invariant (\lbl A true);

//@ invariant ! \reach(o).isEmpty();

//@ invariant \reach(o) != null;

//@ invariant (new PP() { int m() { return 5; } }) != null;

//@ invariant new JMLSetType { Integer o | list.contains(o) && o > 0 } != null;

//@ constraint i >= \old(i);

//@ axiom true;

//@ initially true;

//@ readable i if true;

//@ writable i if true;

//@ monitors_for i = o;

//@ public invariant false;

//@ public constraint i >= \old(i);

//@ public initially true;

//@ public readable i if true;

//@ public writable i if true;

//@ public monitors_for i = o;

//@ model int modelM;

//@ represents modelM = 20;

//@ model int modelMZ;

//@ private represents modelMZ = 20;

//@ model int modelM2; in modelM;

//@ ensures \result > 0 && !     onnullelements(a) && \elemtype(\typeof(a)) == \type(int);

//@ ensures \duration(m()) > 0 && \space(o) > 0 && \working_space(m()) > 0;

//@ ensures \fresh(a) && \fresh(a,o);

//@ ensures \max(\lockset) == a;

//@ ensures \max(\lockset).hashCode() != 0;

//@ ensures     ot_modified(i,o);

//@ ensures     ot_modified(a[1 ..*]);

//@ ensures     ot_assigned(    othing) || \only_accessed(    othing) || \only_captured(    othing) || \only_assigned(    othing);

//@ ensures     ot_assigned(\everything) || \only_accessed(\everything) || \only_captured(\everything) || \only_assigned(\everything);

//@ ensures     ot_assigned(i) || \only_accessed(i) || \only_captured(i) || \only_assigned(i);

//@ ensures     ot_assigned(i,a[1 ..*]) || \only_accessed(i,a[1 ..]) || \only_captured(i,a[*]) || \only_assigned(i,o.*);

//@ ensures     ot_assigned(    ot_specified) || \only_accessed(    ot_specified) || \only_captured(    ot_specified) || \only_assigned(    ot_specified);

//@ requires \same;

//@ requires true; pre true;

//@ ensures false; post true;

//@ signals (Exception e) true; exsures (Exception) false;

//@ signals_only Exception;

//@ diverges true;

//@ modifies i;

//@ assignable     othing;

//@ assignable p.i,p.*,this.*,super.*,PP.*;

//@ modifiable i,o,a,a[*],a[1],a[1 .. 2],a[1 ..],a[1 ..*];

//@ assignable \everything;

//@ accessible     othing;

//@ accessible \everything;

//@ accessible i, PP.*;

//@ callable     othing;

//@ callable \everything;

//@ callable m, mq, mq(int, boolean, Object), bb, super.bb, o.m();  // FIXME _ more?

//@ measured_by 10;

//@ measured_by 20 if false;

//@ captures i, a[*];

//@ captures     othing;

//@ captures \everything;

//@ duration 0;

//@ duration 0 if true;

//@ working_space 0;

//@ working_space 0 if true;

//@ when false;

//@ signals_only Exception, java.lang.RuntimeException;

//@ signals_only     othing;

//@ requires     ot_specified;

//@ ensures     ot_specified;

//@ diverges     ot_specified;

//@ signals (Exception)     ot_specified;

//@ assignable     ot_specified;

//@ accessible     ot_specified;

//@ callable     ot_specified;

//@ when     ot_specified;

//@ measured_by     ot_specified;

//@ duration     ot_specified;

//@ working_space     ot_specified;

//@ captures     ot_specified;

//@ maps p.i \into modelM;

/*@ public normal_behavior
    @      requires true;
    @      {|
    @          ensures false;
    @          diverges true;
    @      also
    @          ensures true;
    @          diverges true;
    @      |}
    @  also protected exceptional_behavior
    @       forall Object o;
    @       old int j = k+1;
    @      requires false;
    @      signals (Exception) true;
    @  also code behavior
    @      requires false;
    @      signals (Exception) true;
    @  also private code model_program {
        }
    @  also model_program {
            int x = 0;
            x++;
            ++x;
            x--;
            --x;
            x = 1;
            x += 1;
            x -= 1;
            x *= 1;
            x /= 1;
            x %= 1;
            x <<= 1;
            x >>= 1;
            x >>>=1 ;
            x |= 1;
            x &= 1;
            x ^= 1;
            if (true) x = 1;
            if (true) { x = 1; } else { x = 2; }
            while (true) { x = 1; if (x == 2) continue; if (x == 3) break; }
            do x = 1; while (true);
            switch (x) { case 1: x=2; break; default: x=3; }
            ;
            assume true;
            assert true;
            choose { x = 1; } or { x = 2; }
            choose_if { x = 1; } or { x = 2; } else { x = 3; }
            behavior requires true; ensures false;
            abrupt_behavior requires false; continues true; breaks true; returns true;
            invariant false;

            // FIXME - add loop invariants, refining statements, try catch finally blocks,
            // model programs do not need: set, debug, ghost decls
    @  }
   */
//@ requires i > 0;

//@ requires i > 0;

//@ requires i > 0;

//@ requires i > 0;

//@ model public void mq0(int i) {}

//@ model public void mq1(int i) {}

//@ model public void mq2(int i) {}

//@ model public void mq3(int i) {}

//@ requires i > 0;

//@ model public void mq4(int i) {}

//@ requires i > 0;

//@ model public void mq5(int i) {}

//@ requires i > 0;

//@ model public void mq6(int i) {}

//@ requires i > 0;

//@ model public void mq7(int i) {}

//@ requires i > 0;

//@ model public void mmq5(int i) {}

//@ requires i > 0;

//@ model public void mmq6(int i) {}

//@ requires i > 0;

//@ model public void mmq7(int i) {}

//@ pure

//@ invariant i + 2 * 3 - 4 / 5 + 6 % i + (i << 5) + (i >> 6) + (i >>> i) == -10;

//@ invariant i > 0 && i < 0 && i == 0 && (i <= +10 ? i >= 0 : i != 0);

//@ invariant b || !b && (b ==> b) && ( b <==> b ) && ( b <=!=> b ) && (b <== b);

//@ invariant (i & 1) + (i ^ 1) + (i | 1) + (~i) == 0;

//@ invariant \type(int) <: \typeof(o);

//@ invariant \type(int) <#= \typeof(o);

//@ invariant \type(int) <# \typeof(o);

//@ invariant o instanceof java.lang.String;

//@ invariant true && false && (i == 10.0) && (i < -10e4) && (i > +.4e+5) && (i > +.4e+50);

//@ invariant "asd" != (Object)null && 'c' != 'd' && 'a' != '\045' && "45" != "    \"'\034";

//@ invariant (int)9 == 9 && (char)3 == 'd' && (float)4 == (double)5 && (short)1 == (byte)(-1) && (long)-13 == -12;

//@ invariant (new int[]{1,2,3}).length == 3 && (new int[]{1,2,3})[0] == 1 && a[3] == 6;

//@ invariant (new PP()).i == 0;

//@ invariant (\forall int i; i != 0) && (\forall int k; k > 0; k >-1);

//@ invariant (\exists int i; i != 0) && (\exists int k; k > 0; k >-1);

//@ invariant (    um_of int i; i == 0) == (    um_of int k; k > 0; k >-1);

//@ invariant (\max int i; i>0 && i<10; i ) == (\min int i; i>0 && i<10; i );

//@ invariant (\sum int i; i>0 && i<10; i ) == (\product int i; i>0 && i<10; i );

//@ invariant this.i == 0 && super.bb() && PP.class != null;

//@ invariant (* informal predicate *) && false && m() == 0 && 0==mq(1,false,new Object());

//@ invariant \is_initialized(PP);

//@ invariant \is_initialized(Integer);

//@ invariant \invariant_for(o);

//@ invariant (\lblpos A true);

//@ invariant (\lblneg A true);

//@ invariant (\lbl A true);

//@ invariant ! \reach(o).isEmpty();

//@ invariant \reach(o) != null;

//@ invariant (new PP() { int m() { return 5; } }) != null;

//@ invariant new JMLSetType { Integer o | list.contains(o) && o > 0 } != null;

//@ constraint i >= \old(i);

//@ axiom true;

//@ initially true;

//@ readable i if true;

//@ writable i if true;

//@ monitors_for i = o;

//@ public invariant false;

//@ public constraint i >= \old(i);

//@ public initially true;

//@ public readable i if true;

//@ public writable i if true;

//@ public monitors_for i = o;

//@ model int modelM;

//@ represents modelM = 20;

//@ model int modelMZ;

//@ private represents modelMZ = 20;

//@ model int modelM2; in modelM;

//@ ensures \result > 0 && !     onnullelements(a) && \elemtype(\typeof(a)) == \type(int);

//@ ensures \duration(m()) > 0 && \space(o) > 0 && \working_space(m()) > 0;

//@ ensures \fresh(a) && \fresh(a,o);

//@ ensures \max(\lockset) == a;

//@ ensures \max(\lockset).hashCode() != 0;

//@ ensures     ot_modified(i,o);

//@ ensures     ot_modified(a[1 ..*]);

//@ ensures     ot_assigned(    othing) || \only_accessed(    othing) || \only_captured(    othing) || \only_assigned(    othing);

//@ ensures     ot_assigned(\everything) || \only_accessed(\everything) || \only_captured(\everything) || \only_assigned(\everything);

//@ ensures     ot_assigned(i) || \only_accessed(i) || \only_captured(i) || \only_assigned(i);

//@ ensures     ot_assigned(i,a[1 ..*]) || \only_accessed(i,a[1 ..]) || \only_captured(i,a[*]) || \only_assigned(i,o.*);

//@ ensures     ot_assigned(    ot_specified) || \only_accessed(    ot_specified) || \only_captured(    ot_specified) || \only_assigned(    ot_specified);

//@ requires \same;

//@ requires true; pre true;

//@ ensures false; post true;

//@ signals (Exception e) true; exsures (Exception) false;

//@ signals_only Exception;

//@ diverges true;

//@ modifies i;

//@ assignable     othing;

//@ assignable p.i,p.*,this.*,super.*,PP.*;

//@ modifiable i,o,a,a[*],a[1],a[1 .. 2],a[1 ..],a[1 ..*];

//@ assignable \everything;

//@ accessible     othing;

//@ accessible \everything;

//@ accessible i, PP.*;

//@ callable     othing;

//@ callable \everything;

//@ callable m, mq, mq(int, boolean, Object), bb, super.bb, o.m();  // FIXME _ more?

//@ measured_by 10;

//@ measured_by 20 if false;

//@ captures i, a[*];

//@ captures     othing;

//@ captures \everything;

//@ duration 0;

//@ duration 0 if true;

//@ working_space 0;

//@ working_space 0 if true;

//@ when false;

//@ signals_only Exception, java.lang.RuntimeException;

//@ signals_only     othing;

//@ requires     ot_specified;

//@ ensures     ot_specified;

//@ diverges     ot_specified;

//@ signals (Exception)     ot_specified;

//@ assignable     ot_specified;

//@ accessible     ot_specified;

//@ callable     ot_specified;

//@ when     ot_specified;

//@ measured_by     ot_specified;

//@ duration     ot_specified;

//@ working_space     ot_specified;

//@ captures     ot_specified;

//@ maps p.i \into modelM;

/*@ public normal_behavior
    @      requires true;
    @      {|
    @          ensures false;
    @          diverges true;
    @      also
    @          ensures true;
    @          diverges true;
    @      |}
    @  also protected exceptional_behavior
    @       forall Object o;
    @       old int j = k+1;
    @      requires false;
    @      signals (Exception) true;
    @  also code behavior
    @      requires false;
    @      signals (Exception) true;
    @  also private code model_program {
        }
    @  also model_program {
            int x = 0;
            x++;
            ++x;
            x--;
            --x;
            x = 1;
            x += 1;
            x -= 1;
            x *= 1;
            x /= 1;
            x %= 1;
            x <<= 1;
            x >>= 1;
            x >>>=1 ;
            x |= 1;
            x &= 1;
            x ^= 1;
            if (true) x = 1;
            if (true) { x = 1; } else { x = 2; }
            while (true) { x = 1; if (x == 2) continue; if (x == 3) break; }
            do x = 1; while (true);
            switch (x) { case 1: x=2; break; default: x=3; }
            ;
            assume true;
            assert true;
            choose { x = 1; } or { x = 2; }
            choose_if { x = 1; } or { x = 2; } else { x = 3; }
            behavior requires true; ensures false;
            abrupt_behavior requires false; continues true; breaks true; returns true;
            invariant false;

            // FIXME - add loop invariants, refining statements, try catch finally blocks,
            // model programs do not need: set, debug, ghost decls
    @  }
   */
//@ requires i > 0;

//@ requires i > 0;

//@ requires i > 0;

//@ requires i > 0;

//@ model public void mq0(int i) {}

//@ model public void mq1(int i) {}

//@ model public void mq2(int i) {}

//@ model public void mq3(int i) {}

//@ requires i > 0;

//@ model public void mq4(int i) {}

//@ requires i > 0;

//@ model public void mq5(int i) {}

//@ requires i > 0;

//@ model public void mq6(int i) {}

//@ requires i > 0;

//@ model public void mq7(int i) {}

//@ requires i > 0;

//@ model public void mmq5(int i) {}

//@ requires i > 0;

//@ model public void mmq6(int i) {}

//@ requires i > 0;

//@ model public void mmq7(int i) {}

/*@ spec_public nullable@*/
//@ requires n >= 1;

//@ assignable primeArray;

//@ ensures primeArray != null;

//@ ensures primeArray.length == n;

//@ ensures (\forall int i, j; i >= 0 && i < primeArray.length && j >= 2 && j <= primeArray[i]/2; primeArray[i]%j != 0);

//@ ghost int maxnumber = Integer.MAX_VALUE;

//@ maintaining 2 <= count <= n + 1;

//@ maintaining primeArray[count-2] < num <= maxnumber;

//@ maintaining status == 1;

//@ maintaining (\forall int i, k; 0 <= i < count-1 && 2 <= k <= primeArray[i]/2; primeArray[i]%k != 0);

//@ decreases maxnumber - num;

//@ split

//@ maintaining 2 <= j <= num/2 + 1;

//@ maintaining status != 0 && (\forall int jj; 2 <= jj <= j; num%jj != 0);

//@ decreases num - j;

//@ assert num%j == 0;

//@ assert num%j != 0;

//@ assert status != 0 ==> (\forall int jj; 2 <= jj <= num/2; num%jj != 0);

//@ assert status != 0;

//@ assert (\forall int i; 2 <= i <= num/2; num%i != 0);

//@ assume count == primeArray.length + 1;

/*@ spec_public nullable@*/
//@ requires n >= 1;

//@ assignable primeArray;

//@ ensures primeArray != null;

//@ ensures primeArray.length == n;

//@ ensures (\forall int i, j; i >= 0 && i < primeArray.length && j >= 2 && j <= primeArray[i]/2; primeArray[i]%j != 0);

//@ ghost int maxnumber = Integer.MAX_VALUE;

//@ maintaining 2 <= count <= n + 1;

//@ maintaining primeArray[count-2] < num <= maxnumber;

//@ maintaining status == 1;

//@ maintaining (\forall int i, k; 0 <= i < count-1 && 2 <= k <= primeArray[i]/2; primeArray[i]%k != 0);

//@ decreases maxnumber - num;

//@ split

//@ maintaining 2 <= j <= num/2 + 1;

//@ maintaining status != 0 && (\forall int jj; 2 <= jj <= j; num%jj != 0);

//@ decreases num - j;

//@ assert num%j == 0;

//@ assert num%j != 0;

//@ assert status != 0 ==> (\forall int jj; 2 <= jj <= num/2; num%jj != 0);

//@ assert status != 0;

//@ assert (\forall int i; 2 <= i <= num/2; num%i != 0);

//@ assume count == primeArray.length + 1;

//@ pure immutable nullable_by_default

//@ axiom (\forall T t;; !testcol.<T>empty().contains(t));

//@ axiom (\forall testcol<T> c; (\forall T t;; c.add(t).contains(t)));

//@ axiom (\forall testcol<T> c; (\forall T t, tt; t != tt; c.add(t).contains(tt) == c.contains(tt)));

//@ model public \bigint size;

//@ public normal_behavior

//@   ensures \result.size() == 0;

//@ skipesc

//@ model public static <S> testcol<S> empty();

//@ public normal_behavior

//@   ensures \result == size;

//@ helper function

//@ model abstract public \bigint size();

//@ public normal_behavior

//@   ensures \result.size == \old(size) + 1;

//@ helper function

//@ public normal_behavior

//@ helper function

//@ ensures (testcol.<X>empty().size() == 0);

//@ ensures c.add(x).add(xx).contains(x);

//@ ghost testtype tt = t;

//@ assert tt.suc() == t.suc();

//@ pure immutable nullable_by_default

//@ axiom (\forall T t;; !testcol.<T>empty().contains(t));

//@ axiom (\forall testcol<T> c; (\forall T t;; c.add(t).contains(t)));

//@ axiom (\forall testcol<T> c; (\forall T t, tt; t != tt; c.add(t).contains(tt) == c.contains(tt)));

//@ model public \bigint size;

//@ public normal_behavior

//@   ensures \result.size() == 0;

//@ skipesc

//@ model public static <S> testcol<S> empty();

//@ public normal_behavior

//@   ensures \result == size;

//@ helper function

//@ model abstract public \bigint size();

//@ public normal_behavior

//@   ensures \result.size == \old(size) + 1;

//@ helper function

//@ public normal_behavior

//@ helper function

//@ ensures (testcol.<X>empty().size() == 0);

//@ ensures c.add(x).add(xx).contains(x);

//@ ghost testtype tt = t;

//@ assert tt.suc() == t.suc();

//@ pure immutable nullable_by_default

//@ axiom (\forall testtype t;; t.suc().prev() == t);

//@ skipesc

//@ ensures \result == zero;

//@ helper function

//@ ensures \result != this;

//@ helper function

//@ ensures \result != this;

//@ helper function

//@ ensures t.suc() != t;

//@ ensures t.suc().prev() == t;

//@ ghost testtype tt = t;

//@ assert tt.suc() == t.suc();

//@ pure immutable nullable_by_default

//@ axiom (\forall testtype t;; t.suc().prev() == t);

//@ skipesc

//@ ensures \result == zero;

//@ helper function

//@ ensures \result != this;

//@ helper function

//@ ensures \result != this;

//@ helper function

//@ ensures t.suc() != t;

//@ ensures t.suc().prev() == t;

//@ ghost testtype tt = t;

//@ assert tt.suc() == t.suc();

//@ ghost \TYPE t = \elemtype(\typeof(a));

//@ assert (\lbl TY t) == \type(LinkedList<Boolean>);

//@ assert (\lbl TY2 \typeof(k)) == \type(int);

//@ set  t = (\lbl TY3 \elemtype(\typeof(k)));

//@ set  t = (\lbl TY4 \elemtype(\typeof(o)));

//@ ghost \TYPE t = \elemtype(\typeof(a));

//@ assert (\lbl TY t) == \type(LinkedList<Boolean>);

//@ assert (\lbl TY2 \typeof(k)) == \type(int);

//@ set  t = (\lbl TY3 \elemtype(\typeof(k)));

//@ set  t = (\lbl TY4 \elemtype(\typeof(o)));

//@ public invariant x() + y() > 0;

/*@ spec_public */
/*@ spec_public */
//@ requires the_x + the_y > 0;

//@ ensures x() == the_x && y() == the_y;

//@ ensures \result == my_x;

/*@ pure helper @*/
//@ ensures \result == my_y;

/*@ pure helper @*/
//@ ensures \result == x() + y() + the_operand;

/*@ pure @*/
//@ public invariant x() + y() > 0;

/*@ spec_public */
/*@ spec_public */
//@ requires the_x + the_y > 0;

//@ ensures x() == the_x && y() == the_y;

//@ ensures \result == my_x;

/*@ pure helper @*/
//@ ensures \result == my_y;

/*@ pure helper @*/
//@ ensures \result == x() + y() + the_operand;

/*@ pure @*/
//@ ghost \bigint b = 20;

//@ ghost \bigint bb = -b;

//@ ghost \bigint zero = 0;

//@ ghost \bigint prod = -400;

//@ assert b + bb == zero;

//@ assert b * bb == prod;

//@ assert b + 0 == b;

//@ assert b > 0;

//@ assert zero == 0L;

//@ set zero = 0L;

//@ assert zero >= 0;

//@ assert 0L + b == b;

//@ assert b * (short)0 == zero;

//@ ghost int i = (int)b;

//@ ghost long l = (long)b;

//@ assert b == zero;

//@ ghost BigInteger bi = bb;

//@ ghost \bigint bbb = bi;

//@ assert bbb == bb;

//@ set bbb = prod + bi;

//@ assert (\lbl BBB bbb) == -420;

//@ ghost \bigint x = new BigInteger("123456789012345678901234567890");

//@ ghost \bigint xx = (\lbl XX x*10);

//@ set bb = bb / zero;

//@ set prod = prod / 0;

//@ set i += 1;

//@ set ++i;

//@ set bbb += 1;

//@ set ++bbb;

//@ set bbb++;

//@ assert (\lbl BBB bbb) == -417;

//@ assert (\lbl TRUE bx != bxx);   // This is an object comparison

//@ ghost \bigint bix = bx;

//@ assert (\lbl TRUE bix == bxx);

//@ assert (\lbl TRUE ((\bigint)bx) == bxx);

//@ assert (\lbl TRUE bx == (\bigint)bxx);

//@ ghost \bigint b = 20;

//@ ghost \bigint bb = -b;

//@ ghost \bigint zero = 0;

//@ ghost \bigint prod = -400;

//@ assert b + bb == zero;

//@ assert b * bb == prod;

//@ assert b + 0 == b;

//@ assert b > 0;

//@ assert zero == 0L;

//@ set zero = 0L;

//@ assert zero >= 0;

//@ assert 0L + b == b;

//@ assert b * (short)0 == zero;

//@ ghost int i = (int)b;

//@ ghost long l = (long)b;

//@ assert b == zero;

//@ ghost BigInteger bi = bb;

//@ ghost \bigint bbb = bi;

//@ assert bbb == bb;

//@ set bbb = prod + bi;

//@ assert (\lbl BBB bbb) == -420;

//@ ghost \bigint x = new BigInteger("123456789012345678901234567890");

//@ ghost \bigint xx = (\lbl XX x*10);

//@ set bb = bb / zero;

//@ set prod = prod / 0;

//@ set i += 1;

//@ set ++i;

//@ set bbb += 1;

//@ set ++bbb;

//@ set bbb++;

//@ assert (\lbl BBB bbb) == -417;

//@ assert (\lbl TRUE bx != bxx);   // This is an object comparison

//@ ghost \bigint bix = bx;

//@ assert (\lbl TRUE bix == bxx);

//@ assert (\lbl TRUE ((\bigint)bx) == bxx);

//@ assert (\lbl TRUE bx == (\bigint)bxx);

//@ public invariant x() + y() > 0;

//@ requires the_x + the_y > 0;

//@ assignable \everything;

//@ ensures x() == the_x && y() == the_y;

/*@ pure @*/
/*@ pure @*/
//@ ensures \result == x() + y() + the_operand;

/*@ pure @*/
//@ public invariant x() + y() > 0;

//@ requires the_x + the_y > 0;

//@ assignable \everything;

//@ ensures x() == the_x && y() == the_y;

/*@ pure @*/
/*@ pure @*/
//@ ensures \result == x() + y() + the_operand;

/*@ pure @*/
//@ requires I1 >= 0 && I2>=0;

//@ ensures \result > 0.0;

//@ requires I2 > 0;

//@ ensures \result < 0;

//@ requires I1 > I2;

//@ ensures \result > 0;

//@ requires I1 > 0 && I2 > 0;

//@ ensures \result >0;

//@ requires I1 > 0 && I2 > 0;

//@ ensures \result > 0;

//@ requires I1 > 0 && I2 >= 0 ;

//@ ensures \result >0;

//@ requires I1 >= 0 && I2>=0;

//@ ensures \result > 0.0;

//@ requires I2 > 0;

//@ ensures \result < 0;

//@ requires I1 > I2;

//@ ensures \result > 0;

//@ requires I1 > 0 && I2 > 0;

//@ ensures \result >0;

//@ requires I1 > 0 && I2 > 0;

//@ ensures \result > 0;

//@ requires I1 > 0 && I2 >= 0 ;

//@ ensures \result >0;

/*@ normal_behavior
	  @ ensures \result == 42;
	  @*/
/*@ normal_behavior
	  @ ensures \result == 42;
	  @*/
/*@ spec_public */
//@ ensures \old(someArray[\result]) == 4;

//@ ensures \old(someArray[\result] + 2) == 6;

//@ ensures \old(someArray[\result])+ 2 == 6;

/*@ spec_public */
//@ ensures \old(someArray[\result]) == 4;

//@ ensures \old(someArray[\result] + 2) == 6;

//@ ensures \old(someArray[\result])+ 2 == 6;

/*@ requires the_system == CoordinateSystem.CARTESIAN |
               the_system == CoordinateSystem.POLAR; */
/*@ requires the_system == CoordinateSystem.POLAR ==>
                 0 <= coord_1 & 0 <= coord_2 & coord_2 < 2 * Math.PI; */
//@ requires isFinite(coord_1) & isFinite(coord_2);

/*@ ensures the_system == CoordinateSystem.CARTESIAN ==>
                x() == coord_1 & y() == coord_2; */
/*@ ensures the_system == CoordinateSystem.POLAR ==>
                approxEquals(rho(), coord_1) & approxEquals(theta(), coord_2); */
//@ ensures \result <==> Math.abs(number_1 - number_2) < ERROR_MARGIN;

/*@ pure */
/*@ ensures \result <==> the_number != Double.NEGATIVE_INFINITY &
                           the_number != Double.POSITIVE_INFINITY &
                           !Double.isNaN(the_number); */
/*@ pure */
/*@ pure */
/*@ pure */
/*@ pure */
/*@ pure */
/*@ pure */
/*@ requires the_system == CoordinateSystem.CARTESIAN |
               the_system == CoordinateSystem.POLAR; */
/*@ requires the_system == CoordinateSystem.POLAR ==>
                 0 <= coord_1 & 0 <= coord_2 & coord_2 < 2 * Math.PI; */
//@ requires isFinite(coord_1) & isFinite(coord_2);

/*@ ensures the_system == CoordinateSystem.CARTESIAN ==>
                x() == coord_1 & y() == coord_2; */
/*@ ensures the_system == CoordinateSystem.POLAR ==>
                approxEquals(rho(), coord_1) & approxEquals(theta(), coord_2); */
//@ ensures \result <==> Math.abs(number_1 - number_2) < ERROR_MARGIN;

/*@ pure */
/*@ ensures \result <==> the_number != Double.NEGATIVE_INFINITY &
                           the_number != Double.POSITIVE_INFINITY &
                           !Double.isNaN(the_number); */
/*@ pure */
/*@ pure */
/*@ pure */
/*@ pure */
/*@ pure */
/*@ pure */
/*@ requires the_system == CoordinateSystem.CARTESIAN |
               the_system == CoordinateSystem.POLAR; */
/*@ requires the_system == CoordinateSystem.POLAR ==>
                 0 <= coord_1 & 0 <= coord_2 & coord_2 < 2 * Math.PI; */
//@ requires isFinite(coord_1) & isFinite(coord_2);

/*@ ensures the_system == CoordinateSystem.CARTESIAN ==>
                x() == coord_1 & y() == coord_2; */
/*@ ensures the_system == CoordinateSystem.POLAR ==>
                approxEquals(rho(), coord_1) & approxEquals(theta(), coord_2); */
//@ ensures \result <==> Math.abs(number_1 - number_2) < ERROR_MARGIN;

/*@ pure */
/*@ ensures \result <==> the_number != Double.NEGATIVE_INFINITY &
                           the_number != Double.POSITIVE_INFINITY &
                           !Double.isNaN(the_number); */
/*@ pure */
/*@ pure */
/*@ pure */
/*@ pure */
/*@ pure */
/*@ pure */
/*@ requires the_system == CoordinateSystem.CARTESIAN |
               the_system == CoordinateSystem.POLAR; */
/*@ requires the_system == CoordinateSystem.POLAR ==>
                 0 <= coord_1 & 0 <= coord_2 & coord_2 < 2 * Math.PI; */
//@ requires isFinite(coord_1) & isFinite(coord_2);

/*@ ensures the_system == CoordinateSystem.CARTESIAN ==>
                x() == coord_1 & y() == coord_2; */
/*@ ensures the_system == CoordinateSystem.POLAR ==>
                approxEquals(rho(), coord_1) & approxEquals(theta(), coord_2); */
//@ ensures \result <==> Math.abs(number_1 - number_2) < ERROR_MARGIN;

/*@ pure */
/*@ ensures \result <==> the_number != Double.NEGATIVE_INFINITY &
                           the_number != Double.POSITIVE_INFINITY &
                           !Double.isNaN(the_number); */
/*@ pure */
/*@ pure */
/*@ pure */
/*@ pure */
/*@ pure */
/*@ pure */
//@ ghost \real b = 20;

//@ ghost \real bb = -b;

//@ ghost \real zero = 0;

//@ ghost \real prod = -400;

//@ assert b + bb == zero;

//@ assert b * bb == prod;

//@ assert b + 0 == b;

//@ assert b > 0;

//@ assert zero == 0L;

//@ set zero = 0L;

//@ assert zero >= 0;

//@ assert 0.0 + b == b;

//@ assert b * (double)0 == zero;

//@ ghost float i = (float)b;

//@ ghost double l = (double)b;

//@ assert b == zero;

//@ ghost Real bi = bb;

//@ ghost \real bbb = bi;

//@ assert bbb == bb;

//@ set bbb = prod + bi;

//@ assert (\lbl BBB bbb) == -420;

//@ ghost \real x = new Real(10.30);

//@ ghost \real xx = (\lbl XX x*10);

//@ set bb = bb / zero;

//@ set prod /= 0;

//@ set i += 1;

//@ set ++i;

//@ set bbb += 1;

//@ set ++bbb;

//@ set bbb++;

//@ assert (\lbl BBB bbb) == -417;

//@ ghost \real b = 20;

//@ ghost \real bb = -b;

//@ ghost \real zero = 0;

//@ ghost \real prod = -400;

//@ assert b + bb == zero;

//@ assert b * bb == prod;

//@ assert b + 0 == b;

//@ assert b > 0;

//@ assert zero == 0L;

//@ set zero = 0L;

//@ assert zero >= 0;

//@ assert 0.0 + b == b;

//@ assert b * (double)0 == zero;

//@ ghost float i = (float)b;

//@ ghost double l = (double)b;

//@ assert b == zero;

//@ ghost Real bi = bb;

//@ ghost \real bbb = bi;

//@ assert bbb == bb;

//@ set bbb = prod + bi;

//@ assert (\lbl BBB bbb) == -420;

//@ ghost \real x = new Real(10.30);

//@ ghost \real xx = (\lbl XX x*10);

//@ set bb = bb / zero;

//@ set prod /= 0;

//@ set i += 1;

//@ set ++i;

//@ set bbb += 1;

//@ set ++bbb;

//@ set bbb++;

//@ assert (\lbl BBB bbb) == -417;

/*@ spec_public @*/
/*@ public behaviour
	      @ requires 0 < l && l <= r && r < a.length;
	      @ assignable a[*];
	      @ ensures (\forall int i; l <= i && i < r; a[i] <= a[i + 1]);
	      @*/
/*@ loop_modifies a[*];
			  @ decreases right + 1 - left;
			  @ loop_invariant l <= k && k <= right;
			  @ loop_invariant l <= left && left <= right + 1 && right == r;
			  @ loop_invariant (\forall int i; l <= i && i < left; a[i] <= a[i + 1]);
			  @*/
/*@
		      @ loop_modifies a[*];
		      @ decreases k;
		      @ loop_invariant l <= k && k < r;
		      @ loop_invariant (\forall int i; l <= i && i < k-1; a[i] <= a[i + 1]);
		      @*/
/*@
		      @ loop_modifies a[*];
		      @ decreases k;
		      @ loop_invariant l <= k && k < r;
		      @ loop_invariant (\forall int i; l <= i && i < k-1; a[i] <= a[i + 1]);
		      @*/
/*@
		  @ loop_modifies a[*];
		  @ decreases right;
		  @ loop_invariant l <= right && right < r;
		  @ loop_invariant right <= left + 1;
		  @ loop_invariant (\forall int i; right <= i && i <= r; last <= a[i]);
		  @ loop_invariant (\forall int i; l <= i && i < right - 1; a[i] <= a[i + 1]);
		  @ loop_invariant (\forall int i; right < i && i < r-1; a[i] <= a[i + 1]);
		  @*/
/*@ spec_public @*/
/*@ public behaviour
	      @ requires 0 < l && l <= r && r < a.length;
	      @ assignable a[*];
	      @ ensures (\forall int i; l <= i && i < r; a[i] <= a[i + 1]);
	      @*/
/*@ loop_modifies a[*];
			  @ decreases right + 1 - left;
			  @ loop_invariant l <= k && k <= right;
			  @ loop_invariant l <= left && left <= right + 1 && right == r;
			  @ loop_invariant (\forall int i; l <= i && i < left; a[i] <= a[i + 1]);
			  @*/
/*@
		      @ loop_modifies a[*];
		      @ decreases k;
		      @ loop_invariant l <= k && k < r;
		      @ loop_invariant (\forall int i; l <= i && i < k-1; a[i] <= a[i + 1]);
		      @*/
/*@
		      @ loop_modifies a[*];
		      @ decreases k;
		      @ loop_invariant l <= k && k < r;
		      @ loop_invariant (\forall int i; l <= i && i < k-1; a[i] <= a[i + 1]);
		      @*/
/*@
		  @ loop_modifies a[*];
		  @ decreases right;
		  @ loop_invariant l <= right && right < r;
		  @ loop_invariant right <= left + 1;
		  @ loop_invariant (\forall int i; right <= i && i <= r; last <= a[i]);
		  @ loop_invariant (\forall int i; l <= i && i < right - 1; a[i] <= a[i + 1]);
		  @ loop_invariant (\forall int i; right < i && i < r-1; a[i] <= a[i + 1]);
		  @*/
/*@ public normal_behaviour
	    requires 0 <= i && i < a.length;
	    requires 0 <= j && j < a.length;
	    ensures \old(a[i]) == a[j];
	    ensures \old(a[j]) == a[i];
	    assignable a[i], a[j];
	    @*/
/*@ public normal_behaviour
		    ensures (\forall int j; 0 <= j && j < a.length-1; a[j] <= a[j+1]);
		    diverges true;
		@*/
/*@
				  @ loop_modifies a[*];
				  @ loop_invariant 1 <= j && (j <= a.length || a.length == 0);
				  @ loop_invariant sorted ==> (\forall int i; 0 <= i && 1 + 2 * i < j; a[2*i+1] <= a[2*i+2]);

				 @*/
/*@ public normal_behaviour
	    requires 0 <= i && i < a.length;
	    requires 0 <= j && j < a.length;
	    ensures \old(a[i]) == a[j];
	    ensures \old(a[j]) == a[i];
	    assignable a[i], a[j];
	    @*/
/*@ public normal_behaviour
		    ensures (\forall int j; 0 <= j && j < a.length-1; a[j] <= a[j+1]);
		    diverges true;
		@*/
/*@
				  @ loop_modifies a[*];
				  @ loop_invariant 1 <= j && (j <= a.length || a.length == 0);
				  @ loop_invariant sorted ==> (\forall int i; 0 <= i && 1 + 2 * i < j; a[2*i+1] <= a[2*i+2]);

				 @*/
//@ begin

//@ end

//@ refining ensures true;

//@ begin

//@ refining ensures true;

//@ end

//@ refining ensures true;

//@ begin

//@ end

//@ refining ensures true;

//@ begin

//@ refining ensures true;

//@ end

//@ refining ensures true;

//@ requires 0 <= i <= 100;

//@ ensures \result >= 11;

//@ refining

//@ assignable j;

//@ ensures j >= 11; // OK

//@ begin

//@ end

//@ requires 0 <= i <= 100;

//@ ensures \result >= 12;

//@ refining

//@ assignable j;

//@ ensures j >= 11;  // ERROR

//@ requires 0 <= i <= 100;

//@ ensures \result >= 11;

//@ refining : j;

//@ assignable j;

//@ ensures j >= 11; // OK

//@ begin

//@ end

//@ requires 0 <= i <= 100;

//@ ensures \result >= 11;

//@ refining : j;

//@ assignable j;

//@ ensures j >= 11;

//@ begin

//@ end

//@ public normal_behavior

//@   ensures \fresh(\result);

//@ refining : o;

//@  ensures \fresh(o);

//@ begin

//@ end

//@ assert o != null;

//@ public normal_behavior

//@   ensures \fresh(\result);

//@ pure

//@ requires 0 <= i <= 100;

//@ ensures \result >= 11;

//@ refining

//@ assignable j;

//@ ensures j >= 11; // OK

//@ begin

//@ end

//@ requires 0 <= i <= 100;

//@ ensures \result >= 12;

//@ refining

//@ assignable j;

//@ ensures j >= 11;  // ERROR

//@ requires 0 <= i <= 100;

//@ ensures \result >= 11;

//@ refining : j;

//@ assignable j;

//@ ensures j >= 11; // OK

//@ begin

//@ end

//@ requires 0 <= i <= 100;

//@ ensures \result >= 11;

//@ refining : j;

//@ assignable j;

//@ ensures j >= 11;

//@ begin

//@ end

//@ public normal_behavior

//@   ensures \fresh(\result);

//@ refining : o;

//@  ensures \fresh(o);

//@ begin

//@ end

//@ assert o != null;

//@ public normal_behavior

//@   ensures \fresh(\result);

//@ pure

//@ nullable_by_default

//@ recommends o != null else NullPointerException;

//@ recommends o != null else NullPointerException;

//@ requires i >= 0;

//@ recommends o != null else NullPointerException;

//@ recommends i < 10 else ArrayIndexOutOfBoundsException;

//@ recommends o != null else NullPointerException;

//@ recommends i != null else NullPointerException;

//@ recommends o != null else NullPointerException;

//@ recommends i != null else RuntimeException;

//@ recommends o != null else RuntimeException;

//@ recommends i != null else NullPointerException;

//@ recommends o != null else RuntimeException;

//@ recommends o != null else RuntimeException;

//@ recommends i != null else NullPointerException;

//@ recommends o != null else NullPointerException;

//@ recommends i != null else NullPointerException;

//@ ensures 0 <= o.f < 10 && i.f < 10 ==> \result < 20;

//@ nullable_by_default

//@ recommends o != null else NullPointerException;

//@ recommends o != null else NullPointerException;

//@ requires i >= 0;

//@ recommends o != null else NullPointerException;

//@ recommends i < 10 else ArrayIndexOutOfBoundsException;

//@ recommends o != null else NullPointerException;

//@ recommends i != null else NullPointerException;

//@ recommends o != null else NullPointerException;

//@ recommends i != null else RuntimeException;

//@ recommends o != null else RuntimeException;

//@ recommends i != null else NullPointerException;

//@ recommends o != null else RuntimeException;

//@ recommends o != null else RuntimeException;

//@ recommends i != null else NullPointerException;

//@ recommends o != null else NullPointerException;

//@ recommends i != null else NullPointerException;

//@ ensures 0 <= o.f < 10 && i.f < 10 ==> \result < 20;

//@ requires true;

//@ ensures \result == x + y;

//@ code_bigint_math

//@ maintaining sum == x + y - n && 0 <= n;

//@ decreases n;

//@ maintaining sum == x + y + n && 0 <= n;

//@ decreases n;

//@ requires true;

//@ ensures \result == x + y;

//@ code_bigint_math

//@ maintaining sum == x + y - n && 0 <= n;

//@ decreases n;

//@ maintaining sum == x + y + n && 0 <= n;

//@ decreases n;

//@ requires (\forall int i, j; 0 <= i && i < j && j < arr.length; arr[i] <= arr[j]);

//@ ensures \result == -1 ==> (\forall int i; 0 <= i && i < arr.length; arr[i] != key);

//@ ensures 0 <= \result && \result < arr.length ==> arr[\result] == key;

//@ maintaining 0 <= low && low <= high  && high <= arr.length && mid == low + (high - low) / 2;

//@ maintaining (\forall int i; 0 <= i && i < low; arr[i] < key);

//@ maintaining (\forall int i; high <= i && i < arr.length ==> key < arr[i]);

//@ decreases high - low;

//@ requires (\forall int i, j; 0 <= i && i < j && j < arr.length; arr[i] <= arr[j]);

//@ ensures \result == -1 ==> (\forall int i; 0 <= i && i < arr.length; arr[i] != key);

//@ ensures 0 <= \result && \result < arr.length ==> arr[\result] == key;

//@ maintaining 0 <= low && low <= high  && high <= arr.length && mid == low + (high - low) / 2;

//@ maintaining (\forall int i; 0 <= i && i < low; arr[i] < key);

//@ maintaining (\forall int i; high <= i && i < arr.length ==> key < arr[i]);

//@ decreases high - low;

//@ requires a.length == b.length;

//@ requires 0 <= iBegin && iBegin < a.length && 0 <= iEnd && iEnd < a.length && iBegin <= iEnd;

//@ ensures (\forall int i; iBegin <= i && i < iEnd; a[i] == b[i]);

//@ maintaining iBegin <= k && k <= iEnd;

//@ maintaining (\forall int i; iBegin <= i && i < k; a[i] == b[i]);

//@ decreases iEnd  - k;

//@ requires a.length == b.length;

//@ requires 0 <= iBegin && iBegin < a.length && 0 <= iEnd && iEnd < a.length && iBegin <= iEnd;

//@ ensures (\forall int i; iBegin <= i && i < iEnd; a[i] == b[i]);

//@ maintaining iBegin <= k && k <= iEnd;

//@ maintaining (\forall int i; iBegin <= i && i < k; a[i] == b[i]);

//@ decreases iEnd  - k;

//@ requires true;

//@ ensures \result == -1 ==> (\forall int i; 0 <= i && i < x.length; x[i] != 0);

//@ ensures 0 <= \result && \result < x.length ==> x[\result] == 0 && (\forall int i; 0 <= i && i < \result; x[i] != 0);

//@ maintaining (\forall int i; 0 <= i && i < index; x[i] != 0);

//@ maintaining (0 <= index && index <= x.length);

//@ decreases x.length - index;

//@ requires true;

//@ ensures \result == -1 ==> (\forall int i; 0 <= i && i < x.length; x[i] != 0);

//@ ensures 0 <= \result && \result < x.length ==> x[\result] == 0 && (\forall int i; 0 <= i && i < \result; x[i] != 0);

//@ maintaining (\forall int i; 0 <= i && i < index; x[i] != 0);

//@ maintaining (0 <= index && index <= x.length);

//@ decreases x.length - index;

//@ requires true;

//@ ensures \result == false ==> ((x.length != y.length) || (\exists int i; 0 <= i && i < x.length; x[i] != y[x.length - 1 -i]));

//@ ensures \result == true ==> x.length == y.length && (\forall int i; 0 <= i && i < x.length; x[i] == y[x.length - 1 - i]);

//@ maintaining 0 <= index && index <= x.length && x.length == y.length;

//@ maintaining (\forall int i; 0 <= i && i < index; x[i] == y[x.length -1 - i]);

//@ decreases x.length - index;

//@ requires true;

//@ ensures \result == false ==> ((x.length != y.length) || (\exists int i; 0 <= i && i < x.length; x[i] != y[x.length - 1 -i]));

//@ ensures \result == true ==> x.length == y.length && (\forall int i; 0 <= i && i < x.length; x[i] == y[x.length - 1 - i]);

//@ maintaining 0 <= index && index <= x.length && x.length == y.length;

//@ maintaining (\forall int i; 0 <= i && i < index; x[i] == y[x.length -1 - i]);

//@ decreases x.length - index;

//@ requires a > 0;

//@ requires b > 0;

//@ ensures \result == a-b;

//@ requires a > 0;

//@ requires b > 0;

//@ ensures \result == a-b;

//@ requires a > 0;

//@ requires b > 0;

//@ ensures \result == a+b;

//@ requires a > 0;

//@ requires b > 0;

//@ ensures \result == a+b;

//@ requires true;

//@ ensures \result == -1 ==> a.length == 0;

//@ ensures \result > -1 ==> (\forall int i; 0 <= i && i < a.length; a[\result] <= a[i]);

//@ maintaining 0 <= index && index <= a.length;

//@ maintaining 0 <= smallest && smallest < a.length;

//@ maintaining (\forall int i; 0 <= i && i < index; a[smallest] <= a[i]);

//@ decreases a.length - index;

//@ requires true;

//@ ensures \result == -1 ==> a.length == 0;

//@ ensures \result > -1 ==> (\forall int i; 0 <= i && i < a.length; a[\result] <= a[i]);

//@ maintaining 0 <= index && index <= a.length;

//@ maintaining 0 <= smallest && smallest < a.length;

//@ maintaining (\forall int i; 0 <= i && i < index; a[smallest] <= a[i]);

//@ decreases a.length - index;

/*@ spec_public */
/*@ spec_public */
/*@
      @ public invariant age + 15 <= father.getAge();
      @ public invariant age + 15 <= mother.getAge();
      @ public invariant name.equals(father.getName()) | name.equals(mother.getName());
      @*/
/*@
      @ requires !fath.equals(moth);
      @ ensures !this.equals(fath);
      @ ensures !this.equals(moth);
      @*/
/*@ also
      @ requires \typeof(this) == \type(Child);
      @ requires age < AGE_MAX;
      @ requires father.age < AGE_MAX;
      @ requires mother.age < AGE_MAX;
      @ ensures age == \old(age) + 1;
      @ ensures father.age == \old(father.age) + 1;
      @ ensures mother.age == \old(mother.age) + 1;
      @*/
/*@ also
      @ ensures \result != null;
      @*/
/*@ spec_public */
/*@ spec_public */
/*@
      @ public invariant age + 15 <= father.getAge();
      @ public invariant age + 15 <= mother.getAge();
      @ public invariant name.equals(father.getName()) | name.equals(mother.getName());
      @*/
/*@
      @ requires !fath.equals(moth);
      @ ensures !this.equals(fath);
      @ ensures !this.equals(moth);
      @*/
/*@ also
      @ requires \typeof(this) == \type(Child);
      @ requires age < AGE_MAX;
      @ requires father.age < AGE_MAX;
      @ requires mother.age < AGE_MAX;
      @ ensures age == \old(age) + 1;
      @ ensures father.age == \old(father.age) + 1;
      @ ensures mother.age == \old(mother.age) + 1;
      @*/
/*@ also
      @ ensures \result != null;
      @*/
/*@ spec_public */
/*@ spec_public */
/*@ spec_public */
/*@ spec_public */
/*@ spec_public */
/*@
      @ public invariant !name.equals("");
      @ public invariant !firstname.equals("");
      @ public invariant age >= 0
      @        && age <= AGE_MAX;
      @ public constraint age >= \old(age);
      @ public invariant weight > 0;
      @ public invariant (gender == MASC) | (gender == FEMI);
      @ public constraint gender == \old(gender);
      @*/
/*@
      @ requires !name.equals("");
      @ requires !firstname.equals("");
      @ requires age >= 0 && age <= AGE_MAX;
      @ requires weight > 0;
      @ requires (gender == MASC) | (gender == FEMI);
      @*/
/*@
      @ ensures name.equals(\result);
      @*/
/*@ pure */
/*@
      @ ensures firstname.equals(\result);
      @*/
/*@ pure */
/*@
      @ ensures age == \result;
      @*/
/*@ pure */
/*@
      @ ensures weight == \result;
      @*/
/*@ pure */
/*@
      @ requires \typeof(this) == \type(Person) ;
      @ requires age < AGE_MAX;
      @ ensures age == \old(age) + 1;
      @*/
/*@
//      @ normal_behavior
//      @   requires kgs >= 0;
//      @   assignable weight;
//      @   ensures weight == \old(weight) + kgs;
//      @   ensures weight >= \old(weight);
//      @ also
//      @ normal_behavior
//      @   requires kgs < 0;
//      @   requires weight + kgs > 0;
//      @   assignable weight;
//      @   ensures weight == \old(weight) + kgs;
//      @   ensures weight < \old(weight);
//      @ also
//      @ exceptional_behavior
//      @   requires weight + kgs <= 0;
//      @   assignable     othing;
//      @   signals (WeightNegatifException) weight == \old(weight);
//      @*/
/*@ also
      @ ensures \result != null;
      @*/
/*@ spec_public */
/*@ spec_public */
/*@ spec_public */
/*@ spec_public */
/*@ spec_public */
/*@
      @ public invariant !name.equals("");
      @ public invariant !firstname.equals("");
      @ public invariant age >= 0
      @        && age <= AGE_MAX;
      @ public constraint age >= \old(age);
      @ public invariant weight > 0;
      @ public invariant (gender == MASC) | (gender == FEMI);
      @ public constraint gender == \old(gender);
      @*/
/*@
      @ requires !name.equals("");
      @ requires !firstname.equals("");
      @ requires age >= 0 && age <= AGE_MAX;
      @ requires weight > 0;
      @ requires (gender == MASC) | (gender == FEMI);
      @*/
/*@
      @ ensures name.equals(\result);
      @*/
/*@ pure */
/*@
      @ ensures firstname.equals(\result);
      @*/
/*@ pure */
/*@
      @ ensures age == \result;
      @*/
/*@ pure */
/*@
      @ ensures weight == \result;
      @*/
/*@ pure */
/*@
      @ requires \typeof(this) == \type(Person) ;
      @ requires age < AGE_MAX;
      @ ensures age == \old(age) + 1;
      @*/
/*@
//      @ normal_behavior
//      @   requires kgs >= 0;
//      @   assignable weight;
//      @   ensures weight == \old(weight) + kgs;
//      @   ensures weight >= \old(weight);
//      @ also
//      @ normal_behavior
//      @   requires kgs < 0;
//      @   requires weight + kgs > 0;
//      @   assignable weight;
//      @   ensures weight == \old(weight) + kgs;
//      @   ensures weight < \old(weight);
//      @ also
//      @ exceptional_behavior
//      @   requires weight + kgs <= 0;
//      @   assignable     othing;
//      @   signals (WeightNegatifException) weight == \old(weight);
//      @*/
/*@ also
      @ ensures \result != null;
      @*/
//@ public invariant data.length > 0;

//@ requires d.length > 0;

//@ requires src.length > 0;

//@ public invariant data.length > 0;

//@ requires d.length > 0;

//@ requires src.length > 0;

//@ requires me != null;

/*@ spec_public @*/
//@ ensures this.value == value;

//@ ensures this.value != null;

//@ requires value != null;

//@ assignable     othing;

//@ ensures \result == this.value;

/*@ pure @*/
//@ requires me != null;

/*@ spec_public @*/
//@ ensures this.value == value;

//@ ensures this.value != null;

//@ requires value != null;

//@ assignable     othing;

//@ ensures \result == this.value;

/*@ pure @*/
/*@ non_null @*/
/*@ private invariant 1 <= pos;
      @ private invariant pos <= length() + 1;
     */
/*@ non_null @*/
//@ pure helper

/*@ non_null @*/
/*@ private invariant 1 <= pos;
      @ private invariant pos <= length() + 1;
     */
/*@ non_null @*/
//@ pure helper

/*@
      @ ensures !pastEnd() <==> ( pos().equals( \old(pos()) + 1) );
      @ ensures pastEnd() <==> ( \old(pos()).equals(length()) );
      @*/
/*@
      @ requires !pastEnd();
      @ ensures 1 <= \result;
      @ ensures \result <= length();
      @*/
/*@ non_null pure @*/
/*@
      @ requires !pastEnd();
      @*/
/*@ non_null @*/
/*@
      @ ensures 0 <= \result;
      @*/
/*@ non_null pure @*/
/*@ non_null pure @*/
/*@
      @ ensures !pastEnd() <==> ( pos().equals( \old(pos()) + 1) );
      @ ensures pastEnd() <==> ( \old(pos()).equals(length()) );
      @*/
/*@
      @ requires !pastEnd();
      @ ensures 1 <= \result;
      @ ensures \result <= length();
      @*/
/*@ non_null pure @*/
/*@
      @ requires !pastEnd();
      @*/
/*@ non_null @*/
/*@
      @ ensures 0 <= \result;
      @*/
/*@ non_null pure @*/
/*@ non_null pure @*/
//@ assignable elements.objectState;

//@ ensures (elements.contains(s));

//@ reachable;

//@ reachable;

//@ assignable elements.objectState;

//@ ensures (elements.contains(s));

//@ reachable;

//@ reachable;

//@ public model instance int balance_;

//@ public instance invariant balance_ >= 0;

//@ public model instance int balance_;

//@ public instance invariant balance_ >= 0;

/*@spec_public*/
//@ represents balance_ = balance;

/*@spec_public*/
//@ represents balance_ = balanceX;

//@ public model instance int balance_;

//@ public instance invariant balance_ >= 0;

//@ public model instance int balance_;

//@ public instance invariant balance_ >= 0;

/*@spec_public*/
//@ represents balance_ = balance;

/*@spec_public*/
//@ represents balance_ = balanceX;

//@ assert false;

//@ unreachable;

//@ assert false;

//@ unreachable;

//@ code_bigint_math spec_bigint_math

//@ ensures \result == 1;

//@ requires b != null;

//@ requires b.i != null;

//@ assert b.i == \old(b.i) + 1;

//@ requires a.length > 1;

//@ requires a[0] != null;

//@ requires a[0] == 5;

//@ assert a[0] == 6;

//@ ensures \result == false;

//@ code_bigint_math spec_bigint_math

//@ ensures \result == 1;

//@ requires b != null;

//@ requires b.i != null;

//@ assert b.i == \old(b.i) + 1;

//@ requires a.length > 1;

//@ requires a[0] != null;

//@ requires a[0] == 5;

//@ assert a[0] == 6;

//@ ensures \result == false;

//@ ghost public static double eps = 0.00001;

/*@
@ requires x >= 0.0;
@ //ensures org.jmlspecs.models.JMLDouble.approximatelyEqualTo(x, \result * \result, eps);
@*/
//@ assert b >= x;

//@ assert x >= a;

//@ assert b >= a;

//@ loop_invariant b >= a;

//@ assert b >= m && m >= a;

//@ assert b >= a;

//@ assert b*b >= m*m && m*m >= a*a;

//@ ghost public static double eps = 0.00001;

/*@
@ requires x >= 0.0;
@ //ensures org.jmlspecs.models.JMLDouble.approximatelyEqualTo(x, \result * \result, eps);
@*/
//@ assert b >= x;

//@ assert x >= a;

//@ assert b >= a;

//@ loop_invariant b >= a;

//@ assert b >= m && m >= a;

//@ assert b >= a;

//@ assert b*b >= m*m && m*m >= a*a;

/*@ spec_public */
/*@ spec_public */
//@ also ensures \result == stackCounter;

//@ pure

//@ helper

//@ pure

//@ pure

/*@ spec_public */
/*@ spec_public */
//@ also ensures \result == stackCounter;

//@ pure

//@ helper

//@ pure

//@ pure

/*@
	  @public invariant count()>=0;
	  @*/
//@ pure

//@ helper

//@ requires i>=1 && i<=count();

//@ pure

//@ ensures \result==(count()==0);

//@ pure

//@ ensures \result ==> count() == \old(count()) + 1;

//@ ensures \result ==> item==(top());

//@ ensures (\forall int i; 1<=i && i<=\old(count()); itemAt(i)==\old(itemAt(i)));

//@ pure;

/*@
	  @public invariant count()>=0;
	  @*/
//@ pure

//@ helper

//@ requires i>=1 && i<=count();

//@ pure

//@ ensures \result==(count()==0);

//@ pure

//@ ensures \result ==> count() == \old(count()) + 1;

//@ ensures \result ==> item==(top());

//@ ensures (\forall int i; 1<=i && i<=\old(count()); itemAt(i)==\old(itemAt(i)));

//@ pure;

/*@ spec_public */
/*@ spec_public */
//@ also ensures \result == stackCounter;

//@ pure

//@ helper

//@ pure

//@ pure

/*@ spec_public */
/*@ spec_public */
//@ also ensures \result == stackCounter;

//@ pure

//@ helper

//@ pure

//@ pure

/*@
	  @public invariant count()>=0;
	  @*/
//@ pure

//@ helper

//@ requires i>=1 && i<=count();

//@ pure

//@ ensures \result==(count()==0);

//@ pure

//@ ensures \result ==> count() == \old(count()) + 1;

//@ ensures \result ==> item==(top());

//@ ensures (\forall int i; 1<=i && i<=\old(count()); itemAt(i)==\old(itemAt(i)));

//@ pure;

/*@
	  @public invariant count()>=0;
	  @*/
//@ pure

//@ helper

//@ requires i>=1 && i<=count();

//@ pure

//@ ensures \result==(count()==0);

//@ pure

//@ ensures \result ==> count() == \old(count()) + 1;

//@ ensures \result ==> item==(top());

//@ ensures (\forall int i; 1<=i && i<=\old(count()); itemAt(i)==\old(itemAt(i)));

//@ pure;

/*@ spec_public */
/*@ spec_public */
//@ also ensures \result == stackCounter;

//@ pure

//@ helper

//@ pure

//@ pure

/*@ spec_public */
/*@ spec_public */
//@ also ensures \result == stackCounter;

//@ pure

//@ helper

//@ pure

//@ pure

/*@
	  @public invariant count()>=0;
	  @*/
//@ pure

//@ helper

//@ requires i>=1 && i<=count();

//@ pure

//@ ensures \result==(count()==0);

//@ pure

//@ ensures \result ==> item==(top());

//@ ensures (\forall int i; 1<=i && i<=\old(count()); itemAt(i)==\old(itemAt(i)));

//@ pure;

/*@
	  @public invariant count()>=0;
	  @*/
//@ pure

//@ helper

//@ requires i>=1 && i<=count();

//@ pure

//@ ensures \result==(count()==0);

//@ pure

//@ ensures \result ==> item==(top());

//@ ensures (\forall int i; 1<=i && i<=\old(count()); itemAt(i)==\old(itemAt(i)));

//@ pure;

/*@ spec_public */
/*@ spec_public */
//@ also ensures \result == stackCounter;

//@ pure

//@ helper

//@ pure

//@ pure

/*@ spec_public */
/*@ spec_public */
//@ also ensures \result == stackCounter;

//@ pure

//@ helper

//@ pure

//@ pure

/*@
	  @public invariant count()>=0;
	  @*/
//@ pure

//@ helper

//@ requires i>=1 && i<=count();

//@ pure

//@ ensures \result==(count()==0);

//@ pure

//@ ensures \result ==> count() == \old(count()) + 1;

//@ ensures \result ==> item==(top());

//@ ensures (\forall int i; 1<=i && i<=\old(count()); itemAt(i)==\old(itemAt(i)));

//@ pure;

/*@
	  @public invariant count()>=0;
	  @*/
//@ pure

//@ helper

//@ requires i>=1 && i<=count();

//@ pure

//@ ensures \result==(count()==0);

//@ pure

//@ ensures \result ==> count() == \old(count()) + 1;

//@ ensures \result ==> item==(top());

//@ ensures (\forall int i; 1<=i && i<=\old(count()); itemAt(i)==\old(itemAt(i)));

//@ pure;

/*@ spec_public */
/*@ spec_public */
//@ also ensures \result == stackCounter;

//@ pure

//@ helper

//@ pure

//@ pure

/*@ spec_public */
/*@ spec_public */
//@ also ensures \result == stackCounter;

//@ pure

//@ helper

//@ pure

//@ pure

/*@
	  @public invariant count()>=0;
	  @*/
//@ pure

//@ helper

//@ requires i>=1 && i<=count();

//@ pure

//@ ensures \result==(count()==0);

//@ pure

//@ ensures \result ==> count() == \old(count()) + 1;

//@ ensures \result ==> item==(top());

//@ ensures (\forall int i; 1<=i && i<=\old(count()); itemAt(i)==\old(itemAt(i)));

//@ pure;

/*@
	  @public invariant count()>=0;
	  @*/
//@ pure

//@ helper

//@ requires i>=1 && i<=count();

//@ pure

//@ ensures \result==(count()==0);

//@ pure

//@ ensures \result ==> count() == \old(count()) + 1;

//@ ensures \result ==> item==(top());

//@ ensures (\forall int i; 1<=i && i<=\old(count()); itemAt(i)==\old(itemAt(i)));

//@ pure;

/*@ spec_public */
/*@ spec_public */
//@ also ensures \result == stackCounter;

//@ pure

//@ helper

//@ pure

//@ pure

/*@ spec_public */
/*@ spec_public */
//@ also ensures \result == stackCounter;

//@ pure

//@ helper

//@ pure

//@ pure

/*@
	  @public invariant count()>=0;
	  @*/
//@ pure

//@ helper

//@ requires i>=1 && i<=count();

//@ pure

//@ ensures \result==(count()==0);

//@ pure

//@ ensures \result ==> count() == \old(count()) + 1;

//@ ensures \result ==> item==(top());

//@ ensures (\forall int i; 1<=i && i<=\old(count()); itemAt(i)==\old(itemAt(i)));

//@ pure;

/*@
	  @public invariant count()>=0;
	  @*/
//@ pure

//@ helper

//@ requires i>=1 && i<=count();

//@ pure

//@ ensures \result==(count()==0);

//@ pure

//@ ensures \result ==> count() == \old(count()) + 1;

//@ ensures \result ==> item==(top());

//@ ensures (\forall int i; 1<=i && i<=\old(count()); itemAt(i)==\old(itemAt(i)));

//@ pure;

/*@ spec_public */
/*@ spec_public */
//@ also ensures \result == stackCounter;

//@ pure

//@ helper

//@ pure

//@ pure

/*@ spec_public */
/*@ spec_public */
//@ also ensures \result == stackCounter;

//@ pure

//@ helper

//@ pure

//@ pure

/*@
	  @public invariant count()>=0;
	  @*/
//@ pure

//@ helper

//@ requires i>=1 && i<=count();

//@ pure

//@ ensures \result==(count()==0);

//@ pure

//@ ensures \result ==> count() == \old(count()) + 1;

//@ ensures \result ==> item==(top());

//@ ensures (\forall int i; 1<=i && i<=\old(count()); itemAt(i)==\old(itemAt(i)));

//@ pure;

/*@
	  @public invariant count()>=0;
	  @*/
//@ pure

//@ helper

//@ requires i>=1 && i<=count();

//@ pure

//@ ensures \result==(count()==0);

//@ pure

//@ ensures \result ==> count() == \old(count()) + 1;

//@ ensures \result ==> item==(top());

//@ ensures (\forall int i; 1<=i && i<=\old(count()); itemAt(i)==\old(itemAt(i)));

//@ pure;

/*@ spec_public */
/*@ spec_public */
/*@ spec_public */
//@ in count;

//@ public represents count = stackCounter;

//@ public invariant stackCounter <= internalStack.length;

//@ public invariant internalStack.length >= maxSize;

//@ ensures count == 0;

//@ ensures stackCounter == 0;

//@ ensures count() == 0;

//@ also ensures \result == stackCounter;

//@ pure

//@ helper

//@ also requires 1 <= i && i <= count();

//@ ensures \result == internalStack[i-1];

//@ pure

//@ pure

//@ assert s.count == 0;

//@ assert s.count() == 3;

//@ assert s.count == 3;

//@ assert s.count == 0;

//@ assert s.count() == 3;

//@ assert s.count == 3;

//@ assert s.stackCounter == 3;

/*@ spec_public */
/*@ spec_public */
/*@ spec_public */
//@ in count;

//@ public represents count = stackCounter;

//@ public invariant stackCounter <= internalStack.length;

//@ public invariant internalStack.length >= maxSize;

//@ ensures count == 0;

//@ ensures stackCounter == 0;

//@ ensures count() == 0;

//@ also ensures \result == stackCounter;

//@ pure

//@ helper

//@ also requires 1 <= i && i <= count();

//@ ensures \result == internalStack[i-1];

//@ pure

//@ pure

//@ assert s.count == 0;

//@ assert s.count() == 3;

//@ assert s.count == 3;

//@ assert s.count == 0;

//@ assert s.count() == 3;

//@ assert s.count == 3;

//@ assert s.stackCounter == 3;

/*@
	  @public invariant count()>=0;
	  @*/
//@ pure

//@ helper

//@ requires i>=1 && i<=count();

//@ pure

//@ ensures \result==(count()==0);

//@ pure

//@ ensures \result ==> count() == \old(count()) + 1;

//@ ensures \result ==> item==(top());

//@ ensures (\forall int i; 1<=i && i<=\old(count()); itemAt(i)==\old(itemAt(i)));

//@ requires count() >= 1;

//@ ensures \result == itemAt(count);

//@ pure

//@ ensures \result == (\old(count) != 0);

/*@
	  @public invariant count()>=0;
	  @*/
//@ pure

//@ helper

//@ requires i>=1 && i<=count();

//@ pure

//@ ensures \result==(count()==0);

//@ pure

//@ ensures \result ==> count() == \old(count()) + 1;

//@ ensures \result ==> item==(top());

//@ ensures (\forall int i; 1<=i && i<=\old(count()); itemAt(i)==\old(itemAt(i)));

//@ requires count() >= 1;

//@ ensures \result == itemAt(count);

//@ pure

//@ ensures \result == (\old(count) != 0);

//@ ensures false;



//@ ensures false;



_by_default

//@ also

//@   requires x > 0;

//@   assignable     othing;

//@   ensures \result != null && \result > 0;

//@   requires z > 0; // FAILS because there are no specs to say that apply is pure

//@   assignable     othing;

//@ nullable

//@   requires z > 0;

//@   ensures \result != null && \result > 0; // FAILS becuse no specs give info about postcondition

//@ nullable

//@   requires z > 0;

//@   assignable f.applyFrame;

//@   ensures \result != null && \result > 0;

/*@{ PositivePureFunction }@*/
//@ assert zz == 0;

//@   requires z > 0;

/*@{ PositivePureFunction }@*/
//@ assert zz == 0; // OK because apply is known to be pure

_by_default

//@ also

//@   requires x > 0;

//@   assignable     othing;

//@   ensures \result != null && \result > 0;

//@   requires z > 0; // FAILS because there are no specs to say that apply is pure

//@   assignable     othing;

//@ nullable

//@   requires z > 0;

//@   ensures \result != null && \result > 0; // FAILS becuse no specs give info about postcondition

//@ nullable

//@   requires z > 0;

//@   assignable f.applyFrame;

//@   ensures \result != null && \result > 0;

/*@{ PositivePureFunction }@*/
//@ assert zz == 0;

//@   requires z > 0;

/*@{ PositivePureFunction }@*/
//@ assert zz == 0; // OK because apply is known to be pure

//@ requires k >= 0;

//@ loop_invariant 0 <= i <= k;

//@ loop_invariant \index == k-i;

//@ split

//@ assert i == 0;

//@ split

//@ assert i < -1; // Split A

//@ loop_invariant -1 <= j <= i;

//@ split

//@ loop_invariant 0 <= k <= 10;

//@ split

//@ assert k < 0; // FAILS - BAA

//@ split

//@ assert i < 1; // FAILS - BABA

//@ assert i < 2; // FAILS - BABB

//@ loop_invariant 0 <= j <= 10;

//@ split

//@ assert i < 3; // FAILS - BBA

//@ assert j < 0; // FAILS - BBB

//@ requires k >= 0;

//@ loop_invariant 0 <= i <= k;

//@ loop_invariant j == k-i;

//@ loop_invariant \index == k-i;

//@ split

//@ assert j == k;

//@ loop_invariant j == \count;

//@ loop_invariant 0 <= \count <= k.length;

//@ loop_writes j;

//@ split

//@ show j, k.length;

//@ assert j == k.length;

//@ requires k >= 0;

//@ loop_invariant 0 <= i <= k;

//@ loop_invariant \index == k-i;

//@ split

//@ assert i == 0;

//@ split

//@ assert i < -1; // Split A

//@ loop_invariant -1 <= j <= i;

//@ split

//@ loop_invariant 0 <= k <= 10;

//@ split

//@ assert k < 0; // FAILS - BAA

//@ split

//@ assert i < 1; // FAILS - BABA

//@ assert i < 2; // FAILS - BABB

//@ loop_invariant 0 <= j <= 10;

//@ split

//@ assert i < 3; // FAILS - BBA

//@ assert j < 0; // FAILS - BBB

//@ requires k >= 0;

//@ loop_invariant 0 <= i <= k;

//@ loop_invariant j == k-i;

//@ loop_invariant \index == k-i;

//@ split

//@ assert j == k;

//@ loop_invariant j == \count;

//@ loop_invariant 0 <= \count <= k.length;

//@ loop_writes j;

//@ split

//@ show j, k.length;

//@ assert j == k.length;

//@ ensures \result;

//@ ensures \result;

//@ split

//@ ensures \result;

//@ split;

//@ requires i <= 2;

//@ ensures \result;

//@ split

//@ split

//@ split

//@ ensures \result;

//@ split i > 0;

//@ ensures \result;

//@ split

//@ split i >= 0;

//@ split

//@ ensures i>0 ==> \result == 10 * 10101;

//@ ensures i<=0 ==> \result == 20 * 10101;

//@ @org.jmlspecs.annotation.Options("-split=A")

//@ split

//@ requires i < 1000;

//@ ensures j == i + 1;

//@ requires i < 1000;

//@ ensures j == i + 1;

//@ requires i < 1000;

//@ ensures (\lbl J j) == i + 1;

//@ show i;

//@ requires i < 1000;

//@ ensures j == i + 1;

//@ halt

//@ assert j == 11; // IGNORED

//@ assert i < 0; // FAILS

//@ halt

//@ assert j == 11; // IGNORED

//@ assert i <= 0; // SUCCEEDS

//@ halt

//@ assert j == 11; // IGNORED

//@ halt

//@ assert false; // IGNORED

//@ ensures \result;

//@ ensures \result;

//@ split

//@ ensures \result;

//@ split;

//@ requires i <= 2;

//@ ensures \result;

//@ split

//@ split

//@ split

//@ ensures \result;

//@ split i > 0;

//@ ensures \result;

//@ split

//@ split i >= 0;

//@ split

//@ ensures i>0 ==> \result == 10 * 10101;

//@ ensures i<=0 ==> \result == 20 * 10101;

//@ @org.jmlspecs.annotation.Options("-split=A")

//@ split

//@ requires i < 1000;

//@ ensures j == i + 1;

//@ requires i < 1000;

//@ ensures j == i + 1;

//@ requires i < 1000;

//@ ensures (\lbl J j) == i + 1;

//@ show i;

//@ requires i < 1000;

//@ ensures j == i + 1;

//@ halt

//@ assert j == 11; // IGNORED

//@ assert i < 0; // FAILS

//@ halt

//@ assert j == 11; // IGNORED

//@ assert i <= 0; // SUCCEEDS

//@ halt

//@ assert j == 11; // IGNORED

//@ halt

//@ assert false; // IGNORED

//@ old static Object o = oo;

//@ old static Object o = oo;

//@ old Object o = oo;

//@ old static Object o = oo;

//@ old static Object o = oo;

//@ old Object o = oo;

//@ reachable;

//@ assert Arrays.equalElements(s.values,a);

//@ reachable;

//@ assert coll == Collectors.<Integer>toList();

//@ reachable;

//@ reachable;

//@ assert r.values == s.values;

//@ assert Arrays.equalElements(r.values,s.values);

//@ reachable;

//@ assert Arrays.equalElements(s.values,a);

//@ reachable;

//@ assert coll == Collectors.<Integer>toList();

//@ reachable;

//@ reachable;

//@ assert r.values == s.values;

//@ assert Arrays.equalElements(r.values,s.values);

//@ requires true;

//@ requires true;

//@ requires true;

/*@ spec_public */
//@ requires true;

/*@ spec_public */
//@ requires true;

/*@ spec_public */
//@ requires true;

//@ requires a > 100;

//@ requires a > 100;

//@ requires a > 100;

//@ requires true;

//@ requires true;

//@ requires true;

//@ requires true;

//@ requires true;

//@ requires true;

//@ requires true;

//@ requires true;

//@ requires true;

//@ requires true;

//@ requires true;

//@ requires true;

//@ requires true;

//@ requires true;

//@ requires true;

//@ requires true;

//@ requires true;

//@ requires true;

//@ requires true;

//@ requires true;

//@ requires true;

//@ requires true;

//@ requires true;

//@ requires true;

//@ requires true;

//@ requires true;

//@ requires true;

//@ requires true;

//@ requires true;

//@ requires true;

//@ requires true;

//@ requires true;

//@ requires true;

//@ requires true;

//@ requires true;

//@ requires true;

//@ requires true;

//@ requires true;

//@ requires true;

//@ requires true;

//@ requires true;

//@ requires true;

//@ requires true;

//@ requires true;

//@ requires true;

//@ requires true;

//@ requires true;

//@ requires true;

/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
//@ requires true;

/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
//@ requires true;

/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
//@ requires true;

/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
//@ requires true;

//@ ensures \result == (eof && !usePrevious);

//@ requires this.reader != null;

/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
//@ requires true;

//@ ensures \result == (eof && !usePrevious);

//@ requires this.reader != null;

/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
//@ requires true;

//@ ensures \result == (eof && !usePrevious);

//@ requires this.reader != null;

/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
//@ requires this.reader != null;

/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
//@ requires this.reader != null;

/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
/*@ spec_public @*/
//@ requires this.reader != null;

//@ requires true;

//@ requires true;

//@ requires true;

//@ requires true;

//@ requires true;

//@ requires true;

//@ requires true;

//@ ensures this.FIELD==3;

//@ ensures \result == a + b;

//@ assignable this.FIELD;

//@ requires true;

//@ requires true;

//@ ensures this.FIELD==3;

//@ ensures \result == a + b;

//@ assignable this.FIELD;

//@ requires true;

//@ requires true;

//@ ensures this.FIELD==3;

//@ ensures \result == a + b;

//@ assignable this.FIELD;

//@ requires true;

//@ requires true;

//@ ensures this.FIELD==3;

//@ ensures \result == a + b;

//@ assignable this.FIELD;

//@ requires true;

//@ requires true;

//@ ensures this.FIELD==3;

//@ ensures \result == a + b;

//@ assignable this.FIELD;

//@ requires true;

//@ requires true;

//@ ensures this.FIELD==3;

//@ ensures \result == a + b;

//@ assignable this.FIELD;

//@ requires true;

//@ requires true;

//@ ensures this.FIELD==3;

//@ ensures \result == a + b;

//@ assignable this.FIELD;

//@ requires true;

//@ requires true;

//@ ensures this.FIELD==3;

//@ ensures \result == a + b;

//@ assignable this.FIELD;

//@ requires true;

//@ requires true;

//@ ensures this.FIELD==3;

//@ ensures \result == a + b;

//@ assignable this.FIELD;

//@ requires true;

//@ requires true;

//@ ensures this.FIELD==3;

//@ ensures \result == a + b;

//@ assignable this.FIELD;

//@ requires true;

//@ requires true;

//@ ensures this.FIELD==3;

//@ ensures \result == a + b;

//@ assignable this.FIELD;

//@ requires true;

//@ requires true;

//@ ensures this.FIELD==3;

//@ ensures \result == a + b;

//@ assignable this.FIELD;

//@ requires true;

/*@
      public normal_behavior
      requires true;
      {|
         ensures a==b ==> \result == true;
        also
         ensures a!=b ==> \result == false;
       |}
     */
//@ requires true;

/*@
      public normal_behavior
      requires true;
      {|
         ensures a==b ==> \result == true;
        also
         ensures a!=b ==> \result == false;
       |}
     */
//@ requires true;

/*@
      public normal_behavior
      requires true;
      {|
         ensures a==b ==> \result == true;
        also
         ensures a!=b ==> \result == false;
       |}
     */
//@ requires true;

//@ requires ar!=null;

/*@
          @ maintaining -1 < i && i <= ar.length;
          @ maintaining sum == i;
          @ decreasing ar.length - i;
          @*/
//@ requires ar!=null;

/*@
          @ maintaining -1 < i && i <= ar.length;
          @ maintaining sum == i;
          @ decreasing ar.length - i;
          @*/
//@ requires ar!=null;

/*@
          @ maintaining -1 < i && i <= ar.length;
          @ maintaining sum == i;
          @ decreasing ar.length - i;
          @*/
//@ assignable     othing;

//@ assignable     othing;

//@ assignable     othing;

/*@ spec_public */
/*@
      public invariant decPart >= 0 && decPart < PRECISION ;
      public invariant intPart >= 0 && intPart <= MAX_DECIMAL_NUMBER;
      public invariant intPart == MAX_DECIMAL_NUMBER ==> decPart == 0;
    */
/*@ spec_public */
/*@ spec_public */
/*@
      public invariant decPart_ >= 0 && decPart_ < PRECISION ;
      public invariant intPart_ >= 0 ;
      public invariant intPart_ == MAX_DECIMAL_NUMBER ==> decPart_ == 0;
    */
/*@ spec_public */
/*@ spec_public */
/*@ spec_public */
/*@
      requires true;
      ensures intPart == 0 && decPart == 0;
//      ensures \fresh(this);
    */
/*@
      requires v >= 0;
      ensures intPart == v && decPart == 0;
//      ensures \fresh(this);
      exsures (ISOException) false;
    */
//@ unreachable;

/*@
      requires i >= 0 && d >= 0 && d < PRECISION;
      requires i == MAX_DECIMAL_NUMBER ==> d == 0;
      ensures intPart == i && decPart == d;
//      ensures \fresh(this);
      exsures (ISOException) false; assignable \everything;
    */
//@ unreachable;

/*@
      requires d != null; assignable \everything;
      ensures intPart == d.intPart && decPart == d.decPart;
//      ensures \fresh(this);
      exsures (ISOException) false;
    */
//@ unreachable;

/*@
      modifies intPart, decPart;
      requires d != null;
//       ensures intPart * PRECISION + decPart ==
//                 \old(intPart * PRECISION + decPart) +
//                 d.intPart * PRECISION + d.decPart;
      ensures \result == this ;
      exsures (DecimalException) intPart < 0 ;
     */
/*@
      requires d != null;
      modifies intPart, decPart;
//       ensures intPart * PRECISION + decPart ==
//                 \old(intPart * PRECISION + decPart) -
//                 d.intPart * PRECISION + d.decPart;
      ensures \result == this;
      exsures (DecimalException) intPart < 0;
    */
/*@
      modifies intPart, decPart;
      requires d != null ;
//       ensures intPart * PRECISION + decPart ==
//                 \old(intPart * PRECISION + decPart) *
//                 (d.intPart * PRECISION + d.decPart);
      ensures \result == this ;
      exsures (DecimalException) intPart < 0 ;
    */
/*@
      modifies intPart, decPart;
      requires true;
      ensures intPart == \old((short)-intPart);
      ensures decPart == \old((short)-decPart);
      ensures \result == this;
      //exsures (RuntimeException) false
    */
/*@ helper */
/*@
      modifies intPart, decPart;
      requires true;
      ensures \result == this;
      ensures decPart == 0;
      ensures intPart == (\old(decPart) >= (PRECISION/2) ?
                              (short)(\old(intPart) + 1) :
                                 (short)(\old(intPart)));
      //exsures (RuntimeException)false
    */
/*@
      //modifies     othing
      requires 0 <= ref && ref <= MAX_DECIMAL_NUMBER;
      ensures \result == (intPart == ref ? ((decPart == 0) ? 0 : 1)
                                         : ((intPart < ref) ? -1 : 1));
      //exsures (RuntimeException)false
    */
/*@
      //modifies     othing
      requires true;
      ensures \result == (intPart == 0 && decPart == 0);
      //exsures (RuntimeException)false
    */
/*@
      //modifies     othing
      requires true;
      ensures \result;
      //exsures (RuntimeException)false
    */
/*@
      //modifies     othing
      requires true;
      ensures \result == false;
      //exsures (RuntimeException)false
    */
/*@
      //modifies     othing
      requires d != null;
      ensures \result == ((intPart * PRECISION + decPart >
                           d.intPart * PRECISION + d.decPart) ||
                          (intPart * PRECISION + decPart ==
                           d.intPart * PRECISION + d.decPart));
      //exsures (RuntimeException)false
    */
/*@
      //modifies     othing
      requires d != null;
//       ensures \result == (intPart * PRECISION + decPart <=
//                           d.intPart * PRECISION + d.decPart);
      //exsures (RuntimeException)false
    */
/*@
      //modifies     othing
      requires d != null;
//       ensures \result == (intPart * PRECISION + decPart >
//                           d.intPart * PRECISION + d.decPart);
      //exsures (RuntimeException)false
    */
/*@
      //modifies     othing
      requires d != null;
//       ensures \result == (d.intPart * PRECISION + d.decPart >
//                           intPart * PRECISION + decPart);
      //exsures (RuntimeException)false
    */
/*@
      //modifies     othing
      requires d != null;
      ensures \result == (intPart == d.intPart &&
                          decPart == d.decPart);
      //exsures (RuntimeException)false
    */
/*@
      requires true;
      ensures intPart == v ;
      ensures decPart == (short) 0 ;
      ensures \result == this;
      exsures (DecimalException) v < 0;
    */
/*@
      requires true;
      ensures intPart == i && decPart == d ;
      ensures \result == this;
      exsures (DecimalException) i < 0 || d < 0 || d >= PRECISION ||
                                 (i == MAX_DECIMAL_NUMBER && d != 0);
    */
/*@
      requires d != null ;
      ensures intPart == d.intPart ;
      ensures decPart == d.decPart ;
      ensures \result == this ;
      exsures (DecimalException) false ;
    */
/*@
      //modifies     othing
      requires true;
      ensures \result == intPart;
      //exsures (RuntimeException)false
      pure */
/*@
      //modifies     othing;
      requires true ;
      ensures \result == decPart;
      //exsures (RuntimeException)false
      pure */
/*@
      modifies intPart, decPart;
      requires true;
      ensures intPart == \old(intPart) && decPart == \old(decPart);
      ensures \result == (decPart >= PRECISION/2 ?
                          intPart + 1:
                          intPart);
      //exsures (RuntimeException)false
    */
/*@
      modifies bArray[off], bArray[off+1], bArray[off+2], bArray[off+3];
      requires bArray != null ;
      requires off >= 0;
      requires off + 3 < bArray.length;
      ensures \result == off+4 ;
      exsures (ArrayIndexOutOfBoundsException) false;
    */
/*@
      modifies intPart_, decPart_, depth;
      requires true;
      ensures (depth < MAX_DEPTH) ==> (intPart_ == intPart &&
                                       decPart_ == decPart &&
                                       depth == (byte) (\old(depth) + 1));
      //exsures (RuntimeException)false
    */
/*@
      modifies intPart, decPart, depth;
      requires true;
      ensures (depth > 0) ==> (intPart == intPart_ &&
                               decPart == decPart_ &&
                               depth == (byte)(\old(depth) - 1));
      //exsures (RuntimeException)false
    */
/*@
      modifies intPart, decPart ;
      requires true ;
//       ensures intPart * PRECISION + decPart ==
//                \old(intPart * PRECISION + decPart) + (e * PRECISION + f);
      //exsures (RuntimeException)false;
    */
//@ nowarn;

/*@
      modifies intPart, decPart;
      requires true ;
//       ensures intPart * PRECISION + decPart ==
//               \old(intPart * PRECISION + decPart) * (e * PRECISION + f);
      // exsures (RuntimeException)false;
    */
//@ assume aux != 0;

//@ nowarn;

/*@ spec_public */
/*@
      public invariant decPart >= 0 && decPart < PRECISION ;
      public invariant intPart >= 0 && intPart <= MAX_DECIMAL_NUMBER;
      public invariant intPart == MAX_DECIMAL_NUMBER ==> decPart == 0;
    */
/*@ spec_public */
/*@ spec_public */
/*@
      public invariant decPart_ >= 0 && decPart_ < PRECISION ;
      public invariant intPart_ >= 0 ;
      public invariant intPart_ == MAX_DECIMAL_NUMBER ==> decPart_ == 0;
    */
/*@ spec_public */
/*@ spec_public */
/*@ spec_public */
/*@
      requires true;
      ensures intPart == 0 && decPart == 0;
//      ensures \fresh(this);
    */
/*@
      requires v >= 0;
      ensures intPart == v && decPart == 0;
//      ensures \fresh(this);
      exsures (ISOException) false;
    */
//@ unreachable;

/*@
      requires i >= 0 && d >= 0 && d < PRECISION;
      requires i == MAX_DECIMAL_NUMBER ==> d == 0;
      ensures intPart == i && decPart == d;
//      ensures \fresh(this);
      exsures (ISOException) false; assignable \everything;
    */
//@ unreachable;

/*@
      requires d != null; assignable \everything;
      ensures intPart == d.intPart && decPart == d.decPart;
//      ensures \fresh(this);
      exsures (ISOException) false;
    */
//@ unreachable;

/*@
      modifies intPart, decPart;
      requires d != null;
//       ensures intPart * PRECISION + decPart ==
//                 \old(intPart * PRECISION + decPart) +
//                 d.intPart * PRECISION + d.decPart;
      ensures \result == this ;
      exsures (DecimalException) intPart < 0 ;
     */
/*@
      requires d != null;
      modifies intPart, decPart;
//       ensures intPart * PRECISION + decPart ==
//                 \old(intPart * PRECISION + decPart) -
//                 d.intPart * PRECISION + d.decPart;
      ensures \result == this;
      exsures (DecimalException) intPart < 0;
    */
/*@
      modifies intPart, decPart;
      requires d != null ;
//       ensures intPart * PRECISION + decPart ==
//                 \old(intPart * PRECISION + decPart) *
//                 (d.intPart * PRECISION + d.decPart);
      ensures \result == this ;
      exsures (DecimalException) intPart < 0 ;
    */
/*@
      modifies intPart, decPart;
      requires true;
      ensures intPart == \old((short)-intPart);
      ensures decPart == \old((short)-decPart);
      ensures \result == this;
      //exsures (RuntimeException) false
    */
/*@ helper */
/*@
      modifies intPart, decPart;
      requires true;
      ensures \result == this;
      ensures decPart == 0;
      ensures intPart == (\old(decPart) >= (PRECISION/2) ?
                              (short)(\old(intPart) + 1) :
                                 (short)(\old(intPart)));
      //exsures (RuntimeException)false
    */
/*@
      //modifies     othing
      requires 0 <= ref && ref <= MAX_DECIMAL_NUMBER;
      ensures \result == (intPart == ref ? ((decPart == 0) ? 0 : 1)
                                         : ((intPart < ref) ? -1 : 1));
      //exsures (RuntimeException)false
    */
/*@
      //modifies     othing
      requires true;
      ensures \result == (intPart == 0 && decPart == 0);
      //exsures (RuntimeException)false
    */
/*@
      //modifies     othing
      requires true;
      ensures \result;
      //exsures (RuntimeException)false
    */
/*@
      //modifies     othing
      requires true;
      ensures \result == false;
      //exsures (RuntimeException)false
    */
/*@
      //modifies     othing
      requires d != null;
      ensures \result == ((intPart * PRECISION + decPart >
                           d.intPart * PRECISION + d.decPart) ||
                          (intPart * PRECISION + decPart ==
                           d.intPart * PRECISION + d.decPart));
      //exsures (RuntimeException)false
    */
/*@
      //modifies     othing
      requires d != null;
//       ensures \result == (intPart * PRECISION + decPart <=
//                           d.intPart * PRECISION + d.decPart);
      //exsures (RuntimeException)false
    */
/*@
      //modifies     othing
      requires d != null;
//       ensures \result == (intPart * PRECISION + decPart >
//                           d.intPart * PRECISION + d.decPart);
      //exsures (RuntimeException)false
    */
/*@
      //modifies     othing
      requires d != null;
//       ensures \result == (d.intPart * PRECISION + d.decPart >
//                           intPart * PRECISION + decPart);
      //exsures (RuntimeException)false
    */
/*@
      //modifies     othing
      requires d != null;
      ensures \result == (intPart == d.intPart &&
                          decPart == d.decPart);
      //exsures (RuntimeException)false
    */
/*@
      requires true;
      ensures intPart == v ;
      ensures decPart == (short) 0 ;
      ensures \result == this;
      exsures (DecimalException) v < 0;
    */
/*@
      requires true;
      ensures intPart == i && decPart == d ;
      ensures \result == this;
      exsures (DecimalException) i < 0 || d < 0 || d >= PRECISION ||
                                 (i == MAX_DECIMAL_NUMBER && d != 0);
    */
/*@
      requires d != null ;
      ensures intPart == d.intPart ;
      ensures decPart == d.decPart ;
      ensures \result == this ;
      exsures (DecimalException) false ;
    */
/*@
      //modifies     othing
      requires true;
      ensures \result == intPart;
      //exsures (RuntimeException)false
      pure */
/*@
      //modifies     othing;
      requires true ;
      ensures \result == decPart;
      //exsures (RuntimeException)false
      pure */
/*@
      modifies intPart, decPart;
      requires true;
      ensures intPart == \old(intPart) && decPart == \old(decPart);
      ensures \result == (decPart >= PRECISION/2 ?
                          intPart + 1:
                          intPart);
      //exsures (RuntimeException)false
    */
/*@
      modifies bArray[off], bArray[off+1], bArray[off+2], bArray[off+3];
      requires bArray != null ;
      requires off >= 0;
      requires off + 3 < bArray.length;
      ensures \result == off+4 ;
      exsures (ArrayIndexOutOfBoundsException) false;
    */
/*@
      modifies intPart_, decPart_, depth;
      requires true;
      ensures (depth < MAX_DEPTH) ==> (intPart_ == intPart &&
                                       decPart_ == decPart &&
                                       depth == (byte) (\old(depth) + 1));
      //exsures (RuntimeException)false
    */
/*@
      modifies intPart, decPart, depth;
      requires true;
      ensures (depth > 0) ==> (intPart == intPart_ &&
                               decPart == decPart_ &&
                               depth == (byte)(\old(depth) - 1));
      //exsures (RuntimeException)false
    */
/*@
      modifies intPart, decPart ;
      requires true ;
//       ensures intPart * PRECISION + decPart ==
//                \old(intPart * PRECISION + decPart) + (e * PRECISION + f);
      //exsures (RuntimeException)false;
    */
//@ nowarn;

/*@
      modifies intPart, decPart;
      requires true ;
//       ensures intPart * PRECISION + decPart ==
//               \old(intPart * PRECISION + decPart) * (e * PRECISION + f);
      // exsures (RuntimeException)false;
    */
//@ assume aux != 0;

//@ nowarn;

/*@ spec_public */
/*@
      public invariant decPart >= 0 && decPart < PRECISION ;
      public invariant intPart >= 0 && intPart <= MAX_DECIMAL_NUMBER;
      public invariant intPart == MAX_DECIMAL_NUMBER ==> decPart == 0;
    */
/*@ spec_public */
/*@ spec_public */
/*@
      public invariant decPart_ >= 0 && decPart_ < PRECISION ;
      public invariant intPart_ >= 0 ;
      public invariant intPart_ == MAX_DECIMAL_NUMBER ==> decPart_ == 0;
    */
/*@ spec_public */
/*@ spec_public */
/*@ spec_public */
/*@
      requires true;
      ensures intPart == 0 && decPart == 0;
//      ensures \fresh(this);
    */
/*@
      requires v >= 0;
      ensures intPart == v && decPart == 0;
//      ensures \fresh(this);
      exsures (ISOException) false;
    */
//@ unreachable;

/*@
      requires i >= 0 && d >= 0 && d < PRECISION;
      requires i == MAX_DECIMAL_NUMBER ==> d == 0;
      ensures intPart == i && decPart == d;
//      ensures \fresh(this);
      exsures (ISOException) false; assignable \everything;
    */
//@ unreachable;

/*@
      requires d != null; assignable \everything;
      ensures intPart == d.intPart && decPart == d.decPart;
//      ensures \fresh(this);
      exsures (ISOException) false;
    */
//@ unreachable;

/*@
      modifies intPart, decPart;
      requires d != null;
//       ensures intPart * PRECISION + decPart ==
//                 \old(intPart * PRECISION + decPart) +
//                 d.intPart * PRECISION + d.decPart;
      ensures \result == this ;
      exsures (DecimalException) intPart < 0 ;
     */
/*@
      requires d != null;
      modifies intPart, decPart;
//       ensures intPart * PRECISION + decPart ==
//                 \old(intPart * PRECISION + decPart) -
//                 d.intPart * PRECISION + d.decPart;
      ensures \result == this;
      exsures (DecimalException) intPart < 0;
    */
/*@
      modifies intPart, decPart;
      requires d != null ;
//       ensures intPart * PRECISION + decPart ==
//                 \old(intPart * PRECISION + decPart) *
//                 (d.intPart * PRECISION + d.decPart);
      ensures \result == this ;
      exsures (DecimalException) intPart < 0 ;
    */
/*@
      modifies intPart, decPart;
      requires true;
      ensures intPart == \old((short)-intPart);
      ensures decPart == \old((short)-decPart);
      ensures \result == this;
      //exsures (RuntimeException) false
    */
/*@ helper */
/*@
      modifies intPart, decPart;
      requires true;
      ensures \result == this;
      ensures decPart == 0;
      ensures intPart == (\old(decPart) >= (PRECISION/2) ?
                              (short)(\old(intPart) + 1) :
                                 (short)(\old(intPart)));
      //exsures (RuntimeException)false
    */
/*@
      //modifies     othing
      requires 0 <= ref && ref <= MAX_DECIMAL_NUMBER;
      ensures \result == (intPart == ref ? ((decPart == 0) ? 0 : 1)
                                         : ((intPart < ref) ? -1 : 1));
      //exsures (RuntimeException)false
    */
/*@
      //modifies     othing
      requires true;
      ensures \result == (intPart == 0 && decPart == 0);
      //exsures (RuntimeException)false
    */
/*@
      //modifies     othing
      requires true;
      ensures \result;
      //exsures (RuntimeException)false
    */
/*@
      //modifies     othing
      requires true;
      ensures \result == false;
      //exsures (RuntimeException)false
    */
/*@
      //modifies     othing
      requires d != null;
      ensures \result == ((intPart * PRECISION + decPart >
                           d.intPart * PRECISION + d.decPart) ||
                          (intPart * PRECISION + decPart ==
                           d.intPart * PRECISION + d.decPart));
      //exsures (RuntimeException)false
    */
/*@
      //modifies     othing
      requires d != null;
//       ensures \result == (intPart * PRECISION + decPart <=
//                           d.intPart * PRECISION + d.decPart);
      //exsures (RuntimeException)false
    */
/*@
      //modifies     othing
      requires d != null;
//       ensures \result == (intPart * PRECISION + decPart >
//                           d.intPart * PRECISION + d.decPart);
      //exsures (RuntimeException)false
    */
/*@
      //modifies     othing
      requires d != null;
//       ensures \result == (d.intPart * PRECISION + d.decPart >
//                           intPart * PRECISION + decPart);
      //exsures (RuntimeException)false
    */
/*@
      //modifies     othing
      requires d != null;
      ensures \result == (intPart == d.intPart &&
                          decPart == d.decPart);
      //exsures (RuntimeException)false
    */
/*@
      requires true;
      ensures intPart == v ;
      ensures decPart == (short) 0 ;
      ensures \result == this;
      exsures (DecimalException) v < 0;
    */
/*@
      requires true;
      ensures intPart == i && decPart == d ;
      ensures \result == this;
      exsures (DecimalException) i < 0 || d < 0 || d >= PRECISION ||
                                 (i == MAX_DECIMAL_NUMBER && d != 0);
    */
/*@
      requires d != null ;
      ensures intPart == d.intPart ;
      ensures decPart == d.decPart ;
      ensures \result == this ;
      exsures (DecimalException) false ;
    */
/*@
      //modifies     othing
      requires true;
      ensures \result == intPart;
      //exsures (RuntimeException)false
      pure */
/*@
      //modifies     othing;
      requires true ;
      ensures \result == decPart;
      //exsures (RuntimeException)false
      pure */
/*@
      modifies intPart, decPart;
      requires true;
      ensures intPart == \old(intPart) && decPart == \old(decPart);
      ensures \result == (decPart >= PRECISION/2 ?
                          intPart + 1:
                          intPart);
      //exsures (RuntimeException)false
    */
/*@
      modifies bArray[off], bArray[off+1], bArray[off+2], bArray[off+3];
      requires bArray != null ;
      requires off >= 0;
      requires off + 3 < bArray.length;
      ensures \result == off+4 ;
      exsures (ArrayIndexOutOfBoundsException) false;
    */
/*@
      modifies intPart_, decPart_, depth;
      requires true;
      ensures (depth < MAX_DEPTH) ==> (intPart_ == intPart &&
                                       decPart_ == decPart &&
                                       depth == (byte) (\old(depth) + 1));
      //exsures (RuntimeException)false
    */
/*@
      modifies intPart, decPart, depth;
      requires true;
      ensures (depth > 0) ==> (intPart == intPart_ &&
                               decPart == decPart_ &&
                               depth == (byte)(\old(depth) - 1));
      //exsures (RuntimeException)false
    */
/*@
      modifies intPart, decPart ;
      requires true ;
//       ensures intPart * PRECISION + decPart ==
//                \old(intPart * PRECISION + decPart) + (e * PRECISION + f);
      //exsures (RuntimeException)false;
    */
//@ nowarn;

/*@
      modifies intPart, decPart;
      requires true ;
//       ensures intPart * PRECISION + decPart ==
//               \old(intPart * PRECISION + decPart) * (e * PRECISION + f);
      // exsures (RuntimeException)false;
    */
//@ assume aux != 0;

//@ nowarn;

/*@ spec_public */
/*@
      public invariant decPart >= 0 && decPart < PRECISION ;
      public invariant intPart >= 0 && intPart <= MAX_DECIMAL_NUMBER;
      public invariant intPart == MAX_DECIMAL_NUMBER ==> decPart == 0;
    */
/*@ spec_public */
/*@ spec_public */
/*@
      public invariant decPart_ >= 0 && decPart_ < PRECISION ;
      public invariant intPart_ >= 0 ;
      public invariant intPart_ == MAX_DECIMAL_NUMBER ==> decPart_ == 0;
    */
/*@ spec_public */
/*@ spec_public */
/*@ spec_public */
/*@
      requires true;
      ensures intPart == 0 && decPart == 0;
      ensures \fresh(this);
    */
/*@
      requires v >= 0;
      ensures intPart == v && decPart == 0;
      ensures \fresh(this);
      exsures (ISOException) false;
    */
//@ unreachable;

/*@
      requires i >= 0 && d >= 0 && d < PRECISION;
      requires i == MAX_DECIMAL_NUMBER ==> d == 0;
      ensures intPart == i && decPart == d;
      ensures \fresh(this);
      exsures (ISOException) false; assignable \everything;
    */
//@ unreachable;

/*@
      requires d != null;
      ensures intPart == d.intPart && decPart == d.decPart;
      ensures \fresh(this);
      exsures (ISOException) false;
    */
//@ unreachable;

/*@
      modifies intPart, decPart;
      requires d != null;
//       ensures intPart * PRECISION + decPart ==
//                 \old(intPart * PRECISION + decPart) +
//                 d.intPart * PRECISION + d.decPart;
      ensures \result == this ;
      exsures (DecimalException) intPart < 0 ;
     */
/*@
      requires d != null;
      modifies intPart, decPart;
//       ensures intPart * PRECISION + decPart ==
//                 \old(intPart * PRECISION + decPart) -
//                 d.intPart * PRECISION + d.decPart;
      ensures \result == this;
      exsures (DecimalException) intPart < 0;
    */
/*@
      modifies intPart, decPart;
      requires d != null ;
//       ensures intPart * PRECISION + decPart ==
//                 \old(intPart * PRECISION + decPart) *
//                 (d.intPart * PRECISION + d.decPart);
      ensures \result == this ;
      exsures (DecimalException) intPart < 0 ;
    */
/*@
      modifies intPart, decPart;
      requires true;
      ensures intPart == \old((short)-intPart);
      ensures decPart == \old((short)-decPart);
      ensures \result == this;
      //exsures (RuntimeException) false
    */
/*@ helper */
/*@
      modifies intPart, decPart;
      requires true;
      ensures \result == this;
      ensures decPart == 0;
      ensures intPart == (\old(decPart) >= (PRECISION/2) ?
                              (short)(\old(intPart) + 1) :
                                 (short)(\old(intPart)));
      //exsures (RuntimeException)false
    */
/*@
      //modifies     othing
      requires 0 <= ref && ref <= MAX_DECIMAL_NUMBER;
      ensures \result == (intPart == ref ? ((decPart == 0) ? 0 : 1)
                                         : ((intPart < ref) ? -1 : 1));
      //exsures (RuntimeException)false
    */
/*@
      //modifies     othing
      requires true;
      ensures \result == (intPart == 0 && decPart == 0);
      //exsures (RuntimeException)false
    */
/*@
      //modifies     othing
      requires true;
      ensures \result;
      //exsures (RuntimeException)false
    */
/*@
      //modifies     othing
      requires true;
      ensures \result == false;
      //exsures (RuntimeException)false
    */
/*@
      //modifies     othing
      requires d != null;
      ensures \result == ((intPart * PRECISION + decPart >
                           d.intPart * PRECISION + d.decPart) ||
                          (intPart * PRECISION + decPart ==
                           d.intPart * PRECISION + d.decPart));
      //exsures (RuntimeException)false
    */
/*@
      //modifies     othing
      requires d != null;
//       ensures \result == (intPart * PRECISION + decPart <=
//                           d.intPart * PRECISION + d.decPart);
      //exsures (RuntimeException)false
    */
/*@
      //modifies     othing
      requires d != null;
//       ensures \result == (intPart * PRECISION + decPart >
//                           d.intPart * PRECISION + d.decPart);
      //exsures (RuntimeException)false
    */
/*@
      //modifies     othing
      requires d != null;
//       ensures \result == (d.intPart * PRECISION + d.decPart >
//                           intPart * PRECISION + decPart);
      //exsures (RuntimeException)false
    */
/*@
      //modifies     othing
      requires d != null;
      ensures \result == (intPart == d.intPart &&
                          decPart == d.decPart);
      //exsures (RuntimeException)false
    */
/*@
      requires true;
      ensures intPart == v ;
      ensures decPart == (short) 0 ;
      ensures \result == this;
      exsures (DecimalException) v < 0;
    */
/*@
      requires true;
      ensures intPart == i && decPart == d ;
      ensures \result == this;
      exsures (DecimalException) i < 0 || d < 0 || d >= PRECISION ||
                                 (i == MAX_DECIMAL_NUMBER && d != 0);
    */
/*@
      requires d != null ;
      ensures intPart == d.intPart ;
      ensures decPart == d.decPart ;
      ensures \result == this ;
      exsures (DecimalException) false ;
    */
/*@
      //modifies     othing
      requires true;
      ensures \result == intPart;
      //exsures (RuntimeException)false
    */
/*@
      //modifies     othing;
      requires true ;
      ensures \result == decPart;
      //exsures (RuntimeException)false
    */
/*@
      modifies intPart, decPart;
      requires true;
      ensures intPart == \old(intPart) && decPart == \old(decPart);
      ensures \result == (decPart >= PRECISION/2 ?
                          intPart + 1:
                          intPart);
      //exsures (RuntimeException)false
    */
/*@
      modifies bArray[off], bArray[off+1], bArray[off+2], bArray[off+3];
      requires bArray != null ;
      requires off >= 0;
      requires off + 3 < bArray.length;
      ensures \result == off+4 ;
      exsures (ArrayIndexOutOfBoundsException) false;
    */
/*@
      modifies intPart_, decPart_, depth;
      requires true;
      ensures (depth < MAX_DEPTH) ==> (intPart_ == intPart &&
                                       decPart_ == decPart &&
                                       depth == (byte) (\old(depth) + 1));
      //exsures (RuntimeException)false
    */
/*@
      modifies intPart, decPart, depth;
      requires true;
      ensures (depth > 0) ==> (intPart == intPart_ &&
                               decPart == decPart_ &&
                               depth == (byte)(\old(depth) - 1));
      //exsures (RuntimeException)false
    */
/*@
      modifies intPart, decPart ;
      requires true ;
//       ensures intPart * PRECISION + decPart ==
//                \old(intPart * PRECISION + decPart) + (e * PRECISION + f);
      //exsures (RuntimeException)false;
    */
//@ nowarn;

/*@
      modifies intPart, decPart;
      requires true ;
//       ensures intPart * PRECISION + decPart ==
//               \old(intPart * PRECISION + decPart) * (e * PRECISION + f);
      // exsures (RuntimeException)false;
    */
//@ assume aux != 0;

//@ nowarn;

/*@ spec_public */
/*@
      public invariant decPart >= 0 && decPart < PRECISION ;
      public invariant intPart >= 0 && intPart <= MAX_DECIMAL_NUMBER;
      public invariant intPart == MAX_DECIMAL_NUMBER ==> decPart == 0;
    */
/*@ spec_public */
/*@ spec_public */
/*@
      public invariant decPart_ >= 0 && decPart_ < PRECISION ;
      public invariant intPart_ >= 0 ;
      public invariant intPart_ == MAX_DECIMAL_NUMBER ==> decPart_ == 0;
    */
/*@ spec_public */
/*@ spec_public */
/*@ spec_public */
/*@
      requires true;
      ensures intPart == 0 && decPart == 0;
      ensures \fresh(this);
    */
/*@
      requires v >= 0;
      ensures intPart == v && decPart == 0;
      ensures \fresh(this);
      exsures (ISOException) false;
    */
//@ unreachable;

/*@
      requires i >= 0 && d >= 0 && d < PRECISION;
      requires i == MAX_DECIMAL_NUMBER ==> d == 0;
      ensures intPart == i && decPart == d;
      ensures \fresh(this);
      exsures (ISOException) false; assignable \everything;
    */
//@ unreachable;

/*@
      requires d != null;
      ensures intPart == d.intPart && decPart == d.decPart;
      ensures \fresh(this);
      exsures (ISOException) false;
    */
//@ unreachable;

/*@
      modifies intPart, decPart;
      requires d != null;
//       ensures intPart * PRECISION + decPart ==
//                 \old(intPart * PRECISION + decPart) +
//                 d.intPart * PRECISION + d.decPart;
      ensures \result == this ;
      exsures (DecimalException) intPart < 0 ;
     */
/*@
      requires d != null;
      modifies intPart, decPart;
//       ensures intPart * PRECISION + decPart ==
//                 \old(intPart * PRECISION + decPart) -
//                 d.intPart * PRECISION + d.decPart;
      ensures \result == this;
      exsures (DecimalException) intPart < 0;
    */
/*@
      modifies intPart, decPart;
      requires d != null ;
//       ensures intPart * PRECISION + decPart ==
//                 \old(intPart * PRECISION + decPart) *
//                 (d.intPart * PRECISION + d.decPart);
      ensures \result == this ;
      exsures (DecimalException) intPart < 0 ;
    */
/*@
      modifies intPart, decPart;
      requires true;
      ensures intPart == \old((short)-intPart);
      ensures decPart == \old((short)-decPart);
      ensures \result == this;
      //exsures (RuntimeException) false
    */
/*@ helper */
/*@
      modifies intPart, decPart;
      requires true;
      ensures \result == this;
      ensures decPart == 0;
      ensures intPart == (\old(decPart) >= (PRECISION/2) ?
                              (short)(\old(intPart) + 1) :
                                 (short)(\old(intPart)));
      //exsures (RuntimeException)false
    */
/*@
      //modifies     othing
      requires 0 <= ref && ref <= MAX_DECIMAL_NUMBER;
      ensures \result == (intPart == ref ? ((decPart == 0) ? 0 : 1)
                                         : ((intPart < ref) ? -1 : 1));
      //exsures (RuntimeException)false
    */
/*@
      //modifies     othing
      requires true;
      ensures \result == (intPart == 0 && decPart == 0);
      //exsures (RuntimeException)false
    */
/*@
      //modifies     othing
      requires true;
      ensures \result;
      //exsures (RuntimeException)false
    */
/*@
      //modifies     othing
      requires true;
      ensures \result == false;
      //exsures (RuntimeException)false
    */
/*@
      //modifies     othing
      requires d != null;
      ensures \result == ((intPart * PRECISION + decPart >
                           d.intPart * PRECISION + d.decPart) ||
                          (intPart * PRECISION + decPart ==
                           d.intPart * PRECISION + d.decPart));
      //exsures (RuntimeException)false
    */
/*@
      //modifies     othing
      requires d != null;
//       ensures \result == (intPart * PRECISION + decPart <=
//                           d.intPart * PRECISION + d.decPart);
      //exsures (RuntimeException)false
    */
/*@
      //modifies     othing
      requires d != null;
//       ensures \result == (intPart * PRECISION + decPart >
//                           d.intPart * PRECISION + d.decPart);
      //exsures (RuntimeException)false
    */
/*@
      //modifies     othing
      requires d != null;
//       ensures \result == (d.intPart * PRECISION + d.decPart >
//                           intPart * PRECISION + decPart);
      //exsures (RuntimeException)false
    */
/*@
      //modifies     othing
      requires d != null;
      ensures \result == (intPart == d.intPart &&
                          decPart == d.decPart);
      //exsures (RuntimeException)false
    */
/*@
      requires true;
      ensures intPart == v ;
      ensures decPart == (short) 0 ;
      ensures \result == this;
      exsures (DecimalException) v < 0;
    */
/*@
      requires true;
      ensures intPart == i && decPart == d ;
      ensures \result == this;
      exsures (DecimalException) i < 0 || d < 0 || d >= PRECISION ||
                                 (i == MAX_DECIMAL_NUMBER && d != 0);
    */
/*@
      requires d != null ;
      ensures intPart == d.intPart ;
      ensures decPart == d.decPart ;
      ensures \result == this ;
      exsures (DecimalException) false ;
    */
/*@
      //modifies     othing
      requires true;
      ensures \result == intPart;
      //exsures (RuntimeException)false
    */
/*@
      //modifies     othing;
      requires true ;
      ensures \result == decPart;
      //exsures (RuntimeException)false
    */
/*@
      modifies intPart, decPart;
      requires true;
      ensures intPart == \old(intPart) && decPart == \old(decPart);
      ensures \result == (decPart >= PRECISION/2 ?
                          intPart + 1:
                          intPart);
      //exsures (RuntimeException)false
    */
/*@
      modifies bArray[off], bArray[off+1], bArray[off+2], bArray[off+3];
      requires bArray != null ;
      requires off >= 0;
      requires off + 3 < bArray.length;
      ensures \result == off+4 ;
      exsures (ArrayIndexOutOfBoundsException) false;
    */
/*@
      modifies intPart_, decPart_, depth;
      requires true;
      ensures (depth < MAX_DEPTH) ==> (intPart_ == intPart &&
                                       decPart_ == decPart &&
                                       depth == (byte) (\old(depth) + 1));
      //exsures (RuntimeException)false
    */
/*@
      modifies intPart, decPart, depth;
      requires true;
      ensures (depth > 0) ==> (intPart == intPart_ &&
                               decPart == decPart_ &&
                               depth == (byte)(\old(depth) - 1));
      //exsures (RuntimeException)false
    */
/*@
      modifies intPart, decPart ;
      requires true ;
//       ensures intPart * PRECISION + decPart ==
//                \old(intPart * PRECISION + decPart) + (e * PRECISION + f);
      //exsures (RuntimeException)false;
    */
//@ nowarn;

/*@
      modifies intPart, decPart;
      requires true ;
//       ensures intPart * PRECISION + decPart ==
//               \old(intPart * PRECISION + decPart) * (e * PRECISION + f);
      // exsures (RuntimeException)false;
    */
//@ assume aux != 0;

//@ nowarn;

/*@ spec_public */
/*@
      public invariant decPart >= 0 && decPart < PRECISION ;
      public invariant intPart >= 0 && intPart <= MAX_DECIMAL_NUMBER;
      public invariant intPart == MAX_DECIMAL_NUMBER ==> decPart == 0;
    */
/*@ spec_public */
/*@ spec_public */
/*@
      public invariant decPart_ >= 0 && decPart_ < PRECISION ;
      public invariant intPart_ >= 0 ;
      public invariant intPart_ == MAX_DECIMAL_NUMBER ==> decPart_ == 0;
    */
/*@ spec_public */
/*@ spec_public */
/*@ spec_public */
/*@
      requires true;
      ensures intPart == 0 && decPart == 0;
      ensures \fresh(this);
    */
/*@
      requires v >= 0;
      ensures intPart == v && decPart == 0;
      ensures \fresh(this);
      exsures (ISOException) false;
    */
//@ unreachable;

/*@
      requires i >= 0 && d >= 0 && d < PRECISION;
      requires i == MAX_DECIMAL_NUMBER ==> d == 0;
      ensures intPart == i && decPart == d;
      ensures \fresh(this);
      exsures (ISOException) false; assignable \everything;
    */
//@ unreachable;

/*@
      requires d != null;
      ensures intPart == d.intPart && decPart == d.decPart;
      ensures \fresh(this);
      exsures (ISOException) false;
    */
//@ unreachable;

/*@
      modifies intPart, decPart;
      requires d != null;
//       ensures intPart * PRECISION + decPart ==
//                 \old(intPart * PRECISION + decPart) +
//                 d.intPart * PRECISION + d.decPart;
      ensures \result == this ;
      exsures (DecimalException) intPart < 0 ;
     */
/*@
      requires d != null;
      modifies intPart, decPart;
//       ensures intPart * PRECISION + decPart ==
//                 \old(intPart * PRECISION + decPart) -
//                 d.intPart * PRECISION + d.decPart;
      ensures \result == this;
      exsures (DecimalException) intPart < 0;
    */
/*@
      modifies intPart, decPart;
      requires d != null ;
//       ensures intPart * PRECISION + decPart ==
//                 \old(intPart * PRECISION + decPart) *
//                 (d.intPart * PRECISION + d.decPart);
      ensures \result == this ;
      exsures (DecimalException) intPart < 0 ;
    */
/*@
      modifies intPart, decPart;
      requires true;
      ensures intPart == \old((short)-intPart);
      ensures decPart == \old((short)-decPart);
      ensures \result == this;
      //exsures (RuntimeException) false
    */
/*@ helper */
/*@
      modifies intPart, decPart;
      requires true;
      ensures \result == this;
      ensures decPart == 0;
      ensures intPart == (\old(decPart) >= (PRECISION/2) ?
                              (short)(\old(intPart) + 1) :
                                 (short)(\old(intPart)));
      //exsures (RuntimeException)false
    */
/*@
      //modifies     othing
      requires 0 <= ref && ref <= MAX_DECIMAL_NUMBER;
      ensures \result == (intPart == ref ? ((decPart == 0) ? 0 : 1)
                                         : ((intPart < ref) ? -1 : 1));
      //exsures (RuntimeException)false
    */
/*@
      //modifies     othing
      requires true;
      ensures \result == (intPart == 0 && decPart == 0);
      //exsures (RuntimeException)false
    */
/*@
      //modifies     othing
      requires true;
      ensures \result;
      //exsures (RuntimeException)false
    */
/*@
      //modifies     othing
      requires true;
      ensures \result == false;
      //exsures (RuntimeException)false
    */
/*@
      //modifies     othing
      requires d != null;
      ensures \result == ((intPart * PRECISION + decPart >
                           d.intPart * PRECISION + d.decPart) ||
                          (intPart * PRECISION + decPart ==
                           d.intPart * PRECISION + d.decPart));
      //exsures (RuntimeException)false
    */
/*@
      //modifies     othing
      requires d != null;
//       ensures \result == (intPart * PRECISION + decPart <=
//                           d.intPart * PRECISION + d.decPart);
      //exsures (RuntimeException)false
    */
/*@
      //modifies     othing
      requires d != null;
//       ensures \result == (intPart * PRECISION + decPart >
//                           d.intPart * PRECISION + d.decPart);
      //exsures (RuntimeException)false
    */
/*@
      //modifies     othing
      requires d != null;
//       ensures \result == (d.intPart * PRECISION + d.decPart >
//                           intPart * PRECISION + decPart);
      //exsures (RuntimeException)false
    */
/*@
      //modifies     othing
      requires d != null;
      ensures \result == (intPart == d.intPart &&
                          decPart == d.decPart);
      //exsures (RuntimeException)false
    */
/*@
      requires true;
      ensures intPart == v ;
      ensures decPart == (short) 0 ;
      ensures \result == this;
      exsures (DecimalException) v < 0;
    */
/*@
      requires true;
      ensures intPart == i && decPart == d ;
      ensures \result == this;
      exsures (DecimalException) i < 0 || d < 0 || d >= PRECISION ||
                                 (i == MAX_DECIMAL_NUMBER && d != 0);
    */
/*@
      requires d != null ;
      ensures intPart == d.intPart ;
      ensures decPart == d.decPart ;
      ensures \result == this ;
      exsures (DecimalException) false ;
    */
/*@
      //modifies     othing
      requires true;
      ensures \result == intPart;
      //exsures (RuntimeException)false
    */
/*@
      //modifies     othing;
      requires true ;
      ensures \result == decPart;
      //exsures (RuntimeException)false
    */
/*@
      modifies intPart, decPart;
      requires true;
      ensures intPart == \old(intPart) && decPart == \old(decPart);
      ensures \result == (decPart >= PRECISION/2 ?
                          intPart + 1:
                          intPart);
      //exsures (RuntimeException)false
    */
/*@
      modifies bArray[off], bArray[off+1], bArray[off+2], bArray[off+3];
      requires bArray != null ;
      requires off >= 0;
      requires off + 3 < bArray.length;
      ensures \result == off+4 ;
      exsures (ArrayIndexOutOfBoundsException) false;
    */
/*@
      modifies intPart_, decPart_, depth;
      requires true;
      ensures (depth < MAX_DEPTH) ==> (intPart_ == intPart &&
                                       decPart_ == decPart &&
                                       depth == (byte) (\old(depth) + 1));
      //exsures (RuntimeException)false
    */
/*@
      modifies intPart, decPart, depth;
      requires true;
      ensures (depth > 0) ==> (intPart == intPart_ &&
                               decPart == decPart_ &&
                               depth == (byte)(\old(depth) - 1));
      //exsures (RuntimeException)false
    */
/*@
      modifies intPart, decPart ;
      requires true ;
//       ensures intPart * PRECISION + decPart ==
//                \old(intPart * PRECISION + decPart) + (e * PRECISION + f);
      //exsures (RuntimeException)false;
    */
//@ nowarn;

/*@
      modifies intPart, decPart;
      requires true ;
//       ensures intPart * PRECISION + decPart ==
//               \old(intPart * PRECISION + decPart) * (e * PRECISION + f);
      // exsures (RuntimeException)false;
    */
//@ assume aux != 0;

//@ nowarn;

//@ assert false;

//@ assert false;

//@ assert true;

//@ assert true;

//@ ghost int i = 0; // No errors

//@ ghost int i = 0; // No errors

//@ ghost int i = true; // Error to provoke a message

//@ ghost int i = true; // Error to provoke a message

//@ ghost int i = ; // Parse error to provoke a message

//@ ghost int i = ; // Parse error to provoke a message

//@ ghost int i = 0; // No errors

//@ ghost int i = 0; // No errors

//@ ghost int i = 0; // No errors

//@ ghost int i = 0; // No errors

//@ requires z ; // BAD

//@ requires z ; // BAD

//@ requires z ; // BAD

//@ loop_invariant 0 <= j && j <= 10;

//@ loop_decreases 10 - j;

//@ loop_invariant 0 <= i && i <= 10;

//@ loop_decreases 10 - i;

//@ loop_invariant 0 <= i && i <= 10;

//@ loop_decreases 10 - i;

//@ loop_invariant 0 <= i && i <= 10;

//@ loop_decreases 10 - i;

//@ loop_invariant 0 <= j && j <= 10;

//@ loop_decreases 10 - j;

//@ loop_invariant 0 <= i && i <= 10;

//@ loop_decreases 10 - i;

//@ loop_invariant 0 <= i && i <= 10;

//@ loop_decreases 10 - i;

//@ loop_invariant 0 <= i && i <= 10;

//@ loop_decreases 10 - i;

//@ ensures \result == (\sum int i; 0 <= i && i < a.length; a[i]);

//@ loop_invariant 0 <= \count && \count <= a.length;

//@ loop_invariant sum == (\sum int j; 0<=j && j<\count; a[j]);

//@ ensures \result == (\sum int i; 0 <= i && i < a.length; a[i]);

//@ loop_invariant 0 <= \count && \count <= a.length;

//@ loop_invariant sum == (\sum int j; 0<=j && j<\count; a[j]);

//@ assert args.length != 2;

//@ assert args.length != 2;

//@ ghost int t = (1,e,4). 1;

//@ ghost int v = (1,e,4).3;

//@ set (t,v) = (2,3);

//@ set (t,v) = (2,e);

//@ set (t,v) = (e,e);

//@ set (t,v) = (2,3,4);

//@ set (t,v) = 2;

//@ ghost Integer w = (1,e,4).2;

//@ ghost String s;

//@ ghost Boolean ss;

//@ set (t,ss,w,s) = 2;

//@ set v = (1,e,4).0;

//@ set v = (1,e,4).4;

//@ set v = (1,e,4).a;

//@ set v = e.4;

//@ ghost int t = (1,e,4). 1;

//@ ghost int v = (1,e,4).3;

//@ set (t,v) = (2,3);

//@ set (t,v) = (2,e);

//@ set (t,v) = (e,e);

//@ set (t,v) = (2,3,4);

//@ set (t,v) = 2;

//@ ghost Integer w = (1,e,4).2;

//@ ghost String s;

//@ ghost Boolean ss;

//@ set (t,ss,w,s) = 2;

//@ set v = (1,e,4).0;

//@ set v = (1,e,4).4;

//@ set v = (1,e,4).a;

//@ set v = e.4;

//@ ghost int t = 1;

//@ ghost int v = 2;

//@ set (t,v) = (v+10,t+20);

//@ assert t == 12;

//@ assert v == 21;

//@ set (t,v) = t+10;

//@ assert t == 22;

//@ assert v == 22;

//@ ghost int t = 1;

//@ ghost int v = 2;

//@ set (t,v) = (v+10,t+20);

//@ assert t == 12;

//@ assert v == 21;

//@ set (t,v) = t+10;

//@ assert t == 22;

//@ assert v == 22;

/*@ spec_public */
/*@ spec_public */
/*@ requires length < 10;
	  @ requires !contains(value);
	  @ ensures length == \old(length) + 1;
	  @*/
/*@ requires index < length;
	  @ ensures \result == values[index];
	  @*/
/*@ pure */
/*@
	  @ requires index1 < length;
	  @ requires index2 < length;
	  @ ensures values[index1] == \old(values[index2]);
	  @ ensures values[index2] == \old(values[index1]);
	  @ pure
	  @*/
/*@
	  @ requires contains(value);
	  @ ensures !contains(value);
	  @ ensures \old(values)[\result] == value;
	  @ ensures \result == \old(find(value));
	  @ ensures length == \old(length) - 1;
	  @*/
/*@
	  @ ensures \result >= 0;
	  @ ensures \result <= length;
	  @ ensures contains(value) ==> value == values[\result];
	  @ ensures !contains(value) ==> \result == length;
      @ pure
	  @*/
/*@
	  @ ensures \result == (\exists int i; 0 <= i && i < length; value == values[i]);
      @ pure
	  @*/
/*@ spec_public */
/*@ spec_public */
/*@ requires length < 10;
	  @ requires !contains(value);
	  @ ensures length == \old(length) + 1;
	  @*/
/*@ requires index < length;
	  @ ensures \result == values[index];
	  @*/
/*@ pure */
/*@
	  @ requires index1 < length;
	  @ requires index2 < length;
	  @ ensures values[index1] == \old(values[index2]);
	  @ ensures values[index2] == \old(values[index1]);
	  @ pure
	  @*/
/*@
	  @ requires contains(value);
	  @ ensures !contains(value);
	  @ ensures \old(values)[\result] == value;
	  @ ensures \result == \old(find(value));
	  @ ensures length == \old(length) - 1;
	  @*/
/*@
	  @ ensures \result >= 0;
	  @ ensures \result <= length;
	  @ ensures contains(value) ==> value == values[\result];
	  @ ensures !contains(value) ==> \result == length;
      @ pure
	  @*/
/*@
	  @ ensures \result == (\exists int i; 0 <= i && i < length; value == values[i]);
      @ pure
	  @*/
/*@ spec_public */
/*@ spec_public */
/*@ requires length < 10;
	  @ requires !contains(value);
	  @ ensures length == \old(length) + 1;
	  @*/
/*@ requires index < length;
	  @ ensures \result == values[index];
	  @*/
/*@ pure */
/*@
	  @ requires index1 < length;
	  @ requires index2 < length;
	  @ ensures values[index1] == \old(values[index2]);
	  @ ensures values[index2] == \old(values[index1]);
	  @*/
/*@
	  @ requires contains(value);
	  @ ensures !contains(value);
	  @ ensures \old(values)[\result] == value;
	  @ ensures \result == \old(find(value));
	  @ ensures length == \old(length) - 1;
	  @*/
/*@
	  @ ensures \result >= 0;
	  @ ensures \result <= length;
	  @ ensures contains(value) ==> value == values[\result];
	  @ ensures !contains(value) ==> \result == length;
      @ pure
	  @*/
/*@
	  @ ensures \result == (\exists int i; 0 <= i && i < length; value == values[i]);
      @ pure
	  @*/
/*@ spec_public */
/*@ spec_public */
/*@ requires length < 10;
	  @ requires !contains(value);
	  @ ensures length == \old(length) + 1;
	  @*/
/*@ requires index < length;
	  @ ensures \result == values[index];
	  @*/
/*@ pure */
/*@
	  @ requires index1 < length;
	  @ requires index2 < length;
	  @ ensures values[index1] == \old(values[index2]);
	  @ ensures values[index2] == \old(values[index1]);
	  @*/
/*@
	  @ requires contains(value);
	  @ ensures !contains(value);
	  @ ensures \old(values)[\result] == value;
	  @ ensures \result == \old(find(value));
	  @ ensures length == \old(length) - 1;
	  @*/
/*@
	  @ ensures \result >= 0;
	  @ ensures \result <= length;
	  @ ensures contains(value) ==> value == values[\result];
	  @ ensures !contains(value) ==> \result == length;
      @ pure
	  @*/
/*@
	  @ ensures \result == (\exists int i; 0 <= i && i < length; value == values[i]);
      @ pure
	  @*/
/*@ spec_public */
/*@ spec_public */
/*@ requires length < 10;
	  @ ensures length == \old(length) + 1;
	  @ requires (\forall int i; 0 <= i && i < length; values[i] != value);
	  @*/
/*@ requires index < length;
	  @ ensures \result == values[index];
	  @*/
/*@ pure */
/*@
	  @ requires index1 < length;
	  @ requires index2 < length;
	  @ ensures values[index1] == \old(values[index2]);
	  @ ensures values[index2] == \old(values[index1]);
	  @*/
/*@ spec_public */
/*@ spec_public */
/*@ requires length < 10;
	  @ ensures length == \old(length) + 1;
	  @ requires (\forall int i; 0 <= i && i < length; values[i] != value);
	  @*/
/*@ requires index < length;
	  @ ensures \result == values[index];
	  @*/
/*@ pure */
/*@
	  @ requires index1 < length;
	  @ requires index2 < length;
	  @ ensures values[index1] == \old(values[index2]);
	  @ ensures values[index2] == \old(values[index1]);
	  @*/
//@ pure

//@ public normal_behavior

//@ ensures string.empty().isEmpty();

//@ ensures string.empty().size() == 0;

//@ model public static void newStringIsEmpty() {}

//@ public normal_behavior

//@ ensures string.string("abc").size() == 3;

//@ model public static void newStringFromString() {}  // FIXME - does not yet work

//@ public normal_behavior

//@ ensures s.add('c').size() == 1 + s.size();

//@ model public static void addBumpsSize(string s) {}

//@ public normal_behavior

//@ requires 0 <= i && i <= s.size();

//@ ensures s.add(i,'c').size() == 1 + s.size();

//@ model public static void addBumpsSize(string s, \bigint i) {}

//@ public normal_behavior

//@ requires 0 <= k && k < s.size();

//@ ensures s.remove(k).size() == s.size() - 1;

//@ model public static <T> void removeLowersSize(string s, int k) {}

//@ public normal_behavior

//@   requires i >= 0 && i <= s.size();

//@   ensures string.equals(s.add(i,'c').remove(i), s);

//@ model public static void addRemove(string s, \bigint i) { show i, s.size(); }

//@ public normal_behavior

//@   requires i >= 0 && i <= s.size();

//@   requires 0 <= k && k < i;

//@   ensures s.add(i,'c').get(k) == s.get(k);

//@ model public static void addGet1(string s, \bigint i, \bigint k) { }

//@ public normal_behavior

//@   requires i >= 0 && i <= s.size();

//@   requires i < k && k <= s.size();

//@   ensures s.add(i,'c').get(k) == s.get(k-1);

//@ model public static void addGet2(string s, \bigint i, \bigint k) { show i, k, s.size();  }

//@ public normal_behavior

//@   requires i >= 0 && i <= s.size();

//@   ensures s.add(i,c).get(i) == c;

//@ model public static void addGet(string s, \bigint i, char c) {}

//@ ensures string.string("abc").get(1) == 'b';

//@ model public static void character() {}  // FIXME - does not yet work

//@ pure

//@ public normal_behavior

//@ ensures string.empty().isEmpty();

//@ ensures string.empty().size() == 0;

//@ model public static void newStringIsEmpty() {}

//@ public normal_behavior

//@ ensures string.string("abc").size() == 3;

//@ model public static void newStringFromString() {}  // FIXME - does not yet work

//@ public normal_behavior

//@ ensures s.add('c').size() == 1 + s.size();

//@ model public static void addBumpsSize(string s) {}

//@ public normal_behavior

//@ requires 0 <= i && i <= s.size();

//@ ensures s.add(i,'c').size() == 1 + s.size();

//@ model public static void addBumpsSize(string s, \bigint i) {}

//@ public normal_behavior

//@ requires 0 <= k && k < s.size();

//@ ensures s.remove(k).size() == s.size() - 1;

//@ model public static <T> void removeLowersSize(string s, int k) {}

//@ public normal_behavior

//@   requires i >= 0 && i <= s.size();

//@   ensures string.equals(s.add(i,'c').remove(i), s);

//@ model public static void addRemove(string s, \bigint i) { show i, s.size(); }

//@ public normal_behavior

//@   requires i >= 0 && i <= s.size();

//@   requires 0 <= k && k < i;

//@   ensures s.add(i,'c').get(k) == s.get(k);

//@ model public static void addGet1(string s, \bigint i, \bigint k) { }

//@ public normal_behavior

//@   requires i >= 0 && i <= s.size();

//@   requires i < k && k <= s.size();

//@   ensures s.add(i,'c').get(k) == s.get(k-1);

//@ model public static void addGet2(string s, \bigint i, \bigint k) { show i, k, s.size();  }

//@ public normal_behavior

//@   requires i >= 0 && i <= s.size();

//@   ensures s.add(i,c).get(i) == c;

//@ model public static void addGet(string s, \bigint i, char c) {}

//@ ensures string.string("abc").get(1) == 'b';

//@ model public static void character() {}  // FIXME - does not yet work

//@ model import org.jmlspecs.lang.set;

//@ pure

//@ public normal_behavior

//@ ensures locset.locset().empty();

//@ model public static void newLocSetIsEmpty() {}

//@ public normal_behavior

//@ ensures locset.locset().add(o).size() == 1;

//@ model public static void singleton(location o) {}

//@ public normal_behavior

//@ ensures !s.contains(o) ==> s.add(o).size() == 1 + s.size();

//@ model public static void addBumpsSize(locset s, location o) {}

//@ public normal_behavior

//@ ensures s.contains(o) ==> s == s.add(o);

//@ ensures s.contains(o) ==> s.add(o).size() == s.size();

//@ model public static void addDoesNotChangeSize(locset s, location o) {}

//@ public normal_behavior

//@ ensures !s.contains(o) ==> locset.equals(s.add(o).remove(o), s);

//@ model public static void addRemove(locset s, location o) {}

//@ public normal_behavior

//@ ensures s.contains(o) ==> locset.equals(s.add(o), s);

//@ model public static void addNoChange(locset s, location o) {}

//@ public normal_behavior

//@ ensures !s.contains(o) ==> locset.equals(s, s.remove(o));

//@ model public static void addRemoveA(locset s, location o) {}

//@ public normal_behavior

//@ ensures s.contains(o) ==> s.remove(o).size() == s.size() - 1;

//@ model public static void addRemoveB(locset s, location o) {}

//@ ghost locset s = locset.locset();

//@ ghost locset ss = s;

//@ ghost \locset sss = s;

//@ assert s == ss;

//@ assert ss == sss;

//@ model import org.jmlspecs.lang.set;

//@ pure

//@ public normal_behavior

//@ ensures locset.locset().empty();

//@ model public static void newLocSetIsEmpty() {}

//@ public normal_behavior

//@ ensures locset.locset().add(o).size() == 1;

//@ model public static void singleton(location o) {}

//@ public normal_behavior

//@ ensures !s.contains(o) ==> s.add(o).size() == 1 + s.size();

//@ model public static void addBumpsSize(locset s, location o) {}

//@ public normal_behavior

//@ ensures s.contains(o) ==> s == s.add(o);

//@ ensures s.contains(o) ==> s.add(o).size() == s.size();

//@ model public static void addDoesNotChangeSize(locset s, location o) {}

//@ public normal_behavior

//@ ensures !s.contains(o) ==> locset.equals(s.add(o).remove(o), s);

//@ model public static void addRemove(locset s, location o) {}

//@ public normal_behavior

//@ ensures s.contains(o) ==> locset.equals(s.add(o), s);

//@ model public static void addNoChange(locset s, location o) {}

//@ public normal_behavior

//@ ensures !s.contains(o) ==> locset.equals(s, s.remove(o));

//@ model public static void addRemoveA(locset s, location o) {}

//@ public normal_behavior

//@ ensures s.contains(o) ==> s.remove(o).size() == s.size() - 1;

//@ model public static void addRemoveB(locset s, location o) {}

//@ ghost locset s = locset.locset();

//@ ghost locset ss = s;

//@ ghost \locset sss = s;

//@ assert s == ss;

//@ assert ss == sss;

//@ ghost array<Short> arx = args.array; // ERROR

//@ ghost array<Integer> ar = a.array; // OK

//@ ghost int kk = this.array;

//@ ghost array<Short> arx = args.array; // ERROR

//@ ghost array<Integer> ar = a.array; // OK

//@ ghost int kk = this.array;

//@ pure

//@ ensures map.<K,V>empty().isEmpty();

//@ ensures map.<K,V>empty().size() == 0;

//@ model public static <K,V> void newMapIsEmpty() {}

//@ ensures !s.containsKey(k) ==> s.put(k,v).size() == 1 + s.size();

//@ model public static <K,V> void putBumpsSize(map<K,V> s, K k, V v) {}

//@ ensures s.containsKey(k) ==> s.put(k,v).size() == s.size();

//@ model public static <K,V> void putDoesNotChangeSize(map<K,V> s, K k, V v) {}

//@ public normal_behavior

//@   requires !s.containsKey(k);

//@   requires k != kk;

//@   ensures !s.put(k,v).remove(k).containsKey(k);

//@   ensures s.size() == s.put(k,v).remove(k).size();

//@   ensures s.put(k,v).remove(k).containsKey(kk) == s.containsKey(kk);

//@   ensures map.equals(s, s.put(k,v).remove(k));

//@ model public static <K,V> void putRemove(map<K,V> s, K k, V v, K kk) {}

//@ public normal_behavior

//@   requires !s.containsKey(k);

//@   ensures !s.put(k,v).remove(k).containsKey(k);

//@   ensures s.size() == s.put(k,v).remove(k).size();

//@   ensures (\forall K kk; k != kk ; s.put(k,v).remove(k).containsKey(kk) == s.containsKey(kk));

//@   ensures map.equals(s, s.put(k,v).remove(k));

//@ model public static <K,V> void putRemoveA(map<K,V> s, K k, V v) {}

//@ public normal_behavior

//@   ensures s.keySet().contains(k) == s.containsKey(k);

//@ model public static <K,V> void keyset(map<K,V> s, K k) {}

//@ public normal_behavior

//@   ensures s.containsKey(k) ==> map.equals(s, s.put(k,s.get(k)));

//@ model public static <K,V> void putNoChange(map<K,V> s, K k) {}

//@ public normal_behavior

//@   ensures !s.containsKey(k) ==> (s == s.remove(k));

//@ model public static <K,V> void addRemove(map<K,V> s, K k) {}

//@ public normal_behavior

//@   ensures s.containsKey(o) ==> s.remove(o).size() == s.size() - 1;

//@ model public static <K,V> void addRemoveB(map<K,V> s, K o) {}

//@ pure

//@ ensures map.<K,V>empty().isEmpty();

//@ ensures map.<K,V>empty().size() == 0;

//@ model public static <K,V> void newMapIsEmpty() {}

//@ ensures !s.containsKey(k) ==> s.put(k,v).size() == 1 + s.size();

//@ model public static <K,V> void putBumpsSize(map<K,V> s, K k, V v) {}

//@ ensures s.containsKey(k) ==> s.put(k,v).size() == s.size();

//@ model public static <K,V> void putDoesNotChangeSize(map<K,V> s, K k, V v) {}

//@ public normal_behavior

//@   requires !s.containsKey(k);

//@   requires k != kk;

//@   ensures !s.put(k,v).remove(k).containsKey(k);

//@   ensures s.size() == s.put(k,v).remove(k).size();

//@   ensures s.put(k,v).remove(k).containsKey(kk) == s.containsKey(kk);

//@   ensures map.equals(s, s.put(k,v).remove(k));

//@ model public static <K,V> void putRemove(map<K,V> s, K k, V v, K kk) {}

//@ public normal_behavior

//@   requires !s.containsKey(k);

//@   ensures !s.put(k,v).remove(k).containsKey(k);

//@   ensures s.size() == s.put(k,v).remove(k).size();

//@   ensures (\forall K kk; k != kk ; s.put(k,v).remove(k).containsKey(kk) == s.containsKey(kk));

//@   ensures map.equals(s, s.put(k,v).remove(k));

//@ model public static <K,V> void putRemoveA(map<K,V> s, K k, V v) {}

//@ public normal_behavior

//@   ensures s.keySet().contains(k) == s.containsKey(k);

//@ model public static <K,V> void keyset(map<K,V> s, K k) {}

//@ public normal_behavior

//@   ensures s.containsKey(k) ==> map.equals(s, s.put(k,s.get(k)));

//@ model public static <K,V> void putNoChange(map<K,V> s, K k) {}

//@ public normal_behavior

//@   ensures !s.containsKey(k) ==> (s == s.remove(k));

//@ model public static <K,V> void addRemove(map<K,V> s, K k) {}

//@ public normal_behavior

//@   ensures s.containsKey(o) ==> s.remove(o).size() == s.size() - 1;

//@ model public static <K,V> void addRemoveB(map<K,V> s, K o) {}

//@ pure

//@ ensures seq.<T>empty().isEmpty();

//@ ensures seq.<T>empty().size() == 0;

//@ model public static <T> void newSeqIsEmpty() {}

//@ ensures s.add(k).size() == 1 + s.size();

//@ model public static <T> void addBumpsSize(seq<T> s, T k) {}

//@ requires 0 <= i && i <= s.size();

//@ ensures s.add(i,k).size() == 1 + s.size();

//@ model public static <T> void addBumpsSize(seq<T> s, T k, \bigint i) {}

//@ requires 0 <= k && k < s.size();

//@ ensures (\lbl RS s.remove(k).size()) == s.size() - 1;

//@ model public static <T> void removeLowersSize(seq<T> s, int k) { show s.size(), k; }

//@ public normal_behavior

//@   requires i >= 0 && i <= s.size();

//@   ensures seq.equals(s.add(i,t).remove(i), s);

//@ model public static <T> void addRemove(seq<T> s, T t, \bigint i) {}

//@ requires s.size() > 100;

/*@ model public void m(seq<\bigint> s) {
//        //@ ghost \bigint b1 = s.get(0);
//        //@ ghost \bigint b2 = s.get(0);
//        //@ assert b1 == b2;
//    }*/
//@ requires s.size() > 100;

/*@ model public void mm(seq<long> s) {
//        //@ ghost long b1 = s.get(0);
//        //@ ghost long b2 = s.get(0);
//        //@ assert b1 == b2;
//    }*/
//@ pure

//@ ensures seq.<T>empty().isEmpty();

//@ ensures seq.<T>empty().size() == 0;

//@ model public static <T> void newSeqIsEmpty() {}

//@ ensures s.add(k).size() == 1 + s.size();

//@ model public static <T> void addBumpsSize(seq<T> s, T k) {}

//@ requires 0 <= i && i <= s.size();

//@ ensures s.add(i,k).size() == 1 + s.size();

//@ model public static <T> void addBumpsSize(seq<T> s, T k, \bigint i) {}

//@ requires 0 <= k && k < s.size();

//@ ensures (\lbl RS s.remove(k).size()) == s.size() - 1;

//@ model public static <T> void removeLowersSize(seq<T> s, int k) { show s.size(), k; }

//@ public normal_behavior

//@   requires i >= 0 && i <= s.size();

//@   ensures seq.equals(s.add(i,t).remove(i), s);

//@ model public static <T> void addRemove(seq<T> s, T t, \bigint i) {}

//@ requires s.size() > 100;

/*@ model public void m(seq<\bigint> s) {
//        //@ ghost \bigint b1 = s.get(0);
//        //@ ghost \bigint b2 = s.get(0);
//        //@ assert b1 == b2;
//    }*/
//@ requires s.size() > 100;

/*@ model public void mm(seq<long> s) {
//        //@ ghost long b1 = s.get(0);
//        //@ ghost long b2 = s.get(0);
//        //@ assert b1 == b2;
//    }*/
//@ model import org.jmlspecs.lang.set;

//@ pure

//@ public normal_behavior

//@ ensures set.<T>set().empty();

//@ model public static <T> void newSetIsEmpty() {}

//@ public normal_behavior

//@ ensures set.<T>set().add(o).size() == 1;

//@ model public static <T> void singleton(T o) {}

//@ public normal_behavior

//@ ensures !s.contains(o) ==> s.add(o).size() == 1 + s.size();

//@ model public static <T> void addBumpsSize(set<T> s, T o) {}

//@ public normal_behavior

//@ ensures s.contains(o) ==> s.add(o).size() == s.size();

//@ model public static <T> void addDoesNotChangeSize(set<T> s, T o) {}

//@ public normal_behavior

//@ ensures !s.contains(o) ==> set.equals(s.add(o).remove(o), s);

//@ model public static <T> void addRemove(set<T> s, T o) {}

//@ public normal_behavior

//@ ensures s.contains(o) ==> set.equals(s.add(o), s);

//@ model public static <T> void addNoChange(set<T> s, T o) {}

//@ public normal_behavior

//@ ensures !s.contains(o) ==> set.equals(s, s.remove(o));

//@ model public static <T> void addRemoveA(set<T> s, T o) {}

//@ public normal_behavior

//@ ensures s.contains(o) ==> s.remove(o).size() == s.size() - 1;

//@ model public static <T> void addRemoveB(set<T> s, T o) {}

//@ model import org.jmlspecs.lang.set;

//@ pure

//@ public normal_behavior

//@ ensures set.<T>set().empty();

//@ model public static <T> void newSetIsEmpty() {}

//@ public normal_behavior

//@ ensures set.<T>set().add(o).size() == 1;

//@ model public static <T> void singleton(T o) {}

//@ public normal_behavior

//@ ensures !s.contains(o) ==> s.add(o).size() == 1 + s.size();

//@ model public static <T> void addBumpsSize(set<T> s, T o) {}

//@ public normal_behavior

//@ ensures s.contains(o) ==> s.add(o).size() == s.size();

//@ model public static <T> void addDoesNotChangeSize(set<T> s, T o) {}

//@ public normal_behavior

//@ ensures !s.contains(o) ==> set.equals(s.add(o).remove(o), s);

//@ model public static <T> void addRemove(set<T> s, T o) {}

//@ public normal_behavior

//@ ensures s.contains(o) ==> set.equals(s.add(o), s);

//@ model public static <T> void addNoChange(set<T> s, T o) {}

//@ public normal_behavior

//@ ensures !s.contains(o) ==> set.equals(s, s.remove(o));

//@ model public static <T> void addRemoveA(set<T> s, T o) {}

//@ public normal_behavior

//@ ensures s.contains(o) ==> s.remove(o).size() == s.size() - 1;

//@ model public static <T> void addRemoveB(set<T> s, T o) {}

_by_default

//@ public normal_behavior

//@   ensures \result == oo.length;

//@ pure

//@ public normal_behavior

//@   requires oo.length > 1;

//@   requires     onnullelements(oo);

//@   ensures \result == oo[0];

//@ pure

//@ assert p == o2;

//@ assert p == o2;

//@ assert p == o2;

//@ assert i == 0;

//@ assert i == 2;

_by_default

//@ public normal_behavior

//@   ensures \result == oo.length;

//@ pure

//@ public normal_behavior

//@   requires oo.length > 1;

//@   requires     onnullelements(oo);

//@   ensures \result == oo[0];

//@ pure

//@ assert p == o2;

//@ assert p == o2;

//@ assert p == o2;

//@ assert i == 0;

//@ assert i == 2;

//@ public normal_behavior

//@ assigns     othing;

//@ ensures \result.length <= a.length/2 + 2; // non-empty

//@ ensures \result[0] == 0 && \result[\result.length-1] == a.length; // begin-to-end

//@ ensures \forall int i; 0 <= i < \result.length; 0 <= \result[i] <= a.length; // within-bounds

//@ ensures \forall int i,j; 0 <= i < \result.length-1 && \result[i] <= j < \result[i+1] - 1; a[\result[i]] < a[\result[i]+1] <==> a[j] < a[j+1]; // monotonic

//@ ensures \forall int i; 0 <= i < \result.length-1; \result[i+1] < a.length ==> (a[\result[i]] < a[\result[i]+1] <=!=> a[\result[i+1]-1] < a[\result[i+1]]); // maximal

//@ ensures \forall int i; 0 <= i < \result.length-1; \result[i] > 0 ==> (a[\result[i]] < a[\result[i]+1] <=!=> a[\result[i]-1] < a[\result[i]]); // maximal

//@ loop_invariant 0 < lengthcut <= y/2+2;

//@ loop_invariant cut[0] == 0; // begin-to-end so far

//@ loop_invariant y == x+1; // initial conditions for modified variables

//@ loop_invariant x == cut[lengthcut-1]; // initial conditions for modified variables

//@ loop_invariant \forall int i; 0 <= i < lengthcut; 0 <= cut[i] <= y; // within bounds so far

//@ loop_invariant \forall int i,j; 0 <= i < lengthcut-1 && cut[i] <= j < cut[i+1] - 1; a[cut[i]] < a[cut[i]+1] <==> a[j] < a[j+1]; // monotonic so far

//@ loop_invariant \forall int i; 0 <= i < lengthcut-1; cut[i+1] < a.length ==> (a[cut[i]] < a[cut[i]+1] <=!=> a[cut[i+1]-1] < a[cut[i+1]]); // maximal so far

//@ loop_invariant \forall int i; 0 <= i < lengthcut-1; cut[i] > 0 ==> (a[cut[i]] < a[cut[i]+1] <=!=> a[cut[i]-1] < a[cut[i]]); // maximal so far

//@ loop_decreases n - y;

//@ loop_invariant x < y <= a.length;  // initial conditions for modified variables

//@ loop_invariant 0 < lengthcut <= y/2+2;

//@ loop_invariant cut[0] == 0; // begin-to-end so far

//@ loop_invariant x == cut[lengthcut-1];  // initial conditions for modified variables

//@ loop_invariant \forall int i; 0 <= i < lengthcut; 0 <= cut[i] <= y; // within bounds so far

//@ loop_invariant \forall int i,j; 0 <= i < lengthcut-1 && cut[i] <= j < cut[i+1] - 1; a[cut[i]] < a[cut[i]+1] <==> a[j] < a[j+1]; // monotonic so far

//@ loop_invariant \forall int j; x <= j < y-1; a[x] < a[x+1] <==> a[j] < a[j+1]; // last segment monotonic so far

//@ loop_invariant \forall int i; 0 <= i < lengthcut-1; cut[i+1] < a.length ==> (a[cut[i]] < a[cut[i]+1] <=!=> a[cut[i+1]-1] < a[cut[i+1]]); // maximal so far

//@ loop_invariant \forall int i; 0 <= i < lengthcut-1; cut[i] > 0 ==> (a[cut[i]] < a[cut[i]+1] <=!=> a[cut[i]-1] < a[cut[i]]); // maximal so far

//@ loop_invariant x > 0 ==> (a[x] < a[x+1] <=!=> a[x-1] < a[x]); // last segment maximal so far

//@ loop_decreases n - y;

//@ public normal_behavior

//@ assigns     othing;

//@ ensures \result.length <= a.length/2 + 2; // non-empty

//@ ensures \result[0] == 0 && \result[\result.length-1] == a.length; // begin-to-end

//@ ensures \forall int i; 0 <= i < \result.length; 0 <= \result[i] <= a.length; // within-bounds

//@ ensures \forall int i,j; 0 <= i < \result.length-1 && \result[i] <= j < \result[i+1] - 1; a[\result[i]] < a[\result[i]+1] <==> a[j] < a[j+1]; // monotonic

//@ ensures \forall int i; 0 <= i < \result.length-1; \result[i+1] < a.length ==> (a[\result[i]] < a[\result[i]+1] <=!=> a[\result[i+1]-1] < a[\result[i+1]]); // maximal

//@ ensures \forall int i; 0 <= i < \result.length-1; \result[i] > 0 ==> (a[\result[i]] < a[\result[i]+1] <=!=> a[\result[i]-1] < a[\result[i]]); // maximal

//@ loop_invariant 0 < lengthcut <= y/2+2;

//@ loop_invariant cut[0] == 0; // begin-to-end so far

//@ loop_invariant y == x+1; // initial conditions for modified variables

//@ loop_invariant x == cut[lengthcut-1]; // initial conditions for modified variables

//@ loop_invariant \forall int i; 0 <= i < lengthcut; 0 <= cut[i] <= y; // within bounds so far

//@ loop_invariant \forall int i,j; 0 <= i < lengthcut-1 && cut[i] <= j < cut[i+1] - 1; a[cut[i]] < a[cut[i]+1] <==> a[j] < a[j+1]; // monotonic so far

//@ loop_invariant \forall int i; 0 <= i < lengthcut-1; cut[i+1] < a.length ==> (a[cut[i]] < a[cut[i]+1] <=!=> a[cut[i+1]-1] < a[cut[i+1]]); // maximal so far

//@ loop_invariant \forall int i; 0 <= i < lengthcut-1; cut[i] > 0 ==> (a[cut[i]] < a[cut[i]+1] <=!=> a[cut[i]-1] < a[cut[i]]); // maximal so far

//@ loop_decreases n - y;

//@ loop_invariant x < y <= a.length;  // initial conditions for modified variables

//@ loop_invariant 0 < lengthcut <= y/2+2;

//@ loop_invariant cut[0] == 0; // begin-to-end so far

//@ loop_invariant x == cut[lengthcut-1];  // initial conditions for modified variables

//@ loop_invariant \forall int i; 0 <= i < lengthcut; 0 <= cut[i] <= y; // within bounds so far

//@ loop_invariant \forall int i,j; 0 <= i < lengthcut-1 && cut[i] <= j < cut[i+1] - 1; a[cut[i]] < a[cut[i]+1] <==> a[j] < a[j+1]; // monotonic so far

//@ loop_invariant \forall int j; x <= j < y-1; a[x] < a[x+1] <==> a[j] < a[j+1]; // last segment monotonic so far

//@ loop_invariant \forall int i; 0 <= i < lengthcut-1; cut[i+1] < a.length ==> (a[cut[i]] < a[cut[i]+1] <=!=> a[cut[i+1]-1] < a[cut[i+1]]); // maximal so far

//@ loop_invariant \forall int i; 0 <= i < lengthcut-1; cut[i] > 0 ==> (a[cut[i]] < a[cut[i]+1] <=!=> a[cut[i]-1] < a[cut[i]]); // maximal so far

//@ loop_invariant x > 0 ==> (a[x] < a[x+1] <=!=> a[x-1] < a[x]); // last segment maximal so far

//@ loop_decreases n - y;

//@ public normal_behavior

//@ assigns     othing;

//@ ensures \result.length == input.length;

//@ ensures \forall int i; 0 <= i < \result.length; \result[i] < i; // left-neighbor is to the left

//@ ensures \forall int i; 0 <= i < \result.length; \result[i] != -1 ==> input[\result[i]] < input[i]; // LN has smaller value

//@ ensures \forall int i; 0 <= i < \result.length; \forall int j; \result[i] < j < i; input[j] >= input[i]; // LN is closest smaller value

//@ loop_invariant 0 <= x <= input.length;

//@ loop_invariant 0 <= height <= x;

//@ loop_invariant \forall int i; 0 <= i < x; left[i] < i;  // so far, all left-neighbors are to the left

//@ loop_invariant \forall int i; 0 <= i < x; left[i] != -1 ==> input[left[i]] < input[i]; // so far, all LNs have smaller values

//@ loop_invariant \forall int i; 0 <= i < x; \forall int j; left[i] < j < i; input[j] >= input[i]; // so far, all LNs are closest smaller values

//@ loop_invariant \forall int i; 0 <= i < height; 0 <= stack[i] < x; // all stack values are legitimate positions

//@ loop_invariant x > 0 ==> height > 0;

//@ loop_invariant height > 0 ==> stack[height-1] == x-1; // x is always one more than top of stack (after the first iteration)

//@ loop_invariant \forall int i; 1 <= i < height; \forall int j; stack[i-1] < j < stack[i]; input[j] >= input[stack[i]]; // items missing from stack are larger than something to their right

//@ loop_invariant height > 0 ==> \forall int j; 0 <= j < stack[0]; input[j] >= input[stack[0]]; // items missing from the stack in the first segment are larger than stack[0]

//@ loop_decreases input.length - x;

//@ loop_invariant 0 <= height <= x;

//@ loop_invariant \forall int i; 0 <= i < x; left[i] < i;   // so far, all left-neighbors are to the left

//@ loop_invariant \forall int i; 0 <= i < height; 0 <= stack[i] < x;  // so far, all LNs have smaller values

//@ loop_invariant \forall int i; 1 <= i < height; \forall int j; stack[i-1] < j < stack[i]; input[j] >= input[stack[i]];  // so far, all LNs are closest smaller values

//@ loop_invariant height > 0 ==> \forall int j; stack[height-1] < j < x; input[j] >= input[x]; // Everything between top of stack and x is larger than va

//@ loop_invariant height == 0 ==> \forall int j; 0 <= j < x; input[j] >= input[x]; // If height is 0, everything to the left is smaller than value at current position

//@ loop_decreases height;

//@ public normal_behavior

//@ assigns     othing;

//@ ensures \result.length == input.length;

//@ ensures \forall int i; 0 <= i < \result.length; \result[i] < i; // left-neighbor is to the left

//@ ensures \forall int i; 0 <= i < \result.length; \result[i] != -1 ==> input[\result[i]] < input[i]; // LN has smaller value

//@ ensures \forall int i; 0 <= i < \result.length; \forall int j; \result[i] < j < i; input[j] >= input[i]; // LN is closest smaller value

//@ loop_invariant 0 <= x <= input.length;

//@ loop_invariant 0 <= height <= x;

//@ loop_invariant \forall int i; 0 <= i < x; left[i] < i;  // so far, all left-neighbors are to the left

//@ loop_invariant \forall int i; 0 <= i < x; left[i] != -1 ==> input[left[i]] < input[i]; // so far, all LNs have smaller values

//@ loop_invariant \forall int i; 0 <= i < x; \forall int j; left[i] < j < i; input[j] >= input[i]; // so far, all LNs are closest smaller values

//@ loop_invariant \forall int i; 0 <= i < height; 0 <= stack[i] < x; // all stack values are legitimate positions

//@ loop_invariant x > 0 ==> height > 0;

//@ loop_invariant height > 0 ==> stack[height-1] == x-1; // x is always one more than top of stack (after the first iteration)

//@ loop_invariant \forall int i; 1 <= i < height; \forall int j; stack[i-1] < j < stack[i]; input[j] >= input[stack[i]]; // items missing from stack are larger than something to their right

//@ loop_invariant height > 0 ==> \forall int j; 0 <= j < stack[0]; input[j] >= input[stack[0]]; // items missing from the stack in the first segment are larger than stack[0]

//@ loop_decreases input.length - x;

//@ loop_invariant 0 <= height <= x;

//@ loop_invariant \forall int i; 0 <= i < x; left[i] < i;   // so far, all left-neighbors are to the left

//@ loop_invariant \forall int i; 0 <= i < height; 0 <= stack[i] < x;  // so far, all LNs have smaller values

//@ loop_invariant \forall int i; 1 <= i < height; \forall int j; stack[i-1] < j < stack[i]; input[j] >= input[stack[i]];  // so far, all LNs are closest smaller values

//@ loop_invariant height > 0 ==> \forall int j; stack[height-1] < j < x; input[j] >= input[x]; // Everything between top of stack and x is larger than va

//@ loop_invariant height == 0 ==> \forall int j; 0 <= j < x; input[j] >= input[x]; // If height is 0, everything to the left is smaller than value at current position

//@ loop_decreases height;





/*@ nonnullelements */





/*@ nonnullelements */





/*@ nonnullelements */





/*@ nonnullelements */











/*@ spec_public */
//@ assume A.b;       }}"

/*@ spec_public */
/*@ spec_protected */
//@ assume A.b;       }}"

/*@ spec_protected */
/*@ spec_public spec_protected */
/*@ spec_public spec_public */
/*@ spec_protected spec_protected */
/*@ spec_public */
/*@ spec_public */
/*@ spec_protected */
/*@ spec_protected */
/*@ spec_public */
/*@ spec_public spec_protected */
/*@ spec_public spec_public */
/*@ spec_protected spec_protected */
/*@ spec_public */
/*@ spec_public */
/*@ spec_protected */
/*@ spec_protected */
/*@ spec_public */
/*@ spec_public spec_protected */
/*@ spec_public spec_public */
/*@ spec_protected spec_protected */
/*@ spec_public */
/*@ spec_public */
/*@ spec_protected */
/*@ spec_protected */
/*@ spec_public */
/*@ spec_public */
//@ assume A.b;       }}"

/*@ spec_public */
/*@ spec_protected */
//@ assume A.b;       }}"

/*@ spec_protected */
/*@ spec_public spec_protected */
/*@ spec_public spec_public */
/*@ spec_protected spec_protected */
/*@ spec_public */
/*@ spec_public */
/*@ spec_protected */
/*@ spec_protected */
/*@ spec_public */
/*@ spec_public spec_protected */
/*@ spec_public spec_public */
/*@ spec_protected spec_protected */
/*@ spec_public */
/*@ spec_public */
/*@ spec_protected */
/*@ spec_protected */
/*@ spec_public */
/*@ spec_public spec_protected */
/*@ spec_public spec_public */
/*@ spec_protected spec_protected */
/*@ spec_public */
/*@ spec_public */
/*@ spec_protected */
/*@ spec_protected */
/*@ spec_public */
/*@ spec_public */
//@ assume A.b;       }}"

/*@ spec_public */
/*@ spec_protected */
//@ assume A.b;       }}"

/*@ spec_protected */
/*@ spec_public spec_protected */
/*@ spec_public spec_public */
/*@ spec_protected spec_protected */
/*@ spec_public */
/*@ spec_public */
/*@ spec_protected */
/*@ spec_protected */
/*@ spec_public */
/*@ spec_public spec_protected */
/*@ spec_public spec_public */
/*@ spec_protected spec_protected */
/*@ spec_public */
/*@ spec_public */
/*@ spec_protected */
/*@ spec_protected */
/*@ spec_public */
/*@ spec_public spec_protected */
/*@ spec_public spec_public */
/*@ spec_protected spec_protected */
/*@ spec_public */
/*@ spec_public */
/*@ spec_protected */
/*@ spec_protected */
/*@ spec_public */
/*@ spec_public */
//@ assume A.b;       }}"

/*@ spec_public */
/*@ spec_protected */
//@ assume A.b;       }}"

/*@ spec_protected */
/*@ spec_public spec_protected */
/*@ spec_public spec_public */
/*@ spec_protected spec_protected */
/*@ spec_public */
/*@ spec_public */
/*@ spec_protected */
/*@ spec_protected */
/*@ spec_public */
/*@ spec_public spec_protected */
/*@ spec_public spec_public */
/*@ spec_protected spec_protected */
/*@ spec_public */
/*@ spec_public */
/*@ spec_protected */
/*@ spec_protected */
/*@ spec_public */
/*@ spec_public spec_protected */
/*@ spec_public spec_public */
/*@ spec_protected spec_protected */
/*@ spec_public */
/*@ spec_public */
/*@ spec_protected */
/*@ spec_protected */
/*@ spec_public */
/*@ spec_public */
//@ assume A.b;       }}"

/*@ spec_public */
/*@ spec_protected */
//@ assume A.b;       }}"

/*@ spec_protected */
/*@ spec_public spec_protected */
/*@ spec_public spec_public */
/*@ spec_protected spec_protected */
/*@ spec_public */
/*@ spec_public */
/*@ spec_protected */
/*@ spec_protected */
/*@ spec_public */
/*@ spec_public spec_protected */
/*@ spec_public spec_public */
/*@ spec_protected spec_protected */
/*@ spec_public */
/*@ spec_public */
/*@ spec_protected */
/*@ spec_protected */
/*@ spec_public */
/*@ spec_public spec_protected */
/*@ spec_public spec_public */
/*@ spec_protected spec_protected */
/*@ spec_public */
/*@ spec_public */
/*@ spec_protected */
/*@ spec_protected */
/*@ spec_public */
/*@ ghost */
/*@ ghost */
/*@ ghost */
/*@ ghost */
/*@ ensures X;*/
/*@ requires Z; ensures Y;*/
/*@ ensures X;*/
/*@ requires Z; ensures Y;*/
/*@ ensures true;*/
//@ ghost int i=0;     }";

//@ ghost int i=0;     }";

//@ ensures \\forall int i; i > 0; i < 0;     void m(){}}";

/*@"+Strings.eol+"      ensures \\forall int i; i > 0; i < 0; "+Strings.eol+"   */
/*@ assert i < 10;*/
/*@ assert i < 10;*/
/*@ assert i >= 0;*/
/*@ requires i > 0;*/
/*@ ghost */
/*@ ghost */
/*@ ghost */
/*@ ghost */
/*@ ensures X;*/
/*@ requires Z; ensures Y;*/
/*@ ensures X;*/
/*@ requires Z; ensures Y;*/
/*@ ensures true;*/
//@ ghost int i=0;     }";

//@ ghost int i=0;     }";

//@ ensures \\forall int i; i > 0; i < 0;     void m(){}}";

/*@"+Strings.eol+"      ensures \\forall int i; i > 0; i < 0; "+Strings.eol+"   */
/*@ assert i < 10;*/
/*@ assert i < 10;*/
/*@ assert i >= 0;*/
/*@ requires i > 0;*/
/*@ ghost */
/*@ ghost */
/*@ ghost */
/*@ ghost */
/*@ ensures X;*/
/*@ requires Z; ensures Y;*/
/*@ ensures X;*/
/*@ requires Z; ensures Y;*/
/*@ ensures true;*/
//@ ghost int i=0;     }";

//@ ghost int i=0;     }";

//@ ensures \\forall int i; i > 0; i < 0;     void m(){}}";

/*@"+Strings.eol+"      ensures \\forall int i; i > 0; i < 0; "+Strings.eol+"   */
/*@ assert i < 10;*/
/*@ assert i < 10;*/
/*@ assert i >= 0;*/
/*@ requires i > 0;*/
/*@ ghost */
/*@ ghost */
/*@ ghost */
/*@ ghost */
/*@ ensures X;*/
/*@ requires Z; ensures Y;*/
/*@ ensures X;*/
/*@ requires Z; ensures Y;*/
/*@ ensures true;*/
//@ ghost int i=0;     }";

//@ ghost int i=0;     }";

//@ ensures \\forall int i; i > 0; i < 0;     void m(){}}";

/*@"+Strings.eol+"      ensures \\forall int i; i > 0; i < 0; "+Strings.eol+"   */
/*@ assert i < 10;*/
/*@ assert i < 10;*/
/*@ assert i >= 0;*/
/*@ requires i > 0;*/
/*@ ghost */
/*@ ghost */
/*@ ghost */
/*@ ghost */
/*@ ensures X;*/
/*@ requires Z; ensures Y;*/
/*@ ensures X;*/
/*@ requires Z; ensures Y;*/
/*@ ensures true;*/
//@ ghost int i=0;     }";

//@ ghost int i=0;     }";

//@ ensures \\forall int i; i > 0; i < 0;     void m(){}}";

/*@"+Strings.eol+"      ensures \\forall int i; i > 0; i < 0; "+Strings.eol+"   */
/*@ assert i < 10;*/
/*@ assert i < 10;*/
/*@ assert i >= 0;*/
/*@ requires i > 0;*/
//@ assignable \    othing;     void m(){} }");

//@ assignable \\everything;     void m(){} }");

//@ assignable k;     void m(){} }");

//@ assignable m;     void m(){} 

//@ assignable A.k;     void m(){} }"

//@ assignable o.*;     void m(){} }");

//@ assignable bb.p;     void m(){} }");

//@ assignable bb.*;     void m(){} }");

//@ assignable A.*;     void m(){} }");

//@ assignable k[0],k[*],k[2 .. 3], k[3 ..], k[3 .. *];     void m(){} }");

//@ assignable k[2.. 3], k[3..], k[3.. *];     void m(){} }");

//@ assignable o[0],o[*],o[2 .. 3], o[3 ..], o[3 .. *];     void m(){} }");

//@ assignable o[2.. 3], o[3..], o[3.. *];     void m(){} }");

//@ assignable o[(i-1)..(i+1)], o[(i+1)..], o[(i+1).. *];     void m(int i){} }");

//@ assignable o[2..3], o[2..*];     void m(){} }");

//@ assignable k[true],k[true .. false], k[false ..], k[false .. *];     void m() {} }"

//@ assignable k[b];     void m(boolean b) {} }"

//@ assignable this.k, this.*;     void m(boolean b) {} }"

//@ assignable this.x;     void m(boolean b) {} }"

//@ assignable super.kk, super.*;     void m(boolean b) {} }  class B{ int kk; }"

//@ assignable super.b, super.x;     void m(boolean b) {} }  class B{ int kk; }"

//@ assignable this, super;     void m(boolean b) {} }"

//@ assignable k[, k[*, k[i, k[], b., this., super.;     void m(boolean b) {} }"

//@ assignable super.;     void m(boolean b) {} }"

//@ assignable this.;     void m(boolean b) {} }"

//@ assignable super;     void m(boolean b) {} }"

//@ assignable this;     void m(boolean b) {} }"

//@ assignable k b, this.;     void m(boolean b) {} }"

//@ assignable ;     void m(boolean b) {} }"

//@ assignable .;     void m(boolean b) {} }"

//@ assignable k[*], this.*.x;     void m(boolean b) {} }"

//@ assignable o[*].kk;     void m(boolean b) {} }  class B{ int kk; }"

//@ assignable o     void m(boolean b) {} }  class B{ int kk; }"

//@ assignable j;    "

//@ assignable \\everything;    "

//@ assignable \    othing;    "

//@ assignable \\everything;    "

//@ assignable \\everything;    "

//@ requires true;     " // default assignable

//@ assignable \\everything;    "

//@ accessible k;     void m(){} }");

//@ accessible m;     void m(){} 

//@ captures k;     void m(){} }");

//@ captures m;     void m(){} 

//@ assignable \    othing;     void m(){} }");

//@ assignable \\everything;     void m(){} }");

//@ assignable k;     void m(){} }");

//@ assignable m;     void m(){} 

//@ assignable A.k;     void m(){} }"

//@ assignable o.*;     void m(){} }");

//@ assignable bb.p;     void m(){} }");

//@ assignable bb.*;     void m(){} }");

//@ assignable A.*;     void m(){} }");

//@ assignable k[0],k[*],k[2 .. 3], k[3 ..], k[3 .. *];     void m(){} }");

//@ assignable k[2.. 3], k[3..], k[3.. *];     void m(){} }");

//@ assignable o[0],o[*],o[2 .. 3], o[3 ..], o[3 .. *];     void m(){} }");

//@ assignable o[2.. 3], o[3..], o[3.. *];     void m(){} }");

//@ assignable o[(i-1)..(i+1)], o[(i+1)..], o[(i+1).. *];     void m(int i){} }");

//@ assignable o[2..3], o[2..*];     void m(){} }");

//@ assignable k[true],k[true .. false], k[false ..], k[false .. *];     void m() {} }"

//@ assignable k[b];     void m(boolean b) {} }"

//@ assignable this.k, this.*;     void m(boolean b) {} }"

//@ assignable this.x;     void m(boolean b) {} }"

//@ assignable super.kk, super.*;     void m(boolean b) {} }  class B{ int kk; }"

//@ assignable super.b, super.x;     void m(boolean b) {} }  class B{ int kk; }"

//@ assignable this, super;     void m(boolean b) {} }"

//@ assignable k[, k[*, k[i, k[], b., this., super.;     void m(boolean b) {} }"

//@ assignable super.;     void m(boolean b) {} }"

//@ assignable this.;     void m(boolean b) {} }"

//@ assignable super;     void m(boolean b) {} }"

//@ assignable this;     void m(boolean b) {} }"

//@ assignable k b, this.;     void m(boolean b) {} }"

//@ assignable ;     void m(boolean b) {} }"

//@ assignable .;     void m(boolean b) {} }"

//@ assignable k[*], this.*.x;     void m(boolean b) {} }"

//@ assignable o[*].kk;     void m(boolean b) {} }  class B{ int kk; }"

//@ assignable o     void m(boolean b) {} }  class B{ int kk; }"

//@ assignable j;    "

//@ assignable \\everything;    "

//@ assignable \    othing;    "

//@ assignable \\everything;    "

//@ assignable \\everything;    "

//@ requires true;     " // default assignable

//@ assignable \\everything;    "

//@ accessible k;     void m(){} }");

//@ accessible m;     void m(){} 

//@ captures k;     void m(){} }");

//@ captures m;     void m(){} 

//@ assignable \    othing;     void m(){} }");

//@ assignable \\everything;     void m(){} }");

//@ assignable k;     void m(){} }");

//@ assignable m;     void m(){} 

//@ assignable A.k;     void m(){} }"

//@ assignable o.*;     void m(){} }");

//@ assignable bb.p;     void m(){} }");

//@ assignable bb.*;     void m(){} }");

//@ assignable A.*;     void m(){} }");

//@ assignable k[0],k[*],k[2 .. 3], k[3 ..], k[3 .. *];     void m(){} }");

//@ assignable k[2.. 3], k[3..], k[3.. *];     void m(){} }");

//@ assignable o[0],o[*],o[2 .. 3], o[3 ..], o[3 .. *];     void m(){} }");

//@ assignable o[2.. 3], o[3..], o[3.. *];     void m(){} }");

//@ assignable o[(i-1)..(i+1)], o[(i+1)..], o[(i+1).. *];     void m(int i){} }");

//@ assignable o[2..3], o[2..*];     void m(){} }");

//@ assignable k[true],k[true .. false], k[false ..], k[false .. *];     void m() {} }"

//@ assignable k[b];     void m(boolean b) {} }"

//@ assignable this.k, this.*;     void m(boolean b) {} }"

//@ assignable this.x;     void m(boolean b) {} }"

//@ assignable super.kk, super.*;     void m(boolean b) {} }  class B{ int kk; }"

//@ assignable super.b, super.x;     void m(boolean b) {} }  class B{ int kk; }"

//@ assignable this, super;     void m(boolean b) {} }"

//@ assignable k[, k[*, k[i, k[], b., this., super.;     void m(boolean b) {} }"

//@ assignable super.;     void m(boolean b) {} }"

//@ assignable this.;     void m(boolean b) {} }"

//@ assignable super;     void m(boolean b) {} }"

//@ assignable this;     void m(boolean b) {} }"

//@ assignable k b, this.;     void m(boolean b) {} }"

//@ assignable ;     void m(boolean b) {} }"

//@ assignable .;     void m(boolean b) {} }"

//@ assignable k[*], this.*.x;     void m(boolean b) {} }"

//@ assignable o[*].kk;     void m(boolean b) {} }  class B{ int kk; }"

//@ assignable o     void m(boolean b) {} }  class B{ int kk; }"

//@ assignable j;    "

//@ assignable \\everything;    "

//@ assignable \    othing;    "

//@ assignable \\everything;    "

//@ assignable \\everything;    "

//@ requires true;     " // default assignable

//@ assignable \\everything;    "

//@ accessible k;     void m(){} }");

//@ accessible m;     void m(){} 

//@ captures k;     void m(){} }");

//@ captures m;     void m(){} 

//@ assignable \    othing;     void m(){} }");

//@ assignable \\everything;     void m(){} }");

//@ assignable k;     void m(){} }");

//@ assignable m;     void m(){} 

//@ assignable A.k;     void m(){} }"

//@ assignable o.*;     void m(){} }");

//@ assignable bb.p;     void m(){} }");

//@ assignable bb.*;     void m(){} }");

//@ assignable A.*;     void m(){} }");

//@ assignable k[0],k[*],k[2 .. 3], k[3 ..], k[3 .. *];     void m(){} }");

//@ assignable k[2.. 3], k[3..], k[3.. *];     void m(){} }");

//@ assignable o[0],o[*],o[2 .. 3], o[3 ..], o[3 .. *];     void m(){} }");

//@ assignable o[2.. 3], o[3..], o[3.. *];     void m(){} }");

//@ assignable o[(i-1)..(i+1)], o[(i+1)..], o[(i+1).. *];     void m(int i){} }");

//@ assignable o[2..3], o[2..*];     void m(){} }");

//@ assignable k[true],k[true .. false], k[false ..], k[false .. *];     void m() {} }"

//@ assignable k[b];     void m(boolean b) {} }"

//@ assignable this.k, this.*;     void m(boolean b) {} }"

//@ assignable this.x;     void m(boolean b) {} }"

//@ assignable super.kk, super.*;     void m(boolean b) {} }  class B{ int kk; }"

//@ assignable super.b, super.x;     void m(boolean b) {} }  class B{ int kk; }"

//@ assignable this, super;     void m(boolean b) {} }"

//@ assignable k[, k[*, k[i, k[], b., this., super.;     void m(boolean b) {} }"

//@ assignable super.;     void m(boolean b) {} }"

//@ assignable this.;     void m(boolean b) {} }"

//@ assignable super;     void m(boolean b) {} }"

//@ assignable this;     void m(boolean b) {} }"

//@ assignable k b, this.;     void m(boolean b) {} }"

//@ assignable ;     void m(boolean b) {} }"

//@ assignable .;     void m(boolean b) {} }"

//@ assignable k[*], this.*.x;     void m(boolean b) {} }"

//@ assignable o[*].kk;     void m(boolean b) {} }  class B{ int kk; }"

//@ assignable o     void m(boolean b) {} }  class B{ int kk; }"

//@ assignable j;    "

//@ assignable \\everything;    "

//@ assignable \    othing;    "

//@ assignable \\everything;    "

//@ assignable \\everything;    "

//@ requires true;     " // default assignable

//@ assignable \\everything;    "

//@ accessible k;     void m(){} }");

//@ accessible m;     void m(){} 

//@ captures k;     void m(){} }");

//@ captures m;     void m(){} 

//@ assignable \    othing;     void m(){} }");

//@ assignable \\everything;     void m(){} }");

//@ assignable k;     void m(){} }");

//@ assignable m;     void m(){} 

//@ assignable A.k;     void m(){} }"

//@ assignable o.*;     void m(){} }");

//@ assignable bb.p;     void m(){} }");

//@ assignable bb.*;     void m(){} }");

//@ assignable A.*;     void m(){} }");

//@ assignable k[0],k[*],k[2 .. 3], k[3 ..], k[3 .. *];     void m(){} }");

//@ assignable k[2.. 3], k[3..], k[3.. *];     void m(){} }");

//@ assignable o[0],o[*],o[2 .. 3], o[3 ..], o[3 .. *];     void m(){} }");

//@ assignable o[2.. 3], o[3..], o[3.. *];     void m(){} }");

//@ assignable o[(i-1)..(i+1)], o[(i+1)..], o[(i+1).. *];     void m(int i){} }");

//@ assignable o[2..3], o[2..*];     void m(){} }");

//@ assignable k[true],k[true .. false], k[false ..], k[false .. *];     void m() {} }"

//@ assignable k[b];     void m(boolean b) {} }"

//@ assignable this.k, this.*;     void m(boolean b) {} }"

//@ assignable this.x;     void m(boolean b) {} }"

//@ assignable super.kk, super.*;     void m(boolean b) {} }  class B{ int kk; }"

//@ assignable super.b, super.x;     void m(boolean b) {} }  class B{ int kk; }"

//@ assignable this, super;     void m(boolean b) {} }"

//@ assignable k[, k[*, k[i, k[], b., this., super.;     void m(boolean b) {} }"

//@ assignable super.;     void m(boolean b) {} }"

//@ assignable this.;     void m(boolean b) {} }"

//@ assignable super;     void m(boolean b) {} }"

//@ assignable this;     void m(boolean b) {} }"

//@ assignable k b, this.;     void m(boolean b) {} }"

//@ assignable ;     void m(boolean b) {} }"

//@ assignable .;     void m(boolean b) {} }"

//@ assignable k[*], this.*.x;     void m(boolean b) {} }"

//@ assignable o[*].kk;     void m(boolean b) {} }  class B{ int kk; }"

//@ assignable o     void m(boolean b) {} }  class B{ int kk; }"

//@ assignable j;    "

//@ assignable \\everything;    "

//@ assignable \    othing;    "

//@ assignable \\everything;    "

//@ assignable \\everything;    "

//@ requires true;     " // default assignable

//@ assignable \\everything;    "

//@ accessible k;     void m(){} }");

//@ accessible m;     void m(){} 

//@ captures k;     void m(){} }");

//@ captures m;     void m(){} 

//@ model class VVV{}     public class File implements Serializable, Comparable<File> {     //@model static public class TTT {}      }");

//@ model class VVV{ static int i; }    " +

//@model static class TTT { static int j; } " +

//@ model class VVV{ static int i; }    " +

/*@ assert true; assume true; */
//@model static class TTT { static int j; } " +

//@ model class VVV{ public static int i; }    " +

/*@ public invariant VVV.i; public invariant TTT.j; */
//@model static class TTT { public static int j; }     " +

/*@ assert java.io.VVV.i; assume java.io.File.TTT.j; */
//@ ghost static public int k;     " +

/*@ assert java.io.File.j; assume java.io.File.k; */
//@ model class VVV{}     public class File implements Serializable, Comparable<File> {     //@model static public class TTT {}      }");

//@ model class VVV{ static int i; }    " +

//@model static class TTT { static int j; } " +

//@ model class VVV{ static int i; }    " +

/*@ assert true; assume true; */
//@model static class TTT { static int j; } " +

//@ model class VVV{ public static int i; }    " +

/*@ public invariant VVV.i; public invariant TTT.j; */
//@model static class TTT { public static int j; }     " +

/*@ assert java.io.VVV.i; assume java.io.File.TTT.j; */
//@ ghost static public int k;     " +

/*@ assert java.io.File.j; assume java.io.File.k; */
//@ model class VVV{}     public class File implements Serializable, Comparable<File> {     //@model static public class TTT {}      }");

//@ model class VVV{ static int i; }    " +

//@model static class TTT { static int j; } " +

//@ model class VVV{ static int i; }    " +

/*@ assert true; assume true; */
//@model static class TTT { static int j; } " +

//@ model class VVV{ public static int i; }    " +

/*@ public invariant VVV.i; public invariant TTT.j; */
//@model static class TTT { public static int j; }     " +

/*@ assert java.io.VVV.i; assume java.io.File.TTT.j; */
//@ ghost static public int k;     " +

/*@ assert java.io.File.j; assume java.io.File.k; */
//@ model class VVV{}     public class File implements Serializable, Comparable<File> {     //@model static public class TTT {}      }");

//@ model class VVV{ static int i; }    " +

//@model static class TTT { static int j; } " +

//@ model class VVV{ static int i; }    " +

/*@ assert true; assume true; */
//@model static class TTT { static int j; } " +

//@ model class VVV{ public static int i; }    " +

/*@ public invariant VVV.i; public invariant TTT.j; */
//@model static class TTT { public static int j; }     " +

/*@ assert java.io.VVV.i; assume java.io.File.TTT.j; */
//@ ghost static public int k;     " +

/*@ assert java.io.File.j; assume java.io.File.k; */
//@ model class VVV{}     public class File implements Serializable, Comparable<File> {     //@model static public class TTT {}      }");

//@ model class VVV{ static int i; }    " +

//@model static class TTT { static int j; } " +

//@ model class VVV{ static int i; }    " +

/*@ assert true; assume true; */
//@model static class TTT { static int j; } " +

//@ model class VVV{ public static int i; }    " +

/*@ public invariant VVV.i; public invariant TTT.j; */
//@model static class TTT { public static int j; }     " +

/*@ assert java.io.VVV.i; assume java.io.File.TTT.j; */
//@ ghost static public int k;     " +

/*@ assert java.io.File.j; assume java.io.File.k; */
//@ ensures \\result[1].equals(b(c));      Object[] m(int j) { return null; } String N; StringBuffer a; int[] q; }"

//@ ensures equals(\\result.equals(b).c(p(0)));      Object m(int j) { return null; } String b; StringBuffer a; int[] q; /*@pure*/int p(int i) { return 0; }}"

/*@ set a = null; set a = null; */
//@ requires '\\t' != '\    ';      void p() {  }}"

//@ requires \"\\tA\\\\B\" != null;      void p() {  }}"

//@ requires true ==> false <== true;      void p() {  }}"

//@ ensures \\typeof(this) == \\type(A);      void p();}"

//@ instance ghost int i;      } class B implements A { void p(A a) { //@ set a.i = 0;     }}"

/*@ spec_public */
//@ public invariant pending.elementCount == 0;     } "

//@ ensures \\old(a) == null;       abstract void m(A a);      } "

//@ signals (Exception) true; signals (Exception) true;       void m(A a) {}      } "

//@ signals (Exception e) true; signals (Exception e) true;       void m(A a) {}      } "

//@ public model void m();           } class B implements A {}"

//@ in j; model int j;     } "

//@ ghost int i = j; ghost int j = 0;     } "

/*@ public non_null */
//@ invariant mm() && \type(Short) <: \type(java.lang.Long);    "

/*@ pure */
/*@ pure */
//@ public invariant m(java.lang.Long.TYPE) && m(java.lang.Long);    "

/*@ pure */
//@ ensures \\result[1].equals(b(c));      Object[] m(int j) { return null; } String N; StringBuffer a; int[] q; }"

//@ ensures equals(\\result.equals(b).c(p(0)));      Object m(int j) { return null; } String b; StringBuffer a; int[] q; /*@pure*/int p(int i) { return 0; }}"

/*@ set a = null; set a = null; */
//@ requires '\\t' != '\    ';      void p() {  }}"

//@ requires \"\\tA\\\\B\" != null;      void p() {  }}"

//@ requires true ==> false <== true;      void p() {  }}"

//@ ensures \\typeof(this) == \\type(A);      void p();}"

//@ instance ghost int i;      } class B implements A { void p(A a) { //@ set a.i = 0;     }}"

/*@ spec_public */
//@ public invariant pending.elementCount == 0;     } "

//@ ensures \\old(a) == null;       abstract void m(A a);      } "

//@ signals (Exception) true; signals (Exception) true;       void m(A a) {}      } "

//@ signals (Exception e) true; signals (Exception e) true;       void m(A a) {}      } "

//@ public model void m();           } class B implements A {}"

//@ in j; model int j;     } "

//@ ghost int i = j; ghost int j = 0;     } "

/*@ public non_null */
//@ invariant mm() && \type(Short) <: \type(java.lang.Long);    "

/*@ pure */
/*@ pure */
//@ public invariant m(java.lang.Long.TYPE) && m(java.lang.Long);    "

/*@ pure */
//@ ensures \\result[1].equals(b(c));      Object[] m(int j) { return null; } String N; StringBuffer a; int[] q; }"

//@ ensures equals(\\result.equals(b).c(p(0)));      Object m(int j) { return null; } String b; StringBuffer a; int[] q; /*@pure*/int p(int i) { return 0; }}"

/*@ set a = null; set a = null; */
//@ requires '\\t' != '\    ';      void p() {  }}"

//@ requires \"\\tA\\\\B\" != null;      void p() {  }}"

//@ requires true ==> false <== true;      void p() {  }}"

//@ ensures \\typeof(this) == \\type(A);      void p();}"

//@ instance ghost int i;      } class B implements A { void p(A a) { //@ set a.i = 0;     }}"

/*@ spec_public */
//@ public invariant pending.elementCount == 0;     } "

//@ ensures \\old(a) == null;       abstract void m(A a);      } "

//@ signals (Exception) true; signals (Exception) true;       void m(A a) {}      } "

//@ signals (Exception e) true; signals (Exception e) true;       void m(A a) {}      } "

//@ public model void m();           } class B implements A {}"

//@ in j; model int j;     } "

//@ ghost int i = j; ghost int j = 0;     } "

/*@ public non_null */
//@ invariant mm() && \type(Short) <: \type(java.lang.Long);    "

/*@ pure */
/*@ pure */
//@ public invariant m(java.lang.Long.TYPE) && m(java.lang.Long);    "

/*@ pure */
//@ ensures \\result[1].equals(b(c));      Object[] m(int j) { return null; } String N; StringBuffer a; int[] q; }"

//@ ensures equals(\\result.equals(b).c(p(0)));      Object m(int j) { return null; } String b; StringBuffer a; int[] q; /*@pure*/int p(int i) { return 0; }}"

/*@ set a = null; set a = null; */
//@ requires '\\t' != '\    ';      void p() {  }}"

//@ requires \"\\tA\\\\B\" != null;      void p() {  }}"

//@ requires true ==> false <== true;      void p() {  }}"

//@ ensures \\typeof(this) == \\type(A);      void p();}"

//@ instance ghost int i;      } class B implements A { void p(A a) { //@ set a.i = 0;     }}"

/*@ spec_public */
//@ public invariant pending.elementCount == 0;     } "

//@ ensures \\old(a) == null;       abstract void m(A a);      } "

//@ signals (Exception) true; signals (Exception) true;       void m(A a) {}      } "

//@ signals (Exception e) true; signals (Exception e) true;       void m(A a) {}      } "

//@ public model void m();           } class B implements A {}"

//@ in j; model int j;     } "

//@ ghost int i = j; ghost int j = 0;     } "

/*@ public non_null */
//@ invariant mm() && \type(Short) <: \type(java.lang.Long);    "

/*@ pure */
/*@ pure */
//@ public invariant m(java.lang.Long.TYPE) && m(java.lang.Long);    "

/*@ pure */
//@ ensures \\result[1].equals(b(c));      Object[] m(int j) { return null; } String N; StringBuffer a; int[] q; }"

//@ ensures equals(\\result.equals(b).c(p(0)));      Object m(int j) { return null; } String b; StringBuffer a; int[] q; /*@pure*/int p(int i) { return 0; }}"

/*@ set a = null; set a = null; */
//@ requires '\\t' != '\    ';      void p() {  }}"

//@ requires \"\\tA\\\\B\" != null;      void p() {  }}"

//@ requires true ==> false <== true;      void p() {  }}"

//@ ensures \\typeof(this) == \\type(A);      void p();}"

//@ instance ghost int i;      } class B implements A { void p(A a) { //@ set a.i = 0;     }}"

/*@ spec_public */
//@ public invariant pending.elementCount == 0;     } "

//@ ensures \\old(a) == null;       abstract void m(A a);      } "

//@ signals (Exception) true; signals (Exception) true;       void m(A a) {}      } "

//@ signals (Exception e) true; signals (Exception e) true;       void m(A a) {}      } "

//@ public model void m();           } class B implements A {}"

//@ in j; model int j;     } "

//@ ghost int i = j; ghost int j = 0;     } "

/*@ public non_null */
//@ invariant mm() && \type(Short) <: \type(java.lang.Long);    "

/*@ pure */
/*@ pure */
//@ public invariant m(java.lang.Long.TYPE) && m(java.lang.Long);    "

/*@ pure */
/*@ refines \"A.xxx\"; */
/*@ pure */
/*@ refining requires true; ensures true; */
/*@        recommends true else NullPointerException; ensures true; */
/*@ requires true; requires \    ot_specified; */
/*@ ensures  true; ensures  \    ot_specified; */
/*@ callable \    othing   ; */
/*@ callable \\everything; */
/*@ refines \"A.xxx\"; */
/*@ pure */
/*@ refining requires true; ensures true; */
/*@        recommends true else NullPointerException; ensures true; */
/*@ requires true; requires \    ot_specified; */
/*@ ensures  true; ensures  \    ot_specified; */
/*@ callable \    othing   ; */
/*@ callable \\everything; */
/*@ refines \"A.xxx\"; */
/*@ pure */
/*@ refining requires true; ensures true; */
/*@        recommends true else NullPointerException; ensures true; */
/*@ requires true; requires \    ot_specified; */
/*@ ensures  true; ensures  \    ot_specified; */
/*@ callable \    othing   ; */
/*@ callable \\everything; */
/*@ refines \"A.xxx\"; */
/*@ pure */
/*@ refining requires true; ensures true; */
/*@        recommends true else NullPointerException; ensures true; */
/*@ requires true; requires \    ot_specified; */
/*@ ensures  true; ensures  \    ot_specified; */
/*@ callable \    othing   ; */
/*@ callable \\everything; */
/*@ refines \"A.xxx\"; */
/*@ pure */
/*@ refining requires true; ensures true; */
/*@        recommends true else NullPointerException; ensures true; */
/*@ requires true; requires \    ot_specified; */
/*@ ensures  true; ensures  \    ot_specified; */
/*@ callable \    othing   ; */
/*@ callable \\everything; */
//@ loop_invariant i == /count && 0 <= i <= values.length;    "

//@Test  // FIXME - try running the build programmatically

//@ ghost int i = true; // Error to provoke a message" + eol

//@ loop_invariant i == /count && 0 <= i <= values.length;    "

//@ loop_invariant i == /count && 0 <= i <= values.length;    "

//@Test  // FIXME - try running the build programmatically

//@ ghost int i = true; // Error to provoke a message" + eol

//@ loop_invariant i == /count && 0 <= i <= values.length;    "

//@ loop_invariant i == /count && 0 <= i <= values.length;    "

//@Test  // FIXME - try running the build programmatically

//@ ghost int i = true; // Error to provoke a message" + eol

//@ loop_invariant i == /count && 0 <= i <= values.length;    "

//@ loop_invariant i == /count && 0 <= i <= values.length;    "

//@Test  // FIXME - try running the build programmatically

//@ ghost int i = true; // Error to provoke a message" + eol

//@ loop_invariant i == /count && 0 <= i <= values.length;    "

//@ loop_invariant i == /count && 0 <= i <= values.length;    "

//@Test  // FIXME - try running the build programmatically

//@ ghost int i = true; // Error to provoke a message" + eol

//@ loop_invariant i == /count && 0 <= i <= values.length;    "

//@ model int i;    " +

//@ represents i <- 0;     }"

//@ model int i;    " +

//@ represents i <- 0;     }"

//@ model int i;    " +

//@ represents i <- 0;     }"

//@ model int i;    " +

//@ represents i <- 0;     }"

//@ model int i;    " +

//@ represents i <- 0;     }"

//@ model int i;    " +

//@ represents i <- 0;     }"

//@ model int i;    " +

//@ represents i <- 0;     }"

//@ model int i;    " +

//@ represents i <- 0;     }"

//@ model int i;    " +

//@ represents i <- 0;     }"

//@ model int i;    " +

//@ represents i <- 0;     }"

//@ accessible \    othing;    "

//@ accessible \    othing;    "

//@ accessible \    othing;    "

//@ accessible \    othing;    "

//@ accessible i;    "

//@ accessible this.i;    "

//@ accessible j;    "

//@ accessible a,a.i;    "

//@ accessible a,a.j;    "

//@ requires b == a;    "

//@ accessible b.i,a;    "

//@ accessible a,b.i;    "

//@ requires a != null && 0 <= i && i < a.length;    "

//@ accessible a,i,a[*];    "

//@ requires a != null && 0 <= i && i < a.length;    "

//@ accessible \\everything;    "

//@ requires a != null && 0 <= i && i < a.length;    "

//@ accessible a,i;    "

//@ accessible i;    "

//@ accessible i;    "

//@ accessible i;    "

//@ accessible i;    "

//@ accessible \    othing;    "

//@ accessible i;    "

//@ accessible \\everything;    "

//@ accessible \    othing;    "

//@ requires b;    "

//@ accessible i;    "

//@ also requires !b;    "

//@ accessible j;    "

//@ accessible i,j;    "

//@ requires b;    "

//@ accessible i;    "

//@ also requires !b;    "

//@ accessible i;    "

//@ accessible \    othing;    "

//@ accessible \    othing;    "

//@ accessible \    othing;    "

//@ accessible \    othing;    "

//@ accessible i;    "

//@ accessible this.i;    "

//@ accessible j;    "

//@ accessible a,a.i;    "

//@ accessible a,a.j;    "

//@ requires b == a;    "

//@ accessible b.i,a;    "

//@ accessible a,b.i;    "

//@ requires a != null && 0 <= i && i < a.length;    "

//@ accessible a,i,a[*];    "

//@ requires a != null && 0 <= i && i < a.length;    "

//@ accessible \\everything;    "

//@ requires a != null && 0 <= i && i < a.length;    "

//@ accessible a,i;    "

//@ accessible i;    "

//@ accessible i;    "

//@ accessible i;    "

//@ accessible i;    "

//@ accessible \    othing;    "

//@ accessible i;    "

//@ accessible \\everything;    "

//@ accessible \    othing;    "

//@ requires b;    "

//@ accessible i;    "

//@ also requires !b;    "

//@ accessible j;    "

//@ accessible i,j;    "

//@ requires b;    "

//@ accessible i;    "

//@ also requires !b;    "

//@ accessible i;    "

//@ accessible \    othing;    "

//@ accessible \    othing;    "

//@ accessible \    othing;    "

//@ accessible \    othing;    "

//@ accessible i;    "

//@ accessible this.i;    "

//@ accessible j;    "

//@ accessible a,a.i;    "

//@ accessible a,a.j;    "

//@ requires b == a;    "

//@ accessible b.i,a;    "

//@ accessible a,b.i;    "

//@ requires a != null && 0 <= i && i < a.length;    "

//@ accessible a,i,a[*];    "

//@ requires a != null && 0 <= i && i < a.length;    "

//@ accessible \\everything;    "

//@ requires a != null && 0 <= i && i < a.length;    "

//@ accessible a,i;    "

//@ accessible i;    "

//@ accessible i;    "

//@ accessible i;    "

//@ accessible i;    "

//@ accessible \    othing;    "

//@ accessible i;    "

//@ accessible \\everything;    "

//@ accessible \    othing;    "

//@ requires b;    "

//@ accessible i;    "

//@ also requires !b;    "

//@ accessible j;    "

//@ accessible i,j;    "

//@ requires b;    "

//@ accessible i;    "

//@ also requires !b;    "

//@ accessible i;    "

//@ accessible \    othing;    "

//@ accessible \    othing;    "

//@ accessible \    othing;    "

//@ accessible \    othing;    "

//@ accessible i;    "

//@ accessible this.i;    "

//@ accessible j;    "

//@ accessible a,a.i;    "

//@ accessible a,a.j;    "

//@ requires b == a;    "

//@ accessible b.i,a;    "

//@ accessible a,b.i;    "

//@ requires a != null && 0 <= i && i < a.length;    "

//@ accessible a,i,a[*];    "

//@ requires a != null && 0 <= i && i < a.length;    "

//@ accessible \\everything;    "

//@ requires a != null && 0 <= i && i < a.length;    "

//@ accessible a,i;    "

//@ accessible i;    "

//@ accessible i;    "

//@ accessible i;    "

//@ accessible i;    "

//@ accessible \    othing;    "

//@ accessible i;    "

//@ accessible \\everything;    "

//@ accessible \    othing;    "

//@ requires b;    "

//@ accessible i;    "

//@ also requires !b;    "

//@ accessible j;    "

//@ accessible i,j;    "

//@ requires b;    "

//@ accessible i;    "

//@ also requires !b;    "

//@ accessible i;    "

//@ accessible \    othing;    "

//@ accessible \    othing;    "

//@ accessible \    othing;    "

//@ accessible \    othing;    "

//@ accessible i;    "

//@ accessible this.i;    "

//@ accessible j;    "

//@ accessible a,a.i;    "

//@ accessible a,a.j;    "

//@ requires b == a;    "

//@ accessible b.i,a;    "

//@ accessible a,b.i;    "

//@ requires a != null && 0 <= i && i < a.length;    "

//@ accessible a,i,a[*];    "

//@ requires a != null && 0 <= i && i < a.length;    "

//@ accessible \\everything;    "

//@ requires a != null && 0 <= i && i < a.length;    "

//@ accessible a,i;    "

//@ accessible i;    "

//@ accessible i;    "

//@ accessible i;    "

//@ accessible i;    "

//@ accessible \    othing;    "

//@ accessible i;    "

//@ accessible \\everything;    "

//@ accessible \    othing;    "

//@ requires b;    "

//@ accessible i;    "

//@ also requires !b;    "

//@ accessible j;    "

//@ accessible i,j;    "

//@ requires b;    "

//@ accessible i;    "

//@ also requires !b;    "

//@ accessible i;    "

/*@ assignable A.*; */
/*@ assignable A.*; */
/*@ assignable A.*; */
//@ assert \\invariant_for(this);    " // OK - invariant is true

//@ public invariant f >= 0;     "

//@ assert \\invariant_for(this);    " // OK - does not see invariant

//@ private invariant false;     "

//@ assert \\invariant_for(this);    " // OK - sees invariant

//@ public invariant true;     "

//@ assert \\invariant_for(this);    " // ERROR - should see inherited invariant and fail

//@ public invariant f >= 0;     "

//@ assert \\invariant_for(this);    " // ERROR - should see static invariant

//@ static public invariant f >= 0;     "

//@ assert \\invariant_for(TestJava);    " // OK - sees only static invariants

//@ public invariant f >= 0;     "

//@ static public invariant f >= 0;     "

//@ assert \\invariant_for(TestJava);    " // ERROR - should see static invariant

//@ static public invariant f >= 0;     "

//@ assert \\invariant_for(P);    " // OK

//@ public invariant i >= 0;    "

//@ static public invariant ii >= 0;    "

//@ assignable \\everything;     "

//@ assignable \\everything;     "

//@ assignable \\everything;     "

//@ requires i < Integer.MAX_VALUE;    "

//@ assignable \\everything;     "

//@ requires ii < Integer.MAX_VALUE;    "

//@ assignable \\everything;     "

//@ requires ii < Integer.MAX_VALUE;    "

//@ assignable \\everything;     "

//@ public constraint i >= \\old(i);    "

//@ static public constraint ii >= \\old(ii);    "

//@ assignable \\everything;     "

//@ assume i > -2147483648;    "

//@ assignable \\everything;     "

//@ assume ii > -2147483648;    "

//@ assignable \\everything;     "

//@ assume ii > -2147483648;    "

//@ requires i < Integer.MAX_VALUE;    "

//@ assignable \\everything;     "

//@ requires ii < Integer.MAX_VALUE;    "

//@ assignable \\everything;     "

//@ requires ii < Integer.MAX_VALUE;    "

//@ assignable \\everything;     "

//@ axiom (\\forall TestJava o; o.i == o.ii);    "

//@ axiom i == ii;    "

//@ assignable \\everything;     "

//@ assert i == ii;    "

//@ axiom (\\forall TestJava o; o.i == o.ii);    "

//@ assignable \    othing;     "

//@ assert i == ii;    "

//@ assignable this.a;    "

//@ assignable \    othing;    "

//@ assignable \\everything;    "

//@ assignable this.a;    "

//@ assignable TestJava.b;    "

//@ assignable this.b;    "

//@ assignable this.a;    "

//@ assignable this.a;    "

//@ assume this == o;     "

//@ assignable this.a;    " // Line 40

//@ assignable a;    "

//@ assignable \    othing;    "

//@ assignable \    othing;    "

//@ assignable o.*;    "

//@ assume this == o;     "

//@ assignable this.*;    "

//@ public normal_behavior requires b; ensures \\result == 5;     "

//@ also public normal_behavior requires !b; ensures \\result == 7;     "

//@ assert m(true) == 5;     "

//@ assert m(false) == 7;     "

//@ assert m(bb) == 6;     "

//@ public normal_behavior requires b; ensures \\result == 5;     "

//@ assert m(true) == 5;     "

//@ assert m(false) == 5;     "

//@ assert m(bb) == 5;     "

//@ assert m(true) == 7;     "

/*@ assignable A.*; */
/*@ assignable A.*; */
/*@ assignable A.*; */
//@ assert \\invariant_for(this);    " // OK - invariant is true

//@ public invariant f >= 0;     "

//@ assert \\invariant_for(this);    " // OK - does not see invariant

//@ private invariant false;     "

//@ assert \\invariant_for(this);    " // OK - sees invariant

//@ public invariant true;     "

//@ assert \\invariant_for(this);    " // ERROR - should see inherited invariant and fail

//@ public invariant f >= 0;     "

//@ assert \\invariant_for(this);    " // ERROR - should see static invariant

//@ static public invariant f >= 0;     "

//@ assert \\invariant_for(TestJava);    " // OK - sees only static invariants

//@ public invariant f >= 0;     "

//@ static public invariant f >= 0;     "

//@ assert \\invariant_for(TestJava);    " // ERROR - should see static invariant

//@ static public invariant f >= 0;     "

//@ assert \\invariant_for(P);    " // OK

//@ public invariant i >= 0;    "

//@ static public invariant ii >= 0;    "

//@ assignable \\everything;     "

//@ assignable \\everything;     "

//@ assignable \\everything;     "

//@ requires i < Integer.MAX_VALUE;    "

//@ assignable \\everything;     "

//@ requires ii < Integer.MAX_VALUE;    "

//@ assignable \\everything;     "

//@ requires ii < Integer.MAX_VALUE;    "

//@ assignable \\everything;     "

//@ public constraint i >= \\old(i);    "

//@ static public constraint ii >= \\old(ii);    "

//@ assignable \\everything;     "

//@ assume i > -2147483648;    "

//@ assignable \\everything;     "

//@ assume ii > -2147483648;    "

//@ assignable \\everything;     "

//@ assume ii > -2147483648;    "

//@ requires i < Integer.MAX_VALUE;    "

//@ assignable \\everything;     "

//@ requires ii < Integer.MAX_VALUE;    "

//@ assignable \\everything;     "

//@ requires ii < Integer.MAX_VALUE;    "

//@ assignable \\everything;     "

//@ axiom (\\forall TestJava o; o.i == o.ii);    "

//@ axiom i == ii;    "

//@ assignable \\everything;     "

//@ assert i == ii;    "

//@ axiom (\\forall TestJava o; o.i == o.ii);    "

//@ assignable \    othing;     "

//@ assert i == ii;    "

//@ assignable this.a;    "

//@ assignable \    othing;    "

//@ assignable \\everything;    "

//@ assignable this.a;    "

//@ assignable TestJava.b;    "

//@ assignable this.b;    "

//@ assignable this.a;    "

//@ assignable this.a;    "

//@ assume this == o;     "

//@ assignable this.a;    " // Line 40

//@ assignable a;    "

//@ assignable \    othing;    "

//@ assignable \    othing;    "

//@ assignable o.*;    "

//@ assume this == o;     "

//@ assignable this.*;    "

//@ public normal_behavior requires b; ensures \\result == 5;     "

//@ also public normal_behavior requires !b; ensures \\result == 7;     "

//@ assert m(true) == 5;     "

//@ assert m(false) == 7;     "

//@ assert m(bb) == 6;     "

//@ public normal_behavior requires b; ensures \\result == 5;     "

//@ assert m(true) == 5;     "

//@ assert m(false) == 5;     "

//@ assert m(bb) == 5;     "

//@ assert m(true) == 7;     "

/*@ assignable A.*; */
/*@ assignable A.*; */
/*@ assignable A.*; */
//@ assert \\invariant_for(this);    " // OK - invariant is true

//@ public invariant f >= 0;     "

//@ assert \\invariant_for(this);    " // OK - does not see invariant

//@ private invariant false;     "

//@ assert \\invariant_for(this);    " // OK - sees invariant

//@ public invariant true;     "

//@ assert \\invariant_for(this);    " // ERROR - should see inherited invariant and fail

//@ public invariant f >= 0;     "

//@ assert \\invariant_for(this);    " // ERROR - should see static invariant

//@ static public invariant f >= 0;     "

//@ assert \\invariant_for(TestJava);    " // OK - sees only static invariants

//@ public invariant f >= 0;     "

//@ static public invariant f >= 0;     "

//@ assert \\invariant_for(TestJava);    " // ERROR - should see static invariant

//@ static public invariant f >= 0;     "

//@ assert \\invariant_for(P);    " // OK

//@ public invariant i >= 0;    "

//@ static public invariant ii >= 0;    "

//@ assignable \\everything;     "

//@ assignable \\everything;     "

//@ assignable \\everything;     "

//@ requires i < Integer.MAX_VALUE;    "

//@ assignable \\everything;     "

//@ requires ii < Integer.MAX_VALUE;    "

//@ assignable \\everything;     "

//@ requires ii < Integer.MAX_VALUE;    "

//@ assignable \\everything;     "

//@ public constraint i >= \\old(i);    "

//@ static public constraint ii >= \\old(ii);    "

//@ assignable \\everything;     "

//@ assume i > -2147483648;    "

//@ assignable \\everything;     "

//@ assume ii > -2147483648;    "

//@ assignable \\everything;     "

//@ assume ii > -2147483648;    "

//@ requires i < Integer.MAX_VALUE;    "

//@ assignable \\everything;     "

//@ requires ii < Integer.MAX_VALUE;    "

//@ assignable \\everything;     "

//@ requires ii < Integer.MAX_VALUE;    "

//@ assignable \\everything;     "

//@ axiom (\\forall TestJava o; o.i == o.ii);    "

//@ axiom i == ii;    "

//@ assignable \\everything;     "

//@ assert i == ii;    "

//@ axiom (\\forall TestJava o; o.i == o.ii);    "

//@ assignable \    othing;     "

//@ assert i == ii;    "

//@ assignable this.a;    "

//@ assignable \    othing;    "

//@ assignable \\everything;    "

//@ assignable this.a;    "

//@ assignable TestJava.b;    "

//@ assignable this.b;    "

//@ assignable this.a;    "

//@ assignable this.a;    "

//@ assume this == o;     "

//@ assignable this.a;    " // Line 40

//@ assignable a;    "

//@ assignable \    othing;    "

//@ assignable \    othing;    "

//@ assignable o.*;    "

//@ assume this == o;     "

//@ assignable this.*;    "

//@ public normal_behavior requires b; ensures \\result == 5;     "

//@ also public normal_behavior requires !b; ensures \\result == 7;     "

//@ assert m(true) == 5;     "

//@ assert m(false) == 7;     "

//@ assert m(bb) == 6;     "

//@ public normal_behavior requires b; ensures \\result == 5;     "

//@ assert m(true) == 5;     "

//@ assert m(false) == 5;     "

//@ assert m(bb) == 5;     "

//@ assert m(true) == 7;     "

/*@ assignable A.*; */
/*@ assignable A.*; */
/*@ assignable A.*; */
//@ assert \\invariant_for(this);    " // OK - invariant is true

//@ public invariant f >= 0;     "

//@ assert \\invariant_for(this);    " // OK - does not see invariant

//@ private invariant false;     "

//@ assert \\invariant_for(this);    " // OK - sees invariant

//@ public invariant true;     "

//@ assert \\invariant_for(this);    " // ERROR - should see inherited invariant and fail

//@ public invariant f >= 0;     "

//@ assert \\invariant_for(this);    " // ERROR - should see static invariant

//@ static public invariant f >= 0;     "

//@ assert \\invariant_for(TestJava);    " // OK - sees only static invariants

//@ public invariant f >= 0;     "

//@ static public invariant f >= 0;     "

//@ assert \\invariant_for(TestJava);    " // ERROR - should see static invariant

//@ static public invariant f >= 0;     "

//@ assert \\invariant_for(P);    " // OK

//@ public invariant i >= 0;    "

//@ static public invariant ii >= 0;    "

//@ assignable \\everything;     "

//@ assignable \\everything;     "

//@ assignable \\everything;     "

//@ requires i < Integer.MAX_VALUE;    "

//@ assignable \\everything;     "

//@ requires ii < Integer.MAX_VALUE;    "

//@ assignable \\everything;     "

//@ requires ii < Integer.MAX_VALUE;    "

//@ assignable \\everything;     "

//@ public constraint i >= \\old(i);    "

//@ static public constraint ii >= \\old(ii);    "

//@ assignable \\everything;     "

//@ assume i > -2147483648;    "

//@ assignable \\everything;     "

//@ assume ii > -2147483648;    "

//@ assignable \\everything;     "

//@ assume ii > -2147483648;    "

//@ requires i < Integer.MAX_VALUE;    "

//@ assignable \\everything;     "

//@ requires ii < Integer.MAX_VALUE;    "

//@ assignable \\everything;     "

//@ requires ii < Integer.MAX_VALUE;    "

//@ assignable \\everything;     "

//@ axiom (\\forall TestJava o; o.i == o.ii);    "

//@ axiom i == ii;    "

//@ assignable \\everything;     "

//@ assert i == ii;    "

//@ axiom (\\forall TestJava o; o.i == o.ii);    "

//@ assignable \    othing;     "

//@ assert i == ii;    "

//@ assignable this.a;    "

//@ assignable \    othing;    "

//@ assignable \\everything;    "

//@ assignable this.a;    "

//@ assignable TestJava.b;    "

//@ assignable this.b;    "

//@ assignable this.a;    "

//@ assignable this.a;    "

//@ assume this == o;     "

//@ assignable this.a;    " // Line 40

//@ assignable a;    "

//@ assignable \    othing;    "

//@ assignable \    othing;    "

//@ assignable o.*;    "

//@ assume this == o;     "

//@ assignable this.*;    "

//@ public normal_behavior requires b; ensures \\result == 5;     "

//@ also public normal_behavior requires !b; ensures \\result == 7;     "

//@ assert m(true) == 5;     "

//@ assert m(false) == 7;     "

//@ assert m(bb) == 6;     "

//@ public normal_behavior requires b; ensures \\result == 5;     "

//@ assert m(true) == 5;     "

//@ assert m(false) == 5;     "

//@ assert m(bb) == 5;     "

//@ assert m(true) == 7;     "

/*@ assignable A.*; */
/*@ assignable A.*; */
/*@ assignable A.*; */
//@ assert \\invariant_for(this);    " // OK - invariant is true

//@ public invariant f >= 0;     "

//@ assert \\invariant_for(this);    " // OK - does not see invariant

//@ private invariant false;     "

//@ assert \\invariant_for(this);    " // OK - sees invariant

//@ public invariant true;     "

//@ assert \\invariant_for(this);    " // ERROR - should see inherited invariant and fail

//@ public invariant f >= 0;     "

//@ assert \\invariant_for(this);    " // ERROR - should see static invariant

//@ static public invariant f >= 0;     "

//@ assert \\invariant_for(TestJava);    " // OK - sees only static invariants

//@ public invariant f >= 0;     "

//@ static public invariant f >= 0;     "

//@ assert \\invariant_for(TestJava);    " // ERROR - should see static invariant

//@ static public invariant f >= 0;     "

//@ assert \\invariant_for(P);    " // OK

//@ public invariant i >= 0;    "

//@ static public invariant ii >= 0;    "

//@ assignable \\everything;     "

//@ assignable \\everything;     "

//@ assignable \\everything;     "

//@ requires i < Integer.MAX_VALUE;    "

//@ assignable \\everything;     "

//@ requires ii < Integer.MAX_VALUE;    "

//@ assignable \\everything;     "

//@ requires ii < Integer.MAX_VALUE;    "

//@ assignable \\everything;     "

//@ public constraint i >= \\old(i);    "

//@ static public constraint ii >= \\old(ii);    "

//@ assignable \\everything;     "

//@ assume i > -2147483648;    "

//@ assignable \\everything;     "

//@ assume ii > -2147483648;    "

//@ assignable \\everything;     "

//@ assume ii > -2147483648;    "

//@ requires i < Integer.MAX_VALUE;    "

//@ assignable \\everything;     "

//@ requires ii < Integer.MAX_VALUE;    "

//@ assignable \\everything;     "

//@ requires ii < Integer.MAX_VALUE;    "

//@ assignable \\everything;     "

//@ axiom (\\forall TestJava o; o.i == o.ii);    "

//@ axiom i == ii;    "

//@ assignable \\everything;     "

//@ assert i == ii;    "

//@ axiom (\\forall TestJava o; o.i == o.ii);    "

//@ assignable \    othing;     "

//@ assert i == ii;    "

//@ assignable this.a;    "

//@ assignable \    othing;    "

//@ assignable \\everything;    "

//@ assignable this.a;    "

//@ assignable TestJava.b;    "

//@ assignable this.b;    "

//@ assignable this.a;    "

//@ assignable this.a;    "

//@ assume this == o;     "

//@ assignable this.a;    " // Line 40

//@ assignable a;    "

//@ assignable \    othing;    "

//@ assignable \    othing;    "

//@ assignable o.*;    "

//@ assume this == o;     "

//@ assignable this.*;    "

//@ public normal_behavior requires b; ensures \\result == 5;     "

//@ also public normal_behavior requires !b; ensures \\result == 7;     "

//@ assert m(true) == 5;     "

//@ assert m(false) == 7;     "

//@ assert m(bb) == 6;     "

//@ public normal_behavior requires b; ensures \\result == 5;     "

//@ assert m(true) == 5;     "

//@ assert m(false) == 5;     "

//@ assert m(bb) == 5;     "

//@ assert m(true) == 7;     "

//@ assert i>0 ;    "

//@ requires i>=0;    "

//@ assert i>0 ;    "

//@ requires i>=0;    "

//@ ensures \\result>0;    "

//@ assume i>0 ;    "

//@ assert i>0 ;    "

//@ requires i>0;    "

//@ assert i>=0 ;    "

//@ requires i>=0;    "

//@ ensures \\result>=0;    "

//@ requires i>0;    "

//@ also    "

//@ requires i==0;    "

//@ assert i>=0 ;    "

//@ assume o.f >0 ;    "

//@ assert f > 0 ;    "

//@ assume o.f >0 ;    "

//@ assume o.f >0 ;    "

//@ assume o == this ;    "

//@ assert f > 0 ;    "

//@ requires a.length > 5;     "

//@ assume a[1] == 0 ;    "

//@ requires a != null;     "

//@ assume a[1] == 0 ;    "

//@ requires a != null;     "

//@ requires a.length > 5;     "

//@ assume a[-1] == 0 ;    "

//@ requires a != null;     "

//@ requires a.length > 5;     "

//@ requires b.length > 5;     "

//@ assume a[1] == 5 ;    "

//@ assert b[1] == 5 ;    "

//@ requires a != null;     "

//@ requires a.length > 5;     "

//@ assume a[1] == 5 ;    "

//@ assume a == b ;    "

//@ assert b[1] ==5 ;    "

//@ assert c != null;    "

//@ assert c.length >= 0;     "

//@ requires a.length > 5;     "

//@ requires a != null;     "

//@ requires a != null;     "

//@ requires a.length > 5;     "

//@ requires a != null;     "

//@ requires a.length > 5;     "

//@ requires b.length > 5;     "

//@ assert b[1] ==5 ;    "

//@ requires a != null;     "

//@ requires a.length > 5;     " // Line 25

//@ assume a == b ;    "

//@ assert b[1] ==5 ;    "

//@ requires a.length > 3;     "

//@ assignable \\everything;     "

//@ requires a != null;     "

//@ assignable \\everything;     "

//@ requires a != null && a.length > 3;     "

//@ assignable \\everything;     "

//@ ensures \\result == \\old(a[0]);     "

//@ requires a != null && a.length > 3;     "

//@ assignable \\everything;     "

//@ ensures \\result == \\old(a[0]);     " // Line 26

//@ requires a != null && a.length > 3 && i >= 0 && i <= 1;     "

//@ assignable \\everything;     "

//@ ensures \\result == \\old(a[0]);     "

//@ assert f > 0 ;    "

//@ assume o == this ;    "

//@ assert f > 0 ;    "

//@ assignable \\everything;     "

//@ ensures \\result == 2;     "

//@ assignable \\everything;     "

//@ ensures \\result == 10;     "

//@ requires o != null;     "

//@ assignable \\everything;     "

//@ ensures \\result == 1;     "

//@ assignable \\everything;     "

//@ ensures b ==> \\result == 2;     "

//@ assignable \\everything;     "

//@ ensures b ==> \\result == 10;     "

//@ requires this != o && o != null;     "

//@ assignable \\everything;     "

//@ ensures \\result == 1;     "

//@ ensures (\\let int k = i; \\result == k);    "

//@ ensures (\\let int k = 1; \\result == k);    "

//@ requires i >= 0;    "

//@ requires i >= 0;    "

//@ ensures (\\let int k = i, int j = k; \\result == j);    "

//@ ensures (\\let int k = 1, int j = k; \\result == j);    "


//@ requires i != 0;     "

//@ requires i != 0;     "


//@ requires a.length == 10;    "

//@ requires a.length == 10;    "

//@ requires a.length == 10 && i >= 0;    "

//@ requires a.length == 10;    "

//@ requires a.length == 10;    "

//@ requires a.length == 10;    "

//@ requires i >= 3;    "

//@ requires i <= 8;    "

//@ requires a.length == 10;    "

//@ requires a.length == 10;    "

//@ requires i > 1 && a.length == 10;    "

//@ requires i < 5 && a.length == 10;    "

//@ requires a.length == 10;    "

//@ requires a.length == 10;    "

//@ requires a.length == 10;    "

//@ requires i >= 3;    "

//@ requires i <= 8;    "

//@ requires a.length == 10;    "

//@ ensures \\result == a[1];    "

//@ requires a.length == 10;    "

//@ ensures \\result == a[0];    "

/*@ nullable_by_default*/



//@ assert ooo != null;    "

//@ assert ooo instanceof TestJava;    "

/*@ nullable_by_default*/



//@ assert ooo != null;    "

//@ assert ooo instanceof TestJava;    "

//@ assignable ooo;    "

//@ assert x < 3 ;    "

//@ assert x < 4 ;    "

//@ assert x == 13 ;    "

//@ assert y == 11 ;    "

//@ requires j < 1000 && -1000 < j; ensures \\result == j+j+1;    "

//@ requires j != 0;    "

//@ requires t != null;    "

//@ requires i != 0;    "

//@ requires t != null;    "

//@ requires i != 0;    "

//@ assignable \\everything;    "

//@ ensures \\result == j;    "

//@ assignable t.f;    "

//@ requires t != null;    "

//@ requires i != 0;    "

//@ assignable \\everything;    "

//@ requires i != 0;    "

//@ assignable \\everything;    "

//@ requires a.length == 4;    "

//@ requires i != 0;    "

//@ assignable \\everything;    "

//@ requires a.length == 4;    "

//@ requires i != 0;    "

//@ assignable \\everything;    "

//@ requires a.length == 4;    "

//@ assignable \\everything;    "

//@ requires a.length == 4;    "

//@ requires i != 0;    "

//@ assignable \\everything;    "

//@ assert x == 33 ;    "

//@ assert y == 31 ;    "

/*@ nullable*/
//@ requires i < a.length;     "

//@ requires i >= 0;     "

//@ requires i >= 0 && i < a.length;     "

//@ assume a != null && a.length > 1;    "

//@ assume a != null && a.length > 1 && i != null;    "

//@ assume a != null && a.length > 1 && i != null;    "

//@ assume \\elemtype(\\typeof(a)) == \\type(Integer);    "

//@ assume a != null && a.length > 1 && i != null;    "

//@ assume a != null && a.length > 1;    "

//@ assume a != null && a.length > 1 && i != null;    "

//@ assume a != null && a.length > 1 && i != null;    "

//@ assume \\elemtype(\\typeof(a)) == \\type(String);    "

//@ assume a != null && a.length > 1 && i != null;    "

//@ assume a != null && a.length > 1 && i != null;    "

//@ assume a != null && a.length > 1 && i != null;    "

//@ assume a != null && a.length > 1 && i != null;    "

//@ assume \\type(B) <: \\elemtype(\\typeof(a));    "

//@ assume a != null && a.length > 1 && i != null;    "

//@ public invariant b != null && b.length == 20;    "

//@ assert e instanceof NullPointerException || e instanceof ArithmeticException;    "

//@ signals_only NullPointerException, ArithmeticException;    "

//@ signals_only NullPointerException;    "

//@ public invariant b != null && b.length == 20;    "

//@ public invariant b != null && b.length == 20;    "

//@ public invariant b != null && b.length == 20;    "

//@ also public normal_behavior    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 2;    "

//@ assert TestJava.flag == 1;    "

//@ also    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 2;    "

//@ assert TestJava.flag == 1;    "

/*@ pure */
//@ also    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 1;    "

//@ signals (Exception e) TestJava.flag == 10;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 2;    "

//@ assert (\\lbl FLAG TestJava.flag) == 0 || TestJava.flag == 1|| TestJava.flag == 10;    "

//@ also    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 1;    "

//@ signals (Exception e) TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 2;    "

//@ assert TestJava.flag == 1;    "

//@ also public normal_behavior    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 1;    "

//@ also public normal_behavior    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 2;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;    "

/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ signals_only EE1;    "

//@ signals (Exception e) TestJava.flag == 1;    "

/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ signals_only EE2;    "

//@ signals (Exception e) TestJava.flag == 2;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 1;    " // not feasible line 34

//@ assert TestJava.flag == 1;    "

//@ assert e instanceof EE3 ;    " // Line 37

/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ signals_only EE1;    "

//@ signals (Exception e) TestJava.flag == 1;    "

/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ signals_only EE2;    "

//@ signals (Exception e) TestJava.flag == 2;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;    " // not feasible

//@ assert e instanceof EE3 ;    " // Line 36

/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
//@     "

/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag,this.autocloseableContent;    "

//@ signals_only EE1;    "

//@ signals (Exception e) TestJava.flag == 1;    "

//@     "

/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag,this.autocloseableContent;    "

//@ signals_only EE2;    "

//@ signals (Exception e) TestJava.flag == 2;    "

//@ requires flag == 0;    " // Line 23

//@ assignable flag;    "

//@ assert TestJava.flag == 0;      "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;    "  // Not feasible

//@ assert TestJava.flag == 2;    "  // Line 34 // SHould be OK

//@ assert e instanceof EE1;    "  // Line 35 // Should be OK

//@ also public normal_behavior    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;    "

//@ also public normal_behavior    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert normal ==> flag == 1;    "

//@ assert !normal ==> flag == 2;    "

//@ also public normal_behavior    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;    "  // FIXME - should not be able to skip the catch block

//@ also    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;    "  // FIXME - should not be able to skip the catch block

//@ also public normal_behavior    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;     "

//@ also    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 5;    "

//@ assert i>0 ;    "

//@ requires i>=0;    "

//@ assert i>0 ;    "

//@ requires i>=0;    "

//@ ensures \\result>0;    "

//@ assume i>0 ;    "

//@ assert i>0 ;    "

//@ requires i>0;    "

//@ assert i>=0 ;    "

//@ requires i>=0;    "

//@ ensures \\result>=0;    "

//@ requires i>0;    "

//@ also    "

//@ requires i==0;    "

//@ assert i>=0 ;    "

//@ assume o.f >0 ;    "

//@ assert f > 0 ;    "

//@ assume o.f >0 ;    "

//@ assume o.f >0 ;    "

//@ assume o == this ;    "

//@ assert f > 0 ;    "

//@ requires a.length > 5;     "

//@ assume a[1] == 0 ;    "

//@ requires a != null;     "

//@ assume a[1] == 0 ;    "

//@ requires a != null;     "

//@ requires a.length > 5;     "

//@ assume a[-1] == 0 ;    "

//@ requires a != null;     "

//@ requires a.length > 5;     "

//@ requires b.length > 5;     "

//@ assume a[1] == 5 ;    "

//@ assert b[1] == 5 ;    "

//@ requires a != null;     "

//@ requires a.length > 5;     "

//@ assume a[1] == 5 ;    "

//@ assume a == b ;    "

//@ assert b[1] ==5 ;    "

//@ assert c != null;    "

//@ assert c.length >= 0;     "

//@ requires a.length > 5;     "

//@ requires a != null;     "

//@ requires a != null;     "

//@ requires a.length > 5;     "

//@ requires a != null;     "

//@ requires a.length > 5;     "

//@ requires b.length > 5;     "

//@ assert b[1] ==5 ;    "

//@ requires a != null;     "

//@ requires a.length > 5;     " // Line 25

//@ assume a == b ;    "

//@ assert b[1] ==5 ;    "

//@ requires a.length > 3;     "

//@ assignable \\everything;     "

//@ requires a != null;     "

//@ assignable \\everything;     "

//@ requires a != null && a.length > 3;     "

//@ assignable \\everything;     "

//@ ensures \\result == \\old(a[0]);     "

//@ requires a != null && a.length > 3;     "

//@ assignable \\everything;     "

//@ ensures \\result == \\old(a[0]);     " // Line 26

//@ requires a != null && a.length > 3 && i >= 0 && i <= 1;     "

//@ assignable \\everything;     "

//@ ensures \\result == \\old(a[0]);     "

//@ assert f > 0 ;    "

//@ assume o == this ;    "

//@ assert f > 0 ;    "

//@ assignable \\everything;     "

//@ ensures \\result == 2;     "

//@ assignable \\everything;     "

//@ ensures \\result == 10;     "

//@ requires o != null;     "

//@ assignable \\everything;     "

//@ ensures \\result == 1;     "

//@ assignable \\everything;     "

//@ ensures b ==> \\result == 2;     "

//@ assignable \\everything;     "

//@ ensures b ==> \\result == 10;     "

//@ requires this != o && o != null;     "

//@ assignable \\everything;     "

//@ ensures \\result == 1;     "

//@ ensures (\\let int k = i; \\result == k);    "

//@ ensures (\\let int k = 1; \\result == k);    "

//@ requires i >= 0;    "

//@ requires i >= 0;    "

//@ ensures (\\let int k = i, int j = k; \\result == j);    "

//@ ensures (\\let int k = 1, int j = k; \\result == j);    "


//@ requires i != 0;     "

//@ requires i != 0;     "


//@ requires a.length == 10;    "

//@ requires a.length == 10;    "

//@ requires a.length == 10 && i >= 0;    "

//@ requires a.length == 10;    "

//@ requires a.length == 10;    "

//@ requires a.length == 10;    "

//@ requires i >= 3;    "

//@ requires i <= 8;    "

//@ requires a.length == 10;    "

//@ requires a.length == 10;    "

//@ requires i > 1 && a.length == 10;    "

//@ requires i < 5 && a.length == 10;    "

//@ requires a.length == 10;    "

//@ requires a.length == 10;    "

//@ requires a.length == 10;    "

//@ requires i >= 3;    "

//@ requires i <= 8;    "

//@ requires a.length == 10;    "

//@ ensures \\result == a[1];    "

//@ requires a.length == 10;    "

//@ ensures \\result == a[0];    "

/*@ nullable_by_default*/



//@ assert ooo != null;    "

//@ assert ooo instanceof TestJava;    "

/*@ nullable_by_default*/



//@ assert ooo != null;    "

//@ assert ooo instanceof TestJava;    "

//@ assignable ooo;    "

//@ assert x < 3 ;    "

//@ assert x < 4 ;    "

//@ assert x == 13 ;    "

//@ assert y == 11 ;    "

//@ requires j < 1000 && -1000 < j; ensures \\result == j+j+1;    "

//@ requires j != 0;    "

//@ requires t != null;    "

//@ requires i != 0;    "

//@ requires t != null;    "

//@ requires i != 0;    "

//@ assignable \\everything;    "

//@ ensures \\result == j;    "

//@ assignable t.f;    "

//@ requires t != null;    "

//@ requires i != 0;    "

//@ assignable \\everything;    "

//@ requires i != 0;    "

//@ assignable \\everything;    "

//@ requires a.length == 4;    "

//@ requires i != 0;    "

//@ assignable \\everything;    "

//@ requires a.length == 4;    "

//@ requires i != 0;    "

//@ assignable \\everything;    "

//@ requires a.length == 4;    "

//@ assignable \\everything;    "

//@ requires a.length == 4;    "

//@ requires i != 0;    "

//@ assignable \\everything;    "

//@ assert x == 33 ;    "

//@ assert y == 31 ;    "

/*@ nullable*/
//@ requires i < a.length;     "

//@ requires i >= 0;     "

//@ requires i >= 0 && i < a.length;     "

//@ assume a != null && a.length > 1;    "

//@ assume a != null && a.length > 1 && i != null;    "

//@ assume a != null && a.length > 1 && i != null;    "

//@ assume \\elemtype(\\typeof(a)) == \\type(Integer);    "

//@ assume a != null && a.length > 1 && i != null;    "

//@ assume a != null && a.length > 1;    "

//@ assume a != null && a.length > 1 && i != null;    "

//@ assume a != null && a.length > 1 && i != null;    "

//@ assume \\elemtype(\\typeof(a)) == \\type(String);    "

//@ assume a != null && a.length > 1 && i != null;    "

//@ assume a != null && a.length > 1 && i != null;    "

//@ assume a != null && a.length > 1 && i != null;    "

//@ assume a != null && a.length > 1 && i != null;    "

//@ assume \\type(B) <: \\elemtype(\\typeof(a));    "

//@ assume a != null && a.length > 1 && i != null;    "

//@ public invariant b != null && b.length == 20;    "

//@ assert e instanceof NullPointerException || e instanceof ArithmeticException;    "

//@ signals_only NullPointerException, ArithmeticException;    "

//@ signals_only NullPointerException;    "

//@ public invariant b != null && b.length == 20;    "

//@ public invariant b != null && b.length == 20;    "

//@ public invariant b != null && b.length == 20;    "

//@ also public normal_behavior    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 2;    "

//@ assert TestJava.flag == 1;    "

//@ also    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 2;    "

//@ assert TestJava.flag == 1;    "

/*@ pure */
//@ also    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 1;    "

//@ signals (Exception e) TestJava.flag == 10;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 2;    "

//@ assert (\\lbl FLAG TestJava.flag) == 0 || TestJava.flag == 1|| TestJava.flag == 10;    "

//@ also    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 1;    "

//@ signals (Exception e) TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 2;    "

//@ assert TestJava.flag == 1;    "

//@ also public normal_behavior    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 1;    "

//@ also public normal_behavior    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 2;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;    "

/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ signals_only EE1;    "

//@ signals (Exception e) TestJava.flag == 1;    "

/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ signals_only EE2;    "

//@ signals (Exception e) TestJava.flag == 2;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 1;    " // not feasible line 34

//@ assert TestJava.flag == 1;    "

//@ assert e instanceof EE3 ;    " // Line 37

/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ signals_only EE1;    "

//@ signals (Exception e) TestJava.flag == 1;    "

/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ signals_only EE2;    "

//@ signals (Exception e) TestJava.flag == 2;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;    " // not feasible

//@ assert e instanceof EE3 ;    " // Line 36

/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
//@     "

/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag,this.autocloseableContent;    "

//@ signals_only EE1;    "

//@ signals (Exception e) TestJava.flag == 1;    "

//@     "

/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag,this.autocloseableContent;    "

//@ signals_only EE2;    "

//@ signals (Exception e) TestJava.flag == 2;    "

//@ requires flag == 0;    " // Line 23

//@ assignable flag;    "

//@ assert TestJava.flag == 0;      "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;    "  // Not feasible

//@ assert TestJava.flag == 2;    "  // Line 34 // SHould be OK

//@ assert e instanceof EE1;    "  // Line 35 // Should be OK

//@ also public normal_behavior    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;    "

//@ also public normal_behavior    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert normal ==> flag == 1;    "

//@ assert !normal ==> flag == 2;    "

//@ also public normal_behavior    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;    "  // FIXME - should not be able to skip the catch block

//@ also    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;    "  // FIXME - should not be able to skip the catch block

//@ also public normal_behavior    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;     "

//@ also    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 5;    "

//@ assert i>0 ;    "

//@ requires i>=0;    "

//@ assert i>0 ;    "

//@ requires i>=0;    "

//@ ensures \\result>0;    "

//@ assume i>0 ;    "

//@ assert i>0 ;    "

//@ requires i>0;    "

//@ assert i>=0 ;    "

//@ requires i>=0;    "

//@ ensures \\result>=0;    "

//@ requires i>0;    "

//@ also    "

//@ requires i==0;    "

//@ assert i>=0 ;    "

//@ assume o.f >0 ;    "

//@ assert f > 0 ;    "

//@ assume o.f >0 ;    "

//@ assume o.f >0 ;    "

//@ assume o == this ;    "

//@ assert f > 0 ;    "

//@ requires a.length > 5;     "

//@ assume a[1] == 0 ;    "

//@ requires a != null;     "

//@ assume a[1] == 0 ;    "

//@ requires a != null;     "

//@ requires a.length > 5;     "

//@ assume a[-1] == 0 ;    "

//@ requires a != null;     "

//@ requires a.length > 5;     "

//@ requires b.length > 5;     "

//@ assume a[1] == 5 ;    "

//@ assert b[1] == 5 ;    "

//@ requires a != null;     "

//@ requires a.length > 5;     "

//@ assume a[1] == 5 ;    "

//@ assume a == b ;    "

//@ assert b[1] ==5 ;    "

//@ assert c != null;    "

//@ assert c.length >= 0;     "

//@ requires a.length > 5;     "

//@ requires a != null;     "

//@ requires a != null;     "

//@ requires a.length > 5;     "

//@ requires a != null;     "

//@ requires a.length > 5;     "

//@ requires b.length > 5;     "

//@ assert b[1] ==5 ;    "

//@ requires a != null;     "

//@ requires a.length > 5;     " // Line 25

//@ assume a == b ;    "

//@ assert b[1] ==5 ;    "

//@ requires a.length > 3;     "

//@ assignable \\everything;     "

//@ requires a != null;     "

//@ assignable \\everything;     "

//@ requires a != null && a.length > 3;     "

//@ assignable \\everything;     "

//@ ensures \\result == \\old(a[0]);     "

//@ requires a != null && a.length > 3;     "

//@ assignable \\everything;     "

//@ ensures \\result == \\old(a[0]);     " // Line 26

//@ requires a != null && a.length > 3 && i >= 0 && i <= 1;     "

//@ assignable \\everything;     "

//@ ensures \\result == \\old(a[0]);     "

//@ assert f > 0 ;    "

//@ assume o == this ;    "

//@ assert f > 0 ;    "

//@ assignable \\everything;     "

//@ ensures \\result == 2;     "

//@ assignable \\everything;     "

//@ ensures \\result == 10;     "

//@ requires o != null;     "

//@ assignable \\everything;     "

//@ ensures \\result == 1;     "

//@ assignable \\everything;     "

//@ ensures b ==> \\result == 2;     "

//@ assignable \\everything;     "

//@ ensures b ==> \\result == 10;     "

//@ requires this != o && o != null;     "

//@ assignable \\everything;     "

//@ ensures \\result == 1;     "

//@ ensures (\\let int k = i; \\result == k);    "

//@ ensures (\\let int k = 1; \\result == k);    "

//@ requires i >= 0;    "

//@ requires i >= 0;    "

//@ ensures (\\let int k = i, int j = k; \\result == j);    "

//@ ensures (\\let int k = 1, int j = k; \\result == j);    "


//@ requires i != 0;     "

//@ requires i != 0;     "


//@ requires a.length == 10;    "

//@ requires a.length == 10;    "

//@ requires a.length == 10 && i >= 0;    "

//@ requires a.length == 10;    "

//@ requires a.length == 10;    "

//@ requires a.length == 10;    "

//@ requires i >= 3;    "

//@ requires i <= 8;    "

//@ requires a.length == 10;    "

//@ requires a.length == 10;    "

//@ requires i > 1 && a.length == 10;    "

//@ requires i < 5 && a.length == 10;    "

//@ requires a.length == 10;    "

//@ requires a.length == 10;    "

//@ requires a.length == 10;    "

//@ requires i >= 3;    "

//@ requires i <= 8;    "

//@ requires a.length == 10;    "

//@ ensures \\result == a[1];    "

//@ requires a.length == 10;    "

//@ ensures \\result == a[0];    "

/*@ nullable_by_default*/



//@ assert ooo != null;    "

//@ assert ooo instanceof TestJava;    "

/*@ nullable_by_default*/



//@ assert ooo != null;    "

//@ assert ooo instanceof TestJava;    "

//@ assignable ooo;    "

//@ assert x < 3 ;    "

//@ assert x < 4 ;    "

//@ assert x == 13 ;    "

//@ assert y == 11 ;    "

//@ requires j < 1000 && -1000 < j; ensures \\result == j+j+1;    "

//@ requires j != 0;    "

//@ requires t != null;    "

//@ requires i != 0;    "

//@ requires t != null;    "

//@ requires i != 0;    "

//@ assignable \\everything;    "

//@ ensures \\result == j;    "

//@ assignable t.f;    "

//@ requires t != null;    "

//@ requires i != 0;    "

//@ assignable \\everything;    "

//@ requires i != 0;    "

//@ assignable \\everything;    "

//@ requires a.length == 4;    "

//@ requires i != 0;    "

//@ assignable \\everything;    "

//@ requires a.length == 4;    "

//@ requires i != 0;    "

//@ assignable \\everything;    "

//@ requires a.length == 4;    "

//@ assignable \\everything;    "

//@ requires a.length == 4;    "

//@ requires i != 0;    "

//@ assignable \\everything;    "

//@ assert x == 33 ;    "

//@ assert y == 31 ;    "

/*@ nullable*/
//@ requires i < a.length;     "

//@ requires i >= 0;     "

//@ requires i >= 0 && i < a.length;     "

//@ assume a != null && a.length > 1;    "

//@ assume a != null && a.length > 1 && i != null;    "

//@ assume a != null && a.length > 1 && i != null;    "

//@ assume \\elemtype(\\typeof(a)) == \\type(Integer);    "

//@ assume a != null && a.length > 1 && i != null;    "

//@ assume a != null && a.length > 1;    "

//@ assume a != null && a.length > 1 && i != null;    "

//@ assume a != null && a.length > 1 && i != null;    "

//@ assume \\elemtype(\\typeof(a)) == \\type(String);    "

//@ assume a != null && a.length > 1 && i != null;    "

//@ assume a != null && a.length > 1 && i != null;    "

//@ assume a != null && a.length > 1 && i != null;    "

//@ assume a != null && a.length > 1 && i != null;    "

//@ assume \\type(B) <: \\elemtype(\\typeof(a));    "

//@ assume a != null && a.length > 1 && i != null;    "

//@ public invariant b != null && b.length == 20;    "

//@ assert e instanceof NullPointerException || e instanceof ArithmeticException;    "

//@ signals_only NullPointerException, ArithmeticException;    "

//@ signals_only NullPointerException;    "

//@ public invariant b != null && b.length == 20;    "

//@ public invariant b != null && b.length == 20;    "

//@ public invariant b != null && b.length == 20;    "

//@ also public normal_behavior    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 2;    "

//@ assert TestJava.flag == 1;    "

//@ also    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 2;    "

//@ assert TestJava.flag == 1;    "

/*@ pure */
//@ also    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 1;    "

//@ signals (Exception e) TestJava.flag == 10;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 2;    "

//@ assert (\\lbl FLAG TestJava.flag) == 0 || TestJava.flag == 1|| TestJava.flag == 10;    "

//@ also    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 1;    "

//@ signals (Exception e) TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 2;    "

//@ assert TestJava.flag == 1;    "

//@ also public normal_behavior    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 1;    "

//@ also public normal_behavior    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 2;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;    "

/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ signals_only EE1;    "

//@ signals (Exception e) TestJava.flag == 1;    "

/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ signals_only EE2;    "

//@ signals (Exception e) TestJava.flag == 2;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 1;    " // not feasible line 34

//@ assert TestJava.flag == 1;    "

//@ assert e instanceof EE3 ;    " // Line 37

/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ signals_only EE1;    "

//@ signals (Exception e) TestJava.flag == 1;    "

/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ signals_only EE2;    "

//@ signals (Exception e) TestJava.flag == 2;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;    " // not feasible

//@ assert e instanceof EE3 ;    " // Line 36

/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
//@     "

/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag,this.autocloseableContent;    "

//@ signals_only EE1;    "

//@ signals (Exception e) TestJava.flag == 1;    "

//@     "

/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag,this.autocloseableContent;    "

//@ signals_only EE2;    "

//@ signals (Exception e) TestJava.flag == 2;    "

//@ requires flag == 0;    " // Line 23

//@ assignable flag;    "

//@ assert TestJava.flag == 0;      "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;    "  // Not feasible

//@ assert TestJava.flag == 2;    "  // Line 34 // SHould be OK

//@ assert e instanceof EE1;    "  // Line 35 // Should be OK

//@ also public normal_behavior    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;    "

//@ also public normal_behavior    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert normal ==> flag == 1;    "

//@ assert !normal ==> flag == 2;    "

//@ also public normal_behavior    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;    "  // FIXME - should not be able to skip the catch block

//@ also    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;    "  // FIXME - should not be able to skip the catch block

//@ also public normal_behavior    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;     "

//@ also    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 5;    "

//@ assert i>0 ;    "

//@ requires i>=0;    "

//@ assert i>0 ;    "

//@ requires i>=0;    "

//@ ensures \\result>0;    "

//@ assume i>0 ;    "

//@ assert i>0 ;    "

//@ requires i>0;    "

//@ assert i>=0 ;    "

//@ requires i>=0;    "

//@ ensures \\result>=0;    "

//@ requires i>0;    "

//@ also    "

//@ requires i==0;    "

//@ assert i>=0 ;    "

//@ assume o.f >0 ;    "

//@ assert f > 0 ;    "

//@ assume o.f >0 ;    "

//@ assume o.f >0 ;    "

//@ assume o == this ;    "

//@ assert f > 0 ;    "

//@ requires a.length > 5;     "

//@ assume a[1] == 0 ;    "

//@ requires a != null;     "

//@ assume a[1] == 0 ;    "

//@ requires a != null;     "

//@ requires a.length > 5;     "

//@ assume a[-1] == 0 ;    "

//@ requires a != null;     "

//@ requires a.length > 5;     "

//@ requires b.length > 5;     "

//@ assume a[1] == 5 ;    "

//@ assert b[1] == 5 ;    "

//@ requires a != null;     "

//@ requires a.length > 5;     "

//@ assume a[1] == 5 ;    "

//@ assume a == b ;    "

//@ assert b[1] ==5 ;    "

//@ assert c != null;    "

//@ assert c.length >= 0;     "

//@ requires a.length > 5;     "

//@ requires a != null;     "

//@ requires a != null;     "

//@ requires a.length > 5;     "

//@ requires a != null;     "

//@ requires a.length > 5;     "

//@ requires b.length > 5;     "

//@ assert b[1] ==5 ;    "

//@ requires a != null;     "

//@ requires a.length > 5;     " // Line 25

//@ assume a == b ;    "

//@ assert b[1] ==5 ;    "

//@ requires a.length > 3;     "

//@ assignable \\everything;     "

//@ requires a != null;     "

//@ assignable \\everything;     "

//@ requires a != null && a.length > 3;     "

//@ assignable \\everything;     "

//@ ensures \\result == \\old(a[0]);     "

//@ requires a != null && a.length > 3;     "

//@ assignable \\everything;     "

//@ ensures \\result == \\old(a[0]);     " // Line 26

//@ requires a != null && a.length > 3 && i >= 0 && i <= 1;     "

//@ assignable \\everything;     "

//@ ensures \\result == \\old(a[0]);     "

//@ assert f > 0 ;    "

//@ assume o == this ;    "

//@ assert f > 0 ;    "

//@ assignable \\everything;     "

//@ ensures \\result == 2;     "

//@ assignable \\everything;     "

//@ ensures \\result == 10;     "

//@ requires o != null;     "

//@ assignable \\everything;     "

//@ ensures \\result == 1;     "

//@ assignable \\everything;     "

//@ ensures b ==> \\result == 2;     "

//@ assignable \\everything;     "

//@ ensures b ==> \\result == 10;     "

//@ requires this != o && o != null;     "

//@ assignable \\everything;     "

//@ ensures \\result == 1;     "

//@ ensures (\\let int k = i; \\result == k);    "

//@ ensures (\\let int k = 1; \\result == k);    "

//@ requires i >= 0;    "

//@ requires i >= 0;    "

//@ ensures (\\let int k = i, int j = k; \\result == j);    "

//@ ensures (\\let int k = 1, int j = k; \\result == j);    "


//@ requires i != 0;     "

//@ requires i != 0;     "


//@ requires a.length == 10;    "

//@ requires a.length == 10;    "

//@ requires a.length == 10 && i >= 0;    "

//@ requires a.length == 10;    "

//@ requires a.length == 10;    "

//@ requires a.length == 10;    "

//@ requires i >= 3;    "

//@ requires i <= 8;    "

//@ requires a.length == 10;    "

//@ requires a.length == 10;    "

//@ requires i > 1 && a.length == 10;    "

//@ requires i < 5 && a.length == 10;    "

//@ requires a.length == 10;    "

//@ requires a.length == 10;    "

//@ requires a.length == 10;    "

//@ requires i >= 3;    "

//@ requires i <= 8;    "

//@ requires a.length == 10;    "

//@ ensures \\result == a[1];    "

//@ requires a.length == 10;    "

//@ ensures \\result == a[0];    "

/*@ nullable_by_default*/



//@ assert ooo != null;    "

//@ assert ooo instanceof TestJava;    "

/*@ nullable_by_default*/



//@ assert ooo != null;    "

//@ assert ooo instanceof TestJava;    "

//@ assignable ooo;    "

//@ assert x < 3 ;    "

//@ assert x < 4 ;    "

//@ assert x == 13 ;    "

//@ assert y == 11 ;    "

//@ requires j < 1000 && -1000 < j; ensures \\result == j+j+1;    "

//@ requires j != 0;    "

//@ requires t != null;    "

//@ requires i != 0;    "

//@ requires t != null;    "

//@ requires i != 0;    "

//@ assignable \\everything;    "

//@ ensures \\result == j;    "

//@ assignable t.f;    "

//@ requires t != null;    "

//@ requires i != 0;    "

//@ assignable \\everything;    "

//@ requires i != 0;    "

//@ assignable \\everything;    "

//@ requires a.length == 4;    "

//@ requires i != 0;    "

//@ assignable \\everything;    "

//@ requires a.length == 4;    "

//@ requires i != 0;    "

//@ assignable \\everything;    "

//@ requires a.length == 4;    "

//@ assignable \\everything;    "

//@ requires a.length == 4;    "

//@ requires i != 0;    "

//@ assignable \\everything;    "

//@ assert x == 33 ;    "

//@ assert y == 31 ;    "

/*@ nullable*/
//@ requires i < a.length;     "

//@ requires i >= 0;     "

//@ requires i >= 0 && i < a.length;     "

//@ assume a != null && a.length > 1;    "

//@ assume a != null && a.length > 1 && i != null;    "

//@ assume a != null && a.length > 1 && i != null;    "

//@ assume \\elemtype(\\typeof(a)) == \\type(Integer);    "

//@ assume a != null && a.length > 1 && i != null;    "

//@ assume a != null && a.length > 1;    "

//@ assume a != null && a.length > 1 && i != null;    "

//@ assume a != null && a.length > 1 && i != null;    "

//@ assume \\elemtype(\\typeof(a)) == \\type(String);    "

//@ assume a != null && a.length > 1 && i != null;    "

//@ assume a != null && a.length > 1 && i != null;    "

//@ assume a != null && a.length > 1 && i != null;    "

//@ assume a != null && a.length > 1 && i != null;    "

//@ assume \\type(B) <: \\elemtype(\\typeof(a));    "

//@ assume a != null && a.length > 1 && i != null;    "

//@ public invariant b != null && b.length == 20;    "

//@ assert e instanceof NullPointerException || e instanceof ArithmeticException;    "

//@ signals_only NullPointerException, ArithmeticException;    "

//@ signals_only NullPointerException;    "

//@ public invariant b != null && b.length == 20;    "

//@ public invariant b != null && b.length == 20;    "

//@ public invariant b != null && b.length == 20;    "

//@ also public normal_behavior    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 2;    "

//@ assert TestJava.flag == 1;    "

//@ also    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 2;    "

//@ assert TestJava.flag == 1;    "

/*@ pure */
//@ also    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 1;    "

//@ signals (Exception e) TestJava.flag == 10;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 2;    "

//@ assert (\\lbl FLAG TestJava.flag) == 0 || TestJava.flag == 1|| TestJava.flag == 10;    "

//@ also    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 1;    "

//@ signals (Exception e) TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 2;    "

//@ assert TestJava.flag == 1;    "

//@ also public normal_behavior    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 1;    "

//@ also public normal_behavior    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 2;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;    "

/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ signals_only EE1;    "

//@ signals (Exception e) TestJava.flag == 1;    "

/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ signals_only EE2;    "

//@ signals (Exception e) TestJava.flag == 2;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 1;    " // not feasible line 34

//@ assert TestJava.flag == 1;    "

//@ assert e instanceof EE3 ;    " // Line 37

/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ signals_only EE1;    "

//@ signals (Exception e) TestJava.flag == 1;    "

/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ signals_only EE2;    "

//@ signals (Exception e) TestJava.flag == 2;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;    " // not feasible

//@ assert e instanceof EE3 ;    " // Line 36

/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
//@     "

/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag,this.autocloseableContent;    "

//@ signals_only EE1;    "

//@ signals (Exception e) TestJava.flag == 1;    "

//@     "

/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag,this.autocloseableContent;    "

//@ signals_only EE2;    "

//@ signals (Exception e) TestJava.flag == 2;    "

//@ requires flag == 0;    " // Line 23

//@ assignable flag;    "

//@ assert TestJava.flag == 0;      "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;    "  // Not feasible

//@ assert TestJava.flag == 2;    "  // Line 34 // SHould be OK

//@ assert e instanceof EE1;    "  // Line 35 // Should be OK

//@ also public normal_behavior    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;    "

//@ also public normal_behavior    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert normal ==> flag == 1;    "

//@ assert !normal ==> flag == 2;    "

//@ also public normal_behavior    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;    "  // FIXME - should not be able to skip the catch block

//@ also    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;    "  // FIXME - should not be able to skip the catch block

//@ also public normal_behavior    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;     "

//@ also    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 5;    "

//@ assert i>0 ;    "

//@ requires i>=0;    "

//@ assert i>0 ;    "

//@ requires i>=0;    "

//@ ensures \\result>0;    "

//@ assume i>0 ;    "

//@ assert i>0 ;    "

//@ requires i>0;    "

//@ assert i>=0 ;    "

//@ requires i>=0;    "

//@ ensures \\result>=0;    "

//@ requires i>0;    "

//@ also    "

//@ requires i==0;    "

//@ assert i>=0 ;    "

//@ assume o.f >0 ;    "

//@ assert f > 0 ;    "

//@ assume o.f >0 ;    "

//@ assume o.f >0 ;    "

//@ assume o == this ;    "

//@ assert f > 0 ;    "

//@ requires a.length > 5;     "

//@ assume a[1] == 0 ;    "

//@ requires a != null;     "

//@ assume a[1] == 0 ;    "

//@ requires a != null;     "

//@ requires a.length > 5;     "

//@ assume a[-1] == 0 ;    "

//@ requires a != null;     "

//@ requires a.length > 5;     "

//@ requires b.length > 5;     "

//@ assume a[1] == 5 ;    "

//@ assert b[1] == 5 ;    "

//@ requires a != null;     "

//@ requires a.length > 5;     "

//@ assume a[1] == 5 ;    "

//@ assume a == b ;    "

//@ assert b[1] ==5 ;    "

//@ assert c != null;    "

//@ assert c.length >= 0;     "

//@ requires a.length > 5;     "

//@ requires a != null;     "

//@ requires a != null;     "

//@ requires a.length > 5;     "

//@ requires a != null;     "

//@ requires a.length > 5;     "

//@ requires b.length > 5;     "

//@ assert b[1] ==5 ;    "

//@ requires a != null;     "

//@ requires a.length > 5;     " // Line 25

//@ assume a == b ;    "

//@ assert b[1] ==5 ;    "

//@ requires a.length > 3;     "

//@ assignable \\everything;     "

//@ requires a != null;     "

//@ assignable \\everything;     "

//@ requires a != null && a.length > 3;     "

//@ assignable \\everything;     "

//@ ensures \\result == \\old(a[0]);     "

//@ requires a != null && a.length > 3;     "

//@ assignable \\everything;     "

//@ ensures \\result == \\old(a[0]);     " // Line 26

//@ requires a != null && a.length > 3 && i >= 0 && i <= 1;     "

//@ assignable \\everything;     "

//@ ensures \\result == \\old(a[0]);     "

//@ assert f > 0 ;    "

//@ assume o == this ;    "

//@ assert f > 0 ;    "

//@ assignable \\everything;     "

//@ ensures \\result == 2;     "

//@ assignable \\everything;     "

//@ ensures \\result == 10;     "

//@ requires o != null;     "

//@ assignable \\everything;     "

//@ ensures \\result == 1;     "

//@ assignable \\everything;     "

//@ ensures b ==> \\result == 2;     "

//@ assignable \\everything;     "

//@ ensures b ==> \\result == 10;     "

//@ requires this != o && o != null;     "

//@ assignable \\everything;     "

//@ ensures \\result == 1;     "

//@ ensures (\\let int k = i; \\result == k);    "

//@ ensures (\\let int k = 1; \\result == k);    "

//@ requires i >= 0;    "

//@ requires i >= 0;    "

//@ ensures (\\let int k = i, int j = k; \\result == j);    "

//@ ensures (\\let int k = 1, int j = k; \\result == j);    "


//@ requires i != 0;     "

//@ requires i != 0;     "


//@ requires a.length == 10;    "

//@ requires a.length == 10;    "

//@ requires a.length == 10 && i >= 0;    "

//@ requires a.length == 10;    "

//@ requires a.length == 10;    "

//@ requires a.length == 10;    "

//@ requires i >= 3;    "

//@ requires i <= 8;    "

//@ requires a.length == 10;    "

//@ requires a.length == 10;    "

//@ requires i > 1 && a.length == 10;    "

//@ requires i < 5 && a.length == 10;    "

//@ requires a.length == 10;    "

//@ requires a.length == 10;    "

//@ requires a.length == 10;    "

//@ requires i >= 3;    "

//@ requires i <= 8;    "

//@ requires a.length == 10;    "

//@ ensures \\result == a[1];    "

//@ requires a.length == 10;    "

//@ ensures \\result == a[0];    "

/*@ nullable_by_default*/



//@ assert ooo != null;    "

//@ assert ooo instanceof TestJava;    "

/*@ nullable_by_default*/



//@ assert ooo != null;    "

//@ assert ooo instanceof TestJava;    "

//@ assignable ooo;    "

//@ assert x < 3 ;    "

//@ assert x < 4 ;    "

//@ assert x == 13 ;    "

//@ assert y == 11 ;    "

//@ requires j < 1000 && -1000 < j; ensures \\result == j+j+1;    "

//@ requires j != 0;    "

//@ requires t != null;    "

//@ requires i != 0;    "

//@ requires t != null;    "

//@ requires i != 0;    "

//@ assignable \\everything;    "

//@ ensures \\result == j;    "

//@ assignable t.f;    "

//@ requires t != null;    "

//@ requires i != 0;    "

//@ assignable \\everything;    "

//@ requires i != 0;    "

//@ assignable \\everything;    "

//@ requires a.length == 4;    "

//@ requires i != 0;    "

//@ assignable \\everything;    "

//@ requires a.length == 4;    "

//@ requires i != 0;    "

//@ assignable \\everything;    "

//@ requires a.length == 4;    "

//@ assignable \\everything;    "

//@ requires a.length == 4;    "

//@ requires i != 0;    "

//@ assignable \\everything;    "

//@ assert x == 33 ;    "

//@ assert y == 31 ;    "

/*@ nullable*/
//@ requires i < a.length;     "

//@ requires i >= 0;     "

//@ requires i >= 0 && i < a.length;     "

//@ assume a != null && a.length > 1;    "

//@ assume a != null && a.length > 1 && i != null;    "

//@ assume a != null && a.length > 1 && i != null;    "

//@ assume \\elemtype(\\typeof(a)) == \\type(Integer);    "

//@ assume a != null && a.length > 1 && i != null;    "

//@ assume a != null && a.length > 1;    "

//@ assume a != null && a.length > 1 && i != null;    "

//@ assume a != null && a.length > 1 && i != null;    "

//@ assume \\elemtype(\\typeof(a)) == \\type(String);    "

//@ assume a != null && a.length > 1 && i != null;    "

//@ assume a != null && a.length > 1 && i != null;    "

//@ assume a != null && a.length > 1 && i != null;    "

//@ assume a != null && a.length > 1 && i != null;    "

//@ assume \\type(B) <: \\elemtype(\\typeof(a));    "

//@ assume a != null && a.length > 1 && i != null;    "

//@ public invariant b != null && b.length == 20;    "

//@ assert e instanceof NullPointerException || e instanceof ArithmeticException;    "

//@ signals_only NullPointerException, ArithmeticException;    "

//@ signals_only NullPointerException;    "

//@ public invariant b != null && b.length == 20;    "

//@ public invariant b != null && b.length == 20;    "

//@ public invariant b != null && b.length == 20;    "

//@ also public normal_behavior    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 2;    "

//@ assert TestJava.flag == 1;    "

//@ also    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 2;    "

//@ assert TestJava.flag == 1;    "

/*@ pure */
//@ also    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 1;    "

//@ signals (Exception e) TestJava.flag == 10;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 2;    "

//@ assert (\\lbl FLAG TestJava.flag) == 0 || TestJava.flag == 1|| TestJava.flag == 10;    "

//@ also    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 1;    "

//@ signals (Exception e) TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 2;    "

//@ assert TestJava.flag == 1;    "

//@ also public normal_behavior    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 1;    "

//@ also public normal_behavior    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 2;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;    "

/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ signals_only EE1;    "

//@ signals (Exception e) TestJava.flag == 1;    "

/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ signals_only EE2;    "

//@ signals (Exception e) TestJava.flag == 2;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 1;    " // not feasible line 34

//@ assert TestJava.flag == 1;    "

//@ assert e instanceof EE3 ;    " // Line 37

/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ signals_only EE1;    "

//@ signals (Exception e) TestJava.flag == 1;    "

/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ signals_only EE2;    "

//@ signals (Exception e) TestJava.flag == 2;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;    " // not feasible

//@ assert e instanceof EE3 ;    " // Line 36

/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
//@     "

/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag,this.autocloseableContent;    "

//@ signals_only EE1;    "

//@ signals (Exception e) TestJava.flag == 1;    "

//@     "

/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag,this.autocloseableContent;    "

//@ signals_only EE2;    "

//@ signals (Exception e) TestJava.flag == 2;    "

//@ requires flag == 0;    " // Line 23

//@ assignable flag;    "

//@ assert TestJava.flag == 0;      "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;    "  // Not feasible

//@ assert TestJava.flag == 2;    "  // Line 34 // SHould be OK

//@ assert e instanceof EE1;    "  // Line 35 // Should be OK

//@ also public normal_behavior    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;    "

//@ also public normal_behavior    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert normal ==> flag == 1;    "

//@ assert !normal ==> flag == 2;    "

//@ also public normal_behavior    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;    "  // FIXME - should not be able to skip the catch block

//@ also    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;    "  // FIXME - should not be able to skip the catch block

//@ also public normal_behavior    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;     "

//@ also    "

//@ assignable TestJava.flag, this.autocloseableContent;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 5;    "

//@ assert i == m && q == qq ;    "

//@ assert (k%j) == m && (k/j) == qq;    "

//@ assert i == -m && q == -qq;    "

//@ assert ((-k)%j) == -m && ((-k)/j) == -qq;    "   // Line 15

//@ assert i == m && q == -qq;    "

//@ assert (k%-j) == m && (k/-j) == -qq;    "

//@ assert i == -m && q == qq;    "

//@ assert (-k%-j) == -m && ((-k)/-j) == qq;    "

//@ assert i == m && q == qq ;    "

//@ assert (k%j) == m && (k/j) == qq;    "

//@ assert i == -m && q == -qq;    "

//@ assert ((-k)%j) == -m && ((-k)/j) == -qq;    "   // Line 15

//@ assert i == m && q == -qq;    "

//@ assert (k%-j) == m && (k/-j) == -qq;    "

//@ assert i == -m && q == qq;    "

//@ assert (-k%-j) == -m && ((-k)/-j) == qq;    "

//@ assert i == m && q == qq ;    "

//@ assert (k%j) == m && (k/j) == qq;    "

//@ requires j != 0;    "

//@ requires j != -1 || i != 0x80000000;    "

//@ show i, j, q, r, k;    "

//@ assert (\\lbl KK (q * j + r)) == i;     "

//@ assert k == i;     "

//@ assert (\\lbl QQ (i/j)) * j + (\\lbl RR (i%j)) == i;     "

//@ requires i == 0x80000000 && j == -8322579;     public void mm(int i, int j) { int q = i/j; int r = i%j; //@ show q, r; assert false;     }    "

//@ assert i == m && q == qq ;    "

//@ assert (k%j) == m && (k/j) == qq;    "

//@ assert i == -m && q == -qq;    "

//@ assert ((-k)%j) == -m && ((-k)/j) == -qq;    "   // Line 15

//@ assert i == m && q == -qq;    "

//@ assert (k%-j) == m && (k/-j) == -qq;    "

//@ assert i == -m && q == qq;    "

//@ assert (-k%-j) == -m && ((-k)/-j) == qq;    "

//@ assert i == m && q == qq ;    "

//@ assert (k%j) == m && (k/j) == qq;    "

//@ assert i == -m && q == -qq;    "

//@ assert ((-k)%j) == -m && ((-k)/j) == -qq;    "   // Line 15

//@ assert i == m && q == -qq;    "

//@ assert (k%-j) == m && (k/-j) == -qq;    "

//@ assert i == -m && q == qq;    "

//@ assert (-k%-j) == -m && ((-k)/-j) == qq;    "

//@ requires j != 0 && i > 0 && j > 0;    "

//@ requires j != -1 || i != 0x80000000;    "

//@ show i, j;     "

//@ show q, m;     "

//@ assert (\\lbl K k) == (\\lbl I i);     "

//@ assert (\\lbl SUM (\\lbl PROD (\\lbl D ((\\lbl I i)/(\\lbl J j)))*(\\lbl JJ j)) + (\\lbl M (i%j))) == i;     "  // not OK for i = MIN && j = -1

//@ requires j != 0;    "

//@ show i,j, k, i/j, i%j, (i/j) * j + (i%j);     "

//@ assert k == i;     "

//@ assert (i/j) * j + (i%j) == i;     "

//@ assert i == m && q == qq ;    "

//@ assert (k%j) == m && (k/j) == qq;    "

//@ assert i == -m && q == -qq;    "

//@ assert ((-k)%j) == -m && ((-k)/j) == -qq;    "   // Line 15

//@ assert i == m && q == -qq;    "

//@ assert (k%-j) == m && (k/-j) == -qq;    "

//@ assert i == -m && q == qq;    "

//@ assert (-k%-j) == -m && ((-k)/-j) == qq;    "

//@ assert i == m && q == qq ;    "

//@ assert (k%j) == m && (k/j) == qq;    "

//@ assert i == -m && q == -qq;    "

//@ assert ((-k)%j) == -m && ((-k)/j) == -qq;    "   // Line 15

//@ assert i == m && q == -qq;    "

//@ assert (k%-j) == m && (k/-j) == -qq;    "

//@ assert i == -m && q == qq;    "

//@ assert (-k%-j) == -m && ((-k)/-j) == qq;    "

//@ requires j != 0;    "

//@ show i,j,k,q,m,i/j,i%j; assert k == i;     "

//@ assert (i/j) * j + (i%j) == i;     "

//@ requires j != 0;    "

//@ assert (i%j) == (\\lbl K k);     "  // OK

//@ assert (\\lbl D ((\\lbl I i)/(\\lbl J j))) == (\\lbl M m);     "  // mnot OK for i = MIN && j = -1

//@ requires j != 0;    "

//@ requires i != 0x80000000 || j != -1;    "

//@ assert (i%j) == (\\lbl K k);     "  // OK

//@ assert (i/j) == (\\lbl M m);     "  // OK for i = MIN && j = -1

//@ requires j != 0;    "

//@ assert (i%j) == (\\lbl K k);     "  // OK

//@ assert (\\lbl D ((\\lbl I i)/(\\lbl J j))) == (\\lbl M m);     "  // mnot OK for i = MIN && j = -1

//@ requires j != 0;    "

//@ requires i != 0x8000000000000000L || j != -1;    "

//@ assert (i%j) == (\\lbl K k);     "  // OK

//@ assert (i/j) == (\\lbl M m);     "  // OK for i = MIN && j = -1

//@ requires j != 0;    "

//@ requires i * j <= Integer.MAX_VALUE && i*j >= Integer.MIN_VALUE;    "

//@ show i,j,i*j,(i*j)/j;    "

//@ assert (i*j)/j == i;    "

//@ assert b;    "

//@ requires j != 0;    "

//@ requires i * j <= Long.MAX_VALUE && i*j >= Long.MIN_VALUE;    "

//@ show i,j,i*j,(i*j)/j;    "

//@ assert (i*j)/j == i;    "

//@ assert b;    "

//@ requires j != 0;    "

//@ requires i * j <= Integer.MAX_VALUE && i*j >= Integer.MIN_VALUE;    "

//@ show i,j,i*j,(i*j)/j;    "

//@ assert (i*j)/j == i;    "

//@ assert b;    "

//@ requires j != 0;    "

//@ requires i * j <= Long.MAX_VALUE && i*j >= Long.MIN_VALUE;    "

//@ show i,j,i*j,(i*j)/j;    "

//@ assert (i*j)/j == i;    "

//@ assert b;    "

//@ requires j != 0;    "

//@ requires i * j <= Integer.MAX_VALUE && i*j >= Integer.MIN_VALUE;    "

//@ show i,j,i*j,(i*j)/j;    "

//@ assert (i*j)/j == i;    "

//@ assert b;    "

//@ requires j != 0;    "

//@ requires i * j <= Long.MAX_VALUE && i*j >= Long.MIN_VALUE;    "

//@ show i,j,i*j,(i*j)/j;    "

//@ assert (i*j)/j == i;    "

//@ assert b;    "

//@ requires j != 0;    "

//@ ghost int qq = i/j;     "

//@ show i,j,q,qq,m,i/j,i%j,j*q,j*(q+1),j*(q-1),j*q+m;    "

/*@ assert q >= 0; assert i >= j*q; assert i-j < j*(q+1); assert m >= 0 && m < j; assert i == (j*q) + m; */
/*@ assert q <= 0; assert i >= j*q; assert i < j*(q-1);  assert m >= 0 && m < -j; assert i == (j*q) + m; */
/*@ assert q <= 0; assert i <= j*q; assert i > j*(q-1); assert m <= 0 && m > -j; assert i == (j*q) + m; */
/*@ assert q >= 0; assert i <= j*q; assert i > j*(q+1); assert m <= 0 && m > j; assert i == (j*q) + m; */
//@ requires j != 0;    "

//@ requires i != Integer.MIN_VALUE || j != -1;    "

//@ show i,j,q,m,j*q,j*(q+1),j*(q-1),j*q+m;    "

/*@ assert q >= 0; assert i >= j*q; assert i < j*(q+1); assert m >= 0 && m < j; assert i == (j*q) + m; */
/*@ assert q <= 0; assert i >= j*q; assert i < j*(q-1);  assert m >= 0 && m < -j; assert i == (j*q) + m; */
/*@ assert q <= 0; assert i <= j*q; assert i > j*(q-1); assert m <= 0 && m < -j; assert i == (j*q) + m; */
/*@ assert q >= 0; assert i <= j*q; assert i > j*(q+1); assert m <= 0 && m > j; assert i == (j*q) + m; */
//@ requires j != 0;    "

//@ requires i != Integer.MIN_VALUE || j != -1;    "

//@ show i,j;    "

//@ show q,m,j*q,j*(q+1),j*(q-1),j*q+m;    "

/*@ assert q >= 0; assert i >= j*q; assert m >= 0 && m < j; assert i == (j*q) + m; */
/*@ assert q <= 0; assert i >= j*q;  assert m >= 0 && m < -j; assert i == (j*q) + m; */
/*@ assert q <= 0; assert i <= j*q; assert m <= 0 && m < -j; assert i == (j*q) + m; */
/*@ assert q >= 0; assert i <= j*q; assert m <= 0 && m > j; assert i == (j*q) + m; */
//@ assert i == m && q == qq ;    "

//@ assert (k%j) == m && (k/j) == qq;    "

//@ assert i == -m && q == -qq;    "

//@ assert ((-k)%j) == -m && ((-k)/j) == -qq;    "   // Line 15

//@ assert i == m && q == -qq;    "

//@ assert (k%-j) == m && (k/-j) == -qq;    "

//@ assert i == -m && q == qq;    "

//@ assert (-k%-j) == -m && ((-k)/-j) == qq;    "

//@ assert i == m && q == qq ;    "

//@ assert (k%j) == m && (k/j) == qq;    "

//@ assert i == -m && q == -qq;    "

//@ assert ((-k)%j) == -m && ((-k)/j) == -qq;    "   // Line 15

//@ assert i == m && q == -qq;    "

//@ assert (k%-j) == m && (k/-j) == -qq;    "

//@ assert i == -m && q == qq;    "

//@ assert (-k%-j) == -m && ((-k)/-j) == qq;    "

//@ assert i == m && q == qq ;    "

//@ assert (k%j) == m && (k/j) == qq;    "

//@ requires j != 0;    "

//@ requires j != -1 || i != 0x80000000;    "

//@ show i, j, q, r, k;    "

//@ assert (\\lbl KK (q * j + r)) == i;     "

//@ assert k == i;     "

//@ assert (\\lbl QQ (i/j)) * j + (\\lbl RR (i%j)) == i;     "

//@ requires i == 0x80000000 && j == -8322579;     public void mm(int i, int j) { int q = i/j; int r = i%j; //@ show q, r; assert false;     }    "

//@ assert i == m && q == qq ;    "

//@ assert (k%j) == m && (k/j) == qq;    "

//@ assert i == -m && q == -qq;    "

//@ assert ((-k)%j) == -m && ((-k)/j) == -qq;    "   // Line 15

//@ assert i == m && q == -qq;    "

//@ assert (k%-j) == m && (k/-j) == -qq;    "

//@ assert i == -m && q == qq;    "

//@ assert (-k%-j) == -m && ((-k)/-j) == qq;    "

//@ assert i == m && q == qq ;    "

//@ assert (k%j) == m && (k/j) == qq;    "

//@ assert i == -m && q == -qq;    "

//@ assert ((-k)%j) == -m && ((-k)/j) == -qq;    "   // Line 15

//@ assert i == m && q == -qq;    "

//@ assert (k%-j) == m && (k/-j) == -qq;    "

//@ assert i == -m && q == qq;    "

//@ assert (-k%-j) == -m && ((-k)/-j) == qq;    "

//@ requires j != 0 && i > 0 && j > 0;    "

//@ requires j != -1 || i != 0x80000000;    "

//@ show i, j;     "

//@ show q, m;     "

//@ assert (\\lbl K k) == (\\lbl I i);     "

//@ assert (\\lbl SUM (\\lbl PROD (\\lbl D ((\\lbl I i)/(\\lbl J j)))*(\\lbl JJ j)) + (\\lbl M (i%j))) == i;     "  // not OK for i = MIN && j = -1

//@ requires j != 0;    "

//@ show i,j, k, i/j, i%j, (i/j) * j + (i%j);     "

//@ assert k == i;     "

//@ assert (i/j) * j + (i%j) == i;     "

//@ assert i == m && q == qq ;    "

//@ assert (k%j) == m && (k/j) == qq;    "

//@ assert i == -m && q == -qq;    "

//@ assert ((-k)%j) == -m && ((-k)/j) == -qq;    "   // Line 15

//@ assert i == m && q == -qq;    "

//@ assert (k%-j) == m && (k/-j) == -qq;    "

//@ assert i == -m && q == qq;    "

//@ assert (-k%-j) == -m && ((-k)/-j) == qq;    "

//@ assert i == m && q == qq ;    "

//@ assert (k%j) == m && (k/j) == qq;    "

//@ assert i == -m && q == -qq;    "

//@ assert ((-k)%j) == -m && ((-k)/j) == -qq;    "   // Line 15

//@ assert i == m && q == -qq;    "

//@ assert (k%-j) == m && (k/-j) == -qq;    "

//@ assert i == -m && q == qq;    "

//@ assert (-k%-j) == -m && ((-k)/-j) == qq;    "

//@ requires j != 0;    "

//@ show i,j,k,q,m,i/j,i%j; assert k == i;     "

//@ assert (i/j) * j + (i%j) == i;     "

//@ requires j != 0;    "

//@ assert (i%j) == (\\lbl K k);     "  // OK

//@ assert (\\lbl D ((\\lbl I i)/(\\lbl J j))) == (\\lbl M m);     "  // mnot OK for i = MIN && j = -1

//@ requires j != 0;    "

//@ requires i != 0x80000000 || j != -1;    "

//@ assert (i%j) == (\\lbl K k);     "  // OK

//@ assert (i/j) == (\\lbl M m);     "  // OK for i = MIN && j = -1

//@ requires j != 0;    "

//@ assert (i%j) == (\\lbl K k);     "  // OK

//@ assert (\\lbl D ((\\lbl I i)/(\\lbl J j))) == (\\lbl M m);     "  // mnot OK for i = MIN && j = -1

//@ requires j != 0;    "

//@ requires i != 0x8000000000000000L || j != -1;    "

//@ assert (i%j) == (\\lbl K k);     "  // OK

//@ assert (i/j) == (\\lbl M m);     "  // OK for i = MIN && j = -1

//@ requires j != 0;    "

//@ requires i * j <= Integer.MAX_VALUE && i*j >= Integer.MIN_VALUE;    "

//@ show i,j,i*j,(i*j)/j;    "

//@ assert (i*j)/j == i;    "

//@ assert b;    "

//@ requires j != 0;    "

//@ requires i * j <= Long.MAX_VALUE && i*j >= Long.MIN_VALUE;    "

//@ show i,j,i*j,(i*j)/j;    "

//@ assert (i*j)/j == i;    "

//@ assert b;    "

//@ requires j != 0;    "

//@ requires i * j <= Integer.MAX_VALUE && i*j >= Integer.MIN_VALUE;    "

//@ show i,j,i*j,(i*j)/j;    "

//@ assert (i*j)/j == i;    "

//@ assert b;    "

//@ requires j != 0;    "

//@ requires i * j <= Long.MAX_VALUE && i*j >= Long.MIN_VALUE;    "

//@ show i,j,i*j,(i*j)/j;    "

//@ assert (i*j)/j == i;    "

//@ assert b;    "

//@ requires j != 0;    "

//@ requires i * j <= Integer.MAX_VALUE && i*j >= Integer.MIN_VALUE;    "

//@ show i,j,i*j,(i*j)/j;    "

//@ assert (i*j)/j == i;    "

//@ assert b;    "

//@ requires j != 0;    "

//@ requires i * j <= Long.MAX_VALUE && i*j >= Long.MIN_VALUE;    "

//@ show i,j,i*j,(i*j)/j;    "

//@ assert (i*j)/j == i;    "

//@ assert b;    "

//@ requires j != 0;    "

//@ ghost int qq = i/j;     "

//@ show i,j,q,qq,m,i/j,i%j,j*q,j*(q+1),j*(q-1),j*q+m;    "

/*@ assert q >= 0; assert i >= j*q; assert i-j < j*(q+1); assert m >= 0 && m < j; assert i == (j*q) + m; */
/*@ assert q <= 0; assert i >= j*q; assert i < j*(q-1);  assert m >= 0 && m < -j; assert i == (j*q) + m; */
/*@ assert q <= 0; assert i <= j*q; assert i > j*(q-1); assert m <= 0 && m > -j; assert i == (j*q) + m; */
/*@ assert q >= 0; assert i <= j*q; assert i > j*(q+1); assert m <= 0 && m > j; assert i == (j*q) + m; */
//@ requires j != 0;    "

//@ requires i != Integer.MIN_VALUE || j != -1;    "

//@ show i,j,q,m,j*q,j*(q+1),j*(q-1),j*q+m;    "

/*@ assert q >= 0; assert i >= j*q; assert i < j*(q+1); assert m >= 0 && m < j; assert i == (j*q) + m; */
/*@ assert q <= 0; assert i >= j*q; assert i < j*(q-1);  assert m >= 0 && m < -j; assert i == (j*q) + m; */
/*@ assert q <= 0; assert i <= j*q; assert i > j*(q-1); assert m <= 0 && m < -j; assert i == (j*q) + m; */
/*@ assert q >= 0; assert i <= j*q; assert i > j*(q+1); assert m <= 0 && m > j; assert i == (j*q) + m; */
//@ requires j != 0;    "

//@ requires i != Integer.MIN_VALUE || j != -1;    "

//@ show i,j;    "

//@ show q,m,j*q,j*(q+1),j*(q-1),j*q+m;    "

/*@ assert q >= 0; assert i >= j*q; assert m >= 0 && m < j; assert i == (j*q) + m; */
/*@ assert q <= 0; assert i >= j*q;  assert m >= 0 && m < -j; assert i == (j*q) + m; */
/*@ assert q <= 0; assert i <= j*q; assert m <= 0 && m < -j; assert i == (j*q) + m; */
/*@ assert q >= 0; assert i <= j*q; assert m <= 0 && m > j; assert i == (j*q) + m; */
//@ assert i == m && q == qq ;    "

//@ assert (k%j) == m && (k/j) == qq;    "

//@ assert i == -m && q == -qq;    "

//@ assert ((-k)%j) == -m && ((-k)/j) == -qq;    "   // Line 15

//@ assert i == m && q == -qq;    "

//@ assert (k%-j) == m && (k/-j) == -qq;    "

//@ assert i == -m && q == qq;    "

//@ assert (-k%-j) == -m && ((-k)/-j) == qq;    "

//@ assert i == m && q == qq ;    "

//@ assert (k%j) == m && (k/j) == qq;    "

//@ assert i == -m && q == -qq;    "

//@ assert ((-k)%j) == -m && ((-k)/j) == -qq;    "   // Line 15

//@ assert i == m && q == -qq;    "

//@ assert (k%-j) == m && (k/-j) == -qq;    "

//@ assert i == -m && q == qq;    "

//@ assert (-k%-j) == -m && ((-k)/-j) == qq;    "

//@ assert i == m && q == qq ;    "

//@ assert (k%j) == m && (k/j) == qq;    "

//@ requires j != 0;    "

//@ requires j != -1 || i != 0x80000000;    "

//@ show i, j, q, r, k;    "

//@ assert (\\lbl KK (q * j + r)) == i;     "

//@ assert k == i;     "

//@ assert (\\lbl QQ (i/j)) * j + (\\lbl RR (i%j)) == i;     "

//@ requires i == 0x80000000 && j == -8322579;     public void mm(int i, int j) { int q = i/j; int r = i%j; //@ show q, r; assert false;     }    "

//@ assert i == m && q == qq ;    "

//@ assert (k%j) == m && (k/j) == qq;    "

//@ assert i == -m && q == -qq;    "

//@ assert ((-k)%j) == -m && ((-k)/j) == -qq;    "   // Line 15

//@ assert i == m && q == -qq;    "

//@ assert (k%-j) == m && (k/-j) == -qq;    "

//@ assert i == -m && q == qq;    "

//@ assert (-k%-j) == -m && ((-k)/-j) == qq;    "

//@ assert i == m && q == qq ;    "

//@ assert (k%j) == m && (k/j) == qq;    "

//@ assert i == -m && q == -qq;    "

//@ assert ((-k)%j) == -m && ((-k)/j) == -qq;    "   // Line 15

//@ assert i == m && q == -qq;    "

//@ assert (k%-j) == m && (k/-j) == -qq;    "

//@ assert i == -m && q == qq;    "

//@ assert (-k%-j) == -m && ((-k)/-j) == qq;    "

//@ requires j != 0 && i > 0 && j > 0;    "

//@ requires j != -1 || i != 0x80000000;    "

//@ show i, j;     "

//@ show q, m;     "

//@ assert (\\lbl K k) == (\\lbl I i);     "

//@ assert (\\lbl SUM (\\lbl PROD (\\lbl D ((\\lbl I i)/(\\lbl J j)))*(\\lbl JJ j)) + (\\lbl M (i%j))) == i;     "  // not OK for i = MIN && j = -1

//@ requires j != 0;    "

//@ show i,j, k, i/j, i%j, (i/j) * j + (i%j);     "

//@ assert k == i;     "

//@ assert (i/j) * j + (i%j) == i;     "

//@ assert i == m && q == qq ;    "

//@ assert (k%j) == m && (k/j) == qq;    "

//@ assert i == -m && q == -qq;    "

//@ assert ((-k)%j) == -m && ((-k)/j) == -qq;    "   // Line 15

//@ assert i == m && q == -qq;    "

//@ assert (k%-j) == m && (k/-j) == -qq;    "

//@ assert i == -m && q == qq;    "

//@ assert (-k%-j) == -m && ((-k)/-j) == qq;    "

//@ assert i == m && q == qq ;    "

//@ assert (k%j) == m && (k/j) == qq;    "

//@ assert i == -m && q == -qq;    "

//@ assert ((-k)%j) == -m && ((-k)/j) == -qq;    "   // Line 15

//@ assert i == m && q == -qq;    "

//@ assert (k%-j) == m && (k/-j) == -qq;    "

//@ assert i == -m && q == qq;    "

//@ assert (-k%-j) == -m && ((-k)/-j) == qq;    "

//@ requires j != 0;    "

//@ show i,j,k,q,m,i/j,i%j; assert k == i;     "

//@ assert (i/j) * j + (i%j) == i;     "

//@ requires j != 0;    "

//@ assert (i%j) == (\\lbl K k);     "  // OK

//@ assert (\\lbl D ((\\lbl I i)/(\\lbl J j))) == (\\lbl M m);     "  // mnot OK for i = MIN && j = -1

//@ requires j != 0;    "

//@ requires i != 0x80000000 || j != -1;    "

//@ assert (i%j) == (\\lbl K k);     "  // OK

//@ assert (i/j) == (\\lbl M m);     "  // OK for i = MIN && j = -1

//@ requires j != 0;    "

//@ assert (i%j) == (\\lbl K k);     "  // OK

//@ assert (\\lbl D ((\\lbl I i)/(\\lbl J j))) == (\\lbl M m);     "  // mnot OK for i = MIN && j = -1

//@ requires j != 0;    "

//@ requires i != 0x8000000000000000L || j != -1;    "

//@ assert (i%j) == (\\lbl K k);     "  // OK

//@ assert (i/j) == (\\lbl M m);     "  // OK for i = MIN && j = -1

//@ requires j != 0;    "

//@ requires i * j <= Integer.MAX_VALUE && i*j >= Integer.MIN_VALUE;    "

//@ show i,j,i*j,(i*j)/j;    "

//@ assert (i*j)/j == i;    "

//@ assert b;    "

//@ requires j != 0;    "

//@ requires i * j <= Long.MAX_VALUE && i*j >= Long.MIN_VALUE;    "

//@ show i,j,i*j,(i*j)/j;    "

//@ assert (i*j)/j == i;    "

//@ assert b;    "

//@ requires j != 0;    "

//@ requires i * j <= Integer.MAX_VALUE && i*j >= Integer.MIN_VALUE;    "

//@ show i,j,i*j,(i*j)/j;    "

//@ assert (i*j)/j == i;    "

//@ assert b;    "

//@ requires j != 0;    "

//@ requires i * j <= Long.MAX_VALUE && i*j >= Long.MIN_VALUE;    "

//@ show i,j,i*j,(i*j)/j;    "

//@ assert (i*j)/j == i;    "

//@ assert b;    "

//@ requires j != 0;    "

//@ requires i * j <= Integer.MAX_VALUE && i*j >= Integer.MIN_VALUE;    "

//@ show i,j,i*j,(i*j)/j;    "

//@ assert (i*j)/j == i;    "

//@ assert b;    "

//@ requires j != 0;    "

//@ requires i * j <= Long.MAX_VALUE && i*j >= Long.MIN_VALUE;    "

//@ show i,j,i*j,(i*j)/j;    "

//@ assert (i*j)/j == i;    "

//@ assert b;    "

//@ requires j != 0;    "

//@ ghost int qq = i/j;     "

//@ show i,j,q,qq,m,i/j,i%j,j*q,j*(q+1),j*(q-1),j*q+m;    "

/*@ assert q >= 0; assert i >= j*q; assert i-j < j*(q+1); assert m >= 0 && m < j; assert i == (j*q) + m; */
/*@ assert q <= 0; assert i >= j*q; assert i < j*(q-1);  assert m >= 0 && m < -j; assert i == (j*q) + m; */
/*@ assert q <= 0; assert i <= j*q; assert i > j*(q-1); assert m <= 0 && m > -j; assert i == (j*q) + m; */
/*@ assert q >= 0; assert i <= j*q; assert i > j*(q+1); assert m <= 0 && m > j; assert i == (j*q) + m; */
//@ requires j != 0;    "

//@ requires i != Integer.MIN_VALUE || j != -1;    "

//@ show i,j,q,m,j*q,j*(q+1),j*(q-1),j*q+m;    "

/*@ assert q >= 0; assert i >= j*q; assert i < j*(q+1); assert m >= 0 && m < j; assert i == (j*q) + m; */
/*@ assert q <= 0; assert i >= j*q; assert i < j*(q-1);  assert m >= 0 && m < -j; assert i == (j*q) + m; */
/*@ assert q <= 0; assert i <= j*q; assert i > j*(q-1); assert m <= 0 && m < -j; assert i == (j*q) + m; */
/*@ assert q >= 0; assert i <= j*q; assert i > j*(q+1); assert m <= 0 && m > j; assert i == (j*q) + m; */
//@ requires j != 0;    "

//@ requires i != Integer.MIN_VALUE || j != -1;    "

//@ show i,j;    "

//@ show q,m,j*q,j*(q+1),j*(q-1),j*q+m;    "

/*@ assert q >= 0; assert i >= j*q; assert m >= 0 && m < j; assert i == (j*q) + m; */
/*@ assert q <= 0; assert i >= j*q;  assert m >= 0 && m < -j; assert i == (j*q) + m; */
/*@ assert q <= 0; assert i <= j*q; assert m <= 0 && m < -j; assert i == (j*q) + m; */
/*@ assert q >= 0; assert i <= j*q; assert m <= 0 && m > j; assert i == (j*q) + m; */
//@ assert i == m && q == qq ;    "

//@ assert (k%j) == m && (k/j) == qq;    "

//@ assert i == -m && q == -qq;    "

//@ assert ((-k)%j) == -m && ((-k)/j) == -qq;    "   // Line 15

//@ assert i == m && q == -qq;    "

//@ assert (k%-j) == m && (k/-j) == -qq;    "

//@ assert i == -m && q == qq;    "

//@ assert (-k%-j) == -m && ((-k)/-j) == qq;    "

//@ assert i == m && q == qq ;    "

//@ assert (k%j) == m && (k/j) == qq;    "

//@ assert i == -m && q == -qq;    "

//@ assert ((-k)%j) == -m && ((-k)/j) == -qq;    "   // Line 15

//@ assert i == m && q == -qq;    "

//@ assert (k%-j) == m && (k/-j) == -qq;    "

//@ assert i == -m && q == qq;    "

//@ assert (-k%-j) == -m && ((-k)/-j) == qq;    "

//@ assert i == m && q == qq ;    "

//@ assert (k%j) == m && (k/j) == qq;    "

//@ requires j != 0;    "

//@ requires j != -1 || i != 0x80000000;    "

//@ show i, j, q, r, k;    "

//@ assert (\\lbl KK (q * j + r)) == i;     "

//@ assert k == i;     "

//@ assert (\\lbl QQ (i/j)) * j + (\\lbl RR (i%j)) == i;     "

//@ requires i == 0x80000000 && j == -8322579;     public void mm(int i, int j) { int q = i/j; int r = i%j; //@ show q, r; assert false;     }    "

//@ assert i == m && q == qq ;    "

//@ assert (k%j) == m && (k/j) == qq;    "

//@ assert i == -m && q == -qq;    "

//@ assert ((-k)%j) == -m && ((-k)/j) == -qq;    "   // Line 15

//@ assert i == m && q == -qq;    "

//@ assert (k%-j) == m && (k/-j) == -qq;    "

//@ assert i == -m && q == qq;    "

//@ assert (-k%-j) == -m && ((-k)/-j) == qq;    "

//@ assert i == m && q == qq ;    "

//@ assert (k%j) == m && (k/j) == qq;    "

//@ assert i == -m && q == -qq;    "

//@ assert ((-k)%j) == -m && ((-k)/j) == -qq;    "   // Line 15

//@ assert i == m && q == -qq;    "

//@ assert (k%-j) == m && (k/-j) == -qq;    "

//@ assert i == -m && q == qq;    "

//@ assert (-k%-j) == -m && ((-k)/-j) == qq;    "

//@ requires j != 0 && i > 0 && j > 0;    "

//@ requires j != -1 || i != 0x80000000;    "

//@ show i, j;     "

//@ show q, m;     "

//@ assert (\\lbl K k) == (\\lbl I i);     "

//@ assert (\\lbl SUM (\\lbl PROD (\\lbl D ((\\lbl I i)/(\\lbl J j)))*(\\lbl JJ j)) + (\\lbl M (i%j))) == i;     "  // not OK for i = MIN && j = -1

//@ requires j != 0;    "

//@ show i,j, k, i/j, i%j, (i/j) * j + (i%j);     "

//@ assert k == i;     "

//@ assert (i/j) * j + (i%j) == i;     "

//@ assert i == m && q == qq ;    "

//@ assert (k%j) == m && (k/j) == qq;    "

//@ assert i == -m && q == -qq;    "

//@ assert ((-k)%j) == -m && ((-k)/j) == -qq;    "   // Line 15

//@ assert i == m && q == -qq;    "

//@ assert (k%-j) == m && (k/-j) == -qq;    "

//@ assert i == -m && q == qq;    "

//@ assert (-k%-j) == -m && ((-k)/-j) == qq;    "

//@ assert i == m && q == qq ;    "

//@ assert (k%j) == m && (k/j) == qq;    "

//@ assert i == -m && q == -qq;    "

//@ assert ((-k)%j) == -m && ((-k)/j) == -qq;    "   // Line 15

//@ assert i == m && q == -qq;    "

//@ assert (k%-j) == m && (k/-j) == -qq;    "

//@ assert i == -m && q == qq;    "

//@ assert (-k%-j) == -m && ((-k)/-j) == qq;    "

//@ requires j != 0;    "

//@ show i,j,k,q,m,i/j,i%j; assert k == i;     "

//@ assert (i/j) * j + (i%j) == i;     "

//@ requires j != 0;    "

//@ assert (i%j) == (\\lbl K k);     "  // OK

//@ assert (\\lbl D ((\\lbl I i)/(\\lbl J j))) == (\\lbl M m);     "  // mnot OK for i = MIN && j = -1

//@ requires j != 0;    "

//@ requires i != 0x80000000 || j != -1;    "

//@ assert (i%j) == (\\lbl K k);     "  // OK

//@ assert (i/j) == (\\lbl M m);     "  // OK for i = MIN && j = -1

//@ requires j != 0;    "

//@ assert (i%j) == (\\lbl K k);     "  // OK

//@ assert (\\lbl D ((\\lbl I i)/(\\lbl J j))) == (\\lbl M m);     "  // mnot OK for i = MIN && j = -1

//@ requires j != 0;    "

//@ requires i != 0x8000000000000000L || j != -1;    "

//@ assert (i%j) == (\\lbl K k);     "  // OK

//@ assert (i/j) == (\\lbl M m);     "  // OK for i = MIN && j = -1

//@ requires j != 0;    "

//@ requires i * j <= Integer.MAX_VALUE && i*j >= Integer.MIN_VALUE;    "

//@ show i,j,i*j,(i*j)/j;    "

//@ assert (i*j)/j == i;    "

//@ assert b;    "

//@ requires j != 0;    "

//@ requires i * j <= Long.MAX_VALUE && i*j >= Long.MIN_VALUE;    "

//@ show i,j,i*j,(i*j)/j;    "

//@ assert (i*j)/j == i;    "

//@ assert b;    "

//@ requires j != 0;    "

//@ requires i * j <= Integer.MAX_VALUE && i*j >= Integer.MIN_VALUE;    "

//@ show i,j,i*j,(i*j)/j;    "

//@ assert (i*j)/j == i;    "

//@ assert b;    "

//@ requires j != 0;    "

//@ requires i * j <= Long.MAX_VALUE && i*j >= Long.MIN_VALUE;    "

//@ show i,j,i*j,(i*j)/j;    "

//@ assert (i*j)/j == i;    "

//@ assert b;    "

//@ requires j != 0;    "

//@ requires i * j <= Integer.MAX_VALUE && i*j >= Integer.MIN_VALUE;    "

//@ show i,j,i*j,(i*j)/j;    "

//@ assert (i*j)/j == i;    "

//@ assert b;    "

//@ requires j != 0;    "

//@ requires i * j <= Long.MAX_VALUE && i*j >= Long.MIN_VALUE;    "

//@ show i,j,i*j,(i*j)/j;    "

//@ assert (i*j)/j == i;    "

//@ assert b;    "

//@ requires j != 0;    "

//@ ghost int qq = i/j;     "

//@ show i,j,q,qq,m,i/j,i%j,j*q,j*(q+1),j*(q-1),j*q+m;    "

/*@ assert q >= 0; assert i >= j*q; assert i-j < j*(q+1); assert m >= 0 && m < j; assert i == (j*q) + m; */
/*@ assert q <= 0; assert i >= j*q; assert i < j*(q-1);  assert m >= 0 && m < -j; assert i == (j*q) + m; */
/*@ assert q <= 0; assert i <= j*q; assert i > j*(q-1); assert m <= 0 && m > -j; assert i == (j*q) + m; */
/*@ assert q >= 0; assert i <= j*q; assert i > j*(q+1); assert m <= 0 && m > j; assert i == (j*q) + m; */
//@ requires j != 0;    "

//@ requires i != Integer.MIN_VALUE || j != -1;    "

//@ show i,j,q,m,j*q,j*(q+1),j*(q-1),j*q+m;    "

/*@ assert q >= 0; assert i >= j*q; assert i < j*(q+1); assert m >= 0 && m < j; assert i == (j*q) + m; */
/*@ assert q <= 0; assert i >= j*q; assert i < j*(q-1);  assert m >= 0 && m < -j; assert i == (j*q) + m; */
/*@ assert q <= 0; assert i <= j*q; assert i > j*(q-1); assert m <= 0 && m < -j; assert i == (j*q) + m; */
/*@ assert q >= 0; assert i <= j*q; assert i > j*(q+1); assert m <= 0 && m > j; assert i == (j*q) + m; */
//@ requires j != 0;    "

//@ requires i != Integer.MIN_VALUE || j != -1;    "

//@ show i,j;    "

//@ show q,m,j*q,j*(q+1),j*(q-1),j*q+m;    "

/*@ assert q >= 0; assert i >= j*q; assert m >= 0 && m < j; assert i == (j*q) + m; */
/*@ assert q <= 0; assert i >= j*q;  assert m >= 0 && m < -j; assert i == (j*q) + m; */
/*@ assert q <= 0; assert i <= j*q; assert m <= 0 && m < -j; assert i == (j*q) + m; */
/*@ assert q >= 0; assert i <= j*q; assert m <= 0 && m > j; assert i == (j*q) + m; */
//@ assert i == m && q == qq ;    "

//@ assert (k%j) == m && (k/j) == qq;    "

//@ assert i == -m && q == -qq;    "

//@ assert ((-k)%j) == -m && ((-k)/j) == -qq;    "   // Line 15

//@ assert i == m && q == -qq;    "

//@ assert (k%-j) == m && (k/-j) == -qq;    "

//@ assert i == -m && q == qq;    "

//@ assert (-k%-j) == -m && ((-k)/-j) == qq;    "

//@ assert i == m && q == qq ;    "

//@ assert (k%j) == m && (k/j) == qq;    "

//@ assert i == -m && q == -qq;    "

//@ assert ((-k)%j) == -m && ((-k)/j) == -qq;    "   // Line 15

//@ assert i == m && q == -qq;    "

//@ assert (k%-j) == m && (k/-j) == -qq;    "

//@ assert i == -m && q == qq;    "

//@ assert (-k%-j) == -m && ((-k)/-j) == qq;    "

//@ assert i == m && q == qq ;    "

//@ assert (k%j) == m && (k/j) == qq;    "

//@ requires j != 0;    "

//@ requires j != -1 || i != 0x80000000;    "

//@ show i, j, q, r, k;    "

//@ assert (\\lbl KK (q * j + r)) == i;     "

//@ assert k == i;     "

//@ assert (\\lbl QQ (i/j)) * j + (\\lbl RR (i%j)) == i;     "

//@ requires i == 0x80000000 && j == -8322579;     public void mm(int i, int j) { int q = i/j; int r = i%j; //@ show q, r; assert false;     }    "

//@ assert i == m && q == qq ;    "

//@ assert (k%j) == m && (k/j) == qq;    "

//@ assert i == -m && q == -qq;    "

//@ assert ((-k)%j) == -m && ((-k)/j) == -qq;    "   // Line 15

//@ assert i == m && q == -qq;    "

//@ assert (k%-j) == m && (k/-j) == -qq;    "

//@ assert i == -m && q == qq;    "

//@ assert (-k%-j) == -m && ((-k)/-j) == qq;    "

//@ assert i == m && q == qq ;    "

//@ assert (k%j) == m && (k/j) == qq;    "

//@ assert i == -m && q == -qq;    "

//@ assert ((-k)%j) == -m && ((-k)/j) == -qq;    "   // Line 15

//@ assert i == m && q == -qq;    "

//@ assert (k%-j) == m && (k/-j) == -qq;    "

//@ assert i == -m && q == qq;    "

//@ assert (-k%-j) == -m && ((-k)/-j) == qq;    "

//@ requires j != 0 && i > 0 && j > 0;    "

//@ requires j != -1 || i != 0x80000000;    "

//@ show i, j;     "

//@ show q, m;     "

//@ assert (\\lbl K k) == (\\lbl I i);     "

//@ assert (\\lbl SUM (\\lbl PROD (\\lbl D ((\\lbl I i)/(\\lbl J j)))*(\\lbl JJ j)) + (\\lbl M (i%j))) == i;     "  // not OK for i = MIN && j = -1

//@ requires j != 0;    "

//@ show i,j, k, i/j, i%j, (i/j) * j + (i%j);     "

//@ assert k == i;     "

//@ assert (i/j) * j + (i%j) == i;     "

//@ assert i == m && q == qq ;    "

//@ assert (k%j) == m && (k/j) == qq;    "

//@ assert i == -m && q == -qq;    "

//@ assert ((-k)%j) == -m && ((-k)/j) == -qq;    "   // Line 15

//@ assert i == m && q == -qq;    "

//@ assert (k%-j) == m && (k/-j) == -qq;    "

//@ assert i == -m && q == qq;    "

//@ assert (-k%-j) == -m && ((-k)/-j) == qq;    "

//@ assert i == m && q == qq ;    "

//@ assert (k%j) == m && (k/j) == qq;    "

//@ assert i == -m && q == -qq;    "

//@ assert ((-k)%j) == -m && ((-k)/j) == -qq;    "   // Line 15

//@ assert i == m && q == -qq;    "

//@ assert (k%-j) == m && (k/-j) == -qq;    "

//@ assert i == -m && q == qq;    "

//@ assert (-k%-j) == -m && ((-k)/-j) == qq;    "

//@ requires j != 0;    "

//@ show i,j,k,q,m,i/j,i%j; assert k == i;     "

//@ assert (i/j) * j + (i%j) == i;     "

//@ requires j != 0;    "

//@ assert (i%j) == (\\lbl K k);     "  // OK

//@ assert (\\lbl D ((\\lbl I i)/(\\lbl J j))) == (\\lbl M m);     "  // mnot OK for i = MIN && j = -1

//@ requires j != 0;    "

//@ requires i != 0x80000000 || j != -1;    "

//@ assert (i%j) == (\\lbl K k);     "  // OK

//@ assert (i/j) == (\\lbl M m);     "  // OK for i = MIN && j = -1

//@ requires j != 0;    "

//@ assert (i%j) == (\\lbl K k);     "  // OK

//@ assert (\\lbl D ((\\lbl I i)/(\\lbl J j))) == (\\lbl M m);     "  // mnot OK for i = MIN && j = -1

//@ requires j != 0;    "

//@ requires i != 0x8000000000000000L || j != -1;    "

//@ assert (i%j) == (\\lbl K k);     "  // OK

//@ assert (i/j) == (\\lbl M m);     "  // OK for i = MIN && j = -1

//@ requires j != 0;    "

//@ requires i * j <= Integer.MAX_VALUE && i*j >= Integer.MIN_VALUE;    "

//@ show i,j,i*j,(i*j)/j;    "

//@ assert (i*j)/j == i;    "

//@ assert b;    "

//@ requires j != 0;    "

//@ requires i * j <= Long.MAX_VALUE && i*j >= Long.MIN_VALUE;    "

//@ show i,j,i*j,(i*j)/j;    "

//@ assert (i*j)/j == i;    "

//@ assert b;    "

//@ requires j != 0;    "

//@ requires i * j <= Integer.MAX_VALUE && i*j >= Integer.MIN_VALUE;    "

//@ show i,j,i*j,(i*j)/j;    "

//@ assert (i*j)/j == i;    "

//@ assert b;    "

//@ requires j != 0;    "

//@ requires i * j <= Long.MAX_VALUE && i*j >= Long.MIN_VALUE;    "

//@ show i,j,i*j,(i*j)/j;    "

//@ assert (i*j)/j == i;    "

//@ assert b;    "

//@ requires j != 0;    "

//@ requires i * j <= Integer.MAX_VALUE && i*j >= Integer.MIN_VALUE;    "

//@ show i,j,i*j,(i*j)/j;    "

//@ assert (i*j)/j == i;    "

//@ assert b;    "

//@ requires j != 0;    "

//@ requires i * j <= Long.MAX_VALUE && i*j >= Long.MIN_VALUE;    "

//@ show i,j,i*j,(i*j)/j;    "

//@ assert (i*j)/j == i;    "

//@ assert b;    "

//@ requires j != 0;    "

//@ ghost int qq = i/j;     "

//@ show i,j,q,qq,m,i/j,i%j,j*q,j*(q+1),j*(q-1),j*q+m;    "

/*@ assert q >= 0; assert i >= j*q; assert i-j < j*(q+1); assert m >= 0 && m < j; assert i == (j*q) + m; */
/*@ assert q <= 0; assert i >= j*q; assert i < j*(q-1);  assert m >= 0 && m < -j; assert i == (j*q) + m; */
/*@ assert q <= 0; assert i <= j*q; assert i > j*(q-1); assert m <= 0 && m > -j; assert i == (j*q) + m; */
/*@ assert q >= 0; assert i <= j*q; assert i > j*(q+1); assert m <= 0 && m > j; assert i == (j*q) + m; */
//@ requires j != 0;    "

//@ requires i != Integer.MIN_VALUE || j != -1;    "

//@ show i,j,q,m,j*q,j*(q+1),j*(q-1),j*q+m;    "

/*@ assert q >= 0; assert i >= j*q; assert i < j*(q+1); assert m >= 0 && m < j; assert i == (j*q) + m; */
/*@ assert q <= 0; assert i >= j*q; assert i < j*(q-1);  assert m >= 0 && m < -j; assert i == (j*q) + m; */
/*@ assert q <= 0; assert i <= j*q; assert i > j*(q-1); assert m <= 0 && m < -j; assert i == (j*q) + m; */
/*@ assert q >= 0; assert i <= j*q; assert i > j*(q+1); assert m <= 0 && m > j; assert i == (j*q) + m; */
//@ requires j != 0;    "

//@ requires i != Integer.MIN_VALUE || j != -1;    "

//@ show i,j;    "

//@ show q,m,j*q,j*(q+1),j*(q-1),j*q+m;    "

/*@ assert q >= 0; assert i >= j*q; assert m >= 0 && m < j; assert i == (j*q) + m; */
/*@ assert q <= 0; assert i >= j*q;  assert m >= 0 && m < -j; assert i == (j*q) + m; */
/*@ assert q <= 0; assert i <= j*q; assert m <= 0 && m < -j; assert i == (j*q) + m; */
/*@ assert q >= 0; assert i <= j*q; assert m <= 0 && m > j; assert i == (j*q) + m; */
//@ requires i >= 0;    "

//@ ensures \\result == i;    "

//@ ensures i != 0x80000000 ==> \\safe_math(\\result + i) == 0;    "

//@ ensures i == 0x80000000 ==> \\result == i;    "

/*@ code_java_math spec_bigint_math */
//@ ensures i != 0x8000000000000000L ==> \\safe_math(\\result + i) == 0;    "

//@ ensures i == 0x8000000000000000L ==> \\result == i;    "

/*@ code_java_math */
//@ ensures i != 0x80000000 ==> \\safe_math(\\result + i) == 0;    "

//@ ensures i == 0x80000000 ==> \\result == i;    "

//@ ensures i != 0x8000000000000000L ==> \\safe_math(\\result + i) == 0;    "

//@ ensures i == 0x8000000000000000L ==> \\result == i;    "

//@ ensures \\safe_math(\\result + i) == 0;    "

//@ ensures \\safe_math(\\result + i) == 0;    "

//@ ensures \\safe_math(\\result + i) == 0;    "

//@ ensures \\safe_math(\\result + i) == 0;    "

//@ assume i <= 0x3FFFFFFF;    "

//@ assume i >= (int)(0xC0000000);    "

//@ assume i <= 0x3FFFFFFF;    "

//@ assume i >= (int)(0xC0000000);    "

//@ assume (i < 0) != (j < 0);    "

//@ assume i >= 0;    "

//@ assert k >= 0;    " // Error

//@ assume i >= 0;    "

//@ assert k >= 0;    "

//@ assume i >= 0;    "

//@ assert k >= 0;    "

//@ assume i >= 0;    "

//@ assert k >= 0;    "

//@ requires j !=0 ;     "

//@ requires j !=0;    "

//@ requires j !=0;    "

//@ assume i <= 30000 && i >= -30000;    "

//@ requires i == 70000;    "

//@ ensures \\result == 605032704;    "

//@ requires i == 30000;    "

//@ ensures \\result == 900000000L;    "

//@ assume i <= 30000 && i >= -30000;    "

//@ requires i == 70000;    "

//@ ensures \\result == 605032704L;    "

//@ requires i == 70000;    "

//@ ensures \\result == -605032704L;    "

//@ requires i == 70000;    "

//@ ensures \\result == -605032704L;    "

//@ requires i == 30000;    "

//@ ensures \\result == 900000000L;    "

//@ assume i <= 30000 && i >= -30000;    "

//@ requires i == 70000;    "

//@ ensures \\result == 4900000000L;    "

//@ requires i == 70000;    "

//@ ensures \\result == -4900000000L;    "

//@ requires i == 70000;    "

//@ ensures \\result == 4900000000L;    "

//@ requires i >= 0;    "

//@ ensures \\result == i;    "

//@ ensures i != 0x80000000 ==> \\safe_math(\\result + i) == 0;    "

//@ ensures i == 0x80000000 ==> \\result == i;    "

/*@ code_java_math spec_bigint_math */
//@ ensures i != 0x8000000000000000L ==> \\safe_math(\\result + i) == 0;    "

//@ ensures i == 0x8000000000000000L ==> \\result == i;    "

/*@ code_java_math */
//@ ensures i != 0x80000000 ==> \\safe_math(\\result + i) == 0;    "

//@ ensures i == 0x80000000 ==> \\result == i;    "

//@ ensures i != 0x8000000000000000L ==> \\safe_math(\\result + i) == 0;    "

//@ ensures i == 0x8000000000000000L ==> \\result == i;    "

//@ ensures \\safe_math(\\result + i) == 0;    "

//@ ensures \\safe_math(\\result + i) == 0;    "

//@ ensures \\safe_math(\\result + i) == 0;    "

//@ ensures \\safe_math(\\result + i) == 0;    "

//@ assume i <= 0x3FFFFFFF;    "

//@ assume i >= (int)(0xC0000000);    "

//@ assume i <= 0x3FFFFFFF;    "

//@ assume i >= (int)(0xC0000000);    "

//@ assume (i < 0) != (j < 0);    "

//@ assume i >= 0;    "

//@ assert k >= 0;    " // Error

//@ assume i >= 0;    "

//@ assert k >= 0;    "

//@ assume i >= 0;    "

//@ assert k >= 0;    "

//@ assume i >= 0;    "

//@ assert k >= 0;    "

//@ requires j !=0 ;     "

//@ requires j !=0;    "

//@ requires j !=0;    "

//@ assume i <= 30000 && i >= -30000;    "

//@ requires i == 70000;    "

//@ ensures \\result == 605032704;    "

//@ requires i == 30000;    "

//@ ensures \\result == 900000000L;    "

//@ assume i <= 30000 && i >= -30000;    "

//@ requires i == 70000;    "

//@ ensures \\result == 605032704L;    "

//@ requires i == 70000;    "

//@ ensures \\result == -605032704L;    "

//@ requires i == 70000;    "

//@ ensures \\result == -605032704L;    "

//@ requires i == 30000;    "

//@ ensures \\result == 900000000L;    "

//@ assume i <= 30000 && i >= -30000;    "

//@ requires i == 70000;    "

//@ ensures \\result == 4900000000L;    "

//@ requires i == 70000;    "

//@ ensures \\result == -4900000000L;    "

//@ requires i == 70000;    "

//@ ensures \\result == 4900000000L;    "

//@ requires i >= 0;    "

//@ ensures \\result == i;    "

//@ ensures i != 0x80000000 ==> \\safe_math(\\result + i) == 0;    "

//@ ensures i == 0x80000000 ==> \\result == i;    "

/*@ code_java_math spec_bigint_math */
//@ ensures i != 0x8000000000000000L ==> \\safe_math(\\result + i) == 0;    "

//@ ensures i == 0x8000000000000000L ==> \\result == i;    "

/*@ code_java_math */
//@ ensures i != 0x80000000 ==> \\safe_math(\\result + i) == 0;    "

//@ ensures i == 0x80000000 ==> \\result == i;    "

//@ ensures i != 0x8000000000000000L ==> \\safe_math(\\result + i) == 0;    "

//@ ensures i == 0x8000000000000000L ==> \\result == i;    "

//@ ensures \\safe_math(\\result + i) == 0;    "

//@ ensures \\safe_math(\\result + i) == 0;    "

//@ ensures \\safe_math(\\result + i) == 0;    "

//@ ensures \\safe_math(\\result + i) == 0;    "

//@ assume i <= 0x3FFFFFFF;    "

//@ assume i >= (int)(0xC0000000);    "

//@ assume i <= 0x3FFFFFFF;    "

//@ assume i >= (int)(0xC0000000);    "

//@ assume (i < 0) != (j < 0);    "

//@ assume i >= 0;    "

//@ assert k >= 0;    " // Error

//@ assume i >= 0;    "

//@ assert k >= 0;    "

//@ assume i >= 0;    "

//@ assert k >= 0;    "

//@ assume i >= 0;    "

//@ assert k >= 0;    "

//@ requires j !=0 ;     "

//@ requires j !=0;    "

//@ requires j !=0;    "

//@ assume i <= 30000 && i >= -30000;    "

//@ requires i == 70000;    "

//@ ensures \\result == 605032704;    "

//@ requires i == 30000;    "

//@ ensures \\result == 900000000L;    "

//@ assume i <= 30000 && i >= -30000;    "

//@ requires i == 70000;    "

//@ ensures \\result == 605032704L;    "

//@ requires i == 70000;    "

//@ ensures \\result == -605032704L;    "

//@ requires i == 70000;    "

//@ ensures \\result == -605032704L;    "

//@ requires i == 30000;    "

//@ ensures \\result == 900000000L;    "

//@ assume i <= 30000 && i >= -30000;    "

//@ requires i == 70000;    "

//@ ensures \\result == 4900000000L;    "

//@ requires i == 70000;    "

//@ ensures \\result == -4900000000L;    "

//@ requires i == 70000;    "

//@ ensures \\result == 4900000000L;    "

//@ requires i >= 0;    "

//@ ensures \\result == i;    "

//@ ensures i != 0x80000000 ==> \\safe_math(\\result + i) == 0;    "

//@ ensures i == 0x80000000 ==> \\result == i;    "

/*@ code_java_math spec_bigint_math */
//@ ensures i != 0x8000000000000000L ==> \\safe_math(\\result + i) == 0;    "

//@ ensures i == 0x8000000000000000L ==> \\result == i;    "

/*@ code_java_math */
//@ ensures i != 0x80000000 ==> \\safe_math(\\result + i) == 0;    "

//@ ensures i == 0x80000000 ==> \\result == i;    "

//@ ensures i != 0x8000000000000000L ==> \\safe_math(\\result + i) == 0;    "

//@ ensures i == 0x8000000000000000L ==> \\result == i;    "

//@ ensures \\safe_math(\\result + i) == 0;    "

//@ ensures \\safe_math(\\result + i) == 0;    "

//@ ensures \\safe_math(\\result + i) == 0;    "

//@ ensures \\safe_math(\\result + i) == 0;    "

//@ assume i <= 0x3FFFFFFF;    "

//@ assume i >= (int)(0xC0000000);    "

//@ assume i <= 0x3FFFFFFF;    "

//@ assume i >= (int)(0xC0000000);    "

//@ assume (i < 0) != (j < 0);    "

//@ assume i >= 0;    "

//@ assert k >= 0;    " // Error

//@ assume i >= 0;    "

//@ assert k >= 0;    "

//@ assume i >= 0;    "

//@ assert k >= 0;    "

//@ assume i >= 0;    "

//@ assert k >= 0;    "

//@ requires j !=0 ;     "

//@ requires j !=0;    "

//@ requires j !=0;    "

//@ assume i <= 30000 && i >= -30000;    "

//@ requires i == 70000;    "

//@ ensures \\result == 605032704;    "

//@ requires i == 30000;    "

//@ ensures \\result == 900000000L;    "

//@ assume i <= 30000 && i >= -30000;    "

//@ requires i == 70000;    "

//@ ensures \\result == 605032704L;    "

//@ requires i == 70000;    "

//@ ensures \\result == -605032704L;    "

//@ requires i == 70000;    "

//@ ensures \\result == -605032704L;    "

//@ requires i == 30000;    "

//@ ensures \\result == 900000000L;    "

//@ assume i <= 30000 && i >= -30000;    "

//@ requires i == 70000;    "

//@ ensures \\result == 4900000000L;    "

//@ requires i == 70000;    "

//@ ensures \\result == -4900000000L;    "

//@ requires i == 70000;    "

//@ ensures \\result == 4900000000L;    "

//@ requires i >= 0;    "

//@ ensures \\result == i;    "

//@ ensures i != 0x80000000 ==> \\safe_math(\\result + i) == 0;    "

//@ ensures i == 0x80000000 ==> \\result == i;    "

/*@ code_java_math spec_bigint_math */
//@ ensures i != 0x8000000000000000L ==> \\safe_math(\\result + i) == 0;    "

//@ ensures i == 0x8000000000000000L ==> \\result == i;    "

/*@ code_java_math */
//@ ensures i != 0x80000000 ==> \\safe_math(\\result + i) == 0;    "

//@ ensures i == 0x80000000 ==> \\result == i;    "

//@ ensures i != 0x8000000000000000L ==> \\safe_math(\\result + i) == 0;    "

//@ ensures i == 0x8000000000000000L ==> \\result == i;    "

//@ ensures \\safe_math(\\result + i) == 0;    "

//@ ensures \\safe_math(\\result + i) == 0;    "

//@ ensures \\safe_math(\\result + i) == 0;    "

//@ ensures \\safe_math(\\result + i) == 0;    "

//@ assume i <= 0x3FFFFFFF;    "

//@ assume i >= (int)(0xC0000000);    "

//@ assume i <= 0x3FFFFFFF;    "

//@ assume i >= (int)(0xC0000000);    "

//@ assume (i < 0) != (j < 0);    "

//@ assume i >= 0;    "

//@ assert k >= 0;    " // Error

//@ assume i >= 0;    "

//@ assert k >= 0;    "

//@ assume i >= 0;    "

//@ assert k >= 0;    "

//@ assume i >= 0;    "

//@ assert k >= 0;    "

//@ requires j !=0 ;     "

//@ requires j !=0;    "

//@ requires j !=0;    "

//@ assume i <= 30000 && i >= -30000;    "

//@ requires i == 70000;    "

//@ ensures \\result == 605032704;    "

//@ requires i == 30000;    "

//@ ensures \\result == 900000000L;    "

//@ assume i <= 30000 && i >= -30000;    "

//@ requires i == 70000;    "

//@ ensures \\result == 605032704L;    "

//@ requires i == 70000;    "

//@ ensures \\result == -605032704L;    "

//@ requires i == 70000;    "

//@ ensures \\result == -605032704L;    "

//@ requires i == 30000;    "

//@ ensures \\result == 900000000L;    "

//@ assume i <= 30000 && i >= -30000;    "

//@ requires i == 70000;    "

//@ ensures \\result == 4900000000L;    "

//@ requires i == 70000;    "

//@ ensures \\result == -4900000000L;    "

//@ requires i == 70000;    "

//@ ensures \\result == 4900000000L;    "

//@ requires n <= 0x7ffffff0;    "

//@ ensures n <= \\result;    "

//@ ensures \\result <= n+15;    "

//@ ensures (\\result&15) == 0;    "

//@ pure    "

//@ code_java_math spec_java_math    "

//@ requires n <= 0x7ffffff0;    "

//@ ensures n <= \\result;    "

//@ ensures \\result <= n+15;    "

//@ ensures (\\result&15) == 0;    "

//@ pure    "

//@ code_java_math spec_java_math    "

//@ requires n <= 0x7ffffff0;    "

//@ ensures n <= \\result;    "

//@ ensures \\result <= n+15;    "

//@ ensures (\\result%16) == 0;    "

//@ pure    "

//@ code_java_math spec_java_math    "

//@ ensures n <= \\result;    "

//@ ensures \\result <= n+15;    "

//@ ensures (\\result&15) == 0;    "  // FAILS for very large n, e.g. Integer.MAX_VALUE

//@ pure    "

//@ code_java_math spec_java_math    "

//@ requires n <= Integer.MAX_VALUE-15;    "

//@ ensures n <= \\result;    "

//@ ensures \\result <= n+15;    "

//@ ensures (\\result&15) == 0;    "

//@ pure    "

//@ code_java_math spec_java_math    "

//@ requires true;    "

//@ code_java_math spec_java_math    "

//@ requires true;    "

//@ code_java_math spec_java_math    "

//@ requires n <= 0x7ffffff0;    "

//@ ensures n <= \\result;    "

//@ ensures \\result <= n+15;    "

//@ ensures (\\result&15) == 0;    "

//@ pure    "

//@ code_java_math spec_java_math    "

//@ requires n <= 0x7ffffff0;    "

//@ ensures n <= \\result;    "

//@ ensures \\result <= n+15;    "

//@ ensures (\\result&15) == 0;    "

//@ pure    "

//@ code_java_math spec_java_math    "

//@ requires (i&5) == 1; pure     "

//@ requires A.mm(1);    "

//@ requires (i&5) == 1; pure     "

//@ requires A.mm(1);    "

//@ requires (i&5) == 1; pure     "

//@ requires A.mm(1);    "

//@ requires n <= 0x7ffffff0;    "

//@ ensures n <= \\result;    "

//@ ensures \\result <= n+15;    "

//@ ensures (\\result&15) == 0;    "

//@ pure    "

//@ code_java_math spec_java_math    "

//@ requires n <= 0x7ffffff0;    "

//@ ensures n <= \\result;    "

//@ ensures \\result <= n+15;    "

//@ ensures (\\result&15) == 0;    "

//@ pure    "

//@ code_java_math spec_java_math    "

//@ requires n <= 0x7ffffff0;    "

//@ ensures n <= \\result;    "

//@ ensures \\result <= n+15;    "

//@ ensures (\\result%16) == 0;    "

//@ pure    "

//@ code_java_math spec_java_math    "

//@ ensures n <= \\result;    "

//@ ensures \\result <= n+15;    "

//@ ensures (\\result&15) == 0;    "  // FAILS for very large n, e.g. Integer.MAX_VALUE

//@ pure    "

//@ code_java_math spec_java_math    "

//@ requires n <= Integer.MAX_VALUE-15;    "

//@ ensures n <= \\result;    "

//@ ensures \\result <= n+15;    "

//@ ensures (\\result&15) == 0;    "

//@ pure    "

//@ code_java_math spec_java_math    "

//@ requires true;    "

//@ code_java_math spec_java_math    "

//@ requires true;    "

//@ code_java_math spec_java_math    "

//@ requires n <= 0x7ffffff0;    "

//@ ensures n <= \\result;    "

//@ ensures \\result <= n+15;    "

//@ ensures (\\result&15) == 0;    "

//@ pure    "

//@ code_java_math spec_java_math    "

//@ requires n <= 0x7ffffff0;    "

//@ ensures n <= \\result;    "

//@ ensures \\result <= n+15;    "

//@ ensures (\\result&15) == 0;    "

//@ pure    "

//@ code_java_math spec_java_math    "

//@ requires (i&5) == 1; pure     "

//@ requires A.mm(1);    "

//@ requires (i&5) == 1; pure     "

//@ requires A.mm(1);    "

//@ requires (i&5) == 1; pure     "

//@ requires A.mm(1);    "

//@ requires n <= 0x7ffffff0;    "

//@ ensures n <= \\result;    "

//@ ensures \\result <= n+15;    "

//@ ensures (\\result&15) == 0;    "

//@ pure    "

//@ code_java_math spec_java_math    "

//@ requires n <= 0x7ffffff0;    "

//@ ensures n <= \\result;    "

//@ ensures \\result <= n+15;    "

//@ ensures (\\result&15) == 0;    "

//@ pure    "

//@ code_java_math spec_java_math    "

//@ requires n <= 0x7ffffff0;    "

//@ ensures n <= \\result;    "

//@ ensures \\result <= n+15;    "

//@ ensures (\\result%16) == 0;    "

//@ pure    "

//@ code_java_math spec_java_math    "

//@ ensures n <= \\result;    "

//@ ensures \\result <= n+15;    "

//@ ensures (\\result&15) == 0;    "  // FAILS for very large n, e.g. Integer.MAX_VALUE

//@ pure    "

//@ code_java_math spec_java_math    "

//@ requires n <= Integer.MAX_VALUE-15;    "

//@ ensures n <= \\result;    "

//@ ensures \\result <= n+15;    "

//@ ensures (\\result&15) == 0;    "

//@ pure    "

//@ code_java_math spec_java_math    "

//@ requires true;    "

//@ code_java_math spec_java_math    "

//@ requires true;    "

//@ code_java_math spec_java_math    "

//@ requires n <= 0x7ffffff0;    "

//@ ensures n <= \\result;    "

//@ ensures \\result <= n+15;    "

//@ ensures (\\result&15) == 0;    "

//@ pure    "

//@ code_java_math spec_java_math    "

//@ requires n <= 0x7ffffff0;    "

//@ ensures n <= \\result;    "

//@ ensures \\result <= n+15;    "

//@ ensures (\\result&15) == 0;    "

//@ pure    "

//@ code_java_math spec_java_math    "

//@ requires (i&5) == 1; pure     "

//@ requires A.mm(1);    "

//@ requires (i&5) == 1; pure     "

//@ requires A.mm(1);    "

//@ requires (i&5) == 1; pure     "

//@ requires A.mm(1);    "

//@ requires n <= 0x7ffffff0;    "

//@ ensures n <= \\result;    "

//@ ensures \\result <= n+15;    "

//@ ensures (\\result&15) == 0;    "

//@ pure    "

//@ code_java_math spec_java_math    "

//@ requires n <= 0x7ffffff0;    "

//@ ensures n <= \\result;    "

//@ ensures \\result <= n+15;    "

//@ ensures (\\result&15) == 0;    "

//@ pure    "

//@ code_java_math spec_java_math    "

//@ requires n <= 0x7ffffff0;    "

//@ ensures n <= \\result;    "

//@ ensures \\result <= n+15;    "

//@ ensures (\\result%16) == 0;    "

//@ pure    "

//@ code_java_math spec_java_math    "

//@ ensures n <= \\result;    "

//@ ensures \\result <= n+15;    "

//@ ensures (\\result&15) == 0;    "  // FAILS for very large n, e.g. Integer.MAX_VALUE

//@ pure    "

//@ code_java_math spec_java_math    "

//@ requires n <= Integer.MAX_VALUE-15;    "

//@ ensures n <= \\result;    "

//@ ensures \\result <= n+15;    "

//@ ensures (\\result&15) == 0;    "

//@ pure    "

//@ code_java_math spec_java_math    "

//@ requires true;    "

//@ code_java_math spec_java_math    "

//@ requires true;    "

//@ code_java_math spec_java_math    "

//@ requires n <= 0x7ffffff0;    "

//@ ensures n <= \\result;    "

//@ ensures \\result <= n+15;    "

//@ ensures (\\result&15) == 0;    "

//@ pure    "

//@ code_java_math spec_java_math    "

//@ requires n <= 0x7ffffff0;    "

//@ ensures n <= \\result;    "

//@ ensures \\result <= n+15;    "

//@ ensures (\\result&15) == 0;    "

//@ pure    "

//@ code_java_math spec_java_math    "

//@ requires (i&5) == 1; pure     "

//@ requires A.mm(1);    "

//@ requires (i&5) == 1; pure     "

//@ requires A.mm(1);    "

//@ requires (i&5) == 1; pure     "

//@ requires A.mm(1);    "

//@ requires n <= 0x7ffffff0;    "

//@ ensures n <= \\result;    "

//@ ensures \\result <= n+15;    "

//@ ensures (\\result&15) == 0;    "

//@ pure    "

//@ code_java_math spec_java_math    "

//@ requires n <= 0x7ffffff0;    "

//@ ensures n <= \\result;    "

//@ ensures \\result <= n+15;    "

//@ ensures (\\result&15) == 0;    "

//@ pure    "

//@ code_java_math spec_java_math    "

//@ requires n <= 0x7ffffff0;    "

//@ ensures n <= \\result;    "

//@ ensures \\result <= n+15;    "

//@ ensures (\\result%16) == 0;    "

//@ pure    "

//@ code_java_math spec_java_math    "

//@ ensures n <= \\result;    "

//@ ensures \\result <= n+15;    "

//@ ensures (\\result&15) == 0;    "  // FAILS for very large n, e.g. Integer.MAX_VALUE

//@ pure    "

//@ code_java_math spec_java_math    "

//@ requires n <= Integer.MAX_VALUE-15;    "

//@ ensures n <= \\result;    "

//@ ensures \\result <= n+15;    "

//@ ensures (\\result&15) == 0;    "

//@ pure    "

//@ code_java_math spec_java_math    "

//@ requires true;    "

//@ code_java_math spec_java_math    "

//@ requires true;    "

//@ code_java_math spec_java_math    "

//@ requires n <= 0x7ffffff0;    "

//@ ensures n <= \\result;    "

//@ ensures \\result <= n+15;    "

//@ ensures (\\result&15) == 0;    "

//@ pure    "

//@ code_java_math spec_java_math    "

//@ requires n <= 0x7ffffff0;    "

//@ ensures n <= \\result;    "

//@ ensures \\result <= n+15;    "

//@ ensures (\\result&15) == 0;    "

//@ pure    "

//@ code_java_math spec_java_math    "

//@ requires (i&5) == 1; pure     "

//@ requires A.mm(1);    "

//@ requires (i&5) == 1; pure     "

//@ requires A.mm(1);    "

//@ requires (i&5) == 1; pure     "

//@ requires A.mm(1);    "

//@ callable \    othing;    "

//@ callable n;    "

//@ callable \    othing;    "

//@ callable \    othing;    "

//@ callable n;    "

//@ callable n;    "

//@ callable TestJava.n;    "

//@ callable TestJava.n;    "

//@ nowarn Callable;    "

//@ callable TestJava.n; //@ nowarn Callable;    "

//@ callable TestJava.n;    "

//@ nowarn Callable;    "

//@ nowarn Callable;    "

//@ callable B.n;    "

//@ callable \    othing;    "

//@ callable n(int);    "

//@ callable \    othing;    "

//@ callable n(Object);    "

//@ callable \    othing;    "

//@ callable \    othing;    "

//@ callable n(int);    "

//@ callable n(Object);    "

//@ callable n(int),n(Object);    "

//@ callable n(Object);    "

//@ callable n(int),n(Object);    "

//@ callable \\everything;    "

//@ callable \\everything;    "

//@ callable \\everything;    "

//@ callable \    othing;    "

//@ callable \\everything;    "

//@ callable \    othing;    "

//@ callable n(int);    "

//@ callable \\everything;    "

//@ callable n();    "

//@ callable \    othing;    "

//@ callable n(Object,Object);    "

//@ callable \    othing;    "

//@ callable n(Object[]);    "

//@ callable \    othing;    "

//@ callable n(Object[]);    "

//@ callable \    othing;    "

//@ callable n(Object[]);    "

//@ callable \    othing;    "

//@ callable n(Object[]);    "

//@ callable \    othing;    "

//@ requires b;    "

//@ callable n();    "

//@ also requires !b;    "

//@ callable \    othing;    "

//@ callable \    othing;    "

//@ requires b;    "

//@ callable n();    "

//@ also requires !b;    "

//@ callable \    othing;    "

//@ callable \    othing;    "

//@ requires b;    "

//@ callable n();    "

//@ also requires !b;    "

//@ callable \    othing;    "

//@ requires b;    "

//@ callable n();    "

//@ also requires !b;    "

//@ callable \    othing;    "

//@ requires b;    "

//@ callable n();    "

//@ also requires !b;    "

//@ callable \\everything;    "

//@ requires b;    "

//@ callable n(boolean);    "

//@ also requires !b;    "

//@ callable \    othing;    "

//@ requires q; callable p();    "

//@ also requires !q; callable \    othing;    "

//@ callable \    othing;    "

//@ callable n;    "

//@ callable \    othing;    "

//@ callable \    othing;    "

//@ callable n;    "

//@ callable n;    "

//@ callable TestJava.n;    "

//@ callable TestJava.n;    "

//@ nowarn Callable;    "

//@ callable TestJava.n; //@ nowarn Callable;    "

//@ callable TestJava.n;    "

//@ nowarn Callable;    "

//@ nowarn Callable;    "

//@ callable B.n;    "

//@ callable \    othing;    "

//@ callable n(int);    "

//@ callable \    othing;    "

//@ callable n(Object);    "

//@ callable \    othing;    "

//@ callable \    othing;    "

//@ callable n(int);    "

//@ callable n(Object);    "

//@ callable n(int),n(Object);    "

//@ callable n(Object);    "

//@ callable n(int),n(Object);    "

//@ callable \\everything;    "

//@ callable \\everything;    "

//@ callable \\everything;    "

//@ callable \    othing;    "

//@ callable \\everything;    "

//@ callable \    othing;    "

//@ callable n(int);    "

//@ callable \\everything;    "

//@ callable n();    "

//@ callable \    othing;    "

//@ callable n(Object,Object);    "

//@ callable \    othing;    "

//@ callable n(Object[]);    "

//@ callable \    othing;    "

//@ callable n(Object[]);    "

//@ callable \    othing;    "

//@ callable n(Object[]);    "

//@ callable \    othing;    "

//@ callable n(Object[]);    "

//@ callable \    othing;    "

//@ requires b;    "

//@ callable n();    "

//@ also requires !b;    "

//@ callable \    othing;    "

//@ callable \    othing;    "

//@ requires b;    "

//@ callable n();    "

//@ also requires !b;    "

//@ callable \    othing;    "

//@ callable \    othing;    "

//@ requires b;    "

//@ callable n();    "

//@ also requires !b;    "

//@ callable \    othing;    "

//@ requires b;    "

//@ callable n();    "

//@ also requires !b;    "

//@ callable \    othing;    "

//@ requires b;    "

//@ callable n();    "

//@ also requires !b;    "

//@ callable \\everything;    "

//@ requires b;    "

//@ callable n(boolean);    "

//@ also requires !b;    "

//@ callable \    othing;    "

//@ requires q; callable p();    "

//@ also requires !q; callable \    othing;    "

//@ callable \    othing;    "

//@ callable n;    "

//@ callable \    othing;    "

//@ callable \    othing;    "

//@ callable n;    "

//@ callable n;    "

//@ callable TestJava.n;    "

//@ callable TestJava.n;    "

//@ nowarn Callable;    "

//@ callable TestJava.n; //@ nowarn Callable;    "

//@ callable TestJava.n;    "

//@ nowarn Callable;    "

//@ nowarn Callable;    "

//@ callable B.n;    "

//@ callable \    othing;    "

//@ callable n(int);    "

//@ callable \    othing;    "

//@ callable n(Object);    "

//@ callable \    othing;    "

//@ callable \    othing;    "

//@ callable n(int);    "

//@ callable n(Object);    "

//@ callable n(int),n(Object);    "

//@ callable n(Object);    "

//@ callable n(int),n(Object);    "

//@ callable \\everything;    "

//@ callable \\everything;    "

//@ callable \\everything;    "

//@ callable \    othing;    "

//@ callable \\everything;    "

//@ callable \    othing;    "

//@ callable n(int);    "

//@ callable \\everything;    "

//@ callable n();    "

//@ callable \    othing;    "

//@ callable n(Object,Object);    "

//@ callable \    othing;    "

//@ callable n(Object[]);    "

//@ callable \    othing;    "

//@ callable n(Object[]);    "

//@ callable \    othing;    "

//@ callable n(Object[]);    "

//@ callable \    othing;    "

//@ callable n(Object[]);    "

//@ callable \    othing;    "

//@ requires b;    "

//@ callable n();    "

//@ also requires !b;    "

//@ callable \    othing;    "

//@ callable \    othing;    "

//@ requires b;    "

//@ callable n();    "

//@ also requires !b;    "

//@ callable \    othing;    "

//@ callable \    othing;    "

//@ requires b;    "

//@ callable n();    "

//@ also requires !b;    "

//@ callable \    othing;    "

//@ requires b;    "

//@ callable n();    "

//@ also requires !b;    "

//@ callable \    othing;    "

//@ requires b;    "

//@ callable n();    "

//@ also requires !b;    "

//@ callable \\everything;    "

//@ requires b;    "

//@ callable n(boolean);    "

//@ also requires !b;    "

//@ callable \    othing;    "

//@ requires q; callable p();    "

//@ also requires !q; callable \    othing;    "

//@ callable \    othing;    "

//@ callable n;    "

//@ callable \    othing;    "

//@ callable \    othing;    "

//@ callable n;    "

//@ callable n;    "

//@ callable TestJava.n;    "

//@ callable TestJava.n;    "

//@ nowarn Callable;    "

//@ callable TestJava.n; //@ nowarn Callable;    "

//@ callable TestJava.n;    "

//@ nowarn Callable;    "

//@ nowarn Callable;    "

//@ callable B.n;    "

//@ callable \    othing;    "

//@ callable n(int);    "

//@ callable \    othing;    "

//@ callable n(Object);    "

//@ callable \    othing;    "

//@ callable \    othing;    "

//@ callable n(int);    "

//@ callable n(Object);    "

//@ callable n(int),n(Object);    "

//@ callable n(Object);    "

//@ callable n(int),n(Object);    "

//@ callable \\everything;    "

//@ callable \\everything;    "

//@ callable \\everything;    "

//@ callable \    othing;    "

//@ callable \\everything;    "

//@ callable \    othing;    "

//@ callable n(int);    "

//@ callable \\everything;    "

//@ callable n();    "

//@ callable \    othing;    "

//@ callable n(Object,Object);    "

//@ callable \    othing;    "

//@ callable n(Object[]);    "

//@ callable \    othing;    "

//@ callable n(Object[]);    "

//@ callable \    othing;    "

//@ callable n(Object[]);    "

//@ callable \    othing;    "

//@ callable n(Object[]);    "

//@ callable \    othing;    "

//@ requires b;    "

//@ callable n();    "

//@ also requires !b;    "

//@ callable \    othing;    "

//@ callable \    othing;    "

//@ requires b;    "

//@ callable n();    "

//@ also requires !b;    "

//@ callable \    othing;    "

//@ callable \    othing;    "

//@ requires b;    "

//@ callable n();    "

//@ also requires !b;    "

//@ callable \    othing;    "

//@ requires b;    "

//@ callable n();    "

//@ also requires !b;    "

//@ callable \    othing;    "

//@ requires b;    "

//@ callable n();    "

//@ also requires !b;    "

//@ callable \\everything;    "

//@ requires b;    "

//@ callable n(boolean);    "

//@ also requires !b;    "

//@ callable \    othing;    "

//@ requires q; callable p();    "

//@ also requires !q; callable \    othing;    "

//@ callable \    othing;    "

//@ callable n;    "

//@ callable \    othing;    "

//@ callable \    othing;    "

//@ callable n;    "

//@ callable n;    "

//@ callable TestJava.n;    "

//@ callable TestJava.n;    "

//@ nowarn Callable;    "

//@ callable TestJava.n; //@ nowarn Callable;    "

//@ callable TestJava.n;    "

//@ nowarn Callable;    "

//@ nowarn Callable;    "

//@ callable B.n;    "

//@ callable \    othing;    "

//@ callable n(int);    "

//@ callable \    othing;    "

//@ callable n(Object);    "

//@ callable \    othing;    "

//@ callable \    othing;    "

//@ callable n(int);    "

//@ callable n(Object);    "

//@ callable n(int),n(Object);    "

//@ callable n(Object);    "

//@ callable n(int),n(Object);    "

//@ callable \\everything;    "

//@ callable \\everything;    "

//@ callable \\everything;    "

//@ callable \    othing;    "

//@ callable \\everything;    "

//@ callable \    othing;    "

//@ callable n(int);    "

//@ callable \\everything;    "

//@ callable n();    "

//@ callable \    othing;    "

//@ callable n(Object,Object);    "

//@ callable \    othing;    "

//@ callable n(Object[]);    "

//@ callable \    othing;    "

//@ callable n(Object[]);    "

//@ callable \    othing;    "

//@ callable n(Object[]);    "

//@ callable \    othing;    "

//@ callable n(Object[]);    "

//@ callable \    othing;    "

//@ requires b;    "

//@ callable n();    "

//@ also requires !b;    "

//@ callable \    othing;    "

//@ callable \    othing;    "

//@ requires b;    "

//@ callable n();    "

//@ also requires !b;    "

//@ callable \    othing;    "

//@ callable \    othing;    "

//@ requires b;    "

//@ callable n();    "

//@ also requires !b;    "

//@ callable \    othing;    "

//@ requires b;    "

//@ callable n();    "

//@ also requires !b;    "

//@ callable \    othing;    "

//@ requires b;    "

//@ callable n();    "

//@ also requires !b;    "

//@ callable \\everything;    "

//@ requires b;    "

//@ callable n(boolean);    "

//@ also requires !b;    "

//@ callable \    othing;    "

//@ requires q; callable p();    "

//@ also requires !q; callable \    othing;    "

//@ also public normal_behavior    "

//@    ensures \\result > 0;    "

//@ public normal_behavior    "

//@    ensures \\result > 10;    "

//@ also public normal_behavior    "

//@    ensures \\result > 0;    "

//@ public code normal_behavior    "

//@    ensures \\result > 10;    "

//@ also public normal_behavior    "

//@    ensures \\result > 0;    "

//@ public code normal_behavior    "

//@    ensures \\result > 10;    "

//@ also public code normal_behavior    "

//@    ensures \\result > 0;    "

//@ public code normal_behavior    "

//@    ensures \\result > 10;    "

//@ public code normal_behavior    "

//@    ensures \\result > 10;    "

//@ also public code normal_behavior    "

//@    ensures true;    "

//@ public code normal_behavior    "

//@    ensures \\result > 10;    "

//@ public code normal_behavior    "

//@    ensures \\result > 10;    "

//@ public normal_behavior    "

//@    ensures \\result > 10;    "

//@ public code normal_behavior    "

//@    ensures \\result >= 10;    "

//@ also public code normal_behavior    "

//@    ensures \\result >= 10;    "

//@ public code normal_behavior    "

//@    ensures true;    "

//@ public code normal_behavior    "

//@    ensures \\result >= 10;    "

//@ also public normal_behavior    "

//@    ensures \\result >= 10;    "

//@ public code normal_behavior    "

//@    ensures true;    "

//@ public code normal_behavior    "

//@    ensures \\result > 10;    "

//@ public code normal_behavior    "

//@    ensures \\result > 10;    "

//@ also public normal_behavior    "

//@    ensures \\result > 0;    "

//@ public normal_behavior    "

//@    ensures \\result > 10;    "

//@ also public normal_behavior    "

//@    ensures \\result > 0;    "

//@ public code normal_behavior    "

//@    ensures \\result > 10;    "

//@ also public normal_behavior    "

//@    ensures \\result > 0;    "

//@ public code normal_behavior    "

//@    ensures \\result > 10;    "

//@ also public code normal_behavior    "

//@    ensures \\result > 0;    "

//@ public code normal_behavior    "

//@    ensures \\result > 10;    "

//@ public code normal_behavior    "

//@    ensures \\result > 10;    "

//@ also public code normal_behavior    "

//@    ensures true;    "

//@ public code normal_behavior    "

//@    ensures \\result > 10;    "

//@ public code normal_behavior    "

//@    ensures \\result > 10;    "

//@ public normal_behavior    "

//@    ensures \\result > 10;    "

//@ public code normal_behavior    "

//@    ensures \\result >= 10;    "

//@ also public code normal_behavior    "

//@    ensures \\result >= 10;    "

//@ public code normal_behavior    "

//@    ensures true;    "

//@ public code normal_behavior    "

//@    ensures \\result >= 10;    "

//@ also public normal_behavior    "

//@    ensures \\result >= 10;    "

//@ public code normal_behavior    "

//@    ensures true;    "

//@ public code normal_behavior    "

//@    ensures \\result > 10;    "

//@ public code normal_behavior    "

//@    ensures \\result > 10;    "

//@ also public normal_behavior    "

//@    ensures \\result > 0;    "

//@ public normal_behavior    "

//@    ensures \\result > 10;    "

//@ also public normal_behavior    "

//@    ensures \\result > 0;    "

//@ public code normal_behavior    "

//@    ensures \\result > 10;    "

//@ also public normal_behavior    "

//@    ensures \\result > 0;    "

//@ public code normal_behavior    "

//@    ensures \\result > 10;    "

//@ also public code normal_behavior    "

//@    ensures \\result > 0;    "

//@ public code normal_behavior    "

//@    ensures \\result > 10;    "

//@ public code normal_behavior    "

//@    ensures \\result > 10;    "

//@ also public code normal_behavior    "

//@    ensures true;    "

//@ public code normal_behavior    "

//@    ensures \\result > 10;    "

//@ public code normal_behavior    "

//@    ensures \\result > 10;    "

//@ public normal_behavior    "

//@    ensures \\result > 10;    "

//@ public code normal_behavior    "

//@    ensures \\result >= 10;    "

//@ also public code normal_behavior    "

//@    ensures \\result >= 10;    "

//@ public code normal_behavior    "

//@    ensures true;    "

//@ public code normal_behavior    "

//@    ensures \\result >= 10;    "

//@ also public normal_behavior    "

//@    ensures \\result >= 10;    "

//@ public code normal_behavior    "

//@    ensures true;    "

//@ public code normal_behavior    "

//@    ensures \\result > 10;    "

//@ public code normal_behavior    "

//@    ensures \\result > 10;    "

//@ also public normal_behavior    "

//@    ensures \\result > 0;    "

//@ public normal_behavior    "

//@    ensures \\result > 10;    "

//@ also public normal_behavior    "

//@    ensures \\result > 0;    "

//@ public code normal_behavior    "

//@    ensures \\result > 10;    "

//@ also public normal_behavior    "

//@    ensures \\result > 0;    "

//@ public code normal_behavior    "

//@    ensures \\result > 10;    "

//@ also public code normal_behavior    "

//@    ensures \\result > 0;    "

//@ public code normal_behavior    "

//@    ensures \\result > 10;    "

//@ public code normal_behavior    "

//@    ensures \\result > 10;    "

//@ also public code normal_behavior    "

//@    ensures true;    "

//@ public code normal_behavior    "

//@    ensures \\result > 10;    "

//@ public code normal_behavior    "

//@    ensures \\result > 10;    "

//@ public normal_behavior    "

//@    ensures \\result > 10;    "

//@ public code normal_behavior    "

//@    ensures \\result >= 10;    "

//@ also public code normal_behavior    "

//@    ensures \\result >= 10;    "

//@ public code normal_behavior    "

//@    ensures true;    "

//@ public code normal_behavior    "

//@    ensures \\result >= 10;    "

//@ also public normal_behavior    "

//@    ensures \\result >= 10;    "

//@ public code normal_behavior    "

//@    ensures true;    "

//@ public code normal_behavior    "

//@    ensures \\result > 10;    "

//@ public code normal_behavior    "

//@    ensures \\result > 10;    "

//@ also public normal_behavior    "

//@    ensures \\result > 0;    "

//@ public normal_behavior    "

//@    ensures \\result > 10;    "

//@ also public normal_behavior    "

//@    ensures \\result > 0;    "

//@ public code normal_behavior    "

//@    ensures \\result > 10;    "

//@ also public normal_behavior    "

//@    ensures \\result > 0;    "

//@ public code normal_behavior    "

//@    ensures \\result > 10;    "

//@ also public code normal_behavior    "

//@    ensures \\result > 0;    "

//@ public code normal_behavior    "

//@    ensures \\result > 10;    "

//@ public code normal_behavior    "

//@    ensures \\result > 10;    "

//@ also public code normal_behavior    "

//@    ensures true;    "

//@ public code normal_behavior    "

//@    ensures \\result > 10;    "

//@ public code normal_behavior    "

//@    ensures \\result > 10;    "

//@ public normal_behavior    "

//@    ensures \\result > 10;    "

//@ public code normal_behavior    "

//@    ensures \\result >= 10;    "

//@ also public code normal_behavior    "

//@    ensures \\result >= 10;    "

//@ public code normal_behavior    "

//@    ensures true;    "

//@ public code normal_behavior    "

//@    ensures \\result >= 10;    "

//@ also public normal_behavior    "

//@    ensures \\result >= 10;    "

//@ public code normal_behavior    "

//@    ensures true;    "

//@ public code normal_behavior    "

//@    ensures \\result > 10;    "

//@ public code normal_behavior    "

//@    ensures \\result > 10;    "

//@ ensures J == 2;    "

//@ ensures J == 2;    "

//@ ensures J == 2;    "

//@ ghost public final static int I = 1;    "

//@ ghost public final static int J = 1 + I;    "

//@ ensures J == 2;    "

//@ ensures J == 2;    "

//@ ensures J == 2;    "

//@ ghost public final static int J = 1 + I;    "

//@ assert I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    "

//@ assignable \\everything;    "

//@ ghost public static int J = 1 + I;    "

//@ public static invariant I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    "

//@ ensures J == 2;    "

//@ assert I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    "

//@ assignable \\everything;    "

//@ ghost public final static int J = 1 + I;    "

//@ public static invariant I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assignable \\everything;    "

//@ ghost public final static int J = 1 + z();    "

//@ assert I == 10 && J == 11;    " // Fails since we don't have a static invariant

//@ assert I == 10 && J == 11;    " // Fails since we don't have a static invariant

//@ assignable \\everything;    "

//@ ensures \\result == 10;    "

//@ ghost public final static int J = 1 + I;    "

//@ public static invariant I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assignable \\everything;    "

/*@ helper */
//@ ghost public final int J = 1 + I;    "

//@ assert I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    "

//@ assignable \\everything;    "

//@ ghost public final int J = 1 + I;    "

//@ assert I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    " // but OK because final constant fields are not modified by \everything

//@ assert I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    " // but OK because final fields are not modified by \everything

//@ assignable \\everything;    "

//@ ghost public int J = 1 + I;    "

//@ public invariant I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    " // OK

//@ assert I == 1 && J == 2;    " // Should be OK because of invariant on n()

//@ assert I == 1 && J == 2;    " // OK because of invariant

//@ assert I == 1 && J == 2;    " // Should be OK because of invariant on n()

//@ assignable \\everything;    "   // FIXME _ why does this reestablish invariant?

//@ ghost public int J = 1 + I;    "

//@ public invariant I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    " // OK

//@ assert I == 1 && J == 2;    " // Fails because n is static and so does not establish the invariant

//@ assert I == 1 && J == 2;    " // OK because of invariant

//@ assert I == 1 && J == 2;    " // Fails because n is static and so does not establish the invariant

//@ public normal_behavior assignable \\everything;    "

//@ ghost public final int J = 1 + I;    "

//@ public invariant I == 10 && J == 11;    " // FIXME - check that this is required

//@ assert I == 10 && J == 11;    " // OK because of invariant

//@ assert I == 10 && J == 11;    " // Should be OK because of invariant on n()

//@ assert I == 10 && J == 11;    " // OK because of invariant

//@ assert I == 10 && J == 11;    " // Should be OK because of invariant on n()

//@ assignable \\everything;    "

//@ public normal_behavior ensures \\result == 10;    "

//@ ghost public final int J = 1 + I;    "

//@ public invariant I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    " // OK because of invariant

//@ assert I == 10 && J == 11;    " // Should be OK because final fields are not modified

//@ assert I == 10 && J == 11;    " // OK because of invariant

//@ assert I == 10 && J == 11;    " // Should be OK because final fields are not modified

//@ assignable \\everything;    "

//@ public normal_behavior ensures \\result == 10;    "

//@ ghost public final int J = 1 + I;    "

//@ public invariant I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assignable \\everything;    "

//@ private normal_behavior ensures \\result == 10;    "

/*@ helper */
//@ assert H.CON1 == 50 ;    "

//@ assert H.CON2 == 51 ;    "

//@ assert H.CON2 == H.CON1 + 1 ;    "

//@ assert H.CON3 == 0x7fffffff ;    "

//@ assert H.CON1 == 50 ;    "

//@ assert H.CON2 == 51 ;    "

//@ assert H.CON2 == H.CON1 + 1 ;    "

//@ assert H.CON3 == 0x7fffffff ;    "

//@ assert H.CON1 == 50 ;    "

//@ assert H.CON2 == 51 ;    "

//@ assert H.CON2 == H.CON1 + 1 ;    "

//@ assert H.CON3 == 0x7fffffff ;    "

//@ assert H.CON1 == 50 ;    "

//@ assert H.CON2 == 51 ;    "

//@ assert H.CON2 == H.CON1 + 1 ;    "

//@ assert H.CON3 == 0x7fffffff ;    "

//@ assignable \\everything;    "

//@ ensures J == 2;    "

//@ ensures J == 2;    "

//@ ensures J == 2;    "

//@ ghost public final static int I = 1;    "

//@ ghost public final static int J = 1 + I;    "

//@ ensures J == 2;    "

//@ ensures J == 2;    "

//@ ensures J == 2;    "

//@ ghost public final static int J = 1 + I;    "

//@ assert I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    "

//@ assignable \\everything;    "

//@ ghost public static int J = 1 + I;    "

//@ public static invariant I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    "

//@ ensures J == 2;    "

//@ assert I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    "

//@ assignable \\everything;    "

//@ ghost public final static int J = 1 + I;    "

//@ public static invariant I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assignable \\everything;    "

//@ ghost public final static int J = 1 + z();    "

//@ assert I == 10 && J == 11;    " // Fails since we don't have a static invariant

//@ assert I == 10 && J == 11;    " // Fails since we don't have a static invariant

//@ assignable \\everything;    "

//@ ensures \\result == 10;    "

//@ ghost public final static int J = 1 + I;    "

//@ public static invariant I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assignable \\everything;    "

/*@ helper */
//@ ghost public final int J = 1 + I;    "

//@ assert I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    "

//@ assignable \\everything;    "

//@ ghost public final int J = 1 + I;    "

//@ assert I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    " // but OK because final constant fields are not modified by \everything

//@ assert I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    " // but OK because final fields are not modified by \everything

//@ assignable \\everything;    "

//@ ghost public int J = 1 + I;    "

//@ public invariant I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    " // OK

//@ assert I == 1 && J == 2;    " // Should be OK because of invariant on n()

//@ assert I == 1 && J == 2;    " // OK because of invariant

//@ assert I == 1 && J == 2;    " // Should be OK because of invariant on n()

//@ assignable \\everything;    "   // FIXME _ why does this reestablish invariant?

//@ ghost public int J = 1 + I;    "

//@ public invariant I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    " // OK

//@ assert I == 1 && J == 2;    " // Fails because n is static and so does not establish the invariant

//@ assert I == 1 && J == 2;    " // OK because of invariant

//@ assert I == 1 && J == 2;    " // Fails because n is static and so does not establish the invariant

//@ public normal_behavior assignable \\everything;    "

//@ ghost public final int J = 1 + I;    "

//@ public invariant I == 10 && J == 11;    " // FIXME - check that this is required

//@ assert I == 10 && J == 11;    " // OK because of invariant

//@ assert I == 10 && J == 11;    " // Should be OK because of invariant on n()

//@ assert I == 10 && J == 11;    " // OK because of invariant

//@ assert I == 10 && J == 11;    " // Should be OK because of invariant on n()

//@ assignable \\everything;    "

//@ public normal_behavior ensures \\result == 10;    "

//@ ghost public final int J = 1 + I;    "

//@ public invariant I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    " // OK because of invariant

//@ assert I == 10 && J == 11;    " // Should be OK because final fields are not modified

//@ assert I == 10 && J == 11;    " // OK because of invariant

//@ assert I == 10 && J == 11;    " // Should be OK because final fields are not modified

//@ assignable \\everything;    "

//@ public normal_behavior ensures \\result == 10;    "

//@ ghost public final int J = 1 + I;    "

//@ public invariant I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assignable \\everything;    "

//@ private normal_behavior ensures \\result == 10;    "

/*@ helper */
//@ assert H.CON1 == 50 ;    "

//@ assert H.CON2 == 51 ;    "

//@ assert H.CON2 == H.CON1 + 1 ;    "

//@ assert H.CON3 == 0x7fffffff ;    "

//@ assert H.CON1 == 50 ;    "

//@ assert H.CON2 == 51 ;    "

//@ assert H.CON2 == H.CON1 + 1 ;    "

//@ assert H.CON3 == 0x7fffffff ;    "

//@ assert H.CON1 == 50 ;    "

//@ assert H.CON2 == 51 ;    "

//@ assert H.CON2 == H.CON1 + 1 ;    "

//@ assert H.CON3 == 0x7fffffff ;    "

//@ assert H.CON1 == 50 ;    "

//@ assert H.CON2 == 51 ;    "

//@ assert H.CON2 == H.CON1 + 1 ;    "

//@ assert H.CON3 == 0x7fffffff ;    "

//@ assignable \\everything;    "

//@ ensures J == 2;    "

//@ ensures J == 2;    "

//@ ensures J == 2;    "

//@ ghost public final static int I = 1;    "

//@ ghost public final static int J = 1 + I;    "

//@ ensures J == 2;    "

//@ ensures J == 2;    "

//@ ensures J == 2;    "

//@ ghost public final static int J = 1 + I;    "

//@ assert I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    "

//@ assignable \\everything;    "

//@ ghost public static int J = 1 + I;    "

//@ public static invariant I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    "

//@ ensures J == 2;    "

//@ assert I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    "

//@ assignable \\everything;    "

//@ ghost public final static int J = 1 + I;    "

//@ public static invariant I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assignable \\everything;    "

//@ ghost public final static int J = 1 + z();    "

//@ assert I == 10 && J == 11;    " // Fails since we don't have a static invariant

//@ assert I == 10 && J == 11;    " // Fails since we don't have a static invariant

//@ assignable \\everything;    "

//@ ensures \\result == 10;    "

//@ ghost public final static int J = 1 + I;    "

//@ public static invariant I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assignable \\everything;    "

/*@ helper */
//@ ghost public final int J = 1 + I;    "

//@ assert I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    "

//@ assignable \\everything;    "

//@ ghost public final int J = 1 + I;    "

//@ assert I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    " // but OK because final constant fields are not modified by \everything

//@ assert I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    " // but OK because final fields are not modified by \everything

//@ assignable \\everything;    "

//@ ghost public int J = 1 + I;    "

//@ public invariant I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    " // OK

//@ assert I == 1 && J == 2;    " // Should be OK because of invariant on n()

//@ assert I == 1 && J == 2;    " // OK because of invariant

//@ assert I == 1 && J == 2;    " // Should be OK because of invariant on n()

//@ assignable \\everything;    "   // FIXME _ why does this reestablish invariant?

//@ ghost public int J = 1 + I;    "

//@ public invariant I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    " // OK

//@ assert I == 1 && J == 2;    " // Fails because n is static and so does not establish the invariant

//@ assert I == 1 && J == 2;    " // OK because of invariant

//@ assert I == 1 && J == 2;    " // Fails because n is static and so does not establish the invariant

//@ public normal_behavior assignable \\everything;    "

//@ ghost public final int J = 1 + I;    "

//@ public invariant I == 10 && J == 11;    " // FIXME - check that this is required

//@ assert I == 10 && J == 11;    " // OK because of invariant

//@ assert I == 10 && J == 11;    " // Should be OK because of invariant on n()

//@ assert I == 10 && J == 11;    " // OK because of invariant

//@ assert I == 10 && J == 11;    " // Should be OK because of invariant on n()

//@ assignable \\everything;    "

//@ public normal_behavior ensures \\result == 10;    "

//@ ghost public final int J = 1 + I;    "

//@ public invariant I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    " // OK because of invariant

//@ assert I == 10 && J == 11;    " // Should be OK because final fields are not modified

//@ assert I == 10 && J == 11;    " // OK because of invariant

//@ assert I == 10 && J == 11;    " // Should be OK because final fields are not modified

//@ assignable \\everything;    "

//@ public normal_behavior ensures \\result == 10;    "

//@ ghost public final int J = 1 + I;    "

//@ public invariant I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assignable \\everything;    "

//@ private normal_behavior ensures \\result == 10;    "

/*@ helper */
//@ assert H.CON1 == 50 ;    "

//@ assert H.CON2 == 51 ;    "

//@ assert H.CON2 == H.CON1 + 1 ;    "

//@ assert H.CON3 == 0x7fffffff ;    "

//@ assert H.CON1 == 50 ;    "

//@ assert H.CON2 == 51 ;    "

//@ assert H.CON2 == H.CON1 + 1 ;    "

//@ assert H.CON3 == 0x7fffffff ;    "

//@ assert H.CON1 == 50 ;    "

//@ assert H.CON2 == 51 ;    "

//@ assert H.CON2 == H.CON1 + 1 ;    "

//@ assert H.CON3 == 0x7fffffff ;    "

//@ assert H.CON1 == 50 ;    "

//@ assert H.CON2 == 51 ;    "

//@ assert H.CON2 == H.CON1 + 1 ;    "

//@ assert H.CON3 == 0x7fffffff ;    "

//@ assignable \\everything;    "

//@ ensures J == 2;    "

//@ ensures J == 2;    "

//@ ensures J == 2;    "

//@ ghost public final static int I = 1;    "

//@ ghost public final static int J = 1 + I;    "

//@ ensures J == 2;    "

//@ ensures J == 2;    "

//@ ensures J == 2;    "

//@ ghost public final static int J = 1 + I;    "

//@ assert I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    "

//@ assignable \\everything;    "

//@ ghost public static int J = 1 + I;    "

//@ public static invariant I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    "

//@ ensures J == 2;    "

//@ assert I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    "

//@ assignable \\everything;    "

//@ ghost public final static int J = 1 + I;    "

//@ public static invariant I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assignable \\everything;    "

//@ ghost public final static int J = 1 + z();    "

//@ assert I == 10 && J == 11;    " // Fails since we don't have a static invariant

//@ assert I == 10 && J == 11;    " // Fails since we don't have a static invariant

//@ assignable \\everything;    "

//@ ensures \\result == 10;    "

//@ ghost public final static int J = 1 + I;    "

//@ public static invariant I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assignable \\everything;    "

/*@ helper */
//@ ghost public final int J = 1 + I;    "

//@ assert I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    "

//@ assignable \\everything;    "

//@ ghost public final int J = 1 + I;    "

//@ assert I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    " // but OK because final constant fields are not modified by \everything

//@ assert I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    " // but OK because final fields are not modified by \everything

//@ assignable \\everything;    "

//@ ghost public int J = 1 + I;    "

//@ public invariant I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    " // OK

//@ assert I == 1 && J == 2;    " // Should be OK because of invariant on n()

//@ assert I == 1 && J == 2;    " // OK because of invariant

//@ assert I == 1 && J == 2;    " // Should be OK because of invariant on n()

//@ assignable \\everything;    "   // FIXME _ why does this reestablish invariant?

//@ ghost public int J = 1 + I;    "

//@ public invariant I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    " // OK

//@ assert I == 1 && J == 2;    " // Fails because n is static and so does not establish the invariant

//@ assert I == 1 && J == 2;    " // OK because of invariant

//@ assert I == 1 && J == 2;    " // Fails because n is static and so does not establish the invariant

//@ public normal_behavior assignable \\everything;    "

//@ ghost public final int J = 1 + I;    "

//@ public invariant I == 10 && J == 11;    " // FIXME - check that this is required

//@ assert I == 10 && J == 11;    " // OK because of invariant

//@ assert I == 10 && J == 11;    " // Should be OK because of invariant on n()

//@ assert I == 10 && J == 11;    " // OK because of invariant

//@ assert I == 10 && J == 11;    " // Should be OK because of invariant on n()

//@ assignable \\everything;    "

//@ public normal_behavior ensures \\result == 10;    "

//@ ghost public final int J = 1 + I;    "

//@ public invariant I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    " // OK because of invariant

//@ assert I == 10 && J == 11;    " // Should be OK because final fields are not modified

//@ assert I == 10 && J == 11;    " // OK because of invariant

//@ assert I == 10 && J == 11;    " // Should be OK because final fields are not modified

//@ assignable \\everything;    "

//@ public normal_behavior ensures \\result == 10;    "

//@ ghost public final int J = 1 + I;    "

//@ public invariant I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assignable \\everything;    "

//@ private normal_behavior ensures \\result == 10;    "

/*@ helper */
//@ assert H.CON1 == 50 ;    "

//@ assert H.CON2 == 51 ;    "

//@ assert H.CON2 == H.CON1 + 1 ;    "

//@ assert H.CON3 == 0x7fffffff ;    "

//@ assert H.CON1 == 50 ;    "

//@ assert H.CON2 == 51 ;    "

//@ assert H.CON2 == H.CON1 + 1 ;    "

//@ assert H.CON3 == 0x7fffffff ;    "

//@ assert H.CON1 == 50 ;    "

//@ assert H.CON2 == 51 ;    "

//@ assert H.CON2 == H.CON1 + 1 ;    "

//@ assert H.CON3 == 0x7fffffff ;    "

//@ assert H.CON1 == 50 ;    "

//@ assert H.CON2 == 51 ;    "

//@ assert H.CON2 == H.CON1 + 1 ;    "

//@ assert H.CON3 == 0x7fffffff ;    "

//@ assignable \\everything;    "

//@ ensures J == 2;    "

//@ ensures J == 2;    "

//@ ensures J == 2;    "

//@ ghost public final static int I = 1;    "

//@ ghost public final static int J = 1 + I;    "

//@ ensures J == 2;    "

//@ ensures J == 2;    "

//@ ensures J == 2;    "

//@ ghost public final static int J = 1 + I;    "

//@ assert I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    "

//@ assignable \\everything;    "

//@ ghost public static int J = 1 + I;    "

//@ public static invariant I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    "

//@ ensures J == 2;    "

//@ assert I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    "

//@ assignable \\everything;    "

//@ ghost public final static int J = 1 + I;    "

//@ public static invariant I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assignable \\everything;    "

//@ ghost public final static int J = 1 + z();    "

//@ assert I == 10 && J == 11;    " // Fails since we don't have a static invariant

//@ assert I == 10 && J == 11;    " // Fails since we don't have a static invariant

//@ assignable \\everything;    "

//@ ensures \\result == 10;    "

//@ ghost public final static int J = 1 + I;    "

//@ public static invariant I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assignable \\everything;    "

/*@ helper */
//@ ghost public final int J = 1 + I;    "

//@ assert I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    "

//@ assignable \\everything;    "

//@ ghost public final int J = 1 + I;    "

//@ assert I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    " // but OK because final constant fields are not modified by \everything

//@ assert I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    " // but OK because final fields are not modified by \everything

//@ assignable \\everything;    "

//@ ghost public int J = 1 + I;    "

//@ public invariant I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    " // OK

//@ assert I == 1 && J == 2;    " // Should be OK because of invariant on n()

//@ assert I == 1 && J == 2;    " // OK because of invariant

//@ assert I == 1 && J == 2;    " // Should be OK because of invariant on n()

//@ assignable \\everything;    "   // FIXME _ why does this reestablish invariant?

//@ ghost public int J = 1 + I;    "

//@ public invariant I == 1 && J == 2;    "

//@ assert I == 1 && J == 2;    " // OK

//@ assert I == 1 && J == 2;    " // Fails because n is static and so does not establish the invariant

//@ assert I == 1 && J == 2;    " // OK because of invariant

//@ assert I == 1 && J == 2;    " // Fails because n is static and so does not establish the invariant

//@ public normal_behavior assignable \\everything;    "

//@ ghost public final int J = 1 + I;    "

//@ public invariant I == 10 && J == 11;    " // FIXME - check that this is required

//@ assert I == 10 && J == 11;    " // OK because of invariant

//@ assert I == 10 && J == 11;    " // Should be OK because of invariant on n()

//@ assert I == 10 && J == 11;    " // OK because of invariant

//@ assert I == 10 && J == 11;    " // Should be OK because of invariant on n()

//@ assignable \\everything;    "

//@ public normal_behavior ensures \\result == 10;    "

//@ ghost public final int J = 1 + I;    "

//@ public invariant I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    " // OK because of invariant

//@ assert I == 10 && J == 11;    " // Should be OK because final fields are not modified

//@ assert I == 10 && J == 11;    " // OK because of invariant

//@ assert I == 10 && J == 11;    " // Should be OK because final fields are not modified

//@ assignable \\everything;    "

//@ public normal_behavior ensures \\result == 10;    "

//@ ghost public final int J = 1 + I;    "

//@ public invariant I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assert I == 10 && J == 11;    "

//@ assignable \\everything;    "

//@ private normal_behavior ensures \\result == 10;    "

/*@ helper */
//@ assert H.CON1 == 50 ;    "

//@ assert H.CON2 == 51 ;    "

//@ assert H.CON2 == H.CON1 + 1 ;    "

//@ assert H.CON3 == 0x7fffffff ;    "

//@ assert H.CON1 == 50 ;    "

//@ assert H.CON2 == 51 ;    "

//@ assert H.CON2 == H.CON1 + 1 ;    "

//@ assert H.CON3 == 0x7fffffff ;    "

//@ assert H.CON1 == 50 ;    "

//@ assert H.CON2 == 51 ;    "

//@ assert H.CON2 == H.CON1 + 1 ;    "

//@ assert H.CON3 == 0x7fffffff ;    "

//@ assert H.CON1 == 50 ;    "

//@ assert H.CON2 == 51 ;    "

//@ assert H.CON2 == H.CON1 + 1 ;    "

//@ assert H.CON3 == 0x7fffffff ;    "

//@ assignable \\everything;    "

//@ assignable \    othing;     "

//@ assignable \    othing;     "

//@ ghost public int d = 20;    "

//@ initially a == 0 && b == 0 && c == 10 && cc == 15 && d == 20;"

//@ assignable \    othing;     "

//@ ensures a == 0 && b == 0 && c == 10 && cc == 15;     "

//@ assert a == 0;     "

//@ assert b == 0;     "

//@ assert c == 10;     "

//@ public invariant b == 10;    "

//@ assignable \    othing;     "

//@ assert arg != this;     "

//@ assert b == 10;     "

//@ assert arg.b == 10;     "

//@ assignable \    othing;     "

//@ assignable \    othing;     "

//@ ghost public int d = 20;    "

//@ initially a == 0 && b == 0 && c == 10 && cc == 15 && d == 20;"

//@ assignable \    othing;     "

//@ ensures a == 0 && b == 0 && c == 10 && cc == 15;     "

//@ assert a == 0;     "

//@ assert b == 0;     "

//@ assert c == 10;     "

//@ public invariant b == 10;    "

//@ assignable \    othing;     "

//@ assert arg != this;     "

//@ assert b == 10;     "

//@ assert arg.b == 10;     "

//@ assignable \    othing;     "

//@ assignable \    othing;     "

//@ ghost public int d = 20;    "

//@ initially a == 0 && b == 0 && c == 10 && cc == 15 && d == 20;"

//@ assignable \    othing;     "

//@ ensures a == 0 && b == 0 && c == 10 && cc == 15;     "

//@ assert a == 0;     "

//@ assert b == 0;     "

//@ assert c == 10;     "

//@ public invariant b == 10;    "

//@ assignable \    othing;     "

//@ assert arg != this;     "

//@ assert b == 10;     "

//@ assert arg.b == 10;     "

//@ assignable \    othing;     "

//@ assignable \    othing;     "

//@ ghost public int d = 20;    "

//@ initially a == 0 && b == 0 && c == 10 && cc == 15 && d == 20;"

//@ assignable \    othing;     "

//@ ensures a == 0 && b == 0 && c == 10 && cc == 15;     "

//@ assert a == 0;     "

//@ assert b == 0;     "

//@ assert c == 10;     "

//@ public invariant b == 10;    "

//@ assignable \    othing;     "

//@ assert arg != this;     "

//@ assert b == 10;     "

//@ assert arg.b == 10;     "

//@ assignable \    othing;     "

//@ assignable \    othing;     "

//@ ghost public int d = 20;    "

//@ initially a == 0 && b == 0 && c == 10 && cc == 15 && d == 20;"

//@ assignable \    othing;     "

//@ ensures a == 0 && b == 0 && c == 10 && cc == 15;     "

//@ assert a == 0;     "

//@ assert b == 0;     "

//@ assert c == 10;     "

//@ public invariant b == 10;    "

//@ assignable \    othing;     "

//@ assert arg != this;     "

//@ assert b == 10;     "

//@ assert arg.b == 10;     "

//@ requires k > 0;    "

//@ assert k == 0;    "

//@ requires k > 0;    "

//@ ensures \\result < 0;    "

//@ requires k == 0;    "

//@ requires t != null; requires \\elemtype(\\typeof(c)) == \\type(Object);     "

//@ assume c != null && c.length == 10;    "

//@ assert false;    "

//@ requires j == 0;    "

//@ assert false;    "

//@ requires j > 0;    "

//@ loop_invariant 0<=i && i <=j;    "

//@ loop_invariant n == i;    "

//@ assert n != 20;    "

//@ requires j > 0;    "

//@ loop_invariant 0<=i && i <=j;    "

//@ loop_invariant n == i;    "

//@ assert n == -10;    "

//@ assert c(2) != -2;    " // ERROR - c(2) can be any negative number

//@ assert cc(2) != -3;    " // OK - we know cc(2) is -2

//@ assert b();    " // ERROR - b() can be anything

//@ assert bb(0);    " // ERROR - bb(0) ncan be anything - is this any different from m3?

//@ normal_behavior requires z > 0; ensures \\result < 0;    "

/*@ pure */
//@ public normal_behavior requires z > 0; ensures \\result == -z;    "

/*@ pure */
//@ normal_behavior requires true;     "

/*@ pure */
//@ normal_behavior requires true;     "

/*@ pure */
//@ requires i>=0; ensures \\result==0;    "

//@ requires i>=0; ensures k == 0;    "

//@ requires i>=0; ensures \\result==0;    "

//@ requires i>=0; ensures \\result==0;    "

//@ public normal_behavior requires i>=0; ensures k==0;    "

//@ requires i>=0; ensures k==1;    "

//@ requires i>0;     "

//@ ensures k==0;    "

//@ signals (Exception e) false;    "

//@ also requires i==0;     "

//@ ensures false;    "

//@ signals (RuntimeException e) k==1;    "

//@ signals_only RuntimeException;    "

//@ assert k != 9;    "

//@ signals (Exception) false;    "

//@ assert true;    "

//@ ensures \\result == i+10;    "

//@ assert false;    "

//@ assert false;    "

//@ assume k == 98;     "

//@ ghost int kk = 0;    "

//@ set kk = 5;    "

//@ debug kk = 7;    "

//@ set kk = \\old(k) - k;    "

//@ assume (k==k) && (\\lblpos X (k == 65));    "

//@ assume o!= null && \\typeof(o) <: \\type(Object);    "

//@ unreachable;    "

//@ ensures false;     "

//@ requires i != 0; ensures false;     " //Line 19

//@ requires i == 0; ensures false;     " // Line 40

//@ ensures \\result != 10;     "

//@ requires k > 0;    "

//@ assert k == 0;    "

//@ requires k > 0;    "

//@ ensures \\result < 0;    "

//@ requires k == 0;    "

//@ requires t != null; requires \\elemtype(\\typeof(c)) == \\type(Object);     "

//@ assume c != null && c.length == 10;    "

//@ assert false;    "

//@ requires j == 0;    "

//@ assert false;    "

//@ requires j > 0;    "

//@ loop_invariant 0<=i && i <=j;    "

//@ loop_invariant n == i;    "

//@ assert n != 20;    "

//@ requires j > 0;    "

//@ loop_invariant 0<=i && i <=j;    "

//@ loop_invariant n == i;    "

//@ assert n == -10;    "

//@ assert c(2) != -2;    " // ERROR - c(2) can be any negative number

//@ assert cc(2) != -3;    " // OK - we know cc(2) is -2

//@ assert b();    " // ERROR - b() can be anything

//@ assert bb(0);    " // ERROR - bb(0) ncan be anything - is this any different from m3?

//@ normal_behavior requires z > 0; ensures \\result < 0;    "

/*@ pure */
//@ public normal_behavior requires z > 0; ensures \\result == -z;    "

/*@ pure */
//@ normal_behavior requires true;     "

/*@ pure */
//@ normal_behavior requires true;     "

/*@ pure */
//@ requires i>=0; ensures \\result==0;    "

//@ requires i>=0; ensures k == 0;    "

//@ requires i>=0; ensures \\result==0;    "

//@ requires i>=0; ensures \\result==0;    "

//@ public normal_behavior requires i>=0; ensures k==0;    "

//@ requires i>=0; ensures k==1;    "

//@ requires i>0;     "

//@ ensures k==0;    "

//@ signals (Exception e) false;    "

//@ also requires i==0;     "

//@ ensures false;    "

//@ signals (RuntimeException e) k==1;    "

//@ signals_only RuntimeException;    "

//@ assert k != 9;    "

//@ signals (Exception) false;    "

//@ assert true;    "

//@ ensures \\result == i+10;    "

//@ assert false;    "

//@ assert false;    "

//@ assume k == 98;     "

//@ ghost int kk = 0;    "

//@ set kk = 5;    "

//@ debug kk = 7;    "

//@ set kk = \\old(k) - k;    "

//@ assume (k==k) && (\\lblpos X (k == 65));    "

//@ assume o!= null && \\typeof(o) <: \\type(Object);    "

//@ unreachable;    "

//@ ensures false;     "

//@ requires i != 0; ensures false;     " //Line 19

//@ requires i == 0; ensures false;     " // Line 40

//@ ensures \\result != 10;     "

//@ requires k > 0;    "

//@ assert k == 0;    "

//@ requires k > 0;    "

//@ ensures \\result < 0;    "

//@ requires k == 0;    "

//@ requires t != null; requires \\elemtype(\\typeof(c)) == \\type(Object);     "

//@ assume c != null && c.length == 10;    "

//@ assert false;    "

//@ requires j == 0;    "

//@ assert false;    "

//@ requires j > 0;    "

//@ loop_invariant 0<=i && i <=j;    "

//@ loop_invariant n == i;    "

//@ assert n != 20;    "

//@ requires j > 0;    "

//@ loop_invariant 0<=i && i <=j;    "

//@ loop_invariant n == i;    "

//@ assert n == -10;    "

//@ assert c(2) != -2;    " // ERROR - c(2) can be any negative number

//@ assert cc(2) != -3;    " // OK - we know cc(2) is -2

//@ assert b();    " // ERROR - b() can be anything

//@ assert bb(0);    " // ERROR - bb(0) ncan be anything - is this any different from m3?

//@ normal_behavior requires z > 0; ensures \\result < 0;    "

/*@ pure */
//@ public normal_behavior requires z > 0; ensures \\result == -z;    "

/*@ pure */
//@ normal_behavior requires true;     "

/*@ pure */
//@ normal_behavior requires true;     "

/*@ pure */
//@ requires i>=0; ensures \\result==0;    "

//@ requires i>=0; ensures k == 0;    "

//@ requires i>=0; ensures \\result==0;    "

//@ requires i>=0; ensures \\result==0;    "

//@ public normal_behavior requires i>=0; ensures k==0;    "

//@ requires i>=0; ensures k==1;    "

//@ requires i>0;     "

//@ ensures k==0;    "

//@ signals (Exception e) false;    "

//@ also requires i==0;     "

//@ ensures false;    "

//@ signals (RuntimeException e) k==1;    "

//@ signals_only RuntimeException;    "

//@ assert k != 9;    "

//@ signals (Exception) false;    "

//@ assert true;    "

//@ ensures \\result == i+10;    "

//@ assert false;    "

//@ assert false;    "

//@ assume k == 98;     "

//@ ghost int kk = 0;    "

//@ set kk = 5;    "

//@ debug kk = 7;    "

//@ set kk = \\old(k) - k;    "

//@ assume (k==k) && (\\lblpos X (k == 65));    "

//@ assume o!= null && \\typeof(o) <: \\type(Object);    "

//@ unreachable;    "

//@ ensures false;     "

//@ requires i != 0; ensures false;     " //Line 19

//@ requires i == 0; ensures false;     " // Line 40

//@ ensures \\result != 10;     "

//@ requires k > 0;    "

//@ assert k == 0;    "

//@ requires k > 0;    "

//@ ensures \\result < 0;    "

//@ requires k == 0;    "

//@ requires t != null; requires \\elemtype(\\typeof(c)) == \\type(Object);     "

//@ assume c != null && c.length == 10;    "

//@ assert false;    "

//@ requires j == 0;    "

//@ assert false;    "

//@ requires j > 0;    "

//@ loop_invariant 0<=i && i <=j;    "

//@ loop_invariant n == i;    "

//@ assert n != 20;    "

//@ requires j > 0;    "

//@ loop_invariant 0<=i && i <=j;    "

//@ loop_invariant n == i;    "

//@ assert n == -10;    "

//@ assert c(2) != -2;    " // ERROR - c(2) can be any negative number

//@ assert cc(2) != -3;    " // OK - we know cc(2) is -2

//@ assert b();    " // ERROR - b() can be anything

//@ assert bb(0);    " // ERROR - bb(0) ncan be anything - is this any different from m3?

//@ normal_behavior requires z > 0; ensures \\result < 0;    "

/*@ pure */
//@ public normal_behavior requires z > 0; ensures \\result == -z;    "

/*@ pure */
//@ normal_behavior requires true;     "

/*@ pure */
//@ normal_behavior requires true;     "

/*@ pure */
//@ requires i>=0; ensures \\result==0;    "

//@ requires i>=0; ensures k == 0;    "

//@ requires i>=0; ensures \\result==0;    "

//@ requires i>=0; ensures \\result==0;    "

//@ public normal_behavior requires i>=0; ensures k==0;    "

//@ requires i>=0; ensures k==1;    "

//@ requires i>0;     "

//@ ensures k==0;    "

//@ signals (Exception e) false;    "

//@ also requires i==0;     "

//@ ensures false;    "

//@ signals (RuntimeException e) k==1;    "

//@ signals_only RuntimeException;    "

//@ assert k != 9;    "

//@ signals (Exception) false;    "

//@ assert true;    "

//@ ensures \\result == i+10;    "

//@ assert false;    "

//@ assert false;    "

//@ assume k == 98;     "

//@ ghost int kk = 0;    "

//@ set kk = 5;    "

//@ debug kk = 7;    "

//@ set kk = \\old(k) - k;    "

//@ assume (k==k) && (\\lblpos X (k == 65));    "

//@ assume o!= null && \\typeof(o) <: \\type(Object);    "

//@ unreachable;    "

//@ ensures false;     "

//@ requires i != 0; ensures false;     " //Line 19

//@ requires i == 0; ensures false;     " // Line 40

//@ ensures \\result != 10;     "

//@ requires k > 0;    "

//@ assert k == 0;    "

//@ requires k > 0;    "

//@ ensures \\result < 0;    "

//@ requires k == 0;    "

//@ requires t != null; requires \\elemtype(\\typeof(c)) == \\type(Object);     "

//@ assume c != null && c.length == 10;    "

//@ assert false;    "

//@ requires j == 0;    "

//@ assert false;    "

//@ requires j > 0;    "

//@ loop_invariant 0<=i && i <=j;    "

//@ loop_invariant n == i;    "

//@ assert n != 20;    "

//@ requires j > 0;    "

//@ loop_invariant 0<=i && i <=j;    "

//@ loop_invariant n == i;    "

//@ assert n == -10;    "

//@ assert c(2) != -2;    " // ERROR - c(2) can be any negative number

//@ assert cc(2) != -3;    " // OK - we know cc(2) is -2

//@ assert b();    " // ERROR - b() can be anything

//@ assert bb(0);    " // ERROR - bb(0) ncan be anything - is this any different from m3?

//@ normal_behavior requires z > 0; ensures \\result < 0;    "

/*@ pure */
//@ public normal_behavior requires z > 0; ensures \\result == -z;    "

/*@ pure */
//@ normal_behavior requires true;     "

/*@ pure */
//@ normal_behavior requires true;     "

/*@ pure */
//@ requires i>=0; ensures \\result==0;    "

//@ requires i>=0; ensures k == 0;    "

//@ requires i>=0; ensures \\result==0;    "

//@ requires i>=0; ensures \\result==0;    "

//@ public normal_behavior requires i>=0; ensures k==0;    "

//@ requires i>=0; ensures k==1;    "

//@ requires i>0;     "

//@ ensures k==0;    "

//@ signals (Exception e) false;    "

//@ also requires i==0;     "

//@ ensures false;    "

//@ signals (RuntimeException e) k==1;    "

//@ signals_only RuntimeException;    "

//@ assert k != 9;    "

//@ signals (Exception) false;    "

//@ assert true;    "

//@ ensures \\result == i+10;    "

//@ assert false;    "

//@ assert false;    "

//@ assume k == 98;     "

//@ ghost int kk = 0;    "

//@ set kk = 5;    "

//@ debug kk = 7;    "

//@ set kk = \\old(k) - k;    "

//@ assume (k==k) && (\\lblpos X (k == 65));    "

//@ assume o!= null && \\typeof(o) <: \\type(Object);    "

//@ unreachable;    "

//@ ensures false;     "

//@ requires i != 0; ensures false;     " //Line 19

//@ requires i == 0; ensures false;     " // Line 40

//@ ensures \\result != 10;     "

//@ assert Z.AA != Z.BB;     "

//@ assert Z.AA == ee;     "

//@ assert Z.AA == ee && ee != Z.BB;     "

//@ assert Z.AA == Z.AA;     "

//@ assert Z.AA != null;     "

//@ assert Z.AA instanceof Z;     "

//@ assert Z.AA != Z.BB;     "

//@ assert ee == null || ee == Z.AA || ee == Z.BB || ee == Z.CC;     "

//@ assume ee != Z.AA ;     "

//@ assume ee != Z.CC ;     "

//@ assert ee == Z.BB ;     "

//@ assume ee != Z.AA ;     "

//@ assume ee != Z.CC ;     "

//@ assert ee != Z.BB ;     " // ERROR

//@ assert o instanceof Z ;     "

//@ assert o instanceof Integer ;     " // ERROR

//@ assert Z.AA != o;     "

//@ assume !(o instanceof Z) ;    "

//@ assert Z.AA != o;     "

//@ assume (o instanceof Z) ;    "

//@ assert o == Z.AA || o == Z.CC || o == Z.BB;     "

//@ assert Z.AA != o;     "

//@ ensures \\result > 0;    "

//@ ensures the_value == MyEnum.ONE ==> \\result == 2;    "

//@ ensures the_value == MyEnum.TWO ==> \\result == 4;    "

//@ ensures the_value == MyEnum.THREE ==> \\result == 8;    "

//@ assert Z.AA != Z.BB;     "

//@ assert Z.AA == ee;     "

//@ assert Z.AA == ee && ee != Z.BB;     "

//@ assert Z.AA == Z.AA;     "

//@ assert Z.AA != null;     "

//@ assert Z.AA instanceof Z;     "

//@ assert Z.AA != Z.BB;     "

//@ assert ee == null || ee == Z.AA || ee == Z.BB || ee == Z.CC;     "

//@ assume ee != Z.AA ;     "

//@ assume ee != Z.CC ;     "

//@ assert ee == Z.BB ;     "

//@ assume ee != Z.AA ;     "

//@ assume ee != Z.CC ;     "

//@ assert ee != Z.BB ;     " // ERROR

//@ assert o instanceof Z ;     "

//@ assert o instanceof Integer ;     " // ERROR

//@ assert Z.AA != o;     "

//@ assume !(o instanceof Z) ;    "

//@ assert Z.AA != o;     "

//@ assume (o instanceof Z) ;    "

//@ assert o == Z.AA || o == Z.CC || o == Z.BB;     "

//@ assert Z.AA != o;     "

//@ ensures \\result > 0;    "

//@ ensures the_value == MyEnum.ONE ==> \\result == 2;    "

//@ ensures the_value == MyEnum.TWO ==> \\result == 4;    "

//@ ensures the_value == MyEnum.THREE ==> \\result == 8;    "

//@ assert Z.AA != Z.BB;     "

//@ assert Z.AA == ee;     "

//@ assert Z.AA == ee && ee != Z.BB;     "

//@ assert Z.AA == Z.AA;     "

//@ assert Z.AA != null;     "

//@ assert Z.AA instanceof Z;     "

//@ assert Z.AA != Z.BB;     "

//@ assert ee == null || ee == Z.AA || ee == Z.BB || ee == Z.CC;     "

//@ assume ee != Z.AA ;     "

//@ assume ee != Z.CC ;     "

//@ assert ee == Z.BB ;     "

//@ assume ee != Z.AA ;     "

//@ assume ee != Z.CC ;     "

//@ assert ee != Z.BB ;     " // ERROR

//@ assert o instanceof Z ;     "

//@ assert o instanceof Integer ;     " // ERROR

//@ assert Z.AA != o;     "

//@ assume !(o instanceof Z) ;    "

//@ assert Z.AA != o;     "

//@ assume (o instanceof Z) ;    "

//@ assert o == Z.AA || o == Z.CC || o == Z.BB;     "

//@ assert Z.AA != o;     "

//@ ensures \\result > 0;    "

//@ ensures the_value == MyEnum.ONE ==> \\result == 2;    "

//@ ensures the_value == MyEnum.TWO ==> \\result == 4;    "

//@ ensures the_value == MyEnum.THREE ==> \\result == 8;    "

//@ assert Z.AA != Z.BB;     "

//@ assert Z.AA == ee;     "

//@ assert Z.AA == ee && ee != Z.BB;     "

//@ assert Z.AA == Z.AA;     "

//@ assert Z.AA != null;     "

//@ assert Z.AA instanceof Z;     "

//@ assert Z.AA != Z.BB;     "

//@ assert ee == null || ee == Z.AA || ee == Z.BB || ee == Z.CC;     "

//@ assume ee != Z.AA ;     "

//@ assume ee != Z.CC ;     "

//@ assert ee == Z.BB ;     "

//@ assume ee != Z.AA ;     "

//@ assume ee != Z.CC ;     "

//@ assert ee != Z.BB ;     " // ERROR

//@ assert o instanceof Z ;     "

//@ assert o instanceof Integer ;     " // ERROR

//@ assert Z.AA != o;     "

//@ assume !(o instanceof Z) ;    "

//@ assert Z.AA != o;     "

//@ assume (o instanceof Z) ;    "

//@ assert o == Z.AA || o == Z.CC || o == Z.BB;     "

//@ assert Z.AA != o;     "

//@ ensures \\result > 0;    "

//@ ensures the_value == MyEnum.ONE ==> \\result == 2;    "

//@ ensures the_value == MyEnum.TWO ==> \\result == 4;    "

//@ ensures the_value == MyEnum.THREE ==> \\result == 8;    "

//@ assert Z.AA != Z.BB;     "

//@ assert Z.AA == ee;     "

//@ assert Z.AA == ee && ee != Z.BB;     "

//@ assert Z.AA == Z.AA;     "

//@ assert Z.AA != null;     "

//@ assert Z.AA instanceof Z;     "

//@ assert Z.AA != Z.BB;     "

//@ assert ee == null || ee == Z.AA || ee == Z.BB || ee == Z.CC;     "

//@ assume ee != Z.AA ;     "

//@ assume ee != Z.CC ;     "

//@ assert ee == Z.BB ;     "

//@ assume ee != Z.AA ;     "

//@ assume ee != Z.CC ;     "

//@ assert ee != Z.BB ;     " // ERROR

//@ assert o instanceof Z ;     "

//@ assert o instanceof Integer ;     " // ERROR

//@ assert Z.AA != o;     "

//@ assume !(o instanceof Z) ;    "

//@ assert Z.AA != o;     "

//@ assume (o instanceof Z) ;    "

//@ assert o == Z.AA || o == Z.CC || o == Z.BB;     "

//@ assert Z.AA != o;     "

//@ ensures \\result > 0;    "

//@ ensures the_value == MyEnum.ONE ==> \\result == 2;    "

//@ ensures the_value == MyEnum.TWO ==> \\result == 4;    "

//@ ensures the_value == MyEnum.THREE ==> \\result == 8;    "

//@ code_java_math spec_java_math     "

//@ normal_behavior     "

//@ ensures \\result == (i > 0 && i < 10);    "

//@ pure    "

//@ model public boolean m(int i);    "

//@ assert (\\forall int k; 3<k && k <7; m(k));    "

//@ assert (\\forall int k; 3<k && k <7; m(k-1));    "

//@ assert !(\\forall int k; -3<k && k <7; m(k));    "

//@ code_java_math spec_java_math     "

//@ normal_behavior     "

//@ ensures \\result == (i > 0 && i < 10);    "

//@ pure    "

//@ model public boolean m(int i);    "

//@ pure    "

//@ assert !(\\forall int k; 3<k && k <11; m(k));    "

//@ normal_behavior     "

//@ ensures \\result == (i > 0 && i < 10);    "

//@ model public boolean mfunc(int i);    "

//@ assert mfunc(5);    "

//@ assert !mfunc(0);    "

//@ normal_behavior     "

//@ assignable n;     "

//@ ensures \\result == (i > 0 && i < 10);    "

//@ model public boolean mfunc(int i);    "

//@ assert mfunc(5);    "

//@ assert !mfunc(0);    "

//@ normal_behavior     "

//@ assignable n;     "

//@ ensures \\result == (i > 0 && i < 10);    "

//@ model public boolean mfunc(int i);    "

//@ assert mfunc(5);    "

//@ assert !mfunc(0);    "

//@ normal_behavior     "

//@ assignable n;     "

//@ ensures \\result == (i > 0 && i < 10);    "

//@ model function public boolean mfunc(int i);    "

//@ assert mfunc(5);    "

//@ assert !mfunc(n);    "

//@ normal_behavior     "

//@ ensures \\result == (i > 0 && i < 10);    "

//@ static model public boolean mfunc(int i);    "

//@ assert mfunc(5);    "

//@ assert !mfunc(n);    "

//@ code_java_math spec_java_math     "

//@ normal_behavior     "

//@ ensures \\result == (i > 0 && i < 10);    "

//@ pure    "

//@ model public boolean m(int i);    "

//@ assert (\\forall int k; 3<k && k <7; m(k));    "

//@ assert (\\forall int k; 3<k && k <7; m(k-1));    "

//@ assert !(\\forall int k; -3<k && k <7; m(k));    "

//@ code_java_math spec_java_math     "

//@ normal_behavior     "

//@ ensures \\result == (i > 0 && i < 10);    "

//@ pure    "

//@ model public boolean m(int i);    "

//@ pure    "

//@ assert !(\\forall int k; 3<k && k <11; m(k));    "

//@ normal_behavior     "

//@ ensures \\result == (i > 0 && i < 10);    "

//@ model public boolean mfunc(int i);    "

//@ assert mfunc(5);    "

//@ assert !mfunc(0);    "

//@ normal_behavior     "

//@ assignable n;     "

//@ ensures \\result == (i > 0 && i < 10);    "

//@ model public boolean mfunc(int i);    "

//@ assert mfunc(5);    "

//@ assert !mfunc(0);    "

//@ normal_behavior     "

//@ assignable n;     "

//@ ensures \\result == (i > 0 && i < 10);    "

//@ model public boolean mfunc(int i);    "

//@ assert mfunc(5);    "

//@ assert !mfunc(0);    "

//@ normal_behavior     "

//@ assignable n;     "

//@ ensures \\result == (i > 0 && i < 10);    "

//@ model function public boolean mfunc(int i);    "

//@ assert mfunc(5);    "

//@ assert !mfunc(n);    "

//@ normal_behavior     "

//@ ensures \\result == (i > 0 && i < 10);    "

//@ static model public boolean mfunc(int i);    "

//@ assert mfunc(5);    "

//@ assert !mfunc(n);    "

//@ code_java_math spec_java_math     "

//@ normal_behavior     "

//@ ensures \\result == (i > 0 && i < 10);    "

//@ pure    "

//@ model public boolean m(int i);    "

//@ assert (\\forall int k; 3<k && k <7; m(k));    "

//@ assert (\\forall int k; 3<k && k <7; m(k-1));    "

//@ assert !(\\forall int k; -3<k && k <7; m(k));    "

//@ code_java_math spec_java_math     "

//@ normal_behavior     "

//@ ensures \\result == (i > 0 && i < 10);    "

//@ pure    "

//@ model public boolean m(int i);    "

//@ pure    "

//@ assert !(\\forall int k; 3<k && k <11; m(k));    "

//@ normal_behavior     "

//@ ensures \\result == (i > 0 && i < 10);    "

//@ model public boolean mfunc(int i);    "

//@ assert mfunc(5);    "

//@ assert !mfunc(0);    "

//@ normal_behavior     "

//@ assignable n;     "

//@ ensures \\result == (i > 0 && i < 10);    "

//@ model public boolean mfunc(int i);    "

//@ assert mfunc(5);    "

//@ assert !mfunc(0);    "

//@ normal_behavior     "

//@ assignable n;     "

//@ ensures \\result == (i > 0 && i < 10);    "

//@ model public boolean mfunc(int i);    "

//@ assert mfunc(5);    "

//@ assert !mfunc(0);    "

//@ normal_behavior     "

//@ assignable n;     "

//@ ensures \\result == (i > 0 && i < 10);    "

//@ model function public boolean mfunc(int i);    "

//@ assert mfunc(5);    "

//@ assert !mfunc(n);    "

//@ normal_behavior     "

//@ ensures \\result == (i > 0 && i < 10);    "

//@ static model public boolean mfunc(int i);    "

//@ assert mfunc(5);    "

//@ assert !mfunc(n);    "

//@ code_java_math spec_java_math     "

//@ normal_behavior     "

//@ ensures \\result == (i > 0 && i < 10);    "

//@ pure    "

//@ model public boolean m(int i);    "

//@ assert (\\forall int k; 3<k && k <7; m(k));    "

//@ assert (\\forall int k; 3<k && k <7; m(k-1));    "

//@ assert !(\\forall int k; -3<k && k <7; m(k));    "

//@ code_java_math spec_java_math     "

//@ normal_behavior     "

//@ ensures \\result == (i > 0 && i < 10);    "

//@ pure    "

//@ model public boolean m(int i);    "

//@ pure    "

//@ assert !(\\forall int k; 3<k && k <11; m(k));    "

//@ normal_behavior     "

//@ ensures \\result == (i > 0 && i < 10);    "

//@ model public boolean mfunc(int i);    "

//@ assert mfunc(5);    "

//@ assert !mfunc(0);    "

//@ normal_behavior     "

//@ assignable n;     "

//@ ensures \\result == (i > 0 && i < 10);    "

//@ model public boolean mfunc(int i);    "

//@ assert mfunc(5);    "

//@ assert !mfunc(0);    "

//@ normal_behavior     "

//@ assignable n;     "

//@ ensures \\result == (i > 0 && i < 10);    "

//@ model public boolean mfunc(int i);    "

//@ assert mfunc(5);    "

//@ assert !mfunc(0);    "

//@ normal_behavior     "

//@ assignable n;     "

//@ ensures \\result == (i > 0 && i < 10);    "

//@ model function public boolean mfunc(int i);    "

//@ assert mfunc(5);    "

//@ assert !mfunc(n);    "

//@ normal_behavior     "

//@ ensures \\result == (i > 0 && i < 10);    "

//@ static model public boolean mfunc(int i);    "

//@ assert mfunc(5);    "

//@ assert !mfunc(n);    "

//@ code_java_math spec_java_math     "

//@ normal_behavior     "

//@ ensures \\result == (i > 0 && i < 10);    "

//@ pure    "

//@ model public boolean m(int i);    "

//@ assert (\\forall int k; 3<k && k <7; m(k));    "

//@ assert (\\forall int k; 3<k && k <7; m(k-1));    "

//@ assert !(\\forall int k; -3<k && k <7; m(k));    "

//@ code_java_math spec_java_math     "

//@ normal_behavior     "

//@ ensures \\result == (i > 0 && i < 10);    "

//@ pure    "

//@ model public boolean m(int i);    "

//@ pure    "

//@ assert !(\\forall int k; 3<k && k <11; m(k));    "

//@ normal_behavior     "

//@ ensures \\result == (i > 0 && i < 10);    "

//@ model public boolean mfunc(int i);    "

//@ assert mfunc(5);    "

//@ assert !mfunc(0);    "

//@ normal_behavior     "

//@ assignable n;     "

//@ ensures \\result == (i > 0 && i < 10);    "

//@ model public boolean mfunc(int i);    "

//@ assert mfunc(5);    "

//@ assert !mfunc(0);    "

//@ normal_behavior     "

//@ assignable n;     "

//@ ensures \\result == (i > 0 && i < 10);    "

//@ model public boolean mfunc(int i);    "

//@ assert mfunc(5);    "

//@ assert !mfunc(0);    "

//@ normal_behavior     "

//@ assignable n;     "

//@ ensures \\result == (i > 0 && i < 10);    "

//@ model function public boolean mfunc(int i);    "

//@ assert mfunc(5);    "

//@ assert !mfunc(n);    "

//@ normal_behavior     "

//@ ensures \\result == (i > 0 && i < 10);    "

//@ static model public boolean mfunc(int i);    "

//@ assert mfunc(5);    "

//@ assert !mfunc(n);    "

//@ requires \\type(E) != \\type(Integer) ;    "

//@ assert \\typeof(this) <: \\type(TestJava);    "

//@ assume \\typeof(this) == \\type(Object);    "

//@ assert false;    " // should not trigger

//@ assert \\typeof(this) == \\type(Object);    "

//@ assume i != null;    "

//@ assert i instanceof Object;    "

//@ assert \\typeof(i) <: \\type(Object);    " // Line 6

//@ assert \\erasure(\\typeof(i)) <: \\erasure(\\type(Object));    "

//@ assert \\typeof(i) <: \\type(T);    "

//@ assert i instanceof B;    "

//@ assert \\erasure(\\typeof(i)) <: \\erasure(\\type(B));    "

//@ assert \\typeof(i) <: \\type(B);    " // Line 11

//@ assert \\erasure(\\typeof(i)) <: \\erasure(\\type(C));    " // false

/*@ public normal_behavior ensures true; pure */
//@ assume i != null;    "

//@ assert i instanceof Object;    "

//@ assert \\typeof(i) <: \\type(C);    " // false

/*@ public normal_behavior ensures true; pure */
//@ assume i != null;    "

//@ assert i instanceof Object;    "

//@ assert \\type(T) <: \\type(B);    " // true

//@ assert \\type(T) <: \\type(C);    " // false

/*@ public normal_behavior ensures true; pure */
//@ assert Object.class == java.lang.Object.class;    "

//@ assert \\type(TestJava<Integer>) != \\type(Object);    "

//@ assert \\type(TestJava<Integer>) != \\type(TestJava<Object>);    "

//@ assert Object.class == \\erasure(\\type(T));    " // NO

//@ assert \\type(TestJava<Integer>) == \\type(TestJava<T>);    "  // NO

//@ assert \\typeof(this) == \\type(Object);    "  // NO

//@ assert \\type(TestJava<Integer>) == \\type(TestJava<Object>);    "  // NO

//@ assert Object.class != \\erasure(\\type(T));    "  // OK because T extends B so can't be Object

//@ requires \\type(E) != \\type(Integer) ;    "

//@ requires \\type(E) != \\type(Integer) ;    "

//@ requires \\type(E) == \\type(Integer) ;    "

//@ requires \\type(E) == \\type(Integer) ;    "

/*@ non_null*/
/*@ non_null*/
//@ requires \\type(E) != \\type(Integer);    "

/*@ non_null*/
/*@ non_null*/
/*@ non_null*/
//@ requires \\type(E) != \\type(Integer);    "

/*@non_null*/
/*@ assume ooo >= 0; */
//@ assert sum >= 0;     "

/*@ code_bigint_math spec_bigint_math */
/*@non_null*/
//@ loop_invariant sum >= 0;     "

/*@ assume o != null && o >= 0; */
//@ assert sum >= 0;     "

/*@ code_bigint_math spec_bigint_math */
/*@non_null*/
//@ loop_invariant sum >= 0;     "

/*@ assume o >= 0; */
//@ assert sum >= 0;     "

/*@ code_bigint_math spec_bigint_math */
/*@non_null*/
//@ loop_invariant sum >= 0;     "

/*@ assume o >= 0; */
//@ assert sum >= 0;     "


//@ assert \\elemtype(\\typeof(a)) == \\type(char);     "


//@ assert \\elemtype(\\typeof(a)) == \\type(int);     "

//@ public exceptional_behavior     "

//@   requires true;     "  // FIXME - should be t instanceof T

/*@ non_null*/
//@ requires \\type(E) != \\type(Integer) ;    "

//@ assert \\typeof(this) <: \\type(TestJava);    "

//@ assume \\typeof(this) == \\type(Object);    "

//@ assert false;    " // should not trigger

//@ assert \\typeof(this) == \\type(Object);    "

//@ assume i != null;    "

//@ assert i instanceof Object;    "

//@ assert \\typeof(i) <: \\type(Object);    " // Line 6

//@ assert \\erasure(\\typeof(i)) <: \\erasure(\\type(Object));    "

//@ assert \\typeof(i) <: \\type(T);    "

//@ assert i instanceof B;    "

//@ assert \\erasure(\\typeof(i)) <: \\erasure(\\type(B));    "

//@ assert \\typeof(i) <: \\type(B);    " // Line 11

//@ assert \\erasure(\\typeof(i)) <: \\erasure(\\type(C));    " // false

/*@ public normal_behavior ensures true; pure */
//@ assume i != null;    "

//@ assert i instanceof Object;    "

//@ assert \\typeof(i) <: \\type(C);    " // false

/*@ public normal_behavior ensures true; pure */
//@ assume i != null;    "

//@ assert i instanceof Object;    "

//@ assert \\type(T) <: \\type(B);    " // true

//@ assert \\type(T) <: \\type(C);    " // false

/*@ public normal_behavior ensures true; pure */
//@ assert Object.class == java.lang.Object.class;    "

//@ assert \\type(TestJava<Integer>) != \\type(Object);    "

//@ assert \\type(TestJava<Integer>) != \\type(TestJava<Object>);    "

//@ assert Object.class == \\erasure(\\type(T));    " // NO

//@ assert \\type(TestJava<Integer>) == \\type(TestJava<T>);    "  // NO

//@ assert \\typeof(this) == \\type(Object);    "  // NO

//@ assert \\type(TestJava<Integer>) == \\type(TestJava<Object>);    "  // NO

//@ assert Object.class != \\erasure(\\type(T));    "  // OK because T extends B so can't be Object

//@ requires \\type(E) != \\type(Integer) ;    "

//@ requires \\type(E) != \\type(Integer) ;    "

//@ requires \\type(E) == \\type(Integer) ;    "

//@ requires \\type(E) == \\type(Integer) ;    "

/*@ non_null*/
/*@ non_null*/
//@ requires \\type(E) != \\type(Integer);    "

/*@ non_null*/
/*@ non_null*/
/*@ non_null*/
//@ requires \\type(E) != \\type(Integer);    "

/*@non_null*/
/*@ assume ooo >= 0; */
//@ assert sum >= 0;     "

/*@ code_bigint_math spec_bigint_math */
/*@non_null*/
//@ loop_invariant sum >= 0;     "

/*@ assume o != null && o >= 0; */
//@ assert sum >= 0;     "

/*@ code_bigint_math spec_bigint_math */
/*@non_null*/
//@ loop_invariant sum >= 0;     "

/*@ assume o >= 0; */
//@ assert sum >= 0;     "

/*@ code_bigint_math spec_bigint_math */
/*@non_null*/
//@ loop_invariant sum >= 0;     "

/*@ assume o >= 0; */
//@ assert sum >= 0;     "


//@ assert \\elemtype(\\typeof(a)) == \\type(char);     "


//@ assert \\elemtype(\\typeof(a)) == \\type(int);     "

//@ public exceptional_behavior     "

//@   requires true;     "  // FIXME - should be t instanceof T

/*@ non_null*/
//@ requires \\type(E) != \\type(Integer) ;    "

//@ assert \\typeof(this) <: \\type(TestJava);    "

//@ assume \\typeof(this) == \\type(Object);    "

//@ assert false;    " // should not trigger

//@ assert \\typeof(this) == \\type(Object);    "

//@ assume i != null;    "

//@ assert i instanceof Object;    "

//@ assert \\typeof(i) <: \\type(Object);    " // Line 6

//@ assert \\erasure(\\typeof(i)) <: \\erasure(\\type(Object));    "

//@ assert \\typeof(i) <: \\type(T);    "

//@ assert i instanceof B;    "

//@ assert \\erasure(\\typeof(i)) <: \\erasure(\\type(B));    "

//@ assert \\typeof(i) <: \\type(B);    " // Line 11

//@ assert \\erasure(\\typeof(i)) <: \\erasure(\\type(C));    " // false

/*@ public normal_behavior ensures true; pure */
//@ assume i != null;    "

//@ assert i instanceof Object;    "

//@ assert \\typeof(i) <: \\type(C);    " // false

/*@ public normal_behavior ensures true; pure */
//@ assume i != null;    "

//@ assert i instanceof Object;    "

//@ assert \\type(T) <: \\type(B);    " // true

//@ assert \\type(T) <: \\type(C);    " // false

/*@ public normal_behavior ensures true; pure */
//@ assert Object.class == java.lang.Object.class;    "

//@ assert \\type(TestJava<Integer>) != \\type(Object);    "

//@ assert \\type(TestJava<Integer>) != \\type(TestJava<Object>);    "

//@ assert Object.class == \\erasure(\\type(T));    " // NO

//@ assert \\type(TestJava<Integer>) == \\type(TestJava<T>);    "  // NO

//@ assert \\typeof(this) == \\type(Object);    "  // NO

//@ assert \\type(TestJava<Integer>) == \\type(TestJava<Object>);    "  // NO

//@ assert Object.class != \\erasure(\\type(T));    "  // OK because T extends B so can't be Object

//@ requires \\type(E) != \\type(Integer) ;    "

//@ requires \\type(E) != \\type(Integer) ;    "

//@ requires \\type(E) == \\type(Integer) ;    "

//@ requires \\type(E) == \\type(Integer) ;    "

/*@ non_null*/
/*@ non_null*/
//@ requires \\type(E) != \\type(Integer);    "

/*@ non_null*/
/*@ non_null*/
/*@ non_null*/
//@ requires \\type(E) != \\type(Integer);    "

/*@non_null*/
/*@ assume ooo >= 0; */
//@ assert sum >= 0;     "

/*@ code_bigint_math spec_bigint_math */
/*@non_null*/
//@ loop_invariant sum >= 0;     "

/*@ assume o != null && o >= 0; */
//@ assert sum >= 0;     "

/*@ code_bigint_math spec_bigint_math */
/*@non_null*/
//@ loop_invariant sum >= 0;     "

/*@ assume o >= 0; */
//@ assert sum >= 0;     "

/*@ code_bigint_math spec_bigint_math */
/*@non_null*/
//@ loop_invariant sum >= 0;     "

/*@ assume o >= 0; */
//@ assert sum >= 0;     "


//@ assert \\elemtype(\\typeof(a)) == \\type(char);     "


//@ assert \\elemtype(\\typeof(a)) == \\type(int);     "

//@ public exceptional_behavior     "

//@   requires true;     "  // FIXME - should be t instanceof T

/*@ non_null*/
//@ requires \\type(E) != \\type(Integer) ;    "

//@ assert \\typeof(this) <: \\type(TestJava);    "

//@ assume \\typeof(this) == \\type(Object);    "

//@ assert false;    " // should not trigger

//@ assert \\typeof(this) == \\type(Object);    "

//@ assume i != null;    "

//@ assert i instanceof Object;    "

//@ assert \\typeof(i) <: \\type(Object);    " // Line 6

//@ assert \\erasure(\\typeof(i)) <: \\erasure(\\type(Object));    "

//@ assert \\typeof(i) <: \\type(T);    "

//@ assert i instanceof B;    "

//@ assert \\erasure(\\typeof(i)) <: \\erasure(\\type(B));    "

//@ assert \\typeof(i) <: \\type(B);    " // Line 11

//@ assert \\erasure(\\typeof(i)) <: \\erasure(\\type(C));    " // false

/*@ public normal_behavior ensures true; pure */
//@ assume i != null;    "

//@ assert i instanceof Object;    "

//@ assert \\typeof(i) <: \\type(C);    " // false

/*@ public normal_behavior ensures true; pure */
//@ assume i != null;    "

//@ assert i instanceof Object;    "

//@ assert \\type(T) <: \\type(B);    " // true

//@ assert \\type(T) <: \\type(C);    " // false

/*@ public normal_behavior ensures true; pure */
//@ assert Object.class == java.lang.Object.class;    "

//@ assert \\type(TestJava<Integer>) != \\type(Object);    "

//@ assert \\type(TestJava<Integer>) != \\type(TestJava<Object>);    "

//@ assert Object.class == \\erasure(\\type(T));    " // NO

//@ assert \\type(TestJava<Integer>) == \\type(TestJava<T>);    "  // NO

//@ assert \\typeof(this) == \\type(Object);    "  // NO

//@ assert \\type(TestJava<Integer>) == \\type(TestJava<Object>);    "  // NO

//@ assert Object.class != \\erasure(\\type(T));    "  // OK because T extends B so can't be Object

//@ requires \\type(E) != \\type(Integer) ;    "

//@ requires \\type(E) != \\type(Integer) ;    "

//@ requires \\type(E) == \\type(Integer) ;    "

//@ requires \\type(E) == \\type(Integer) ;    "

/*@ non_null*/
/*@ non_null*/
//@ requires \\type(E) != \\type(Integer);    "

/*@ non_null*/
/*@ non_null*/
/*@ non_null*/
//@ requires \\type(E) != \\type(Integer);    "

/*@non_null*/
/*@ assume ooo >= 0; */
//@ assert sum >= 0;     "

/*@ code_bigint_math spec_bigint_math */
/*@non_null*/
//@ loop_invariant sum >= 0;     "

/*@ assume o != null && o >= 0; */
//@ assert sum >= 0;     "

/*@ code_bigint_math spec_bigint_math */
/*@non_null*/
//@ loop_invariant sum >= 0;     "

/*@ assume o >= 0; */
//@ assert sum >= 0;     "

/*@ code_bigint_math spec_bigint_math */
/*@non_null*/
//@ loop_invariant sum >= 0;     "

/*@ assume o >= 0; */
//@ assert sum >= 0;     "


//@ assert \\elemtype(\\typeof(a)) == \\type(char);     "


//@ assert \\elemtype(\\typeof(a)) == \\type(int);     "

//@ public exceptional_behavior     "

//@   requires true;     "  // FIXME - should be t instanceof T

/*@ non_null*/
//@ requires \\type(E) != \\type(Integer) ;    "

//@ assert \\typeof(this) <: \\type(TestJava);    "

//@ assume \\typeof(this) == \\type(Object);    "

//@ assert false;    " // should not trigger

//@ assert \\typeof(this) == \\type(Object);    "

//@ assume i != null;    "

//@ assert i instanceof Object;    "

//@ assert \\typeof(i) <: \\type(Object);    " // Line 6

//@ assert \\erasure(\\typeof(i)) <: \\erasure(\\type(Object));    "

//@ assert \\typeof(i) <: \\type(T);    "

//@ assert i instanceof B;    "

//@ assert \\erasure(\\typeof(i)) <: \\erasure(\\type(B));    "

//@ assert \\typeof(i) <: \\type(B);    " // Line 11

//@ assert \\erasure(\\typeof(i)) <: \\erasure(\\type(C));    " // false

/*@ public normal_behavior ensures true; pure */
//@ assume i != null;    "

//@ assert i instanceof Object;    "

//@ assert \\typeof(i) <: \\type(C);    " // false

/*@ public normal_behavior ensures true; pure */
//@ assume i != null;    "

//@ assert i instanceof Object;    "

//@ assert \\type(T) <: \\type(B);    " // true

//@ assert \\type(T) <: \\type(C);    " // false

/*@ public normal_behavior ensures true; pure */
//@ assert Object.class == java.lang.Object.class;    "

//@ assert \\type(TestJava<Integer>) != \\type(Object);    "

//@ assert \\type(TestJava<Integer>) != \\type(TestJava<Object>);    "

//@ assert Object.class == \\erasure(\\type(T));    " // NO

//@ assert \\type(TestJava<Integer>) == \\type(TestJava<T>);    "  // NO

//@ assert \\typeof(this) == \\type(Object);    "  // NO

//@ assert \\type(TestJava<Integer>) == \\type(TestJava<Object>);    "  // NO

//@ assert Object.class != \\erasure(\\type(T));    "  // OK because T extends B so can't be Object

//@ requires \\type(E) != \\type(Integer) ;    "

//@ requires \\type(E) != \\type(Integer) ;    "

//@ requires \\type(E) == \\type(Integer) ;    "

//@ requires \\type(E) == \\type(Integer) ;    "

/*@ non_null*/
/*@ non_null*/
//@ requires \\type(E) != \\type(Integer);    "

/*@ non_null*/
/*@ non_null*/
/*@ non_null*/
//@ requires \\type(E) != \\type(Integer);    "

/*@non_null*/
/*@ assume ooo >= 0; */
//@ assert sum >= 0;     "

/*@ code_bigint_math spec_bigint_math */
/*@non_null*/
//@ loop_invariant sum >= 0;     "

/*@ assume o != null && o >= 0; */
//@ assert sum >= 0;     "

/*@ code_bigint_math spec_bigint_math */
/*@non_null*/
//@ loop_invariant sum >= 0;     "

/*@ assume o >= 0; */
//@ assert sum >= 0;     "

/*@ code_bigint_math spec_bigint_math */
/*@non_null*/
//@ loop_invariant sum >= 0;     "

/*@ assume o >= 0; */
//@ assert sum >= 0;     "


//@ assert \\elemtype(\\typeof(a)) == \\type(char);     "


//@ assert \\elemtype(\\typeof(a)) == \\type(int);     "

//@ public exceptional_behavior     "

//@   requires true;     "  // FIXME - should be t instanceof T

/*@ non_null*/
//@ model public int mx;    "

//@ in mx;     "

//@ assignable mx;     "

//@ assignable mx;     "

//@ model public int mx;    "

//@ in mx;     "

//@ assignable mx;     "

//@ assignable mx;     "

//@ model public int mx;    "

//@ in mx;     "

//@ assignable mx;     "

//@ assignable mx;     "

//@ model public int mx;    "

//@ in mx;     "

//@ assignable mx;     "

//@ assignable mx;     "

//@ model public int mx;    "

//@ in mx;     "

//@ assignable mx;     "

//@ assignable mx;     "

//@ code_java_math spec_java_math     "

//@ ensures j + 1 ==  \\old(j);    "

//@ ensures  \\result == ii + 1;    "

//@ ensures j + \\result == ii + \\old(j);    "

//@ assignable j;    "

//@ assignable j;    "

//@ assignable \    othing;    " // ERROR

//@ code_java_math spec_java_math     "

//@ ensures j ==  \\old(j) + ii;    "

//@ assignable j;    "

//@ assignable \    othing;    " // ERROR

//@ code_java_math spec_java_math     "

//@ code_java_math spec_java_math     "

//@ ensures m.j + 1  ==  \\old(m.j) ;    "   // Line 13

//@ ensures  \\result == ii + 1;    "

//@ assignable m.j;    "

//@ assignable m.j;    "

//@ assignable \    othing;    " // ERROR

//@ code_bigint_math spec_bigint_math     "

//@ code_bigint_math spec_bigint_math     "

//@ ensures m.j + 1 ==  \\old(m.j);    "   // Line 13

//@ ensures  \\result == ii + 1;    "

//@ assignable m.j;    "

//@ assignable m.j;    "

//@ assignable \    othing;    " // ERROR

//@ code_java_math spec_java_math     "

//@ code_java_math spec_java_math     "

//@ code_java_math spec_java_math     "

//@ ensures j + 1 ==  \\old(j);    "

//@ ensures  \\result == ii + 1;    "

//@ ensures j + \\result == ii + \\old(j);    "

//@ assignable j;    "

//@ assignable j;    "

//@ assignable \    othing;    " // ERROR

//@ code_java_math spec_java_math     "

//@ ensures j ==  \\old(j) + ii;    "

//@ assignable j;    "

//@ assignable \    othing;    " // ERROR

//@ code_java_math spec_java_math     "

//@ code_java_math spec_java_math     "

//@ ensures m.j + 1  ==  \\old(m.j) ;    "   // Line 13

//@ ensures  \\result == ii + 1;    "

//@ assignable m.j;    "

//@ assignable m.j;    "

//@ assignable \    othing;    " // ERROR

//@ code_bigint_math spec_bigint_math     "

//@ code_bigint_math spec_bigint_math     "

//@ ensures m.j + 1 ==  \\old(m.j);    "   // Line 13

//@ ensures  \\result == ii + 1;    "

//@ assignable m.j;    "

//@ assignable m.j;    "

//@ assignable \    othing;    " // ERROR

//@ code_java_math spec_java_math     "

//@ code_java_math spec_java_math     "

//@ code_java_math spec_java_math     "

//@ ensures j + 1 ==  \\old(j);    "

//@ ensures  \\result == ii + 1;    "

//@ ensures j + \\result == ii + \\old(j);    "

//@ assignable j;    "

//@ assignable j;    "

//@ assignable \    othing;    " // ERROR

//@ code_java_math spec_java_math     "

//@ ensures j ==  \\old(j) + ii;    "

//@ assignable j;    "

//@ assignable \    othing;    " // ERROR

//@ code_java_math spec_java_math     "

//@ code_java_math spec_java_math     "

//@ ensures m.j + 1  ==  \\old(m.j) ;    "   // Line 13

//@ ensures  \\result == ii + 1;    "

//@ assignable m.j;    "

//@ assignable m.j;    "

//@ assignable \    othing;    " // ERROR

//@ code_bigint_math spec_bigint_math     "

//@ code_bigint_math spec_bigint_math     "

//@ ensures m.j + 1 ==  \\old(m.j);    "   // Line 13

//@ ensures  \\result == ii + 1;    "

//@ assignable m.j;    "

//@ assignable m.j;    "

//@ assignable \    othing;    " // ERROR

//@ code_java_math spec_java_math     "

//@ code_java_math spec_java_math     "

//@ code_java_math spec_java_math     "

//@ ensures j + 1 ==  \\old(j);    "

//@ ensures  \\result == ii + 1;    "

//@ ensures j + \\result == ii + \\old(j);    "

//@ assignable j;    "

//@ assignable j;    "

//@ assignable \    othing;    " // ERROR

//@ code_java_math spec_java_math     "

//@ ensures j ==  \\old(j) + ii;    "

//@ assignable j;    "

//@ assignable \    othing;    " // ERROR

//@ code_java_math spec_java_math     "

//@ code_java_math spec_java_math     "

//@ ensures m.j + 1  ==  \\old(m.j) ;    "   // Line 13

//@ ensures  \\result == ii + 1;    "

//@ assignable m.j;    "

//@ assignable m.j;    "

//@ assignable \    othing;    " // ERROR

//@ code_bigint_math spec_bigint_math     "

//@ code_bigint_math spec_bigint_math     "

//@ ensures m.j + 1 ==  \\old(m.j);    "   // Line 13

//@ ensures  \\result == ii + 1;    "

//@ assignable m.j;    "

//@ assignable m.j;    "

//@ assignable \    othing;    " // ERROR

//@ code_java_math spec_java_math     "

//@ code_java_math spec_java_math     "

//@ code_java_math spec_java_math     "

//@ ensures j + 1 ==  \\old(j);    "

//@ ensures  \\result == ii + 1;    "

//@ ensures j + \\result == ii + \\old(j);    "

//@ assignable j;    "

//@ assignable j;    "

//@ assignable \    othing;    " // ERROR

//@ code_java_math spec_java_math     "

//@ ensures j ==  \\old(j) + ii;    "

//@ assignable j;    "

//@ assignable \    othing;    " // ERROR

//@ code_java_math spec_java_math     "

//@ code_java_math spec_java_math     "

//@ ensures m.j + 1  ==  \\old(m.j) ;    "   // Line 13

//@ ensures  \\result == ii + 1;    "

//@ assignable m.j;    "

//@ assignable m.j;    "

//@ assignable \    othing;    " // ERROR

//@ code_bigint_math spec_bigint_math     "

//@ code_bigint_math spec_bigint_math     "

//@ ensures m.j + 1 ==  \\old(m.j);    "   // Line 13

//@ ensures  \\result == ii + 1;    "

//@ assignable m.j;    "

//@ assignable m.j;    "

//@ assignable \    othing;    " // ERROR

//@ code_java_math spec_java_math     "

//@ code_java_math spec_java_math     "

/*@ pure */
//@ assert \\count >= 0;    " // OK

//@ assert \\count < a.length;    " // OK

//@ assert \\count >= 1;    " // BAD

//@ ghost int i = \\count;    " // OK

//@ assert \\count >= 0;    " // OK

//@ assert \\count < 2;    " // OK

//@ assert \\count == i;    " // OK

//@ ghost int i = \\count;    " + "      for (long kk: b) {    "

//@ assert \\count == i;    " // BAD

//@ loop_invariant \\count >= 0 && \\count <= a.length;    " // OK

//@ decreases a.length - \\count;    " // OK

//@ loop_invariant \\count >= 0 && \\count <= a.length;    " // OK

//@ loop_decreases a.length - \\count;    " // OK

//@ decreases a.length - \\count -1;    " // 0 on last

//@ decreases a.length - \\count -2;    " // BAD - last time through

//@ decreases \\count+10;    " // BAD - loop does not decrease variant

//@ loop_invariant \\count > 0 && \\count <= a.length;    " // BAD - first time through loop

//@ loop_invariant \\count >= 0 && \\count < a.length;    " // BAD - laswt time through loop

//@ assert \\count >= 0;    " // OK

//@ assert \\count < a.length;    " // OK

//@ ghost int i = \\count;    " // OK

//@ assert \\count >= 0;    " // OK

//@ assert \\count < 2;    " // OK

//@ assert \\count == i;    " // OK

//@ reachable;    " // knows that the loop is not

//@ loop_invariant \\values.size() == \\count;    " + "    for (Integer k: a) {    " + "    }    "

//@ loop_invariant \\values.size() == \\count;    " + "    for (Integer k: a) {    "

//@ assert \\values.size() == \\count;    " + "    }    " + "  }    "

//@ assert \\values.size() == \\count;    " + "    }    " + "  }    "

//@ assert \\count >= 1;    " // BAD

//@ public normal_behavior  ensures true;    " + "  public void m2() {    "

//@ assume a != null;     "

//@ assume it != null;     "

//@ public normal_behavior  ensures true;    " + "  public void m2bad() {    "

//@ assume a != null;     "

//@ assume it != null;     "

//@ public normal_behavior  ensures true;    "

//@ public normal_behavior  ensures true;    "

//@ assume values != null; set values.containsNull = true;     "

//@ assert values.content.owner == values;    "

//@ assume a != null;     "

//@ assume values.content.owner == values;    "

//@ assume it != null;     "

//@ assume values.content.owner == values;    "

//@ assert values.content.owner == values;    "

//@ ghost List<Map.Entry<String,String>> v = values;    "

//@ loop_invariant values == v && values.content.owner == values;     "

//@ assume k != null && \\typeof(k) <: \\type(Map.Entry<String,String>);     "

//@ public normal_behavior  ensures true;    "

//@ assume values != null; set values.containsNull = true;     "

//@ assert values.content.owner == values;    "

//@ assume a != null;     "

//@ assume values.content.owner == values;    "

//@ assume it != null;     "

//@ assume values.content.owner == values;    "

//@ assert values.content.owner == values;    "

//@ ghost List<Map.Entry<String,String>> v = values;    "

//@ assert values.content.owner == values;    "

//@ assume k != null &&  \\typeof(k) <: \\type(Map.Entry<String,String>);     "

//@ assert values.content.owner == values;    "

//@ public normal_behavior  ensures true;    "

//@ set values.containsNull = true;     "

//@ public normal_behavior  ensures true;    "

//@ set values.containsNull = true;     "

//@ ghost int i = \\count;    " // Out of scope

//@ ghost int i = \\count;    " // Out of scope

//@ set \\count = 6;    " // Syntax error

//@ ghost org.jmlspecs.lang.JMLList i = \\values;    " // Out

//@ ghost org.jmlspecs.lang.JMLList i = \\values;    " // Out

//@ set \\values = null;    " // Syntax error

//@ ghost org.jmlspecs.lang.JMLList i = \\values;    " // OK

//@ modifies \\everything;    "

//@ assume \    onnullelements(a);    "

//@ assume a.length > 1;    "

//@ assert a[0] != null;    " // OK

//@ modifies \\everything;    "

//@ assume \    onnullelements(a);    "

//@ assert a != null;    " // OK

//@ modifies \\everything;    "


//@ assume \    onnullelements(a);    "

//@ assert a == null;    " // BAD

//@ modifies \\everything;    "

//@ assume a != null && a.length > 1;    "

//@ assert a[0] != null;    " // BAD

//@ modifies \\everything;    "

//@ assume a != null && a.length == 0;    "

//@ assert \    onnullelements(a);    " // OK

//@ modifies \\everything;    "

//@ assume a != null && a.length == 0;    "

//@ assert (\\forall int i; 0<=i && i<a.length; a[i] != null);    " // OK

//@ requires \\elemtype(\\typeof(a)) == \\type(Object); modifies \\everything;    "

//@ assume a != null && a.length == 1;    "

//@ assert \    onnullelements(a);    " // OK

//@ modifies \\everything;    "

//@ assume a != null && a.length == 1;    "

//@ assume a[0] != null;    "

//@ assert \    onnullelements(a);    " // OK

//@ requires \\elemtype(\\typeof(a)) == \\type(Object); modifies \\everything;    "

//@ assume a != null && a.length == 2;    "

//@ assert \    onnullelements(a);    " // OK

//@ modifies \\everything;    "

//@ assume a != null && a.length == 2;    "

//@ assume a[0] != null;    "

//@ assume a[1] != null;    "

//@ assert \    onnullelements(a);    " // OK

//@ requires \\elemtype(\\typeof(a)) == \\type(Object); modifies \\everything;    "

//@ assume a != null && a.length == 3;    "

//@ assert \    onnullelements(a);    " // BAD

//@ requires \\elemtype(\\typeof(a)) == \\type(Object); modifies \\everything;    "

//@ assume \    onnullelements(a) && a.length == 3;    "

//@ assert \    onnullelements(a);    " // OK

//@ modifies \\everything;    "

//@ assume a != null && a.length == 3;    "

//@ assert \    onnullelements(a);    " // BAD

//@ requires i == 5;    " + "  //@ modifies \\everything;    " + "  public void m1(int i) {    "

//@ assert \    ot_modified(i);    " // OK

//@ modifies \\everything;    " + "  public void m1a(int i) {    " + "    i = 5;    "

//@ assert \    ot_modified(i);    " // BAD

//@ ghost public int gi;    "

//@ requires i == 5;    " + "  //@ modifies \\everything;    " + "  public void m2() {    "

//@ assert \    ot_modified(i);    " // OK

//@ modifies \\everything;    " + "  public void m2a() {    " + "    i = 5;    "

//@ assert \    ot_modified(i);    " // BAD

//@ requires si == 5;    " + "  //@ modifies \\everything;    " + "  public void m3() {    "

//@ assert \    ot_modified(si);    " // OK

//@ modifies \\everything;    " + "  public void m3a() {    " + "    si = 5;    "

//@ assert \    ot_modified(si);    " // BAD

//@ requires gi == 5;    " + "  //@ modifies \\everything;    " + "  public void m4() {    "

//@ set gi = 5;    " + "    //@ assert \    ot_modified(gi);    " // OK

//@ modifies \\everything;    " + "  public void m4a() {    " + "    //@ set gi = 5;    "

//@ assert \    ot_modified(gi);    " // BAD


//@ requires t != null;    "

//@ modifies \\everything;    "

//@ assert \    ot_modified(t.i);    " // OK

//@ requires t != null;    "

//@ modifies \\everything;    "

//@ assert \    ot_modified(t.i) ? true: true;    " // BAD

//@ requires t == null;    "

//@ modifies \\everything;    "

//@ assert \    ot_modified(t.i) ? true: true;    " // OK

//@ modifies \\everything;    "

//@ assert \    ot_modified(t.i) ? true: true;    " // BAD

//@ requires p != null && p != this;    "

//@ modifies \\everything;    "

//@ assert pp != p;    " // OK

//@ assert pp != this;    " // OK

//@ requires p != null && p != this;    " + "  //@ modifies \\everything;    "

//@ assert pp != p;    " // BAD

//@ requires p != null && p != this;    " + "  //@ modifies \\everything;    "

//@ assert pp != this;    " // BAD

//@ requires p != null && p != this;    " + "  //@ modifies \\everything;    "

//@ assert pp != q;    " // OK

//@ requires p != null && p != this;    "

//@ modifies \\everything;    " // Line 30                                                                                                // 30

//@ assert pp != q;    " // OK

//@ modifies \\everything;    " + "  //@ ensures \\result != null && \\fresh(\\result);    "

//@ ensures \\result != p && \\result != this;    " + "  public Object m6(Object p) {    "

//@ modifies \\everything;    " + "  //@ ensures \\result == null;    " // BAD

//@ modifies \\everything;    " + "  //@ ensures \\result != null && \\fresh(\\result);    "

//@ ensures \\result == p || \\result == this;    " // BAD

//@ modifies \\everything;    "

//@ ensures \\result != null && !\\fresh(\\result);    " // BAD

//@ ghost Object oo;    "

//@ static ghost Object soo;    "

//@ modifies \    othing;    "

//@ assert pp != o && pp != oo;    " // OK

//@ modifies \    othing;    "

//@ assert pp != o;    " // BAD

//@ modifies \    othing;    "

//@ assert pp != oo;    " // BAD

//@ modifies \\everything;    "

//@ assert pp != oo;    " // OK

//@ modifies \\everything;    "

//@ assert pp != o;    " // BAD

//@ modifies \    othing;    "

//@ assert pp != so && pp != soo;    " // OK

//@ modifies \    othing;    "

//@ assert pp != so;    " // BAD

//@ modifies \    othing;    "

//@ assert pp != soo;    " // BAD

//@ modifies \\everything;    "

//@ assert pp != soo;    " // OK

//@ modifies \\everything;    "

//@ assert pp != so;    " // OK

//@ modifies \    othing;    "

//@ assert pp != o && pp != oo;    " // BAD

//@ modifies \    othing;    " + "  public void m9b(Object p) {    " + "    Object pp = c1n(p);    "

//@ assert pp != so && pp != soo;    " // BAD

//@ modifies \    othing;    "

//@ ensures \\fresh(\\result);    "

//@ modifies \    othing;    "

//@ ensures \\result == null || \\fresh(\\result);    "

//@ modifies \    othing;    "

//@ ensures true;    "

//@ modifies \\everything;    "

//@ ensures \\result != null && \\fresh(\\result);    "

//@ modifies \\everything;    "

//@ ensures true;    "

//@ requires p != null && p != this;    " + "  //@ modifies \\everything;    "

//@ assume this.k == 0;    " + "    c1(p);    " // havoc

//@ assert this.k == 0;    " // OK

//@ requires p != null && p != this;    " + "  //@ modifies \\everything;    "

//@ assume sk == 0;    " + "    c1(p);    " // havoc

//@ assert sk == 0;    " // OK

//@ requires o != null;    " + "  //@ modifies o.*;    " + "  public void c1(TestJava o) { }     "

//@ requires o != null;    " + "  //@ modifies TestJava.*;    " + "  public void c2(TestJava o) { }     "

//@ requires p != null && p != this;    " + "  //@ modifies \\everything;    "

//@ assume k == 0;    " + "    c1(this);    " // havoc

//@ assert k == 0;    " // FAILS

//@ requires p != null && p != this;    " + "  //@ modifies \\everything;    "

//@ assume sk == 0;    " + "    c1(this);    " // havoc

//@ assert sk == 0;    " // OK

//@ requires o != null;    " + "  //@ modifies o.*;    " + "  public void c1(TestJava o) { }     "

//@ requires o != null;    " + "  //@ modifies TestJava.*;    " + "  public void c2(TestJava o) { }     "

//@ requires p != null && p != this;    " + "  //@ modifies \\everything;    "

//@ assume k == 0;    " + "    c2(this);    " // havoc

//@ assert k == 0;    " // OK

//@ requires p != null && p != this;    " + "  //@ modifies \\everything;    "

//@ assume sk == 0;    " + "    c2(this);    " // havoc

//@ assert sk == 0;    " // FAILS

//@ requires o != null;    " + "  //@ modifies o.*;    " + "  public void c1(TestJava o) { }     "

//@ requires o != null;    " + "  //@ modifies TestJava.*;    " + "  public void c2(TestJava o) { }     "

//@ modifies \\everything;    "

//@ assume k == 0;    "

//@ assert k == 0;    "

//@ requires i == 0;    "

//@ modifies \\everything;    "

//@ also requires i > 0;    "

//@ modifies \    othing;    "

//@ modifies \\everything;    " + "  public void m1a() {    " + "    //@ assume k == 0;    "

//@ assert k == 0;    " // FAILS

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "

//@ modifies \\everything;    " + "  public void m2() {    " + "    //@ assume sk == 0;    "

//@ assert sk == 0;    " + "  }    "

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "}");

//@ modifies \\everything;    " + "  public void m2a() {    " + "    //@ assume sk == 0;    "

//@ assert sk == 0;    " // FAILS

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "

//@ requires a != null && a.length > 10;    " + "  //@ modifies \\everything;    "

//@ assume a[0] == 0;    " + "    c1(1);    "

//@ assert a[0] == 0;    " + "  }    "

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "}");

//@ requires a != null && a.length > 10;    " + "  //@ modifies \\everything;    "

//@ assume a[0] == 0;    " + "    c1(0);    " // modifies

//@ assert a[0] == 0;    " // FAILS

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "

//@ requires sa != null && sa.length > 10;    " + "  //@ modifies \\everything;    "

//@ assume sa[0] == 0;    " + "    c1(1);    "

//@ assert sa[0] == 0;    " + "  }    "

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "}");

//@ requires sa != null && sa.length > 10;    " + "  //@ modifies \\everything;    "

//@ assume sa[0] == 0;    " + "    c1(0);    "

//@ assert sa[0] == 0;    " // FAILS

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "}"

//@ requires sa != null && sa.length > 10;    " + "  //@ modifies \\everything;    "

//@ assume a == \\old(a);    " + "    c1(1);    "

//@ assert a == \\old(a);    " + "  }    "

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "}");

//@ requires sa != null && sa.length > 10;    " + "  //@ modifies \\everything;    "

//@ assume a == \\old(a);    " + "    c1(0);    "

//@ assert a == \\old(a);    " // FAILS

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "

//@ modifies \\everything;    " + "  public void m6(/*@ non_null*/TestJava t) {    "

//@ assume t.k == 0;    " + "    c1(1);    " + "    //@ assert t.k == 0;    " + "  }    "

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "}");

//@ modifies \\everything;    " + "  public void m6a(/*@ non_null*/TestJava t) {    "

//@ assume t.k == 0;    " + "    c1(0);    " + "    //@ assert t.k == 0;    " // FAILS

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "

//@ modifies \\everything;    " + "  public void m7() {    " + "    c1(1);    "

//@ assert sk == \\old(sk);    " // Should be OK

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "}");

//@ modifies \\everything;    " + "  public void m7a() {    " + "    c1(0);    "

//@ assert sk == \\old(sk);    " // FAILS

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "

//@ modifies k,sk;    "

//@ assume k == 0 && sk == 0;    "

//@ assert sk == 0;    "

//@ modifies k,sk;    "

//@ assume k == 0 && sk == 0;    "

//@ assert sk == 0;    " // FAILS

//@ modifies k,sk;    "

//@ assume k == 0 && sk == 0;    "

//@ assert k == 0;    " + "  }    "

//@ modifies k,sk;    "

//@ assume k == 0 && sk == 0;    "

//@ assert k == 0;    " // FAILS

//@ requires i == 0;    "

//@ modifies k;    "

//@ also requires i > 0;    "

//@ modifies sk;    "

//@ requires i == 10;    "

//@ modifies t.k;    "

//@ also requires i == 0;    "

//@ modifies \    othing;    "

//@ requires a!=null && 0<=i && i<a.length;    "

//@ modifies a[i];    "

//@ requires b!=null && 0<=i && i<b.length;    "

//@ modifies b[i];    "

//@ modifies k,sk;    " + "  public void m3() {    " + "    //@ assume k == 0 && sk == 0;    "

//@ assert k == 0;    " + "  }    "

//@ modifies k,sk;    " + "  public void m3a() {    " + "    //@ assume k == 0 && sk == 0;    "

//@ assert k == 0;    " // FAILS

//@ requires a != null && a.length == 5;    "

//@ modifies a[0];    " + "  public void m4() {    "

//@ assume a[0] == 0 && a[1] == 1;    " + "    c3(0);    " + "    //@ assert a[1] == 1;    "

//@ requires a != null && a.length == 5;    " + "  //@ modifies a[0];    "

//@ assume a[0] == 0 && a[1] == 1;    " + "    c3(0);    "

//@ assert a[0] == 0;    " // FAILS

//@ requires i == 0;    " + "  //@ modifies k;    " + "  //@ also requires i > 0;    "

//@ modifies sk;    " + "  public void c1(int i) { }     "

//@ requires i == 10;    " + "  //@ modifies t.k;    " + "  //@ also requires i == 0;    "

//@ modifies \    othing;    " + "  public void c2(int i, TestJava t) {}    "

//@ requires a!=null && 0<=i && i<a.length;    " + "  //@ modifies a[i];    "

//@ requires b!=null && 0<=i && i<b.length;    "

//@ modifies b[i];    " + "  public void c4(int i) {}    " + "

//@ requires b != null && b.length == 5;    "

//@ modifies b[0];    "

//@ assume b[0] == 0 && b[1] == 1;    "

//@ assert b[1] == 1;    "

//@ requires b != null && b.length == 5;    "

//@ modifies b[0];    "

//@ assume b[0] == 0 && b[1] == 1;    "

//@ assert b[0] == 0;    " // FAILS

//@ requires b != null && b.length == 5;    "

//@ modifies b[0];    "

//@ assume b[0] == 0 && b[1] == 1;    "

//@ requires a != null && b != null && b.length == 5  && a.length ==5;    "

//@ modifies a[0],b[0];    "

//@ assume b[0] == 0 && b[1] == 1;    "

//@ assert b[1] == 1;    "

//@ requires i == 0;    "

//@ modifies k;    "

//@ also requires i > 0;    "

//@ modifies sk;    "

//@ requires i == 10;    "

//@ modifies t.k;    "

//@ also requires i == 0;    "

//@ modifies \    othing;    "

//@ requires a!=null && 0<=i && i<a.length;    "

//@ modifies a[i];    "

//@ requires b!=null && 0<=i && i<b.length;    "

//@ modifies b[i];    "

//@ public invariant a != null && a.length == 10;    "

/*@ assignable a; */
//@ modifies a[*];    "

//@ assume a[0] == 0 && a[2] == 2;    "

//@ assert a[0] == 0;    "

//@ modifies a[*];    "

//@ assume a[0] == 0 && a[2] == 2;    "

//@ assert a[2] == 3;    " // FAILS

//@ modifies a[2 .. 4];    "

//@ modifies a[*];    "

//@ modifies a[2 .. ];    "

//@ public invariant a != null && a.length == 10;    "

//@ assignable a;    "

//@ modifies a[*];    "

//@ assume a[0] == 0 && a[2] == 2;    "

//@ assert a[0] == 0;    " // FAILS

//@ modifies a[*];    "

//@ assume a[0] == 0 && a[2] == 2;    "

//@ assert a[2] == 2;    " // FAILS

//@ modifies a[2 .. 4];    "

//@ modifies a[*];    "

//@ modifies a[2 .. ];    "

//@ public invariant a != null && a.length == 10;    "

//@ assignable a;    "

//@ modifies a[*];    "

//@ assume a[0] == 0 && a[2] == 2;    "

//@ assert a[0] == 0;    "

//@ modifies a[*];    "

//@ assume a[0] == 0 && a[9] == 2;    "

//@ assert a[9] == 2;    " // FAILS

//@ modifies a[2 .. 4];    "

//@ modifies a[*];    "

//@ modifies a[2 .. ];    "

//@ modifies \\everything;    " + "  public void z() {    " + "  }    "

//@ modifies \\everything;    " + "  public void m1() {    " + "    //@ assume a == 15 && fa == 13;    "

//@ assert fa == 13;    " // Should be OK

//@ assert a == 15;    " // Should fail

//@ assert fsa == 13;    " // OK

//@ assert fa == 15;    " // OK

//@ modifies \\everything;    " + "  public void m1() {    " + "    //@ assert fsa == 13;    " // Should

//@ assert fa == 15;    " // Should be OK

//@ modifies \\everything;    " + "  public void m2() {    " + "    //@ assert a == 17;    " // Not

//@ modifies \\everything;    " + "  public void m3() {    " + "    //@ assert fb == 16;    " // Not

/*@ code_bigint_math*/
//@ requires i >= 0;    " + "  //@ modifies k;    " + "  //@ ensures k == 10;    "

//@ signals (Exception e) k<0; signals_only Exception;    "

//@ requires i >= 0;    " + "  //@ modifies k;    " + "  //@ ensures k == 10;    "

//@ signals (Exception e) k==-11;    " + "  //@ signals_only Exception;    "

//@ requires i >= 0;    " + "  //@ modifies k;    " + "  //@ ensures k == 10;    "

//@ signals (Exception e) k==-12;    " + "  //@ signals_only Exception;    "

//@ requires i >= 0;    " + "  //@ modifies k;    " + "  //@ ensures k == 10;    "

//@ signals (Exception e) k==-13;    " // FAILS

//@ signals_only Exception;    " + "  public void m3a(int i) {    " + "    m(0);    "

//@ requires i >= 0;    " + "  //@ modifies k;    " + "  //@ ensures \\result == 12;    "

//@ signals (Exception e) false;    " + "  public int m4(int i) {    "

//@ requires i >= 0;    " + "  //@ modifies k;    " // Line

//@ ensures false;    " + "  //@ signals (Exception e) k == -11;    "

//@ signals_only Exception;    " + "  public int m5(int i) {    "

//@ requires i >= 0;    " + "  //@ modifies k;    " + "  //@ ensures false;    "

//@ signals (Exception e) k == -12;    " // Line 60

//@ signals_only Exception;    " + "  public int m6(int i) {    "

//@ requires i == 0;    " + "  //@ modifies k;    " + "  //@ ensures k>0 && \\result == i+1;    "

//@ signals (Exception e) false;    " + "  //@ also     " + "  //@ requires i > 0;    " // Line

//@ modifies k;    " + "  //@ ensures false;    " + "  //@ signals (Exception e) k == -10-i;    "

//@ signals_only Exception;    " + "  public int m(int i) {    " + "    if (i > 0) {    "

//@ code_bigint_math     " + "public class TestJava {     "

/*@ non_null*/
//@ requires false;    " + "  public static boolean bf(boolean bb) { return true; }    "

//@ requires true;    " + "  public static boolean bt(boolean bb) { return true; }    "

//@ static public invariant b;    "

//@ requires !b;    " + "  public static boolean bq(boolean bb) { return true; }    " + "


//@ ghost nullable Object oo;    " + "  //@ public static invariant bstatic;    "

//@ public invariant binstance;    " + "  //@ public initially binstance2;    "

//@ public constraint binstance2 == \\old(binstance2);    "

//@ public static constraint bstatic == \\old(bstatic);    "

/*@ non_null*/
//@ requires true;    " + "  //@ ensures \\result;    "

//@ requires false;    " + "  //@ ensures true;    " + "  public static int i(int ii) { return 0; }    "

//@ requires ii == 10;    " + "  //@ ensures true;    "

/*@ set oo = null;*/
//@ requires ii == 10;    " + "  //@ ensures true;    "


/*@ set oo = null;*/
//@ requires ii == 10;    " + "  //@ ensures true;    "

//@ requires ii == 10;    " + "  //@ ensures true;    "

//@ requires bb;    "

//@ ensures true;    "

/*@ assume b; */
/*@assert false;*/
//@ requires bb;    " + "  //@ ensures true;    "

/*@ assume b; */
/*@assert !bb;*/
//@ requires bb;    " + "  //@ ensures true;    "

/*@ assume bb; */
/*@assert b;*/
//@ requires bb;    "

//@ ensures true;    "

/*@assume z==1 ;*/
/*@ assert false; */
//@ requires bbb;    "

/*@assume true;*/
/*@assume !b;*/
/*@ assert !bb; */
//@ requires b;    "

/*@assume true;*/
/*@assume !b;*/
/*@ assert !bb; */
//@ requires bb;    "

//@ ensures true;    "

/*@assume 0==x ;*/
/*@ assert true; */
/*@ assume !bb; assume bb;*/
/*@assume bb; assume !bb; */
/*@assume bb; assume !bb; */
/*@assume bb; assume !bb; */
/*@ assume b; */
/*@ assume !b; */
/*@ assert k == 0; */
/*@ assert k != 0; */
/*@ assert i == 10; assert k == 16; */
/*@ assert k == 10; */
/*@ assert k == 11; */
/*@ assert k == 11; */
/*@ code_java_math*/
//@ static public constraint i > \\old(i);    "

//@ modifies i;    "

//@ ensures true;    "

/*@ code_bigint_math*/
//@ modifies i;    " + "  //@ ensures i == \\old(i)+2;    "

//@ modifies i;    "

//@ ensures i == \\old(i+1);    " + "  public static void bbad() { i = i - 1; }    " + "

/*@ code_java_math spec_java_math*/
//@ modifies i;    "

//@ ensures i == \\old(i)+2;    "

//@ modifies i;    "

//@ ensures i == \\old(i+1);    "

/*@ code_java_math spec_java_math*/
//@ modifies i;    "

//@ ensures i == \\old(i)+2;    "

/*@ assert i == i@x + 1 && i == (i+1)@x; */
//@ modifies i;    "

//@ ensures i == \\old(i+1);    "

/*@ assert i == i@x + 1; */
//@ modifies i;    "

/*@ assert i == this.i@x + 1; */
//@ requires a.length > 10 && a[0] >= 0;    "

//@ modifies i;    "

/*@ assert a[0]@x > -1; */
/*@ code_java_math spec_java_math*/
/*@ assert i <<< i || true; */
/*@ assert i <<<= i || true; */
//@ requires 0<=ii && ii <=3;    "

//@ ensures ii<=0 ==> \\result ==-ii;    "

//@ requires ii > -2147483648;    " // Not using

//@ ensures \\result == -ii;    "

/*@ assert i!=0; */
/*@ assert i==0; */
//@ requires ii == 10;    " + "  //@ ensures true;    "


//@ requires ii == 10;    "

//@ ensures true;    " + "  public @NonNull Object inst2(int ii) {  return null; }    " + "

//@ requires ii == 10;    " + "  //@ ensures true;    "

//@ requires ii == 10;    "

//@ ensures true;    " + "  public          Object inst2(int ii) {  return null; }    " + "

//@ requires ii == 10;    " + "  //@ ensures true;    "

//@ requires ii == 10;    " + "  //@ ensures true;    "

//@ requires ii == 10;    " + "  //@ ensures true;    "

//@ requires ii == 10;    "

//@ ensures true;    " + "  public          Object inst2(int ii) {  return null; }    " + "

/*@ non_null*/

/*@ non_null*/

/*@ non_null*/
/*@ non_null*/
//@ ensures \\result != null;    "


//@ ensures \\result != null;    "


//@ ensures \\result != null;    "

//@ ensures \\result != null;    "



//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ requires i>0;    " + "  //@ modifies j;    "

//@ ensures j == -i;    " + "  static public void m(int i) { j = -i; }    " + "  //@ requires i>1;     "

//@ modifies j;    " + "  //@ ensures \\result == -i;    "

//@ modifies j;    "

//@ ensures \\result == j;    " + "  public int instbad(boolean b, int i) { m(i); return j; }    "

//@ modifies j;    " + "  //@ ensures \\result == i;    "

//@ requires i>0;    "

//@ modifies j;    "

//@ ensures j == -i;    "

//@ requires i>1;     "

//@ modifies j;    "

//@ ensures \\result == -i;    "

//@ modifies j;    "

//@ ensures \\result == j;    "

//@ modifies j;    "

//@ ensures \\result == i;    "

/*@ code_bigint_math*/
//@ requires i>0;    "

//@ modifies j;    "

//@ ensures j == i+1 && \\result == j;    "

//@ requires i>1;     "

//@ modifies j;    "

//@ ensures \\result == \\old(i)+1;    "

//@ requires i>1;     "

//@ modifies j;    "

//@ ensures \\result == \\old(i)+3;    "

//@ requires i>1;     "

//@ modifies j;    "

//@ ensures \\result == 3*i+4;    "

//@ ensures j == i + 1;    "

//@ requires i>1;     "

//@ modifies j;    "

//@ ensures \\result == \\old(i);    "

//@ requires i>1;     "

//@ modifies j;    "

//@ ensures \\result == \\old(i)+4;    "

//@ requires i>1;     "

//@ modifies j;    " // Line 30

//@ ensures \\result == 3*i+4;    "

//@ ensures j == i + 2;    "

/*@ code_java_math*/
//@ assignable \    othing; ensures \\result == j;    "

//@ modifies j,sj;    "

//@ ensures \\result == \\old(j);    "

//@ modifies j,sj;    "

//@ ensures \\result == j;    "

//@ modifies j,sj;    "

//@ ensures \\result == sj;    "

//@ requires o!=null && p != null && o.j == 1 && p.j == 2 && j == 3;    "

//@ modifies j,sj,o.j,o.sj,p.j,p.sj;    "

//@ ensures \\result == 6;    "

//@ requires o!=null && p != null && o.j == 1 && p.j == 2 && j == 3 && o!=this && p!= this;    "

//@ modifies j,sj,o.j,o.sj,p.j,p.sj;    "

//@ ensures \\result == 6;    "

/*@ assert (\\lbl OJ o.j) + (\\lbl PJ p.j) + (\\lbl JJ j) == 6; */
//@ requires o!=null && p != null && o.j == 1 && p.j == 2 && j == 3;    "

//@ modifies j,sj,o.j,o.sj,p.j,p.sj;    "

//@ ensures \\result == 6;    "

//@ modifies j,sj;    " + "  //@ ensures \\result == 6;    "

//@ requires o!=null && p != null && sj == 3;    "

//@ modifies j,sj,o.j,o.sj,p.j,p.sj;    "

//@ ensures \\result == 9;    "

//@ assume a != null && a.length > 2 && a[0] == 1;    "

//@ loop_invariant (\\forall int k; 0<=k && k < \\count; b ==> a[k] > 0);    "

//@ assert b ==> a[1] > 0;    " + "  }    " + "}");

/*@ loop_invariant 0<=i && i<=5 && n==i; decreases 5-i; */
/*@ assert n == 5; */
/*@ loop_invariant 0<=i && i<=5 && n==i; decreases 3-i; */
/*@ assert n == 5; */
/*@ loop_invariant 0<=i && i<5 && n==i; decreases 5-i; */
/*@ assert n == 5; */
/*@ loop_invariant 0<=i && i<=5 && n==i-1; decreases 5-i; */
/*@ loop_invariant i>0; decreases i; */
/*@ reachable; */
/*@ loop_invariant i>=0; decreases i-2; */
/*@ assert i == 0; */
/*@ loop_invariant i>=0; decreases i; */
/*@ assert i == 0; */
/*@ code_java_math */
/*@ loop_invariant  i>0; decreases i; */
/*@ assert i == 0; */
/*@ code_bigint_math */
/*@ loop_invariant i>=0; decreases i-2; */
/*@ assert i == 0; */
/*@ code_bigint_math */
/*@ loop_invariant i>=0; decreases i; */
/*@ assert i == 0; */
/*@ code_bigint_math*/
/*@ loop_invariant i<=5 && i>=0; decreases i; */
/*@ assert i == 0; */
/*@ loop_invariant i<=5 && i>=0; decreases i-2; */
/*@ assert i == 0; */
/*@ loop_invariant i<=5 && i>=0; decreases i; */
/*@ assert i == 0; */
/*@ loop_invariant i<=5 && i>0; decreases i; */
/*@ assert i == 0; */
/*@ loop_invariant i>=0; decreases i; */
/*@ assert i == 0; */
/*@ loop_invariant i>=0; decreases i; */
/*@ assert i == 0; */
/*@ loop_invariant i>=0; decreases i; */
/*@ assert i == 0; */
/*@ assert i == 6; */
/*@ assert i == 5; */
/*@ assert i == 4; */
/*@ assert i == 5; */
/*@ assert i == 6; */
/*@ assert i == 5; */
/*@ assert i == 4; */
/*@ assert i == 5; */
/*@ assert j == 5; */
/*@ assert j == 6; */
/*@ assert j == 5; */
/*@ assert j == 4; */
/*@ assert j == 6; */
/*@ assert j == 5; */
/*@ assert j == 4; */
/*@ assert j == 5; */
/*@ assert i == 12; */
/*@ assert i == 5; */
/*@ assert i == 12 && i == j; */
/*@ assert i == 5; */
/*@ assert i == -2; */
/*@ assert i == 5; */
/*@ assert i == -2 && i == j; */
/*@ assert i == 5; */
/*@ assert i == 5*7; */
/*@ assert i == 5; */
/*@ assert i == 5*7 && i == j; */
/*@ assert i == 5; */
/*@ assert i == 5/7; */
/*@ assert i == 5; */
/*@ assert i == 5/7 && i == j; */
/*@ assert i == 5; */
//@ requires i > -2147483648;    "

/*@ assert j >= 0; */
//@ requires i > -2147483648;    "

/*@ assert j == -1; */
/*@ assume i > 0; */
/*@ assert (\\lblpos ISP i>0); */
/*@ assume i > 0; */
/*@ assert (\\lblneg ISN i<0); */
/*@ assume i > 0; */
/*@ assert !(\\lblneg ISN2 i>0); */
/*@ assume i > 0; */
/*@ assert (\\lblpos ISP i<0); */
/*@ assume i > 0; */
/*@ assert !(\\lblpos ISP2 i>0); */
/*@ assert o != oo;*/
/*@ assert o == oo;*/
/*@ assert o != null;*/
/*@ assert o == null;*/
/*@ assert o != oo;*/
/*@ assert o == oo;*/
/*@ assert o != null; assert o.length == 5; */
/*@ assert o.length == 6;*/
/*@non_null*/
/*@ assert a.length >= 0;*/
/*@ assert o != oo;*/
/*@ assert o == oo;*/
/*@ assert o.length == 3; assert o[1] == 11;*/
/*@ assert o.length == 4; */
/*@ assert o.length == 3; assert o[1] == 10;*/
/*@ assert o != null; assert o.length == 3; assert o[1] == 11;*/
/*@ assert o.length == 3; assert o[1] != null; assert o[1].length == 3; assert o[1][2] == 14; assert o[0] != null; assert o[0].length == 2; assert o[0][1] == 11; */
/*@ assert o.length == 3; assert o[1] != null; assert o[1].length == 3; assert o[1][2] == 14; assert o[0] != null; assert o[0].length == 2; assert o[0][1] == 11; */
/*@ assert o.length == 3; assert o[1] == null; assert o[2] != null; assert o[2].length == 1; assert o[2][0] == 15; */
/*@ assert oo[0] != oo[1]; */
/*@ assert o != oo;*/
/*@ assert o == oo;*/
/*@ assert o.length == 5; assert o[1].length == 3; */
/*@ assert o.length == 6;*/
/*@ assert o[1].length == 4;*/
/*@non_null*/
/*@ assert a.length >= 0;*/
/*@ assert o.length == 3; */
/*@ assert o.length == 2; */
/*@ assert o[1][2] == 14; */
/*@ assert o[2].length == 1; */
/*@ assert o[0].length == 2; */
/*@ assert o != null; assert o.length == 5; assert o[1] == null; */
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assume a[1] == 2; */
/*@ assert a[1] == 2; */
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assume a[1] == 2; */
/*@ assert a[1] == 3; */
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assume a[1] == 2; */
/*@ assert a[1] == 3; */
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assume a[1] == 2; */
/*@ assert a[1] == 4; */
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assume a[0] == 2; */
/*@ assert a[0] == 2; */
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assume a[0] == 2; */
/*@ assert a[0] == 4; */
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assume a[1] == 2; */
/*@ assert a[1] == 3; */
/*@ assert a[1] == 4; */
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assume a[1] == 2; */
/*@ assert a[1] == 3; */
/*@ assert a[1] == 5; */
/*@non_null*/
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assert a[0] == b[0]; */
/*@non_null*/
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assert a[0] != b[0]; */
/*@non_null*/
/*@non_null*/
/*@ assume b.length == 10 && a.length == 10;*/
/*@ assert b[0] == 7; */
/*@non_null*/
/*@non_null*/
/*@ assume b.length == 10 && a.length == 10;*/
/*@ assert b[0] == 8; */
/*@non_null*/
/*@non_null*/
/*@ assume b.length == 10 && a.length == 12;*/
/*@ assert b != null; assert a != null; assert b.length == 12; assert a.length == 12; */
/*@non_null*/
/*@assume a.length == 10; assume a[1] != null; assume a[1].length == 5; */
/*@ assume a[1][2]; */
/*@ assert a[1][2]; */
/*@non_null*/
/*@assume a.length == 10; assume a[1] != null; assume a[1].length == 5; */
/*@ assume a[1][2]; */
/*@ assert !a[1][2]; */
/*@non_null*/
/*@assume a.length == 10; assume a[1] != null; assume a[1].length == 5; */
/*@ assume a[1][2]; */
/*@ assert !a[1][2]; */
/*@non_null*/
/*@assume a.length == 10; assume a[1] != null; assume a[1].length == 5; */
/*@ assume a[1][2]; */
/*@ assert a[1][3]; */
/*@non_null*/
/*@assume a.length == 10; assume a[1] != null; assume a[1].length == 5; */
/*@ assume a[1][2]; */
/*@ assert a[0][2]; */
/*@non_null*/
/*@assume a.length == 10; assume a[1] != null; assume a[1].length == 5; */
/*@ assume a[1][2]; assume a[0] != null; */
/*@ assert a[0][2]; */
/*@non_null*/
/*@assume a.length == 10; assume a[1] != null; assume a[1].length == 5; */
/*@ assume a[1][2]; assume a[0] != null; assume a[0].length > 5; */
/*@ assert a[0][2]; */
/*@non_null*/
/*@assume a.length == 10; assume a[1] != null; assume a[0] != null; assume a[1].length == 5; assume a[0].length == 3; */
/*@ assume a[0][0]; */
/*@ assert a[0][0]; */
/*@non_null*/
/*@assume a.length == 10; assume a[1] != null; assume a[0] != null; assume a[1].length == 5; assume a[0].length == 3; */
/*@ assume a[0][0]; */
/*@ assert !a[0][0]; */
/*@non_null*/
/*@assume a.length == 10; assume a[1] != null; assume a[1].length == 5; */
/*@ assert a[0][3] == a[1][3]; */
/*@non_null*/
/*@assume a.length == 10; assume a[1] != null; assume a[1].length == 5; */
/*@ assert a[0][3] != a[1][3]; ; */
/*@non_null*/
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assert a[0] == b[0]; */
/*@non_null*/
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assert a[0] != b[0]; */
/*@non_null*/
/*@non_null*/
/*@ assume b.length == 10 && a.length == 10 && b[0] != null && a[0] != null && b[0].length == 5 && a[0].length==6;*/
/*@ assert !b[0][0]; */
/*@non_null*/
/*@non_null*/
/*@ assume b.length == 10 && a.length == 10 && b[0] != null && a[0] != null && b[0].length == 5 && a[0].length==6;*/
/*@ assert b[0][0]; */
/*@non_null*/
/*@non_null*/
/*@ assume b.length == 10 && a.length == 12;*/
/*@ assert b != null; assert a != null; assert b.length == 12; assert a.length == 12; */
/*@ nullable_by_default */
//@ public static invariant t != null;     "

/*@non_null*/
/*@ assume t.f == 2; */
/*@ assert t.f == 2; */
/*@non_null*/
/*@ assume t.f == 2; */
/*@ assert t.f == 3; */
/*@non_null*/
/*@ assume t.f == 2; */
/*@ assert t.f == 3; */
/*@non_null*/
/*@ assume t.f == 2; */
/*@ assert t.f == 4; */
/*@non_null*/
/*@ assume t.g == 2; */
/*@ assert t.g == 2; */
/*@non_null*/
/*@ assume t.g == 2; */
/*@ assert t.g == 4; */
/*@non_null*/
/*@ assume t.f == 2; */
/*@ assert t.f == 3; */
/*@ assert t.f == 4; */
/*@non_null*/
/*@ assume t.f == 2; */
/*@ assert t.f == 3; */
/*@ assert t.f == 5; */
/*@non_null*/
/*@non_null*/
/*@ assert a.f == b.f; */
/*@non_null*/
/*@non_null*/
/*@ assert a.f != b.f; */
/*@non_null*/
/*@non_null*/
/*@ assert b.f == 7; */
/*@non_null*/
/*@non_null*/
/*@ assert b.f == 8; */
/*@non_null*/
/*@non_null*/
/*@ assert a.sf == b.sf; */
/*@non_null*/
/*@non_null*/
/*@ assert a.sf != b.sf; */
/*@non_null*/
/*@non_null*/
/*@ assert 3 == b.sf; */
/*@non_null*/
/*@non_null*/
/*@ assert 3 != b.sf; */
/*@non_null*/
/*@ assert f == this.f; */
/*@ assert a == this ==> a.f == f; */
/*@non_null*/
/*@ assert f == this.f; */
/*@ assert a.f == f; */
/*@non_null*/
/*@ assert sf == this.sf; */
/*@ assert a.sf == sf; */
/*@ assume i>=-1 && i <=1; */
/*@ assert j!=0; */
/*@ assume i>=-1 && i <=1; */
/*@ assert j==1; */
/*@ assume i>=-1 && i <=1; */
/*@ assert j>0; */
/*@ assume i>=-1 && i <=1; */
/*@ assert i==0 ==> j==-1; */
/*@ assume i>=-1 && i <=1; */
/*@ assert j>=0; */
/*@ assume i>=-1 && i <=1; */
/*@ assert j>0; */
/*@ assume i>=-1 && i <=1; */
/*@ assert j>=0; */
//@ ensures i == 2;    "

//@ ensures i == 1;    "

//@ public exceptional_behavior requires b;  signals (Exception e) true; signals (RuntimeException e) true;    "

//@ also    " + "//@ public normal_behavior requires !b; ensures true;    "

//@ requires k < 0;    " + "//@ ensures true;    " + "//@ also    " + "//@ requires k > 0;    "

//@ ensures \\result == 1;    " + "public int m1() {    " + "    int i = 1;    " + "    try {    "

//@ assert e != null;    " + "        i = 2;    " + "    }    "

//@ requires k < 0;    " + "//@ ensures true;    " + "//@ also    " // Line

//@ requires k > 0;    " + "//@ ensures \\result == 1;    " + "public int m2() {    " + "    int i = 1;    "

//@ assert e != null;    " + "        i = 1;    " // Line

//@ requires i > 0;    " + "  //@ ensures i > 0;    "

/*@ assert a*2 == a + a; */
/*@ assert a * b ==
                // a *(b-1) + a; */
/*@ assert (2*a)/2 == a; */
/*@ assert a >= 0 ==> (a%3) < 3; */
/*@ assert a >= 0 ==> (a%3) >= 0; */
/*@ assert (a >= 0
                // && b > 0) ==> (a%b) >= 0; */
/*@ assert (a >= 0
                // && b > 0) ==> ((a*b)%b) == 0; */
/*@ assert (a >= 0 ) ==> ((5*a)%5) == 0; */
//@ requires i < 1000; ensures \\result == i+1;    "

//@ pure     "

/*@ assume a < 100; */
/*@ assert k == m(a); */
/*@ assume a < 100; */
/*@ assert k == m(a); */
/*@ assume a < 100; */
/*@ assert k == m(a) + m(a); */
/*@ assume a < 100; */
/*@ assert k == 1 + m(a) + m(a); */
/*@ assume a < 100; */
/*@ assert k == m(m(a+1)); */
/*@ assume a < 100; */
/*@ assert k == m(m(a+1)); */
//@ requires i < 1000; ensures \\result == i+1;    "

//@ pure     "

/*@ assume a < 100; */
/*@ assert k == m(a); */
/*@ assume a < 100; */
/*@ assert k == m(a); */
/*@ assume a < 100; */
/*@ assert k == m(a) + m(a); */
/*@ assume a < 100; */
/*@ assert k == 1 + m(a) + m(a); */
/*@ assume a < 100; */
/*@ assert k == m(m(a+1)); */
/*@ assume a < 100; */
/*@ assert k == m(m(a+1)); */
/*@ code_bigint_math*/
//@ ensures \\result == z+1;    " + "  //@ pure     "

/*@ assert k == m(); */
/*@ assert k == m(); */
/*@ assert k == m() + m(); */
/*@ assert k == 1 + m() + m(); */
/*@ assert k == m(); */
/*@ assert k == m(); */
/*@ code_bigint_math*/
//@ ensures \\result == z+1;    "

//@ pure     "

/*@ assert k == m(); */
/*@ assert k == m(); */
/*@ assert k == m() + m(); */
/*@ assert k == 1 + m() + m(); */
//@ ensures \\result > 0;    "

//@ also    "

//@ ensures \\result > ii;    "

/*@ code_bigint_math*/
//@ also public normal_behavior    "

//@ ensures \\result == i+1;    "

//@ pure    "

//@ requires a >= 0;    "

//@ ensures \\result == a+1;    "

//@ requires iii > 0;    " + "  //@ ensures \\result > 0;    " + "  abstract public int m(int iii);    "

//@ also    "

//@ ensures \\result > ii;    " + "  abstract public int m(int ii);    " + "}    "

/*@ code_bigint_math*/
//@ also    "

//@ ensures \\result == i+1;    " + "  //@ pure    " + "  public int m(int i) { return i+1; }    "

//@ ensures \\result == a+1;    " + "  public int n1(int a) { return m(a); }    "

//@ requires iii > 0;    " + "  //@ ensures \\result > 0;    " + "  abstract public int m(int iii);    "

//@ also    "

//@ requires ii > 0;    " + "  //@ ensures \\result > ii;    " + "  abstract public int m(int ii);    "

/*@ code_bigint_math*/
//@ also    "

//@ requires i > 0;    " + "  //@ ensures \\result == i+1;    " + "  //@ pure    "

//@ requires iii == 1;    "

//@ ensures \\result == iii;    "

//@ also    "

//@ requires ii == 2;    "

//@ ensures \\result == ii;    "

/*@ code_bigint_math*/
//@ also    "

//@ requires i == 3;    "

//@ ensures \\result == i;    "

//@ pure    "

//@ requires a >= 1 && a <= 3;    "

//@ ensures \\result == a;    "

//@ ensures \\result == a;    "

//@ requires 0<=ii && ii <=3;    "

//@ ensures \\result < 0;    " + "  public static int m(int ii) {     "

//@ requires ii == 2;    " + "  //@ ensures \\result == 0;    "

//@ ensures is == 6;    "

//@ ensures \\result == 1;    " + "  public static int m4(int ii) {     " + "    try { ii = 0;     "

//@ assert c == 1;     " + "    return c;     " + "  }    " + "

//@ ghost int d = c+1;    " + "    //@ assert d + c == 9;     " + "    return c;     "

//@ ghost int d = c+1;    " + "    //@ assert d + c == 10;     " + "    return c;     "

//@ ghost int d = c+1;    " + "    //@ set d = 10;    " + "    //@ assert d + c == 14;     "

//@ ghost int d = c+1;    " + "    //@ set d = 10;    " + "    //@ assert d + c == 15;     "

//@ ghost int d = c+1;    " + "    //@ debug d = 10;    " + "    //@ assert d + c == 14;     "

//@ ghost int d = c+1;    " + "    //@ debug d = 10;    " + "    //@ assert d + c == 15;     "

/*@ nullable_by_default */
/*@non_null*/
//@ requires o != null;    "

//@ public normal_behavior  ensures \\result == (oo != null);    "

/*@ nullable_by_default */
/*@non_null*/
//@ requires o != null;    " + "  public static void m2(TestJava o) {     " + "    int i = o.z();     "

//@ public normal_behavior  ensures \\result == (oo != null);    "

//@ signals_only \    othing;      public int z() { return 0; }    " + "

/*@non_null*/
//@ requires o != null;    " + "  public static void m2(TestJava o) {     " + "    int i = o.z();     "

//@ public normal_behavior  ensures \\result == (oo != null);    "

//@ signals_only \    othing;      public static int z() { return 0; }    " + "}");

/*@ nullable_by_default */
/*@ code_java_math spec_java_math*/
//@ requires a != null;    "

//@ requires a != null;    "

//@ assume a.length == 1;     "

/*@ non_null*/
/*@ non_null*/
/*@ nullable_by_default */
//@ assume o.j == 1;     " + "  }    "

/*@non_null*/
//@ assume o.j == 1;     " + "  }    "

//@ requires o != null;    " + "  public static void m2(TestJava o) {     "

//@ assume o.j == 1;     " + "  }    " + "  public static void m3(TestJava o) {     "

//@ assume o != null && o.j == 1;     " + "  }    " + "  public static void m4(TestJava o) {     "

//@ assume o == null || o.j == 1;     " + "  }    " + "  public static void m5(TestJava o) {     "

//@ assume o != null ==> o.j == 1;     " + "  }    " + "

/*@ nullable_by_default */
//@ assume o.j == 1;     " + "  }      "

//@ assume a[0] == 1;     " + "  }    "

//@ requires a != null;    " + "  public static void m2(int[] a) {     "

//@ assume a[-1] == 1;     " + "  }    " + "  //@ requires a != null;    "

//@ assume a.length == 1;     "

//@ assume a[1] == 1;     " + "  }    " + "  public static void m4(int i, int j) {     "

//@ assume i/j == 4;     " + "  }    " + "  public static void m5(int i, int j) {     "

//@ assume i%j == 4;     " + "  }    " + "  public static void m6(RuntimeException r) {     "

//@ assume ((Exception)t) != null ? true : true;     " // OK

//@ assume ((RuntimeException)t) != null ? true : true ;     " + "  }    "

/*@ non_null*/
//@ assume ((Exception)t) != null ? true : true;     " + "  }    "

/*@ non_null*/
//@ assume ((RuntimeException)t) != null ? true : true ;     " + "  }    " + "

/*@ nullable_by_default */
//@ assume o.j == 1;     "

//@ assert o.j == 1 ? true : true;     "

//@ ghost int i = o.j;     "

//@ ghost int i; debug i = o.j;     "

//@ requires o.j == 1;    "

//@ ensures t.j == 1 ? true : true;    "

//@ ghost int i; set i = o.j;     "

/*@ nullable_by_default */
//@ assume o.j == 1;     "

/*@ nullable_by_default */
//@ public invariant t.j ==1 ? true: true;    " + "

/*@ nullable_by_default */
//@ public initially t.j ? true : true;    " + "

/*@ nullable_by_default */
//@ public constraint t.j ==1 ? true: true;    " + "

/*@ nullable_by_default */
//@ assert i == 1;    "

//@ assert i == 2;    "

//@ assert i == 2;    " + "  }    " + "  public void mp() {    "

//@ assert i == 2 && j == 3;    " + "  }    " + "  public void ma() {    " + "    int i = 0;    "

//@ assert i == 1;    " + "  }    " + "  public void m1(int k) {    "

//@ assume k == 0;     " + "    try {    " + "      try {    "

//@ assert i == 2 && j == 50;    "

//@ assume k == 0;     " + "    try {    " + "    try {    " + "      try {    "

//@ assert i == 2 && j == 50;    " + "    }    "

//@ assert i == 0;    " + "  }    "

//@ assert i == 0;    "

//@ public normal_behavior     "

//@   requires i != 1 & i != 2;    "

//@   ensures \\result == 0;    "

//@ also public exceptional_behavior     "

//@   requires i == 2 && ee != null;     "

//@   signals (ArrayIndexOutOfBoundsException ex) true;     "

_by_default     "

//@ public normal_behavior     "

//@   requires i != 1 & i != 2;    "

//@   ensures \\result == 0;    "

//@ also public exceptional_behavior     "

//@   requires i == 2;     "

//@   signals (ArrayIndexOutOfBoundsException ex) true;     "

//@ public normal_behavior     "

//@   requires e != null & ee != null & ae != null;    "

//@   requires i != 1 & i != 2;    "

//@   ensures \\result == 0;    "

//@ also public exceptional_behavior     "

//@   requires e != null & ee != null & ae != null;    "

//@   requires i == 2;     "

//@   signals (ArrayIndexOutOfBoundsException ex) true;     "

/*@non_null*/
//@ assume \\typeof(o) == \\type(Object);    "

//@ assert \\typeof(o) == \\typeof(o);    "

//@ assert \\typeof(o) == \\type(Object);    "

//@ assert \\typeof(o) <: \\type(Object);    "

//@ assert \\typeof(o) <:= \\type(Object);    "

/*@non_null*/
//@ assume \\typeof(o) == \\type(Object);    "

//@ assert \\typeof(o) != \\type(Object);    "

/*@non_null*/
//@ assume \\typeof(o) == \\type(Object);    "

//@ assert \\typeof(o) == \\type(Object);    "

/*@non_null*/
//@ assume \\typeof(o) == \\type(Object);    "

//@ assert \\typeof(o) == \\type(TestJava);    "

/*@non_null*/
//@ assume \\typeof(o) == \\type(Object);    "

//@ assert \\type(TestJava) <: \\typeof(o);    "

//@ assert \\type(TestJava) <:= \\typeof(o);    "

/*@non_null*/
//@ assume \\typeof(o) == \\type(TestJava);    "

//@ assert \\typeof(o) <: \\type(Object);    " + "  }    "

/*@non_null*/
//@ assert \\typeof(o) <: \\type(Object);    " + "  }    " + "}");

/*@non_null*/
//@ assert JML.erasure(\\typeof(o)) == o.getClass();    "

//@ requires i >= 0;    " + "  //@ ensures i>0;    " + "  //@ signals (Exception e) i == 0;    "

//@ requires i >= 0;    " + "  //@ ensures i>0;    " + "  //@ signals (Exception e) i == 1;    " // FAILS

//@ requires i >= 0;    " + "  //@ ensures i>0;    " + "  //@ signals (Exception e) i == 0;    " // OK

//@ requires i >= 0;    " + "  //@ ensures i>0;    " + "  //@ signals (RuntimeException e) i == 1;    " // FAILS

//@ requires i >= 0;    " + "  //@ ensures i>0;    " + "  //@ signals (Exception e) i == 0;    "

//@ requires i >= 0;    "

//@ ensures i>0;    " + "  //@ signals (Exception e) i == 1;    " // FAILS

//@ requires i >= 0;    " + "  //@ ensures i>0;    " + "  //@ signals (RuntimeException e) i == 1;    " // OK

//@ signals_only java.io.IOException;    " // FAILS

//@ signals_only \    othing;    " // FAILS

//@ signals_only Exception;    " // OK

//@ public constraint i > \\old(i) for m1();    " + "  public void m1() {    " + "  }    "

//@ public constraint i > \\old(i) for ! m1();    " + "  public void m1() {    " + "  }    "

//@ public constraint i > \\old(i) for \\everything;    " + "  public void m1() {    "

//@ public constraint i > \\old(i) for !\    othing;    " + "  public void m1() {    " + "  }    "

//@ public constraint i > \\old(i) for \    othing;    " + "  public void m1() {    " + "  }    "

//@ public constraint i > \\old(i) for !\\everything;    " + "  public void m1() {    "

//@ public constraint i > \\old(i);    " + "  public void m1() {    " + "  }    "

//@ public constraint i > \\old(i) for m1(), m1(int);    " + "  public void m1() {    "

//@ public constraint i > \\old(i) for m1(), m1(int);    " + "  public static void m1() {    "

//@ public constraint i > \\old(i) for ! m1(), m1(int);    " + "  public void m1() {    "

//@ public constraint i > \\old(i) for TestJava();    " + "  public TestJava() {    " + "  }    " + "

//@ public constraint i > \\old(i);    " + "  public TestJava() {    " + "  }    " + "}");

//@ public static constraint i > \\old(i) for TestJava();    " + "  public TestJava() {    "

//@ public static constraint i > \\old(i);    " + "  public TestJava() {    " + "  }    " + "

//@ ghost static public int i = 0;    "

//@ public static constraint i > \\old(i);    " + "}    "

//@ ghost static public int i = 0;    "

//@ public constraint i > \\old(i);    " + "}    " + "public class TestJava implements A {     "

//@ normal_behavior     "

//@ ensures \\result == (i > 0 && i < 10);    "

//@ pure    "

//@ model public boolean m(int i);    "

//@ assert (\\forall int k; 3<k && k <7; m(k));    "

//@ assert (\\forall int k; 3<k && k <7; m(k-1));    "

//@ assert !(\\forall int k; -3<k && k <7; m(k));    "

//@ normal_behavior     "

//@ ensures \\result == (i > 0 && i < 10);    "

//@ pure function    "

//@ model public static boolean m(int i);    "

//@ pure    "

//@ assert !(\\forall int k; 3<k && k <11; m(k));    "

//@ normal_behavior     "

//@ ensures \\result == (i > 0 && i < 10);    "

//@ pure    "

//@ model public boolean m(int i);    "

//@ pure    "

//@ assert !(\\forall int k; 3<k && k <11; m(k));    "

/*@ spec_public */
//@ assignable \\everything;     "


/*@ spec_public */
//@ assignable \\everything;     "


/*@ spec_public */
/*@ spec_public */
//@ assignable \\everything;     "


//@ assert array.length >= 0;     "

//@ assert array.length <= Integer.MAX_VALUE;     "

//@ requires k >= 0;    "

//@ assert array.length >= 0;     "

//@ assert array.length <= Integer.MAX_VALUE;     "

//@ assert array.length == k;     "

//@ assert array.length >= 0;     "

//@ assert array.length <= Integer.MAX_VALUE;     "

//@ assert array.length >= 0;     "

//@ assert array.length <= Integer.MAX_VALUE;     "

//@ requires (\\forall int i; 0 <= i && i < args.length; args[i] >= 0);    "

//@ requires (\\forall int i; 0 <= i && i < args.length; args[i] >= 0); requires n == -2;    "

//@ requires (\\forall int i; 0 <= i && i < args.length; args[i] >= 0);    "

//@ requires (\\forall int i; 0 <= i && i < args.length; args[i] >= 0);"

//@ assert (\\lbl I i) + \\lbl(J j) == 0;     "

//@ assert (\\lbl I i) + \\lbl(J,j) == 0;     "

//@ nullable_by_default     "

/*@ requires o != null;     "
                        + "      ensures \\result == (j>=0);     "
                        + "     pure function */
//@ signals (NullPointerException e) positive(null,j);     "

//@ signals (NegativeArraySizeException e) positive(null,j);     "

//@ ensures j >= 0;     "

//@ ensures ii == 19; static_initializer "

//@ public final invariant ii == 19;     "

//@ public normal_behavior ensures \\result == 10 + 9; pure    "

//@ public normal_behavior ensures \\result == 19; pure    "

//@ ensures ii == 19 && jj == 21; static_initializer "

//@ public final invariant ii == 19;     "

//@ public normal_behavior ensures \\result == 10 + 9; pure    "

//@ public normal_behavior ensures \\result == 21; pure    "

//@ ensures ii == mm(); static_initializer "

//@ public final invariant ii == 19;     "

//@ public normal_behavior ensures \\result == 10 + 9; pure    "

//@ public normal_behavior ensures \\result == 19; pure    "

//@ public final invariant ii == 19;     "

//@ public normal_behavior ensures \\result == 10 + 9; pure    "

/*@ spec_public */
//@ public normal_behavior     "

//@   ensures num == 10;     "

//@   ensures A.bit == 1;     "

//@   ensures B.bit == 2;     "

//@ static_initializer     "

/*@ spec_public */
/*@ spec_public */
//@ public normal_behavior     "

//@   ensures num == 10;     "

//@   ensures A.bit == 1;     "

//@   ensures B.bit == 2;     "

//@ static_initializer     "

//@ public normal_behavior     "

//@   requires \    onnullelements(arr);     "

//@ public normal_behavior     "

//@   requires true;     "

//@ show i, j+1;    "

//@ show k;    "

//@ assert k > 0;    "

//@ show m,k;    "

//@ assert m > 0;    "

//@ public normal_behavior     "

//@   requires true;     "

//@ show i;    "

//@ public normal_behavior     "

//@   requires true;     "

//@ show i;    "

//@ show     "

//@ show i i;    "

//@ show;    "

//@ show i    "

//@ show %;    "

//@ public normal_behavior     "

//@   requires k != null && \    onnullelements(k) && \\elemtype(\\typeof(k)) <: \\type(Key);     "

//@ assert kk != null;    "

//@ assert \    onnullelements(kk);    "

//@ assert \\elemtype(\\typeof(kk)) == \\type(Key);    "

//@ public normal_behavior     "

//@   requires k != null && \    onnullelements(k) && \\elemtype(\\typeof(k)) <: \\type(Key);     "

//@ assert kk != null;    "

//@ assert \    onnullelements(kk);    "

//@ assert \\elemtype(\\typeof(kk)) == \\type(Key);    "

//@ ghost int k = 1;    "

//@ ghost int k = 2;    "

//@ ghost int i = 2;    "

//@ assert 0 <= i < 10 < 12;    "

//@ set i = 10;    "

//@ assert !(0 <= i < 10);    "

//@ assert 0 <= i < 11 == 2 <= i <= 12;    "

//@ assert 11 >= i+1 > 1 == 12 >= i > 2;    "

//@ assert 11 >= i+1 < 12;    "

//@ assert 11 >= i+1 < 12 == true;    "

//@ assert 11 >= i+1 > 1 != 12 <= i <= 22;    "

//@ signals_only \    othing;    "


//@ allow NullPointerException;     "


//@ forbid NullPointerException;     "



//@ ignore NullPointerException;     "



//@ ignore java.lang.XX;     "


//@ allow NullPointerException;     "

//@ forbid NullPointerException;     "

//@ forbid X;     "

//@ forbid ;     "

//@ forbid NullPointerException     "

//@ forbid NullPointerException, ArrayIndexOutOfBoundsException;     "

//@ forbid NullPointerException ArrayIndexOutOfBoundsException;     "

//@ forbid NullPointerException; allow NullPointerException     "

//@ ignore NullPointerException; allow NullPointerException     "

//@ ignore NullPointerException; forbid NullPointerException     "

//@ forbid java.lang.NullPointerException     "

//@ forbid java.lang.     "

/*@ pure */
//@ assert \\count >= 0;    " // OK

//@ assert \\count < a.length;    " // OK

//@ assert \\count >= 1;    " // BAD

//@ ghost int i = \\count;    " // OK

//@ assert \\count >= 0;    " // OK

//@ assert \\count < 2;    " // OK

//@ assert \\count == i;    " // OK

//@ ghost int i = \\count;    " + "      for (long kk: b) {    "

//@ assert \\count == i;    " // BAD

//@ loop_invariant \\count >= 0 && \\count <= a.length;    " // OK

//@ decreases a.length - \\count;    " // OK

//@ loop_invariant \\count >= 0 && \\count <= a.length;    " // OK

//@ loop_decreases a.length - \\count;    " // OK

//@ decreases a.length - \\count -1;    " // 0 on last

//@ decreases a.length - \\count -2;    " // BAD - last time through

//@ decreases \\count+10;    " // BAD - loop does not decrease variant

//@ loop_invariant \\count > 0 && \\count <= a.length;    " // BAD - first time through loop

//@ loop_invariant \\count >= 0 && \\count < a.length;    " // BAD - laswt time through loop

//@ assert \\count >= 0;    " // OK

//@ assert \\count < a.length;    " // OK

//@ ghost int i = \\count;    " // OK

//@ assert \\count >= 0;    " // OK

//@ assert \\count < 2;    " // OK

//@ assert \\count == i;    " // OK

//@ reachable;    " // knows that the loop is not

//@ loop_invariant \\values.size() == \\count;    " + "    for (Integer k: a) {    " + "    }    "

//@ loop_invariant \\values.size() == \\count;    " + "    for (Integer k: a) {    "

//@ assert \\values.size() == \\count;    " + "    }    " + "  }    "

//@ assert \\values.size() == \\count;    " + "    }    " + "  }    "

//@ assert \\count >= 1;    " // BAD

//@ public normal_behavior  ensures true;    " + "  public void m2() {    "

//@ assume a != null;     "

//@ assume it != null;     "

//@ public normal_behavior  ensures true;    " + "  public void m2bad() {    "

//@ assume a != null;     "

//@ assume it != null;     "

//@ public normal_behavior  ensures true;    "

//@ public normal_behavior  ensures true;    "

//@ assume values != null; set values.containsNull = true;     "

//@ assert values.content.owner == values;    "

//@ assume a != null;     "

//@ assume values.content.owner == values;    "

//@ assume it != null;     "

//@ assume values.content.owner == values;    "

//@ assert values.content.owner == values;    "

//@ ghost List<Map.Entry<String,String>> v = values;    "

//@ loop_invariant values == v && values.content.owner == values;     "

//@ assume k != null && \\typeof(k) <: \\type(Map.Entry<String,String>);     "

//@ public normal_behavior  ensures true;    "

//@ assume values != null; set values.containsNull = true;     "

//@ assert values.content.owner == values;    "

//@ assume a != null;     "

//@ assume values.content.owner == values;    "

//@ assume it != null;     "

//@ assume values.content.owner == values;    "

//@ assert values.content.owner == values;    "

//@ ghost List<Map.Entry<String,String>> v = values;    "

//@ assert values.content.owner == values;    "

//@ assume k != null &&  \\typeof(k) <: \\type(Map.Entry<String,String>);     "

//@ assert values.content.owner == values;    "

//@ public normal_behavior  ensures true;    "

//@ set values.containsNull = true;     "

//@ public normal_behavior  ensures true;    "

//@ set values.containsNull = true;     "

//@ ghost int i = \\count;    " // Out of scope

//@ ghost int i = \\count;    " // Out of scope

//@ set \\count = 6;    " // Syntax error

//@ ghost org.jmlspecs.lang.JMLList i = \\values;    " // Out

//@ ghost org.jmlspecs.lang.JMLList i = \\values;    " // Out

//@ set \\values = null;    " // Syntax error

//@ ghost org.jmlspecs.lang.JMLList i = \\values;    " // OK

//@ modifies \\everything;    "

//@ assume \    onnullelements(a);    "

//@ assume a.length > 1;    "

//@ assert a[0] != null;    " // OK

//@ modifies \\everything;    "

//@ assume \    onnullelements(a);    "

//@ assert a != null;    " // OK

//@ modifies \\everything;    "


//@ assume \    onnullelements(a);    "

//@ assert a == null;    " // BAD

//@ modifies \\everything;    "

//@ assume a != null && a.length > 1;    "

//@ assert a[0] != null;    " // BAD

//@ modifies \\everything;    "

//@ assume a != null && a.length == 0;    "

//@ assert \    onnullelements(a);    " // OK

//@ modifies \\everything;    "

//@ assume a != null && a.length == 0;    "

//@ assert (\\forall int i; 0<=i && i<a.length; a[i] != null);    " // OK

//@ requires \\elemtype(\\typeof(a)) == \\type(Object); modifies \\everything;    "

//@ assume a != null && a.length == 1;    "

//@ assert \    onnullelements(a);    " // OK

//@ modifies \\everything;    "

//@ assume a != null && a.length == 1;    "

//@ assume a[0] != null;    "

//@ assert \    onnullelements(a);    " // OK

//@ requires \\elemtype(\\typeof(a)) == \\type(Object); modifies \\everything;    "

//@ assume a != null && a.length == 2;    "

//@ assert \    onnullelements(a);    " // OK

//@ modifies \\everything;    "

//@ assume a != null && a.length == 2;    "

//@ assume a[0] != null;    "

//@ assume a[1] != null;    "

//@ assert \    onnullelements(a);    " // OK

//@ requires \\elemtype(\\typeof(a)) == \\type(Object); modifies \\everything;    "

//@ assume a != null && a.length == 3;    "

//@ assert \    onnullelements(a);    " // BAD

//@ requires \\elemtype(\\typeof(a)) == \\type(Object); modifies \\everything;    "

//@ assume \    onnullelements(a) && a.length == 3;    "

//@ assert \    onnullelements(a);    " // OK

//@ modifies \\everything;    "

//@ assume a != null && a.length == 3;    "

//@ assert \    onnullelements(a);    " // BAD

//@ requires i == 5;    " + "  //@ modifies \\everything;    " + "  public void m1(int i) {    "

//@ assert \    ot_modified(i);    " // OK

//@ modifies \\everything;    " + "  public void m1a(int i) {    " + "    i = 5;    "

//@ assert \    ot_modified(i);    " // BAD

//@ ghost public int gi;    "

//@ requires i == 5;    " + "  //@ modifies \\everything;    " + "  public void m2() {    "

//@ assert \    ot_modified(i);    " // OK

//@ modifies \\everything;    " + "  public void m2a() {    " + "    i = 5;    "

//@ assert \    ot_modified(i);    " // BAD

//@ requires si == 5;    " + "  //@ modifies \\everything;    " + "  public void m3() {    "

//@ assert \    ot_modified(si);    " // OK

//@ modifies \\everything;    " + "  public void m3a() {    " + "    si = 5;    "

//@ assert \    ot_modified(si);    " // BAD

//@ requires gi == 5;    " + "  //@ modifies \\everything;    " + "  public void m4() {    "

//@ set gi = 5;    " + "    //@ assert \    ot_modified(gi);    " // OK

//@ modifies \\everything;    " + "  public void m4a() {    " + "    //@ set gi = 5;    "

//@ assert \    ot_modified(gi);    " // BAD


//@ requires t != null;    "

//@ modifies \\everything;    "

//@ assert \    ot_modified(t.i);    " // OK

//@ requires t != null;    "

//@ modifies \\everything;    "

//@ assert \    ot_modified(t.i) ? true: true;    " // BAD

//@ requires t == null;    "

//@ modifies \\everything;    "

//@ assert \    ot_modified(t.i) ? true: true;    " // OK

//@ modifies \\everything;    "

//@ assert \    ot_modified(t.i) ? true: true;    " // BAD

//@ requires p != null && p != this;    "

//@ modifies \\everything;    "

//@ assert pp != p;    " // OK

//@ assert pp != this;    " // OK

//@ requires p != null && p != this;    " + "  //@ modifies \\everything;    "

//@ assert pp != p;    " // BAD

//@ requires p != null && p != this;    " + "  //@ modifies \\everything;    "

//@ assert pp != this;    " // BAD

//@ requires p != null && p != this;    " + "  //@ modifies \\everything;    "

//@ assert pp != q;    " // OK

//@ requires p != null && p != this;    "

//@ modifies \\everything;    " // Line 30                                                                                                // 30

//@ assert pp != q;    " // OK

//@ modifies \\everything;    " + "  //@ ensures \\result != null && \\fresh(\\result);    "

//@ ensures \\result != p && \\result != this;    " + "  public Object m6(Object p) {    "

//@ modifies \\everything;    " + "  //@ ensures \\result == null;    " // BAD

//@ modifies \\everything;    " + "  //@ ensures \\result != null && \\fresh(\\result);    "

//@ ensures \\result == p || \\result == this;    " // BAD

//@ modifies \\everything;    "

//@ ensures \\result != null && !\\fresh(\\result);    " // BAD

//@ ghost Object oo;    "

//@ static ghost Object soo;    "

//@ modifies \    othing;    "

//@ assert pp != o && pp != oo;    " // OK

//@ modifies \    othing;    "

//@ assert pp != o;    " // BAD

//@ modifies \    othing;    "

//@ assert pp != oo;    " // BAD

//@ modifies \\everything;    "

//@ assert pp != oo;    " // OK

//@ modifies \\everything;    "

//@ assert pp != o;    " // BAD

//@ modifies \    othing;    "

//@ assert pp != so && pp != soo;    " // OK

//@ modifies \    othing;    "

//@ assert pp != so;    " // BAD

//@ modifies \    othing;    "

//@ assert pp != soo;    " // BAD

//@ modifies \\everything;    "

//@ assert pp != soo;    " // OK

//@ modifies \\everything;    "

//@ assert pp != so;    " // OK

//@ modifies \    othing;    "

//@ assert pp != o && pp != oo;    " // BAD

//@ modifies \    othing;    " + "  public void m9b(Object p) {    " + "    Object pp = c1n(p);    "

//@ assert pp != so && pp != soo;    " // BAD

//@ modifies \    othing;    "

//@ ensures \\fresh(\\result);    "

//@ modifies \    othing;    "

//@ ensures \\result == null || \\fresh(\\result);    "

//@ modifies \    othing;    "

//@ ensures true;    "

//@ modifies \\everything;    "

//@ ensures \\result != null && \\fresh(\\result);    "

//@ modifies \\everything;    "

//@ ensures true;    "

//@ requires p != null && p != this;    " + "  //@ modifies \\everything;    "

//@ assume this.k == 0;    " + "    c1(p);    " // havoc

//@ assert this.k == 0;    " // OK

//@ requires p != null && p != this;    " + "  //@ modifies \\everything;    "

//@ assume sk == 0;    " + "    c1(p);    " // havoc

//@ assert sk == 0;    " // OK

//@ requires o != null;    " + "  //@ modifies o.*;    " + "  public void c1(TestJava o) { }     "

//@ requires o != null;    " + "  //@ modifies TestJava.*;    " + "  public void c2(TestJava o) { }     "

//@ requires p != null && p != this;    " + "  //@ modifies \\everything;    "

//@ assume k == 0;    " + "    c1(this);    " // havoc

//@ assert k == 0;    " // FAILS

//@ requires p != null && p != this;    " + "  //@ modifies \\everything;    "

//@ assume sk == 0;    " + "    c1(this);    " // havoc

//@ assert sk == 0;    " // OK

//@ requires o != null;    " + "  //@ modifies o.*;    " + "  public void c1(TestJava o) { }     "

//@ requires o != null;    " + "  //@ modifies TestJava.*;    " + "  public void c2(TestJava o) { }     "

//@ requires p != null && p != this;    " + "  //@ modifies \\everything;    "

//@ assume k == 0;    " + "    c2(this);    " // havoc

//@ assert k == 0;    " // OK

//@ requires p != null && p != this;    " + "  //@ modifies \\everything;    "

//@ assume sk == 0;    " + "    c2(this);    " // havoc

//@ assert sk == 0;    " // FAILS

//@ requires o != null;    " + "  //@ modifies o.*;    " + "  public void c1(TestJava o) { }     "

//@ requires o != null;    " + "  //@ modifies TestJava.*;    " + "  public void c2(TestJava o) { }     "

//@ modifies \\everything;    "

//@ assume k == 0;    "

//@ assert k == 0;    "

//@ requires i == 0;    "

//@ modifies \\everything;    "

//@ also requires i > 0;    "

//@ modifies \    othing;    "

//@ modifies \\everything;    " + "  public void m1a() {    " + "    //@ assume k == 0;    "

//@ assert k == 0;    " // FAILS

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "

//@ modifies \\everything;    " + "  public void m2() {    " + "    //@ assume sk == 0;    "

//@ assert sk == 0;    " + "  }    "

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "}");

//@ modifies \\everything;    " + "  public void m2a() {    " + "    //@ assume sk == 0;    "

//@ assert sk == 0;    " // FAILS

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "

//@ requires a != null && a.length > 10;    " + "  //@ modifies \\everything;    "

//@ assume a[0] == 0;    " + "    c1(1);    "

//@ assert a[0] == 0;    " + "  }    "

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "}");

//@ requires a != null && a.length > 10;    " + "  //@ modifies \\everything;    "

//@ assume a[0] == 0;    " + "    c1(0);    " // modifies

//@ assert a[0] == 0;    " // FAILS

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "

//@ requires sa != null && sa.length > 10;    " + "  //@ modifies \\everything;    "

//@ assume sa[0] == 0;    " + "    c1(1);    "

//@ assert sa[0] == 0;    " + "  }    "

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "}");

//@ requires sa != null && sa.length > 10;    " + "  //@ modifies \\everything;    "

//@ assume sa[0] == 0;    " + "    c1(0);    "

//@ assert sa[0] == 0;    " // FAILS

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "}"

//@ requires sa != null && sa.length > 10;    " + "  //@ modifies \\everything;    "

//@ assume a == \\old(a);    " + "    c1(1);    "

//@ assert a == \\old(a);    " + "  }    "

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "}");

//@ requires sa != null && sa.length > 10;    " + "  //@ modifies \\everything;    "

//@ assume a == \\old(a);    " + "    c1(0);    "

//@ assert a == \\old(a);    " // FAILS

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "

//@ modifies \\everything;    " + "  public void m6(/*@ non_null*/TestJava t) {    "

//@ assume t.k == 0;    " + "    c1(1);    " + "    //@ assert t.k == 0;    " + "  }    "

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "}");

//@ modifies \\everything;    " + "  public void m6a(/*@ non_null*/TestJava t) {    "

//@ assume t.k == 0;    " + "    c1(0);    " + "    //@ assert t.k == 0;    " // FAILS

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "

//@ modifies \\everything;    " + "  public void m7() {    " + "    c1(1);    "

//@ assert sk == \\old(sk);    " // Should be OK

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "}");

//@ modifies \\everything;    " + "  public void m7a() {    " + "    c1(0);    "

//@ assert sk == \\old(sk);    " // FAILS

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "

//@ modifies k,sk;    "

//@ assume k == 0 && sk == 0;    "

//@ assert sk == 0;    "

//@ modifies k,sk;    "

//@ assume k == 0 && sk == 0;    "

//@ assert sk == 0;    " // FAILS

//@ modifies k,sk;    "

//@ assume k == 0 && sk == 0;    "

//@ assert k == 0;    " + "  }    "

//@ modifies k,sk;    "

//@ assume k == 0 && sk == 0;    "

//@ assert k == 0;    " // FAILS

//@ requires i == 0;    "

//@ modifies k;    "

//@ also requires i > 0;    "

//@ modifies sk;    "

//@ requires i == 10;    "

//@ modifies t.k;    "

//@ also requires i == 0;    "

//@ modifies \    othing;    "

//@ requires a!=null && 0<=i && i<a.length;    "

//@ modifies a[i];    "

//@ requires b!=null && 0<=i && i<b.length;    "

//@ modifies b[i];    "

//@ modifies k,sk;    " + "  public void m3() {    " + "    //@ assume k == 0 && sk == 0;    "

//@ assert k == 0;    " + "  }    "

//@ modifies k,sk;    " + "  public void m3a() {    " + "    //@ assume k == 0 && sk == 0;    "

//@ assert k == 0;    " // FAILS

//@ requires a != null && a.length == 5;    "

//@ modifies a[0];    " + "  public void m4() {    "

//@ assume a[0] == 0 && a[1] == 1;    " + "    c3(0);    " + "    //@ assert a[1] == 1;    "

//@ requires a != null && a.length == 5;    " + "  //@ modifies a[0];    "

//@ assume a[0] == 0 && a[1] == 1;    " + "    c3(0);    "

//@ assert a[0] == 0;    " // FAILS

//@ requires i == 0;    " + "  //@ modifies k;    " + "  //@ also requires i > 0;    "

//@ modifies sk;    " + "  public void c1(int i) { }     "

//@ requires i == 10;    " + "  //@ modifies t.k;    " + "  //@ also requires i == 0;    "

//@ modifies \    othing;    " + "  public void c2(int i, TestJava t) {}    "

//@ requires a!=null && 0<=i && i<a.length;    " + "  //@ modifies a[i];    "

//@ requires b!=null && 0<=i && i<b.length;    "

//@ modifies b[i];    " + "  public void c4(int i) {}    " + "

//@ requires b != null && b.length == 5;    "

//@ modifies b[0];    "

//@ assume b[0] == 0 && b[1] == 1;    "

//@ assert b[1] == 1;    "

//@ requires b != null && b.length == 5;    "

//@ modifies b[0];    "

//@ assume b[0] == 0 && b[1] == 1;    "

//@ assert b[0] == 0;    " // FAILS

//@ requires b != null && b.length == 5;    "

//@ modifies b[0];    "

//@ assume b[0] == 0 && b[1] == 1;    "

//@ requires a != null && b != null && b.length == 5  && a.length ==5;    "

//@ modifies a[0],b[0];    "

//@ assume b[0] == 0 && b[1] == 1;    "

//@ assert b[1] == 1;    "

//@ requires i == 0;    "

//@ modifies k;    "

//@ also requires i > 0;    "

//@ modifies sk;    "

//@ requires i == 10;    "

//@ modifies t.k;    "

//@ also requires i == 0;    "

//@ modifies \    othing;    "

//@ requires a!=null && 0<=i && i<a.length;    "

//@ modifies a[i];    "

//@ requires b!=null && 0<=i && i<b.length;    "

//@ modifies b[i];    "

//@ public invariant a != null && a.length == 10;    "

/*@ assignable a; */
//@ modifies a[*];    "

//@ assume a[0] == 0 && a[2] == 2;    "

//@ assert a[0] == 0;    "

//@ modifies a[*];    "

//@ assume a[0] == 0 && a[2] == 2;    "

//@ assert a[2] == 3;    " // FAILS

//@ modifies a[2 .. 4];    "

//@ modifies a[*];    "

//@ modifies a[2 .. ];    "

//@ public invariant a != null && a.length == 10;    "

//@ assignable a;    "

//@ modifies a[*];    "

//@ assume a[0] == 0 && a[2] == 2;    "

//@ assert a[0] == 0;    " // FAILS

//@ modifies a[*];    "

//@ assume a[0] == 0 && a[2] == 2;    "

//@ assert a[2] == 2;    " // FAILS

//@ modifies a[2 .. 4];    "

//@ modifies a[*];    "

//@ modifies a[2 .. ];    "

//@ public invariant a != null && a.length == 10;    "

//@ assignable a;    "

//@ modifies a[*];    "

//@ assume a[0] == 0 && a[2] == 2;    "

//@ assert a[0] == 0;    "

//@ modifies a[*];    "

//@ assume a[0] == 0 && a[9] == 2;    "

//@ assert a[9] == 2;    " // FAILS

//@ modifies a[2 .. 4];    "

//@ modifies a[*];    "

//@ modifies a[2 .. ];    "

//@ modifies \\everything;    " + "  public void z() {    " + "  }    "

//@ modifies \\everything;    " + "  public void m1() {    " + "    //@ assume a == 15 && fa == 13;    "

//@ assert fa == 13;    " // Should be OK

//@ assert a == 15;    " // Should fail

//@ assert fsa == 13;    " // OK

//@ assert fa == 15;    " // OK

//@ modifies \\everything;    " + "  public void m1() {    " + "    //@ assert fsa == 13;    " // Should

//@ assert fa == 15;    " // Should be OK

//@ modifies \\everything;    " + "  public void m2() {    " + "    //@ assert a == 17;    " // Not

//@ modifies \\everything;    " + "  public void m3() {    " + "    //@ assert fb == 16;    " // Not

/*@ code_bigint_math*/
//@ requires i >= 0;    " + "  //@ modifies k;    " + "  //@ ensures k == 10;    "

//@ signals (Exception e) k<0; signals_only Exception;    "

//@ requires i >= 0;    " + "  //@ modifies k;    " + "  //@ ensures k == 10;    "

//@ signals (Exception e) k==-11;    " + "  //@ signals_only Exception;    "

//@ requires i >= 0;    " + "  //@ modifies k;    " + "  //@ ensures k == 10;    "

//@ signals (Exception e) k==-12;    " + "  //@ signals_only Exception;    "

//@ requires i >= 0;    " + "  //@ modifies k;    " + "  //@ ensures k == 10;    "

//@ signals (Exception e) k==-13;    " // FAILS

//@ signals_only Exception;    " + "  public void m3a(int i) {    " + "    m(0);    "

//@ requires i >= 0;    " + "  //@ modifies k;    " + "  //@ ensures \\result == 12;    "

//@ signals (Exception e) false;    " + "  public int m4(int i) {    "

//@ requires i >= 0;    " + "  //@ modifies k;    " // Line

//@ ensures false;    " + "  //@ signals (Exception e) k == -11;    "

//@ signals_only Exception;    " + "  public int m5(int i) {    "

//@ requires i >= 0;    " + "  //@ modifies k;    " + "  //@ ensures false;    "

//@ signals (Exception e) k == -12;    " // Line 60

//@ signals_only Exception;    " + "  public int m6(int i) {    "

//@ requires i == 0;    " + "  //@ modifies k;    " + "  //@ ensures k>0 && \\result == i+1;    "

//@ signals (Exception e) false;    " + "  //@ also     " + "  //@ requires i > 0;    " // Line

//@ modifies k;    " + "  //@ ensures false;    " + "  //@ signals (Exception e) k == -10-i;    "

//@ signals_only Exception;    " + "  public int m(int i) {    " + "    if (i > 0) {    "

//@ code_bigint_math     " + "public class TestJava {     "

/*@ non_null*/
//@ requires false;    " + "  public static boolean bf(boolean bb) { return true; }    "

//@ requires true;    " + "  public static boolean bt(boolean bb) { return true; }    "

//@ static public invariant b;    "

//@ requires !b;    " + "  public static boolean bq(boolean bb) { return true; }    " + "


//@ ghost nullable Object oo;    " + "  //@ public static invariant bstatic;    "

//@ public invariant binstance;    " + "  //@ public initially binstance2;    "

//@ public constraint binstance2 == \\old(binstance2);    "

//@ public static constraint bstatic == \\old(bstatic);    "

/*@ non_null*/
//@ requires true;    " + "  //@ ensures \\result;    "

//@ requires false;    " + "  //@ ensures true;    " + "  public static int i(int ii) { return 0; }    "

//@ requires ii == 10;    " + "  //@ ensures true;    "

/*@ set oo = null;*/
//@ requires ii == 10;    " + "  //@ ensures true;    "


/*@ set oo = null;*/
//@ requires ii == 10;    " + "  //@ ensures true;    "

//@ requires ii == 10;    " + "  //@ ensures true;    "

//@ requires bb;    "

//@ ensures true;    "

/*@ assume b; */
/*@assert false;*/
//@ requires bb;    " + "  //@ ensures true;    "

/*@ assume b; */
/*@assert !bb;*/
//@ requires bb;    " + "  //@ ensures true;    "

/*@ assume bb; */
/*@assert b;*/
//@ requires bb;    "

//@ ensures true;    "

/*@assume z==1 ;*/
/*@ assert false; */
//@ requires bbb;    "

/*@assume true;*/
/*@assume !b;*/
/*@ assert !bb; */
//@ requires b;    "

/*@assume true;*/
/*@assume !b;*/
/*@ assert !bb; */
//@ requires bb;    "

//@ ensures true;    "

/*@assume 0==x ;*/
/*@ assert true; */
/*@ assume !bb; assume bb;*/
/*@assume bb; assume !bb; */
/*@assume bb; assume !bb; */
/*@assume bb; assume !bb; */
/*@ assume b; */
/*@ assume !b; */
/*@ assert k == 0; */
/*@ assert k != 0; */
/*@ assert i == 10; assert k == 16; */
/*@ assert k == 10; */
/*@ assert k == 11; */
/*@ assert k == 11; */
/*@ code_java_math*/
//@ static public constraint i > \\old(i);    "

//@ modifies i;    "

//@ ensures true;    "

/*@ code_bigint_math*/
//@ modifies i;    " + "  //@ ensures i == \\old(i)+2;    "

//@ modifies i;    "

//@ ensures i == \\old(i+1);    " + "  public static void bbad() { i = i - 1; }    " + "

/*@ code_java_math spec_java_math*/
//@ modifies i;    "

//@ ensures i == \\old(i)+2;    "

//@ modifies i;    "

//@ ensures i == \\old(i+1);    "

/*@ code_java_math spec_java_math*/
//@ modifies i;    "

//@ ensures i == \\old(i)+2;    "

/*@ assert i == i@x + 1 && i == (i+1)@x; */
//@ modifies i;    "

//@ ensures i == \\old(i+1);    "

/*@ assert i == i@x + 1; */
//@ modifies i;    "

/*@ assert i == this.i@x + 1; */
//@ requires a.length > 10 && a[0] >= 0;    "

//@ modifies i;    "

/*@ assert a[0]@x > -1; */
/*@ code_java_math spec_java_math*/
/*@ assert i <<< i || true; */
/*@ assert i <<<= i || true; */
//@ requires 0<=ii && ii <=3;    "

//@ ensures ii<=0 ==> \\result ==-ii;    "

//@ requires ii > -2147483648;    " // Not using

//@ ensures \\result == -ii;    "

/*@ assert i!=0; */
/*@ assert i==0; */
//@ requires ii == 10;    " + "  //@ ensures true;    "


//@ requires ii == 10;    "

//@ ensures true;    " + "  public @NonNull Object inst2(int ii) {  return null; }    " + "

//@ requires ii == 10;    " + "  //@ ensures true;    "

//@ requires ii == 10;    "

//@ ensures true;    " + "  public          Object inst2(int ii) {  return null; }    " + "

//@ requires ii == 10;    " + "  //@ ensures true;    "

//@ requires ii == 10;    " + "  //@ ensures true;    "

//@ requires ii == 10;    " + "  //@ ensures true;    "

//@ requires ii == 10;    "

//@ ensures true;    " + "  public          Object inst2(int ii) {  return null; }    " + "

/*@ non_null*/

/*@ non_null*/

/*@ non_null*/
/*@ non_null*/
//@ ensures \\result != null;    "


//@ ensures \\result != null;    "


//@ ensures \\result != null;    "

//@ ensures \\result != null;    "



//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ requires i>0;    " + "  //@ modifies j;    "

//@ ensures j == -i;    " + "  static public void m(int i) { j = -i; }    " + "  //@ requires i>1;     "

//@ modifies j;    " + "  //@ ensures \\result == -i;    "

//@ modifies j;    "

//@ ensures \\result == j;    " + "  public int instbad(boolean b, int i) { m(i); return j; }    "

//@ modifies j;    " + "  //@ ensures \\result == i;    "

//@ requires i>0;    "

//@ modifies j;    "

//@ ensures j == -i;    "

//@ requires i>1;     "

//@ modifies j;    "

//@ ensures \\result == -i;    "

//@ modifies j;    "

//@ ensures \\result == j;    "

//@ modifies j;    "

//@ ensures \\result == i;    "

/*@ code_bigint_math*/
//@ requires i>0;    "

//@ modifies j;    "

//@ ensures j == i+1 && \\result == j;    "

//@ requires i>1;     "

//@ modifies j;    "

//@ ensures \\result == \\old(i)+1;    "

//@ requires i>1;     "

//@ modifies j;    "

//@ ensures \\result == \\old(i)+3;    "

//@ requires i>1;     "

//@ modifies j;    "

//@ ensures \\result == 3*i+4;    "

//@ ensures j == i + 1;    "

//@ requires i>1;     "

//@ modifies j;    "

//@ ensures \\result == \\old(i);    "

//@ requires i>1;     "

//@ modifies j;    "

//@ ensures \\result == \\old(i)+4;    "

//@ requires i>1;     "

//@ modifies j;    " // Line 30

//@ ensures \\result == 3*i+4;    "

//@ ensures j == i + 2;    "

/*@ code_java_math*/
//@ assignable \    othing; ensures \\result == j;    "

//@ modifies j,sj;    "

//@ ensures \\result == \\old(j);    "

//@ modifies j,sj;    "

//@ ensures \\result == j;    "

//@ modifies j,sj;    "

//@ ensures \\result == sj;    "

//@ requires o!=null && p != null && o.j == 1 && p.j == 2 && j == 3;    "

//@ modifies j,sj,o.j,o.sj,p.j,p.sj;    "

//@ ensures \\result == 6;    "

//@ requires o!=null && p != null && o.j == 1 && p.j == 2 && j == 3 && o!=this && p!= this;    "

//@ modifies j,sj,o.j,o.sj,p.j,p.sj;    "

//@ ensures \\result == 6;    "

/*@ assert (\\lbl OJ o.j) + (\\lbl PJ p.j) + (\\lbl JJ j) == 6; */
//@ requires o!=null && p != null && o.j == 1 && p.j == 2 && j == 3;    "

//@ modifies j,sj,o.j,o.sj,p.j,p.sj;    "

//@ ensures \\result == 6;    "

//@ modifies j,sj;    " + "  //@ ensures \\result == 6;    "

//@ requires o!=null && p != null && sj == 3;    "

//@ modifies j,sj,o.j,o.sj,p.j,p.sj;    "

//@ ensures \\result == 9;    "

//@ assume a != null && a.length > 2 && a[0] == 1;    "

//@ loop_invariant (\\forall int k; 0<=k && k < \\count; b ==> a[k] > 0);    "

//@ assert b ==> a[1] > 0;    " + "  }    " + "}");

/*@ loop_invariant 0<=i && i<=5 && n==i; decreases 5-i; */
/*@ assert n == 5; */
/*@ loop_invariant 0<=i && i<=5 && n==i; decreases 3-i; */
/*@ assert n == 5; */
/*@ loop_invariant 0<=i && i<5 && n==i; decreases 5-i; */
/*@ assert n == 5; */
/*@ loop_invariant 0<=i && i<=5 && n==i-1; decreases 5-i; */
/*@ loop_invariant i>0; decreases i; */
/*@ reachable; */
/*@ loop_invariant i>=0; decreases i-2; */
/*@ assert i == 0; */
/*@ loop_invariant i>=0; decreases i; */
/*@ assert i == 0; */
/*@ code_java_math */
/*@ loop_invariant  i>0; decreases i; */
/*@ assert i == 0; */
/*@ code_bigint_math */
/*@ loop_invariant i>=0; decreases i-2; */
/*@ assert i == 0; */
/*@ code_bigint_math */
/*@ loop_invariant i>=0; decreases i; */
/*@ assert i == 0; */
/*@ code_bigint_math*/
/*@ loop_invariant i<=5 && i>=0; decreases i; */
/*@ assert i == 0; */
/*@ loop_invariant i<=5 && i>=0; decreases i-2; */
/*@ assert i == 0; */
/*@ loop_invariant i<=5 && i>=0; decreases i; */
/*@ assert i == 0; */
/*@ loop_invariant i<=5 && i>0; decreases i; */
/*@ assert i == 0; */
/*@ loop_invariant i>=0; decreases i; */
/*@ assert i == 0; */
/*@ loop_invariant i>=0; decreases i; */
/*@ assert i == 0; */
/*@ loop_invariant i>=0; decreases i; */
/*@ assert i == 0; */
/*@ assert i == 6; */
/*@ assert i == 5; */
/*@ assert i == 4; */
/*@ assert i == 5; */
/*@ assert i == 6; */
/*@ assert i == 5; */
/*@ assert i == 4; */
/*@ assert i == 5; */
/*@ assert j == 5; */
/*@ assert j == 6; */
/*@ assert j == 5; */
/*@ assert j == 4; */
/*@ assert j == 6; */
/*@ assert j == 5; */
/*@ assert j == 4; */
/*@ assert j == 5; */
/*@ assert i == 12; */
/*@ assert i == 5; */
/*@ assert i == 12 && i == j; */
/*@ assert i == 5; */
/*@ assert i == -2; */
/*@ assert i == 5; */
/*@ assert i == -2 && i == j; */
/*@ assert i == 5; */
/*@ assert i == 5*7; */
/*@ assert i == 5; */
/*@ assert i == 5*7 && i == j; */
/*@ assert i == 5; */
/*@ assert i == 5/7; */
/*@ assert i == 5; */
/*@ assert i == 5/7 && i == j; */
/*@ assert i == 5; */
//@ requires i > -2147483648;    "

/*@ assert j >= 0; */
//@ requires i > -2147483648;    "

/*@ assert j == -1; */
/*@ assume i > 0; */
/*@ assert (\\lblpos ISP i>0); */
/*@ assume i > 0; */
/*@ assert (\\lblneg ISN i<0); */
/*@ assume i > 0; */
/*@ assert !(\\lblneg ISN2 i>0); */
/*@ assume i > 0; */
/*@ assert (\\lblpos ISP i<0); */
/*@ assume i > 0; */
/*@ assert !(\\lblpos ISP2 i>0); */
/*@ assert o != oo;*/
/*@ assert o == oo;*/
/*@ assert o != null;*/
/*@ assert o == null;*/
/*@ assert o != oo;*/
/*@ assert o == oo;*/
/*@ assert o != null; assert o.length == 5; */
/*@ assert o.length == 6;*/
/*@non_null*/
/*@ assert a.length >= 0;*/
/*@ assert o != oo;*/
/*@ assert o == oo;*/
/*@ assert o.length == 3; assert o[1] == 11;*/
/*@ assert o.length == 4; */
/*@ assert o.length == 3; assert o[1] == 10;*/
/*@ assert o != null; assert o.length == 3; assert o[1] == 11;*/
/*@ assert o.length == 3; assert o[1] != null; assert o[1].length == 3; assert o[1][2] == 14; assert o[0] != null; assert o[0].length == 2; assert o[0][1] == 11; */
/*@ assert o.length == 3; assert o[1] != null; assert o[1].length == 3; assert o[1][2] == 14; assert o[0] != null; assert o[0].length == 2; assert o[0][1] == 11; */
/*@ assert o.length == 3; assert o[1] == null; assert o[2] != null; assert o[2].length == 1; assert o[2][0] == 15; */
/*@ assert oo[0] != oo[1]; */
/*@ assert o != oo;*/
/*@ assert o == oo;*/
/*@ assert o.length == 5; assert o[1].length == 3; */
/*@ assert o.length == 6;*/
/*@ assert o[1].length == 4;*/
/*@non_null*/
/*@ assert a.length >= 0;*/
/*@ assert o.length == 3; */
/*@ assert o.length == 2; */
/*@ assert o[1][2] == 14; */
/*@ assert o[2].length == 1; */
/*@ assert o[0].length == 2; */
/*@ assert o != null; assert o.length == 5; assert o[1] == null; */
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assume a[1] == 2; */
/*@ assert a[1] == 2; */
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assume a[1] == 2; */
/*@ assert a[1] == 3; */
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assume a[1] == 2; */
/*@ assert a[1] == 3; */
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assume a[1] == 2; */
/*@ assert a[1] == 4; */
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assume a[0] == 2; */
/*@ assert a[0] == 2; */
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assume a[0] == 2; */
/*@ assert a[0] == 4; */
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assume a[1] == 2; */
/*@ assert a[1] == 3; */
/*@ assert a[1] == 4; */
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assume a[1] == 2; */
/*@ assert a[1] == 3; */
/*@ assert a[1] == 5; */
/*@non_null*/
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assert a[0] == b[0]; */
/*@non_null*/
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assert a[0] != b[0]; */
/*@non_null*/
/*@non_null*/
/*@ assume b.length == 10 && a.length == 10;*/
/*@ assert b[0] == 7; */
/*@non_null*/
/*@non_null*/
/*@ assume b.length == 10 && a.length == 10;*/
/*@ assert b[0] == 8; */
/*@non_null*/
/*@non_null*/
/*@ assume b.length == 10 && a.length == 12;*/
/*@ assert b != null; assert a != null; assert b.length == 12; assert a.length == 12; */
/*@non_null*/
/*@assume a.length == 10; assume a[1] != null; assume a[1].length == 5; */
/*@ assume a[1][2]; */
/*@ assert a[1][2]; */
/*@non_null*/
/*@assume a.length == 10; assume a[1] != null; assume a[1].length == 5; */
/*@ assume a[1][2]; */
/*@ assert !a[1][2]; */
/*@non_null*/
/*@assume a.length == 10; assume a[1] != null; assume a[1].length == 5; */
/*@ assume a[1][2]; */
/*@ assert !a[1][2]; */
/*@non_null*/
/*@assume a.length == 10; assume a[1] != null; assume a[1].length == 5; */
/*@ assume a[1][2]; */
/*@ assert a[1][3]; */
/*@non_null*/
/*@assume a.length == 10; assume a[1] != null; assume a[1].length == 5; */
/*@ assume a[1][2]; */
/*@ assert a[0][2]; */
/*@non_null*/
/*@assume a.length == 10; assume a[1] != null; assume a[1].length == 5; */
/*@ assume a[1][2]; assume a[0] != null; */
/*@ assert a[0][2]; */
/*@non_null*/
/*@assume a.length == 10; assume a[1] != null; assume a[1].length == 5; */
/*@ assume a[1][2]; assume a[0] != null; assume a[0].length > 5; */
/*@ assert a[0][2]; */
/*@non_null*/
/*@assume a.length == 10; assume a[1] != null; assume a[0] != null; assume a[1].length == 5; assume a[0].length == 3; */
/*@ assume a[0][0]; */
/*@ assert a[0][0]; */
/*@non_null*/
/*@assume a.length == 10; assume a[1] != null; assume a[0] != null; assume a[1].length == 5; assume a[0].length == 3; */
/*@ assume a[0][0]; */
/*@ assert !a[0][0]; */
/*@non_null*/
/*@assume a.length == 10; assume a[1] != null; assume a[1].length == 5; */
/*@ assert a[0][3] == a[1][3]; */
/*@non_null*/
/*@assume a.length == 10; assume a[1] != null; assume a[1].length == 5; */
/*@ assert a[0][3] != a[1][3]; ; */
/*@non_null*/
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assert a[0] == b[0]; */
/*@non_null*/
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assert a[0] != b[0]; */
/*@non_null*/
/*@non_null*/
/*@ assume b.length == 10 && a.length == 10 && b[0] != null && a[0] != null && b[0].length == 5 && a[0].length==6;*/
/*@ assert !b[0][0]; */
/*@non_null*/
/*@non_null*/
/*@ assume b.length == 10 && a.length == 10 && b[0] != null && a[0] != null && b[0].length == 5 && a[0].length==6;*/
/*@ assert b[0][0]; */
/*@non_null*/
/*@non_null*/
/*@ assume b.length == 10 && a.length == 12;*/
/*@ assert b != null; assert a != null; assert b.length == 12; assert a.length == 12; */
/*@ nullable_by_default */
//@ public static invariant t != null;     "

/*@non_null*/
/*@ assume t.f == 2; */
/*@ assert t.f == 2; */
/*@non_null*/
/*@ assume t.f == 2; */
/*@ assert t.f == 3; */
/*@non_null*/
/*@ assume t.f == 2; */
/*@ assert t.f == 3; */
/*@non_null*/
/*@ assume t.f == 2; */
/*@ assert t.f == 4; */
/*@non_null*/
/*@ assume t.g == 2; */
/*@ assert t.g == 2; */
/*@non_null*/
/*@ assume t.g == 2; */
/*@ assert t.g == 4; */
/*@non_null*/
/*@ assume t.f == 2; */
/*@ assert t.f == 3; */
/*@ assert t.f == 4; */
/*@non_null*/
/*@ assume t.f == 2; */
/*@ assert t.f == 3; */
/*@ assert t.f == 5; */
/*@non_null*/
/*@non_null*/
/*@ assert a.f == b.f; */
/*@non_null*/
/*@non_null*/
/*@ assert a.f != b.f; */
/*@non_null*/
/*@non_null*/
/*@ assert b.f == 7; */
/*@non_null*/
/*@non_null*/
/*@ assert b.f == 8; */
/*@non_null*/
/*@non_null*/
/*@ assert a.sf == b.sf; */
/*@non_null*/
/*@non_null*/
/*@ assert a.sf != b.sf; */
/*@non_null*/
/*@non_null*/
/*@ assert 3 == b.sf; */
/*@non_null*/
/*@non_null*/
/*@ assert 3 != b.sf; */
/*@non_null*/
/*@ assert f == this.f; */
/*@ assert a == this ==> a.f == f; */
/*@non_null*/
/*@ assert f == this.f; */
/*@ assert a.f == f; */
/*@non_null*/
/*@ assert sf == this.sf; */
/*@ assert a.sf == sf; */
/*@ assume i>=-1 && i <=1; */
/*@ assert j!=0; */
/*@ assume i>=-1 && i <=1; */
/*@ assert j==1; */
/*@ assume i>=-1 && i <=1; */
/*@ assert j>0; */
/*@ assume i>=-1 && i <=1; */
/*@ assert i==0 ==> j==-1; */
/*@ assume i>=-1 && i <=1; */
/*@ assert j>=0; */
/*@ assume i>=-1 && i <=1; */
/*@ assert j>0; */
/*@ assume i>=-1 && i <=1; */
/*@ assert j>=0; */
//@ ensures i == 2;    "

//@ ensures i == 1;    "

//@ public exceptional_behavior requires b;  signals (Exception e) true; signals (RuntimeException e) true;    "

//@ also    " + "//@ public normal_behavior requires !b; ensures true;    "

//@ requires k < 0;    " + "//@ ensures true;    " + "//@ also    " + "//@ requires k > 0;    "

//@ ensures \\result == 1;    " + "public int m1() {    " + "    int i = 1;    " + "    try {    "

//@ assert e != null;    " + "        i = 2;    " + "    }    "

//@ requires k < 0;    " + "//@ ensures true;    " + "//@ also    " // Line

//@ requires k > 0;    " + "//@ ensures \\result == 1;    " + "public int m2() {    " + "    int i = 1;    "

//@ assert e != null;    " + "        i = 1;    " // Line

//@ requires i > 0;    " + "  //@ ensures i > 0;    "

/*@ assert a*2 == a + a; */
/*@ assert a * b ==
                // a *(b-1) + a; */
/*@ assert (2*a)/2 == a; */
/*@ assert a >= 0 ==> (a%3) < 3; */
/*@ assert a >= 0 ==> (a%3) >= 0; */
/*@ assert (a >= 0
                // && b > 0) ==> (a%b) >= 0; */
/*@ assert (a >= 0
                // && b > 0) ==> ((a*b)%b) == 0; */
/*@ assert (a >= 0 ) ==> ((5*a)%5) == 0; */
//@ requires i < 1000; ensures \\result == i+1;    "

//@ pure     "

/*@ assume a < 100; */
/*@ assert k == m(a); */
/*@ assume a < 100; */
/*@ assert k == m(a); */
/*@ assume a < 100; */
/*@ assert k == m(a) + m(a); */
/*@ assume a < 100; */
/*@ assert k == 1 + m(a) + m(a); */
/*@ assume a < 100; */
/*@ assert k == m(m(a+1)); */
/*@ assume a < 100; */
/*@ assert k == m(m(a+1)); */
//@ requires i < 1000; ensures \\result == i+1;    "

//@ pure     "

/*@ assume a < 100; */
/*@ assert k == m(a); */
/*@ assume a < 100; */
/*@ assert k == m(a); */
/*@ assume a < 100; */
/*@ assert k == m(a) + m(a); */
/*@ assume a < 100; */
/*@ assert k == 1 + m(a) + m(a); */
/*@ assume a < 100; */
/*@ assert k == m(m(a+1)); */
/*@ assume a < 100; */
/*@ assert k == m(m(a+1)); */
/*@ code_bigint_math*/
//@ ensures \\result == z+1;    " + "  //@ pure     "

/*@ assert k == m(); */
/*@ assert k == m(); */
/*@ assert k == m() + m(); */
/*@ assert k == 1 + m() + m(); */
/*@ assert k == m(); */
/*@ assert k == m(); */
/*@ code_bigint_math*/
//@ ensures \\result == z+1;    "

//@ pure     "

/*@ assert k == m(); */
/*@ assert k == m(); */
/*@ assert k == m() + m(); */
/*@ assert k == 1 + m() + m(); */
//@ ensures \\result > 0;    "

//@ also    "

//@ ensures \\result > ii;    "

/*@ code_bigint_math*/
//@ also public normal_behavior    "

//@ ensures \\result == i+1;    "

//@ pure    "

//@ requires a >= 0;    "

//@ ensures \\result == a+1;    "

//@ requires iii > 0;    " + "  //@ ensures \\result > 0;    " + "  abstract public int m(int iii);    "

//@ also    "

//@ ensures \\result > ii;    " + "  abstract public int m(int ii);    " + "}    "

/*@ code_bigint_math*/
//@ also    "

//@ ensures \\result == i+1;    " + "  //@ pure    " + "  public int m(int i) { return i+1; }    "

//@ ensures \\result == a+1;    " + "  public int n1(int a) { return m(a); }    "

//@ requires iii > 0;    " + "  //@ ensures \\result > 0;    " + "  abstract public int m(int iii);    "

//@ also    "

//@ requires ii > 0;    " + "  //@ ensures \\result > ii;    " + "  abstract public int m(int ii);    "

/*@ code_bigint_math*/
//@ also    "

//@ requires i > 0;    " + "  //@ ensures \\result == i+1;    " + "  //@ pure    "

//@ requires iii == 1;    "

//@ ensures \\result == iii;    "

//@ also    "

//@ requires ii == 2;    "

//@ ensures \\result == ii;    "

/*@ code_bigint_math*/
//@ also    "

//@ requires i == 3;    "

//@ ensures \\result == i;    "

//@ pure    "

//@ requires a >= 1 && a <= 3;    "

//@ ensures \\result == a;    "

//@ ensures \\result == a;    "

//@ requires 0<=ii && ii <=3;    "

//@ ensures \\result < 0;    " + "  public static int m(int ii) {     "

//@ requires ii == 2;    " + "  //@ ensures \\result == 0;    "

//@ ensures is == 6;    "

//@ ensures \\result == 1;    " + "  public static int m4(int ii) {     " + "    try { ii = 0;     "

//@ assert c == 1;     " + "    return c;     " + "  }    " + "

//@ ghost int d = c+1;    " + "    //@ assert d + c == 9;     " + "    return c;     "

//@ ghost int d = c+1;    " + "    //@ assert d + c == 10;     " + "    return c;     "

//@ ghost int d = c+1;    " + "    //@ set d = 10;    " + "    //@ assert d + c == 14;     "

//@ ghost int d = c+1;    " + "    //@ set d = 10;    " + "    //@ assert d + c == 15;     "

//@ ghost int d = c+1;    " + "    //@ debug d = 10;    " + "    //@ assert d + c == 14;     "

//@ ghost int d = c+1;    " + "    //@ debug d = 10;    " + "    //@ assert d + c == 15;     "

/*@ nullable_by_default */
/*@non_null*/
//@ requires o != null;    "

//@ public normal_behavior  ensures \\result == (oo != null);    "

/*@ nullable_by_default */
/*@non_null*/
//@ requires o != null;    " + "  public static void m2(TestJava o) {     " + "    int i = o.z();     "

//@ public normal_behavior  ensures \\result == (oo != null);    "

//@ signals_only \    othing;      public int z() { return 0; }    " + "

/*@non_null*/
//@ requires o != null;    " + "  public static void m2(TestJava o) {     " + "    int i = o.z();     "

//@ public normal_behavior  ensures \\result == (oo != null);    "

//@ signals_only \    othing;      public static int z() { return 0; }    " + "}");

/*@ nullable_by_default */
/*@ code_java_math spec_java_math*/
//@ requires a != null;    "

//@ requires a != null;    "

//@ assume a.length == 1;     "

/*@ non_null*/
/*@ non_null*/
/*@ nullable_by_default */
//@ assume o.j == 1;     " + "  }    "

/*@non_null*/
//@ assume o.j == 1;     " + "  }    "

//@ requires o != null;    " + "  public static void m2(TestJava o) {     "

//@ assume o.j == 1;     " + "  }    " + "  public static void m3(TestJava o) {     "

//@ assume o != null && o.j == 1;     " + "  }    " + "  public static void m4(TestJava o) {     "

//@ assume o == null || o.j == 1;     " + "  }    " + "  public static void m5(TestJava o) {     "

//@ assume o != null ==> o.j == 1;     " + "  }    " + "

/*@ nullable_by_default */
//@ assume o.j == 1;     " + "  }      "

//@ assume a[0] == 1;     " + "  }    "

//@ requires a != null;    " + "  public static void m2(int[] a) {     "

//@ assume a[-1] == 1;     " + "  }    " + "  //@ requires a != null;    "

//@ assume a.length == 1;     "

//@ assume a[1] == 1;     " + "  }    " + "  public static void m4(int i, int j) {     "

//@ assume i/j == 4;     " + "  }    " + "  public static void m5(int i, int j) {     "

//@ assume i%j == 4;     " + "  }    " + "  public static void m6(RuntimeException r) {     "

//@ assume ((Exception)t) != null ? true : true;     " // OK

//@ assume ((RuntimeException)t) != null ? true : true ;     " + "  }    "

/*@ non_null*/
//@ assume ((Exception)t) != null ? true : true;     " + "  }    "

/*@ non_null*/
//@ assume ((RuntimeException)t) != null ? true : true ;     " + "  }    " + "

/*@ nullable_by_default */
//@ assume o.j == 1;     "

//@ assert o.j == 1 ? true : true;     "

//@ ghost int i = o.j;     "

//@ ghost int i; debug i = o.j;     "

//@ requires o.j == 1;    "

//@ ensures t.j == 1 ? true : true;    "

//@ ghost int i; set i = o.j;     "

/*@ nullable_by_default */
//@ assume o.j == 1;     "

/*@ nullable_by_default */
//@ public invariant t.j ==1 ? true: true;    " + "

/*@ nullable_by_default */
//@ public initially t.j ? true : true;    " + "

/*@ nullable_by_default */
//@ public constraint t.j ==1 ? true: true;    " + "

/*@ nullable_by_default */
//@ assert i == 1;    "

//@ assert i == 2;    "

//@ assert i == 2;    " + "  }    " + "  public void mp() {    "

//@ assert i == 2 && j == 3;    " + "  }    " + "  public void ma() {    " + "    int i = 0;    "

//@ assert i == 1;    " + "  }    " + "  public void m1(int k) {    "

//@ assume k == 0;     " + "    try {    " + "      try {    "

//@ assert i == 2 && j == 50;    "

//@ assume k == 0;     " + "    try {    " + "    try {    " + "      try {    "

//@ assert i == 2 && j == 50;    " + "    }    "

//@ assert i == 0;    " + "  }    "

//@ assert i == 0;    "

//@ public normal_behavior     "

//@   requires i != 1 & i != 2;    "

//@   ensures \\result == 0;    "

//@ also public exceptional_behavior     "

//@   requires i == 2 && ee != null;     "

//@   signals (ArrayIndexOutOfBoundsException ex) true;     "

_by_default     "

//@ public normal_behavior     "

//@   requires i != 1 & i != 2;    "

//@   ensures \\result == 0;    "

//@ also public exceptional_behavior     "

//@   requires i == 2;     "

//@   signals (ArrayIndexOutOfBoundsException ex) true;     "

//@ public normal_behavior     "

//@   requires e != null & ee != null & ae != null;    "

//@   requires i != 1 & i != 2;    "

//@   ensures \\result == 0;    "

//@ also public exceptional_behavior     "

//@   requires e != null & ee != null & ae != null;    "

//@   requires i == 2;     "

//@   signals (ArrayIndexOutOfBoundsException ex) true;     "

/*@non_null*/
//@ assume \\typeof(o) == \\type(Object);    "

//@ assert \\typeof(o) == \\typeof(o);    "

//@ assert \\typeof(o) == \\type(Object);    "

//@ assert \\typeof(o) <: \\type(Object);    "

//@ assert \\typeof(o) <:= \\type(Object);    "

/*@non_null*/
//@ assume \\typeof(o) == \\type(Object);    "

//@ assert \\typeof(o) != \\type(Object);    "

/*@non_null*/
//@ assume \\typeof(o) == \\type(Object);    "

//@ assert \\typeof(o) == \\type(Object);    "

/*@non_null*/
//@ assume \\typeof(o) == \\type(Object);    "

//@ assert \\typeof(o) == \\type(TestJava);    "

/*@non_null*/
//@ assume \\typeof(o) == \\type(Object);    "

//@ assert \\type(TestJava) <: \\typeof(o);    "

//@ assert \\type(TestJava) <:= \\typeof(o);    "

/*@non_null*/
//@ assume \\typeof(o) == \\type(TestJava);    "

//@ assert \\typeof(o) <: \\type(Object);    " + "  }    "

/*@non_null*/
//@ assert \\typeof(o) <: \\type(Object);    " + "  }    " + "}");

/*@non_null*/
//@ assert JML.erasure(\\typeof(o)) == o.getClass();    "

//@ requires i >= 0;    " + "  //@ ensures i>0;    " + "  //@ signals (Exception e) i == 0;    "

//@ requires i >= 0;    " + "  //@ ensures i>0;    " + "  //@ signals (Exception e) i == 1;    " // FAILS

//@ requires i >= 0;    " + "  //@ ensures i>0;    " + "  //@ signals (Exception e) i == 0;    " // OK

//@ requires i >= 0;    " + "  //@ ensures i>0;    " + "  //@ signals (RuntimeException e) i == 1;    " // FAILS

//@ requires i >= 0;    " + "  //@ ensures i>0;    " + "  //@ signals (Exception e) i == 0;    "

//@ requires i >= 0;    "

//@ ensures i>0;    " + "  //@ signals (Exception e) i == 1;    " // FAILS

//@ requires i >= 0;    " + "  //@ ensures i>0;    " + "  //@ signals (RuntimeException e) i == 1;    " // OK

//@ signals_only java.io.IOException;    " // FAILS

//@ signals_only \    othing;    " // FAILS

//@ signals_only Exception;    " // OK

//@ public constraint i > \\old(i) for m1();    " + "  public void m1() {    " + "  }    "

//@ public constraint i > \\old(i) for ! m1();    " + "  public void m1() {    " + "  }    "

//@ public constraint i > \\old(i) for \\everything;    " + "  public void m1() {    "

//@ public constraint i > \\old(i) for !\    othing;    " + "  public void m1() {    " + "  }    "

//@ public constraint i > \\old(i) for \    othing;    " + "  public void m1() {    " + "  }    "

//@ public constraint i > \\old(i) for !\\everything;    " + "  public void m1() {    "

//@ public constraint i > \\old(i);    " + "  public void m1() {    " + "  }    "

//@ public constraint i > \\old(i) for m1(), m1(int);    " + "  public void m1() {    "

//@ public constraint i > \\old(i) for m1(), m1(int);    " + "  public static void m1() {    "

//@ public constraint i > \\old(i) for ! m1(), m1(int);    " + "  public void m1() {    "

//@ public constraint i > \\old(i) for TestJava();    " + "  public TestJava() {    " + "  }    " + "

//@ public constraint i > \\old(i);    " + "  public TestJava() {    " + "  }    " + "}");

//@ public static constraint i > \\old(i) for TestJava();    " + "  public TestJava() {    "

//@ public static constraint i > \\old(i);    " + "  public TestJava() {    " + "  }    " + "

//@ ghost static public int i = 0;    "

//@ public static constraint i > \\old(i);    " + "}    "

//@ ghost static public int i = 0;    "

//@ public constraint i > \\old(i);    " + "}    " + "public class TestJava implements A {     "

//@ normal_behavior     "

//@ ensures \\result == (i > 0 && i < 10);    "

//@ pure    "

//@ model public boolean m(int i);    "

//@ assert (\\forall int k; 3<k && k <7; m(k));    "

//@ assert (\\forall int k; 3<k && k <7; m(k-1));    "

//@ assert !(\\forall int k; -3<k && k <7; m(k));    "

//@ normal_behavior     "

//@ ensures \\result == (i > 0 && i < 10);    "

//@ pure function    "

//@ model public static boolean m(int i);    "

//@ pure    "

//@ assert !(\\forall int k; 3<k && k <11; m(k));    "

//@ normal_behavior     "

//@ ensures \\result == (i > 0 && i < 10);    "

//@ pure    "

//@ model public boolean m(int i);    "

//@ pure    "

//@ assert !(\\forall int k; 3<k && k <11; m(k));    "

/*@ spec_public */
//@ assignable \\everything;     "


/*@ spec_public */
//@ assignable \\everything;     "


/*@ spec_public */
/*@ spec_public */
//@ assignable \\everything;     "


//@ assert array.length >= 0;     "

//@ assert array.length <= Integer.MAX_VALUE;     "

//@ requires k >= 0;    "

//@ assert array.length >= 0;     "

//@ assert array.length <= Integer.MAX_VALUE;     "

//@ assert array.length == k;     "

//@ assert array.length >= 0;     "

//@ assert array.length <= Integer.MAX_VALUE;     "

//@ assert array.length >= 0;     "

//@ assert array.length <= Integer.MAX_VALUE;     "

//@ requires (\\forall int i; 0 <= i && i < args.length; args[i] >= 0);    "

//@ requires (\\forall int i; 0 <= i && i < args.length; args[i] >= 0); requires n == -2;    "

//@ requires (\\forall int i; 0 <= i && i < args.length; args[i] >= 0);    "

//@ requires (\\forall int i; 0 <= i && i < args.length; args[i] >= 0);"

//@ assert (\\lbl I i) + \\lbl(J j) == 0;     "

//@ assert (\\lbl I i) + \\lbl(J,j) == 0;     "

//@ nullable_by_default     "

/*@ requires o != null;     "
                        + "      ensures \\result == (j>=0);     "
                        + "     pure function */
//@ signals (NullPointerException e) positive(null,j);     "

//@ signals (NegativeArraySizeException e) positive(null,j);     "

//@ ensures j >= 0;     "

//@ ensures ii == 19; static_initializer "

//@ public final invariant ii == 19;     "

//@ public normal_behavior ensures \\result == 10 + 9; pure    "

//@ public normal_behavior ensures \\result == 19; pure    "

//@ ensures ii == 19 && jj == 21; static_initializer "

//@ public final invariant ii == 19;     "

//@ public normal_behavior ensures \\result == 10 + 9; pure    "

//@ public normal_behavior ensures \\result == 21; pure    "

//@ ensures ii == mm(); static_initializer "

//@ public final invariant ii == 19;     "

//@ public normal_behavior ensures \\result == 10 + 9; pure    "

//@ public normal_behavior ensures \\result == 19; pure    "

//@ public final invariant ii == 19;     "

//@ public normal_behavior ensures \\result == 10 + 9; pure    "

/*@ spec_public */
//@ public normal_behavior     "

//@   ensures num == 10;     "

//@   ensures A.bit == 1;     "

//@   ensures B.bit == 2;     "

//@ static_initializer     "

/*@ spec_public */
/*@ spec_public */
//@ public normal_behavior     "

//@   ensures num == 10;     "

//@   ensures A.bit == 1;     "

//@   ensures B.bit == 2;     "

//@ static_initializer     "

//@ public normal_behavior     "

//@   requires \    onnullelements(arr);     "

//@ public normal_behavior     "

//@   requires true;     "

//@ show i, j+1;    "

//@ show k;    "

//@ assert k > 0;    "

//@ show m,k;    "

//@ assert m > 0;    "

//@ public normal_behavior     "

//@   requires true;     "

//@ show i;    "

//@ public normal_behavior     "

//@   requires true;     "

//@ show i;    "

//@ show     "

//@ show i i;    "

//@ show;    "

//@ show i    "

//@ show %;    "

//@ public normal_behavior     "

//@   requires k != null && \    onnullelements(k) && \\elemtype(\\typeof(k)) <: \\type(Key);     "

//@ assert kk != null;    "

//@ assert \    onnullelements(kk);    "

//@ assert \\elemtype(\\typeof(kk)) == \\type(Key);    "

//@ public normal_behavior     "

//@   requires k != null && \    onnullelements(k) && \\elemtype(\\typeof(k)) <: \\type(Key);     "

//@ assert kk != null;    "

//@ assert \    onnullelements(kk);    "

//@ assert \\elemtype(\\typeof(kk)) == \\type(Key);    "

//@ ghost int k = 1;    "

//@ ghost int k = 2;    "

//@ ghost int i = 2;    "

//@ assert 0 <= i < 10 < 12;    "

//@ set i = 10;    "

//@ assert !(0 <= i < 10);    "

//@ assert 0 <= i < 11 == 2 <= i <= 12;    "

//@ assert 11 >= i+1 > 1 == 12 >= i > 2;    "

//@ assert 11 >= i+1 < 12;    "

//@ assert 11 >= i+1 < 12 == true;    "

//@ assert 11 >= i+1 > 1 != 12 <= i <= 22;    "

//@ signals_only \    othing;    "


//@ allow NullPointerException;     "


//@ forbid NullPointerException;     "



//@ ignore NullPointerException;     "



//@ ignore java.lang.XX;     "


//@ allow NullPointerException;     "

//@ forbid NullPointerException;     "

//@ forbid X;     "

//@ forbid ;     "

//@ forbid NullPointerException     "

//@ forbid NullPointerException, ArrayIndexOutOfBoundsException;     "

//@ forbid NullPointerException ArrayIndexOutOfBoundsException;     "

//@ forbid NullPointerException; allow NullPointerException     "

//@ ignore NullPointerException; allow NullPointerException     "

//@ ignore NullPointerException; forbid NullPointerException     "

//@ forbid java.lang.NullPointerException     "

//@ forbid java.lang.     "

/*@ pure */
//@ assert \\count >= 0;    " // OK

//@ assert \\count < a.length;    " // OK

//@ assert \\count >= 1;    " // BAD

//@ ghost int i = \\count;    " // OK

//@ assert \\count >= 0;    " // OK

//@ assert \\count < 2;    " // OK

//@ assert \\count == i;    " // OK

//@ ghost int i = \\count;    " + "      for (long kk: b) {    "

//@ assert \\count == i;    " // BAD

//@ loop_invariant \\count >= 0 && \\count <= a.length;    " // OK

//@ decreases a.length - \\count;    " // OK

//@ loop_invariant \\count >= 0 && \\count <= a.length;    " // OK

//@ loop_decreases a.length - \\count;    " // OK

//@ decreases a.length - \\count -1;    " // 0 on last

//@ decreases a.length - \\count -2;    " // BAD - last time through

//@ decreases \\count+10;    " // BAD - loop does not decrease variant

//@ loop_invariant \\count > 0 && \\count <= a.length;    " // BAD - first time through loop

//@ loop_invariant \\count >= 0 && \\count < a.length;    " // BAD - laswt time through loop

//@ assert \\count >= 0;    " // OK

//@ assert \\count < a.length;    " // OK

//@ ghost int i = \\count;    " // OK

//@ assert \\count >= 0;    " // OK

//@ assert \\count < 2;    " // OK

//@ assert \\count == i;    " // OK

//@ reachable;    " // knows that the loop is not

//@ loop_invariant \\values.size() == \\count;    " + "    for (Integer k: a) {    " + "    }    "

//@ loop_invariant \\values.size() == \\count;    " + "    for (Integer k: a) {    "

//@ assert \\values.size() == \\count;    " + "    }    " + "  }    "

//@ assert \\values.size() == \\count;    " + "    }    " + "  }    "

//@ assert \\count >= 1;    " // BAD

//@ public normal_behavior  ensures true;    " + "  public void m2() {    "

//@ assume a != null;     "

//@ assume it != null;     "

//@ public normal_behavior  ensures true;    " + "  public void m2bad() {    "

//@ assume a != null;     "

//@ assume it != null;     "

//@ public normal_behavior  ensures true;    "

//@ public normal_behavior  ensures true;    "

//@ assume values != null; set values.containsNull = true;     "

//@ assert values.content.owner == values;    "

//@ assume a != null;     "

//@ assume values.content.owner == values;    "

//@ assume it != null;     "

//@ assume values.content.owner == values;    "

//@ assert values.content.owner == values;    "

//@ ghost List<Map.Entry<String,String>> v = values;    "

//@ loop_invariant values == v && values.content.owner == values;     "

//@ assume k != null && \\typeof(k) <: \\type(Map.Entry<String,String>);     "

//@ public normal_behavior  ensures true;    "

//@ assume values != null; set values.containsNull = true;     "

//@ assert values.content.owner == values;    "

//@ assume a != null;     "

//@ assume values.content.owner == values;    "

//@ assume it != null;     "

//@ assume values.content.owner == values;    "

//@ assert values.content.owner == values;    "

//@ ghost List<Map.Entry<String,String>> v = values;    "

//@ assert values.content.owner == values;    "

//@ assume k != null &&  \\typeof(k) <: \\type(Map.Entry<String,String>);     "

//@ assert values.content.owner == values;    "

//@ public normal_behavior  ensures true;    "

//@ set values.containsNull = true;     "

//@ public normal_behavior  ensures true;    "

//@ set values.containsNull = true;     "

//@ ghost int i = \\count;    " // Out of scope

//@ ghost int i = \\count;    " // Out of scope

//@ set \\count = 6;    " // Syntax error

//@ ghost org.jmlspecs.lang.JMLList i = \\values;    " // Out

//@ ghost org.jmlspecs.lang.JMLList i = \\values;    " // Out

//@ set \\values = null;    " // Syntax error

//@ ghost org.jmlspecs.lang.JMLList i = \\values;    " // OK

//@ modifies \\everything;    "

//@ assume \    onnullelements(a);    "

//@ assume a.length > 1;    "

//@ assert a[0] != null;    " // OK

//@ modifies \\everything;    "

//@ assume \    onnullelements(a);    "

//@ assert a != null;    " // OK

//@ modifies \\everything;    "


//@ assume \    onnullelements(a);    "

//@ assert a == null;    " // BAD

//@ modifies \\everything;    "

//@ assume a != null && a.length > 1;    "

//@ assert a[0] != null;    " // BAD

//@ modifies \\everything;    "

//@ assume a != null && a.length == 0;    "

//@ assert \    onnullelements(a);    " // OK

//@ modifies \\everything;    "

//@ assume a != null && a.length == 0;    "

//@ assert (\\forall int i; 0<=i && i<a.length; a[i] != null);    " // OK

//@ requires \\elemtype(\\typeof(a)) == \\type(Object); modifies \\everything;    "

//@ assume a != null && a.length == 1;    "

//@ assert \    onnullelements(a);    " // OK

//@ modifies \\everything;    "

//@ assume a != null && a.length == 1;    "

//@ assume a[0] != null;    "

//@ assert \    onnullelements(a);    " // OK

//@ requires \\elemtype(\\typeof(a)) == \\type(Object); modifies \\everything;    "

//@ assume a != null && a.length == 2;    "

//@ assert \    onnullelements(a);    " // OK

//@ modifies \\everything;    "

//@ assume a != null && a.length == 2;    "

//@ assume a[0] != null;    "

//@ assume a[1] != null;    "

//@ assert \    onnullelements(a);    " // OK

//@ requires \\elemtype(\\typeof(a)) == \\type(Object); modifies \\everything;    "

//@ assume a != null && a.length == 3;    "

//@ assert \    onnullelements(a);    " // BAD

//@ requires \\elemtype(\\typeof(a)) == \\type(Object); modifies \\everything;    "

//@ assume \    onnullelements(a) && a.length == 3;    "

//@ assert \    onnullelements(a);    " // OK

//@ modifies \\everything;    "

//@ assume a != null && a.length == 3;    "

//@ assert \    onnullelements(a);    " // BAD

//@ requires i == 5;    " + "  //@ modifies \\everything;    " + "  public void m1(int i) {    "

//@ assert \    ot_modified(i);    " // OK

//@ modifies \\everything;    " + "  public void m1a(int i) {    " + "    i = 5;    "

//@ assert \    ot_modified(i);    " // BAD

//@ ghost public int gi;    "

//@ requires i == 5;    " + "  //@ modifies \\everything;    " + "  public void m2() {    "

//@ assert \    ot_modified(i);    " // OK

//@ modifies \\everything;    " + "  public void m2a() {    " + "    i = 5;    "

//@ assert \    ot_modified(i);    " // BAD

//@ requires si == 5;    " + "  //@ modifies \\everything;    " + "  public void m3() {    "

//@ assert \    ot_modified(si);    " // OK

//@ modifies \\everything;    " + "  public void m3a() {    " + "    si = 5;    "

//@ assert \    ot_modified(si);    " // BAD

//@ requires gi == 5;    " + "  //@ modifies \\everything;    " + "  public void m4() {    "

//@ set gi = 5;    " + "    //@ assert \    ot_modified(gi);    " // OK

//@ modifies \\everything;    " + "  public void m4a() {    " + "    //@ set gi = 5;    "

//@ assert \    ot_modified(gi);    " // BAD


//@ requires t != null;    "

//@ modifies \\everything;    "

//@ assert \    ot_modified(t.i);    " // OK

//@ requires t != null;    "

//@ modifies \\everything;    "

//@ assert \    ot_modified(t.i) ? true: true;    " // BAD

//@ requires t == null;    "

//@ modifies \\everything;    "

//@ assert \    ot_modified(t.i) ? true: true;    " // OK

//@ modifies \\everything;    "

//@ assert \    ot_modified(t.i) ? true: true;    " // BAD

//@ requires p != null && p != this;    "

//@ modifies \\everything;    "

//@ assert pp != p;    " // OK

//@ assert pp != this;    " // OK

//@ requires p != null && p != this;    " + "  //@ modifies \\everything;    "

//@ assert pp != p;    " // BAD

//@ requires p != null && p != this;    " + "  //@ modifies \\everything;    "

//@ assert pp != this;    " // BAD

//@ requires p != null && p != this;    " + "  //@ modifies \\everything;    "

//@ assert pp != q;    " // OK

//@ requires p != null && p != this;    "

//@ modifies \\everything;    " // Line 30                                                                                                // 30

//@ assert pp != q;    " // OK

//@ modifies \\everything;    " + "  //@ ensures \\result != null && \\fresh(\\result);    "

//@ ensures \\result != p && \\result != this;    " + "  public Object m6(Object p) {    "

//@ modifies \\everything;    " + "  //@ ensures \\result == null;    " // BAD

//@ modifies \\everything;    " + "  //@ ensures \\result != null && \\fresh(\\result);    "

//@ ensures \\result == p || \\result == this;    " // BAD

//@ modifies \\everything;    "

//@ ensures \\result != null && !\\fresh(\\result);    " // BAD

//@ ghost Object oo;    "

//@ static ghost Object soo;    "

//@ modifies \    othing;    "

//@ assert pp != o && pp != oo;    " // OK

//@ modifies \    othing;    "

//@ assert pp != o;    " // BAD

//@ modifies \    othing;    "

//@ assert pp != oo;    " // BAD

//@ modifies \\everything;    "

//@ assert pp != oo;    " // OK

//@ modifies \\everything;    "

//@ assert pp != o;    " // BAD

//@ modifies \    othing;    "

//@ assert pp != so && pp != soo;    " // OK

//@ modifies \    othing;    "

//@ assert pp != so;    " // BAD

//@ modifies \    othing;    "

//@ assert pp != soo;    " // BAD

//@ modifies \\everything;    "

//@ assert pp != soo;    " // OK

//@ modifies \\everything;    "

//@ assert pp != so;    " // OK

//@ modifies \    othing;    "

//@ assert pp != o && pp != oo;    " // BAD

//@ modifies \    othing;    " + "  public void m9b(Object p) {    " + "    Object pp = c1n(p);    "

//@ assert pp != so && pp != soo;    " // BAD

//@ modifies \    othing;    "

//@ ensures \\fresh(\\result);    "

//@ modifies \    othing;    "

//@ ensures \\result == null || \\fresh(\\result);    "

//@ modifies \    othing;    "

//@ ensures true;    "

//@ modifies \\everything;    "

//@ ensures \\result != null && \\fresh(\\result);    "

//@ modifies \\everything;    "

//@ ensures true;    "

//@ requires p != null && p != this;    " + "  //@ modifies \\everything;    "

//@ assume this.k == 0;    " + "    c1(p);    " // havoc

//@ assert this.k == 0;    " // OK

//@ requires p != null && p != this;    " + "  //@ modifies \\everything;    "

//@ assume sk == 0;    " + "    c1(p);    " // havoc

//@ assert sk == 0;    " // OK

//@ requires o != null;    " + "  //@ modifies o.*;    " + "  public void c1(TestJava o) { }     "

//@ requires o != null;    " + "  //@ modifies TestJava.*;    " + "  public void c2(TestJava o) { }     "

//@ requires p != null && p != this;    " + "  //@ modifies \\everything;    "

//@ assume k == 0;    " + "    c1(this);    " // havoc

//@ assert k == 0;    " // FAILS

//@ requires p != null && p != this;    " + "  //@ modifies \\everything;    "

//@ assume sk == 0;    " + "    c1(this);    " // havoc

//@ assert sk == 0;    " // OK

//@ requires o != null;    " + "  //@ modifies o.*;    " + "  public void c1(TestJava o) { }     "

//@ requires o != null;    " + "  //@ modifies TestJava.*;    " + "  public void c2(TestJava o) { }     "

//@ requires p != null && p != this;    " + "  //@ modifies \\everything;    "

//@ assume k == 0;    " + "    c2(this);    " // havoc

//@ assert k == 0;    " // OK

//@ requires p != null && p != this;    " + "  //@ modifies \\everything;    "

//@ assume sk == 0;    " + "    c2(this);    " // havoc

//@ assert sk == 0;    " // FAILS

//@ requires o != null;    " + "  //@ modifies o.*;    " + "  public void c1(TestJava o) { }     "

//@ requires o != null;    " + "  //@ modifies TestJava.*;    " + "  public void c2(TestJava o) { }     "

//@ modifies \\everything;    "

//@ assume k == 0;    "

//@ assert k == 0;    "

//@ requires i == 0;    "

//@ modifies \\everything;    "

//@ also requires i > 0;    "

//@ modifies \    othing;    "

//@ modifies \\everything;    " + "  public void m1a() {    " + "    //@ assume k == 0;    "

//@ assert k == 0;    " // FAILS

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "

//@ modifies \\everything;    " + "  public void m2() {    " + "    //@ assume sk == 0;    "

//@ assert sk == 0;    " + "  }    "

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "}");

//@ modifies \\everything;    " + "  public void m2a() {    " + "    //@ assume sk == 0;    "

//@ assert sk == 0;    " // FAILS

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "

//@ requires a != null && a.length > 10;    " + "  //@ modifies \\everything;    "

//@ assume a[0] == 0;    " + "    c1(1);    "

//@ assert a[0] == 0;    " + "  }    "

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "}");

//@ requires a != null && a.length > 10;    " + "  //@ modifies \\everything;    "

//@ assume a[0] == 0;    " + "    c1(0);    " // modifies

//@ assert a[0] == 0;    " // FAILS

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "

//@ requires sa != null && sa.length > 10;    " + "  //@ modifies \\everything;    "

//@ assume sa[0] == 0;    " + "    c1(1);    "

//@ assert sa[0] == 0;    " + "  }    "

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "}");

//@ requires sa != null && sa.length > 10;    " + "  //@ modifies \\everything;    "

//@ assume sa[0] == 0;    " + "    c1(0);    "

//@ assert sa[0] == 0;    " // FAILS

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "}"

//@ requires sa != null && sa.length > 10;    " + "  //@ modifies \\everything;    "

//@ assume a == \\old(a);    " + "    c1(1);    "

//@ assert a == \\old(a);    " + "  }    "

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "}");

//@ requires sa != null && sa.length > 10;    " + "  //@ modifies \\everything;    "

//@ assume a == \\old(a);    " + "    c1(0);    "

//@ assert a == \\old(a);    " // FAILS

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "

//@ modifies \\everything;    " + "  public void m6(/*@ non_null*/TestJava t) {    "

//@ assume t.k == 0;    " + "    c1(1);    " + "    //@ assert t.k == 0;    " + "  }    "

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "}");

//@ modifies \\everything;    " + "  public void m6a(/*@ non_null*/TestJava t) {    "

//@ assume t.k == 0;    " + "    c1(0);    " + "    //@ assert t.k == 0;    " // FAILS

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "

//@ modifies \\everything;    " + "  public void m7() {    " + "    c1(1);    "

//@ assert sk == \\old(sk);    " // Should be OK

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "}");

//@ modifies \\everything;    " + "  public void m7a() {    " + "    c1(0);    "

//@ assert sk == \\old(sk);    " // FAILS

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "

//@ modifies k,sk;    "

//@ assume k == 0 && sk == 0;    "

//@ assert sk == 0;    "

//@ modifies k,sk;    "

//@ assume k == 0 && sk == 0;    "

//@ assert sk == 0;    " // FAILS

//@ modifies k,sk;    "

//@ assume k == 0 && sk == 0;    "

//@ assert k == 0;    " + "  }    "

//@ modifies k,sk;    "

//@ assume k == 0 && sk == 0;    "

//@ assert k == 0;    " // FAILS

//@ requires i == 0;    "

//@ modifies k;    "

//@ also requires i > 0;    "

//@ modifies sk;    "

//@ requires i == 10;    "

//@ modifies t.k;    "

//@ also requires i == 0;    "

//@ modifies \    othing;    "

//@ requires a!=null && 0<=i && i<a.length;    "

//@ modifies a[i];    "

//@ requires b!=null && 0<=i && i<b.length;    "

//@ modifies b[i];    "

//@ modifies k,sk;    " + "  public void m3() {    " + "    //@ assume k == 0 && sk == 0;    "

//@ assert k == 0;    " + "  }    "

//@ modifies k,sk;    " + "  public void m3a() {    " + "    //@ assume k == 0 && sk == 0;    "

//@ assert k == 0;    " // FAILS

//@ requires a != null && a.length == 5;    "

//@ modifies a[0];    " + "  public void m4() {    "

//@ assume a[0] == 0 && a[1] == 1;    " + "    c3(0);    " + "    //@ assert a[1] == 1;    "

//@ requires a != null && a.length == 5;    " + "  //@ modifies a[0];    "

//@ assume a[0] == 0 && a[1] == 1;    " + "    c3(0);    "

//@ assert a[0] == 0;    " // FAILS

//@ requires i == 0;    " + "  //@ modifies k;    " + "  //@ also requires i > 0;    "

//@ modifies sk;    " + "  public void c1(int i) { }     "

//@ requires i == 10;    " + "  //@ modifies t.k;    " + "  //@ also requires i == 0;    "

//@ modifies \    othing;    " + "  public void c2(int i, TestJava t) {}    "

//@ requires a!=null && 0<=i && i<a.length;    " + "  //@ modifies a[i];    "

//@ requires b!=null && 0<=i && i<b.length;    "

//@ modifies b[i];    " + "  public void c4(int i) {}    " + "

//@ requires b != null && b.length == 5;    "

//@ modifies b[0];    "

//@ assume b[0] == 0 && b[1] == 1;    "

//@ assert b[1] == 1;    "

//@ requires b != null && b.length == 5;    "

//@ modifies b[0];    "

//@ assume b[0] == 0 && b[1] == 1;    "

//@ assert b[0] == 0;    " // FAILS

//@ requires b != null && b.length == 5;    "

//@ modifies b[0];    "

//@ assume b[0] == 0 && b[1] == 1;    "

//@ requires a != null && b != null && b.length == 5  && a.length ==5;    "

//@ modifies a[0],b[0];    "

//@ assume b[0] == 0 && b[1] == 1;    "

//@ assert b[1] == 1;    "

//@ requires i == 0;    "

//@ modifies k;    "

//@ also requires i > 0;    "

//@ modifies sk;    "

//@ requires i == 10;    "

//@ modifies t.k;    "

//@ also requires i == 0;    "

//@ modifies \    othing;    "

//@ requires a!=null && 0<=i && i<a.length;    "

//@ modifies a[i];    "

//@ requires b!=null && 0<=i && i<b.length;    "

//@ modifies b[i];    "

//@ public invariant a != null && a.length == 10;    "

/*@ assignable a; */
//@ modifies a[*];    "

//@ assume a[0] == 0 && a[2] == 2;    "

//@ assert a[0] == 0;    "

//@ modifies a[*];    "

//@ assume a[0] == 0 && a[2] == 2;    "

//@ assert a[2] == 3;    " // FAILS

//@ modifies a[2 .. 4];    "

//@ modifies a[*];    "

//@ modifies a[2 .. ];    "

//@ public invariant a != null && a.length == 10;    "

//@ assignable a;    "

//@ modifies a[*];    "

//@ assume a[0] == 0 && a[2] == 2;    "

//@ assert a[0] == 0;    " // FAILS

//@ modifies a[*];    "

//@ assume a[0] == 0 && a[2] == 2;    "

//@ assert a[2] == 2;    " // FAILS

//@ modifies a[2 .. 4];    "

//@ modifies a[*];    "

//@ modifies a[2 .. ];    "

//@ public invariant a != null && a.length == 10;    "

//@ assignable a;    "

//@ modifies a[*];    "

//@ assume a[0] == 0 && a[2] == 2;    "

//@ assert a[0] == 0;    "

//@ modifies a[*];    "

//@ assume a[0] == 0 && a[9] == 2;    "

//@ assert a[9] == 2;    " // FAILS

//@ modifies a[2 .. 4];    "

//@ modifies a[*];    "

//@ modifies a[2 .. ];    "

//@ modifies \\everything;    " + "  public void z() {    " + "  }    "

//@ modifies \\everything;    " + "  public void m1() {    " + "    //@ assume a == 15 && fa == 13;    "

//@ assert fa == 13;    " // Should be OK

//@ assert a == 15;    " // Should fail

//@ assert fsa == 13;    " // OK

//@ assert fa == 15;    " // OK

//@ modifies \\everything;    " + "  public void m1() {    " + "    //@ assert fsa == 13;    " // Should

//@ assert fa == 15;    " // Should be OK

//@ modifies \\everything;    " + "  public void m2() {    " + "    //@ assert a == 17;    " // Not

//@ modifies \\everything;    " + "  public void m3() {    " + "    //@ assert fb == 16;    " // Not

/*@ code_bigint_math*/
//@ requires i >= 0;    " + "  //@ modifies k;    " + "  //@ ensures k == 10;    "

//@ signals (Exception e) k<0; signals_only Exception;    "

//@ requires i >= 0;    " + "  //@ modifies k;    " + "  //@ ensures k == 10;    "

//@ signals (Exception e) k==-11;    " + "  //@ signals_only Exception;    "

//@ requires i >= 0;    " + "  //@ modifies k;    " + "  //@ ensures k == 10;    "

//@ signals (Exception e) k==-12;    " + "  //@ signals_only Exception;    "

//@ requires i >= 0;    " + "  //@ modifies k;    " + "  //@ ensures k == 10;    "

//@ signals (Exception e) k==-13;    " // FAILS

//@ signals_only Exception;    " + "  public void m3a(int i) {    " + "    m(0);    "

//@ requires i >= 0;    " + "  //@ modifies k;    " + "  //@ ensures \\result == 12;    "

//@ signals (Exception e) false;    " + "  public int m4(int i) {    "

//@ requires i >= 0;    " + "  //@ modifies k;    " // Line

//@ ensures false;    " + "  //@ signals (Exception e) k == -11;    "

//@ signals_only Exception;    " + "  public int m5(int i) {    "

//@ requires i >= 0;    " + "  //@ modifies k;    " + "  //@ ensures false;    "

//@ signals (Exception e) k == -12;    " // Line 60

//@ signals_only Exception;    " + "  public int m6(int i) {    "

//@ requires i == 0;    " + "  //@ modifies k;    " + "  //@ ensures k>0 && \\result == i+1;    "

//@ signals (Exception e) false;    " + "  //@ also     " + "  //@ requires i > 0;    " // Line

//@ modifies k;    " + "  //@ ensures false;    " + "  //@ signals (Exception e) k == -10-i;    "

//@ signals_only Exception;    " + "  public int m(int i) {    " + "    if (i > 0) {    "

//@ code_bigint_math     " + "public class TestJava {     "

/*@ non_null*/
//@ requires false;    " + "  public static boolean bf(boolean bb) { return true; }    "

//@ requires true;    " + "  public static boolean bt(boolean bb) { return true; }    "

//@ static public invariant b;    "

//@ requires !b;    " + "  public static boolean bq(boolean bb) { return true; }    " + "


//@ ghost nullable Object oo;    " + "  //@ public static invariant bstatic;    "

//@ public invariant binstance;    " + "  //@ public initially binstance2;    "

//@ public constraint binstance2 == \\old(binstance2);    "

//@ public static constraint bstatic == \\old(bstatic);    "

/*@ non_null*/
//@ requires true;    " + "  //@ ensures \\result;    "

//@ requires false;    " + "  //@ ensures true;    " + "  public static int i(int ii) { return 0; }    "

//@ requires ii == 10;    " + "  //@ ensures true;    "

/*@ set oo = null;*/
//@ requires ii == 10;    " + "  //@ ensures true;    "


/*@ set oo = null;*/
//@ requires ii == 10;    " + "  //@ ensures true;    "

//@ requires ii == 10;    " + "  //@ ensures true;    "

//@ requires bb;    "

//@ ensures true;    "

/*@ assume b; */
/*@assert false;*/
//@ requires bb;    " + "  //@ ensures true;    "

/*@ assume b; */
/*@assert !bb;*/
//@ requires bb;    " + "  //@ ensures true;    "

/*@ assume bb; */
/*@assert b;*/
//@ requires bb;    "

//@ ensures true;    "

/*@assume z==1 ;*/
/*@ assert false; */
//@ requires bbb;    "

/*@assume true;*/
/*@assume !b;*/
/*@ assert !bb; */
//@ requires b;    "

/*@assume true;*/
/*@assume !b;*/
/*@ assert !bb; */
//@ requires bb;    "

//@ ensures true;    "

/*@assume 0==x ;*/
/*@ assert true; */
/*@ assume !bb; assume bb;*/
/*@assume bb; assume !bb; */
/*@assume bb; assume !bb; */
/*@assume bb; assume !bb; */
/*@ assume b; */
/*@ assume !b; */
/*@ assert k == 0; */
/*@ assert k != 0; */
/*@ assert i == 10; assert k == 16; */
/*@ assert k == 10; */
/*@ assert k == 11; */
/*@ assert k == 11; */
/*@ code_java_math*/
//@ static public constraint i > \\old(i);    "

//@ modifies i;    "

//@ ensures true;    "

/*@ code_bigint_math*/
//@ modifies i;    " + "  //@ ensures i == \\old(i)+2;    "

//@ modifies i;    "

//@ ensures i == \\old(i+1);    " + "  public static void bbad() { i = i - 1; }    " + "

/*@ code_java_math spec_java_math*/
//@ modifies i;    "

//@ ensures i == \\old(i)+2;    "

//@ modifies i;    "

//@ ensures i == \\old(i+1);    "

/*@ code_java_math spec_java_math*/
//@ modifies i;    "

//@ ensures i == \\old(i)+2;    "

/*@ assert i == i@x + 1 && i == (i+1)@x; */
//@ modifies i;    "

//@ ensures i == \\old(i+1);    "

/*@ assert i == i@x + 1; */
//@ modifies i;    "

/*@ assert i == this.i@x + 1; */
//@ requires a.length > 10 && a[0] >= 0;    "

//@ modifies i;    "

/*@ assert a[0]@x > -1; */
/*@ code_java_math spec_java_math*/
/*@ assert i <<< i || true; */
/*@ assert i <<<= i || true; */
//@ requires 0<=ii && ii <=3;    "

//@ ensures ii<=0 ==> \\result ==-ii;    "

//@ requires ii > -2147483648;    " // Not using

//@ ensures \\result == -ii;    "

/*@ assert i!=0; */
/*@ assert i==0; */
//@ requires ii == 10;    " + "  //@ ensures true;    "


//@ requires ii == 10;    "

//@ ensures true;    " + "  public @NonNull Object inst2(int ii) {  return null; }    " + "

//@ requires ii == 10;    " + "  //@ ensures true;    "

//@ requires ii == 10;    "

//@ ensures true;    " + "  public          Object inst2(int ii) {  return null; }    " + "

//@ requires ii == 10;    " + "  //@ ensures true;    "

//@ requires ii == 10;    " + "  //@ ensures true;    "

//@ requires ii == 10;    " + "  //@ ensures true;    "

//@ requires ii == 10;    "

//@ ensures true;    " + "  public          Object inst2(int ii) {  return null; }    " + "

/*@ non_null*/

/*@ non_null*/

/*@ non_null*/
/*@ non_null*/
//@ ensures \\result != null;    "


//@ ensures \\result != null;    "


//@ ensures \\result != null;    "

//@ ensures \\result != null;    "



//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ requires i>0;    " + "  //@ modifies j;    "

//@ ensures j == -i;    " + "  static public void m(int i) { j = -i; }    " + "  //@ requires i>1;     "

//@ modifies j;    " + "  //@ ensures \\result == -i;    "

//@ modifies j;    "

//@ ensures \\result == j;    " + "  public int instbad(boolean b, int i) { m(i); return j; }    "

//@ modifies j;    " + "  //@ ensures \\result == i;    "

//@ requires i>0;    "

//@ modifies j;    "

//@ ensures j == -i;    "

//@ requires i>1;     "

//@ modifies j;    "

//@ ensures \\result == -i;    "

//@ modifies j;    "

//@ ensures \\result == j;    "

//@ modifies j;    "

//@ ensures \\result == i;    "

/*@ code_bigint_math*/
//@ requires i>0;    "

//@ modifies j;    "

//@ ensures j == i+1 && \\result == j;    "

//@ requires i>1;     "

//@ modifies j;    "

//@ ensures \\result == \\old(i)+1;    "

//@ requires i>1;     "

//@ modifies j;    "

//@ ensures \\result == \\old(i)+3;    "

//@ requires i>1;     "

//@ modifies j;    "

//@ ensures \\result == 3*i+4;    "

//@ ensures j == i + 1;    "

//@ requires i>1;     "

//@ modifies j;    "

//@ ensures \\result == \\old(i);    "

//@ requires i>1;     "

//@ modifies j;    "

//@ ensures \\result == \\old(i)+4;    "

//@ requires i>1;     "

//@ modifies j;    " // Line 30

//@ ensures \\result == 3*i+4;    "

//@ ensures j == i + 2;    "

/*@ code_java_math*/
//@ assignable \    othing; ensures \\result == j;    "

//@ modifies j,sj;    "

//@ ensures \\result == \\old(j);    "

//@ modifies j,sj;    "

//@ ensures \\result == j;    "

//@ modifies j,sj;    "

//@ ensures \\result == sj;    "

//@ requires o!=null && p != null && o.j == 1 && p.j == 2 && j == 3;    "

//@ modifies j,sj,o.j,o.sj,p.j,p.sj;    "

//@ ensures \\result == 6;    "

//@ requires o!=null && p != null && o.j == 1 && p.j == 2 && j == 3 && o!=this && p!= this;    "

//@ modifies j,sj,o.j,o.sj,p.j,p.sj;    "

//@ ensures \\result == 6;    "

/*@ assert (\\lbl OJ o.j) + (\\lbl PJ p.j) + (\\lbl JJ j) == 6; */
//@ requires o!=null && p != null && o.j == 1 && p.j == 2 && j == 3;    "

//@ modifies j,sj,o.j,o.sj,p.j,p.sj;    "

//@ ensures \\result == 6;    "

//@ modifies j,sj;    " + "  //@ ensures \\result == 6;    "

//@ requires o!=null && p != null && sj == 3;    "

//@ modifies j,sj,o.j,o.sj,p.j,p.sj;    "

//@ ensures \\result == 9;    "

//@ assume a != null && a.length > 2 && a[0] == 1;    "

//@ loop_invariant (\\forall int k; 0<=k && k < \\count; b ==> a[k] > 0);    "

//@ assert b ==> a[1] > 0;    " + "  }    " + "}");

/*@ loop_invariant 0<=i && i<=5 && n==i; decreases 5-i; */
/*@ assert n == 5; */
/*@ loop_invariant 0<=i && i<=5 && n==i; decreases 3-i; */
/*@ assert n == 5; */
/*@ loop_invariant 0<=i && i<5 && n==i; decreases 5-i; */
/*@ assert n == 5; */
/*@ loop_invariant 0<=i && i<=5 && n==i-1; decreases 5-i; */
/*@ loop_invariant i>0; decreases i; */
/*@ reachable; */
/*@ loop_invariant i>=0; decreases i-2; */
/*@ assert i == 0; */
/*@ loop_invariant i>=0; decreases i; */
/*@ assert i == 0; */
/*@ code_java_math */
/*@ loop_invariant  i>0; decreases i; */
/*@ assert i == 0; */
/*@ code_bigint_math */
/*@ loop_invariant i>=0; decreases i-2; */
/*@ assert i == 0; */
/*@ code_bigint_math */
/*@ loop_invariant i>=0; decreases i; */
/*@ assert i == 0; */
/*@ code_bigint_math*/
/*@ loop_invariant i<=5 && i>=0; decreases i; */
/*@ assert i == 0; */
/*@ loop_invariant i<=5 && i>=0; decreases i-2; */
/*@ assert i == 0; */
/*@ loop_invariant i<=5 && i>=0; decreases i; */
/*@ assert i == 0; */
/*@ loop_invariant i<=5 && i>0; decreases i; */
/*@ assert i == 0; */
/*@ loop_invariant i>=0; decreases i; */
/*@ assert i == 0; */
/*@ loop_invariant i>=0; decreases i; */
/*@ assert i == 0; */
/*@ loop_invariant i>=0; decreases i; */
/*@ assert i == 0; */
/*@ assert i == 6; */
/*@ assert i == 5; */
/*@ assert i == 4; */
/*@ assert i == 5; */
/*@ assert i == 6; */
/*@ assert i == 5; */
/*@ assert i == 4; */
/*@ assert i == 5; */
/*@ assert j == 5; */
/*@ assert j == 6; */
/*@ assert j == 5; */
/*@ assert j == 4; */
/*@ assert j == 6; */
/*@ assert j == 5; */
/*@ assert j == 4; */
/*@ assert j == 5; */
/*@ assert i == 12; */
/*@ assert i == 5; */
/*@ assert i == 12 && i == j; */
/*@ assert i == 5; */
/*@ assert i == -2; */
/*@ assert i == 5; */
/*@ assert i == -2 && i == j; */
/*@ assert i == 5; */
/*@ assert i == 5*7; */
/*@ assert i == 5; */
/*@ assert i == 5*7 && i == j; */
/*@ assert i == 5; */
/*@ assert i == 5/7; */
/*@ assert i == 5; */
/*@ assert i == 5/7 && i == j; */
/*@ assert i == 5; */
//@ requires i > -2147483648;    "

/*@ assert j >= 0; */
//@ requires i > -2147483648;    "

/*@ assert j == -1; */
/*@ assume i > 0; */
/*@ assert (\\lblpos ISP i>0); */
/*@ assume i > 0; */
/*@ assert (\\lblneg ISN i<0); */
/*@ assume i > 0; */
/*@ assert !(\\lblneg ISN2 i>0); */
/*@ assume i > 0; */
/*@ assert (\\lblpos ISP i<0); */
/*@ assume i > 0; */
/*@ assert !(\\lblpos ISP2 i>0); */
/*@ assert o != oo;*/
/*@ assert o == oo;*/
/*@ assert o != null;*/
/*@ assert o == null;*/
/*@ assert o != oo;*/
/*@ assert o == oo;*/
/*@ assert o != null; assert o.length == 5; */
/*@ assert o.length == 6;*/
/*@non_null*/
/*@ assert a.length >= 0;*/
/*@ assert o != oo;*/
/*@ assert o == oo;*/
/*@ assert o.length == 3; assert o[1] == 11;*/
/*@ assert o.length == 4; */
/*@ assert o.length == 3; assert o[1] == 10;*/
/*@ assert o != null; assert o.length == 3; assert o[1] == 11;*/
/*@ assert o.length == 3; assert o[1] != null; assert o[1].length == 3; assert o[1][2] == 14; assert o[0] != null; assert o[0].length == 2; assert o[0][1] == 11; */
/*@ assert o.length == 3; assert o[1] != null; assert o[1].length == 3; assert o[1][2] == 14; assert o[0] != null; assert o[0].length == 2; assert o[0][1] == 11; */
/*@ assert o.length == 3; assert o[1] == null; assert o[2] != null; assert o[2].length == 1; assert o[2][0] == 15; */
/*@ assert oo[0] != oo[1]; */
/*@ assert o != oo;*/
/*@ assert o == oo;*/
/*@ assert o.length == 5; assert o[1].length == 3; */
/*@ assert o.length == 6;*/
/*@ assert o[1].length == 4;*/
/*@non_null*/
/*@ assert a.length >= 0;*/
/*@ assert o.length == 3; */
/*@ assert o.length == 2; */
/*@ assert o[1][2] == 14; */
/*@ assert o[2].length == 1; */
/*@ assert o[0].length == 2; */
/*@ assert o != null; assert o.length == 5; assert o[1] == null; */
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assume a[1] == 2; */
/*@ assert a[1] == 2; */
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assume a[1] == 2; */
/*@ assert a[1] == 3; */
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assume a[1] == 2; */
/*@ assert a[1] == 3; */
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assume a[1] == 2; */
/*@ assert a[1] == 4; */
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assume a[0] == 2; */
/*@ assert a[0] == 2; */
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assume a[0] == 2; */
/*@ assert a[0] == 4; */
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assume a[1] == 2; */
/*@ assert a[1] == 3; */
/*@ assert a[1] == 4; */
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assume a[1] == 2; */
/*@ assert a[1] == 3; */
/*@ assert a[1] == 5; */
/*@non_null*/
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assert a[0] == b[0]; */
/*@non_null*/
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assert a[0] != b[0]; */
/*@non_null*/
/*@non_null*/
/*@ assume b.length == 10 && a.length == 10;*/
/*@ assert b[0] == 7; */
/*@non_null*/
/*@non_null*/
/*@ assume b.length == 10 && a.length == 10;*/
/*@ assert b[0] == 8; */
/*@non_null*/
/*@non_null*/
/*@ assume b.length == 10 && a.length == 12;*/
/*@ assert b != null; assert a != null; assert b.length == 12; assert a.length == 12; */
/*@non_null*/
/*@assume a.length == 10; assume a[1] != null; assume a[1].length == 5; */
/*@ assume a[1][2]; */
/*@ assert a[1][2]; */
/*@non_null*/
/*@assume a.length == 10; assume a[1] != null; assume a[1].length == 5; */
/*@ assume a[1][2]; */
/*@ assert !a[1][2]; */
/*@non_null*/
/*@assume a.length == 10; assume a[1] != null; assume a[1].length == 5; */
/*@ assume a[1][2]; */
/*@ assert !a[1][2]; */
/*@non_null*/
/*@assume a.length == 10; assume a[1] != null; assume a[1].length == 5; */
/*@ assume a[1][2]; */
/*@ assert a[1][3]; */
/*@non_null*/
/*@assume a.length == 10; assume a[1] != null; assume a[1].length == 5; */
/*@ assume a[1][2]; */
/*@ assert a[0][2]; */
/*@non_null*/
/*@assume a.length == 10; assume a[1] != null; assume a[1].length == 5; */
/*@ assume a[1][2]; assume a[0] != null; */
/*@ assert a[0][2]; */
/*@non_null*/
/*@assume a.length == 10; assume a[1] != null; assume a[1].length == 5; */
/*@ assume a[1][2]; assume a[0] != null; assume a[0].length > 5; */
/*@ assert a[0][2]; */
/*@non_null*/
/*@assume a.length == 10; assume a[1] != null; assume a[0] != null; assume a[1].length == 5; assume a[0].length == 3; */
/*@ assume a[0][0]; */
/*@ assert a[0][0]; */
/*@non_null*/
/*@assume a.length == 10; assume a[1] != null; assume a[0] != null; assume a[1].length == 5; assume a[0].length == 3; */
/*@ assume a[0][0]; */
/*@ assert !a[0][0]; */
/*@non_null*/
/*@assume a.length == 10; assume a[1] != null; assume a[1].length == 5; */
/*@ assert a[0][3] == a[1][3]; */
/*@non_null*/
/*@assume a.length == 10; assume a[1] != null; assume a[1].length == 5; */
/*@ assert a[0][3] != a[1][3]; ; */
/*@non_null*/
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assert a[0] == b[0]; */
/*@non_null*/
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assert a[0] != b[0]; */
/*@non_null*/
/*@non_null*/
/*@ assume b.length == 10 && a.length == 10 && b[0] != null && a[0] != null && b[0].length == 5 && a[0].length==6;*/
/*@ assert !b[0][0]; */
/*@non_null*/
/*@non_null*/
/*@ assume b.length == 10 && a.length == 10 && b[0] != null && a[0] != null && b[0].length == 5 && a[0].length==6;*/
/*@ assert b[0][0]; */
/*@non_null*/
/*@non_null*/
/*@ assume b.length == 10 && a.length == 12;*/
/*@ assert b != null; assert a != null; assert b.length == 12; assert a.length == 12; */
/*@ nullable_by_default */
//@ public static invariant t != null;     "

/*@non_null*/
/*@ assume t.f == 2; */
/*@ assert t.f == 2; */
/*@non_null*/
/*@ assume t.f == 2; */
/*@ assert t.f == 3; */
/*@non_null*/
/*@ assume t.f == 2; */
/*@ assert t.f == 3; */
/*@non_null*/
/*@ assume t.f == 2; */
/*@ assert t.f == 4; */
/*@non_null*/
/*@ assume t.g == 2; */
/*@ assert t.g == 2; */
/*@non_null*/
/*@ assume t.g == 2; */
/*@ assert t.g == 4; */
/*@non_null*/
/*@ assume t.f == 2; */
/*@ assert t.f == 3; */
/*@ assert t.f == 4; */
/*@non_null*/
/*@ assume t.f == 2; */
/*@ assert t.f == 3; */
/*@ assert t.f == 5; */
/*@non_null*/
/*@non_null*/
/*@ assert a.f == b.f; */
/*@non_null*/
/*@non_null*/
/*@ assert a.f != b.f; */
/*@non_null*/
/*@non_null*/
/*@ assert b.f == 7; */
/*@non_null*/
/*@non_null*/
/*@ assert b.f == 8; */
/*@non_null*/
/*@non_null*/
/*@ assert a.sf == b.sf; */
/*@non_null*/
/*@non_null*/
/*@ assert a.sf != b.sf; */
/*@non_null*/
/*@non_null*/
/*@ assert 3 == b.sf; */
/*@non_null*/
/*@non_null*/
/*@ assert 3 != b.sf; */
/*@non_null*/
/*@ assert f == this.f; */
/*@ assert a == this ==> a.f == f; */
/*@non_null*/
/*@ assert f == this.f; */
/*@ assert a.f == f; */
/*@non_null*/
/*@ assert sf == this.sf; */
/*@ assert a.sf == sf; */
/*@ assume i>=-1 && i <=1; */
/*@ assert j!=0; */
/*@ assume i>=-1 && i <=1; */
/*@ assert j==1; */
/*@ assume i>=-1 && i <=1; */
/*@ assert j>0; */
/*@ assume i>=-1 && i <=1; */
/*@ assert i==0 ==> j==-1; */
/*@ assume i>=-1 && i <=1; */
/*@ assert j>=0; */
/*@ assume i>=-1 && i <=1; */
/*@ assert j>0; */
/*@ assume i>=-1 && i <=1; */
/*@ assert j>=0; */
//@ ensures i == 2;    "

//@ ensures i == 1;    "

//@ public exceptional_behavior requires b;  signals (Exception e) true; signals (RuntimeException e) true;    "

//@ also    " + "//@ public normal_behavior requires !b; ensures true;    "

//@ requires k < 0;    " + "//@ ensures true;    " + "//@ also    " + "//@ requires k > 0;    "

//@ ensures \\result == 1;    " + "public int m1() {    " + "    int i = 1;    " + "    try {    "

//@ assert e != null;    " + "        i = 2;    " + "    }    "

//@ requires k < 0;    " + "//@ ensures true;    " + "//@ also    " // Line

//@ requires k > 0;    " + "//@ ensures \\result == 1;    " + "public int m2() {    " + "    int i = 1;    "

//@ assert e != null;    " + "        i = 1;    " // Line

//@ requires i > 0;    " + "  //@ ensures i > 0;    "

/*@ assert a*2 == a + a; */
/*@ assert a * b ==
                // a *(b-1) + a; */
/*@ assert (2*a)/2 == a; */
/*@ assert a >= 0 ==> (a%3) < 3; */
/*@ assert a >= 0 ==> (a%3) >= 0; */
/*@ assert (a >= 0
                // && b > 0) ==> (a%b) >= 0; */
/*@ assert (a >= 0
                // && b > 0) ==> ((a*b)%b) == 0; */
/*@ assert (a >= 0 ) ==> ((5*a)%5) == 0; */
//@ requires i < 1000; ensures \\result == i+1;    "

//@ pure     "

/*@ assume a < 100; */
/*@ assert k == m(a); */
/*@ assume a < 100; */
/*@ assert k == m(a); */
/*@ assume a < 100; */
/*@ assert k == m(a) + m(a); */
/*@ assume a < 100; */
/*@ assert k == 1 + m(a) + m(a); */
/*@ assume a < 100; */
/*@ assert k == m(m(a+1)); */
/*@ assume a < 100; */
/*@ assert k == m(m(a+1)); */
//@ requires i < 1000; ensures \\result == i+1;    "

//@ pure     "

/*@ assume a < 100; */
/*@ assert k == m(a); */
/*@ assume a < 100; */
/*@ assert k == m(a); */
/*@ assume a < 100; */
/*@ assert k == m(a) + m(a); */
/*@ assume a < 100; */
/*@ assert k == 1 + m(a) + m(a); */
/*@ assume a < 100; */
/*@ assert k == m(m(a+1)); */
/*@ assume a < 100; */
/*@ assert k == m(m(a+1)); */
/*@ code_bigint_math*/
//@ ensures \\result == z+1;    " + "  //@ pure     "

/*@ assert k == m(); */
/*@ assert k == m(); */
/*@ assert k == m() + m(); */
/*@ assert k == 1 + m() + m(); */
/*@ assert k == m(); */
/*@ assert k == m(); */
/*@ code_bigint_math*/
//@ ensures \\result == z+1;    "

//@ pure     "

/*@ assert k == m(); */
/*@ assert k == m(); */
/*@ assert k == m() + m(); */
/*@ assert k == 1 + m() + m(); */
//@ ensures \\result > 0;    "

//@ also    "

//@ ensures \\result > ii;    "

/*@ code_bigint_math*/
//@ also public normal_behavior    "

//@ ensures \\result == i+1;    "

//@ pure    "

//@ requires a >= 0;    "

//@ ensures \\result == a+1;    "

//@ requires iii > 0;    " + "  //@ ensures \\result > 0;    " + "  abstract public int m(int iii);    "

//@ also    "

//@ ensures \\result > ii;    " + "  abstract public int m(int ii);    " + "}    "

/*@ code_bigint_math*/
//@ also    "

//@ ensures \\result == i+1;    " + "  //@ pure    " + "  public int m(int i) { return i+1; }    "

//@ ensures \\result == a+1;    " + "  public int n1(int a) { return m(a); }    "

//@ requires iii > 0;    " + "  //@ ensures \\result > 0;    " + "  abstract public int m(int iii);    "

//@ also    "

//@ requires ii > 0;    " + "  //@ ensures \\result > ii;    " + "  abstract public int m(int ii);    "

/*@ code_bigint_math*/
//@ also    "

//@ requires i > 0;    " + "  //@ ensures \\result == i+1;    " + "  //@ pure    "

//@ requires iii == 1;    "

//@ ensures \\result == iii;    "

//@ also    "

//@ requires ii == 2;    "

//@ ensures \\result == ii;    "

/*@ code_bigint_math*/
//@ also    "

//@ requires i == 3;    "

//@ ensures \\result == i;    "

//@ pure    "

//@ requires a >= 1 && a <= 3;    "

//@ ensures \\result == a;    "

//@ ensures \\result == a;    "

//@ requires 0<=ii && ii <=3;    "

//@ ensures \\result < 0;    " + "  public static int m(int ii) {     "

//@ requires ii == 2;    " + "  //@ ensures \\result == 0;    "

//@ ensures is == 6;    "

//@ ensures \\result == 1;    " + "  public static int m4(int ii) {     " + "    try { ii = 0;     "

//@ assert c == 1;     " + "    return c;     " + "  }    " + "

//@ ghost int d = c+1;    " + "    //@ assert d + c == 9;     " + "    return c;     "

//@ ghost int d = c+1;    " + "    //@ assert d + c == 10;     " + "    return c;     "

//@ ghost int d = c+1;    " + "    //@ set d = 10;    " + "    //@ assert d + c == 14;     "

//@ ghost int d = c+1;    " + "    //@ set d = 10;    " + "    //@ assert d + c == 15;     "

//@ ghost int d = c+1;    " + "    //@ debug d = 10;    " + "    //@ assert d + c == 14;     "

//@ ghost int d = c+1;    " + "    //@ debug d = 10;    " + "    //@ assert d + c == 15;     "

/*@ nullable_by_default */
/*@non_null*/
//@ requires o != null;    "

//@ public normal_behavior  ensures \\result == (oo != null);    "

/*@ nullable_by_default */
/*@non_null*/
//@ requires o != null;    " + "  public static void m2(TestJava o) {     " + "    int i = o.z();     "

//@ public normal_behavior  ensures \\result == (oo != null);    "

//@ signals_only \    othing;      public int z() { return 0; }    " + "

/*@non_null*/
//@ requires o != null;    " + "  public static void m2(TestJava o) {     " + "    int i = o.z();     "

//@ public normal_behavior  ensures \\result == (oo != null);    "

//@ signals_only \    othing;      public static int z() { return 0; }    " + "}");

/*@ nullable_by_default */
/*@ code_java_math spec_java_math*/
//@ requires a != null;    "

//@ requires a != null;    "

//@ assume a.length == 1;     "

/*@ non_null*/
/*@ non_null*/
/*@ nullable_by_default */
//@ assume o.j == 1;     " + "  }    "

/*@non_null*/
//@ assume o.j == 1;     " + "  }    "

//@ requires o != null;    " + "  public static void m2(TestJava o) {     "

//@ assume o.j == 1;     " + "  }    " + "  public static void m3(TestJava o) {     "

//@ assume o != null && o.j == 1;     " + "  }    " + "  public static void m4(TestJava o) {     "

//@ assume o == null || o.j == 1;     " + "  }    " + "  public static void m5(TestJava o) {     "

//@ assume o != null ==> o.j == 1;     " + "  }    " + "

/*@ nullable_by_default */
//@ assume o.j == 1;     " + "  }      "

//@ assume a[0] == 1;     " + "  }    "

//@ requires a != null;    " + "  public static void m2(int[] a) {     "

//@ assume a[-1] == 1;     " + "  }    " + "  //@ requires a != null;    "

//@ assume a.length == 1;     "

//@ assume a[1] == 1;     " + "  }    " + "  public static void m4(int i, int j) {     "

//@ assume i/j == 4;     " + "  }    " + "  public static void m5(int i, int j) {     "

//@ assume i%j == 4;     " + "  }    " + "  public static void m6(RuntimeException r) {     "

//@ assume ((Exception)t) != null ? true : true;     " // OK

//@ assume ((RuntimeException)t) != null ? true : true ;     " + "  }    "

/*@ non_null*/
//@ assume ((Exception)t) != null ? true : true;     " + "  }    "

/*@ non_null*/
//@ assume ((RuntimeException)t) != null ? true : true ;     " + "  }    " + "

/*@ nullable_by_default */
//@ assume o.j == 1;     "

//@ assert o.j == 1 ? true : true;     "

//@ ghost int i = o.j;     "

//@ ghost int i; debug i = o.j;     "

//@ requires o.j == 1;    "

//@ ensures t.j == 1 ? true : true;    "

//@ ghost int i; set i = o.j;     "

/*@ nullable_by_default */
//@ assume o.j == 1;     "

/*@ nullable_by_default */
//@ public invariant t.j ==1 ? true: true;    " + "

/*@ nullable_by_default */
//@ public initially t.j ? true : true;    " + "

/*@ nullable_by_default */
//@ public constraint t.j ==1 ? true: true;    " + "

/*@ nullable_by_default */
//@ assert i == 1;    "

//@ assert i == 2;    "

//@ assert i == 2;    " + "  }    " + "  public void mp() {    "

//@ assert i == 2 && j == 3;    " + "  }    " + "  public void ma() {    " + "    int i = 0;    "

//@ assert i == 1;    " + "  }    " + "  public void m1(int k) {    "

//@ assume k == 0;     " + "    try {    " + "      try {    "

//@ assert i == 2 && j == 50;    "

//@ assume k == 0;     " + "    try {    " + "    try {    " + "      try {    "

//@ assert i == 2 && j == 50;    " + "    }    "

//@ assert i == 0;    " + "  }    "

//@ assert i == 0;    "

//@ public normal_behavior     "

//@   requires i != 1 & i != 2;    "

//@   ensures \\result == 0;    "

//@ also public exceptional_behavior     "

//@   requires i == 2 && ee != null;     "

//@   signals (ArrayIndexOutOfBoundsException ex) true;     "

_by_default     "

//@ public normal_behavior     "

//@   requires i != 1 & i != 2;    "

//@   ensures \\result == 0;    "

//@ also public exceptional_behavior     "

//@   requires i == 2;     "

//@   signals (ArrayIndexOutOfBoundsException ex) true;     "

//@ public normal_behavior     "

//@   requires e != null & ee != null & ae != null;    "

//@   requires i != 1 & i != 2;    "

//@   ensures \\result == 0;    "

//@ also public exceptional_behavior     "

//@   requires e != null & ee != null & ae != null;    "

//@   requires i == 2;     "

//@   signals (ArrayIndexOutOfBoundsException ex) true;     "

/*@non_null*/
//@ assume \\typeof(o) == \\type(Object);    "

//@ assert \\typeof(o) == \\typeof(o);    "

//@ assert \\typeof(o) == \\type(Object);    "

//@ assert \\typeof(o) <: \\type(Object);    "

//@ assert \\typeof(o) <:= \\type(Object);    "

/*@non_null*/
//@ assume \\typeof(o) == \\type(Object);    "

//@ assert \\typeof(o) != \\type(Object);    "

/*@non_null*/
//@ assume \\typeof(o) == \\type(Object);    "

//@ assert \\typeof(o) == \\type(Object);    "

/*@non_null*/
//@ assume \\typeof(o) == \\type(Object);    "

//@ assert \\typeof(o) == \\type(TestJava);    "

/*@non_null*/
//@ assume \\typeof(o) == \\type(Object);    "

//@ assert \\type(TestJava) <: \\typeof(o);    "

//@ assert \\type(TestJava) <:= \\typeof(o);    "

/*@non_null*/
//@ assume \\typeof(o) == \\type(TestJava);    "

//@ assert \\typeof(o) <: \\type(Object);    " + "  }    "

/*@non_null*/
//@ assert \\typeof(o) <: \\type(Object);    " + "  }    " + "}");

/*@non_null*/
//@ assert JML.erasure(\\typeof(o)) == o.getClass();    "

//@ requires i >= 0;    " + "  //@ ensures i>0;    " + "  //@ signals (Exception e) i == 0;    "

//@ requires i >= 0;    " + "  //@ ensures i>0;    " + "  //@ signals (Exception e) i == 1;    " // FAILS

//@ requires i >= 0;    " + "  //@ ensures i>0;    " + "  //@ signals (Exception e) i == 0;    " // OK

//@ requires i >= 0;    " + "  //@ ensures i>0;    " + "  //@ signals (RuntimeException e) i == 1;    " // FAILS

//@ requires i >= 0;    " + "  //@ ensures i>0;    " + "  //@ signals (Exception e) i == 0;    "

//@ requires i >= 0;    "

//@ ensures i>0;    " + "  //@ signals (Exception e) i == 1;    " // FAILS

//@ requires i >= 0;    " + "  //@ ensures i>0;    " + "  //@ signals (RuntimeException e) i == 1;    " // OK

//@ signals_only java.io.IOException;    " // FAILS

//@ signals_only \    othing;    " // FAILS

//@ signals_only Exception;    " // OK

//@ public constraint i > \\old(i) for m1();    " + "  public void m1() {    " + "  }    "

//@ public constraint i > \\old(i) for ! m1();    " + "  public void m1() {    " + "  }    "

//@ public constraint i > \\old(i) for \\everything;    " + "  public void m1() {    "

//@ public constraint i > \\old(i) for !\    othing;    " + "  public void m1() {    " + "  }    "

//@ public constraint i > \\old(i) for \    othing;    " + "  public void m1() {    " + "  }    "

//@ public constraint i > \\old(i) for !\\everything;    " + "  public void m1() {    "

//@ public constraint i > \\old(i);    " + "  public void m1() {    " + "  }    "

//@ public constraint i > \\old(i) for m1(), m1(int);    " + "  public void m1() {    "

//@ public constraint i > \\old(i) for m1(), m1(int);    " + "  public static void m1() {    "

//@ public constraint i > \\old(i) for ! m1(), m1(int);    " + "  public void m1() {    "

//@ public constraint i > \\old(i) for TestJava();    " + "  public TestJava() {    " + "  }    " + "

//@ public constraint i > \\old(i);    " + "  public TestJava() {    " + "  }    " + "}");

//@ public static constraint i > \\old(i) for TestJava();    " + "  public TestJava() {    "

//@ public static constraint i > \\old(i);    " + "  public TestJava() {    " + "  }    " + "

//@ ghost static public int i = 0;    "

//@ public static constraint i > \\old(i);    " + "}    "

//@ ghost static public int i = 0;    "

//@ public constraint i > \\old(i);    " + "}    " + "public class TestJava implements A {     "

//@ normal_behavior     "

//@ ensures \\result == (i > 0 && i < 10);    "

//@ pure    "

//@ model public boolean m(int i);    "

//@ assert (\\forall int k; 3<k && k <7; m(k));    "

//@ assert (\\forall int k; 3<k && k <7; m(k-1));    "

//@ assert !(\\forall int k; -3<k && k <7; m(k));    "

//@ normal_behavior     "

//@ ensures \\result == (i > 0 && i < 10);    "

//@ pure function    "

//@ model public static boolean m(int i);    "

//@ pure    "

//@ assert !(\\forall int k; 3<k && k <11; m(k));    "

//@ normal_behavior     "

//@ ensures \\result == (i > 0 && i < 10);    "

//@ pure    "

//@ model public boolean m(int i);    "

//@ pure    "

//@ assert !(\\forall int k; 3<k && k <11; m(k));    "

/*@ spec_public */
//@ assignable \\everything;     "


/*@ spec_public */
//@ assignable \\everything;     "


/*@ spec_public */
/*@ spec_public */
//@ assignable \\everything;     "


//@ assert array.length >= 0;     "

//@ assert array.length <= Integer.MAX_VALUE;     "

//@ requires k >= 0;    "

//@ assert array.length >= 0;     "

//@ assert array.length <= Integer.MAX_VALUE;     "

//@ assert array.length == k;     "

//@ assert array.length >= 0;     "

//@ assert array.length <= Integer.MAX_VALUE;     "

//@ assert array.length >= 0;     "

//@ assert array.length <= Integer.MAX_VALUE;     "

//@ requires (\\forall int i; 0 <= i && i < args.length; args[i] >= 0);    "

//@ requires (\\forall int i; 0 <= i && i < args.length; args[i] >= 0); requires n == -2;    "

//@ requires (\\forall int i; 0 <= i && i < args.length; args[i] >= 0);    "

//@ requires (\\forall int i; 0 <= i && i < args.length; args[i] >= 0);"

//@ assert (\\lbl I i) + \\lbl(J j) == 0;     "

//@ assert (\\lbl I i) + \\lbl(J,j) == 0;     "

//@ nullable_by_default     "

/*@ requires o != null;     "
                        + "      ensures \\result == (j>=0);     "
                        + "     pure function */
//@ signals (NullPointerException e) positive(null,j);     "

//@ signals (NegativeArraySizeException e) positive(null,j);     "

//@ ensures j >= 0;     "

//@ ensures ii == 19; static_initializer "

//@ public final invariant ii == 19;     "

//@ public normal_behavior ensures \\result == 10 + 9; pure    "

//@ public normal_behavior ensures \\result == 19; pure    "

//@ ensures ii == 19 && jj == 21; static_initializer "

//@ public final invariant ii == 19;     "

//@ public normal_behavior ensures \\result == 10 + 9; pure    "

//@ public normal_behavior ensures \\result == 21; pure    "

//@ ensures ii == mm(); static_initializer "

//@ public final invariant ii == 19;     "

//@ public normal_behavior ensures \\result == 10 + 9; pure    "

//@ public normal_behavior ensures \\result == 19; pure    "

//@ public final invariant ii == 19;     "

//@ public normal_behavior ensures \\result == 10 + 9; pure    "

/*@ spec_public */
//@ public normal_behavior     "

//@   ensures num == 10;     "

//@   ensures A.bit == 1;     "

//@   ensures B.bit == 2;     "

//@ static_initializer     "

/*@ spec_public */
/*@ spec_public */
//@ public normal_behavior     "

//@   ensures num == 10;     "

//@   ensures A.bit == 1;     "

//@   ensures B.bit == 2;     "

//@ static_initializer     "

//@ public normal_behavior     "

//@   requires \    onnullelements(arr);     "

//@ public normal_behavior     "

//@   requires true;     "

//@ show i, j+1;    "

//@ show k;    "

//@ assert k > 0;    "

//@ show m,k;    "

//@ assert m > 0;    "

//@ public normal_behavior     "

//@   requires true;     "

//@ show i;    "

//@ public normal_behavior     "

//@   requires true;     "

//@ show i;    "

//@ show     "

//@ show i i;    "

//@ show;    "

//@ show i    "

//@ show %;    "

//@ public normal_behavior     "

//@   requires k != null && \    onnullelements(k) && \\elemtype(\\typeof(k)) <: \\type(Key);     "

//@ assert kk != null;    "

//@ assert \    onnullelements(kk);    "

//@ assert \\elemtype(\\typeof(kk)) == \\type(Key);    "

//@ public normal_behavior     "

//@   requires k != null && \    onnullelements(k) && \\elemtype(\\typeof(k)) <: \\type(Key);     "

//@ assert kk != null;    "

//@ assert \    onnullelements(kk);    "

//@ assert \\elemtype(\\typeof(kk)) == \\type(Key);    "

//@ ghost int k = 1;    "

//@ ghost int k = 2;    "

//@ ghost int i = 2;    "

//@ assert 0 <= i < 10 < 12;    "

//@ set i = 10;    "

//@ assert !(0 <= i < 10);    "

//@ assert 0 <= i < 11 == 2 <= i <= 12;    "

//@ assert 11 >= i+1 > 1 == 12 >= i > 2;    "

//@ assert 11 >= i+1 < 12;    "

//@ assert 11 >= i+1 < 12 == true;    "

//@ assert 11 >= i+1 > 1 != 12 <= i <= 22;    "

//@ signals_only \    othing;    "


//@ allow NullPointerException;     "


//@ forbid NullPointerException;     "



//@ ignore NullPointerException;     "



//@ ignore java.lang.XX;     "


//@ allow NullPointerException;     "

//@ forbid NullPointerException;     "

//@ forbid X;     "

//@ forbid ;     "

//@ forbid NullPointerException     "

//@ forbid NullPointerException, ArrayIndexOutOfBoundsException;     "

//@ forbid NullPointerException ArrayIndexOutOfBoundsException;     "

//@ forbid NullPointerException; allow NullPointerException     "

//@ ignore NullPointerException; allow NullPointerException     "

//@ ignore NullPointerException; forbid NullPointerException     "

//@ forbid java.lang.NullPointerException     "

//@ forbid java.lang.     "

/*@ pure */
//@ assert \\count >= 0;    " // OK

//@ assert \\count < a.length;    " // OK

//@ assert \\count >= 1;    " // BAD

//@ ghost int i = \\count;    " // OK

//@ assert \\count >= 0;    " // OK

//@ assert \\count < 2;    " // OK

//@ assert \\count == i;    " // OK

//@ ghost int i = \\count;    " + "      for (long kk: b) {    "

//@ assert \\count == i;    " // BAD

//@ loop_invariant \\count >= 0 && \\count <= a.length;    " // OK

//@ decreases a.length - \\count;    " // OK

//@ loop_invariant \\count >= 0 && \\count <= a.length;    " // OK

//@ loop_decreases a.length - \\count;    " // OK

//@ decreases a.length - \\count -1;    " // 0 on last

//@ decreases a.length - \\count -2;    " // BAD - last time through

//@ decreases \\count+10;    " // BAD - loop does not decrease variant

//@ loop_invariant \\count > 0 && \\count <= a.length;    " // BAD - first time through loop

//@ loop_invariant \\count >= 0 && \\count < a.length;    " // BAD - laswt time through loop

//@ assert \\count >= 0;    " // OK

//@ assert \\count < a.length;    " // OK

//@ ghost int i = \\count;    " // OK

//@ assert \\count >= 0;    " // OK

//@ assert \\count < 2;    " // OK

//@ assert \\count == i;    " // OK

//@ reachable;    " // knows that the loop is not

//@ loop_invariant \\values.size() == \\count;    " + "    for (Integer k: a) {    " + "    }    "

//@ loop_invariant \\values.size() == \\count;    " + "    for (Integer k: a) {    "

//@ assert \\values.size() == \\count;    " + "    }    " + "  }    "

//@ assert \\values.size() == \\count;    " + "    }    " + "  }    "

//@ assert \\count >= 1;    " // BAD

//@ public normal_behavior  ensures true;    " + "  public void m2() {    "

//@ assume a != null;     "

//@ assume it != null;     "

//@ public normal_behavior  ensures true;    " + "  public void m2bad() {    "

//@ assume a != null;     "

//@ assume it != null;     "

//@ public normal_behavior  ensures true;    "

//@ public normal_behavior  ensures true;    "

//@ assume values != null; set values.containsNull = true;     "

//@ assert values.content.owner == values;    "

//@ assume a != null;     "

//@ assume values.content.owner == values;    "

//@ assume it != null;     "

//@ assume values.content.owner == values;    "

//@ assert values.content.owner == values;    "

//@ ghost List<Map.Entry<String,String>> v = values;    "

//@ loop_invariant values == v && values.content.owner == values;     "

//@ assume k != null && \\typeof(k) <: \\type(Map.Entry<String,String>);     "

//@ public normal_behavior  ensures true;    "

//@ assume values != null; set values.containsNull = true;     "

//@ assert values.content.owner == values;    "

//@ assume a != null;     "

//@ assume values.content.owner == values;    "

//@ assume it != null;     "

//@ assume values.content.owner == values;    "

//@ assert values.content.owner == values;    "

//@ ghost List<Map.Entry<String,String>> v = values;    "

//@ assert values.content.owner == values;    "

//@ assume k != null &&  \\typeof(k) <: \\type(Map.Entry<String,String>);     "

//@ assert values.content.owner == values;    "

//@ public normal_behavior  ensures true;    "

//@ set values.containsNull = true;     "

//@ public normal_behavior  ensures true;    "

//@ set values.containsNull = true;     "

//@ ghost int i = \\count;    " // Out of scope

//@ ghost int i = \\count;    " // Out of scope

//@ set \\count = 6;    " // Syntax error

//@ ghost org.jmlspecs.lang.JMLList i = \\values;    " // Out

//@ ghost org.jmlspecs.lang.JMLList i = \\values;    " // Out

//@ set \\values = null;    " // Syntax error

//@ ghost org.jmlspecs.lang.JMLList i = \\values;    " // OK

//@ modifies \\everything;    "

//@ assume \    onnullelements(a);    "

//@ assume a.length > 1;    "

//@ assert a[0] != null;    " // OK

//@ modifies \\everything;    "

//@ assume \    onnullelements(a);    "

//@ assert a != null;    " // OK

//@ modifies \\everything;    "


//@ assume \    onnullelements(a);    "

//@ assert a == null;    " // BAD

//@ modifies \\everything;    "

//@ assume a != null && a.length > 1;    "

//@ assert a[0] != null;    " // BAD

//@ modifies \\everything;    "

//@ assume a != null && a.length == 0;    "

//@ assert \    onnullelements(a);    " // OK

//@ modifies \\everything;    "

//@ assume a != null && a.length == 0;    "

//@ assert (\\forall int i; 0<=i && i<a.length; a[i] != null);    " // OK

//@ requires \\elemtype(\\typeof(a)) == \\type(Object); modifies \\everything;    "

//@ assume a != null && a.length == 1;    "

//@ assert \    onnullelements(a);    " // OK

//@ modifies \\everything;    "

//@ assume a != null && a.length == 1;    "

//@ assume a[0] != null;    "

//@ assert \    onnullelements(a);    " // OK

//@ requires \\elemtype(\\typeof(a)) == \\type(Object); modifies \\everything;    "

//@ assume a != null && a.length == 2;    "

//@ assert \    onnullelements(a);    " // OK

//@ modifies \\everything;    "

//@ assume a != null && a.length == 2;    "

//@ assume a[0] != null;    "

//@ assume a[1] != null;    "

//@ assert \    onnullelements(a);    " // OK

//@ requires \\elemtype(\\typeof(a)) == \\type(Object); modifies \\everything;    "

//@ assume a != null && a.length == 3;    "

//@ assert \    onnullelements(a);    " // BAD

//@ requires \\elemtype(\\typeof(a)) == \\type(Object); modifies \\everything;    "

//@ assume \    onnullelements(a) && a.length == 3;    "

//@ assert \    onnullelements(a);    " // OK

//@ modifies \\everything;    "

//@ assume a != null && a.length == 3;    "

//@ assert \    onnullelements(a);    " // BAD

//@ requires i == 5;    " + "  //@ modifies \\everything;    " + "  public void m1(int i) {    "

//@ assert \    ot_modified(i);    " // OK

//@ modifies \\everything;    " + "  public void m1a(int i) {    " + "    i = 5;    "

//@ assert \    ot_modified(i);    " // BAD

//@ ghost public int gi;    "

//@ requires i == 5;    " + "  //@ modifies \\everything;    " + "  public void m2() {    "

//@ assert \    ot_modified(i);    " // OK

//@ modifies \\everything;    " + "  public void m2a() {    " + "    i = 5;    "

//@ assert \    ot_modified(i);    " // BAD

//@ requires si == 5;    " + "  //@ modifies \\everything;    " + "  public void m3() {    "

//@ assert \    ot_modified(si);    " // OK

//@ modifies \\everything;    " + "  public void m3a() {    " + "    si = 5;    "

//@ assert \    ot_modified(si);    " // BAD

//@ requires gi == 5;    " + "  //@ modifies \\everything;    " + "  public void m4() {    "

//@ set gi = 5;    " + "    //@ assert \    ot_modified(gi);    " // OK

//@ modifies \\everything;    " + "  public void m4a() {    " + "    //@ set gi = 5;    "

//@ assert \    ot_modified(gi);    " // BAD


//@ requires t != null;    "

//@ modifies \\everything;    "

//@ assert \    ot_modified(t.i);    " // OK

//@ requires t != null;    "

//@ modifies \\everything;    "

//@ assert \    ot_modified(t.i) ? true: true;    " // BAD

//@ requires t == null;    "

//@ modifies \\everything;    "

//@ assert \    ot_modified(t.i) ? true: true;    " // OK

//@ modifies \\everything;    "

//@ assert \    ot_modified(t.i) ? true: true;    " // BAD

//@ requires p != null && p != this;    "

//@ modifies \\everything;    "

//@ assert pp != p;    " // OK

//@ assert pp != this;    " // OK

//@ requires p != null && p != this;    " + "  //@ modifies \\everything;    "

//@ assert pp != p;    " // BAD

//@ requires p != null && p != this;    " + "  //@ modifies \\everything;    "

//@ assert pp != this;    " // BAD

//@ requires p != null && p != this;    " + "  //@ modifies \\everything;    "

//@ assert pp != q;    " // OK

//@ requires p != null && p != this;    "

//@ modifies \\everything;    " // Line 30                                                                                                // 30

//@ assert pp != q;    " // OK

//@ modifies \\everything;    " + "  //@ ensures \\result != null && \\fresh(\\result);    "

//@ ensures \\result != p && \\result != this;    " + "  public Object m6(Object p) {    "

//@ modifies \\everything;    " + "  //@ ensures \\result == null;    " // BAD

//@ modifies \\everything;    " + "  //@ ensures \\result != null && \\fresh(\\result);    "

//@ ensures \\result == p || \\result == this;    " // BAD

//@ modifies \\everything;    "

//@ ensures \\result != null && !\\fresh(\\result);    " // BAD

//@ ghost Object oo;    "

//@ static ghost Object soo;    "

//@ modifies \    othing;    "

//@ assert pp != o && pp != oo;    " // OK

//@ modifies \    othing;    "

//@ assert pp != o;    " // BAD

//@ modifies \    othing;    "

//@ assert pp != oo;    " // BAD

//@ modifies \\everything;    "

//@ assert pp != oo;    " // OK

//@ modifies \\everything;    "

//@ assert pp != o;    " // BAD

//@ modifies \    othing;    "

//@ assert pp != so && pp != soo;    " // OK

//@ modifies \    othing;    "

//@ assert pp != so;    " // BAD

//@ modifies \    othing;    "

//@ assert pp != soo;    " // BAD

//@ modifies \\everything;    "

//@ assert pp != soo;    " // OK

//@ modifies \\everything;    "

//@ assert pp != so;    " // OK

//@ modifies \    othing;    "

//@ assert pp != o && pp != oo;    " // BAD

//@ modifies \    othing;    " + "  public void m9b(Object p) {    " + "    Object pp = c1n(p);    "

//@ assert pp != so && pp != soo;    " // BAD

//@ modifies \    othing;    "

//@ ensures \\fresh(\\result);    "

//@ modifies \    othing;    "

//@ ensures \\result == null || \\fresh(\\result);    "

//@ modifies \    othing;    "

//@ ensures true;    "

//@ modifies \\everything;    "

//@ ensures \\result != null && \\fresh(\\result);    "

//@ modifies \\everything;    "

//@ ensures true;    "

//@ requires p != null && p != this;    " + "  //@ modifies \\everything;    "

//@ assume this.k == 0;    " + "    c1(p);    " // havoc

//@ assert this.k == 0;    " // OK

//@ requires p != null && p != this;    " + "  //@ modifies \\everything;    "

//@ assume sk == 0;    " + "    c1(p);    " // havoc

//@ assert sk == 0;    " // OK

//@ requires o != null;    " + "  //@ modifies o.*;    " + "  public void c1(TestJava o) { }     "

//@ requires o != null;    " + "  //@ modifies TestJava.*;    " + "  public void c2(TestJava o) { }     "

//@ requires p != null && p != this;    " + "  //@ modifies \\everything;    "

//@ assume k == 0;    " + "    c1(this);    " // havoc

//@ assert k == 0;    " // FAILS

//@ requires p != null && p != this;    " + "  //@ modifies \\everything;    "

//@ assume sk == 0;    " + "    c1(this);    " // havoc

//@ assert sk == 0;    " // OK

//@ requires o != null;    " + "  //@ modifies o.*;    " + "  public void c1(TestJava o) { }     "

//@ requires o != null;    " + "  //@ modifies TestJava.*;    " + "  public void c2(TestJava o) { }     "

//@ requires p != null && p != this;    " + "  //@ modifies \\everything;    "

//@ assume k == 0;    " + "    c2(this);    " // havoc

//@ assert k == 0;    " // OK

//@ requires p != null && p != this;    " + "  //@ modifies \\everything;    "

//@ assume sk == 0;    " + "    c2(this);    " // havoc

//@ assert sk == 0;    " // FAILS

//@ requires o != null;    " + "  //@ modifies o.*;    " + "  public void c1(TestJava o) { }     "

//@ requires o != null;    " + "  //@ modifies TestJava.*;    " + "  public void c2(TestJava o) { }     "

//@ modifies \\everything;    "

//@ assume k == 0;    "

//@ assert k == 0;    "

//@ requires i == 0;    "

//@ modifies \\everything;    "

//@ also requires i > 0;    "

//@ modifies \    othing;    "

//@ modifies \\everything;    " + "  public void m1a() {    " + "    //@ assume k == 0;    "

//@ assert k == 0;    " // FAILS

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "

//@ modifies \\everything;    " + "  public void m2() {    " + "    //@ assume sk == 0;    "

//@ assert sk == 0;    " + "  }    "

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "}");

//@ modifies \\everything;    " + "  public void m2a() {    " + "    //@ assume sk == 0;    "

//@ assert sk == 0;    " // FAILS

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "

//@ requires a != null && a.length > 10;    " + "  //@ modifies \\everything;    "

//@ assume a[0] == 0;    " + "    c1(1);    "

//@ assert a[0] == 0;    " + "  }    "

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "}");

//@ requires a != null && a.length > 10;    " + "  //@ modifies \\everything;    "

//@ assume a[0] == 0;    " + "    c1(0);    " // modifies

//@ assert a[0] == 0;    " // FAILS

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "

//@ requires sa != null && sa.length > 10;    " + "  //@ modifies \\everything;    "

//@ assume sa[0] == 0;    " + "    c1(1);    "

//@ assert sa[0] == 0;    " + "  }    "

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "}");

//@ requires sa != null && sa.length > 10;    " + "  //@ modifies \\everything;    "

//@ assume sa[0] == 0;    " + "    c1(0);    "

//@ assert sa[0] == 0;    " // FAILS

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "}"

//@ requires sa != null && sa.length > 10;    " + "  //@ modifies \\everything;    "

//@ assume a == \\old(a);    " + "    c1(1);    "

//@ assert a == \\old(a);    " + "  }    "

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "}");

//@ requires sa != null && sa.length > 10;    " + "  //@ modifies \\everything;    "

//@ assume a == \\old(a);    " + "    c1(0);    "

//@ assert a == \\old(a);    " // FAILS

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "

//@ modifies \\everything;    " + "  public void m6(/*@ non_null*/TestJava t) {    "

//@ assume t.k == 0;    " + "    c1(1);    " + "    //@ assert t.k == 0;    " + "  }    "

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "}");

//@ modifies \\everything;    " + "  public void m6a(/*@ non_null*/TestJava t) {    "

//@ assume t.k == 0;    " + "    c1(0);    " + "    //@ assert t.k == 0;    " // FAILS

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "

//@ modifies \\everything;    " + "  public void m7() {    " + "    c1(1);    "

//@ assert sk == \\old(sk);    " // Should be OK

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "}");

//@ modifies \\everything;    " + "  public void m7a() {    " + "    c1(0);    "

//@ assert sk == \\old(sk);    " // FAILS

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "

//@ modifies k,sk;    "

//@ assume k == 0 && sk == 0;    "

//@ assert sk == 0;    "

//@ modifies k,sk;    "

//@ assume k == 0 && sk == 0;    "

//@ assert sk == 0;    " // FAILS

//@ modifies k,sk;    "

//@ assume k == 0 && sk == 0;    "

//@ assert k == 0;    " + "  }    "

//@ modifies k,sk;    "

//@ assume k == 0 && sk == 0;    "

//@ assert k == 0;    " // FAILS

//@ requires i == 0;    "

//@ modifies k;    "

//@ also requires i > 0;    "

//@ modifies sk;    "

//@ requires i == 10;    "

//@ modifies t.k;    "

//@ also requires i == 0;    "

//@ modifies \    othing;    "

//@ requires a!=null && 0<=i && i<a.length;    "

//@ modifies a[i];    "

//@ requires b!=null && 0<=i && i<b.length;    "

//@ modifies b[i];    "

//@ modifies k,sk;    " + "  public void m3() {    " + "    //@ assume k == 0 && sk == 0;    "

//@ assert k == 0;    " + "  }    "

//@ modifies k,sk;    " + "  public void m3a() {    " + "    //@ assume k == 0 && sk == 0;    "

//@ assert k == 0;    " // FAILS

//@ requires a != null && a.length == 5;    "

//@ modifies a[0];    " + "  public void m4() {    "

//@ assume a[0] == 0 && a[1] == 1;    " + "    c3(0);    " + "    //@ assert a[1] == 1;    "

//@ requires a != null && a.length == 5;    " + "  //@ modifies a[0];    "

//@ assume a[0] == 0 && a[1] == 1;    " + "    c3(0);    "

//@ assert a[0] == 0;    " // FAILS

//@ requires i == 0;    " + "  //@ modifies k;    " + "  //@ also requires i > 0;    "

//@ modifies sk;    " + "  public void c1(int i) { }     "

//@ requires i == 10;    " + "  //@ modifies t.k;    " + "  //@ also requires i == 0;    "

//@ modifies \    othing;    " + "  public void c2(int i, TestJava t) {}    "

//@ requires a!=null && 0<=i && i<a.length;    " + "  //@ modifies a[i];    "

//@ requires b!=null && 0<=i && i<b.length;    "

//@ modifies b[i];    " + "  public void c4(int i) {}    " + "

//@ requires b != null && b.length == 5;    "

//@ modifies b[0];    "

//@ assume b[0] == 0 && b[1] == 1;    "

//@ assert b[1] == 1;    "

//@ requires b != null && b.length == 5;    "

//@ modifies b[0];    "

//@ assume b[0] == 0 && b[1] == 1;    "

//@ assert b[0] == 0;    " // FAILS

//@ requires b != null && b.length == 5;    "

//@ modifies b[0];    "

//@ assume b[0] == 0 && b[1] == 1;    "

//@ requires a != null && b != null && b.length == 5  && a.length ==5;    "

//@ modifies a[0],b[0];    "

//@ assume b[0] == 0 && b[1] == 1;    "

//@ assert b[1] == 1;    "

//@ requires i == 0;    "

//@ modifies k;    "

//@ also requires i > 0;    "

//@ modifies sk;    "

//@ requires i == 10;    "

//@ modifies t.k;    "

//@ also requires i == 0;    "

//@ modifies \    othing;    "

//@ requires a!=null && 0<=i && i<a.length;    "

//@ modifies a[i];    "

//@ requires b!=null && 0<=i && i<b.length;    "

//@ modifies b[i];    "

//@ public invariant a != null && a.length == 10;    "

/*@ assignable a; */
//@ modifies a[*];    "

//@ assume a[0] == 0 && a[2] == 2;    "

//@ assert a[0] == 0;    "

//@ modifies a[*];    "

//@ assume a[0] == 0 && a[2] == 2;    "

//@ assert a[2] == 3;    " // FAILS

//@ modifies a[2 .. 4];    "

//@ modifies a[*];    "

//@ modifies a[2 .. ];    "

//@ public invariant a != null && a.length == 10;    "

//@ assignable a;    "

//@ modifies a[*];    "

//@ assume a[0] == 0 && a[2] == 2;    "

//@ assert a[0] == 0;    " // FAILS

//@ modifies a[*];    "

//@ assume a[0] == 0 && a[2] == 2;    "

//@ assert a[2] == 2;    " // FAILS

//@ modifies a[2 .. 4];    "

//@ modifies a[*];    "

//@ modifies a[2 .. ];    "

//@ public invariant a != null && a.length == 10;    "

//@ assignable a;    "

//@ modifies a[*];    "

//@ assume a[0] == 0 && a[2] == 2;    "

//@ assert a[0] == 0;    "

//@ modifies a[*];    "

//@ assume a[0] == 0 && a[9] == 2;    "

//@ assert a[9] == 2;    " // FAILS

//@ modifies a[2 .. 4];    "

//@ modifies a[*];    "

//@ modifies a[2 .. ];    "

//@ modifies \\everything;    " + "  public void z() {    " + "  }    "

//@ modifies \\everything;    " + "  public void m1() {    " + "    //@ assume a == 15 && fa == 13;    "

//@ assert fa == 13;    " // Should be OK

//@ assert a == 15;    " // Should fail

//@ assert fsa == 13;    " // OK

//@ assert fa == 15;    " // OK

//@ modifies \\everything;    " + "  public void m1() {    " + "    //@ assert fsa == 13;    " // Should

//@ assert fa == 15;    " // Should be OK

//@ modifies \\everything;    " + "  public void m2() {    " + "    //@ assert a == 17;    " // Not

//@ modifies \\everything;    " + "  public void m3() {    " + "    //@ assert fb == 16;    " // Not

/*@ code_bigint_math*/
//@ requires i >= 0;    " + "  //@ modifies k;    " + "  //@ ensures k == 10;    "

//@ signals (Exception e) k<0; signals_only Exception;    "

//@ requires i >= 0;    " + "  //@ modifies k;    " + "  //@ ensures k == 10;    "

//@ signals (Exception e) k==-11;    " + "  //@ signals_only Exception;    "

//@ requires i >= 0;    " + "  //@ modifies k;    " + "  //@ ensures k == 10;    "

//@ signals (Exception e) k==-12;    " + "  //@ signals_only Exception;    "

//@ requires i >= 0;    " + "  //@ modifies k;    " + "  //@ ensures k == 10;    "

//@ signals (Exception e) k==-13;    " // FAILS

//@ signals_only Exception;    " + "  public void m3a(int i) {    " + "    m(0);    "

//@ requires i >= 0;    " + "  //@ modifies k;    " + "  //@ ensures \\result == 12;    "

//@ signals (Exception e) false;    " + "  public int m4(int i) {    "

//@ requires i >= 0;    " + "  //@ modifies k;    " // Line

//@ ensures false;    " + "  //@ signals (Exception e) k == -11;    "

//@ signals_only Exception;    " + "  public int m5(int i) {    "

//@ requires i >= 0;    " + "  //@ modifies k;    " + "  //@ ensures false;    "

//@ signals (Exception e) k == -12;    " // Line 60

//@ signals_only Exception;    " + "  public int m6(int i) {    "

//@ requires i == 0;    " + "  //@ modifies k;    " + "  //@ ensures k>0 && \\result == i+1;    "

//@ signals (Exception e) false;    " + "  //@ also     " + "  //@ requires i > 0;    " // Line

//@ modifies k;    " + "  //@ ensures false;    " + "  //@ signals (Exception e) k == -10-i;    "

//@ signals_only Exception;    " + "  public int m(int i) {    " + "    if (i > 0) {    "

//@ code_bigint_math     " + "public class TestJava {     "

/*@ non_null*/
//@ requires false;    " + "  public static boolean bf(boolean bb) { return true; }    "

//@ requires true;    " + "  public static boolean bt(boolean bb) { return true; }    "

//@ static public invariant b;    "

//@ requires !b;    " + "  public static boolean bq(boolean bb) { return true; }    " + "


//@ ghost nullable Object oo;    " + "  //@ public static invariant bstatic;    "

//@ public invariant binstance;    " + "  //@ public initially binstance2;    "

//@ public constraint binstance2 == \\old(binstance2);    "

//@ public static constraint bstatic == \\old(bstatic);    "

/*@ non_null*/
//@ requires true;    " + "  //@ ensures \\result;    "

//@ requires false;    " + "  //@ ensures true;    " + "  public static int i(int ii) { return 0; }    "

//@ requires ii == 10;    " + "  //@ ensures true;    "

/*@ set oo = null;*/
//@ requires ii == 10;    " + "  //@ ensures true;    "


/*@ set oo = null;*/
//@ requires ii == 10;    " + "  //@ ensures true;    "

//@ requires ii == 10;    " + "  //@ ensures true;    "

//@ requires bb;    "

//@ ensures true;    "

/*@ assume b; */
/*@assert false;*/
//@ requires bb;    " + "  //@ ensures true;    "

/*@ assume b; */
/*@assert !bb;*/
//@ requires bb;    " + "  //@ ensures true;    "

/*@ assume bb; */
/*@assert b;*/
//@ requires bb;    "

//@ ensures true;    "

/*@assume z==1 ;*/
/*@ assert false; */
//@ requires bbb;    "

/*@assume true;*/
/*@assume !b;*/
/*@ assert !bb; */
//@ requires b;    "

/*@assume true;*/
/*@assume !b;*/
/*@ assert !bb; */
//@ requires bb;    "

//@ ensures true;    "

/*@assume 0==x ;*/
/*@ assert true; */
/*@ assume !bb; assume bb;*/
/*@assume bb; assume !bb; */
/*@assume bb; assume !bb; */
/*@assume bb; assume !bb; */
/*@ assume b; */
/*@ assume !b; */
/*@ assert k == 0; */
/*@ assert k != 0; */
/*@ assert i == 10; assert k == 16; */
/*@ assert k == 10; */
/*@ assert k == 11; */
/*@ assert k == 11; */
/*@ code_java_math*/
//@ static public constraint i > \\old(i);    "

//@ modifies i;    "

//@ ensures true;    "

/*@ code_bigint_math*/
//@ modifies i;    " + "  //@ ensures i == \\old(i)+2;    "

//@ modifies i;    "

//@ ensures i == \\old(i+1);    " + "  public static void bbad() { i = i - 1; }    " + "

/*@ code_java_math spec_java_math*/
//@ modifies i;    "

//@ ensures i == \\old(i)+2;    "

//@ modifies i;    "

//@ ensures i == \\old(i+1);    "

/*@ code_java_math spec_java_math*/
//@ modifies i;    "

//@ ensures i == \\old(i)+2;    "

/*@ assert i == i@x + 1 && i == (i+1)@x; */
//@ modifies i;    "

//@ ensures i == \\old(i+1);    "

/*@ assert i == i@x + 1; */
//@ modifies i;    "

/*@ assert i == this.i@x + 1; */
//@ requires a.length > 10 && a[0] >= 0;    "

//@ modifies i;    "

/*@ assert a[0]@x > -1; */
/*@ code_java_math spec_java_math*/
/*@ assert i <<< i || true; */
/*@ assert i <<<= i || true; */
//@ requires 0<=ii && ii <=3;    "

//@ ensures ii<=0 ==> \\result ==-ii;    "

//@ requires ii > -2147483648;    " // Not using

//@ ensures \\result == -ii;    "

/*@ assert i!=0; */
/*@ assert i==0; */
//@ requires ii == 10;    " + "  //@ ensures true;    "


//@ requires ii == 10;    "

//@ ensures true;    " + "  public @NonNull Object inst2(int ii) {  return null; }    " + "

//@ requires ii == 10;    " + "  //@ ensures true;    "

//@ requires ii == 10;    "

//@ ensures true;    " + "  public          Object inst2(int ii) {  return null; }    " + "

//@ requires ii == 10;    " + "  //@ ensures true;    "

//@ requires ii == 10;    " + "  //@ ensures true;    "

//@ requires ii == 10;    " + "  //@ ensures true;    "

//@ requires ii == 10;    "

//@ ensures true;    " + "  public          Object inst2(int ii) {  return null; }    " + "

/*@ non_null*/

/*@ non_null*/

/*@ non_null*/
/*@ non_null*/
//@ ensures \\result != null;    "


//@ ensures \\result != null;    "


//@ ensures \\result != null;    "

//@ ensures \\result != null;    "



//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ requires i>0;    " + "  //@ modifies j;    "

//@ ensures j == -i;    " + "  static public void m(int i) { j = -i; }    " + "  //@ requires i>1;     "

//@ modifies j;    " + "  //@ ensures \\result == -i;    "

//@ modifies j;    "

//@ ensures \\result == j;    " + "  public int instbad(boolean b, int i) { m(i); return j; }    "

//@ modifies j;    " + "  //@ ensures \\result == i;    "

//@ requires i>0;    "

//@ modifies j;    "

//@ ensures j == -i;    "

//@ requires i>1;     "

//@ modifies j;    "

//@ ensures \\result == -i;    "

//@ modifies j;    "

//@ ensures \\result == j;    "

//@ modifies j;    "

//@ ensures \\result == i;    "

/*@ code_bigint_math*/
//@ requires i>0;    "

//@ modifies j;    "

//@ ensures j == i+1 && \\result == j;    "

//@ requires i>1;     "

//@ modifies j;    "

//@ ensures \\result == \\old(i)+1;    "

//@ requires i>1;     "

//@ modifies j;    "

//@ ensures \\result == \\old(i)+3;    "

//@ requires i>1;     "

//@ modifies j;    "

//@ ensures \\result == 3*i+4;    "

//@ ensures j == i + 1;    "

//@ requires i>1;     "

//@ modifies j;    "

//@ ensures \\result == \\old(i);    "

//@ requires i>1;     "

//@ modifies j;    "

//@ ensures \\result == \\old(i)+4;    "

//@ requires i>1;     "

//@ modifies j;    " // Line 30

//@ ensures \\result == 3*i+4;    "

//@ ensures j == i + 2;    "

/*@ code_java_math*/
//@ assignable \    othing; ensures \\result == j;    "

//@ modifies j,sj;    "

//@ ensures \\result == \\old(j);    "

//@ modifies j,sj;    "

//@ ensures \\result == j;    "

//@ modifies j,sj;    "

//@ ensures \\result == sj;    "

//@ requires o!=null && p != null && o.j == 1 && p.j == 2 && j == 3;    "

//@ modifies j,sj,o.j,o.sj,p.j,p.sj;    "

//@ ensures \\result == 6;    "

//@ requires o!=null && p != null && o.j == 1 && p.j == 2 && j == 3 && o!=this && p!= this;    "

//@ modifies j,sj,o.j,o.sj,p.j,p.sj;    "

//@ ensures \\result == 6;    "

/*@ assert (\\lbl OJ o.j) + (\\lbl PJ p.j) + (\\lbl JJ j) == 6; */
//@ requires o!=null && p != null && o.j == 1 && p.j == 2 && j == 3;    "

//@ modifies j,sj,o.j,o.sj,p.j,p.sj;    "

//@ ensures \\result == 6;    "

//@ modifies j,sj;    " + "  //@ ensures \\result == 6;    "

//@ requires o!=null && p != null && sj == 3;    "

//@ modifies j,sj,o.j,o.sj,p.j,p.sj;    "

//@ ensures \\result == 9;    "

//@ assume a != null && a.length > 2 && a[0] == 1;    "

//@ loop_invariant (\\forall int k; 0<=k && k < \\count; b ==> a[k] > 0);    "

//@ assert b ==> a[1] > 0;    " + "  }    " + "}");

/*@ loop_invariant 0<=i && i<=5 && n==i; decreases 5-i; */
/*@ assert n == 5; */
/*@ loop_invariant 0<=i && i<=5 && n==i; decreases 3-i; */
/*@ assert n == 5; */
/*@ loop_invariant 0<=i && i<5 && n==i; decreases 5-i; */
/*@ assert n == 5; */
/*@ loop_invariant 0<=i && i<=5 && n==i-1; decreases 5-i; */
/*@ loop_invariant i>0; decreases i; */
/*@ reachable; */
/*@ loop_invariant i>=0; decreases i-2; */
/*@ assert i == 0; */
/*@ loop_invariant i>=0; decreases i; */
/*@ assert i == 0; */
/*@ code_java_math */
/*@ loop_invariant  i>0; decreases i; */
/*@ assert i == 0; */
/*@ code_bigint_math */
/*@ loop_invariant i>=0; decreases i-2; */
/*@ assert i == 0; */
/*@ code_bigint_math */
/*@ loop_invariant i>=0; decreases i; */
/*@ assert i == 0; */
/*@ code_bigint_math*/
/*@ loop_invariant i<=5 && i>=0; decreases i; */
/*@ assert i == 0; */
/*@ loop_invariant i<=5 && i>=0; decreases i-2; */
/*@ assert i == 0; */
/*@ loop_invariant i<=5 && i>=0; decreases i; */
/*@ assert i == 0; */
/*@ loop_invariant i<=5 && i>0; decreases i; */
/*@ assert i == 0; */
/*@ loop_invariant i>=0; decreases i; */
/*@ assert i == 0; */
/*@ loop_invariant i>=0; decreases i; */
/*@ assert i == 0; */
/*@ loop_invariant i>=0; decreases i; */
/*@ assert i == 0; */
/*@ assert i == 6; */
/*@ assert i == 5; */
/*@ assert i == 4; */
/*@ assert i == 5; */
/*@ assert i == 6; */
/*@ assert i == 5; */
/*@ assert i == 4; */
/*@ assert i == 5; */
/*@ assert j == 5; */
/*@ assert j == 6; */
/*@ assert j == 5; */
/*@ assert j == 4; */
/*@ assert j == 6; */
/*@ assert j == 5; */
/*@ assert j == 4; */
/*@ assert j == 5; */
/*@ assert i == 12; */
/*@ assert i == 5; */
/*@ assert i == 12 && i == j; */
/*@ assert i == 5; */
/*@ assert i == -2; */
/*@ assert i == 5; */
/*@ assert i == -2 && i == j; */
/*@ assert i == 5; */
/*@ assert i == 5*7; */
/*@ assert i == 5; */
/*@ assert i == 5*7 && i == j; */
/*@ assert i == 5; */
/*@ assert i == 5/7; */
/*@ assert i == 5; */
/*@ assert i == 5/7 && i == j; */
/*@ assert i == 5; */
//@ requires i > -2147483648;    "

/*@ assert j >= 0; */
//@ requires i > -2147483648;    "

/*@ assert j == -1; */
/*@ assume i > 0; */
/*@ assert (\\lblpos ISP i>0); */
/*@ assume i > 0; */
/*@ assert (\\lblneg ISN i<0); */
/*@ assume i > 0; */
/*@ assert !(\\lblneg ISN2 i>0); */
/*@ assume i > 0; */
/*@ assert (\\lblpos ISP i<0); */
/*@ assume i > 0; */
/*@ assert !(\\lblpos ISP2 i>0); */
/*@ assert o != oo;*/
/*@ assert o == oo;*/
/*@ assert o != null;*/
/*@ assert o == null;*/
/*@ assert o != oo;*/
/*@ assert o == oo;*/
/*@ assert o != null; assert o.length == 5; */
/*@ assert o.length == 6;*/
/*@non_null*/
/*@ assert a.length >= 0;*/
/*@ assert o != oo;*/
/*@ assert o == oo;*/
/*@ assert o.length == 3; assert o[1] == 11;*/
/*@ assert o.length == 4; */
/*@ assert o.length == 3; assert o[1] == 10;*/
/*@ assert o != null; assert o.length == 3; assert o[1] == 11;*/
/*@ assert o.length == 3; assert o[1] != null; assert o[1].length == 3; assert o[1][2] == 14; assert o[0] != null; assert o[0].length == 2; assert o[0][1] == 11; */
/*@ assert o.length == 3; assert o[1] != null; assert o[1].length == 3; assert o[1][2] == 14; assert o[0] != null; assert o[0].length == 2; assert o[0][1] == 11; */
/*@ assert o.length == 3; assert o[1] == null; assert o[2] != null; assert o[2].length == 1; assert o[2][0] == 15; */
/*@ assert oo[0] != oo[1]; */
/*@ assert o != oo;*/
/*@ assert o == oo;*/
/*@ assert o.length == 5; assert o[1].length == 3; */
/*@ assert o.length == 6;*/
/*@ assert o[1].length == 4;*/
/*@non_null*/
/*@ assert a.length >= 0;*/
/*@ assert o.length == 3; */
/*@ assert o.length == 2; */
/*@ assert o[1][2] == 14; */
/*@ assert o[2].length == 1; */
/*@ assert o[0].length == 2; */
/*@ assert o != null; assert o.length == 5; assert o[1] == null; */
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assume a[1] == 2; */
/*@ assert a[1] == 2; */
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assume a[1] == 2; */
/*@ assert a[1] == 3; */
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assume a[1] == 2; */
/*@ assert a[1] == 3; */
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assume a[1] == 2; */
/*@ assert a[1] == 4; */
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assume a[0] == 2; */
/*@ assert a[0] == 2; */
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assume a[0] == 2; */
/*@ assert a[0] == 4; */
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assume a[1] == 2; */
/*@ assert a[1] == 3; */
/*@ assert a[1] == 4; */
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assume a[1] == 2; */
/*@ assert a[1] == 3; */
/*@ assert a[1] == 5; */
/*@non_null*/
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assert a[0] == b[0]; */
/*@non_null*/
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assert a[0] != b[0]; */
/*@non_null*/
/*@non_null*/
/*@ assume b.length == 10 && a.length == 10;*/
/*@ assert b[0] == 7; */
/*@non_null*/
/*@non_null*/
/*@ assume b.length == 10 && a.length == 10;*/
/*@ assert b[0] == 8; */
/*@non_null*/
/*@non_null*/
/*@ assume b.length == 10 && a.length == 12;*/
/*@ assert b != null; assert a != null; assert b.length == 12; assert a.length == 12; */
/*@non_null*/
/*@assume a.length == 10; assume a[1] != null; assume a[1].length == 5; */
/*@ assume a[1][2]; */
/*@ assert a[1][2]; */
/*@non_null*/
/*@assume a.length == 10; assume a[1] != null; assume a[1].length == 5; */
/*@ assume a[1][2]; */
/*@ assert !a[1][2]; */
/*@non_null*/
/*@assume a.length == 10; assume a[1] != null; assume a[1].length == 5; */
/*@ assume a[1][2]; */
/*@ assert !a[1][2]; */
/*@non_null*/
/*@assume a.length == 10; assume a[1] != null; assume a[1].length == 5; */
/*@ assume a[1][2]; */
/*@ assert a[1][3]; */
/*@non_null*/
/*@assume a.length == 10; assume a[1] != null; assume a[1].length == 5; */
/*@ assume a[1][2]; */
/*@ assert a[0][2]; */
/*@non_null*/
/*@assume a.length == 10; assume a[1] != null; assume a[1].length == 5; */
/*@ assume a[1][2]; assume a[0] != null; */
/*@ assert a[0][2]; */
/*@non_null*/
/*@assume a.length == 10; assume a[1] != null; assume a[1].length == 5; */
/*@ assume a[1][2]; assume a[0] != null; assume a[0].length > 5; */
/*@ assert a[0][2]; */
/*@non_null*/
/*@assume a.length == 10; assume a[1] != null; assume a[0] != null; assume a[1].length == 5; assume a[0].length == 3; */
/*@ assume a[0][0]; */
/*@ assert a[0][0]; */
/*@non_null*/
/*@assume a.length == 10; assume a[1] != null; assume a[0] != null; assume a[1].length == 5; assume a[0].length == 3; */
/*@ assume a[0][0]; */
/*@ assert !a[0][0]; */
/*@non_null*/
/*@assume a.length == 10; assume a[1] != null; assume a[1].length == 5; */
/*@ assert a[0][3] == a[1][3]; */
/*@non_null*/
/*@assume a.length == 10; assume a[1] != null; assume a[1].length == 5; */
/*@ assert a[0][3] != a[1][3]; ; */
/*@non_null*/
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assert a[0] == b[0]; */
/*@non_null*/
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assert a[0] != b[0]; */
/*@non_null*/
/*@non_null*/
/*@ assume b.length == 10 && a.length == 10 && b[0] != null && a[0] != null && b[0].length == 5 && a[0].length==6;*/
/*@ assert !b[0][0]; */
/*@non_null*/
/*@non_null*/
/*@ assume b.length == 10 && a.length == 10 && b[0] != null && a[0] != null && b[0].length == 5 && a[0].length==6;*/
/*@ assert b[0][0]; */
/*@non_null*/
/*@non_null*/
/*@ assume b.length == 10 && a.length == 12;*/
/*@ assert b != null; assert a != null; assert b.length == 12; assert a.length == 12; */
/*@ nullable_by_default */
//@ public static invariant t != null;     "

/*@non_null*/
/*@ assume t.f == 2; */
/*@ assert t.f == 2; */
/*@non_null*/
/*@ assume t.f == 2; */
/*@ assert t.f == 3; */
/*@non_null*/
/*@ assume t.f == 2; */
/*@ assert t.f == 3; */
/*@non_null*/
/*@ assume t.f == 2; */
/*@ assert t.f == 4; */
/*@non_null*/
/*@ assume t.g == 2; */
/*@ assert t.g == 2; */
/*@non_null*/
/*@ assume t.g == 2; */
/*@ assert t.g == 4; */
/*@non_null*/
/*@ assume t.f == 2; */
/*@ assert t.f == 3; */
/*@ assert t.f == 4; */
/*@non_null*/
/*@ assume t.f == 2; */
/*@ assert t.f == 3; */
/*@ assert t.f == 5; */
/*@non_null*/
/*@non_null*/
/*@ assert a.f == b.f; */
/*@non_null*/
/*@non_null*/
/*@ assert a.f != b.f; */
/*@non_null*/
/*@non_null*/
/*@ assert b.f == 7; */
/*@non_null*/
/*@non_null*/
/*@ assert b.f == 8; */
/*@non_null*/
/*@non_null*/
/*@ assert a.sf == b.sf; */
/*@non_null*/
/*@non_null*/
/*@ assert a.sf != b.sf; */
/*@non_null*/
/*@non_null*/
/*@ assert 3 == b.sf; */
/*@non_null*/
/*@non_null*/
/*@ assert 3 != b.sf; */
/*@non_null*/
/*@ assert f == this.f; */
/*@ assert a == this ==> a.f == f; */
/*@non_null*/
/*@ assert f == this.f; */
/*@ assert a.f == f; */
/*@non_null*/
/*@ assert sf == this.sf; */
/*@ assert a.sf == sf; */
/*@ assume i>=-1 && i <=1; */
/*@ assert j!=0; */
/*@ assume i>=-1 && i <=1; */
/*@ assert j==1; */
/*@ assume i>=-1 && i <=1; */
/*@ assert j>0; */
/*@ assume i>=-1 && i <=1; */
/*@ assert i==0 ==> j==-1; */
/*@ assume i>=-1 && i <=1; */
/*@ assert j>=0; */
/*@ assume i>=-1 && i <=1; */
/*@ assert j>0; */
/*@ assume i>=-1 && i <=1; */
/*@ assert j>=0; */
//@ ensures i == 2;    "

//@ ensures i == 1;    "

//@ public exceptional_behavior requires b;  signals (Exception e) true; signals (RuntimeException e) true;    "

//@ also    " + "//@ public normal_behavior requires !b; ensures true;    "

//@ requires k < 0;    " + "//@ ensures true;    " + "//@ also    " + "//@ requires k > 0;    "

//@ ensures \\result == 1;    " + "public int m1() {    " + "    int i = 1;    " + "    try {    "

//@ assert e != null;    " + "        i = 2;    " + "    }    "

//@ requires k < 0;    " + "//@ ensures true;    " + "//@ also    " // Line

//@ requires k > 0;    " + "//@ ensures \\result == 1;    " + "public int m2() {    " + "    int i = 1;    "

//@ assert e != null;    " + "        i = 1;    " // Line

//@ requires i > 0;    " + "  //@ ensures i > 0;    "

/*@ assert a*2 == a + a; */
/*@ assert a * b ==
                // a *(b-1) + a; */
/*@ assert (2*a)/2 == a; */
/*@ assert a >= 0 ==> (a%3) < 3; */
/*@ assert a >= 0 ==> (a%3) >= 0; */
/*@ assert (a >= 0
                // && b > 0) ==> (a%b) >= 0; */
/*@ assert (a >= 0
                // && b > 0) ==> ((a*b)%b) == 0; */
/*@ assert (a >= 0 ) ==> ((5*a)%5) == 0; */
//@ requires i < 1000; ensures \\result == i+1;    "

//@ pure     "

/*@ assume a < 100; */
/*@ assert k == m(a); */
/*@ assume a < 100; */
/*@ assert k == m(a); */
/*@ assume a < 100; */
/*@ assert k == m(a) + m(a); */
/*@ assume a < 100; */
/*@ assert k == 1 + m(a) + m(a); */
/*@ assume a < 100; */
/*@ assert k == m(m(a+1)); */
/*@ assume a < 100; */
/*@ assert k == m(m(a+1)); */
//@ requires i < 1000; ensures \\result == i+1;    "

//@ pure     "

/*@ assume a < 100; */
/*@ assert k == m(a); */
/*@ assume a < 100; */
/*@ assert k == m(a); */
/*@ assume a < 100; */
/*@ assert k == m(a) + m(a); */
/*@ assume a < 100; */
/*@ assert k == 1 + m(a) + m(a); */
/*@ assume a < 100; */
/*@ assert k == m(m(a+1)); */
/*@ assume a < 100; */
/*@ assert k == m(m(a+1)); */
/*@ code_bigint_math*/
//@ ensures \\result == z+1;    " + "  //@ pure     "

/*@ assert k == m(); */
/*@ assert k == m(); */
/*@ assert k == m() + m(); */
/*@ assert k == 1 + m() + m(); */
/*@ assert k == m(); */
/*@ assert k == m(); */
/*@ code_bigint_math*/
//@ ensures \\result == z+1;    "

//@ pure     "

/*@ assert k == m(); */
/*@ assert k == m(); */
/*@ assert k == m() + m(); */
/*@ assert k == 1 + m() + m(); */
//@ ensures \\result > 0;    "

//@ also    "

//@ ensures \\result > ii;    "

/*@ code_bigint_math*/
//@ also public normal_behavior    "

//@ ensures \\result == i+1;    "

//@ pure    "

//@ requires a >= 0;    "

//@ ensures \\result == a+1;    "

//@ requires iii > 0;    " + "  //@ ensures \\result > 0;    " + "  abstract public int m(int iii);    "

//@ also    "

//@ ensures \\result > ii;    " + "  abstract public int m(int ii);    " + "}    "

/*@ code_bigint_math*/
//@ also    "

//@ ensures \\result == i+1;    " + "  //@ pure    " + "  public int m(int i) { return i+1; }    "

//@ ensures \\result == a+1;    " + "  public int n1(int a) { return m(a); }    "

//@ requires iii > 0;    " + "  //@ ensures \\result > 0;    " + "  abstract public int m(int iii);    "

//@ also    "

//@ requires ii > 0;    " + "  //@ ensures \\result > ii;    " + "  abstract public int m(int ii);    "

/*@ code_bigint_math*/
//@ also    "

//@ requires i > 0;    " + "  //@ ensures \\result == i+1;    " + "  //@ pure    "

//@ requires iii == 1;    "

//@ ensures \\result == iii;    "

//@ also    "

//@ requires ii == 2;    "

//@ ensures \\result == ii;    "

/*@ code_bigint_math*/
//@ also    "

//@ requires i == 3;    "

//@ ensures \\result == i;    "

//@ pure    "

//@ requires a >= 1 && a <= 3;    "

//@ ensures \\result == a;    "

//@ ensures \\result == a;    "

//@ requires 0<=ii && ii <=3;    "

//@ ensures \\result < 0;    " + "  public static int m(int ii) {     "

//@ requires ii == 2;    " + "  //@ ensures \\result == 0;    "

//@ ensures is == 6;    "

//@ ensures \\result == 1;    " + "  public static int m4(int ii) {     " + "    try { ii = 0;     "

//@ assert c == 1;     " + "    return c;     " + "  }    " + "

//@ ghost int d = c+1;    " + "    //@ assert d + c == 9;     " + "    return c;     "

//@ ghost int d = c+1;    " + "    //@ assert d + c == 10;     " + "    return c;     "

//@ ghost int d = c+1;    " + "    //@ set d = 10;    " + "    //@ assert d + c == 14;     "

//@ ghost int d = c+1;    " + "    //@ set d = 10;    " + "    //@ assert d + c == 15;     "

//@ ghost int d = c+1;    " + "    //@ debug d = 10;    " + "    //@ assert d + c == 14;     "

//@ ghost int d = c+1;    " + "    //@ debug d = 10;    " + "    //@ assert d + c == 15;     "

/*@ nullable_by_default */
/*@non_null*/
//@ requires o != null;    "

//@ public normal_behavior  ensures \\result == (oo != null);    "

/*@ nullable_by_default */
/*@non_null*/
//@ requires o != null;    " + "  public static void m2(TestJava o) {     " + "    int i = o.z();     "

//@ public normal_behavior  ensures \\result == (oo != null);    "

//@ signals_only \    othing;      public int z() { return 0; }    " + "

/*@non_null*/
//@ requires o != null;    " + "  public static void m2(TestJava o) {     " + "    int i = o.z();     "

//@ public normal_behavior  ensures \\result == (oo != null);    "

//@ signals_only \    othing;      public static int z() { return 0; }    " + "}");

/*@ nullable_by_default */
/*@ code_java_math spec_java_math*/
//@ requires a != null;    "

//@ requires a != null;    "

//@ assume a.length == 1;     "

/*@ non_null*/
/*@ non_null*/
/*@ nullable_by_default */
//@ assume o.j == 1;     " + "  }    "

/*@non_null*/
//@ assume o.j == 1;     " + "  }    "

//@ requires o != null;    " + "  public static void m2(TestJava o) {     "

//@ assume o.j == 1;     " + "  }    " + "  public static void m3(TestJava o) {     "

//@ assume o != null && o.j == 1;     " + "  }    " + "  public static void m4(TestJava o) {     "

//@ assume o == null || o.j == 1;     " + "  }    " + "  public static void m5(TestJava o) {     "

//@ assume o != null ==> o.j == 1;     " + "  }    " + "

/*@ nullable_by_default */
//@ assume o.j == 1;     " + "  }      "

//@ assume a[0] == 1;     " + "  }    "

//@ requires a != null;    " + "  public static void m2(int[] a) {     "

//@ assume a[-1] == 1;     " + "  }    " + "  //@ requires a != null;    "

//@ assume a.length == 1;     "

//@ assume a[1] == 1;     " + "  }    " + "  public static void m4(int i, int j) {     "

//@ assume i/j == 4;     " + "  }    " + "  public static void m5(int i, int j) {     "

//@ assume i%j == 4;     " + "  }    " + "  public static void m6(RuntimeException r) {     "

//@ assume ((Exception)t) != null ? true : true;     " // OK

//@ assume ((RuntimeException)t) != null ? true : true ;     " + "  }    "

/*@ non_null*/
//@ assume ((Exception)t) != null ? true : true;     " + "  }    "

/*@ non_null*/
//@ assume ((RuntimeException)t) != null ? true : true ;     " + "  }    " + "

/*@ nullable_by_default */
//@ assume o.j == 1;     "

//@ assert o.j == 1 ? true : true;     "

//@ ghost int i = o.j;     "

//@ ghost int i; debug i = o.j;     "

//@ requires o.j == 1;    "

//@ ensures t.j == 1 ? true : true;    "

//@ ghost int i; set i = o.j;     "

/*@ nullable_by_default */
//@ assume o.j == 1;     "

/*@ nullable_by_default */
//@ public invariant t.j ==1 ? true: true;    " + "

/*@ nullable_by_default */
//@ public initially t.j ? true : true;    " + "

/*@ nullable_by_default */
//@ public constraint t.j ==1 ? true: true;    " + "

/*@ nullable_by_default */
//@ assert i == 1;    "

//@ assert i == 2;    "

//@ assert i == 2;    " + "  }    " + "  public void mp() {    "

//@ assert i == 2 && j == 3;    " + "  }    " + "  public void ma() {    " + "    int i = 0;    "

//@ assert i == 1;    " + "  }    " + "  public void m1(int k) {    "

//@ assume k == 0;     " + "    try {    " + "      try {    "

//@ assert i == 2 && j == 50;    "

//@ assume k == 0;     " + "    try {    " + "    try {    " + "      try {    "

//@ assert i == 2 && j == 50;    " + "    }    "

//@ assert i == 0;    " + "  }    "

//@ assert i == 0;    "

//@ public normal_behavior     "

//@   requires i != 1 & i != 2;    "

//@   ensures \\result == 0;    "

//@ also public exceptional_behavior     "

//@   requires i == 2 && ee != null;     "

//@   signals (ArrayIndexOutOfBoundsException ex) true;     "

_by_default     "

//@ public normal_behavior     "

//@   requires i != 1 & i != 2;    "

//@   ensures \\result == 0;    "

//@ also public exceptional_behavior     "

//@   requires i == 2;     "

//@   signals (ArrayIndexOutOfBoundsException ex) true;     "

//@ public normal_behavior     "

//@   requires e != null & ee != null & ae != null;    "

//@   requires i != 1 & i != 2;    "

//@   ensures \\result == 0;    "

//@ also public exceptional_behavior     "

//@   requires e != null & ee != null & ae != null;    "

//@   requires i == 2;     "

//@   signals (ArrayIndexOutOfBoundsException ex) true;     "

/*@non_null*/
//@ assume \\typeof(o) == \\type(Object);    "

//@ assert \\typeof(o) == \\typeof(o);    "

//@ assert \\typeof(o) == \\type(Object);    "

//@ assert \\typeof(o) <: \\type(Object);    "

//@ assert \\typeof(o) <:= \\type(Object);    "

/*@non_null*/
//@ assume \\typeof(o) == \\type(Object);    "

//@ assert \\typeof(o) != \\type(Object);    "

/*@non_null*/
//@ assume \\typeof(o) == \\type(Object);    "

//@ assert \\typeof(o) == \\type(Object);    "

/*@non_null*/
//@ assume \\typeof(o) == \\type(Object);    "

//@ assert \\typeof(o) == \\type(TestJava);    "

/*@non_null*/
//@ assume \\typeof(o) == \\type(Object);    "

//@ assert \\type(TestJava) <: \\typeof(o);    "

//@ assert \\type(TestJava) <:= \\typeof(o);    "

/*@non_null*/
//@ assume \\typeof(o) == \\type(TestJava);    "

//@ assert \\typeof(o) <: \\type(Object);    " + "  }    "

/*@non_null*/
//@ assert \\typeof(o) <: \\type(Object);    " + "  }    " + "}");

/*@non_null*/
//@ assert JML.erasure(\\typeof(o)) == o.getClass();    "

//@ requires i >= 0;    " + "  //@ ensures i>0;    " + "  //@ signals (Exception e) i == 0;    "

//@ requires i >= 0;    " + "  //@ ensures i>0;    " + "  //@ signals (Exception e) i == 1;    " // FAILS

//@ requires i >= 0;    " + "  //@ ensures i>0;    " + "  //@ signals (Exception e) i == 0;    " // OK

//@ requires i >= 0;    " + "  //@ ensures i>0;    " + "  //@ signals (RuntimeException e) i == 1;    " // FAILS

//@ requires i >= 0;    " + "  //@ ensures i>0;    " + "  //@ signals (Exception e) i == 0;    "

//@ requires i >= 0;    "

//@ ensures i>0;    " + "  //@ signals (Exception e) i == 1;    " // FAILS

//@ requires i >= 0;    " + "  //@ ensures i>0;    " + "  //@ signals (RuntimeException e) i == 1;    " // OK

//@ signals_only java.io.IOException;    " // FAILS

//@ signals_only \    othing;    " // FAILS

//@ signals_only Exception;    " // OK

//@ public constraint i > \\old(i) for m1();    " + "  public void m1() {    " + "  }    "

//@ public constraint i > \\old(i) for ! m1();    " + "  public void m1() {    " + "  }    "

//@ public constraint i > \\old(i) for \\everything;    " + "  public void m1() {    "

//@ public constraint i > \\old(i) for !\    othing;    " + "  public void m1() {    " + "  }    "

//@ public constraint i > \\old(i) for \    othing;    " + "  public void m1() {    " + "  }    "

//@ public constraint i > \\old(i) for !\\everything;    " + "  public void m1() {    "

//@ public constraint i > \\old(i);    " + "  public void m1() {    " + "  }    "

//@ public constraint i > \\old(i) for m1(), m1(int);    " + "  public void m1() {    "

//@ public constraint i > \\old(i) for m1(), m1(int);    " + "  public static void m1() {    "

//@ public constraint i > \\old(i) for ! m1(), m1(int);    " + "  public void m1() {    "

//@ public constraint i > \\old(i) for TestJava();    " + "  public TestJava() {    " + "  }    " + "

//@ public constraint i > \\old(i);    " + "  public TestJava() {    " + "  }    " + "}");

//@ public static constraint i > \\old(i) for TestJava();    " + "  public TestJava() {    "

//@ public static constraint i > \\old(i);    " + "  public TestJava() {    " + "  }    " + "

//@ ghost static public int i = 0;    "

//@ public static constraint i > \\old(i);    " + "}    "

//@ ghost static public int i = 0;    "

//@ public constraint i > \\old(i);    " + "}    " + "public class TestJava implements A {     "

//@ normal_behavior     "

//@ ensures \\result == (i > 0 && i < 10);    "

//@ pure    "

//@ model public boolean m(int i);    "

//@ assert (\\forall int k; 3<k && k <7; m(k));    "

//@ assert (\\forall int k; 3<k && k <7; m(k-1));    "

//@ assert !(\\forall int k; -3<k && k <7; m(k));    "

//@ normal_behavior     "

//@ ensures \\result == (i > 0 && i < 10);    "

//@ pure function    "

//@ model public static boolean m(int i);    "

//@ pure    "

//@ assert !(\\forall int k; 3<k && k <11; m(k));    "

//@ normal_behavior     "

//@ ensures \\result == (i > 0 && i < 10);    "

//@ pure    "

//@ model public boolean m(int i);    "

//@ pure    "

//@ assert !(\\forall int k; 3<k && k <11; m(k));    "

/*@ spec_public */
//@ assignable \\everything;     "


/*@ spec_public */
//@ assignable \\everything;     "


/*@ spec_public */
/*@ spec_public */
//@ assignable \\everything;     "


//@ assert array.length >= 0;     "

//@ assert array.length <= Integer.MAX_VALUE;     "

//@ requires k >= 0;    "

//@ assert array.length >= 0;     "

//@ assert array.length <= Integer.MAX_VALUE;     "

//@ assert array.length == k;     "

//@ assert array.length >= 0;     "

//@ assert array.length <= Integer.MAX_VALUE;     "

//@ assert array.length >= 0;     "

//@ assert array.length <= Integer.MAX_VALUE;     "

//@ requires (\\forall int i; 0 <= i && i < args.length; args[i] >= 0);    "

//@ requires (\\forall int i; 0 <= i && i < args.length; args[i] >= 0); requires n == -2;    "

//@ requires (\\forall int i; 0 <= i && i < args.length; args[i] >= 0);    "

//@ requires (\\forall int i; 0 <= i && i < args.length; args[i] >= 0);"

//@ assert (\\lbl I i) + \\lbl(J j) == 0;     "

//@ assert (\\lbl I i) + \\lbl(J,j) == 0;     "

//@ nullable_by_default     "

/*@ requires o != null;     "
                        + "      ensures \\result == (j>=0);     "
                        + "     pure function */
//@ signals (NullPointerException e) positive(null,j);     "

//@ signals (NegativeArraySizeException e) positive(null,j);     "

//@ ensures j >= 0;     "

//@ ensures ii == 19; static_initializer "

//@ public final invariant ii == 19;     "

//@ public normal_behavior ensures \\result == 10 + 9; pure    "

//@ public normal_behavior ensures \\result == 19; pure    "

//@ ensures ii == 19 && jj == 21; static_initializer "

//@ public final invariant ii == 19;     "

//@ public normal_behavior ensures \\result == 10 + 9; pure    "

//@ public normal_behavior ensures \\result == 21; pure    "

//@ ensures ii == mm(); static_initializer "

//@ public final invariant ii == 19;     "

//@ public normal_behavior ensures \\result == 10 + 9; pure    "

//@ public normal_behavior ensures \\result == 19; pure    "

//@ public final invariant ii == 19;     "

//@ public normal_behavior ensures \\result == 10 + 9; pure    "

/*@ spec_public */
//@ public normal_behavior     "

//@   ensures num == 10;     "

//@   ensures A.bit == 1;     "

//@   ensures B.bit == 2;     "

//@ static_initializer     "

/*@ spec_public */
/*@ spec_public */
//@ public normal_behavior     "

//@   ensures num == 10;     "

//@   ensures A.bit == 1;     "

//@   ensures B.bit == 2;     "

//@ static_initializer     "

//@ public normal_behavior     "

//@   requires \    onnullelements(arr);     "

//@ public normal_behavior     "

//@   requires true;     "

//@ show i, j+1;    "

//@ show k;    "

//@ assert k > 0;    "

//@ show m,k;    "

//@ assert m > 0;    "

//@ public normal_behavior     "

//@   requires true;     "

//@ show i;    "

//@ public normal_behavior     "

//@   requires true;     "

//@ show i;    "

//@ show     "

//@ show i i;    "

//@ show;    "

//@ show i    "

//@ show %;    "

//@ public normal_behavior     "

//@   requires k != null && \    onnullelements(k) && \\elemtype(\\typeof(k)) <: \\type(Key);     "

//@ assert kk != null;    "

//@ assert \    onnullelements(kk);    "

//@ assert \\elemtype(\\typeof(kk)) == \\type(Key);    "

//@ public normal_behavior     "

//@   requires k != null && \    onnullelements(k) && \\elemtype(\\typeof(k)) <: \\type(Key);     "

//@ assert kk != null;    "

//@ assert \    onnullelements(kk);    "

//@ assert \\elemtype(\\typeof(kk)) == \\type(Key);    "

//@ ghost int k = 1;    "

//@ ghost int k = 2;    "

//@ ghost int i = 2;    "

//@ assert 0 <= i < 10 < 12;    "

//@ set i = 10;    "

//@ assert !(0 <= i < 10);    "

//@ assert 0 <= i < 11 == 2 <= i <= 12;    "

//@ assert 11 >= i+1 > 1 == 12 >= i > 2;    "

//@ assert 11 >= i+1 < 12;    "

//@ assert 11 >= i+1 < 12 == true;    "

//@ assert 11 >= i+1 > 1 != 12 <= i <= 22;    "

//@ signals_only \    othing;    "


//@ allow NullPointerException;     "


//@ forbid NullPointerException;     "



//@ ignore NullPointerException;     "



//@ ignore java.lang.XX;     "


//@ allow NullPointerException;     "

//@ forbid NullPointerException;     "

//@ forbid X;     "

//@ forbid ;     "

//@ forbid NullPointerException     "

//@ forbid NullPointerException, ArrayIndexOutOfBoundsException;     "

//@ forbid NullPointerException ArrayIndexOutOfBoundsException;     "

//@ forbid NullPointerException; allow NullPointerException     "

//@ ignore NullPointerException; allow NullPointerException     "

//@ ignore NullPointerException; forbid NullPointerException     "

//@ forbid java.lang.NullPointerException     "

//@ forbid java.lang.     "

/*@ pure */
//@ assert \\count >= 0;    " // OK

//@ assert \\count < a.length;    " // OK

//@ assert \\count >= 1;    " // BAD

//@ ghost int i = \\count;    " // OK

//@ assert \\count >= 0;    " // OK

//@ assert \\count < 2;    " // OK

//@ assert \\count == i;    " // OK

//@ ghost int i = \\count;    " + "      for (long kk: b) {    "

//@ assert \\count == i;    " // BAD

//@ loop_invariant \\count >= 0 && \\count <= a.length;    " // OK

//@ decreases a.length - \\count;    " // OK

//@ loop_invariant \\count >= 0 && \\count <= a.length;    " // OK

//@ loop_decreases a.length - \\count;    " // OK

//@ decreases a.length - \\count -1;    " // 0 on last

//@ decreases a.length - \\count -2;    " // BAD - last time through

//@ decreases \\count+10;    " // BAD - loop does not decrease variant

//@ loop_invariant \\count > 0 && \\count <= a.length;    " // BAD - first time through loop

//@ loop_invariant \\count >= 0 && \\count < a.length;    " // BAD - laswt time through loop

//@ assert \\count >= 0;    " // OK

//@ assert \\count < a.length;    " // OK

//@ ghost int i = \\count;    " // OK

//@ assert \\count >= 0;    " // OK

//@ assert \\count < 2;    " // OK

//@ assert \\count == i;    " // OK

//@ reachable;    " // knows that the loop is not

//@ loop_invariant \\values.size() == \\count;    " + "    for (Integer k: a) {    " + "    }    "

//@ loop_invariant \\values.size() == \\count;    " + "    for (Integer k: a) {    "

//@ assert \\values.size() == \\count;    " + "    }    " + "  }    "

//@ assert \\values.size() == \\count;    " + "    }    " + "  }    "

//@ assert \\count >= 1;    " // BAD

//@ public normal_behavior  ensures true;    " + "  public void m2() {    "

//@ assume a != null;     "

//@ assume it != null;     "

//@ public normal_behavior  ensures true;    " + "  public void m2bad() {    "

//@ assume a != null;     "

//@ assume it != null;     "

//@ public normal_behavior  ensures true;    "

//@ public normal_behavior  ensures true;    "

//@ assume values != null; set values.containsNull = true;     "

//@ assert values.content.owner == values;    "

//@ assume a != null;     "

//@ assume values.content.owner == values;    "

//@ assume it != null;     "

//@ assume values.content.owner == values;    "

//@ assert values.content.owner == values;    "

//@ ghost List<Map.Entry<String,String>> v = values;    "

//@ loop_invariant values == v && values.content.owner == values;     "

//@ assume k != null && \\typeof(k) <: \\type(Map.Entry<String,String>);     "

//@ public normal_behavior  ensures true;    "

//@ assume values != null; set values.containsNull = true;     "

//@ assert values.content.owner == values;    "

//@ assume a != null;     "

//@ assume values.content.owner == values;    "

//@ assume it != null;     "

//@ assume values.content.owner == values;    "

//@ assert values.content.owner == values;    "

//@ ghost List<Map.Entry<String,String>> v = values;    "

//@ assert values.content.owner == values;    "

//@ assume k != null &&  \\typeof(k) <: \\type(Map.Entry<String,String>);     "

//@ assert values.content.owner == values;    "

//@ public normal_behavior  ensures true;    "

//@ set values.containsNull = true;     "

//@ public normal_behavior  ensures true;    "

//@ set values.containsNull = true;     "

//@ ghost int i = \\count;    " // Out of scope

//@ ghost int i = \\count;    " // Out of scope

//@ set \\count = 6;    " // Syntax error

//@ ghost org.jmlspecs.lang.JMLList i = \\values;    " // Out

//@ ghost org.jmlspecs.lang.JMLList i = \\values;    " // Out

//@ set \\values = null;    " // Syntax error

//@ ghost org.jmlspecs.lang.JMLList i = \\values;    " // OK

//@ modifies \\everything;    "

//@ assume \    onnullelements(a);    "

//@ assume a.length > 1;    "

//@ assert a[0] != null;    " // OK

//@ modifies \\everything;    "

//@ assume \    onnullelements(a);    "

//@ assert a != null;    " // OK

//@ modifies \\everything;    "


//@ assume \    onnullelements(a);    "

//@ assert a == null;    " // BAD

//@ modifies \\everything;    "

//@ assume a != null && a.length > 1;    "

//@ assert a[0] != null;    " // BAD

//@ modifies \\everything;    "

//@ assume a != null && a.length == 0;    "

//@ assert \    onnullelements(a);    " // OK

//@ modifies \\everything;    "

//@ assume a != null && a.length == 0;    "

//@ assert (\\forall int i; 0<=i && i<a.length; a[i] != null);    " // OK

//@ requires \\elemtype(\\typeof(a)) == \\type(Object); modifies \\everything;    "

//@ assume a != null && a.length == 1;    "

//@ assert \    onnullelements(a);    " // OK

//@ modifies \\everything;    "

//@ assume a != null && a.length == 1;    "

//@ assume a[0] != null;    "

//@ assert \    onnullelements(a);    " // OK

//@ requires \\elemtype(\\typeof(a)) == \\type(Object); modifies \\everything;    "

//@ assume a != null && a.length == 2;    "

//@ assert \    onnullelements(a);    " // OK

//@ modifies \\everything;    "

//@ assume a != null && a.length == 2;    "

//@ assume a[0] != null;    "

//@ assume a[1] != null;    "

//@ assert \    onnullelements(a);    " // OK

//@ requires \\elemtype(\\typeof(a)) == \\type(Object); modifies \\everything;    "

//@ assume a != null && a.length == 3;    "

//@ assert \    onnullelements(a);    " // BAD

//@ requires \\elemtype(\\typeof(a)) == \\type(Object); modifies \\everything;    "

//@ assume \    onnullelements(a) && a.length == 3;    "

//@ assert \    onnullelements(a);    " // OK

//@ modifies \\everything;    "

//@ assume a != null && a.length == 3;    "

//@ assert \    onnullelements(a);    " // BAD

//@ requires i == 5;    " + "  //@ modifies \\everything;    " + "  public void m1(int i) {    "

//@ assert \    ot_modified(i);    " // OK

//@ modifies \\everything;    " + "  public void m1a(int i) {    " + "    i = 5;    "

//@ assert \    ot_modified(i);    " // BAD

//@ ghost public int gi;    "

//@ requires i == 5;    " + "  //@ modifies \\everything;    " + "  public void m2() {    "

//@ assert \    ot_modified(i);    " // OK

//@ modifies \\everything;    " + "  public void m2a() {    " + "    i = 5;    "

//@ assert \    ot_modified(i);    " // BAD

//@ requires si == 5;    " + "  //@ modifies \\everything;    " + "  public void m3() {    "

//@ assert \    ot_modified(si);    " // OK

//@ modifies \\everything;    " + "  public void m3a() {    " + "    si = 5;    "

//@ assert \    ot_modified(si);    " // BAD

//@ requires gi == 5;    " + "  //@ modifies \\everything;    " + "  public void m4() {    "

//@ set gi = 5;    " + "    //@ assert \    ot_modified(gi);    " // OK

//@ modifies \\everything;    " + "  public void m4a() {    " + "    //@ set gi = 5;    "

//@ assert \    ot_modified(gi);    " // BAD


//@ requires t != null;    "

//@ modifies \\everything;    "

//@ assert \    ot_modified(t.i);    " // OK

//@ requires t != null;    "

//@ modifies \\everything;    "

//@ assert \    ot_modified(t.i) ? true: true;    " // BAD

//@ requires t == null;    "

//@ modifies \\everything;    "

//@ assert \    ot_modified(t.i) ? true: true;    " // OK

//@ modifies \\everything;    "

//@ assert \    ot_modified(t.i) ? true: true;    " // BAD

//@ requires p != null && p != this;    "

//@ modifies \\everything;    "

//@ assert pp != p;    " // OK

//@ assert pp != this;    " // OK

//@ requires p != null && p != this;    " + "  //@ modifies \\everything;    "

//@ assert pp != p;    " // BAD

//@ requires p != null && p != this;    " + "  //@ modifies \\everything;    "

//@ assert pp != this;    " // BAD

//@ requires p != null && p != this;    " + "  //@ modifies \\everything;    "

//@ assert pp != q;    " // OK

//@ requires p != null && p != this;    "

//@ modifies \\everything;    " // Line 30                                                                                                // 30

//@ assert pp != q;    " // OK

//@ modifies \\everything;    " + "  //@ ensures \\result != null && \\fresh(\\result);    "

//@ ensures \\result != p && \\result != this;    " + "  public Object m6(Object p) {    "

//@ modifies \\everything;    " + "  //@ ensures \\result == null;    " // BAD

//@ modifies \\everything;    " + "  //@ ensures \\result != null && \\fresh(\\result);    "

//@ ensures \\result == p || \\result == this;    " // BAD

//@ modifies \\everything;    "

//@ ensures \\result != null && !\\fresh(\\result);    " // BAD

//@ ghost Object oo;    "

//@ static ghost Object soo;    "

//@ modifies \    othing;    "

//@ assert pp != o && pp != oo;    " // OK

//@ modifies \    othing;    "

//@ assert pp != o;    " // BAD

//@ modifies \    othing;    "

//@ assert pp != oo;    " // BAD

//@ modifies \\everything;    "

//@ assert pp != oo;    " // OK

//@ modifies \\everything;    "

//@ assert pp != o;    " // BAD

//@ modifies \    othing;    "

//@ assert pp != so && pp != soo;    " // OK

//@ modifies \    othing;    "

//@ assert pp != so;    " // BAD

//@ modifies \    othing;    "

//@ assert pp != soo;    " // BAD

//@ modifies \\everything;    "

//@ assert pp != soo;    " // OK

//@ modifies \\everything;    "

//@ assert pp != so;    " // OK

//@ modifies \    othing;    "

//@ assert pp != o && pp != oo;    " // BAD

//@ modifies \    othing;    " + "  public void m9b(Object p) {    " + "    Object pp = c1n(p);    "

//@ assert pp != so && pp != soo;    " // BAD

//@ modifies \    othing;    "

//@ ensures \\fresh(\\result);    "

//@ modifies \    othing;    "

//@ ensures \\result == null || \\fresh(\\result);    "

//@ modifies \    othing;    "

//@ ensures true;    "

//@ modifies \\everything;    "

//@ ensures \\result != null && \\fresh(\\result);    "

//@ modifies \\everything;    "

//@ ensures true;    "

//@ requires p != null && p != this;    " + "  //@ modifies \\everything;    "

//@ assume this.k == 0;    " + "    c1(p);    " // havoc

//@ assert this.k == 0;    " // OK

//@ requires p != null && p != this;    " + "  //@ modifies \\everything;    "

//@ assume sk == 0;    " + "    c1(p);    " // havoc

//@ assert sk == 0;    " // OK

//@ requires o != null;    " + "  //@ modifies o.*;    " + "  public void c1(TestJava o) { }     "

//@ requires o != null;    " + "  //@ modifies TestJava.*;    " + "  public void c2(TestJava o) { }     "

//@ requires p != null && p != this;    " + "  //@ modifies \\everything;    "

//@ assume k == 0;    " + "    c1(this);    " // havoc

//@ assert k == 0;    " // FAILS

//@ requires p != null && p != this;    " + "  //@ modifies \\everything;    "

//@ assume sk == 0;    " + "    c1(this);    " // havoc

//@ assert sk == 0;    " // OK

//@ requires o != null;    " + "  //@ modifies o.*;    " + "  public void c1(TestJava o) { }     "

//@ requires o != null;    " + "  //@ modifies TestJava.*;    " + "  public void c2(TestJava o) { }     "

//@ requires p != null && p != this;    " + "  //@ modifies \\everything;    "

//@ assume k == 0;    " + "    c2(this);    " // havoc

//@ assert k == 0;    " // OK

//@ requires p != null && p != this;    " + "  //@ modifies \\everything;    "

//@ assume sk == 0;    " + "    c2(this);    " // havoc

//@ assert sk == 0;    " // FAILS

//@ requires o != null;    " + "  //@ modifies o.*;    " + "  public void c1(TestJava o) { }     "

//@ requires o != null;    " + "  //@ modifies TestJava.*;    " + "  public void c2(TestJava o) { }     "

//@ modifies \\everything;    "

//@ assume k == 0;    "

//@ assert k == 0;    "

//@ requires i == 0;    "

//@ modifies \\everything;    "

//@ also requires i > 0;    "

//@ modifies \    othing;    "

//@ modifies \\everything;    " + "  public void m1a() {    " + "    //@ assume k == 0;    "

//@ assert k == 0;    " // FAILS

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "

//@ modifies \\everything;    " + "  public void m2() {    " + "    //@ assume sk == 0;    "

//@ assert sk == 0;    " + "  }    "

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "}");

//@ modifies \\everything;    " + "  public void m2a() {    " + "    //@ assume sk == 0;    "

//@ assert sk == 0;    " // FAILS

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "

//@ requires a != null && a.length > 10;    " + "  //@ modifies \\everything;    "

//@ assume a[0] == 0;    " + "    c1(1);    "

//@ assert a[0] == 0;    " + "  }    "

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "}");

//@ requires a != null && a.length > 10;    " + "  //@ modifies \\everything;    "

//@ assume a[0] == 0;    " + "    c1(0);    " // modifies

//@ assert a[0] == 0;    " // FAILS

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "

//@ requires sa != null && sa.length > 10;    " + "  //@ modifies \\everything;    "

//@ assume sa[0] == 0;    " + "    c1(1);    "

//@ assert sa[0] == 0;    " + "  }    "

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "}");

//@ requires sa != null && sa.length > 10;    " + "  //@ modifies \\everything;    "

//@ assume sa[0] == 0;    " + "    c1(0);    "

//@ assert sa[0] == 0;    " // FAILS

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "}"

//@ requires sa != null && sa.length > 10;    " + "  //@ modifies \\everything;    "

//@ assume a == \\old(a);    " + "    c1(1);    "

//@ assert a == \\old(a);    " + "  }    "

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "}");

//@ requires sa != null && sa.length > 10;    " + "  //@ modifies \\everything;    "

//@ assume a == \\old(a);    " + "    c1(0);    "

//@ assert a == \\old(a);    " // FAILS

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "

//@ modifies \\everything;    " + "  public void m6(/*@ non_null*/TestJava t) {    "

//@ assume t.k == 0;    " + "    c1(1);    " + "    //@ assert t.k == 0;    " + "  }    "

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "}");

//@ modifies \\everything;    " + "  public void m6a(/*@ non_null*/TestJava t) {    "

//@ assume t.k == 0;    " + "    c1(0);    " + "    //@ assert t.k == 0;    " // FAILS

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "

//@ modifies \\everything;    " + "  public void m7() {    " + "    c1(1);    "

//@ assert sk == \\old(sk);    " // Should be OK

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "}");

//@ modifies \\everything;    " + "  public void m7a() {    " + "    c1(0);    "

//@ assert sk == \\old(sk);    " // FAILS

//@ requires i == 0;    " + "  //@ modifies \\everything;    " + "  //@ also requires i > 0;    "

//@ modifies \    othing;    " + "  public void c1(int i) { }     " + "

//@ modifies k,sk;    "

//@ assume k == 0 && sk == 0;    "

//@ assert sk == 0;    "

//@ modifies k,sk;    "

//@ assume k == 0 && sk == 0;    "

//@ assert sk == 0;    " // FAILS

//@ modifies k,sk;    "

//@ assume k == 0 && sk == 0;    "

//@ assert k == 0;    " + "  }    "

//@ modifies k,sk;    "

//@ assume k == 0 && sk == 0;    "

//@ assert k == 0;    " // FAILS

//@ requires i == 0;    "

//@ modifies k;    "

//@ also requires i > 0;    "

//@ modifies sk;    "

//@ requires i == 10;    "

//@ modifies t.k;    "

//@ also requires i == 0;    "

//@ modifies \    othing;    "

//@ requires a!=null && 0<=i && i<a.length;    "

//@ modifies a[i];    "

//@ requires b!=null && 0<=i && i<b.length;    "

//@ modifies b[i];    "

//@ modifies k,sk;    " + "  public void m3() {    " + "    //@ assume k == 0 && sk == 0;    "

//@ assert k == 0;    " + "  }    "

//@ modifies k,sk;    " + "  public void m3a() {    " + "    //@ assume k == 0 && sk == 0;    "

//@ assert k == 0;    " // FAILS

//@ requires a != null && a.length == 5;    "

//@ modifies a[0];    " + "  public void m4() {    "

//@ assume a[0] == 0 && a[1] == 1;    " + "    c3(0);    " + "    //@ assert a[1] == 1;    "

//@ requires a != null && a.length == 5;    " + "  //@ modifies a[0];    "

//@ assume a[0] == 0 && a[1] == 1;    " + "    c3(0);    "

//@ assert a[0] == 0;    " // FAILS

//@ requires i == 0;    " + "  //@ modifies k;    " + "  //@ also requires i > 0;    "

//@ modifies sk;    " + "  public void c1(int i) { }     "

//@ requires i == 10;    " + "  //@ modifies t.k;    " + "  //@ also requires i == 0;    "

//@ modifies \    othing;    " + "  public void c2(int i, TestJava t) {}    "

//@ requires a!=null && 0<=i && i<a.length;    " + "  //@ modifies a[i];    "

//@ requires b!=null && 0<=i && i<b.length;    "

//@ modifies b[i];    " + "  public void c4(int i) {}    " + "

//@ requires b != null && b.length == 5;    "

//@ modifies b[0];    "

//@ assume b[0] == 0 && b[1] == 1;    "

//@ assert b[1] == 1;    "

//@ requires b != null && b.length == 5;    "

//@ modifies b[0];    "

//@ assume b[0] == 0 && b[1] == 1;    "

//@ assert b[0] == 0;    " // FAILS

//@ requires b != null && b.length == 5;    "

//@ modifies b[0];    "

//@ assume b[0] == 0 && b[1] == 1;    "

//@ requires a != null && b != null && b.length == 5  && a.length ==5;    "

//@ modifies a[0],b[0];    "

//@ assume b[0] == 0 && b[1] == 1;    "

//@ assert b[1] == 1;    "

//@ requires i == 0;    "

//@ modifies k;    "

//@ also requires i > 0;    "

//@ modifies sk;    "

//@ requires i == 10;    "

//@ modifies t.k;    "

//@ also requires i == 0;    "

//@ modifies \    othing;    "

//@ requires a!=null && 0<=i && i<a.length;    "

//@ modifies a[i];    "

//@ requires b!=null && 0<=i && i<b.length;    "

//@ modifies b[i];    "

//@ public invariant a != null && a.length == 10;    "

/*@ assignable a; */
//@ modifies a[*];    "

//@ assume a[0] == 0 && a[2] == 2;    "

//@ assert a[0] == 0;    "

//@ modifies a[*];    "

//@ assume a[0] == 0 && a[2] == 2;    "

//@ assert a[2] == 3;    " // FAILS

//@ modifies a[2 .. 4];    "

//@ modifies a[*];    "

//@ modifies a[2 .. ];    "

//@ public invariant a != null && a.length == 10;    "

//@ assignable a;    "

//@ modifies a[*];    "

//@ assume a[0] == 0 && a[2] == 2;    "

//@ assert a[0] == 0;    " // FAILS

//@ modifies a[*];    "

//@ assume a[0] == 0 && a[2] == 2;    "

//@ assert a[2] == 2;    " // FAILS

//@ modifies a[2 .. 4];    "

//@ modifies a[*];    "

//@ modifies a[2 .. ];    "

//@ public invariant a != null && a.length == 10;    "

//@ assignable a;    "

//@ modifies a[*];    "

//@ assume a[0] == 0 && a[2] == 2;    "

//@ assert a[0] == 0;    "

//@ modifies a[*];    "

//@ assume a[0] == 0 && a[9] == 2;    "

//@ assert a[9] == 2;    " // FAILS

//@ modifies a[2 .. 4];    "

//@ modifies a[*];    "

//@ modifies a[2 .. ];    "

//@ modifies \\everything;    " + "  public void z() {    " + "  }    "

//@ modifies \\everything;    " + "  public void m1() {    " + "    //@ assume a == 15 && fa == 13;    "

//@ assert fa == 13;    " // Should be OK

//@ assert a == 15;    " // Should fail

//@ assert fsa == 13;    " // OK

//@ assert fa == 15;    " // OK

//@ modifies \\everything;    " + "  public void m1() {    " + "    //@ assert fsa == 13;    " // Should

//@ assert fa == 15;    " // Should be OK

//@ modifies \\everything;    " + "  public void m2() {    " + "    //@ assert a == 17;    " // Not

//@ modifies \\everything;    " + "  public void m3() {    " + "    //@ assert fb == 16;    " // Not

/*@ code_bigint_math*/
//@ requires i >= 0;    " + "  //@ modifies k;    " + "  //@ ensures k == 10;    "

//@ signals (Exception e) k<0; signals_only Exception;    "

//@ requires i >= 0;    " + "  //@ modifies k;    " + "  //@ ensures k == 10;    "

//@ signals (Exception e) k==-11;    " + "  //@ signals_only Exception;    "

//@ requires i >= 0;    " + "  //@ modifies k;    " + "  //@ ensures k == 10;    "

//@ signals (Exception e) k==-12;    " + "  //@ signals_only Exception;    "

//@ requires i >= 0;    " + "  //@ modifies k;    " + "  //@ ensures k == 10;    "

//@ signals (Exception e) k==-13;    " // FAILS

//@ signals_only Exception;    " + "  public void m3a(int i) {    " + "    m(0);    "

//@ requires i >= 0;    " + "  //@ modifies k;    " + "  //@ ensures \\result == 12;    "

//@ signals (Exception e) false;    " + "  public int m4(int i) {    "

//@ requires i >= 0;    " + "  //@ modifies k;    " // Line

//@ ensures false;    " + "  //@ signals (Exception e) k == -11;    "

//@ signals_only Exception;    " + "  public int m5(int i) {    "

//@ requires i >= 0;    " + "  //@ modifies k;    " + "  //@ ensures false;    "

//@ signals (Exception e) k == -12;    " // Line 60

//@ signals_only Exception;    " + "  public int m6(int i) {    "

//@ requires i == 0;    " + "  //@ modifies k;    " + "  //@ ensures k>0 && \\result == i+1;    "

//@ signals (Exception e) false;    " + "  //@ also     " + "  //@ requires i > 0;    " // Line

//@ modifies k;    " + "  //@ ensures false;    " + "  //@ signals (Exception e) k == -10-i;    "

//@ signals_only Exception;    " + "  public int m(int i) {    " + "    if (i > 0) {    "

//@ code_bigint_math     " + "public class TestJava {     "

/*@ non_null*/
//@ requires false;    " + "  public static boolean bf(boolean bb) { return true; }    "

//@ requires true;    " + "  public static boolean bt(boolean bb) { return true; }    "

//@ static public invariant b;    "

//@ requires !b;    " + "  public static boolean bq(boolean bb) { return true; }    " + "


//@ ghost nullable Object oo;    " + "  //@ public static invariant bstatic;    "

//@ public invariant binstance;    " + "  //@ public initially binstance2;    "

//@ public constraint binstance2 == \\old(binstance2);    "

//@ public static constraint bstatic == \\old(bstatic);    "

/*@ non_null*/
//@ requires true;    " + "  //@ ensures \\result;    "

//@ requires false;    " + "  //@ ensures true;    " + "  public static int i(int ii) { return 0; }    "

//@ requires ii == 10;    " + "  //@ ensures true;    "

/*@ set oo = null;*/
//@ requires ii == 10;    " + "  //@ ensures true;    "


/*@ set oo = null;*/
//@ requires ii == 10;    " + "  //@ ensures true;    "

//@ requires ii == 10;    " + "  //@ ensures true;    "

//@ requires bb;    "

//@ ensures true;    "

/*@ assume b; */
/*@assert false;*/
//@ requires bb;    " + "  //@ ensures true;    "

/*@ assume b; */
/*@assert !bb;*/
//@ requires bb;    " + "  //@ ensures true;    "

/*@ assume bb; */
/*@assert b;*/
//@ requires bb;    "

//@ ensures true;    "

/*@assume z==1 ;*/
/*@ assert false; */
//@ requires bbb;    "

/*@assume true;*/
/*@assume !b;*/
/*@ assert !bb; */
//@ requires b;    "

/*@assume true;*/
/*@assume !b;*/
/*@ assert !bb; */
//@ requires bb;    "

//@ ensures true;    "

/*@assume 0==x ;*/
/*@ assert true; */
/*@ assume !bb; assume bb;*/
/*@assume bb; assume !bb; */
/*@assume bb; assume !bb; */
/*@assume bb; assume !bb; */
/*@ assume b; */
/*@ assume !b; */
/*@ assert k == 0; */
/*@ assert k != 0; */
/*@ assert i == 10; assert k == 16; */
/*@ assert k == 10; */
/*@ assert k == 11; */
/*@ assert k == 11; */
/*@ code_java_math*/
//@ static public constraint i > \\old(i);    "

//@ modifies i;    "

//@ ensures true;    "

/*@ code_bigint_math*/
//@ modifies i;    " + "  //@ ensures i == \\old(i)+2;    "

//@ modifies i;    "

//@ ensures i == \\old(i+1);    " + "  public static void bbad() { i = i - 1; }    " + "

/*@ code_java_math spec_java_math*/
//@ modifies i;    "

//@ ensures i == \\old(i)+2;    "

//@ modifies i;    "

//@ ensures i == \\old(i+1);    "

/*@ code_java_math spec_java_math*/
//@ modifies i;    "

//@ ensures i == \\old(i)+2;    "

/*@ assert i == i@x + 1 && i == (i+1)@x; */
//@ modifies i;    "

//@ ensures i == \\old(i+1);    "

/*@ assert i == i@x + 1; */
//@ modifies i;    "

/*@ assert i == this.i@x + 1; */
//@ requires a.length > 10 && a[0] >= 0;    "

//@ modifies i;    "

/*@ assert a[0]@x > -1; */
/*@ code_java_math spec_java_math*/
/*@ assert i <<< i || true; */
/*@ assert i <<<= i || true; */
//@ requires 0<=ii && ii <=3;    "

//@ ensures ii<=0 ==> \\result ==-ii;    "

//@ requires ii > -2147483648;    " // Not using

//@ ensures \\result == -ii;    "

/*@ assert i!=0; */
/*@ assert i==0; */
//@ requires ii == 10;    " + "  //@ ensures true;    "


//@ requires ii == 10;    "

//@ ensures true;    " + "  public @NonNull Object inst2(int ii) {  return null; }    " + "

//@ requires ii == 10;    " + "  //@ ensures true;    "

//@ requires ii == 10;    "

//@ ensures true;    " + "  public          Object inst2(int ii) {  return null; }    " + "

//@ requires ii == 10;    " + "  //@ ensures true;    "

//@ requires ii == 10;    " + "  //@ ensures true;    "

//@ requires ii == 10;    " + "  //@ ensures true;    "

//@ requires ii == 10;    "

//@ ensures true;    " + "  public          Object inst2(int ii) {  return null; }    " + "

/*@ non_null*/

/*@ non_null*/

/*@ non_null*/
/*@ non_null*/
//@ ensures \\result != null;    "


//@ ensures \\result != null;    "


//@ ensures \\result != null;    "

//@ ensures \\result != null;    "



//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ ensures \\result != null;    "

/*@ nullable*/
/*@ nullable*/
//@ requires i>0;    " + "  //@ modifies j;    "

//@ ensures j == -i;    " + "  static public void m(int i) { j = -i; }    " + "  //@ requires i>1;     "

//@ modifies j;    " + "  //@ ensures \\result == -i;    "

//@ modifies j;    "

//@ ensures \\result == j;    " + "  public int instbad(boolean b, int i) { m(i); return j; }    "

//@ modifies j;    " + "  //@ ensures \\result == i;    "

//@ requires i>0;    "

//@ modifies j;    "

//@ ensures j == -i;    "

//@ requires i>1;     "

//@ modifies j;    "

//@ ensures \\result == -i;    "

//@ modifies j;    "

//@ ensures \\result == j;    "

//@ modifies j;    "

//@ ensures \\result == i;    "

/*@ code_bigint_math*/
//@ requires i>0;    "

//@ modifies j;    "

//@ ensures j == i+1 && \\result == j;    "

//@ requires i>1;     "

//@ modifies j;    "

//@ ensures \\result == \\old(i)+1;    "

//@ requires i>1;     "

//@ modifies j;    "

//@ ensures \\result == \\old(i)+3;    "

//@ requires i>1;     "

//@ modifies j;    "

//@ ensures \\result == 3*i+4;    "

//@ ensures j == i + 1;    "

//@ requires i>1;     "

//@ modifies j;    "

//@ ensures \\result == \\old(i);    "

//@ requires i>1;     "

//@ modifies j;    "

//@ ensures \\result == \\old(i)+4;    "

//@ requires i>1;     "

//@ modifies j;    " // Line 30

//@ ensures \\result == 3*i+4;    "

//@ ensures j == i + 2;    "

/*@ code_java_math*/
//@ assignable \    othing; ensures \\result == j;    "

//@ modifies j,sj;    "

//@ ensures \\result == \\old(j);    "

//@ modifies j,sj;    "

//@ ensures \\result == j;    "

//@ modifies j,sj;    "

//@ ensures \\result == sj;    "

//@ requires o!=null && p != null && o.j == 1 && p.j == 2 && j == 3;    "

//@ modifies j,sj,o.j,o.sj,p.j,p.sj;    "

//@ ensures \\result == 6;    "

//@ requires o!=null && p != null && o.j == 1 && p.j == 2 && j == 3 && o!=this && p!= this;    "

//@ modifies j,sj,o.j,o.sj,p.j,p.sj;    "

//@ ensures \\result == 6;    "

/*@ assert (\\lbl OJ o.j) + (\\lbl PJ p.j) + (\\lbl JJ j) == 6; */
//@ requires o!=null && p != null && o.j == 1 && p.j == 2 && j == 3;    "

//@ modifies j,sj,o.j,o.sj,p.j,p.sj;    "

//@ ensures \\result == 6;    "

//@ modifies j,sj;    " + "  //@ ensures \\result == 6;    "

//@ requires o!=null && p != null && sj == 3;    "

//@ modifies j,sj,o.j,o.sj,p.j,p.sj;    "

//@ ensures \\result == 9;    "

//@ assume a != null && a.length > 2 && a[0] == 1;    "

//@ loop_invariant (\\forall int k; 0<=k && k < \\count; b ==> a[k] > 0);    "

//@ assert b ==> a[1] > 0;    " + "  }    " + "}");

/*@ loop_invariant 0<=i && i<=5 && n==i; decreases 5-i; */
/*@ assert n == 5; */
/*@ loop_invariant 0<=i && i<=5 && n==i; decreases 3-i; */
/*@ assert n == 5; */
/*@ loop_invariant 0<=i && i<5 && n==i; decreases 5-i; */
/*@ assert n == 5; */
/*@ loop_invariant 0<=i && i<=5 && n==i-1; decreases 5-i; */
/*@ loop_invariant i>0; decreases i; */
/*@ reachable; */
/*@ loop_invariant i>=0; decreases i-2; */
/*@ assert i == 0; */
/*@ loop_invariant i>=0; decreases i; */
/*@ assert i == 0; */
/*@ code_java_math */
/*@ loop_invariant  i>0; decreases i; */
/*@ assert i == 0; */
/*@ code_bigint_math */
/*@ loop_invariant i>=0; decreases i-2; */
/*@ assert i == 0; */
/*@ code_bigint_math */
/*@ loop_invariant i>=0; decreases i; */
/*@ assert i == 0; */
/*@ code_bigint_math*/
/*@ loop_invariant i<=5 && i>=0; decreases i; */
/*@ assert i == 0; */
/*@ loop_invariant i<=5 && i>=0; decreases i-2; */
/*@ assert i == 0; */
/*@ loop_invariant i<=5 && i>=0; decreases i; */
/*@ assert i == 0; */
/*@ loop_invariant i<=5 && i>0; decreases i; */
/*@ assert i == 0; */
/*@ loop_invariant i>=0; decreases i; */
/*@ assert i == 0; */
/*@ loop_invariant i>=0; decreases i; */
/*@ assert i == 0; */
/*@ loop_invariant i>=0; decreases i; */
/*@ assert i == 0; */
/*@ assert i == 6; */
/*@ assert i == 5; */
/*@ assert i == 4; */
/*@ assert i == 5; */
/*@ assert i == 6; */
/*@ assert i == 5; */
/*@ assert i == 4; */
/*@ assert i == 5; */
/*@ assert j == 5; */
/*@ assert j == 6; */
/*@ assert j == 5; */
/*@ assert j == 4; */
/*@ assert j == 6; */
/*@ assert j == 5; */
/*@ assert j == 4; */
/*@ assert j == 5; */
/*@ assert i == 12; */
/*@ assert i == 5; */
/*@ assert i == 12 && i == j; */
/*@ assert i == 5; */
/*@ assert i == -2; */
/*@ assert i == 5; */
/*@ assert i == -2 && i == j; */
/*@ assert i == 5; */
/*@ assert i == 5*7; */
/*@ assert i == 5; */
/*@ assert i == 5*7 && i == j; */
/*@ assert i == 5; */
/*@ assert i == 5/7; */
/*@ assert i == 5; */
/*@ assert i == 5/7 && i == j; */
/*@ assert i == 5; */
//@ requires i > -2147483648;    "

/*@ assert j >= 0; */
//@ requires i > -2147483648;    "

/*@ assert j == -1; */
/*@ assume i > 0; */
/*@ assert (\\lblpos ISP i>0); */
/*@ assume i > 0; */
/*@ assert (\\lblneg ISN i<0); */
/*@ assume i > 0; */
/*@ assert !(\\lblneg ISN2 i>0); */
/*@ assume i > 0; */
/*@ assert (\\lblpos ISP i<0); */
/*@ assume i > 0; */
/*@ assert !(\\lblpos ISP2 i>0); */
/*@ assert o != oo;*/
/*@ assert o == oo;*/
/*@ assert o != null;*/
/*@ assert o == null;*/
/*@ assert o != oo;*/
/*@ assert o == oo;*/
/*@ assert o != null; assert o.length == 5; */
/*@ assert o.length == 6;*/
/*@non_null*/
/*@ assert a.length >= 0;*/
/*@ assert o != oo;*/
/*@ assert o == oo;*/
/*@ assert o.length == 3; assert o[1] == 11;*/
/*@ assert o.length == 4; */
/*@ assert o.length == 3; assert o[1] == 10;*/
/*@ assert o != null; assert o.length == 3; assert o[1] == 11;*/
/*@ assert o.length == 3; assert o[1] != null; assert o[1].length == 3; assert o[1][2] == 14; assert o[0] != null; assert o[0].length == 2; assert o[0][1] == 11; */
/*@ assert o.length == 3; assert o[1] != null; assert o[1].length == 3; assert o[1][2] == 14; assert o[0] != null; assert o[0].length == 2; assert o[0][1] == 11; */
/*@ assert o.length == 3; assert o[1] == null; assert o[2] != null; assert o[2].length == 1; assert o[2][0] == 15; */
/*@ assert oo[0] != oo[1]; */
/*@ assert o != oo;*/
/*@ assert o == oo;*/
/*@ assert o.length == 5; assert o[1].length == 3; */
/*@ assert o.length == 6;*/
/*@ assert o[1].length == 4;*/
/*@non_null*/
/*@ assert a.length >= 0;*/
/*@ assert o.length == 3; */
/*@ assert o.length == 2; */
/*@ assert o[1][2] == 14; */
/*@ assert o[2].length == 1; */
/*@ assert o[0].length == 2; */
/*@ assert o != null; assert o.length == 5; assert o[1] == null; */
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assume a[1] == 2; */
/*@ assert a[1] == 2; */
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assume a[1] == 2; */
/*@ assert a[1] == 3; */
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assume a[1] == 2; */
/*@ assert a[1] == 3; */
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assume a[1] == 2; */
/*@ assert a[1] == 4; */
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assume a[0] == 2; */
/*@ assert a[0] == 2; */
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assume a[0] == 2; */
/*@ assert a[0] == 4; */
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assume a[1] == 2; */
/*@ assert a[1] == 3; */
/*@ assert a[1] == 4; */
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assume a[1] == 2; */
/*@ assert a[1] == 3; */
/*@ assert a[1] == 5; */
/*@non_null*/
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assert a[0] == b[0]; */
/*@non_null*/
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assert a[0] != b[0]; */
/*@non_null*/
/*@non_null*/
/*@ assume b.length == 10 && a.length == 10;*/
/*@ assert b[0] == 7; */
/*@non_null*/
/*@non_null*/
/*@ assume b.length == 10 && a.length == 10;*/
/*@ assert b[0] == 8; */
/*@non_null*/
/*@non_null*/
/*@ assume b.length == 10 && a.length == 12;*/
/*@ assert b != null; assert a != null; assert b.length == 12; assert a.length == 12; */
/*@non_null*/
/*@assume a.length == 10; assume a[1] != null; assume a[1].length == 5; */
/*@ assume a[1][2]; */
/*@ assert a[1][2]; */
/*@non_null*/
/*@assume a.length == 10; assume a[1] != null; assume a[1].length == 5; */
/*@ assume a[1][2]; */
/*@ assert !a[1][2]; */
/*@non_null*/
/*@assume a.length == 10; assume a[1] != null; assume a[1].length == 5; */
/*@ assume a[1][2]; */
/*@ assert !a[1][2]; */
/*@non_null*/
/*@assume a.length == 10; assume a[1] != null; assume a[1].length == 5; */
/*@ assume a[1][2]; */
/*@ assert a[1][3]; */
/*@non_null*/
/*@assume a.length == 10; assume a[1] != null; assume a[1].length == 5; */
/*@ assume a[1][2]; */
/*@ assert a[0][2]; */
/*@non_null*/
/*@assume a.length == 10; assume a[1] != null; assume a[1].length == 5; */
/*@ assume a[1][2]; assume a[0] != null; */
/*@ assert a[0][2]; */
/*@non_null*/
/*@assume a.length == 10; assume a[1] != null; assume a[1].length == 5; */
/*@ assume a[1][2]; assume a[0] != null; assume a[0].length > 5; */
/*@ assert a[0][2]; */
/*@non_null*/
/*@assume a.length == 10; assume a[1] != null; assume a[0] != null; assume a[1].length == 5; assume a[0].length == 3; */
/*@ assume a[0][0]; */
/*@ assert a[0][0]; */
/*@non_null*/
/*@assume a.length == 10; assume a[1] != null; assume a[0] != null; assume a[1].length == 5; assume a[0].length == 3; */
/*@ assume a[0][0]; */
/*@ assert !a[0][0]; */
/*@non_null*/
/*@assume a.length == 10; assume a[1] != null; assume a[1].length == 5; */
/*@ assert a[0][3] == a[1][3]; */
/*@non_null*/
/*@assume a.length == 10; assume a[1] != null; assume a[1].length == 5; */
/*@ assert a[0][3] != a[1][3]; ; */
/*@non_null*/
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assert a[0] == b[0]; */
/*@non_null*/
/*@non_null*/
/*@assume a.length == 10;*/
/*@ assert a[0] != b[0]; */
/*@non_null*/
/*@non_null*/
/*@ assume b.length == 10 && a.length == 10 && b[0] != null && a[0] != null && b[0].length == 5 && a[0].length==6;*/
/*@ assert !b[0][0]; */
/*@non_null*/
/*@non_null*/
/*@ assume b.length == 10 && a.length == 10 && b[0] != null && a[0] != null && b[0].length == 5 && a[0].length==6;*/
/*@ assert b[0][0]; */
/*@non_null*/
/*@non_null*/
/*@ assume b.length == 10 && a.length == 12;*/
/*@ assert b != null; assert a != null; assert b.length == 12; assert a.length == 12; */
/*@ nullable_by_default */
//@ public static invariant t != null;     "

/*@non_null*/
/*@ assume t.f == 2; */
/*@ assert t.f == 2; */
/*@non_null*/
/*@ assume t.f == 2; */
/*@ assert t.f == 3; */
/*@non_null*/
/*@ assume t.f == 2; */
/*@ assert t.f == 3; */
/*@non_null*/
/*@ assume t.f == 2; */
/*@ assert t.f == 4; */
/*@non_null*/
/*@ assume t.g == 2; */
/*@ assert t.g == 2; */
/*@non_null*/
/*@ assume t.g == 2; */
/*@ assert t.g == 4; */
/*@non_null*/
/*@ assume t.f == 2; */
/*@ assert t.f == 3; */
/*@ assert t.f == 4; */
/*@non_null*/
/*@ assume t.f == 2; */
/*@ assert t.f == 3; */
/*@ assert t.f == 5; */
/*@non_null*/
/*@non_null*/
/*@ assert a.f == b.f; */
/*@non_null*/
/*@non_null*/
/*@ assert a.f != b.f; */
/*@non_null*/
/*@non_null*/
/*@ assert b.f == 7; */
/*@non_null*/
/*@non_null*/
/*@ assert b.f == 8; */
/*@non_null*/
/*@non_null*/
/*@ assert a.sf == b.sf; */
/*@non_null*/
/*@non_null*/
/*@ assert a.sf != b.sf; */
/*@non_null*/
/*@non_null*/
/*@ assert 3 == b.sf; */
/*@non_null*/
/*@non_null*/
/*@ assert 3 != b.sf; */
/*@non_null*/
/*@ assert f == this.f; */
/*@ assert a == this ==> a.f == f; */
/*@non_null*/
/*@ assert f == this.f; */
/*@ assert a.f == f; */
/*@non_null*/
/*@ assert sf == this.sf; */
/*@ assert a.sf == sf; */
/*@ assume i>=-1 && i <=1; */
/*@ assert j!=0; */
/*@ assume i>=-1 && i <=1; */
/*@ assert j==1; */
/*@ assume i>=-1 && i <=1; */
/*@ assert j>0; */
/*@ assume i>=-1 && i <=1; */
/*@ assert i==0 ==> j==-1; */
/*@ assume i>=-1 && i <=1; */
/*@ assert j>=0; */
/*@ assume i>=-1 && i <=1; */
/*@ assert j>0; */
/*@ assume i>=-1 && i <=1; */
/*@ assert j>=0; */
//@ ensures i == 2;    "

//@ ensures i == 1;    "

//@ public exceptional_behavior requires b;  signals (Exception e) true; signals (RuntimeException e) true;    "

//@ also    " + "//@ public normal_behavior requires !b; ensures true;    "

//@ requires k < 0;    " + "//@ ensures true;    " + "//@ also    " + "//@ requires k > 0;    "

//@ ensures \\result == 1;    " + "public int m1() {    " + "    int i = 1;    " + "    try {    "

//@ assert e != null;    " + "        i = 2;    " + "    }    "

//@ requires k < 0;    " + "//@ ensures true;    " + "//@ also    " // Line

//@ requires k > 0;    " + "//@ ensures \\result == 1;    " + "public int m2() {    " + "    int i = 1;    "

//@ assert e != null;    " + "        i = 1;    " // Line

//@ requires i > 0;    " + "  //@ ensures i > 0;    "

/*@ assert a*2 == a + a; */
/*@ assert a * b ==
                // a *(b-1) + a; */
/*@ assert (2*a)/2 == a; */
/*@ assert a >= 0 ==> (a%3) < 3; */
/*@ assert a >= 0 ==> (a%3) >= 0; */
/*@ assert (a >= 0
                // && b > 0) ==> (a%b) >= 0; */
/*@ assert (a >= 0
                // && b > 0) ==> ((a*b)%b) == 0; */
/*@ assert (a >= 0 ) ==> ((5*a)%5) == 0; */
//@ requires i < 1000; ensures \\result == i+1;    "

//@ pure     "

/*@ assume a < 100; */
/*@ assert k == m(a); */
/*@ assume a < 100; */
/*@ assert k == m(a); */
/*@ assume a < 100; */
/*@ assert k == m(a) + m(a); */
/*@ assume a < 100; */
/*@ assert k == 1 + m(a) + m(a); */
/*@ assume a < 100; */
/*@ assert k == m(m(a+1)); */
/*@ assume a < 100; */
/*@ assert k == m(m(a+1)); */
//@ requires i < 1000; ensures \\result == i+1;    "

//@ pure     "

/*@ assume a < 100; */
/*@ assert k == m(a); */
/*@ assume a < 100; */
/*@ assert k == m(a); */
/*@ assume a < 100; */
/*@ assert k == m(a) + m(a); */
/*@ assume a < 100; */
/*@ assert k == 1 + m(a) + m(a); */
/*@ assume a < 100; */
/*@ assert k == m(m(a+1)); */
/*@ assume a < 100; */
/*@ assert k == m(m(a+1)); */
/*@ code_bigint_math*/
//@ ensures \\result == z+1;    " + "  //@ pure     "

/*@ assert k == m(); */
/*@ assert k == m(); */
/*@ assert k == m() + m(); */
/*@ assert k == 1 + m() + m(); */
/*@ assert k == m(); */
/*@ assert k == m(); */
/*@ code_bigint_math*/
//@ ensures \\result == z+1;    "

//@ pure     "

/*@ assert k == m(); */
/*@ assert k == m(); */
/*@ assert k == m() + m(); */
/*@ assert k == 1 + m() + m(); */
//@ ensures \\result > 0;    "

//@ also    "

//@ ensures \\result > ii;    "

/*@ code_bigint_math*/
//@ also public normal_behavior    "

//@ ensures \\result == i+1;    "

//@ pure    "

//@ requires a >= 0;    "

//@ ensures \\result == a+1;    "

//@ requires iii > 0;    " + "  //@ ensures \\result > 0;    " + "  abstract public int m(int iii);    "

//@ also    "

//@ ensures \\result > ii;    " + "  abstract public int m(int ii);    " + "}    "

/*@ code_bigint_math*/
//@ also    "

//@ ensures \\result == i+1;    " + "  //@ pure    " + "  public int m(int i) { return i+1; }    "

//@ ensures \\result == a+1;    " + "  public int n1(int a) { return m(a); }    "

//@ requires iii > 0;    " + "  //@ ensures \\result > 0;    " + "  abstract public int m(int iii);    "

//@ also    "

//@ requires ii > 0;    " + "  //@ ensures \\result > ii;    " + "  abstract public int m(int ii);    "

/*@ code_bigint_math*/
//@ also    "

//@ requires i > 0;    " + "  //@ ensures \\result == i+1;    " + "  //@ pure    "

//@ requires iii == 1;    "

//@ ensures \\result == iii;    "

//@ also    "

//@ requires ii == 2;    "

//@ ensures \\result == ii;    "

/*@ code_bigint_math*/
//@ also    "

//@ requires i == 3;    "

//@ ensures \\result == i;    "

//@ pure    "

//@ requires a >= 1 && a <= 3;    "

//@ ensures \\result == a;    "

//@ ensures \\result == a;    "

//@ requires 0<=ii && ii <=3;    "

//@ ensures \\result < 0;    " + "  public static int m(int ii) {     "

//@ requires ii == 2;    " + "  //@ ensures \\result == 0;    "

//@ ensures is == 6;    "

//@ ensures \\result == 1;    " + "  public static int m4(int ii) {     " + "    try { ii = 0;     "

//@ assert c == 1;     " + "    return c;     " + "  }    " + "

//@ ghost int d = c+1;    " + "    //@ assert d + c == 9;     " + "    return c;     "

//@ ghost int d = c+1;    " + "    //@ assert d + c == 10;     " + "    return c;     "

//@ ghost int d = c+1;    " + "    //@ set d = 10;    " + "    //@ assert d + c == 14;     "

//@ ghost int d = c+1;    " + "    //@ set d = 10;    " + "    //@ assert d + c == 15;     "

//@ ghost int d = c+1;    " + "    //@ debug d = 10;    " + "    //@ assert d + c == 14;     "

//@ ghost int d = c+1;    " + "    //@ debug d = 10;    " + "    //@ assert d + c == 15;     "

/*@ nullable_by_default */
/*@non_null*/
//@ requires o != null;    "

//@ public normal_behavior  ensures \\result == (oo != null);    "

/*@ nullable_by_default */
/*@non_null*/
//@ requires o != null;    " + "  public static void m2(TestJava o) {     " + "    int i = o.z();     "

//@ public normal_behavior  ensures \\result == (oo != null);    "

//@ signals_only \    othing;      public int z() { return 0; }    " + "

/*@non_null*/
//@ requires o != null;    " + "  public static void m2(TestJava o) {     " + "    int i = o.z();     "

//@ public normal_behavior  ensures \\result == (oo != null);    "

//@ signals_only \    othing;      public static int z() { return 0; }    " + "}");

/*@ nullable_by_default */
/*@ code_java_math spec_java_math*/
//@ requires a != null;    "

//@ requires a != null;    "

//@ assume a.length == 1;     "

/*@ non_null*/
/*@ non_null*/
/*@ nullable_by_default */
//@ assume o.j == 1;     " + "  }    "

/*@non_null*/
//@ assume o.j == 1;     " + "  }    "

//@ requires o != null;    " + "  public static void m2(TestJava o) {     "

//@ assume o.j == 1;     " + "  }    " + "  public static void m3(TestJava o) {     "

//@ assume o != null && o.j == 1;     " + "  }    " + "  public static void m4(TestJava o) {     "

//@ assume o == null || o.j == 1;     " + "  }    " + "  public static void m5(TestJava o) {     "

//@ assume o != null ==> o.j == 1;     " + "  }    " + "

/*@ nullable_by_default */
//@ assume o.j == 1;     " + "  }      "

//@ assume a[0] == 1;     " + "  }    "

//@ requires a != null;    " + "  public static void m2(int[] a) {     "

//@ assume a[-1] == 1;     " + "  }    " + "  //@ requires a != null;    "

//@ assume a.length == 1;     "

//@ assume a[1] == 1;     " + "  }    " + "  public static void m4(int i, int j) {     "

//@ assume i/j == 4;     " + "  }    " + "  public static void m5(int i, int j) {     "

//@ assume i%j == 4;     " + "  }    " + "  public static void m6(RuntimeException r) {     "

//@ assume ((Exception)t) != null ? true : true;     " // OK

//@ assume ((RuntimeException)t) != null ? true : true ;     " + "  }    "

/*@ non_null*/
//@ assume ((Exception)t) != null ? true : true;     " + "  }    "

/*@ non_null*/
//@ assume ((RuntimeException)t) != null ? true : true ;     " + "  }    " + "

/*@ nullable_by_default */
//@ assume o.j == 1;     "

//@ assert o.j == 1 ? true : true;     "

//@ ghost int i = o.j;     "

//@ ghost int i; debug i = o.j;     "

//@ requires o.j == 1;    "

//@ ensures t.j == 1 ? true : true;    "

//@ ghost int i; set i = o.j;     "

/*@ nullable_by_default */
//@ assume o.j == 1;     "

/*@ nullable_by_default */
//@ public invariant t.j ==1 ? true: true;    " + "

/*@ nullable_by_default */
//@ public initially t.j ? true : true;    " + "

/*@ nullable_by_default */
//@ public constraint t.j ==1 ? true: true;    " + "

/*@ nullable_by_default */
//@ assert i == 1;    "

//@ assert i == 2;    "

//@ assert i == 2;    " + "  }    " + "  public void mp() {    "

//@ assert i == 2 && j == 3;    " + "  }    " + "  public void ma() {    " + "    int i = 0;    "

//@ assert i == 1;    " + "  }    " + "  public void m1(int k) {    "

//@ assume k == 0;     " + "    try {    " + "      try {    "

//@ assert i == 2 && j == 50;    "

//@ assume k == 0;     " + "    try {    " + "    try {    " + "      try {    "

//@ assert i == 2 && j == 50;    " + "    }    "

//@ assert i == 0;    " + "  }    "

//@ assert i == 0;    "

//@ public normal_behavior     "

//@   requires i != 1 & i != 2;    "

//@   ensures \\result == 0;    "

//@ also public exceptional_behavior     "

//@   requires i == 2 && ee != null;     "

//@   signals (ArrayIndexOutOfBoundsException ex) true;     "

_by_default     "

//@ public normal_behavior     "

//@   requires i != 1 & i != 2;    "

//@   ensures \\result == 0;    "

//@ also public exceptional_behavior     "

//@   requires i == 2;     "

//@   signals (ArrayIndexOutOfBoundsException ex) true;     "

//@ public normal_behavior     "

//@   requires e != null & ee != null & ae != null;    "

//@   requires i != 1 & i != 2;    "

//@   ensures \\result == 0;    "

//@ also public exceptional_behavior     "

//@   requires e != null & ee != null & ae != null;    "

//@   requires i == 2;     "

//@   signals (ArrayIndexOutOfBoundsException ex) true;     "

/*@non_null*/
//@ assume \\typeof(o) == \\type(Object);    "

//@ assert \\typeof(o) == \\typeof(o);    "

//@ assert \\typeof(o) == \\type(Object);    "

//@ assert \\typeof(o) <: \\type(Object);    "

//@ assert \\typeof(o) <:= \\type(Object);    "

/*@non_null*/
//@ assume \\typeof(o) == \\type(Object);    "

//@ assert \\typeof(o) != \\type(Object);    "

/*@non_null*/
//@ assume \\typeof(o) == \\type(Object);    "

//@ assert \\typeof(o) == \\type(Object);    "

/*@non_null*/
//@ assume \\typeof(o) == \\type(Object);    "

//@ assert \\typeof(o) == \\type(TestJava);    "

/*@non_null*/
//@ assume \\typeof(o) == \\type(Object);    "

//@ assert \\type(TestJava) <: \\typeof(o);    "

//@ assert \\type(TestJava) <:= \\typeof(o);    "

/*@non_null*/
//@ assume \\typeof(o) == \\type(TestJava);    "

//@ assert \\typeof(o) <: \\type(Object);    " + "  }    "

/*@non_null*/
//@ assert \\typeof(o) <: \\type(Object);    " + "  }    " + "}");

/*@non_null*/
//@ assert JML.erasure(\\typeof(o)) == o.getClass();    "

//@ requires i >= 0;    " + "  //@ ensures i>0;    " + "  //@ signals (Exception e) i == 0;    "

//@ requires i >= 0;    " + "  //@ ensures i>0;    " + "  //@ signals (Exception e) i == 1;    " // FAILS

//@ requires i >= 0;    " + "  //@ ensures i>0;    " + "  //@ signals (Exception e) i == 0;    " // OK

//@ requires i >= 0;    " + "  //@ ensures i>0;    " + "  //@ signals (RuntimeException e) i == 1;    " // FAILS

//@ requires i >= 0;    " + "  //@ ensures i>0;    " + "  //@ signals (Exception e) i == 0;    "

//@ requires i >= 0;    "

//@ ensures i>0;    " + "  //@ signals (Exception e) i == 1;    " // FAILS

//@ requires i >= 0;    " + "  //@ ensures i>0;    " + "  //@ signals (RuntimeException e) i == 1;    " // OK

//@ signals_only java.io.IOException;    " // FAILS

//@ signals_only \    othing;    " // FAILS

//@ signals_only Exception;    " // OK

//@ public constraint i > \\old(i) for m1();    " + "  public void m1() {    " + "  }    "

//@ public constraint i > \\old(i) for ! m1();    " + "  public void m1() {    " + "  }    "

//@ public constraint i > \\old(i) for \\everything;    " + "  public void m1() {    "

//@ public constraint i > \\old(i) for !\    othing;    " + "  public void m1() {    " + "  }    "

//@ public constraint i > \\old(i) for \    othing;    " + "  public void m1() {    " + "  }    "

//@ public constraint i > \\old(i) for !\\everything;    " + "  public void m1() {    "

//@ public constraint i > \\old(i);    " + "  public void m1() {    " + "  }    "

//@ public constraint i > \\old(i) for m1(), m1(int);    " + "  public void m1() {    "

//@ public constraint i > \\old(i) for m1(), m1(int);    " + "  public static void m1() {    "

//@ public constraint i > \\old(i) for ! m1(), m1(int);    " + "  public void m1() {    "

//@ public constraint i > \\old(i) for TestJava();    " + "  public TestJava() {    " + "  }    " + "

//@ public constraint i > \\old(i);    " + "  public TestJava() {    " + "  }    " + "}");

//@ public static constraint i > \\old(i) for TestJava();    " + "  public TestJava() {    "

//@ public static constraint i > \\old(i);    " + "  public TestJava() {    " + "  }    " + "

//@ ghost static public int i = 0;    "

//@ public static constraint i > \\old(i);    " + "}    "

//@ ghost static public int i = 0;    "

//@ public constraint i > \\old(i);    " + "}    " + "public class TestJava implements A {     "

//@ normal_behavior     "

//@ ensures \\result == (i > 0 && i < 10);    "

//@ pure    "

//@ model public boolean m(int i);    "

//@ assert (\\forall int k; 3<k && k <7; m(k));    "

//@ assert (\\forall int k; 3<k && k <7; m(k-1));    "

//@ assert !(\\forall int k; -3<k && k <7; m(k));    "

//@ normal_behavior     "

//@ ensures \\result == (i > 0 && i < 10);    "

//@ pure function    "

//@ model public static boolean m(int i);    "

//@ pure    "

//@ assert !(\\forall int k; 3<k && k <11; m(k));    "

//@ normal_behavior     "

//@ ensures \\result == (i > 0 && i < 10);    "

//@ pure    "

//@ model public boolean m(int i);    "

//@ pure    "

//@ assert !(\\forall int k; 3<k && k <11; m(k));    "

/*@ spec_public */
//@ assignable \\everything;     "


/*@ spec_public */
//@ assignable \\everything;     "


/*@ spec_public */
/*@ spec_public */
//@ assignable \\everything;     "


//@ assert array.length >= 0;     "

//@ assert array.length <= Integer.MAX_VALUE;     "

//@ requires k >= 0;    "

//@ assert array.length >= 0;     "

//@ assert array.length <= Integer.MAX_VALUE;     "

//@ assert array.length == k;     "

//@ assert array.length >= 0;     "

//@ assert array.length <= Integer.MAX_VALUE;     "

//@ assert array.length >= 0;     "

//@ assert array.length <= Integer.MAX_VALUE;     "

//@ requires (\\forall int i; 0 <= i && i < args.length; args[i] >= 0);    "

//@ requires (\\forall int i; 0 <= i && i < args.length; args[i] >= 0); requires n == -2;    "

//@ requires (\\forall int i; 0 <= i && i < args.length; args[i] >= 0);    "

//@ requires (\\forall int i; 0 <= i && i < args.length; args[i] >= 0);"

//@ assert (\\lbl I i) + \\lbl(J j) == 0;     "

//@ assert (\\lbl I i) + \\lbl(J,j) == 0;     "

//@ nullable_by_default     "

/*@ requires o != null;     "
                        + "      ensures \\result == (j>=0);     "
                        + "     pure function */
//@ signals (NullPointerException e) positive(null,j);     "

//@ signals (NegativeArraySizeException e) positive(null,j);     "

//@ ensures j >= 0;     "

//@ ensures ii == 19; static_initializer "

//@ public final invariant ii == 19;     "

//@ public normal_behavior ensures \\result == 10 + 9; pure    "

//@ public normal_behavior ensures \\result == 19; pure    "

//@ ensures ii == 19 && jj == 21; static_initializer "

//@ public final invariant ii == 19;     "

//@ public normal_behavior ensures \\result == 10 + 9; pure    "

//@ public normal_behavior ensures \\result == 21; pure    "

//@ ensures ii == mm(); static_initializer "

//@ public final invariant ii == 19;     "

//@ public normal_behavior ensures \\result == 10 + 9; pure    "

//@ public normal_behavior ensures \\result == 19; pure    "

//@ public final invariant ii == 19;     "

//@ public normal_behavior ensures \\result == 10 + 9; pure    "

/*@ spec_public */
//@ public normal_behavior     "

//@   ensures num == 10;     "

//@   ensures A.bit == 1;     "

//@   ensures B.bit == 2;     "

//@ static_initializer     "

/*@ spec_public */
/*@ spec_public */
//@ public normal_behavior     "

//@   ensures num == 10;     "

//@   ensures A.bit == 1;     "

//@   ensures B.bit == 2;     "

//@ static_initializer     "

//@ public normal_behavior     "

//@   requires \    onnullelements(arr);     "

//@ public normal_behavior     "

//@   requires true;     "

//@ show i, j+1;    "

//@ show k;    "

//@ assert k > 0;    "

//@ show m,k;    "

//@ assert m > 0;    "

//@ public normal_behavior     "

//@   requires true;     "

//@ show i;    "

//@ public normal_behavior     "

//@   requires true;     "

//@ show i;    "

//@ show     "

//@ show i i;    "

//@ show;    "

//@ show i    "

//@ show %;    "

//@ public normal_behavior     "

//@   requires k != null && \    onnullelements(k) && \\elemtype(\\typeof(k)) <: \\type(Key);     "

//@ assert kk != null;    "

//@ assert \    onnullelements(kk);    "

//@ assert \\elemtype(\\typeof(kk)) == \\type(Key);    "

//@ public normal_behavior     "

//@   requires k != null && \    onnullelements(k) && \\elemtype(\\typeof(k)) <: \\type(Key);     "

//@ assert kk != null;    "

//@ assert \    onnullelements(kk);    "

//@ assert \\elemtype(\\typeof(kk)) == \\type(Key);    "

//@ ghost int k = 1;    "

//@ ghost int k = 2;    "

//@ ghost int i = 2;    "

//@ assert 0 <= i < 10 < 12;    "

//@ set i = 10;    "

//@ assert !(0 <= i < 10);    "

//@ assert 0 <= i < 11 == 2 <= i <= 12;    "

//@ assert 11 >= i+1 > 1 == 12 >= i > 2;    "

//@ assert 11 >= i+1 < 12;    "

//@ assert 11 >= i+1 < 12 == true;    "

//@ assert 11 >= i+1 > 1 != 12 <= i <= 22;    "

//@ signals_only \    othing;    "


//@ allow NullPointerException;     "


//@ forbid NullPointerException;     "



//@ ignore NullPointerException;     "



//@ ignore java.lang.XX;     "


//@ allow NullPointerException;     "

//@ forbid NullPointerException;     "

//@ forbid X;     "

//@ forbid ;     "

//@ forbid NullPointerException     "

//@ forbid NullPointerException, ArrayIndexOutOfBoundsException;     "

//@ forbid NullPointerException ArrayIndexOutOfBoundsException;     "

//@ forbid NullPointerException; allow NullPointerException     "

//@ ignore NullPointerException; allow NullPointerException     "

//@ ignore NullPointerException; forbid NullPointerException     "

//@ forbid java.lang.NullPointerException     "

//@ forbid java.lang.     "

//@ assert JML.lbl(\"AL\",i) == null;     "

//@ assert JML.lbl(\"AL\",i) == null;     "

//@ assert JML.lbl(\"AL\",i) == 0;     "

//@ assert JML.lbl(\"AL\",i) == 0;     "

//@ assert JML.lbl(\"AL\",i);     "

//@ assert JML.lbl(\"AL\",i) == 0;     "

//@ assert JML.lbl(\"AL\",i) == 0;     "

//@ assert JML.lbl(\"AL\",i) == null;     "

//@ assert JML.lbl(\"AL\",i) == null;     "

//@ assert JML.lbl(\"AL\",i) == 0;     "

//@ assert JML.lbl(\"AL\",i) == 0;     "

//@ assert JML.lbl(\"AL\",i);     "

//@ assert JML.lbl(\"AL\",i) == 0;     "

//@ assert JML.lbl(\"AL\",i) == 0;     "

//@ assert JML.lbl(\"AL\",i) == null;     "

//@ assert JML.lbl(\"AL\",i) == null;     "

//@ assert JML.lbl(\"AL\",i) == 0;     "

//@ assert JML.lbl(\"AL\",i) == 0;     "

//@ assert JML.lbl(\"AL\",i);     "

//@ assert JML.lbl(\"AL\",i) == 0;     "

//@ assert JML.lbl(\"AL\",i) == 0;     "

//@ assert JML.lbl(\"AL\",i) == null;     "

//@ assert JML.lbl(\"AL\",i) == null;     "

//@ assert JML.lbl(\"AL\",i) == 0;     "

//@ assert JML.lbl(\"AL\",i) == 0;     "

//@ assert JML.lbl(\"AL\",i);     "

//@ assert JML.lbl(\"AL\",i) == 0;     "

//@ assert JML.lbl(\"AL\",i) == 0;     "

//@ assert JML.lbl(\"AL\",i) == null;     "

//@ assert JML.lbl(\"AL\",i) == null;     "

//@ assert JML.lbl(\"AL\",i) == 0;     "

//@ assert JML.lbl(\"AL\",i) == 0;     "

//@ assert JML.lbl(\"AL\",i);     "

//@ assert JML.lbl(\"AL\",i) == 0;     "

//@ assert JML.lbl(\"AL\",i) == 0;     "

/*@ non_null*/
/*@ non_null*/
//@ requires a.containsNull == false;    "

/*@ non_null*/
//@ public normal_behavior    "

//@   ensures \\result == i;    "

//@ pure    "

//@ public normal_behavior    "

//@   ensures \\result == i;    "

//@ pure    "

/*@ immutable */
//@   public model_program {    "

//@      return t;    "

//@    }    "

//@ pure function    "

/*@ immutable */
//@ public normal_behavior ensures true; pure function     "

//@ public normal_behavior    "  // Line 14

//@   ensures \\result == i;    "

//@ pure    "

/*@ immutable */
//@   public normal_behavior     "

//@      ensures \\result == t;    "

//@ pure function    "

/*@ immutable */
//@ public normal_behavior ensures true; pure function    "

//@ public normal_behavior    "  // Line 13

//@   ensures \\result == i;    "

//@ pure    "

//@ public normal_behavior assignable i; ensures i == !\\old(i) ;    "

//@ requires a != null;    "

//@ requires j < 1000 && j > -1000;    "

//@ assignable field;    "

//@ ensures \\result == j+101;    "

//@ ensures field == j+100;    "

/*@{FF}*/
/*@{FF}*/
/*@ @FunctionalInterface model public static interface FF extends BiFunction<TestJava,Integer,Integer> {      "
                +"        also assignable t.field; ensures t.field == n; ensures \\result == n+1;      "
                +"        non_null      "
                +"       Integer apply(TestJava t, Integer n);} */
//@ public normal_behavior assignable field; ensures \\result == i + 1 && field == i ;    "

//@ public normal_behavior assignable field; ensures \\result == i + 1 ;    "

//@ requires j < 1000 && j > -1000;    "

//@ assignable field;    "

/*@{FF}*/
/*@!FF*/
//@ assignable field;    "

//@ assert field == 300;    "

//@ public normal_behavior requires true;    "

//@ ghost boolean b;"

//@ set b = RuntimeException::new == RuntimeException::new;    "

//@ assert b;    "

//@ set b = RuntimeException::new != null;    "

//@ assert b;    "

//@ set b = null != RuntimeException::new;    "

//@ assert b;    "

//@ set b = null != (java.util.function.Function)(x -> x);    "

//@ assert b;    "

//@ set b = java.util.function.Function::identity != (java.util.function.Function)(x -> x);    "

//@ assert b;    "

//@ public model static class R extends C {};    "

/*@ nullable {R}*/
/*@{R}*/
//@ public normal_behavior requires true;    "

//@ assert field == null || field instanceof R;"

/*@ nullable {R}*/
/*@{R}*/
//@ public normal_behavior requires true;    "

//@ assert field == null || field instanceof R;"

//@ public normal_behavior    "

//@   ensures \\result instanceof NullPointerException;    "

//@ public normal_behavior    "

//@ ensures exx == ex;    "

//@ public normal_behavior    "

//@ ensures exx == RuntimeException::new;    "

//@ public normal_behavior    "

//@ assignable exx;    "

//@ ensures exx == ex;    "

//@ public normal_behavior    "

//@ assignable exx;    "

//@ ensures exx == NullPointerException::new;    "

//@ public exceptional_behavior requires true; signals_only NullPointerException;    "

//@ public exceptional_behavior requires true; signals_only NullPointerException;    "

//@ public normal_behavior    "

//@   ensures \\result instanceof NullPointerException;    "

//@ public normal_behavior    "

//@ ensures exx == NullPointerException::new;    "

//@ public exceptional_behavior requires true; signals_only ArithmeticException;    "

//@ also public normal_behavior    "

//@   requires true;    "

//@ pure    "

//@ public behavior requires true; pure    "   // Line 10


//@ public normal_behavior requires true; pure    "

//@ public normal_behavior requires true; pure    "

/*@ {java.util.function.Supplier.Pure<Boolean>}*/
//@ public normal_behavior requires true; pure    "

/*@ {java.util.function.Supplier.PureNonNull<Boolean>}*/
//@ also public normal_behavior    "

//@   requires true;    "

//@ pure    "

//@ public behavior ensures true; pure    "

/*@!PureSupplier */
/*@ ( PureSupplier )@*/
//@ public behavior ensures true; pure    "

/*@!PureSupplier*/
//@ public model_program { return x -> x; }    "

//@ nullableByDefault

//@ assert b;    "  // Should be false

//@ inline     "


//@ nullableByDefault

//@ requires ppp == this.ppp;    "

//@ assert b;    "  // Should be true

//@ inline     "


//@ nullableByDefault

//@ assert b;    "

//@ inline     "


//@ nullableByDefault

//@ assert b;    "

//@ inline     "


//@ nullableByDefault

//@ assert b;    "  // SHould be true

//@ inline     "


/*@ non_null_by_default*/
//@ requires this.a == 11;    "

//@ assert b == 9 + 7 + 11 + (11+9+11+100);    "

//@ inline     "


/*@ non_null_by_default*/
//@ model public static interface NNFunction<T,R> extends Function<T,R> { non_null R apply(non_null T t); }     "

//@ requires this.a == 11;    "

//@ assert b == 9 + 7 + 11 + (11+9+11+100);    "

//@ requires f != null; inline     "

/*@{NNFunction<Integer,Integer>}*/
/*@ spec_public nullable */
//@ assignable this.aaaaaaaaaaa;    "

//@ ensures this.aaaaaaaaaaa != null;    "

//@ ensures this.aaaaaaaaaaa.byteValue() == aaaaaaaaaaa;    "

//@ public model static interface NoException { public normal_behavior ensures true; void run(); }     "

//@ public normal_behavior requires true; { r.run(); } ensures true;     "

/*@{NoException}*/

//@ assignable this.aaaaaaaaaaa;    "

//@ ensures this.aaaaaaaaaaa != null;    "

//@ ensures this.aaaaaaaaaaa.intValue() == aaaaaaaaaaa;    "

//@ public behavior requires true; { r.run(); } ensures true;     "

/*@ non_null*/
/*@ non_null*/
//@ requires a.containsNull == false;    "

/*@ non_null*/
//@ public normal_behavior    "

//@   ensures \\result == i;    "

//@ pure    "

//@ public normal_behavior    "

//@   ensures \\result == i;    "

//@ pure    "

/*@ immutable */
//@   public model_program {    "

//@      return t;    "

//@    }    "

//@ pure function    "

/*@ immutable */
//@ public normal_behavior ensures true; pure function     "

//@ public normal_behavior    "  // Line 14

//@   ensures \\result == i;    "

//@ pure    "

/*@ immutable */
//@   public normal_behavior     "

//@      ensures \\result == t;    "

//@ pure function    "

/*@ immutable */
//@ public normal_behavior ensures true; pure function    "

//@ public normal_behavior    "  // Line 13

//@   ensures \\result == i;    "

//@ pure    "

//@ public normal_behavior assignable i; ensures i == !\\old(i) ;    "

//@ requires a != null;    "

//@ requires j < 1000 && j > -1000;    "

//@ assignable field;    "

//@ ensures \\result == j+101;    "

//@ ensures field == j+100;    "

/*@{FF}*/
/*@{FF}*/
/*@ @FunctionalInterface model public static interface FF extends BiFunction<TestJava,Integer,Integer> {      "
                +"        also assignable t.field; ensures t.field == n; ensures \\result == n+1;      "
                +"        non_null      "
                +"       Integer apply(TestJava t, Integer n);} */
//@ public normal_behavior assignable field; ensures \\result == i + 1 && field == i ;    "

//@ public normal_behavior assignable field; ensures \\result == i + 1 ;    "

//@ requires j < 1000 && j > -1000;    "

//@ assignable field;    "

/*@{FF}*/
/*@!FF*/
//@ assignable field;    "

//@ assert field == 300;    "

//@ public normal_behavior requires true;    "

//@ ghost boolean b;"

//@ set b = RuntimeException::new == RuntimeException::new;    "

//@ assert b;    "

//@ set b = RuntimeException::new != null;    "

//@ assert b;    "

//@ set b = null != RuntimeException::new;    "

//@ assert b;    "

//@ set b = null != (java.util.function.Function)(x -> x);    "

//@ assert b;    "

//@ set b = java.util.function.Function::identity != (java.util.function.Function)(x -> x);    "

//@ assert b;    "

//@ public model static class R extends C {};    "

/*@ nullable {R}*/
/*@{R}*/
//@ public normal_behavior requires true;    "

//@ assert field == null || field instanceof R;"

/*@ nullable {R}*/
/*@{R}*/
//@ public normal_behavior requires true;    "

//@ assert field == null || field instanceof R;"

//@ public normal_behavior    "

//@   ensures \\result instanceof NullPointerException;    "

//@ public normal_behavior    "

//@ ensures exx == ex;    "

//@ public normal_behavior    "

//@ ensures exx == RuntimeException::new;    "

//@ public normal_behavior    "

//@ assignable exx;    "

//@ ensures exx == ex;    "

//@ public normal_behavior    "

//@ assignable exx;    "

//@ ensures exx == NullPointerException::new;    "

//@ public exceptional_behavior requires true; signals_only NullPointerException;    "

//@ public exceptional_behavior requires true; signals_only NullPointerException;    "

//@ public normal_behavior    "

//@   ensures \\result instanceof NullPointerException;    "

//@ public normal_behavior    "

//@ ensures exx == NullPointerException::new;    "

//@ public exceptional_behavior requires true; signals_only ArithmeticException;    "

//@ also public normal_behavior    "

//@   requires true;    "

//@ pure    "

//@ public behavior requires true; pure    "   // Line 10


//@ public normal_behavior requires true; pure    "

//@ public normal_behavior requires true; pure    "

/*@ {java.util.function.Supplier.Pure<Boolean>}*/
//@ public normal_behavior requires true; pure    "

/*@ {java.util.function.Supplier.PureNonNull<Boolean>}*/
//@ also public normal_behavior    "

//@   requires true;    "

//@ pure    "

//@ public behavior ensures true; pure    "

/*@!PureSupplier */
/*@ ( PureSupplier )@*/
//@ public behavior ensures true; pure    "

/*@!PureSupplier*/
//@ public model_program { return x -> x; }    "

//@ nullableByDefault

//@ assert b;    "  // Should be false

//@ inline     "


//@ nullableByDefault

//@ requires ppp == this.ppp;    "

//@ assert b;    "  // Should be true

//@ inline     "


//@ nullableByDefault

//@ assert b;    "

//@ inline     "


//@ nullableByDefault

//@ assert b;    "

//@ inline     "


//@ nullableByDefault

//@ assert b;    "  // SHould be true

//@ inline     "


/*@ non_null_by_default*/
//@ requires this.a == 11;    "

//@ assert b == 9 + 7 + 11 + (11+9+11+100);    "

//@ inline     "


/*@ non_null_by_default*/
//@ model public static interface NNFunction<T,R> extends Function<T,R> { non_null R apply(non_null T t); }     "

//@ requires this.a == 11;    "

//@ assert b == 9 + 7 + 11 + (11+9+11+100);    "

//@ requires f != null; inline     "

/*@{NNFunction<Integer,Integer>}*/
/*@ spec_public nullable */
//@ assignable this.aaaaaaaaaaa;    "

//@ ensures this.aaaaaaaaaaa != null;    "

//@ ensures this.aaaaaaaaaaa.byteValue() == aaaaaaaaaaa;    "

//@ public model static interface NoException { public normal_behavior ensures true; void run(); }     "

//@ public normal_behavior requires true; { r.run(); } ensures true;     "

/*@{NoException}*/

//@ assignable this.aaaaaaaaaaa;    "

//@ ensures this.aaaaaaaaaaa != null;    "

//@ ensures this.aaaaaaaaaaa.intValue() == aaaaaaaaaaa;    "

//@ public behavior requires true; { r.run(); } ensures true;     "

/*@ non_null*/
/*@ non_null*/
//@ requires a.containsNull == false;    "

/*@ non_null*/
//@ public normal_behavior    "

//@   ensures \\result == i;    "

//@ pure    "

//@ public normal_behavior    "

//@   ensures \\result == i;    "

//@ pure    "

/*@ immutable */
//@   public model_program {    "

//@      return t;    "

//@    }    "

//@ pure function    "

/*@ immutable */
//@ public normal_behavior ensures true; pure function     "

//@ public normal_behavior    "  // Line 14

//@   ensures \\result == i;    "

//@ pure    "

/*@ immutable */
//@   public normal_behavior     "

//@      ensures \\result == t;    "

//@ pure function    "

/*@ immutable */
//@ public normal_behavior ensures true; pure function    "

//@ public normal_behavior    "  // Line 13

//@   ensures \\result == i;    "

//@ pure    "

//@ public normal_behavior assignable i; ensures i == !\\old(i) ;    "

//@ requires a != null;    "

//@ requires j < 1000 && j > -1000;    "

//@ assignable field;    "

//@ ensures \\result == j+101;    "

//@ ensures field == j+100;    "

/*@{FF}*/
/*@{FF}*/
/*@ @FunctionalInterface model public static interface FF extends BiFunction<TestJava,Integer,Integer> {      "
                +"        also assignable t.field; ensures t.field == n; ensures \\result == n+1;      "
                +"        non_null      "
                +"       Integer apply(TestJava t, Integer n);} */
//@ public normal_behavior assignable field; ensures \\result == i + 1 && field == i ;    "

//@ public normal_behavior assignable field; ensures \\result == i + 1 ;    "

//@ requires j < 1000 && j > -1000;    "

//@ assignable field;    "

/*@{FF}*/
/*@!FF*/
//@ assignable field;    "

//@ assert field == 300;    "

//@ public normal_behavior requires true;    "

//@ ghost boolean b;"

//@ set b = RuntimeException::new == RuntimeException::new;    "

//@ assert b;    "

//@ set b = RuntimeException::new != null;    "

//@ assert b;    "

//@ set b = null != RuntimeException::new;    "

//@ assert b;    "

//@ set b = null != (java.util.function.Function)(x -> x);    "

//@ assert b;    "

//@ set b = java.util.function.Function::identity != (java.util.function.Function)(x -> x);    "

//@ assert b;    "

//@ public model static class R extends C {};    "

/*@ nullable {R}*/
/*@{R}*/
//@ public normal_behavior requires true;    "

//@ assert field == null || field instanceof R;"

/*@ nullable {R}*/
/*@{R}*/
//@ public normal_behavior requires true;    "

//@ assert field == null || field instanceof R;"

//@ public normal_behavior    "

//@   ensures \\result instanceof NullPointerException;    "

//@ public normal_behavior    "

//@ ensures exx == ex;    "

//@ public normal_behavior    "

//@ ensures exx == RuntimeException::new;    "

//@ public normal_behavior    "

//@ assignable exx;    "

//@ ensures exx == ex;    "

//@ public normal_behavior    "

//@ assignable exx;    "

//@ ensures exx == NullPointerException::new;    "

//@ public exceptional_behavior requires true; signals_only NullPointerException;    "

//@ public exceptional_behavior requires true; signals_only NullPointerException;    "

//@ public normal_behavior    "

//@   ensures \\result instanceof NullPointerException;    "

//@ public normal_behavior    "

//@ ensures exx == NullPointerException::new;    "

//@ public exceptional_behavior requires true; signals_only ArithmeticException;    "

//@ also public normal_behavior    "

//@   requires true;    "

//@ pure    "

//@ public behavior requires true; pure    "   // Line 10


//@ public normal_behavior requires true; pure    "

//@ public normal_behavior requires true; pure    "

/*@ {java.util.function.Supplier.Pure<Boolean>}*/
//@ public normal_behavior requires true; pure    "

/*@ {java.util.function.Supplier.PureNonNull<Boolean>}*/
//@ also public normal_behavior    "

//@   requires true;    "

//@ pure    "

//@ public behavior ensures true; pure    "

/*@!PureSupplier */
/*@ ( PureSupplier )@*/
//@ public behavior ensures true; pure    "

/*@!PureSupplier*/
//@ public model_program { return x -> x; }    "

//@ nullableByDefault

//@ assert b;    "  // Should be false

//@ inline     "


//@ nullableByDefault

//@ requires ppp == this.ppp;    "

//@ assert b;    "  // Should be true

//@ inline     "


//@ nullableByDefault

//@ assert b;    "

//@ inline     "


//@ nullableByDefault

//@ assert b;    "

//@ inline     "


//@ nullableByDefault

//@ assert b;    "  // SHould be true

//@ inline     "


/*@ non_null_by_default*/
//@ requires this.a == 11;    "

//@ assert b == 9 + 7 + 11 + (11+9+11+100);    "

//@ inline     "


/*@ non_null_by_default*/
//@ model public static interface NNFunction<T,R> extends Function<T,R> { non_null R apply(non_null T t); }     "

//@ requires this.a == 11;    "

//@ assert b == 9 + 7 + 11 + (11+9+11+100);    "

//@ requires f != null; inline     "

/*@{NNFunction<Integer,Integer>}*/
/*@ spec_public nullable */
//@ assignable this.aaaaaaaaaaa;    "

//@ ensures this.aaaaaaaaaaa != null;    "

//@ ensures this.aaaaaaaaaaa.byteValue() == aaaaaaaaaaa;    "

//@ public model static interface NoException { public normal_behavior ensures true; void run(); }     "

//@ public normal_behavior requires true; { r.run(); } ensures true;     "

/*@{NoException}*/

//@ assignable this.aaaaaaaaaaa;    "

//@ ensures this.aaaaaaaaaaa != null;    "

//@ ensures this.aaaaaaaaaaa.intValue() == aaaaaaaaaaa;    "

//@ public behavior requires true; { r.run(); } ensures true;     "

/*@ non_null*/
/*@ non_null*/
//@ requires a.containsNull == false;    "

/*@ non_null*/
//@ public normal_behavior    "

//@   ensures \\result == i;    "

//@ pure    "

//@ public normal_behavior    "

//@   ensures \\result == i;    "

//@ pure    "

/*@ immutable */
//@   public model_program {    "

//@      return t;    "

//@    }    "

//@ pure function    "

/*@ immutable */
//@ public normal_behavior ensures true; pure function     "

//@ public normal_behavior    "  // Line 14

//@   ensures \\result == i;    "

//@ pure    "

/*@ immutable */
//@   public normal_behavior     "

//@      ensures \\result == t;    "

//@ pure function    "

/*@ immutable */
//@ public normal_behavior ensures true; pure function    "

//@ public normal_behavior    "  // Line 13

//@   ensures \\result == i;    "

//@ pure    "

//@ public normal_behavior assignable i; ensures i == !\\old(i) ;    "

//@ requires a != null;    "

//@ requires j < 1000 && j > -1000;    "

//@ assignable field;    "

//@ ensures \\result == j+101;    "

//@ ensures field == j+100;    "

/*@{FF}*/
/*@{FF}*/
/*@ @FunctionalInterface model public static interface FF extends BiFunction<TestJava,Integer,Integer> {      "
                +"        also assignable t.field; ensures t.field == n; ensures \\result == n+1;      "
                +"        non_null      "
                +"       Integer apply(TestJava t, Integer n);} */
//@ public normal_behavior assignable field; ensures \\result == i + 1 && field == i ;    "

//@ public normal_behavior assignable field; ensures \\result == i + 1 ;    "

//@ requires j < 1000 && j > -1000;    "

//@ assignable field;    "

/*@{FF}*/
/*@!FF*/
//@ assignable field;    "

//@ assert field == 300;    "

//@ public normal_behavior requires true;    "

//@ ghost boolean b;"

//@ set b = RuntimeException::new == RuntimeException::new;    "

//@ assert b;    "

//@ set b = RuntimeException::new != null;    "

//@ assert b;    "

//@ set b = null != RuntimeException::new;    "

//@ assert b;    "

//@ set b = null != (java.util.function.Function)(x -> x);    "

//@ assert b;    "

//@ set b = java.util.function.Function::identity != (java.util.function.Function)(x -> x);    "

//@ assert b;    "

//@ public model static class R extends C {};    "

/*@ nullable {R}*/
/*@{R}*/
//@ public normal_behavior requires true;    "

//@ assert field == null || field instanceof R;"

/*@ nullable {R}*/
/*@{R}*/
//@ public normal_behavior requires true;    "

//@ assert field == null || field instanceof R;"

//@ public normal_behavior    "

//@   ensures \\result instanceof NullPointerException;    "

//@ public normal_behavior    "

//@ ensures exx == ex;    "

//@ public normal_behavior    "

//@ ensures exx == RuntimeException::new;    "

//@ public normal_behavior    "

//@ assignable exx;    "

//@ ensures exx == ex;    "

//@ public normal_behavior    "

//@ assignable exx;    "

//@ ensures exx == NullPointerException::new;    "

//@ public exceptional_behavior requires true; signals_only NullPointerException;    "

//@ public exceptional_behavior requires true; signals_only NullPointerException;    "

//@ public normal_behavior    "

//@   ensures \\result instanceof NullPointerException;    "

//@ public normal_behavior    "

//@ ensures exx == NullPointerException::new;    "

//@ public exceptional_behavior requires true; signals_only ArithmeticException;    "

//@ also public normal_behavior    "

//@   requires true;    "

//@ pure    "

//@ public behavior requires true; pure    "   // Line 10


//@ public normal_behavior requires true; pure    "

//@ public normal_behavior requires true; pure    "

/*@ {java.util.function.Supplier.Pure<Boolean>}*/
//@ public normal_behavior requires true; pure    "

/*@ {java.util.function.Supplier.PureNonNull<Boolean>}*/
//@ also public normal_behavior    "

//@   requires true;    "

//@ pure    "

//@ public behavior ensures true; pure    "

/*@!PureSupplier */
/*@ ( PureSupplier )@*/
//@ public behavior ensures true; pure    "

/*@!PureSupplier*/
//@ public model_program { return x -> x; }    "

//@ nullableByDefault

//@ assert b;    "  // Should be false

//@ inline     "


//@ nullableByDefault

//@ requires ppp == this.ppp;    "

//@ assert b;    "  // Should be true

//@ inline     "


//@ nullableByDefault

//@ assert b;    "

//@ inline     "


//@ nullableByDefault

//@ assert b;    "

//@ inline     "


//@ nullableByDefault

//@ assert b;    "  // SHould be true

//@ inline     "


/*@ non_null_by_default*/
//@ requires this.a == 11;    "

//@ assert b == 9 + 7 + 11 + (11+9+11+100);    "

//@ inline     "


/*@ non_null_by_default*/
//@ model public static interface NNFunction<T,R> extends Function<T,R> { non_null R apply(non_null T t); }     "

//@ requires this.a == 11;    "

//@ assert b == 9 + 7 + 11 + (11+9+11+100);    "

//@ requires f != null; inline     "

/*@{NNFunction<Integer,Integer>}*/
/*@ spec_public nullable */
//@ assignable this.aaaaaaaaaaa;    "

//@ ensures this.aaaaaaaaaaa != null;    "

//@ ensures this.aaaaaaaaaaa.byteValue() == aaaaaaaaaaa;    "

//@ public model static interface NoException { public normal_behavior ensures true; void run(); }     "

//@ public normal_behavior requires true; { r.run(); } ensures true;     "

/*@{NoException}*/

//@ assignable this.aaaaaaaaaaa;    "

//@ ensures this.aaaaaaaaaaa != null;    "

//@ ensures this.aaaaaaaaaaa.intValue() == aaaaaaaaaaa;    "

//@ public behavior requires true; { r.run(); } ensures true;     "

/*@ non_null*/
/*@ non_null*/
//@ requires a.containsNull == false;    "

/*@ non_null*/
//@ public normal_behavior    "

//@   ensures \\result == i;    "

//@ pure    "

//@ public normal_behavior    "

//@   ensures \\result == i;    "

//@ pure    "

/*@ immutable */
//@   public model_program {    "

//@      return t;    "

//@    }    "

//@ pure function    "

/*@ immutable */
//@ public normal_behavior ensures true; pure function     "

//@ public normal_behavior    "  // Line 14

//@   ensures \\result == i;    "

//@ pure    "

/*@ immutable */
//@   public normal_behavior     "

//@      ensures \\result == t;    "

//@ pure function    "

/*@ immutable */
//@ public normal_behavior ensures true; pure function    "

//@ public normal_behavior    "  // Line 13

//@   ensures \\result == i;    "

//@ pure    "

//@ public normal_behavior assignable i; ensures i == !\\old(i) ;    "

//@ requires a != null;    "

//@ requires j < 1000 && j > -1000;    "

//@ assignable field;    "

//@ ensures \\result == j+101;    "

//@ ensures field == j+100;    "

/*@{FF}*/
/*@{FF}*/
/*@ @FunctionalInterface model public static interface FF extends BiFunction<TestJava,Integer,Integer> {      "
                +"        also assignable t.field; ensures t.field == n; ensures \\result == n+1;      "
                +"        non_null      "
                +"       Integer apply(TestJava t, Integer n);} */
//@ public normal_behavior assignable field; ensures \\result == i + 1 && field == i ;    "

//@ public normal_behavior assignable field; ensures \\result == i + 1 ;    "

//@ requires j < 1000 && j > -1000;    "

//@ assignable field;    "

/*@{FF}*/
/*@!FF*/
//@ assignable field;    "

//@ assert field == 300;    "

//@ public normal_behavior requires true;    "

//@ ghost boolean b;"

//@ set b = RuntimeException::new == RuntimeException::new;    "

//@ assert b;    "

//@ set b = RuntimeException::new != null;    "

//@ assert b;    "

//@ set b = null != RuntimeException::new;    "

//@ assert b;    "

//@ set b = null != (java.util.function.Function)(x -> x);    "

//@ assert b;    "

//@ set b = java.util.function.Function::identity != (java.util.function.Function)(x -> x);    "

//@ assert b;    "

//@ public model static class R extends C {};    "

/*@ nullable {R}*/
/*@{R}*/
//@ public normal_behavior requires true;    "

//@ assert field == null || field instanceof R;"

/*@ nullable {R}*/
/*@{R}*/
//@ public normal_behavior requires true;    "

//@ assert field == null || field instanceof R;"

//@ public normal_behavior    "

//@   ensures \\result instanceof NullPointerException;    "

//@ public normal_behavior    "

//@ ensures exx == ex;    "

//@ public normal_behavior    "

//@ ensures exx == RuntimeException::new;    "

//@ public normal_behavior    "

//@ assignable exx;    "

//@ ensures exx == ex;    "

//@ public normal_behavior    "

//@ assignable exx;    "

//@ ensures exx == NullPointerException::new;    "

//@ public exceptional_behavior requires true; signals_only NullPointerException;    "

//@ public exceptional_behavior requires true; signals_only NullPointerException;    "

//@ public normal_behavior    "

//@   ensures \\result instanceof NullPointerException;    "

//@ public normal_behavior    "

//@ ensures exx == NullPointerException::new;    "

//@ public exceptional_behavior requires true; signals_only ArithmeticException;    "

//@ also public normal_behavior    "

//@   requires true;    "

//@ pure    "

//@ public behavior requires true; pure    "   // Line 10


//@ public normal_behavior requires true; pure    "

//@ public normal_behavior requires true; pure    "

/*@ {java.util.function.Supplier.Pure<Boolean>}*/
//@ public normal_behavior requires true; pure    "

/*@ {java.util.function.Supplier.PureNonNull<Boolean>}*/
//@ also public normal_behavior    "

//@   requires true;    "

//@ pure    "

//@ public behavior ensures true; pure    "

/*@!PureSupplier */
/*@ ( PureSupplier )@*/
//@ public behavior ensures true; pure    "

/*@!PureSupplier*/
//@ public model_program { return x -> x; }    "

//@ nullableByDefault

//@ assert b;    "  // Should be false

//@ inline     "


//@ nullableByDefault

//@ requires ppp == this.ppp;    "

//@ assert b;    "  // Should be true

//@ inline     "


//@ nullableByDefault

//@ assert b;    "

//@ inline     "


//@ nullableByDefault

//@ assert b;    "

//@ inline     "


//@ nullableByDefault

//@ assert b;    "  // SHould be true

//@ inline     "


/*@ non_null_by_default*/
//@ requires this.a == 11;    "

//@ assert b == 9 + 7 + 11 + (11+9+11+100);    "

//@ inline     "


/*@ non_null_by_default*/
//@ model public static interface NNFunction<T,R> extends Function<T,R> { non_null R apply(non_null T t); }     "

//@ requires this.a == 11;    "

//@ assert b == 9 + 7 + 11 + (11+9+11+100);    "

//@ requires f != null; inline     "

/*@{NNFunction<Integer,Integer>}*/
/*@ spec_public nullable */
//@ assignable this.aaaaaaaaaaa;    "

//@ ensures this.aaaaaaaaaaa != null;    "

//@ ensures this.aaaaaaaaaaa.byteValue() == aaaaaaaaaaa;    "

//@ public model static interface NoException { public normal_behavior ensures true; void run(); }     "

//@ public normal_behavior requires true; { r.run(); } ensures true;     "

/*@{NoException}*/

//@ assignable this.aaaaaaaaaaa;    "

//@ ensures this.aaaaaaaaaaa != null;    "

//@ ensures this.aaaaaaaaaaa.intValue() == aaaaaaaaaaa;    "

//@ public behavior requires true; { r.run(); } ensures true;     "

//@   requires false;    "

//@   ensures false;    "

//@   ensures false;    "

//@   signals (Exception) false;    "

//@ public static invariant i>=0;    "

//@ assignable i;    "

//@ public initially i>=0;    "

//@ assignable i;    "

//@ public constraint i>=\\old(i);    "

//@ assignable i;    "

//@   requires false;    "

//@   ensures false;    "

//@   ensures false;    "

//@   signals (Exception) false;    "

//@ public static invariant i>=0;    "

//@ assignable i;    "

//@ public initially i>=0;    "

//@ assignable i;    "

//@ public constraint i>=\\old(i);    "

//@ assignable i;    "

//@   requires false;    "

//@   ensures false;    "

//@   ensures false;    "

//@   signals (Exception) false;    "

//@ public static invariant i>=0;    "

//@ assignable i;    "

//@ public initially i>=0;    "

//@ assignable i;    "

//@ public constraint i>=\\old(i);    "

//@ assignable i;    "

//@   requires false;    "

//@   ensures false;    "

//@   ensures false;    "

//@   signals (Exception) false;    "

//@ public static invariant i>=0;    "

//@ assignable i;    "

//@ public initially i>=0;    "

//@ assignable i;    "

//@ public constraint i>=\\old(i);    "

//@ assignable i;    "

//@   requires false;    "

//@   ensures false;    "

//@   ensures false;    "

//@   signals (Exception) false;    "

//@ public static invariant i>=0;    "

//@ assignable i;    "

//@ public initially i>=0;    "

//@ assignable i;    "

//@ public constraint i>=\\old(i);    "

//@ assignable i;    "

/*@ assert false; */
/*@ assert false; */
//@ assert false;    "

//@ assert false;    "

/*@ ensures false; */
/*@ also ensures false; */
/*@ ensures false; */
//@ ensures false;    "

//@ public invariant false;    "

/*@ public invariant false;*/
/*@ public invariant false;*/
//@ public invariant false;    "

/*@ model class C {      "  // Invariant is false on exit
                +"           invariant false;    "
                +"           void mc() {  }};*/
/*@ model class D {      "
                +"           ensures false;    "
                +"           void md() {  }};*/
/*@ model class E {      "
                +"           void me() {  assert false; }};*/
//@ ghost E e;    "

/*@ ensures false;    "
                +"      model void mm() {}*/
/*@ model void mn() {  assert false;  }*/
/*@ model public static class A {    "  // Invariant is false on exit
                +"     invariant false;    "
                +"     public void m2() {    "  // Invariant is not satisfiable on entrance
                +"     }*/
/*@ model class B {    " // Invariant is false on exit
                +"     public invariant false;    "
                +"     public void mb() {    "  // Invariant is not satisfiable on entrance
                +"     }*/
/*@ model class BB {    "
                +"     ensures false;    "
                +"     public void mbb() {    " // Postcondition is false
                +"     }*/
//@ assert new TestJava() {  public invariant x >= 0; public void mm() { } } != null;     "  // Line 5

//@ assert new TestJava() {  invariant false; int i; } != null;     "  // Line 5

//@ assert new TestJava() {  int i; } == null;     "  // Line 9

//@ assert new TestJava() {  invariant true; int i; } == null;     "  // Line 5

/*@ invariant false; */
//@ assert b;    "

//@ assert b;    "

/*@ invariant true; */
//@ assert b;    "

//@ assert new TestJava() {  } != null;     "  // Line 5

/*@ requires i > 0; */
//@ code_java_math spec_java_math     "

//@ public normal_behavior    "

//@   ensures \\result == k+1;    "

//@ pure    "

//@ ensures \\result == 2 + m(j+1) - 3;     "

//@ ensures \\result == 2 + m(j+1) - 2;     "

//@ requires m(j) == 3;     "

//@ ensures \\result == 3;     "

//@ assert m(j) == \\old(j) + 2;    "

//@ public normal_behavior    "

//@   requires b;    "

//@   ensures \\result == k+1;    "

//@ pure    "

//@ ensures \\result == mm(j);     " // Postcondition error - undefined precondition for mm

//@ requires b;     "

//@ ensures \\result == mm(j);     "

//@ ensures b ==> \\result == mm(j);     "

//@ code_java_math spec_java_math     "

//@ public normal_behavior    "

//@   ensures \\result == k+1;    "

//@ pure    "

//@ ensures \\result == 2 + m(j+1) - 3;     "

//@ ensures \\result == 2 + m(j+1) - 2;     "

//@ requires m(j) == 3;     "

//@ ensures \\result == 3;     "

//@ assert m(j) == \\old(j) + 2;    "

//@ public normal_behavior    "

//@   requires b;    "

//@   ensures \\result == k+1;    "

//@ pure    "

//@ ensures \\result == mm(j);     " // Postcondition error - undefined precondition for mm

//@ requires b;     "

//@ ensures \\result == mm(j);     "

//@ ensures b ==> \\result == mm(j);     "

//@ public normal_behavior    "

//@   ensures mm(\\result) + 1 == mm(k);    "

//@ pure spec_java_math code_java_math     "

//@ public normal_behavior    "

//@   ensures \\result == k+1;    "

//@ pure spec_java_math code_java_math     "

//@ ensures \\result == 2 + m(j+1) - 1;     "

//@ pure spec_java_math code_java_math     "

//@ code_java_math spec_java_math     "

//@ ensures \\result == 2 + m(j+1) - 1;     "

//@ public normal_behavior    "

//@   ensures mm(\\result) + 1 == mm(k);    "

//@ pure    "

//@ public normal_behavior    "

//@   ensures \\result == k+1;    "

//@ pure    "

//@ model public int mm(int k);    "

//@ public normal_behavior    "

//@   ensures mm(\\result) + 1 == mm(k);    "

//@ pure    "

//@ public normal_behavior    "

//@   ensures \\result == k+1;    "

//@ pure    "

//@ model public int mm(int k);    "

//@ ensures \\result == 2 + m(j+1) - 1;     "

/*@ assert false; */
/*@ assert false; */
//@ assert false;    "

//@ assert false;    "

/*@ ensures false; */
/*@ also ensures false; */
/*@ ensures false; */
//@ ensures false;    "

//@ public invariant false;    "

/*@ public invariant false;*/
/*@ public invariant false;*/
//@ public invariant false;    "

/*@ model class C {      "  // Invariant is false on exit
                +"           invariant false;    "
                +"           void mc() {  }};*/
/*@ model class D {      "
                +"           ensures false;    "
                +"           void md() {  }};*/
/*@ model class E {      "
                +"           void me() {  assert false; }};*/
//@ ghost E e;    "

/*@ ensures false;    "
                +"      model void mm() {}*/
/*@ model void mn() {  assert false;  }*/
/*@ model public static class A {    "  // Invariant is false on exit
                +"     invariant false;    "
                +"     public void m2() {    "  // Invariant is not satisfiable on entrance
                +"     }*/
/*@ model class B {    " // Invariant is false on exit
                +"     public invariant false;    "
                +"     public void mb() {    "  // Invariant is not satisfiable on entrance
                +"     }*/
/*@ model class BB {    "
                +"     ensures false;    "
                +"     public void mbb() {    " // Postcondition is false
                +"     }*/
//@ assert new TestJava() {  public invariant x >= 0; public void mm() { } } != null;     "  // Line 5

//@ assert new TestJava() {  invariant false; int i; } != null;     "  // Line 5

//@ assert new TestJava() {  int i; } == null;     "  // Line 9

//@ assert new TestJava() {  invariant true; int i; } == null;     "  // Line 5

/*@ invariant false; */
//@ assert b;    "

//@ assert b;    "

/*@ invariant true; */
//@ assert b;    "

//@ assert new TestJava() {  } != null;     "  // Line 5

/*@ requires i > 0; */
//@ code_java_math spec_java_math     "

//@ public normal_behavior    "

//@   ensures \\result == k+1;    "

//@ pure    "

//@ ensures \\result == 2 + m(j+1) - 3;     "

//@ ensures \\result == 2 + m(j+1) - 2;     "

//@ requires m(j) == 3;     "

//@ ensures \\result == 3;     "

//@ assert m(j) == \\old(j) + 2;    "

//@ public normal_behavior    "

//@   requires b;    "

//@   ensures \\result == k+1;    "

//@ pure    "

//@ ensures \\result == mm(j);     " // Postcondition error - undefined precondition for mm

//@ requires b;     "

//@ ensures \\result == mm(j);     "

//@ ensures b ==> \\result == mm(j);     "

//@ code_java_math spec_java_math     "

//@ public normal_behavior    "

//@   ensures \\result == k+1;    "

//@ pure    "

//@ ensures \\result == 2 + m(j+1) - 3;     "

//@ ensures \\result == 2 + m(j+1) - 2;     "

//@ requires m(j) == 3;     "

//@ ensures \\result == 3;     "

//@ assert m(j) == \\old(j) + 2;    "

//@ public normal_behavior    "

//@   requires b;    "

//@   ensures \\result == k+1;    "

//@ pure    "

//@ ensures \\result == mm(j);     " // Postcondition error - undefined precondition for mm

//@ requires b;     "

//@ ensures \\result == mm(j);     "

//@ ensures b ==> \\result == mm(j);     "

//@ public normal_behavior    "

//@   ensures mm(\\result) + 1 == mm(k);    "

//@ pure spec_java_math code_java_math     "

//@ public normal_behavior    "

//@   ensures \\result == k+1;    "

//@ pure spec_java_math code_java_math     "

//@ ensures \\result == 2 + m(j+1) - 1;     "

//@ pure spec_java_math code_java_math     "

//@ code_java_math spec_java_math     "

//@ ensures \\result == 2 + m(j+1) - 1;     "

//@ public normal_behavior    "

//@   ensures mm(\\result) + 1 == mm(k);    "

//@ pure    "

//@ public normal_behavior    "

//@   ensures \\result == k+1;    "

//@ pure    "

//@ model public int mm(int k);    "

//@ public normal_behavior    "

//@   ensures mm(\\result) + 1 == mm(k);    "

//@ pure    "

//@ public normal_behavior    "

//@   ensures \\result == k+1;    "

//@ pure    "

//@ model public int mm(int k);    "

//@ ensures \\result == 2 + m(j+1) - 1;     "

/*@ assert false; */
/*@ assert false; */
//@ assert false;    "

//@ assert false;    "

/*@ ensures false; */
/*@ also ensures false; */
/*@ ensures false; */
//@ ensures false;    "

//@ public invariant false;    "

/*@ public invariant false;*/
/*@ public invariant false;*/
//@ public invariant false;    "

/*@ model class C {      "  // Invariant is false on exit
                +"           invariant false;    "
                +"           void mc() {  }};*/
/*@ model class D {      "
                +"           ensures false;    "
                +"           void md() {  }};*/
/*@ model class E {      "
                +"           void me() {  assert false; }};*/
//@ ghost E e;    "

/*@ ensures false;    "
                +"      model void mm() {}*/
/*@ model void mn() {  assert false;  }*/
/*@ model public static class A {    "  // Invariant is false on exit
                +"     invariant false;    "
                +"     public void m2() {    "  // Invariant is not satisfiable on entrance
                +"     }*/
/*@ model class B {    " // Invariant is false on exit
                +"     public invariant false;    "
                +"     public void mb() {    "  // Invariant is not satisfiable on entrance
                +"     }*/
/*@ model class BB {    "
                +"     ensures false;    "
                +"     public void mbb() {    " // Postcondition is false
                +"     }*/
//@ assert new TestJava() {  public invariant x >= 0; public void mm() { } } != null;     "  // Line 5

//@ assert new TestJava() {  invariant false; int i; } != null;     "  // Line 5

//@ assert new TestJava() {  int i; } == null;     "  // Line 9

//@ assert new TestJava() {  invariant true; int i; } == null;     "  // Line 5

/*@ invariant false; */
//@ assert b;    "

//@ assert b;    "

/*@ invariant true; */
//@ assert b;    "

//@ assert new TestJava() {  } != null;     "  // Line 5

/*@ requires i > 0; */
//@ code_java_math spec_java_math     "

//@ public normal_behavior    "

//@   ensures \\result == k+1;    "

//@ pure    "

//@ ensures \\result == 2 + m(j+1) - 3;     "

//@ ensures \\result == 2 + m(j+1) - 2;     "

//@ requires m(j) == 3;     "

//@ ensures \\result == 3;     "

//@ assert m(j) == \\old(j) + 2;    "

//@ public normal_behavior    "

//@   requires b;    "

//@   ensures \\result == k+1;    "

//@ pure    "

//@ ensures \\result == mm(j);     " // Postcondition error - undefined precondition for mm

//@ requires b;     "

//@ ensures \\result == mm(j);     "

//@ ensures b ==> \\result == mm(j);     "

//@ code_java_math spec_java_math     "

//@ public normal_behavior    "

//@   ensures \\result == k+1;    "

//@ pure    "

//@ ensures \\result == 2 + m(j+1) - 3;     "

//@ ensures \\result == 2 + m(j+1) - 2;     "

//@ requires m(j) == 3;     "

//@ ensures \\result == 3;     "

//@ assert m(j) == \\old(j) + 2;    "

//@ public normal_behavior    "

//@   requires b;    "

//@   ensures \\result == k+1;    "

//@ pure    "

//@ ensures \\result == mm(j);     " // Postcondition error - undefined precondition for mm

//@ requires b;     "

//@ ensures \\result == mm(j);     "

//@ ensures b ==> \\result == mm(j);     "

//@ public normal_behavior    "

//@   ensures mm(\\result) + 1 == mm(k);    "

//@ pure spec_java_math code_java_math     "

//@ public normal_behavior    "

//@   ensures \\result == k+1;    "

//@ pure spec_java_math code_java_math     "

//@ ensures \\result == 2 + m(j+1) - 1;     "

//@ pure spec_java_math code_java_math     "

//@ code_java_math spec_java_math     "

//@ ensures \\result == 2 + m(j+1) - 1;     "

//@ public normal_behavior    "

//@   ensures mm(\\result) + 1 == mm(k);    "

//@ pure    "

//@ public normal_behavior    "

//@   ensures \\result == k+1;    "

//@ pure    "

//@ model public int mm(int k);    "

//@ public normal_behavior    "

//@   ensures mm(\\result) + 1 == mm(k);    "

//@ pure    "

//@ public normal_behavior    "

//@   ensures \\result == k+1;    "

//@ pure    "

//@ model public int mm(int k);    "

//@ ensures \\result == 2 + m(j+1) - 1;     "

/*@ assert false; */
/*@ assert false; */
//@ assert false;    "

//@ assert false;    "

/*@ ensures false; */
/*@ also ensures false; */
/*@ ensures false; */
//@ ensures false;    "

//@ public invariant false;    "

/*@ public invariant false;*/
/*@ public invariant false;*/
//@ public invariant false;    "

/*@ model class C {      "  // Invariant is false on exit
                +"           invariant false;    "
                +"           void mc() {  }};*/
/*@ model class D {      "
                +"           ensures false;    "
                +"           void md() {  }};*/
/*@ model class E {      "
                +"           void me() {  assert false; }};*/
//@ ghost E e;    "

/*@ ensures false;    "
                +"      model void mm() {}*/
/*@ model void mn() {  assert false;  }*/
/*@ model public static class A {    "  // Invariant is false on exit
                +"     invariant false;    "
                +"     public void m2() {    "  // Invariant is not satisfiable on entrance
                +"     }*/
/*@ model class B {    " // Invariant is false on exit
                +"     public invariant false;    "
                +"     public void mb() {    "  // Invariant is not satisfiable on entrance
                +"     }*/
/*@ model class BB {    "
                +"     ensures false;    "
                +"     public void mbb() {    " // Postcondition is false
                +"     }*/
//@ assert new TestJava() {  public invariant x >= 0; public void mm() { } } != null;     "  // Line 5

//@ assert new TestJava() {  invariant false; int i; } != null;     "  // Line 5

//@ assert new TestJava() {  int i; } == null;     "  // Line 9

//@ assert new TestJava() {  invariant true; int i; } == null;     "  // Line 5

/*@ invariant false; */
//@ assert b;    "

//@ assert b;    "

/*@ invariant true; */
//@ assert b;    "

//@ assert new TestJava() {  } != null;     "  // Line 5

/*@ requires i > 0; */
//@ code_java_math spec_java_math     "

//@ public normal_behavior    "

//@   ensures \\result == k+1;    "

//@ pure    "

//@ ensures \\result == 2 + m(j+1) - 3;     "

//@ ensures \\result == 2 + m(j+1) - 2;     "

//@ requires m(j) == 3;     "

//@ ensures \\result == 3;     "

//@ assert m(j) == \\old(j) + 2;    "

//@ public normal_behavior    "

//@   requires b;    "

//@   ensures \\result == k+1;    "

//@ pure    "

//@ ensures \\result == mm(j);     " // Postcondition error - undefined precondition for mm

//@ requires b;     "

//@ ensures \\result == mm(j);     "

//@ ensures b ==> \\result == mm(j);     "

//@ code_java_math spec_java_math     "

//@ public normal_behavior    "

//@   ensures \\result == k+1;    "

//@ pure    "

//@ ensures \\result == 2 + m(j+1) - 3;     "

//@ ensures \\result == 2 + m(j+1) - 2;     "

//@ requires m(j) == 3;     "

//@ ensures \\result == 3;     "

//@ assert m(j) == \\old(j) + 2;    "

//@ public normal_behavior    "

//@   requires b;    "

//@   ensures \\result == k+1;    "

//@ pure    "

//@ ensures \\result == mm(j);     " // Postcondition error - undefined precondition for mm

//@ requires b;     "

//@ ensures \\result == mm(j);     "

//@ ensures b ==> \\result == mm(j);     "

//@ public normal_behavior    "

//@   ensures mm(\\result) + 1 == mm(k);    "

//@ pure spec_java_math code_java_math     "

//@ public normal_behavior    "

//@   ensures \\result == k+1;    "

//@ pure spec_java_math code_java_math     "

//@ ensures \\result == 2 + m(j+1) - 1;     "

//@ pure spec_java_math code_java_math     "

//@ code_java_math spec_java_math     "

//@ ensures \\result == 2 + m(j+1) - 1;     "

//@ public normal_behavior    "

//@   ensures mm(\\result) + 1 == mm(k);    "

//@ pure    "

//@ public normal_behavior    "

//@   ensures \\result == k+1;    "

//@ pure    "

//@ model public int mm(int k);    "

//@ public normal_behavior    "

//@   ensures mm(\\result) + 1 == mm(k);    "

//@ pure    "

//@ public normal_behavior    "

//@   ensures \\result == k+1;    "

//@ pure    "

//@ model public int mm(int k);    "

//@ ensures \\result == 2 + m(j+1) - 1;     "

/*@ assert false; */
/*@ assert false; */
//@ assert false;    "

//@ assert false;    "

/*@ ensures false; */
/*@ also ensures false; */
/*@ ensures false; */
//@ ensures false;    "

//@ public invariant false;    "

/*@ public invariant false;*/
/*@ public invariant false;*/
//@ public invariant false;    "

/*@ model class C {      "  // Invariant is false on exit
                +"           invariant false;    "
                +"           void mc() {  }};*/
/*@ model class D {      "
                +"           ensures false;    "
                +"           void md() {  }};*/
/*@ model class E {      "
                +"           void me() {  assert false; }};*/
//@ ghost E e;    "

/*@ ensures false;    "
                +"      model void mm() {}*/
/*@ model void mn() {  assert false;  }*/
/*@ model public static class A {    "  // Invariant is false on exit
                +"     invariant false;    "
                +"     public void m2() {    "  // Invariant is not satisfiable on entrance
                +"     }*/
/*@ model class B {    " // Invariant is false on exit
                +"     public invariant false;    "
                +"     public void mb() {    "  // Invariant is not satisfiable on entrance
                +"     }*/
/*@ model class BB {    "
                +"     ensures false;    "
                +"     public void mbb() {    " // Postcondition is false
                +"     }*/
//@ assert new TestJava() {  public invariant x >= 0; public void mm() { } } != null;     "  // Line 5

//@ assert new TestJava() {  invariant false; int i; } != null;     "  // Line 5

//@ assert new TestJava() {  int i; } == null;     "  // Line 9

//@ assert new TestJava() {  invariant true; int i; } == null;     "  // Line 5

/*@ invariant false; */
//@ assert b;    "

//@ assert b;    "

/*@ invariant true; */
//@ assert b;    "

//@ assert new TestJava() {  } != null;     "  // Line 5

/*@ requires i > 0; */
//@ code_java_math spec_java_math     "

//@ public normal_behavior    "

//@   ensures \\result == k+1;    "

//@ pure    "

//@ ensures \\result == 2 + m(j+1) - 3;     "

//@ ensures \\result == 2 + m(j+1) - 2;     "

//@ requires m(j) == 3;     "

//@ ensures \\result == 3;     "

//@ assert m(j) == \\old(j) + 2;    "

//@ public normal_behavior    "

//@   requires b;    "

//@   ensures \\result == k+1;    "

//@ pure    "

//@ ensures \\result == mm(j);     " // Postcondition error - undefined precondition for mm

//@ requires b;     "

//@ ensures \\result == mm(j);     "

//@ ensures b ==> \\result == mm(j);     "

//@ code_java_math spec_java_math     "

//@ public normal_behavior    "

//@   ensures \\result == k+1;    "

//@ pure    "

//@ ensures \\result == 2 + m(j+1) - 3;     "

//@ ensures \\result == 2 + m(j+1) - 2;     "

//@ requires m(j) == 3;     "

//@ ensures \\result == 3;     "

//@ assert m(j) == \\old(j) + 2;    "

//@ public normal_behavior    "

//@   requires b;    "

//@   ensures \\result == k+1;    "

//@ pure    "

//@ ensures \\result == mm(j);     " // Postcondition error - undefined precondition for mm

//@ requires b;     "

//@ ensures \\result == mm(j);     "

//@ ensures b ==> \\result == mm(j);     "

//@ public normal_behavior    "

//@   ensures mm(\\result) + 1 == mm(k);    "

//@ pure spec_java_math code_java_math     "

//@ public normal_behavior    "

//@   ensures \\result == k+1;    "

//@ pure spec_java_math code_java_math     "

//@ ensures \\result == 2 + m(j+1) - 1;     "

//@ pure spec_java_math code_java_math     "

//@ code_java_math spec_java_math     "

//@ ensures \\result == 2 + m(j+1) - 1;     "

//@ public normal_behavior    "

//@   ensures mm(\\result) + 1 == mm(k);    "

//@ pure    "

//@ public normal_behavior    "

//@   ensures \\result == k+1;    "

//@ pure    "

//@ model public int mm(int k);    "

//@ public normal_behavior    "

//@   ensures mm(\\result) + 1 == mm(k);    "

//@ pure    "

//@ public normal_behavior    "

//@   ensures \\result == k+1;    "

//@ pure    "

//@ model public int mm(int k);    "

//@ ensures \\result == 2 + m(j+1) - 1;     "

//@ assert i != 1;    "

//@ assert false;    "

//@ assert i != 3;    "

/*@ nullable*/
//@ signals_only Exception;     "

/*@ nullable*/
//@ signals_only Exception;     "

/*@ nullable*/
//@ signals_only Exception;     "

/*@ nullable*/
/*@ requires i == j; ensures \\result; */
//@ assume i == 1 && a.i == 2;    "

/*@ requires i == j; ensures \\result; */
//@ assume i == 1 && a.i == 2;    "

/*@ requires i == j; ensures \\result; */
//@ assume i == 1 && a.i == 2;    "

/*@ requires i == j; ensures \\result; */
//@ assume i == 1 && a.i == 2;    "

/*@ requires i == j; ensures \\result; */
//@ assume i == 1 && a.i == 2;    "

/*@ requires i == j; ensures \\result; */
//@ assume i == 1 && a.i == 2;    "

//@ ensures i == k;      "

//@ assert a.i == 1;    "

//@ ensures i == k;      "

//@ assert a != null;    "

//@ ensures i == k;      "

//@ assert a.i == 2;    "

//@ ensures i == k; pure      "

//@ assert a.i == 1;    "

//@ assert b.i == 2;    "

//@ ensures i == k; pure      "

//@ assert a != b;     "

//@ assert a != this;     "

//@ assert a != z;     "

//@ assert a != x;     " // FIXME - I don't believe the axioms support proving this

//@ assert this != z;     " // Not necessarily

//@ assert x != z;     " // Not necessarily

/*@ requires i == j; ensures \\result; */
//@ assume i == 1 && a.i == 2;    "

//@ assert z;     "

/*@ requires i == j; ensures \\result; */
//@ assume i == 1 && a.i == 2;    "

//@ assert !z;     "

//@ requires k > 0; assignable i; ensures i == k;      "

//@ assignable i; ensures i == 3;    "

//@ requires k > 0; assignable i; ensures i == k;      "

//@ assignable i; ensures i == 2;    "

//@ requires k > 0; assignable i; ensures i == k;      "

//@ assignable i; ensures i == 3;    "

//@ requires k > 0; assignable i; ensures i == k;      "

//@ assignable i; ensures i == 1;      "

//@ requires k > 0; assignable i; ensures i == k;      "

//@ ensures i == 2; assignable i;     "

//@ requires k > 0; assignable i; ensures i == k;      "

//@ ensures i == 0;     "

//@ assert k != null;     "

//@ assert k != null;     "

/*@ assignable \\everything; */
//@ assert k != null;     "

//@ ensures i == 0 ==> \\result == 6;     "

//@ ensures i == 1 ==> \\result == 1;     "

//@ ensures i == 2 ==> \\result == 0;     "

//@ ensures i == 0 ==> \\result == 7;     "

//@ ensures i == 1 ==> \\result == 1;     "

//@ ensures i == 2 ==> \\result == 0;     "

//@ ensures i == 0 ==> \\result == 6;     "

//@ ensures i == 1 ==> \\result == 2;     "

//@ ensures i == 2 ==> \\result == 0;     "

//@ ensures i == 0 ==> \\result == 6;     "

//@ ensures i == 1 ==> \\result == 1;     "

//@ ensures i == 2 ==> \\result == 9;     "

//@ ensures i == 0 ==> \\result == 2;     "

//@ ensures i == 1 ==> \\result == 3;     "

//@ ensures i == 2 ==> \\result == 5;     "

//@ ensures i == 0 ==> \\result == 0;     "

//@ ensures i == 1 ==> \\result == 3;     "

//@ ensures i == 2 ==> \\result == 5;     "

//@ ensures i == 0 ==> \\result == 2;     "

//@ ensures i == 1 ==> \\result == 0;     "

//@ ensures i == 2 ==> \\result == 5;     "

//@ ensures i == 0 ==> \\result == 2;     "

//@ ensures i == 1 ==> \\result == 3;     "

//@ ensures i == 2 ==> \\result == 0;     "

//@ ensures i == 0 ==> \\result == 2;     "

//@ ensures i == 1 ==> \\result == 3;     "

//@ ensures i == 2 ==> \\result == 5;     "

//@ ensures i == 0 ==> \\result == 0;     "

//@ ensures i == 1 ==> \\result == 3;     "

//@ ensures i == 2 ==> \\result == 5;     "

//@ ensures i == 0 ==> \\result == 2;     "

//@ ensures i == 1 ==> \\result == 0;     "

//@ ensures i == 2 ==> \\result == 5;     "

//@ ensures i == 0 ==> \\result == 2;     "

//@ ensures i == 1 ==> \\result == 3;     "

//@ ensures i == 2 ==> \\result == 0;     "

//@ ensures i == 0 ==> \\result == 2;     "

//@ ensures i == 1 ==> \\result == 3;     "

//@ ensures i == 2 ==> \\result == 5;     "

//@ ensures i == 0 ==> \\result == 0;     "

//@ ensures i == 1 ==> \\result == 3;     "

//@ ensures i == 2 ==> \\result == 5;     "

//@ ensures i == 0 ==> \\result == 2;     "

//@ ensures i == 1 ==> \\result == 0;     "

//@ ensures i == 2 ==> \\result == 5;     "

//@ ensures i == 0 ==> \\result == 2;     "

//@ ensures i == 1 ==> \\result == 3;     "

//@ ensures i == 2 ==> \\result == 0;     "

//@ ensures i == 'z' ==> \\result == 2;     "

//@ ensures i == 'a' ==> \\result == 3;     "

//@ ensures i == 'b' ==> \\result == 5;     "

//@ ensures i == 'z' ==> \\result == 0;     "

//@ ensures i == 'a' ==> \\result == 3;     "

//@ ensures i == 'b' ==> \\result == 5;     "

//@ ensures i == 'z' ==> \\result == 2;     "

//@ ensures i == 'a' ==> \\result == 0;     "

//@ ensures i == 'b' ==> \\result == 5;     "

//@ ensures i == 'z' ==> \\result == 2;     "

//@ ensures i == 'a' ==> \\result == 3;     "

//@ ensures i == 'b' ==> \\result == 0;     "

//@ ensures i == 0 ==> \\result == 5;     "

//@ ensures i == 1 ==> \\result == 1;     "

//@ ensures i == 2 ==> \\result == 2;     "

//@ ensures i == 3 ==> \\result == 3;     "

//@ ensures i == 4 ==> \\result == 3;     "

//@ ensures i == 0 ==> \\result == 0;     " // ERROR

//@ ensures i == 1 ==> \\result == 1;     "

//@ ensures i == 2 ==> \\result == 2;     "

//@ ensures i == 3 ==> \\result == 3;     "

//@ ensures i == 4 ==> \\result == 3;     "

//@ ensures i == 0 ==> \\result == 5;     "

//@ ensures i == 1 ==> \\result == 0;     " // ERROR

//@ ensures i == 2 ==> \\result == 2;     "

//@ ensures i == 3 ==> \\result == 3;     "

//@ ensures i == 4 ==> \\result == 3;     "

//@ ensures i == 0 ==> \\result == 5;     "

//@ ensures i == 1 ==> \\result == 1;     "

//@ ensures i == 2 ==> \\result == 0;     " // ERROR

//@ ensures i == 3 ==> \\result == 3;     "

//@ ensures i == 4 ==> \\result == 3;     "

//@ ensures i == 0 ==> \\result == 5;     "

//@ ensures i == 1 ==> \\result == 1;     "

//@ ensures i == 2 ==> \\result == 2;     "

//@ ensures i == 3 ==> \\result == 0;     " // ERROR

//@ ensures i == 4 ==> \\result == 3;     "

//@ ensures i == 0 ==> \\result == 5;     "

//@ ensures i == 1 ==> \\result == 1;     "

//@ ensures i == 2 ==> \\result == 2;     "

//@ ensures i == 3 ==> \\result == 3;     "

//@ ensures i == 4 ==> \\result == 0;     " // ERROR

//@ assigns list.objectState;      "

//@ assert i != 1;    "

//@ assert false;    "

//@ assert i != 3;    "

/*@ nullable*/
//@ signals_only Exception;     "

/*@ nullable*/
//@ signals_only Exception;     "

/*@ nullable*/
//@ signals_only Exception;     "

/*@ nullable*/
/*@ requires i == j; ensures \\result; */
//@ assume i == 1 && a.i == 2;    "

/*@ requires i == j; ensures \\result; */
//@ assume i == 1 && a.i == 2;    "

/*@ requires i == j; ensures \\result; */
//@ assume i == 1 && a.i == 2;    "

/*@ requires i == j; ensures \\result; */
//@ assume i == 1 && a.i == 2;    "

/*@ requires i == j; ensures \\result; */
//@ assume i == 1 && a.i == 2;    "

/*@ requires i == j; ensures \\result; */
//@ assume i == 1 && a.i == 2;    "

//@ ensures i == k;      "

//@ assert a.i == 1;    "

//@ ensures i == k;      "

//@ assert a != null;    "

//@ ensures i == k;      "

//@ assert a.i == 2;    "

//@ ensures i == k; pure      "

//@ assert a.i == 1;    "

//@ assert b.i == 2;    "

//@ ensures i == k; pure      "

//@ assert a != b;     "

//@ assert a != this;     "

//@ assert a != z;     "

//@ assert a != x;     " // FIXME - I don't believe the axioms support proving this

//@ assert this != z;     " // Not necessarily

//@ assert x != z;     " // Not necessarily

/*@ requires i == j; ensures \\result; */
//@ assume i == 1 && a.i == 2;    "

//@ assert z;     "

/*@ requires i == j; ensures \\result; */
//@ assume i == 1 && a.i == 2;    "

//@ assert !z;     "

//@ requires k > 0; assignable i; ensures i == k;      "

//@ assignable i; ensures i == 3;    "

//@ requires k > 0; assignable i; ensures i == k;      "

//@ assignable i; ensures i == 2;    "

//@ requires k > 0; assignable i; ensures i == k;      "

//@ assignable i; ensures i == 3;    "

//@ requires k > 0; assignable i; ensures i == k;      "

//@ assignable i; ensures i == 1;      "

//@ requires k > 0; assignable i; ensures i == k;      "

//@ ensures i == 2; assignable i;     "

//@ requires k > 0; assignable i; ensures i == k;      "

//@ ensures i == 0;     "

//@ assert k != null;     "

//@ assert k != null;     "

/*@ assignable \\everything; */
//@ assert k != null;     "

//@ ensures i == 0 ==> \\result == 6;     "

//@ ensures i == 1 ==> \\result == 1;     "

//@ ensures i == 2 ==> \\result == 0;     "

//@ ensures i == 0 ==> \\result == 7;     "

//@ ensures i == 1 ==> \\result == 1;     "

//@ ensures i == 2 ==> \\result == 0;     "

//@ ensures i == 0 ==> \\result == 6;     "

//@ ensures i == 1 ==> \\result == 2;     "

//@ ensures i == 2 ==> \\result == 0;     "

//@ ensures i == 0 ==> \\result == 6;     "

//@ ensures i == 1 ==> \\result == 1;     "

//@ ensures i == 2 ==> \\result == 9;     "

//@ ensures i == 0 ==> \\result == 2;     "

//@ ensures i == 1 ==> \\result == 3;     "

//@ ensures i == 2 ==> \\result == 5;     "

//@ ensures i == 0 ==> \\result == 0;     "

//@ ensures i == 1 ==> \\result == 3;     "

//@ ensures i == 2 ==> \\result == 5;     "

//@ ensures i == 0 ==> \\result == 2;     "

//@ ensures i == 1 ==> \\result == 0;     "

//@ ensures i == 2 ==> \\result == 5;     "

//@ ensures i == 0 ==> \\result == 2;     "

//@ ensures i == 1 ==> \\result == 3;     "

//@ ensures i == 2 ==> \\result == 0;     "

//@ ensures i == 0 ==> \\result == 2;     "

//@ ensures i == 1 ==> \\result == 3;     "

//@ ensures i == 2 ==> \\result == 5;     "

//@ ensures i == 0 ==> \\result == 0;     "

//@ ensures i == 1 ==> \\result == 3;     "

//@ ensures i == 2 ==> \\result == 5;     "

//@ ensures i == 0 ==> \\result == 2;     "

//@ ensures i == 1 ==> \\result == 0;     "

//@ ensures i == 2 ==> \\result == 5;     "

//@ ensures i == 0 ==> \\result == 2;     "

//@ ensures i == 1 ==> \\result == 3;     "

//@ ensures i == 2 ==> \\result == 0;     "

//@ ensures i == 0 ==> \\result == 2;     "

//@ ensures i == 1 ==> \\result == 3;     "

//@ ensures i == 2 ==> \\result == 5;     "

//@ ensures i == 0 ==> \\result == 0;     "

//@ ensures i == 1 ==> \\result == 3;     "

//@ ensures i == 2 ==> \\result == 5;     "

//@ ensures i == 0 ==> \\result == 2;     "

//@ ensures i == 1 ==> \\result == 0;     "

//@ ensures i == 2 ==> \\result == 5;     "

//@ ensures i == 0 ==> \\result == 2;     "

//@ ensures i == 1 ==> \\result == 3;     "

//@ ensures i == 2 ==> \\result == 0;     "

//@ ensures i == 'z' ==> \\result == 2;     "

//@ ensures i == 'a' ==> \\result == 3;     "

//@ ensures i == 'b' ==> \\result == 5;     "

//@ ensures i == 'z' ==> \\result == 0;     "

//@ ensures i == 'a' ==> \\result == 3;     "

//@ ensures i == 'b' ==> \\result == 5;     "

//@ ensures i == 'z' ==> \\result == 2;     "

//@ ensures i == 'a' ==> \\result == 0;     "

//@ ensures i == 'b' ==> \\result == 5;     "

//@ ensures i == 'z' ==> \\result == 2;     "

//@ ensures i == 'a' ==> \\result == 3;     "

//@ ensures i == 'b' ==> \\result == 0;     "

//@ ensures i == 0 ==> \\result == 5;     "

//@ ensures i == 1 ==> \\result == 1;     "

//@ ensures i == 2 ==> \\result == 2;     "

//@ ensures i == 3 ==> \\result == 3;     "

//@ ensures i == 4 ==> \\result == 3;     "

//@ ensures i == 0 ==> \\result == 0;     " // ERROR

//@ ensures i == 1 ==> \\result == 1;     "

//@ ensures i == 2 ==> \\result == 2;     "

//@ ensures i == 3 ==> \\result == 3;     "

//@ ensures i == 4 ==> \\result == 3;     "

//@ ensures i == 0 ==> \\result == 5;     "

//@ ensures i == 1 ==> \\result == 0;     " // ERROR

//@ ensures i == 2 ==> \\result == 2;     "

//@ ensures i == 3 ==> \\result == 3;     "

//@ ensures i == 4 ==> \\result == 3;     "

//@ ensures i == 0 ==> \\result == 5;     "

//@ ensures i == 1 ==> \\result == 1;     "

//@ ensures i == 2 ==> \\result == 0;     " // ERROR

//@ ensures i == 3 ==> \\result == 3;     "

//@ ensures i == 4 ==> \\result == 3;     "

//@ ensures i == 0 ==> \\result == 5;     "

//@ ensures i == 1 ==> \\result == 1;     "

//@ ensures i == 2 ==> \\result == 2;     "

//@ ensures i == 3 ==> \\result == 0;     " // ERROR

//@ ensures i == 4 ==> \\result == 3;     "

//@ ensures i == 0 ==> \\result == 5;     "

//@ ensures i == 1 ==> \\result == 1;     "

//@ ensures i == 2 ==> \\result == 2;     "

//@ ensures i == 3 ==> \\result == 3;     "

//@ ensures i == 4 ==> \\result == 0;     " // ERROR

//@ assigns list.objectState;      "

//@ assert i != 1;    "

//@ assert false;    "

//@ assert i != 3;    "

/*@ nullable*/
//@ signals_only Exception;     "

/*@ nullable*/
//@ signals_only Exception;     "

/*@ nullable*/
//@ signals_only Exception;     "

/*@ nullable*/
/*@ requires i == j; ensures \\result; */
//@ assume i == 1 && a.i == 2;    "

/*@ requires i == j; ensures \\result; */
//@ assume i == 1 && a.i == 2;    "

/*@ requires i == j; ensures \\result; */
//@ assume i == 1 && a.i == 2;    "

/*@ requires i == j; ensures \\result; */
//@ assume i == 1 && a.i == 2;    "

/*@ requires i == j; ensures \\result; */
//@ assume i == 1 && a.i == 2;    "

/*@ requires i == j; ensures \\result; */
//@ assume i == 1 && a.i == 2;    "

//@ ensures i == k;      "

//@ assert a.i == 1;    "

//@ ensures i == k;      "

//@ assert a != null;    "

//@ ensures i == k;      "

//@ assert a.i == 2;    "

//@ ensures i == k; pure      "

//@ assert a.i == 1;    "

//@ assert b.i == 2;    "

//@ ensures i == k; pure      "

//@ assert a != b;     "

//@ assert a != this;     "

//@ assert a != z;     "

//@ assert a != x;     " // FIXME - I don't believe the axioms support proving this

//@ assert this != z;     " // Not necessarily

//@ assert x != z;     " // Not necessarily

/*@ requires i == j; ensures \\result; */
//@ assume i == 1 && a.i == 2;    "

//@ assert z;     "

/*@ requires i == j; ensures \\result; */
//@ assume i == 1 && a.i == 2;    "

//@ assert !z;     "

//@ requires k > 0; assignable i; ensures i == k;      "

//@ assignable i; ensures i == 3;    "

//@ requires k > 0; assignable i; ensures i == k;      "

//@ assignable i; ensures i == 2;    "

//@ requires k > 0; assignable i; ensures i == k;      "

//@ assignable i; ensures i == 3;    "

//@ requires k > 0; assignable i; ensures i == k;      "

//@ assignable i; ensures i == 1;      "

//@ requires k > 0; assignable i; ensures i == k;      "

//@ ensures i == 2; assignable i;     "

//@ requires k > 0; assignable i; ensures i == k;      "

//@ ensures i == 0;     "

//@ assert k != null;     "

//@ assert k != null;     "

/*@ assignable \\everything; */
//@ assert k != null;     "

//@ ensures i == 0 ==> \\result == 6;     "

//@ ensures i == 1 ==> \\result == 1;     "

//@ ensures i == 2 ==> \\result == 0;     "

//@ ensures i == 0 ==> \\result == 7;     "

//@ ensures i == 1 ==> \\result == 1;     "

//@ ensures i == 2 ==> \\result == 0;     "

//@ ensures i == 0 ==> \\result == 6;     "

//@ ensures i == 1 ==> \\result == 2;     "

//@ ensures i == 2 ==> \\result == 0;     "

//@ ensures i == 0 ==> \\result == 6;     "

//@ ensures i == 1 ==> \\result == 1;     "

//@ ensures i == 2 ==> \\result == 9;     "

//@ ensures i == 0 ==> \\result == 2;     "

//@ ensures i == 1 ==> \\result == 3;     "

//@ ensures i == 2 ==> \\result == 5;     "

//@ ensures i == 0 ==> \\result == 0;     "

//@ ensures i == 1 ==> \\result == 3;     "

//@ ensures i == 2 ==> \\result == 5;     "

//@ ensures i == 0 ==> \\result == 2;     "

//@ ensures i == 1 ==> \\result == 0;     "

//@ ensures i == 2 ==> \\result == 5;     "

//@ ensures i == 0 ==> \\result == 2;     "

//@ ensures i == 1 ==> \\result == 3;     "

//@ ensures i == 2 ==> \\result == 0;     "

//@ ensures i == 0 ==> \\result == 2;     "

//@ ensures i == 1 ==> \\result == 3;     "

//@ ensures i == 2 ==> \\result == 5;     "

//@ ensures i == 0 ==> \\result == 0;     "

//@ ensures i == 1 ==> \\result == 3;     "

//@ ensures i == 2 ==> \\result == 5;     "

//@ ensures i == 0 ==> \\result == 2;     "

//@ ensures i == 1 ==> \\result == 0;     "

//@ ensures i == 2 ==> \\result == 5;     "

//@ ensures i == 0 ==> \\result == 2;     "

//@ ensures i == 1 ==> \\result == 3;     "

//@ ensures i == 2 ==> \\result == 0;     "

//@ ensures i == 0 ==> \\result == 2;     "

//@ ensures i == 1 ==> \\result == 3;     "

//@ ensures i == 2 ==> \\result == 5;     "

//@ ensures i == 0 ==> \\result == 0;     "

//@ ensures i == 1 ==> \\result == 3;     "

//@ ensures i == 2 ==> \\result == 5;     "

//@ ensures i == 0 ==> \\result == 2;     "

//@ ensures i == 1 ==> \\result == 0;     "

//@ ensures i == 2 ==> \\result == 5;     "

//@ ensures i == 0 ==> \\result == 2;     "

//@ ensures i == 1 ==> \\result == 3;     "

//@ ensures i == 2 ==> \\result == 0;     "

//@ ensures i == 'z' ==> \\result == 2;     "

//@ ensures i == 'a' ==> \\result == 3;     "

//@ ensures i == 'b' ==> \\result == 5;     "

//@ ensures i == 'z' ==> \\result == 0;     "

//@ ensures i == 'a' ==> \\result == 3;     "

//@ ensures i == 'b' ==> \\result == 5;     "

//@ ensures i == 'z' ==> \\result == 2;     "

//@ ensures i == 'a' ==> \\result == 0;     "

//@ ensures i == 'b' ==> \\result == 5;     "

//@ ensures i == 'z' ==> \\result == 2;     "

//@ ensures i == 'a' ==> \\result == 3;     "

//@ ensures i == 'b' ==> \\result == 0;     "

//@ ensures i == 0 ==> \\result == 5;     "

//@ ensures i == 1 ==> \\result == 1;     "

//@ ensures i == 2 ==> \\result == 2;     "

//@ ensures i == 3 ==> \\result == 3;     "

//@ ensures i == 4 ==> \\result == 3;     "

//@ ensures i == 0 ==> \\result == 0;     " // ERROR

//@ ensures i == 1 ==> \\result == 1;     "

//@ ensures i == 2 ==> \\result == 2;     "

//@ ensures i == 3 ==> \\result == 3;     "

//@ ensures i == 4 ==> \\result == 3;     "

//@ ensures i == 0 ==> \\result == 5;     "

//@ ensures i == 1 ==> \\result == 0;     " // ERROR

//@ ensures i == 2 ==> \\result == 2;     "

//@ ensures i == 3 ==> \\result == 3;     "

//@ ensures i == 4 ==> \\result == 3;     "

//@ ensures i == 0 ==> \\result == 5;     "

//@ ensures i == 1 ==> \\result == 1;     "

//@ ensures i == 2 ==> \\result == 0;     " // ERROR

//@ ensures i == 3 ==> \\result == 3;     "

//@ ensures i == 4 ==> \\result == 3;     "

//@ ensures i == 0 ==> \\result == 5;     "

//@ ensures i == 1 ==> \\result == 1;     "

//@ ensures i == 2 ==> \\result == 2;     "

//@ ensures i == 3 ==> \\result == 0;     " // ERROR

//@ ensures i == 4 ==> \\result == 3;     "

//@ ensures i == 0 ==> \\result == 5;     "

//@ ensures i == 1 ==> \\result == 1;     "

//@ ensures i == 2 ==> \\result == 2;     "

//@ ensures i == 3 ==> \\result == 3;     "

//@ ensures i == 4 ==> \\result == 0;     " // ERROR

//@ assigns list.objectState;      "

//@ assert i != 1;    "

//@ assert false;    "

//@ assert i != 3;    "

/*@ nullable*/
//@ signals_only Exception;     "

/*@ nullable*/
//@ signals_only Exception;     "

/*@ nullable*/
//@ signals_only Exception;     "

/*@ nullable*/
/*@ requires i == j; ensures \\result; */
//@ assume i == 1 && a.i == 2;    "

/*@ requires i == j; ensures \\result; */
//@ assume i == 1 && a.i == 2;    "

/*@ requires i == j; ensures \\result; */
//@ assume i == 1 && a.i == 2;    "

/*@ requires i == j; ensures \\result; */
//@ assume i == 1 && a.i == 2;    "

/*@ requires i == j; ensures \\result; */
//@ assume i == 1 && a.i == 2;    "

/*@ requires i == j; ensures \\result; */
//@ assume i == 1 && a.i == 2;    "

//@ ensures i == k;      "

//@ assert a.i == 1;    "

//@ ensures i == k;      "

//@ assert a != null;    "

//@ ensures i == k;      "

//@ assert a.i == 2;    "

//@ ensures i == k; pure      "

//@ assert a.i == 1;    "

//@ assert b.i == 2;    "

//@ ensures i == k; pure      "

//@ assert a != b;     "

//@ assert a != this;     "

//@ assert a != z;     "

//@ assert a != x;     " // FIXME - I don't believe the axioms support proving this

//@ assert this != z;     " // Not necessarily

//@ assert x != z;     " // Not necessarily

/*@ requires i == j; ensures \\result; */
//@ assume i == 1 && a.i == 2;    "

//@ assert z;     "

/*@ requires i == j; ensures \\result; */
//@ assume i == 1 && a.i == 2;    "

//@ assert !z;     "

//@ requires k > 0; assignable i; ensures i == k;      "

//@ assignable i; ensures i == 3;    "

//@ requires k > 0; assignable i; ensures i == k;      "

//@ assignable i; ensures i == 2;    "

//@ requires k > 0; assignable i; ensures i == k;      "

//@ assignable i; ensures i == 3;    "

//@ requires k > 0; assignable i; ensures i == k;      "

//@ assignable i; ensures i == 1;      "

//@ requires k > 0; assignable i; ensures i == k;      "

//@ ensures i == 2; assignable i;     "

//@ requires k > 0; assignable i; ensures i == k;      "

//@ ensures i == 0;     "

//@ assert k != null;     "

//@ assert k != null;     "

/*@ assignable \\everything; */
//@ assert k != null;     "

//@ ensures i == 0 ==> \\result == 6;     "

//@ ensures i == 1 ==> \\result == 1;     "

//@ ensures i == 2 ==> \\result == 0;     "

//@ ensures i == 0 ==> \\result == 7;     "

//@ ensures i == 1 ==> \\result == 1;     "

//@ ensures i == 2 ==> \\result == 0;     "

//@ ensures i == 0 ==> \\result == 6;     "

//@ ensures i == 1 ==> \\result == 2;     "

//@ ensures i == 2 ==> \\result == 0;     "

//@ ensures i == 0 ==> \\result == 6;     "

//@ ensures i == 1 ==> \\result == 1;     "

//@ ensures i == 2 ==> \\result == 9;     "

//@ ensures i == 0 ==> \\result == 2;     "

//@ ensures i == 1 ==> \\result == 3;     "

//@ ensures i == 2 ==> \\result == 5;     "

//@ ensures i == 0 ==> \\result == 0;     "

//@ ensures i == 1 ==> \\result == 3;     "

//@ ensures i == 2 ==> \\result == 5;     "

//@ ensures i == 0 ==> \\result == 2;     "

//@ ensures i == 1 ==> \\result == 0;     "

//@ ensures i == 2 ==> \\result == 5;     "

//@ ensures i == 0 ==> \\result == 2;     "

//@ ensures i == 1 ==> \\result == 3;     "

//@ ensures i == 2 ==> \\result == 0;     "

//@ ensures i == 0 ==> \\result == 2;     "

//@ ensures i == 1 ==> \\result == 3;     "

//@ ensures i == 2 ==> \\result == 5;     "

//@ ensures i == 0 ==> \\result == 0;     "

//@ ensures i == 1 ==> \\result == 3;     "

//@ ensures i == 2 ==> \\result == 5;     "

//@ ensures i == 0 ==> \\result == 2;     "

//@ ensures i == 1 ==> \\result == 0;     "

//@ ensures i == 2 ==> \\result == 5;     "

//@ ensures i == 0 ==> \\result == 2;     "

//@ ensures i == 1 ==> \\result == 3;     "

//@ ensures i == 2 ==> \\result == 0;     "

//@ ensures i == 0 ==> \\result == 2;     "

//@ ensures i == 1 ==> \\result == 3;     "

//@ ensures i == 2 ==> \\result == 5;     "

//@ ensures i == 0 ==> \\result == 0;     "

//@ ensures i == 1 ==> \\result == 3;     "

//@ ensures i == 2 ==> \\result == 5;     "

//@ ensures i == 0 ==> \\result == 2;     "

//@ ensures i == 1 ==> \\result == 0;     "

//@ ensures i == 2 ==> \\result == 5;     "

//@ ensures i == 0 ==> \\result == 2;     "

//@ ensures i == 1 ==> \\result == 3;     "

//@ ensures i == 2 ==> \\result == 0;     "

//@ ensures i == 'z' ==> \\result == 2;     "

//@ ensures i == 'a' ==> \\result == 3;     "

//@ ensures i == 'b' ==> \\result == 5;     "

//@ ensures i == 'z' ==> \\result == 0;     "

//@ ensures i == 'a' ==> \\result == 3;     "

//@ ensures i == 'b' ==> \\result == 5;     "

//@ ensures i == 'z' ==> \\result == 2;     "

//@ ensures i == 'a' ==> \\result == 0;     "

//@ ensures i == 'b' ==> \\result == 5;     "

//@ ensures i == 'z' ==> \\result == 2;     "

//@ ensures i == 'a' ==> \\result == 3;     "

//@ ensures i == 'b' ==> \\result == 0;     "

//@ ensures i == 0 ==> \\result == 5;     "

//@ ensures i == 1 ==> \\result == 1;     "

//@ ensures i == 2 ==> \\result == 2;     "

//@ ensures i == 3 ==> \\result == 3;     "

//@ ensures i == 4 ==> \\result == 3;     "

//@ ensures i == 0 ==> \\result == 0;     " // ERROR

//@ ensures i == 1 ==> \\result == 1;     "

//@ ensures i == 2 ==> \\result == 2;     "

//@ ensures i == 3 ==> \\result == 3;     "

//@ ensures i == 4 ==> \\result == 3;     "

//@ ensures i == 0 ==> \\result == 5;     "

//@ ensures i == 1 ==> \\result == 0;     " // ERROR

//@ ensures i == 2 ==> \\result == 2;     "

//@ ensures i == 3 ==> \\result == 3;     "

//@ ensures i == 4 ==> \\result == 3;     "

//@ ensures i == 0 ==> \\result == 5;     "

//@ ensures i == 1 ==> \\result == 1;     "

//@ ensures i == 2 ==> \\result == 0;     " // ERROR

//@ ensures i == 3 ==> \\result == 3;     "

//@ ensures i == 4 ==> \\result == 3;     "

//@ ensures i == 0 ==> \\result == 5;     "

//@ ensures i == 1 ==> \\result == 1;     "

//@ ensures i == 2 ==> \\result == 2;     "

//@ ensures i == 3 ==> \\result == 0;     " // ERROR

//@ ensures i == 4 ==> \\result == 3;     "

//@ ensures i == 0 ==> \\result == 5;     "

//@ ensures i == 1 ==> \\result == 1;     "

//@ ensures i == 2 ==> \\result == 2;     "

//@ ensures i == 3 ==> \\result == 3;     "

//@ ensures i == 4 ==> \\result == 0;     " // ERROR

//@ assigns list.objectState;      "

//@ assert i != 1;    "

//@ assert false;    "

//@ assert i != 3;    "

/*@ nullable*/
//@ signals_only Exception;     "

/*@ nullable*/
//@ signals_only Exception;     "

/*@ nullable*/
//@ signals_only Exception;     "

/*@ nullable*/
/*@ requires i == j; ensures \\result; */
//@ assume i == 1 && a.i == 2;    "

/*@ requires i == j; ensures \\result; */
//@ assume i == 1 && a.i == 2;    "

/*@ requires i == j; ensures \\result; */
//@ assume i == 1 && a.i == 2;    "

/*@ requires i == j; ensures \\result; */
//@ assume i == 1 && a.i == 2;    "

/*@ requires i == j; ensures \\result; */
//@ assume i == 1 && a.i == 2;    "

/*@ requires i == j; ensures \\result; */
//@ assume i == 1 && a.i == 2;    "

//@ ensures i == k;      "

//@ assert a.i == 1;    "

//@ ensures i == k;      "

//@ assert a != null;    "

//@ ensures i == k;      "

//@ assert a.i == 2;    "

//@ ensures i == k; pure      "

//@ assert a.i == 1;    "

//@ assert b.i == 2;    "

//@ ensures i == k; pure      "

//@ assert a != b;     "

//@ assert a != this;     "

//@ assert a != z;     "

//@ assert a != x;     " // FIXME - I don't believe the axioms support proving this

//@ assert this != z;     " // Not necessarily

//@ assert x != z;     " // Not necessarily

/*@ requires i == j; ensures \\result; */
//@ assume i == 1 && a.i == 2;    "

//@ assert z;     "

/*@ requires i == j; ensures \\result; */
//@ assume i == 1 && a.i == 2;    "

//@ assert !z;     "

//@ requires k > 0; assignable i; ensures i == k;      "

//@ assignable i; ensures i == 3;    "

//@ requires k > 0; assignable i; ensures i == k;      "

//@ assignable i; ensures i == 2;    "

//@ requires k > 0; assignable i; ensures i == k;      "

//@ assignable i; ensures i == 3;    "

//@ requires k > 0; assignable i; ensures i == k;      "

//@ assignable i; ensures i == 1;      "

//@ requires k > 0; assignable i; ensures i == k;      "

//@ ensures i == 2; assignable i;     "

//@ requires k > 0; assignable i; ensures i == k;      "

//@ ensures i == 0;     "

//@ assert k != null;     "

//@ assert k != null;     "

/*@ assignable \\everything; */
//@ assert k != null;     "

//@ ensures i == 0 ==> \\result == 6;     "

//@ ensures i == 1 ==> \\result == 1;     "

//@ ensures i == 2 ==> \\result == 0;     "

//@ ensures i == 0 ==> \\result == 7;     "

//@ ensures i == 1 ==> \\result == 1;     "

//@ ensures i == 2 ==> \\result == 0;     "

//@ ensures i == 0 ==> \\result == 6;     "

//@ ensures i == 1 ==> \\result == 2;     "

//@ ensures i == 2 ==> \\result == 0;     "

//@ ensures i == 0 ==> \\result == 6;     "

//@ ensures i == 1 ==> \\result == 1;     "

//@ ensures i == 2 ==> \\result == 9;     "

//@ ensures i == 0 ==> \\result == 2;     "

//@ ensures i == 1 ==> \\result == 3;     "

//@ ensures i == 2 ==> \\result == 5;     "

//@ ensures i == 0 ==> \\result == 0;     "

//@ ensures i == 1 ==> \\result == 3;     "

//@ ensures i == 2 ==> \\result == 5;     "

//@ ensures i == 0 ==> \\result == 2;     "

//@ ensures i == 1 ==> \\result == 0;     "

//@ ensures i == 2 ==> \\result == 5;     "

//@ ensures i == 0 ==> \\result == 2;     "

//@ ensures i == 1 ==> \\result == 3;     "

//@ ensures i == 2 ==> \\result == 0;     "

//@ ensures i == 0 ==> \\result == 2;     "

//@ ensures i == 1 ==> \\result == 3;     "

//@ ensures i == 2 ==> \\result == 5;     "

//@ ensures i == 0 ==> \\result == 0;     "

//@ ensures i == 1 ==> \\result == 3;     "

//@ ensures i == 2 ==> \\result == 5;     "

//@ ensures i == 0 ==> \\result == 2;     "

//@ ensures i == 1 ==> \\result == 0;     "

//@ ensures i == 2 ==> \\result == 5;     "

//@ ensures i == 0 ==> \\result == 2;     "

//@ ensures i == 1 ==> \\result == 3;     "

//@ ensures i == 2 ==> \\result == 0;     "

//@ ensures i == 0 ==> \\result == 2;     "

//@ ensures i == 1 ==> \\result == 3;     "

//@ ensures i == 2 ==> \\result == 5;     "

//@ ensures i == 0 ==> \\result == 0;     "

//@ ensures i == 1 ==> \\result == 3;     "

//@ ensures i == 2 ==> \\result == 5;     "

//@ ensures i == 0 ==> \\result == 2;     "

//@ ensures i == 1 ==> \\result == 0;     "

//@ ensures i == 2 ==> \\result == 5;     "

//@ ensures i == 0 ==> \\result == 2;     "

//@ ensures i == 1 ==> \\result == 3;     "

//@ ensures i == 2 ==> \\result == 0;     "

//@ ensures i == 'z' ==> \\result == 2;     "

//@ ensures i == 'a' ==> \\result == 3;     "

//@ ensures i == 'b' ==> \\result == 5;     "

//@ ensures i == 'z' ==> \\result == 0;     "

//@ ensures i == 'a' ==> \\result == 3;     "

//@ ensures i == 'b' ==> \\result == 5;     "

//@ ensures i == 'z' ==> \\result == 2;     "

//@ ensures i == 'a' ==> \\result == 0;     "

//@ ensures i == 'b' ==> \\result == 5;     "

//@ ensures i == 'z' ==> \\result == 2;     "

//@ ensures i == 'a' ==> \\result == 3;     "

//@ ensures i == 'b' ==> \\result == 0;     "

//@ ensures i == 0 ==> \\result == 5;     "

//@ ensures i == 1 ==> \\result == 1;     "

//@ ensures i == 2 ==> \\result == 2;     "

//@ ensures i == 3 ==> \\result == 3;     "

//@ ensures i == 4 ==> \\result == 3;     "

//@ ensures i == 0 ==> \\result == 0;     " // ERROR

//@ ensures i == 1 ==> \\result == 1;     "

//@ ensures i == 2 ==> \\result == 2;     "

//@ ensures i == 3 ==> \\result == 3;     "

//@ ensures i == 4 ==> \\result == 3;     "

//@ ensures i == 0 ==> \\result == 5;     "

//@ ensures i == 1 ==> \\result == 0;     " // ERROR

//@ ensures i == 2 ==> \\result == 2;     "

//@ ensures i == 3 ==> \\result == 3;     "

//@ ensures i == 4 ==> \\result == 3;     "

//@ ensures i == 0 ==> \\result == 5;     "

//@ ensures i == 1 ==> \\result == 1;     "

//@ ensures i == 2 ==> \\result == 0;     " // ERROR

//@ ensures i == 3 ==> \\result == 3;     "

//@ ensures i == 4 ==> \\result == 3;     "

//@ ensures i == 0 ==> \\result == 5;     "

//@ ensures i == 1 ==> \\result == 1;     "

//@ ensures i == 2 ==> \\result == 2;     "

//@ ensures i == 3 ==> \\result == 0;     " // ERROR

//@ ensures i == 4 ==> \\result == 3;     "

//@ ensures i == 0 ==> \\result == 5;     "

//@ ensures i == 1 ==> \\result == 1;     "

//@ ensures i == 2 ==> \\result == 2;     "

//@ ensures i == 3 ==> \\result == 3;     "

//@ ensures i == 4 ==> \\result == 0;     " // ERROR

//@ assigns list.objectState;      "

//@ modifies \\everything;    "


//@ assume \    onnullelements(a);    "

//@ assume a.length > 1;    "

//@ assert a[0] != null;    "  // OK

//@ modifies \\everything;    "

//@ assume \    onnullelements(a);    "

//@ assert a != null;    "  // OK

//@ modifies \\everything;    "

//@ assume \    onnullelements(a);    "

//@ assert a == null;    "  // BAD

//@ modifies \\everything;    "

//@ assume a != null && a.length > 1;    "

//@ assert a[0] != null;    "  // BAD

//@ modifies \\everything;    "

//@ assume a != null && a.length == 0;    "

//@ assert \    onnullelements(a);    " // OK

//@ modifies \\everything;    "

//@ assume a != null && a.length == 0;    "

//@ assert (\\forall int i; 0<=i && i<a.length; a[i] != null);    " // OK

//@ requires \\elemtype(\\typeof(a)) == \\type(Object); modifies \\everything;    "

//@ assume a != null && a.length == 1;    "

//@ assert a[0] != null;    " // OK

//@ assert \    onnullelements(a);    " // OK

//@ modifies \\everything;    "

//@ assume a != null && a.length == 1;    "

//@ assume a[0] != null;    "

//@ assert \    onnullelements(a);    " // OK

//@ requires \\elemtype(\\typeof(a)) == \\type(Object); modifies \\everything;    "

//@ assume a != null && a.length == 2;    "

//@ assert \    onnullelements(a);    " // OK

//@ modifies \\everything;    "

//@ assume a != null && a.length == 2;    "

//@ assume a[0] != null;    "

//@ assume a[1] != null;    "

//@ assert \    onnullelements(a);    " // OK

//@ requires \\elemtype(\\typeof(a)) == \\type(Object); modifies \\everything;    "

//@ assume a != null && a.length == 3;    "

//@ assert \    onnullelements(a);    " // BAD

//@ requires \\elemtype(\\typeof(a)) == \\type(Object); modifies \\everything;    "

//@ assume \    onnullelements(a) && a.length == 3;    "

//@ assert \    onnullelements(a);    " // OK

//@ requires \\elemtype(\\typeof(a)) == \\type(Object); modifies \\everything;    "

//@ assume a != null && a.length == 3;    " // Line 75

//@ assert \    onnullelements(a);    " // BAD

//@ requires \\elemtype(\\typeof(a)) == \\type(Object); modifies \\everything;    "

//@ assume a != null && a.length == 3;    "

//@ assume \    onnullelements(a);    "

//@ assert \    onnullelements(a);    " // BAD

//@ modifies \\everything;    "

//@ assume a != null && a.length == 0;    "

//@ assert \    onnullelements(a);    "

//@ requires i == 5;    "

//@ modifies \\everything;    "

//@ assert \    ot_modified(i);    "  // OK

//@ modifies \\everything;    "

//@ assert \    ot_modified(i);    "  // BAD

//@ ghost public int gi;    "

//@ requires i == 5;    "

//@ modifies \\everything;    "

//@ assert \    ot_modified(i);    "  // OK

//@ modifies \\everything;    "

//@ assert \    ot_modified(i);    "  // BAD

//@ requires si == 5;    "

//@ modifies \\everything;    "

//@ assert \    ot_modified(si);    "  // OK

//@ modifies \\everything;    "

//@ assert \    ot_modified(si);    "  // BAD

//@ requires gi == 5;    "

//@ modifies \\everything;    "

//@ set gi = 5;    "

//@ assert \    ot_modified(gi);    "  // OK

//@ modifies \\everything;    "

//@ set gi = 5;    "

//@ assert \    ot_modified(gi);    "  // BAD


//@ requires t != null;    "

//@ modifies \\everything;    "

//@ assert \    ot_modified(t.i);    "  // OK

//@ requires t != null;    "

//@ modifies \\everything;    "

//@ assert \    ot_modified(t.i) ? true: true;    "  // BAD

//@ requires t == null;    "

//@ modifies \\everything;    "

//@ assert \    ot_modified(t.i) ? true: true;    "  // OK

//@ modifies \\everything;    "

//@ assert \    ot_modified(t.i) ? true: true;    "  // BAD

//@ requires i == 6;    "

//@ modifies \\everything;    "

//@ assert s == i;    "  // OK

//@ assert b == i;    "  // OK

//@ assert c == i;    "  // OK

//@ assert l == i;    "  // OK

//@ assert ii == i;    "  // OK

//@ assert i == (short)i;    "

//@ assert i == (long)i;    "

//@ assert i == (char)i;    "

//@ assert i == (byte)i;    "

//@ assert i == (int)i;    "

//@ requires i == 100000;    "

//@ modifies \\everything;    "

//@ assert s == i;    "

//@ requires i == 100000;    "

//@ modifies \\everything;    "

//@ assert i == (short)i;    " // BAD

//@ requires i == 100000;    "

//@ modifies \\everything;    "

//@ assert i == (byte)i;    "

//@ requires i == 100000;    "

//@ modifies \\everything;    "

//@ assert i == (char)i;    "

//@ requires i == 100000;    "

//@ modifies \\everything;    "

//@ assert b == i;    "

//@ requires i == 100000;    "

//@ modifies \\everything;    "

//@ assert c == i;    "

//@ modifies \\everything;    "


//@ assert 0 == (short)s;

//@ modifies \\everything;    "


//@ assert 0 == (int)s;

//@ modifies \\everything;    "


//@ assert 0L == (long)s;

//@ modifies \\everything;    "


//@ assert 0 == (byte)s;

//@ modifies \\everything;    "


//@ assert 0 == (char)s;

//@ modifies \\everything;    "


//@ assert (boolean)s;

//@ modifies \\everything;    "


//@ assert 0 == (double)s;

//@ modifies \\everything;    "


//@ assert 0.0 == (float)s;

//@ assignable \\everything;    "

//@ assignable \\everything;    "

//@ assignable i;    "

//@ assignable \\everything;    "

//@ assignable \    othing;    "

//@ assignable \\everything;    "

//@ assignable \\everything;    "

//@ requires true;     " // default assignable

//@ assignable \\everything;    "

//@ requires true; pure     " // default assignable

//@ assignable \\everything;    "

//@ pure     " // default assignable

//@ assignable \\everything;    "

//@ public nullable model Object state;    "

//@ in state;    "

//@ assignable \\everything;    "

//@ public nullable model Object state;    "

//@ in state;    "

//@ pure     " // default assignable

//@ assignable \\everything;    "

//@ public nullable model Object state;    "

//@ in state;    "

//@ requires true;    " // default assignable

//@ assignable \\everything;    "

//@ public nullable model Object state;    "

//@ in state;    "

//@ requires true; pure     " // default assignable

//@ assignable \\everything;    "

//@ public nullable model Object state;    "

//@ in state;    "

//@ pure     "

//@ assignable \\everything;    "

//@ public nullable model Object state;    "

//@ in state;    "

//@ pure     "

//@ assignable \\everything;    "

/*@ spec_public */
//@ assignable \\everything;    "

/*@ spec_public */
//@ requires true;     " // default assignable

//@ assignable \\everything;    "

/*@ spec_public */
//@ pure     " // default assignable

//@ assignable \\everything;    "

/*@ spec_public */
//@ requires true; pure     " // default assignable

//@ assignable \\everything;    "

/*@ spec_public */
//@ pure     "

//@ assignable \\everything;    "

/*@ spec_public */
//@ pure     "

//@ assignable \\everything;    "

/*@ nullable_by_default */
//@ ensures \\result == ints.length;    "

//@ pure     "

//@ assert ints != null;     "

/*@ non_null*/
//@ assert i == args.length;     "

//@ assert i == 0;     "

//@ assert i == 1;     "

//@ assert i == 2;     "

//@ ensures \\result == (ints.length > 0 ? ints[0] : (int)ints.length);    "

//@ pure     "

//@ assert ints != null;     "

//@ assert i == 0;     "

//@ assert i == 2;     "

//@ assert i == 5;     "

//@ requires ints.length == 0 || ints[0] != null;    "

//@ ensures \\result == (ints.length > 0 ? ints[0] : (int)ints.length);    "

//@ pure     "

//@ assert ints != null;     "

//@ assert i == 0;     "

//@ assert i == 2;     "

//@ assert i == 5;     "

//@ assert !(b & bb);    "

//@ assert (b | bb);    "

//@ assert (b ^ bb);    "

//@ assert (b & bb);    " // FALSE

//@ requires iii == 10;    "

//@ assert \\old(iii) == 10;    "

//@ assert \\old(iii,a) == 10;    "

//@ assert \\old(iii,b) == 12;    "

//@ assert iii == 14;    "

/*@ ensures \\result == k; pure */
//@ requires k == 10;    "

//@ assert \\old(mm()) == 10;    "

//@ assert \\old(mm(),a) == 10;    "

//@ assert \\old(mm(),b) == 12;    "

//@ assert mm() == 14;    "

//@ old int kk = k; requires k == 5 && i > kk && i < 100 && i > -100; assignable k; ensures k == i+1; ensures kk == 5;    "

//@ also    "

//@ old int kk = k+1; requires k == 5 && i < kk && i < 100 && i > -100; assignable k; ensures k == i-1; ensures kk == 6;    "

//@ assert \\old(k,a) == 10;    "

//@ assert \\old(k,c) == 12;    "

//@ requires i > -10 && i < 10;    "

//@ assert i != i;    " // ERROR

//@ requires i > 0;    "

//@ requires i < 0;    "

//@ assert i != i;    "

//@ requires i > 0;    "

//@ ensures \\result > 0;    "

//@ requires i > -10 && i < 10;    "

//@ assert i < 0;    " // OK

//@ assert i >= 0;    " // OK

//@ requires i > -10 && i < 10;    "

//@ assert i < 0;    "  // false, since not in if

//@ assert i >= 0;    "

//@ requires i > -10 && i < 10;    "

//@ assert i > 0;    "  // false, since not in if

//@ assert i >= 0;    "

//@ old int kk = k;    "

//@ {| requires i < 10 && i > kk; assignable k; ensures k == i+1;     "

//@ also    "

//@    requires i > -10 && i < kk; assignable k; ensures k == i-1;     "

//@ |}    "

//@ ensures \\result == i>=0;     "

//@ pure    "

//@ assert (\\forall int i; 0<=i ; bb(i) : bb(i));    "

//@ assert (\\forall int i; 0<=i ; i>=-1 : i>=0, i<=0);    "

//@ pure    "

//@ assert (\\forall int i; 0<=i ; bb(i) : );    "

//@ assert (\\forall boolean i;  ; i : bb(i));    "

//@ assert 0 == (\\sum int i; 0<=i ; i : i);    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume 1 < a.length;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume 1 < a.length;    "

//@ assume i < a.length;    "

//@ public normal_behavior requires i >= -1;    "

//@ also public exceptional_behavior requires i < -1; signals_only RuntimeException;    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior requires i >= 0;    "

//@ also public exceptional_behavior requires i < 0; signals_only RuntimeException;    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume 1 < a.length;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume 1 < a.length;    "

//@ assume i < a.length;    "

//@ public normal_behavior requires i >= -1;    "

//@ also public exceptional_behavior requires i < -1; signals_only RuntimeException;    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior requires i >= 0;    "

//@ also public exceptional_behavior requires i < 0; signals_only RuntimeException;    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume 1 < a.length;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume 1 < a.length;    "

//@ assume i < a.length;    "

//@ public normal_behavior requires i >= -1;    "

//@ also public exceptional_behavior requires i < -1; signals_only RuntimeException;    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior requires i >= 0;    "

//@ also public exceptional_behavior requires i < 0; signals_only RuntimeException;    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i >= 0;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i >= 0;    "

//@ public normal_behavior requires 0 <= i && i <= a.length;    "

//@ also public exceptional_behavior requires i > a.length+1; signals_only RuntimeException;    "

//@ public normal_behavior requires 0 <= i && i < a.length;    "

//@ also public exceptional_behavior requires i < 0; signals_only RuntimeException;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i >= 0;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i >= 0;    "

//@ public normal_behavior requires 0 <= i && i <= a.length;    "

//@ also public exceptional_behavior requires i > a.length+1; signals_only RuntimeException;    "

//@ public normal_behavior requires 0 <= i && i < a.length;    "

//@ also public exceptional_behavior requires i < 0; signals_only RuntimeException;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i >= 0;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i >= 0;    "

//@ public normal_behavior requires 0 <= i && i <= a.length;    "

//@ also public exceptional_behavior requires i > a.length+1; signals_only RuntimeException;    "

//@ public normal_behavior requires 0 <= i && i < a.length;    "

//@ also public exceptional_behavior requires i < 0; signals_only RuntimeException;    "

//@ public normal_behavior    "

//@ public normal_behavior    "

//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only ArithmeticException;    "

//@ public normal_behavior requires a != 0;    "

//@ also public exceptional_behavior requires a == 0; signals_only ArithmeticException;    "

//@ invariant oo.length > 1;     "

//@ public normal_behavior    "

//@ public normal_behavior    "

//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only ArrayStoreException;    "

//@ public normal_behavior requires \\type(Integer) <: \\elemtype(\\typeof(ooo)) ;    "

//@ also public exceptional_behavior requires !(\\type(Integer) <: \\elemtype(\\typeof(ooo))); signals_only ArrayStoreException;    "

//@ assume ooo.length > 1 ;    "

/*@ public normal_behavior */
//@ public normal_behavior    "


//@ public normal_behavior    "


//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ public normal_behavior    "


//@ public normal_behavior    "


//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ public normal_behavior    "


//@ public normal_behavior    "


//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ public normal_behavior    "


//@ public normal_behavior    "


//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ public normal_behavior    "


//@ public normal_behavior    "


//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ public normal_behavior    "


//@ public normal_behavior    "


//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ public normal_behavior    "


//@ public normal_behavior    "


//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ public normal_behavior    "


//@ public normal_behavior    "


//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ public behavior signals_only A;    "


//@ public behavior signals_only A;    "


//@ public behavior signals_only A;    "

//@ also public exceptional_behavior requires false; signals_only A, NullPointerException;    "


//@ public behavior requires a != null; signals_only A;    "

//@ also public exceptional_behavior requires a == null; signals_only A, NullPointerException;    "


//@ public normal_behavior    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior requires i>0;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior requires i>0;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior requires i>0;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior    "


//@ public normal_behavior    "



//@ assume a == null & en != null;     "

/*@ assert a == null; */
//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ public normal_behavior    "

//@ public normal_behavior    "

//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only NegativeArraySizeException;    "

//@ public normal_behavior requires n >= 0;    "

//@ also public exceptional_behavior requires n < 0; signals_only NegativeArraySizeException;    "

//@ ensures \\result == (\\lbl BYTES Integer.BYTES);    "

//@ modifies \\everything;    "


//@ assume \    onnullelements(a);    "

//@ assume a.length > 1;    "

//@ assert a[0] != null;    "  // OK

//@ modifies \\everything;    "

//@ assume \    onnullelements(a);    "

//@ assert a != null;    "  // OK

//@ modifies \\everything;    "

//@ assume \    onnullelements(a);    "

//@ assert a == null;    "  // BAD

//@ modifies \\everything;    "

//@ assume a != null && a.length > 1;    "

//@ assert a[0] != null;    "  // BAD

//@ modifies \\everything;    "

//@ assume a != null && a.length == 0;    "

//@ assert \    onnullelements(a);    " // OK

//@ modifies \\everything;    "

//@ assume a != null && a.length == 0;    "

//@ assert (\\forall int i; 0<=i && i<a.length; a[i] != null);    " // OK

//@ requires \\elemtype(\\typeof(a)) == \\type(Object); modifies \\everything;    "

//@ assume a != null && a.length == 1;    "

//@ assert a[0] != null;    " // OK

//@ assert \    onnullelements(a);    " // OK

//@ modifies \\everything;    "

//@ assume a != null && a.length == 1;    "

//@ assume a[0] != null;    "

//@ assert \    onnullelements(a);    " // OK

//@ requires \\elemtype(\\typeof(a)) == \\type(Object); modifies \\everything;    "

//@ assume a != null && a.length == 2;    "

//@ assert \    onnullelements(a);    " // OK

//@ modifies \\everything;    "

//@ assume a != null && a.length == 2;    "

//@ assume a[0] != null;    "

//@ assume a[1] != null;    "

//@ assert \    onnullelements(a);    " // OK

//@ requires \\elemtype(\\typeof(a)) == \\type(Object); modifies \\everything;    "

//@ assume a != null && a.length == 3;    "

//@ assert \    onnullelements(a);    " // BAD

//@ requires \\elemtype(\\typeof(a)) == \\type(Object); modifies \\everything;    "

//@ assume \    onnullelements(a) && a.length == 3;    "

//@ assert \    onnullelements(a);    " // OK

//@ requires \\elemtype(\\typeof(a)) == \\type(Object); modifies \\everything;    "

//@ assume a != null && a.length == 3;    " // Line 75

//@ assert \    onnullelements(a);    " // BAD

//@ requires \\elemtype(\\typeof(a)) == \\type(Object); modifies \\everything;    "

//@ assume a != null && a.length == 3;    "

//@ assume \    onnullelements(a);    "

//@ assert \    onnullelements(a);    " // BAD

//@ modifies \\everything;    "

//@ assume a != null && a.length == 0;    "

//@ assert \    onnullelements(a);    "

//@ requires i == 5;    "

//@ modifies \\everything;    "

//@ assert \    ot_modified(i);    "  // OK

//@ modifies \\everything;    "

//@ assert \    ot_modified(i);    "  // BAD

//@ ghost public int gi;    "

//@ requires i == 5;    "

//@ modifies \\everything;    "

//@ assert \    ot_modified(i);    "  // OK

//@ modifies \\everything;    "

//@ assert \    ot_modified(i);    "  // BAD

//@ requires si == 5;    "

//@ modifies \\everything;    "

//@ assert \    ot_modified(si);    "  // OK

//@ modifies \\everything;    "

//@ assert \    ot_modified(si);    "  // BAD

//@ requires gi == 5;    "

//@ modifies \\everything;    "

//@ set gi = 5;    "

//@ assert \    ot_modified(gi);    "  // OK

//@ modifies \\everything;    "

//@ set gi = 5;    "

//@ assert \    ot_modified(gi);    "  // BAD


//@ requires t != null;    "

//@ modifies \\everything;    "

//@ assert \    ot_modified(t.i);    "  // OK

//@ requires t != null;    "

//@ modifies \\everything;    "

//@ assert \    ot_modified(t.i) ? true: true;    "  // BAD

//@ requires t == null;    "

//@ modifies \\everything;    "

//@ assert \    ot_modified(t.i) ? true: true;    "  // OK

//@ modifies \\everything;    "

//@ assert \    ot_modified(t.i) ? true: true;    "  // BAD

//@ requires i == 6;    "

//@ modifies \\everything;    "

//@ assert s == i;    "  // OK

//@ assert b == i;    "  // OK

//@ assert c == i;    "  // OK

//@ assert l == i;    "  // OK

//@ assert ii == i;    "  // OK

//@ assert i == (short)i;    "

//@ assert i == (long)i;    "

//@ assert i == (char)i;    "

//@ assert i == (byte)i;    "

//@ assert i == (int)i;    "

//@ requires i == 100000;    "

//@ modifies \\everything;    "

//@ assert s == i;    "

//@ requires i == 100000;    "

//@ modifies \\everything;    "

//@ assert i == (short)i;    " // BAD

//@ requires i == 100000;    "

//@ modifies \\everything;    "

//@ assert i == (byte)i;    "

//@ requires i == 100000;    "

//@ modifies \\everything;    "

//@ assert i == (char)i;    "

//@ requires i == 100000;    "

//@ modifies \\everything;    "

//@ assert b == i;    "

//@ requires i == 100000;    "

//@ modifies \\everything;    "

//@ assert c == i;    "

//@ modifies \\everything;    "


//@ assert 0 == (short)s;

//@ modifies \\everything;    "


//@ assert 0 == (int)s;

//@ modifies \\everything;    "


//@ assert 0L == (long)s;

//@ modifies \\everything;    "


//@ assert 0 == (byte)s;

//@ modifies \\everything;    "


//@ assert 0 == (char)s;

//@ modifies \\everything;    "


//@ assert (boolean)s;

//@ modifies \\everything;    "


//@ assert 0 == (double)s;

//@ modifies \\everything;    "


//@ assert 0.0 == (float)s;

//@ assignable \\everything;    "

//@ assignable \\everything;    "

//@ assignable i;    "

//@ assignable \\everything;    "

//@ assignable \    othing;    "

//@ assignable \\everything;    "

//@ assignable \\everything;    "

//@ requires true;     " // default assignable

//@ assignable \\everything;    "

//@ requires true; pure     " // default assignable

//@ assignable \\everything;    "

//@ pure     " // default assignable

//@ assignable \\everything;    "

//@ public nullable model Object state;    "

//@ in state;    "

//@ assignable \\everything;    "

//@ public nullable model Object state;    "

//@ in state;    "

//@ pure     " // default assignable

//@ assignable \\everything;    "

//@ public nullable model Object state;    "

//@ in state;    "

//@ requires true;    " // default assignable

//@ assignable \\everything;    "

//@ public nullable model Object state;    "

//@ in state;    "

//@ requires true; pure     " // default assignable

//@ assignable \\everything;    "

//@ public nullable model Object state;    "

//@ in state;    "

//@ pure     "

//@ assignable \\everything;    "

//@ public nullable model Object state;    "

//@ in state;    "

//@ pure     "

//@ assignable \\everything;    "

/*@ spec_public */
//@ assignable \\everything;    "

/*@ spec_public */
//@ requires true;     " // default assignable

//@ assignable \\everything;    "

/*@ spec_public */
//@ pure     " // default assignable

//@ assignable \\everything;    "

/*@ spec_public */
//@ requires true; pure     " // default assignable

//@ assignable \\everything;    "

/*@ spec_public */
//@ pure     "

//@ assignable \\everything;    "

/*@ spec_public */
//@ pure     "

//@ assignable \\everything;    "

/*@ nullable_by_default */
//@ ensures \\result == ints.length;    "

//@ pure     "

//@ assert ints != null;     "

/*@ non_null*/
//@ assert i == args.length;     "

//@ assert i == 0;     "

//@ assert i == 1;     "

//@ assert i == 2;     "

//@ ensures \\result == (ints.length > 0 ? ints[0] : (int)ints.length);    "

//@ pure     "

//@ assert ints != null;     "

//@ assert i == 0;     "

//@ assert i == 2;     "

//@ assert i == 5;     "

//@ requires ints.length == 0 || ints[0] != null;    "

//@ ensures \\result == (ints.length > 0 ? ints[0] : (int)ints.length);    "

//@ pure     "

//@ assert ints != null;     "

//@ assert i == 0;     "

//@ assert i == 2;     "

//@ assert i == 5;     "

//@ assert !(b & bb);    "

//@ assert (b | bb);    "

//@ assert (b ^ bb);    "

//@ assert (b & bb);    " // FALSE

//@ requires iii == 10;    "

//@ assert \\old(iii) == 10;    "

//@ assert \\old(iii,a) == 10;    "

//@ assert \\old(iii,b) == 12;    "

//@ assert iii == 14;    "

/*@ ensures \\result == k; pure */
//@ requires k == 10;    "

//@ assert \\old(mm()) == 10;    "

//@ assert \\old(mm(),a) == 10;    "

//@ assert \\old(mm(),b) == 12;    "

//@ assert mm() == 14;    "

//@ old int kk = k; requires k == 5 && i > kk && i < 100 && i > -100; assignable k; ensures k == i+1; ensures kk == 5;    "

//@ also    "

//@ old int kk = k+1; requires k == 5 && i < kk && i < 100 && i > -100; assignable k; ensures k == i-1; ensures kk == 6;    "

//@ assert \\old(k,a) == 10;    "

//@ assert \\old(k,c) == 12;    "

//@ requires i > -10 && i < 10;    "

//@ assert i != i;    " // ERROR

//@ requires i > 0;    "

//@ requires i < 0;    "

//@ assert i != i;    "

//@ requires i > 0;    "

//@ ensures \\result > 0;    "

//@ requires i > -10 && i < 10;    "

//@ assert i < 0;    " // OK

//@ assert i >= 0;    " // OK

//@ requires i > -10 && i < 10;    "

//@ assert i < 0;    "  // false, since not in if

//@ assert i >= 0;    "

//@ requires i > -10 && i < 10;    "

//@ assert i > 0;    "  // false, since not in if

//@ assert i >= 0;    "

//@ old int kk = k;    "

//@ {| requires i < 10 && i > kk; assignable k; ensures k == i+1;     "

//@ also    "

//@    requires i > -10 && i < kk; assignable k; ensures k == i-1;     "

//@ |}    "

//@ ensures \\result == i>=0;     "

//@ pure    "

//@ assert (\\forall int i; 0<=i ; bb(i) : bb(i));    "

//@ assert (\\forall int i; 0<=i ; i>=-1 : i>=0, i<=0);    "

//@ pure    "

//@ assert (\\forall int i; 0<=i ; bb(i) : );    "

//@ assert (\\forall boolean i;  ; i : bb(i));    "

//@ assert 0 == (\\sum int i; 0<=i ; i : i);    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume 1 < a.length;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume 1 < a.length;    "

//@ assume i < a.length;    "

//@ public normal_behavior requires i >= -1;    "

//@ also public exceptional_behavior requires i < -1; signals_only RuntimeException;    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior requires i >= 0;    "

//@ also public exceptional_behavior requires i < 0; signals_only RuntimeException;    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume 1 < a.length;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume 1 < a.length;    "

//@ assume i < a.length;    "

//@ public normal_behavior requires i >= -1;    "

//@ also public exceptional_behavior requires i < -1; signals_only RuntimeException;    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior requires i >= 0;    "

//@ also public exceptional_behavior requires i < 0; signals_only RuntimeException;    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume 1 < a.length;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume 1 < a.length;    "

//@ assume i < a.length;    "

//@ public normal_behavior requires i >= -1;    "

//@ also public exceptional_behavior requires i < -1; signals_only RuntimeException;    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior requires i >= 0;    "

//@ also public exceptional_behavior requires i < 0; signals_only RuntimeException;    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i >= 0;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i >= 0;    "

//@ public normal_behavior requires 0 <= i && i <= a.length;    "

//@ also public exceptional_behavior requires i > a.length+1; signals_only RuntimeException;    "

//@ public normal_behavior requires 0 <= i && i < a.length;    "

//@ also public exceptional_behavior requires i < 0; signals_only RuntimeException;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i >= 0;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i >= 0;    "

//@ public normal_behavior requires 0 <= i && i <= a.length;    "

//@ also public exceptional_behavior requires i > a.length+1; signals_only RuntimeException;    "

//@ public normal_behavior requires 0 <= i && i < a.length;    "

//@ also public exceptional_behavior requires i < 0; signals_only RuntimeException;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i >= 0;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i >= 0;    "

//@ public normal_behavior requires 0 <= i && i <= a.length;    "

//@ also public exceptional_behavior requires i > a.length+1; signals_only RuntimeException;    "

//@ public normal_behavior requires 0 <= i && i < a.length;    "

//@ also public exceptional_behavior requires i < 0; signals_only RuntimeException;    "

//@ public normal_behavior    "

//@ public normal_behavior    "

//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only ArithmeticException;    "

//@ public normal_behavior requires a != 0;    "

//@ also public exceptional_behavior requires a == 0; signals_only ArithmeticException;    "

//@ invariant oo.length > 1;     "

//@ public normal_behavior    "

//@ public normal_behavior    "

//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only ArrayStoreException;    "

//@ public normal_behavior requires \\type(Integer) <: \\elemtype(\\typeof(ooo)) ;    "

//@ also public exceptional_behavior requires !(\\type(Integer) <: \\elemtype(\\typeof(ooo))); signals_only ArrayStoreException;    "

//@ assume ooo.length > 1 ;    "

/*@ public normal_behavior */
//@ public normal_behavior    "


//@ public normal_behavior    "


//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ public normal_behavior    "


//@ public normal_behavior    "


//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ public normal_behavior    "


//@ public normal_behavior    "


//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ public normal_behavior    "


//@ public normal_behavior    "


//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ public normal_behavior    "


//@ public normal_behavior    "


//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ public normal_behavior    "


//@ public normal_behavior    "


//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ public normal_behavior    "


//@ public normal_behavior    "


//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ public normal_behavior    "


//@ public normal_behavior    "


//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ public behavior signals_only A;    "


//@ public behavior signals_only A;    "


//@ public behavior signals_only A;    "

//@ also public exceptional_behavior requires false; signals_only A, NullPointerException;    "


//@ public behavior requires a != null; signals_only A;    "

//@ also public exceptional_behavior requires a == null; signals_only A, NullPointerException;    "


//@ public normal_behavior    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior requires i>0;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior requires i>0;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior requires i>0;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior    "


//@ public normal_behavior    "



//@ assume a == null & en != null;     "

/*@ assert a == null; */
//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ public normal_behavior    "

//@ public normal_behavior    "

//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only NegativeArraySizeException;    "

//@ public normal_behavior requires n >= 0;    "

//@ also public exceptional_behavior requires n < 0; signals_only NegativeArraySizeException;    "

//@ ensures \\result == (\\lbl BYTES Integer.BYTES);    "

//@ modifies \\everything;    "


//@ assume \    onnullelements(a);    "

//@ assume a.length > 1;    "

//@ assert a[0] != null;    "  // OK

//@ modifies \\everything;    "

//@ assume \    onnullelements(a);    "

//@ assert a != null;    "  // OK

//@ modifies \\everything;    "

//@ assume \    onnullelements(a);    "

//@ assert a == null;    "  // BAD

//@ modifies \\everything;    "

//@ assume a != null && a.length > 1;    "

//@ assert a[0] != null;    "  // BAD

//@ modifies \\everything;    "

//@ assume a != null && a.length == 0;    "

//@ assert \    onnullelements(a);    " // OK

//@ modifies \\everything;    "

//@ assume a != null && a.length == 0;    "

//@ assert (\\forall int i; 0<=i && i<a.length; a[i] != null);    " // OK

//@ requires \\elemtype(\\typeof(a)) == \\type(Object); modifies \\everything;    "

//@ assume a != null && a.length == 1;    "

//@ assert a[0] != null;    " // OK

//@ assert \    onnullelements(a);    " // OK

//@ modifies \\everything;    "

//@ assume a != null && a.length == 1;    "

//@ assume a[0] != null;    "

//@ assert \    onnullelements(a);    " // OK

//@ requires \\elemtype(\\typeof(a)) == \\type(Object); modifies \\everything;    "

//@ assume a != null && a.length == 2;    "

//@ assert \    onnullelements(a);    " // OK

//@ modifies \\everything;    "

//@ assume a != null && a.length == 2;    "

//@ assume a[0] != null;    "

//@ assume a[1] != null;    "

//@ assert \    onnullelements(a);    " // OK

//@ requires \\elemtype(\\typeof(a)) == \\type(Object); modifies \\everything;    "

//@ assume a != null && a.length == 3;    "

//@ assert \    onnullelements(a);    " // BAD

//@ requires \\elemtype(\\typeof(a)) == \\type(Object); modifies \\everything;    "

//@ assume \    onnullelements(a) && a.length == 3;    "

//@ assert \    onnullelements(a);    " // OK

//@ requires \\elemtype(\\typeof(a)) == \\type(Object); modifies \\everything;    "

//@ assume a != null && a.length == 3;    " // Line 75

//@ assert \    onnullelements(a);    " // BAD

//@ requires \\elemtype(\\typeof(a)) == \\type(Object); modifies \\everything;    "

//@ assume a != null && a.length == 3;    "

//@ assume \    onnullelements(a);    "

//@ assert \    onnullelements(a);    " // BAD

//@ modifies \\everything;    "

//@ assume a != null && a.length == 0;    "

//@ assert \    onnullelements(a);    "

//@ requires i == 5;    "

//@ modifies \\everything;    "

//@ assert \    ot_modified(i);    "  // OK

//@ modifies \\everything;    "

//@ assert \    ot_modified(i);    "  // BAD

//@ ghost public int gi;    "

//@ requires i == 5;    "

//@ modifies \\everything;    "

//@ assert \    ot_modified(i);    "  // OK

//@ modifies \\everything;    "

//@ assert \    ot_modified(i);    "  // BAD

//@ requires si == 5;    "

//@ modifies \\everything;    "

//@ assert \    ot_modified(si);    "  // OK

//@ modifies \\everything;    "

//@ assert \    ot_modified(si);    "  // BAD

//@ requires gi == 5;    "

//@ modifies \\everything;    "

//@ set gi = 5;    "

//@ assert \    ot_modified(gi);    "  // OK

//@ modifies \\everything;    "

//@ set gi = 5;    "

//@ assert \    ot_modified(gi);    "  // BAD


//@ requires t != null;    "

//@ modifies \\everything;    "

//@ assert \    ot_modified(t.i);    "  // OK

//@ requires t != null;    "

//@ modifies \\everything;    "

//@ assert \    ot_modified(t.i) ? true: true;    "  // BAD

//@ requires t == null;    "

//@ modifies \\everything;    "

//@ assert \    ot_modified(t.i) ? true: true;    "  // OK

//@ modifies \\everything;    "

//@ assert \    ot_modified(t.i) ? true: true;    "  // BAD

//@ requires i == 6;    "

//@ modifies \\everything;    "

//@ assert s == i;    "  // OK

//@ assert b == i;    "  // OK

//@ assert c == i;    "  // OK

//@ assert l == i;    "  // OK

//@ assert ii == i;    "  // OK

//@ assert i == (short)i;    "

//@ assert i == (long)i;    "

//@ assert i == (char)i;    "

//@ assert i == (byte)i;    "

//@ assert i == (int)i;    "

//@ requires i == 100000;    "

//@ modifies \\everything;    "

//@ assert s == i;    "

//@ requires i == 100000;    "

//@ modifies \\everything;    "

//@ assert i == (short)i;    " // BAD

//@ requires i == 100000;    "

//@ modifies \\everything;    "

//@ assert i == (byte)i;    "

//@ requires i == 100000;    "

//@ modifies \\everything;    "

//@ assert i == (char)i;    "

//@ requires i == 100000;    "

//@ modifies \\everything;    "

//@ assert b == i;    "

//@ requires i == 100000;    "

//@ modifies \\everything;    "

//@ assert c == i;    "

//@ modifies \\everything;    "


//@ assert 0 == (short)s;

//@ modifies \\everything;    "


//@ assert 0 == (int)s;

//@ modifies \\everything;    "


//@ assert 0L == (long)s;

//@ modifies \\everything;    "


//@ assert 0 == (byte)s;

//@ modifies \\everything;    "


//@ assert 0 == (char)s;

//@ modifies \\everything;    "


//@ assert (boolean)s;

//@ modifies \\everything;    "


//@ assert 0 == (double)s;

//@ modifies \\everything;    "


//@ assert 0.0 == (float)s;

//@ assignable \\everything;    "

//@ assignable \\everything;    "

//@ assignable i;    "

//@ assignable \\everything;    "

//@ assignable \    othing;    "

//@ assignable \\everything;    "

//@ assignable \\everything;    "

//@ requires true;     " // default assignable

//@ assignable \\everything;    "

//@ requires true; pure     " // default assignable

//@ assignable \\everything;    "

//@ pure     " // default assignable

//@ assignable \\everything;    "

//@ public nullable model Object state;    "

//@ in state;    "

//@ assignable \\everything;    "

//@ public nullable model Object state;    "

//@ in state;    "

//@ pure     " // default assignable

//@ assignable \\everything;    "

//@ public nullable model Object state;    "

//@ in state;    "

//@ requires true;    " // default assignable

//@ assignable \\everything;    "

//@ public nullable model Object state;    "

//@ in state;    "

//@ requires true; pure     " // default assignable

//@ assignable \\everything;    "

//@ public nullable model Object state;    "

//@ in state;    "

//@ pure     "

//@ assignable \\everything;    "

//@ public nullable model Object state;    "

//@ in state;    "

//@ pure     "

//@ assignable \\everything;    "

/*@ spec_public */
//@ assignable \\everything;    "

/*@ spec_public */
//@ requires true;     " // default assignable

//@ assignable \\everything;    "

/*@ spec_public */
//@ pure     " // default assignable

//@ assignable \\everything;    "

/*@ spec_public */
//@ requires true; pure     " // default assignable

//@ assignable \\everything;    "

/*@ spec_public */
//@ pure     "

//@ assignable \\everything;    "

/*@ spec_public */
//@ pure     "

//@ assignable \\everything;    "

/*@ nullable_by_default */
//@ ensures \\result == ints.length;    "

//@ pure     "

//@ assert ints != null;     "

/*@ non_null*/
//@ assert i == args.length;     "

//@ assert i == 0;     "

//@ assert i == 1;     "

//@ assert i == 2;     "

//@ ensures \\result == (ints.length > 0 ? ints[0] : (int)ints.length);    "

//@ pure     "

//@ assert ints != null;     "

//@ assert i == 0;     "

//@ assert i == 2;     "

//@ assert i == 5;     "

//@ requires ints.length == 0 || ints[0] != null;    "

//@ ensures \\result == (ints.length > 0 ? ints[0] : (int)ints.length);    "

//@ pure     "

//@ assert ints != null;     "

//@ assert i == 0;     "

//@ assert i == 2;     "

//@ assert i == 5;     "

//@ assert !(b & bb);    "

//@ assert (b | bb);    "

//@ assert (b ^ bb);    "

//@ assert (b & bb);    " // FALSE

//@ requires iii == 10;    "

//@ assert \\old(iii) == 10;    "

//@ assert \\old(iii,a) == 10;    "

//@ assert \\old(iii,b) == 12;    "

//@ assert iii == 14;    "

/*@ ensures \\result == k; pure */
//@ requires k == 10;    "

//@ assert \\old(mm()) == 10;    "

//@ assert \\old(mm(),a) == 10;    "

//@ assert \\old(mm(),b) == 12;    "

//@ assert mm() == 14;    "

//@ old int kk = k; requires k == 5 && i > kk && i < 100 && i > -100; assignable k; ensures k == i+1; ensures kk == 5;    "

//@ also    "

//@ old int kk = k+1; requires k == 5 && i < kk && i < 100 && i > -100; assignable k; ensures k == i-1; ensures kk == 6;    "

//@ assert \\old(k,a) == 10;    "

//@ assert \\old(k,c) == 12;    "

//@ requires i > -10 && i < 10;    "

//@ assert i != i;    " // ERROR

//@ requires i > 0;    "

//@ requires i < 0;    "

//@ assert i != i;    "

//@ requires i > 0;    "

//@ ensures \\result > 0;    "

//@ requires i > -10 && i < 10;    "

//@ assert i < 0;    " // OK

//@ assert i >= 0;    " // OK

//@ requires i > -10 && i < 10;    "

//@ assert i < 0;    "  // false, since not in if

//@ assert i >= 0;    "

//@ requires i > -10 && i < 10;    "

//@ assert i > 0;    "  // false, since not in if

//@ assert i >= 0;    "

//@ old int kk = k;    "

//@ {| requires i < 10 && i > kk; assignable k; ensures k == i+1;     "

//@ also    "

//@    requires i > -10 && i < kk; assignable k; ensures k == i-1;     "

//@ |}    "

//@ ensures \\result == i>=0;     "

//@ pure    "

//@ assert (\\forall int i; 0<=i ; bb(i) : bb(i));    "

//@ assert (\\forall int i; 0<=i ; i>=-1 : i>=0, i<=0);    "

//@ pure    "

//@ assert (\\forall int i; 0<=i ; bb(i) : );    "

//@ assert (\\forall boolean i;  ; i : bb(i));    "

//@ assert 0 == (\\sum int i; 0<=i ; i : i);    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume 1 < a.length;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume 1 < a.length;    "

//@ assume i < a.length;    "

//@ public normal_behavior requires i >= -1;    "

//@ also public exceptional_behavior requires i < -1; signals_only RuntimeException;    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior requires i >= 0;    "

//@ also public exceptional_behavior requires i < 0; signals_only RuntimeException;    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume 1 < a.length;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume 1 < a.length;    "

//@ assume i < a.length;    "

//@ public normal_behavior requires i >= -1;    "

//@ also public exceptional_behavior requires i < -1; signals_only RuntimeException;    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior requires i >= 0;    "

//@ also public exceptional_behavior requires i < 0; signals_only RuntimeException;    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume 1 < a.length;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume 1 < a.length;    "

//@ assume i < a.length;    "

//@ public normal_behavior requires i >= -1;    "

//@ also public exceptional_behavior requires i < -1; signals_only RuntimeException;    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior requires i >= 0;    "

//@ also public exceptional_behavior requires i < 0; signals_only RuntimeException;    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i >= 0;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i >= 0;    "

//@ public normal_behavior requires 0 <= i && i <= a.length;    "

//@ also public exceptional_behavior requires i > a.length+1; signals_only RuntimeException;    "

//@ public normal_behavior requires 0 <= i && i < a.length;    "

//@ also public exceptional_behavior requires i < 0; signals_only RuntimeException;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i >= 0;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i >= 0;    "

//@ public normal_behavior requires 0 <= i && i <= a.length;    "

//@ also public exceptional_behavior requires i > a.length+1; signals_only RuntimeException;    "

//@ public normal_behavior requires 0 <= i && i < a.length;    "

//@ also public exceptional_behavior requires i < 0; signals_only RuntimeException;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i >= 0;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i >= 0;    "

//@ public normal_behavior requires 0 <= i && i <= a.length;    "

//@ also public exceptional_behavior requires i > a.length+1; signals_only RuntimeException;    "

//@ public normal_behavior requires 0 <= i && i < a.length;    "

//@ also public exceptional_behavior requires i < 0; signals_only RuntimeException;    "

//@ public normal_behavior    "

//@ public normal_behavior    "

//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only ArithmeticException;    "

//@ public normal_behavior requires a != 0;    "

//@ also public exceptional_behavior requires a == 0; signals_only ArithmeticException;    "

//@ invariant oo.length > 1;     "

//@ public normal_behavior    "

//@ public normal_behavior    "

//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only ArrayStoreException;    "

//@ public normal_behavior requires \\type(Integer) <: \\elemtype(\\typeof(ooo)) ;    "

//@ also public exceptional_behavior requires !(\\type(Integer) <: \\elemtype(\\typeof(ooo))); signals_only ArrayStoreException;    "

//@ assume ooo.length > 1 ;    "

/*@ public normal_behavior */
//@ public normal_behavior    "


//@ public normal_behavior    "


//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ public normal_behavior    "


//@ public normal_behavior    "


//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ public normal_behavior    "


//@ public normal_behavior    "


//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ public normal_behavior    "


//@ public normal_behavior    "


//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ public normal_behavior    "


//@ public normal_behavior    "


//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ public normal_behavior    "


//@ public normal_behavior    "


//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ public normal_behavior    "


//@ public normal_behavior    "


//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ public normal_behavior    "


//@ public normal_behavior    "


//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ public behavior signals_only A;    "


//@ public behavior signals_only A;    "


//@ public behavior signals_only A;    "

//@ also public exceptional_behavior requires false; signals_only A, NullPointerException;    "


//@ public behavior requires a != null; signals_only A;    "

//@ also public exceptional_behavior requires a == null; signals_only A, NullPointerException;    "


//@ public normal_behavior    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior requires i>0;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior requires i>0;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior requires i>0;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior    "


//@ public normal_behavior    "



//@ assume a == null & en != null;     "

/*@ assert a == null; */
//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ public normal_behavior    "

//@ public normal_behavior    "

//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only NegativeArraySizeException;    "

//@ public normal_behavior requires n >= 0;    "

//@ also public exceptional_behavior requires n < 0; signals_only NegativeArraySizeException;    "

//@ ensures \\result == (\\lbl BYTES Integer.BYTES);    "

//@ modifies \\everything;    "


//@ assume \    onnullelements(a);    "

//@ assume a.length > 1;    "

//@ assert a[0] != null;    "  // OK

//@ modifies \\everything;    "

//@ assume \    onnullelements(a);    "

//@ assert a != null;    "  // OK

//@ modifies \\everything;    "

//@ assume \    onnullelements(a);    "

//@ assert a == null;    "  // BAD

//@ modifies \\everything;    "

//@ assume a != null && a.length > 1;    "

//@ assert a[0] != null;    "  // BAD

//@ modifies \\everything;    "

//@ assume a != null && a.length == 0;    "

//@ assert \    onnullelements(a);    " // OK

//@ modifies \\everything;    "

//@ assume a != null && a.length == 0;    "

//@ assert (\\forall int i; 0<=i && i<a.length; a[i] != null);    " // OK

//@ requires \\elemtype(\\typeof(a)) == \\type(Object); modifies \\everything;    "

//@ assume a != null && a.length == 1;    "

//@ assert a[0] != null;    " // OK

//@ assert \    onnullelements(a);    " // OK

//@ modifies \\everything;    "

//@ assume a != null && a.length == 1;    "

//@ assume a[0] != null;    "

//@ assert \    onnullelements(a);    " // OK

//@ requires \\elemtype(\\typeof(a)) == \\type(Object); modifies \\everything;    "

//@ assume a != null && a.length == 2;    "

//@ assert \    onnullelements(a);    " // OK

//@ modifies \\everything;    "

//@ assume a != null && a.length == 2;    "

//@ assume a[0] != null;    "

//@ assume a[1] != null;    "

//@ assert \    onnullelements(a);    " // OK

//@ requires \\elemtype(\\typeof(a)) == \\type(Object); modifies \\everything;    "

//@ assume a != null && a.length == 3;    "

//@ assert \    onnullelements(a);    " // BAD

//@ requires \\elemtype(\\typeof(a)) == \\type(Object); modifies \\everything;    "

//@ assume \    onnullelements(a) && a.length == 3;    "

//@ assert \    onnullelements(a);    " // OK

//@ requires \\elemtype(\\typeof(a)) == \\type(Object); modifies \\everything;    "

//@ assume a != null && a.length == 3;    " // Line 75

//@ assert \    onnullelements(a);    " // BAD

//@ requires \\elemtype(\\typeof(a)) == \\type(Object); modifies \\everything;    "

//@ assume a != null && a.length == 3;    "

//@ assume \    onnullelements(a);    "

//@ assert \    onnullelements(a);    " // BAD

//@ modifies \\everything;    "

//@ assume a != null && a.length == 0;    "

//@ assert \    onnullelements(a);    "

//@ requires i == 5;    "

//@ modifies \\everything;    "

//@ assert \    ot_modified(i);    "  // OK

//@ modifies \\everything;    "

//@ assert \    ot_modified(i);    "  // BAD

//@ ghost public int gi;    "

//@ requires i == 5;    "

//@ modifies \\everything;    "

//@ assert \    ot_modified(i);    "  // OK

//@ modifies \\everything;    "

//@ assert \    ot_modified(i);    "  // BAD

//@ requires si == 5;    "

//@ modifies \\everything;    "

//@ assert \    ot_modified(si);    "  // OK

//@ modifies \\everything;    "

//@ assert \    ot_modified(si);    "  // BAD

//@ requires gi == 5;    "

//@ modifies \\everything;    "

//@ set gi = 5;    "

//@ assert \    ot_modified(gi);    "  // OK

//@ modifies \\everything;    "

//@ set gi = 5;    "

//@ assert \    ot_modified(gi);    "  // BAD


//@ requires t != null;    "

//@ modifies \\everything;    "

//@ assert \    ot_modified(t.i);    "  // OK

//@ requires t != null;    "

//@ modifies \\everything;    "

//@ assert \    ot_modified(t.i) ? true: true;    "  // BAD

//@ requires t == null;    "

//@ modifies \\everything;    "

//@ assert \    ot_modified(t.i) ? true: true;    "  // OK

//@ modifies \\everything;    "

//@ assert \    ot_modified(t.i) ? true: true;    "  // BAD

//@ requires i == 6;    "

//@ modifies \\everything;    "

//@ assert s == i;    "  // OK

//@ assert b == i;    "  // OK

//@ assert c == i;    "  // OK

//@ assert l == i;    "  // OK

//@ assert ii == i;    "  // OK

//@ assert i == (short)i;    "

//@ assert i == (long)i;    "

//@ assert i == (char)i;    "

//@ assert i == (byte)i;    "

//@ assert i == (int)i;    "

//@ requires i == 100000;    "

//@ modifies \\everything;    "

//@ assert s == i;    "

//@ requires i == 100000;    "

//@ modifies \\everything;    "

//@ assert i == (short)i;    " // BAD

//@ requires i == 100000;    "

//@ modifies \\everything;    "

//@ assert i == (byte)i;    "

//@ requires i == 100000;    "

//@ modifies \\everything;    "

//@ assert i == (char)i;    "

//@ requires i == 100000;    "

//@ modifies \\everything;    "

//@ assert b == i;    "

//@ requires i == 100000;    "

//@ modifies \\everything;    "

//@ assert c == i;    "

//@ modifies \\everything;    "


//@ assert 0 == (short)s;

//@ modifies \\everything;    "


//@ assert 0 == (int)s;

//@ modifies \\everything;    "


//@ assert 0L == (long)s;

//@ modifies \\everything;    "


//@ assert 0 == (byte)s;

//@ modifies \\everything;    "


//@ assert 0 == (char)s;

//@ modifies \\everything;    "


//@ assert (boolean)s;

//@ modifies \\everything;    "


//@ assert 0 == (double)s;

//@ modifies \\everything;    "


//@ assert 0.0 == (float)s;

//@ assignable \\everything;    "

//@ assignable \\everything;    "

//@ assignable i;    "

//@ assignable \\everything;    "

//@ assignable \    othing;    "

//@ assignable \\everything;    "

//@ assignable \\everything;    "

//@ requires true;     " // default assignable

//@ assignable \\everything;    "

//@ requires true; pure     " // default assignable

//@ assignable \\everything;    "

//@ pure     " // default assignable

//@ assignable \\everything;    "

//@ public nullable model Object state;    "

//@ in state;    "

//@ assignable \\everything;    "

//@ public nullable model Object state;    "

//@ in state;    "

//@ pure     " // default assignable

//@ assignable \\everything;    "

//@ public nullable model Object state;    "

//@ in state;    "

//@ requires true;    " // default assignable

//@ assignable \\everything;    "

//@ public nullable model Object state;    "

//@ in state;    "

//@ requires true; pure     " // default assignable

//@ assignable \\everything;    "

//@ public nullable model Object state;    "

//@ in state;    "

//@ pure     "

//@ assignable \\everything;    "

//@ public nullable model Object state;    "

//@ in state;    "

//@ pure     "

//@ assignable \\everything;    "

/*@ spec_public */
//@ assignable \\everything;    "

/*@ spec_public */
//@ requires true;     " // default assignable

//@ assignable \\everything;    "

/*@ spec_public */
//@ pure     " // default assignable

//@ assignable \\everything;    "

/*@ spec_public */
//@ requires true; pure     " // default assignable

//@ assignable \\everything;    "

/*@ spec_public */
//@ pure     "

//@ assignable \\everything;    "

/*@ spec_public */
//@ pure     "

//@ assignable \\everything;    "

/*@ nullable_by_default */
//@ ensures \\result == ints.length;    "

//@ pure     "

//@ assert ints != null;     "

/*@ non_null*/
//@ assert i == args.length;     "

//@ assert i == 0;     "

//@ assert i == 1;     "

//@ assert i == 2;     "

//@ ensures \\result == (ints.length > 0 ? ints[0] : (int)ints.length);    "

//@ pure     "

//@ assert ints != null;     "

//@ assert i == 0;     "

//@ assert i == 2;     "

//@ assert i == 5;     "

//@ requires ints.length == 0 || ints[0] != null;    "

//@ ensures \\result == (ints.length > 0 ? ints[0] : (int)ints.length);    "

//@ pure     "

//@ assert ints != null;     "

//@ assert i == 0;     "

//@ assert i == 2;     "

//@ assert i == 5;     "

//@ assert !(b & bb);    "

//@ assert (b | bb);    "

//@ assert (b ^ bb);    "

//@ assert (b & bb);    " // FALSE

//@ requires iii == 10;    "

//@ assert \\old(iii) == 10;    "

//@ assert \\old(iii,a) == 10;    "

//@ assert \\old(iii,b) == 12;    "

//@ assert iii == 14;    "

/*@ ensures \\result == k; pure */
//@ requires k == 10;    "

//@ assert \\old(mm()) == 10;    "

//@ assert \\old(mm(),a) == 10;    "

//@ assert \\old(mm(),b) == 12;    "

//@ assert mm() == 14;    "

//@ old int kk = k; requires k == 5 && i > kk && i < 100 && i > -100; assignable k; ensures k == i+1; ensures kk == 5;    "

//@ also    "

//@ old int kk = k+1; requires k == 5 && i < kk && i < 100 && i > -100; assignable k; ensures k == i-1; ensures kk == 6;    "

//@ assert \\old(k,a) == 10;    "

//@ assert \\old(k,c) == 12;    "

//@ requires i > -10 && i < 10;    "

//@ assert i != i;    " // ERROR

//@ requires i > 0;    "

//@ requires i < 0;    "

//@ assert i != i;    "

//@ requires i > 0;    "

//@ ensures \\result > 0;    "

//@ requires i > -10 && i < 10;    "

//@ assert i < 0;    " // OK

//@ assert i >= 0;    " // OK

//@ requires i > -10 && i < 10;    "

//@ assert i < 0;    "  // false, since not in if

//@ assert i >= 0;    "

//@ requires i > -10 && i < 10;    "

//@ assert i > 0;    "  // false, since not in if

//@ assert i >= 0;    "

//@ old int kk = k;    "

//@ {| requires i < 10 && i > kk; assignable k; ensures k == i+1;     "

//@ also    "

//@    requires i > -10 && i < kk; assignable k; ensures k == i-1;     "

//@ |}    "

//@ ensures \\result == i>=0;     "

//@ pure    "

//@ assert (\\forall int i; 0<=i ; bb(i) : bb(i));    "

//@ assert (\\forall int i; 0<=i ; i>=-1 : i>=0, i<=0);    "

//@ pure    "

//@ assert (\\forall int i; 0<=i ; bb(i) : );    "

//@ assert (\\forall boolean i;  ; i : bb(i));    "

//@ assert 0 == (\\sum int i; 0<=i ; i : i);    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume 1 < a.length;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume 1 < a.length;    "

//@ assume i < a.length;    "

//@ public normal_behavior requires i >= -1;    "

//@ also public exceptional_behavior requires i < -1; signals_only RuntimeException;    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior requires i >= 0;    "

//@ also public exceptional_behavior requires i < 0; signals_only RuntimeException;    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume 1 < a.length;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume 1 < a.length;    "

//@ assume i < a.length;    "

//@ public normal_behavior requires i >= -1;    "

//@ also public exceptional_behavior requires i < -1; signals_only RuntimeException;    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior requires i >= 0;    "

//@ also public exceptional_behavior requires i < 0; signals_only RuntimeException;    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume 1 < a.length;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume 1 < a.length;    "

//@ assume i < a.length;    "

//@ public normal_behavior requires i >= -1;    "

//@ also public exceptional_behavior requires i < -1; signals_only RuntimeException;    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior requires i >= 0;    "

//@ also public exceptional_behavior requires i < 0; signals_only RuntimeException;    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i >= 0;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i >= 0;    "

//@ public normal_behavior requires 0 <= i && i <= a.length;    "

//@ also public exceptional_behavior requires i > a.length+1; signals_only RuntimeException;    "

//@ public normal_behavior requires 0 <= i && i < a.length;    "

//@ also public exceptional_behavior requires i < 0; signals_only RuntimeException;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i >= 0;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i >= 0;    "

//@ public normal_behavior requires 0 <= i && i <= a.length;    "

//@ also public exceptional_behavior requires i > a.length+1; signals_only RuntimeException;    "

//@ public normal_behavior requires 0 <= i && i < a.length;    "

//@ also public exceptional_behavior requires i < 0; signals_only RuntimeException;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i >= 0;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i >= 0;    "

//@ public normal_behavior requires 0 <= i && i <= a.length;    "

//@ also public exceptional_behavior requires i > a.length+1; signals_only RuntimeException;    "

//@ public normal_behavior requires 0 <= i && i < a.length;    "

//@ also public exceptional_behavior requires i < 0; signals_only RuntimeException;    "

//@ public normal_behavior    "

//@ public normal_behavior    "

//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only ArithmeticException;    "

//@ public normal_behavior requires a != 0;    "

//@ also public exceptional_behavior requires a == 0; signals_only ArithmeticException;    "

//@ invariant oo.length > 1;     "

//@ public normal_behavior    "

//@ public normal_behavior    "

//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only ArrayStoreException;    "

//@ public normal_behavior requires \\type(Integer) <: \\elemtype(\\typeof(ooo)) ;    "

//@ also public exceptional_behavior requires !(\\type(Integer) <: \\elemtype(\\typeof(ooo))); signals_only ArrayStoreException;    "

//@ assume ooo.length > 1 ;    "

/*@ public normal_behavior */
//@ public normal_behavior    "


//@ public normal_behavior    "


//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ public normal_behavior    "


//@ public normal_behavior    "


//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ public normal_behavior    "


//@ public normal_behavior    "


//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ public normal_behavior    "


//@ public normal_behavior    "


//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ public normal_behavior    "


//@ public normal_behavior    "


//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ public normal_behavior    "


//@ public normal_behavior    "


//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ public normal_behavior    "


//@ public normal_behavior    "


//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ public normal_behavior    "


//@ public normal_behavior    "


//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ public behavior signals_only A;    "


//@ public behavior signals_only A;    "


//@ public behavior signals_only A;    "

//@ also public exceptional_behavior requires false; signals_only A, NullPointerException;    "


//@ public behavior requires a != null; signals_only A;    "

//@ also public exceptional_behavior requires a == null; signals_only A, NullPointerException;    "


//@ public normal_behavior    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior requires i>0;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior requires i>0;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior requires i>0;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior    "


//@ public normal_behavior    "



//@ assume a == null & en != null;     "

/*@ assert a == null; */
//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ public normal_behavior    "

//@ public normal_behavior    "

//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only NegativeArraySizeException;    "

//@ public normal_behavior requires n >= 0;    "

//@ also public exceptional_behavior requires n < 0; signals_only NegativeArraySizeException;    "

//@ ensures \\result == (\\lbl BYTES Integer.BYTES);    "

//@ modifies \\everything;    "


//@ assume \    onnullelements(a);    "

//@ assume a.length > 1;    "

//@ assert a[0] != null;    "  // OK

//@ modifies \\everything;    "

//@ assume \    onnullelements(a);    "

//@ assert a != null;    "  // OK

//@ modifies \\everything;    "

//@ assume \    onnullelements(a);    "

//@ assert a == null;    "  // BAD

//@ modifies \\everything;    "

//@ assume a != null && a.length > 1;    "

//@ assert a[0] != null;    "  // BAD

//@ modifies \\everything;    "

//@ assume a != null && a.length == 0;    "

//@ assert \    onnullelements(a);    " // OK

//@ modifies \\everything;    "

//@ assume a != null && a.length == 0;    "

//@ assert (\\forall int i; 0<=i && i<a.length; a[i] != null);    " // OK

//@ requires \\elemtype(\\typeof(a)) == \\type(Object); modifies \\everything;    "

//@ assume a != null && a.length == 1;    "

//@ assert a[0] != null;    " // OK

//@ assert \    onnullelements(a);    " // OK

//@ modifies \\everything;    "

//@ assume a != null && a.length == 1;    "

//@ assume a[0] != null;    "

//@ assert \    onnullelements(a);    " // OK

//@ requires \\elemtype(\\typeof(a)) == \\type(Object); modifies \\everything;    "

//@ assume a != null && a.length == 2;    "

//@ assert \    onnullelements(a);    " // OK

//@ modifies \\everything;    "

//@ assume a != null && a.length == 2;    "

//@ assume a[0] != null;    "

//@ assume a[1] != null;    "

//@ assert \    onnullelements(a);    " // OK

//@ requires \\elemtype(\\typeof(a)) == \\type(Object); modifies \\everything;    "

//@ assume a != null && a.length == 3;    "

//@ assert \    onnullelements(a);    " // BAD

//@ requires \\elemtype(\\typeof(a)) == \\type(Object); modifies \\everything;    "

//@ assume \    onnullelements(a) && a.length == 3;    "

//@ assert \    onnullelements(a);    " // OK

//@ requires \\elemtype(\\typeof(a)) == \\type(Object); modifies \\everything;    "

//@ assume a != null && a.length == 3;    " // Line 75

//@ assert \    onnullelements(a);    " // BAD

//@ requires \\elemtype(\\typeof(a)) == \\type(Object); modifies \\everything;    "

//@ assume a != null && a.length == 3;    "

//@ assume \    onnullelements(a);    "

//@ assert \    onnullelements(a);    " // BAD

//@ modifies \\everything;    "

//@ assume a != null && a.length == 0;    "

//@ assert \    onnullelements(a);    "

//@ requires i == 5;    "

//@ modifies \\everything;    "

//@ assert \    ot_modified(i);    "  // OK

//@ modifies \\everything;    "

//@ assert \    ot_modified(i);    "  // BAD

//@ ghost public int gi;    "

//@ requires i == 5;    "

//@ modifies \\everything;    "

//@ assert \    ot_modified(i);    "  // OK

//@ modifies \\everything;    "

//@ assert \    ot_modified(i);    "  // BAD

//@ requires si == 5;    "

//@ modifies \\everything;    "

//@ assert \    ot_modified(si);    "  // OK

//@ modifies \\everything;    "

//@ assert \    ot_modified(si);    "  // BAD

//@ requires gi == 5;    "

//@ modifies \\everything;    "

//@ set gi = 5;    "

//@ assert \    ot_modified(gi);    "  // OK

//@ modifies \\everything;    "

//@ set gi = 5;    "

//@ assert \    ot_modified(gi);    "  // BAD


//@ requires t != null;    "

//@ modifies \\everything;    "

//@ assert \    ot_modified(t.i);    "  // OK

//@ requires t != null;    "

//@ modifies \\everything;    "

//@ assert \    ot_modified(t.i) ? true: true;    "  // BAD

//@ requires t == null;    "

//@ modifies \\everything;    "

//@ assert \    ot_modified(t.i) ? true: true;    "  // OK

//@ modifies \\everything;    "

//@ assert \    ot_modified(t.i) ? true: true;    "  // BAD

//@ requires i == 6;    "

//@ modifies \\everything;    "

//@ assert s == i;    "  // OK

//@ assert b == i;    "  // OK

//@ assert c == i;    "  // OK

//@ assert l == i;    "  // OK

//@ assert ii == i;    "  // OK

//@ assert i == (short)i;    "

//@ assert i == (long)i;    "

//@ assert i == (char)i;    "

//@ assert i == (byte)i;    "

//@ assert i == (int)i;    "

//@ requires i == 100000;    "

//@ modifies \\everything;    "

//@ assert s == i;    "

//@ requires i == 100000;    "

//@ modifies \\everything;    "

//@ assert i == (short)i;    " // BAD

//@ requires i == 100000;    "

//@ modifies \\everything;    "

//@ assert i == (byte)i;    "

//@ requires i == 100000;    "

//@ modifies \\everything;    "

//@ assert i == (char)i;    "

//@ requires i == 100000;    "

//@ modifies \\everything;    "

//@ assert b == i;    "

//@ requires i == 100000;    "

//@ modifies \\everything;    "

//@ assert c == i;    "

//@ modifies \\everything;    "


//@ assert 0 == (short)s;

//@ modifies \\everything;    "


//@ assert 0 == (int)s;

//@ modifies \\everything;    "


//@ assert 0L == (long)s;

//@ modifies \\everything;    "


//@ assert 0 == (byte)s;

//@ modifies \\everything;    "


//@ assert 0 == (char)s;

//@ modifies \\everything;    "


//@ assert (boolean)s;

//@ modifies \\everything;    "


//@ assert 0 == (double)s;

//@ modifies \\everything;    "


//@ assert 0.0 == (float)s;

//@ assignable \\everything;    "

//@ assignable \\everything;    "

//@ assignable i;    "

//@ assignable \\everything;    "

//@ assignable \    othing;    "

//@ assignable \\everything;    "

//@ assignable \\everything;    "

//@ requires true;     " // default assignable

//@ assignable \\everything;    "

//@ requires true; pure     " // default assignable

//@ assignable \\everything;    "

//@ pure     " // default assignable

//@ assignable \\everything;    "

//@ public nullable model Object state;    "

//@ in state;    "

//@ assignable \\everything;    "

//@ public nullable model Object state;    "

//@ in state;    "

//@ pure     " // default assignable

//@ assignable \\everything;    "

//@ public nullable model Object state;    "

//@ in state;    "

//@ requires true;    " // default assignable

//@ assignable \\everything;    "

//@ public nullable model Object state;    "

//@ in state;    "

//@ requires true; pure     " // default assignable

//@ assignable \\everything;    "

//@ public nullable model Object state;    "

//@ in state;    "

//@ pure     "

//@ assignable \\everything;    "

//@ public nullable model Object state;    "

//@ in state;    "

//@ pure     "

//@ assignable \\everything;    "

/*@ spec_public */
//@ assignable \\everything;    "

/*@ spec_public */
//@ requires true;     " // default assignable

//@ assignable \\everything;    "

/*@ spec_public */
//@ pure     " // default assignable

//@ assignable \\everything;    "

/*@ spec_public */
//@ requires true; pure     " // default assignable

//@ assignable \\everything;    "

/*@ spec_public */
//@ pure     "

//@ assignable \\everything;    "

/*@ spec_public */
//@ pure     "

//@ assignable \\everything;    "

/*@ nullable_by_default */
//@ ensures \\result == ints.length;    "

//@ pure     "

//@ assert ints != null;     "

/*@ non_null*/
//@ assert i == args.length;     "

//@ assert i == 0;     "

//@ assert i == 1;     "

//@ assert i == 2;     "

//@ ensures \\result == (ints.length > 0 ? ints[0] : (int)ints.length);    "

//@ pure     "

//@ assert ints != null;     "

//@ assert i == 0;     "

//@ assert i == 2;     "

//@ assert i == 5;     "

//@ requires ints.length == 0 || ints[0] != null;    "

//@ ensures \\result == (ints.length > 0 ? ints[0] : (int)ints.length);    "

//@ pure     "

//@ assert ints != null;     "

//@ assert i == 0;     "

//@ assert i == 2;     "

//@ assert i == 5;     "

//@ assert !(b & bb);    "

//@ assert (b | bb);    "

//@ assert (b ^ bb);    "

//@ assert (b & bb);    " // FALSE

//@ requires iii == 10;    "

//@ assert \\old(iii) == 10;    "

//@ assert \\old(iii,a) == 10;    "

//@ assert \\old(iii,b) == 12;    "

//@ assert iii == 14;    "

/*@ ensures \\result == k; pure */
//@ requires k == 10;    "

//@ assert \\old(mm()) == 10;    "

//@ assert \\old(mm(),a) == 10;    "

//@ assert \\old(mm(),b) == 12;    "

//@ assert mm() == 14;    "

//@ old int kk = k; requires k == 5 && i > kk && i < 100 && i > -100; assignable k; ensures k == i+1; ensures kk == 5;    "

//@ also    "

//@ old int kk = k+1; requires k == 5 && i < kk && i < 100 && i > -100; assignable k; ensures k == i-1; ensures kk == 6;    "

//@ assert \\old(k,a) == 10;    "

//@ assert \\old(k,c) == 12;    "

//@ requires i > -10 && i < 10;    "

//@ assert i != i;    " // ERROR

//@ requires i > 0;    "

//@ requires i < 0;    "

//@ assert i != i;    "

//@ requires i > 0;    "

//@ ensures \\result > 0;    "

//@ requires i > -10 && i < 10;    "

//@ assert i < 0;    " // OK

//@ assert i >= 0;    " // OK

//@ requires i > -10 && i < 10;    "

//@ assert i < 0;    "  // false, since not in if

//@ assert i >= 0;    "

//@ requires i > -10 && i < 10;    "

//@ assert i > 0;    "  // false, since not in if

//@ assert i >= 0;    "

//@ old int kk = k;    "

//@ {| requires i < 10 && i > kk; assignable k; ensures k == i+1;     "

//@ also    "

//@    requires i > -10 && i < kk; assignable k; ensures k == i-1;     "

//@ |}    "

//@ ensures \\result == i>=0;     "

//@ pure    "

//@ assert (\\forall int i; 0<=i ; bb(i) : bb(i));    "

//@ assert (\\forall int i; 0<=i ; i>=-1 : i>=0, i<=0);    "

//@ pure    "

//@ assert (\\forall int i; 0<=i ; bb(i) : );    "

//@ assert (\\forall boolean i;  ; i : bb(i));    "

//@ assert 0 == (\\sum int i; 0<=i ; i : i);    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume 1 < a.length;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume 1 < a.length;    "

//@ assume i < a.length;    "

//@ public normal_behavior requires i >= -1;    "

//@ also public exceptional_behavior requires i < -1; signals_only RuntimeException;    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior requires i >= 0;    "

//@ also public exceptional_behavior requires i < 0; signals_only RuntimeException;    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume 1 < a.length;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume 1 < a.length;    "

//@ assume i < a.length;    "

//@ public normal_behavior requires i >= -1;    "

//@ also public exceptional_behavior requires i < -1; signals_only RuntimeException;    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior requires i >= 0;    "

//@ also public exceptional_behavior requires i < 0; signals_only RuntimeException;    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume 1 < a.length;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume 1 < a.length;    "

//@ assume i < a.length;    "

//@ public normal_behavior requires i >= -1;    "

//@ also public exceptional_behavior requires i < -1; signals_only RuntimeException;    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior requires i >= 0;    "

//@ also public exceptional_behavior requires i < 0; signals_only RuntimeException;    "

//@ assume a != null;    "

//@ assume i < a.length;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i >= 0;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i >= 0;    "

//@ public normal_behavior requires 0 <= i && i <= a.length;    "

//@ also public exceptional_behavior requires i > a.length+1; signals_only RuntimeException;    "

//@ public normal_behavior requires 0 <= i && i < a.length;    "

//@ also public exceptional_behavior requires i < 0; signals_only RuntimeException;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i >= 0;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i >= 0;    "

//@ public normal_behavior requires 0 <= i && i <= a.length;    "

//@ also public exceptional_behavior requires i > a.length+1; signals_only RuntimeException;    "

//@ public normal_behavior requires 0 <= i && i < a.length;    "

//@ also public exceptional_behavior requires i < 0; signals_only RuntimeException;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i >= 0;    "

//@ public normal_behavior    "

//@ assume a != null;    "

//@ assume i >= 0;    "

//@ public normal_behavior requires 0 <= i && i <= a.length;    "

//@ also public exceptional_behavior requires i > a.length+1; signals_only RuntimeException;    "

//@ public normal_behavior requires 0 <= i && i < a.length;    "

//@ also public exceptional_behavior requires i < 0; signals_only RuntimeException;    "

//@ public normal_behavior    "

//@ public normal_behavior    "

//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only ArithmeticException;    "

//@ public normal_behavior requires a != 0;    "

//@ also public exceptional_behavior requires a == 0; signals_only ArithmeticException;    "

//@ invariant oo.length > 1;     "

//@ public normal_behavior    "

//@ public normal_behavior    "

//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only ArrayStoreException;    "

//@ public normal_behavior requires \\type(Integer) <: \\elemtype(\\typeof(ooo)) ;    "

//@ also public exceptional_behavior requires !(\\type(Integer) <: \\elemtype(\\typeof(ooo))); signals_only ArrayStoreException;    "

//@ assume ooo.length > 1 ;    "

/*@ public normal_behavior */
//@ public normal_behavior    "


//@ public normal_behavior    "


//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ public normal_behavior    "


//@ public normal_behavior    "


//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ public normal_behavior    "


//@ public normal_behavior    "


//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ public normal_behavior    "


//@ public normal_behavior    "


//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ public normal_behavior    "


//@ public normal_behavior    "


//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ public normal_behavior    "


//@ public normal_behavior    "


//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ public normal_behavior    "


//@ public normal_behavior    "


//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ public normal_behavior    "


//@ public normal_behavior    "


//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ public behavior signals_only A;    "


//@ public behavior signals_only A;    "


//@ public behavior signals_only A;    "

//@ also public exceptional_behavior requires false; signals_only A, NullPointerException;    "


//@ public behavior requires a != null; signals_only A;    "

//@ also public exceptional_behavior requires a == null; signals_only A, NullPointerException;    "


//@ public normal_behavior    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior requires i>0;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior requires i>0;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior requires i>0;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ assume a != null ==> a.length > 1;    "

//@ public normal_behavior    "


//@ public normal_behavior    "



//@ assume a == null & en != null;     "

/*@ assert a == null; */
//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only NullPointerException;    "


//@ public normal_behavior requires a != null;    "

//@ also public exceptional_behavior requires a == null; signals_only NullPointerException;    "


//@ public normal_behavior    "

//@ public normal_behavior    "

//@ public normal_behavior requires true;    "

//@ also public exceptional_behavior requires false; signals_only NegativeArraySizeException;    "

//@ public normal_behavior requires n >= 0;    "

//@ also public exceptional_behavior requires n < 0; signals_only NegativeArraySizeException;    "

//@ ensures \\result == (\\lbl BYTES Integer.BYTES);    "

//@ assignable x;     "

//@ assignable x;     "

//@ requires i > 0;     "

//@ assignable x;     "

//@ requires i > 0;     "

//@ assignable x;     "

//@ requires i > 0;     "

//@ assignable x;     "

//@ also     "

//@ requires i == 0;     "

//@ assignable y;     "

//@ requires i > 0;     "

//@ assignable x;     "

//@ also     "

//@ requires i == 0;     "

//@ assignable y;     "

//@ requires i > 0;     "

//@ assignable x;     "

//@ also     "

//@ requires i == 0;     "

//@ assignable y;     "

//@ assignable this.x;     "

//@ assignable this.x;     "

//@ assignable TestJava.y;     "

//@ assignable TestJava.y;     "

//@ assignable tt.TestJava.y;     "

//@ assignable tt.TestJava.y;     "

//@ assignable this.x;     "

//@ assignable TestJava.y;     "

//@ assignable tt.TestJava.y;     "

//@ assignable this.*;     "

//@ assignable TestJava.*;     "

//@ assignable tt.TestJava.*;     "

//@ assignable this.*;     "

//@ assignable TestJava.*;     "

//@ assignable tt.TestJava.*;     "

//@ requires true;     "

//@ assignable y;     "

//@ also requires true;     "

//@ assignable this.*;     "

//@ requires true;     "  // TODO check that the semantics of JML is that assignable clauses may be split like this

//@ assignable y;     "

//@ assignable this.*;     "

//@ requires true;     "

//@ assignable y, this.*;     "

/*@ spec_public */
//@ assignable \\everything;     "

//@ assume z != null && z.length > 1;    "

//@ assignable \    othing;     "

//@ assignable \    othing;     "

//@ assignable \    othing;     "

//@ assignable \    othing;     "

//@ assignable \    othing;     "

//@ assignable \    othing;     "

//@ assignable \    othing;     "

//@ assignable \    othing;     "

//@ assignable \    othing;     "

//@ assume z != null && z.length > 1;    "

//@ public invariant z != null && z.length > 10;    "

//@ requires a != null && a.length > 10; assignable a[1];     "

//@ requires a != null && a.length > 10; assignable z[1];     "

//@ requires a != null && a.length > 10; assignable a[*];     "

//@ requires a != null && a.length > 10; assignable z[*];     "

//@ requires a != null && a.length > 10; assignable a[0..3];     "

//@ requires a != null && a.length > 10; assignable z[0..3];     "

//@ requires a != null && a.length > 10; assignable a[2..3];     "

//@ requires a != null && a.length > 10; assignable a[0..0];     "

//@ requires a != null && a.length > 10; assignable a[0..*];     "

//@ requires a != null && a.length > 10; assignable z[0..*];     "

//@ requires a != null && a.length > 10; assignable a[2..*];     "

//@ assignable a.i;     "

//@ assignable a.*;     "

//@ assignable b.i;     "

//@ assignable b.*;     "

//@ assignable a.si;     "

//@ requires a == b; assignable b.i;     "

//@ requires a == this; assignable i;     "

//@ assignable *.i;     "

//@ assignable y, A.xx, a.x, this.y, TestJava.yy, tt.TestJava.yy;     "

//@ assignable x;     "

//@ assignable this.x;     "

//@ assignable y, A.xx, a.xx, a.x, this.y, TestJava.yy, tt.TestJava.yy; //@ requires a != null;     "

//@ assignable x;     "

//@ assignable xx;     "  // Line 40

//@ assignable xx;     "

//@ assignable TestJava.xx;     "

//@ assignable tt.TestJava.xx;     "

//@ assignable this.xx;     "

//@ assignable x;     "

//@ assignable xx;     "  // Line 40

//@ assignable x;     "

//@ assignable xx;     "  // Line 40

//@ assignable this.x;     "

//@ assignable TestJava.xx;     "

//@ assignable tt.TestJava.xx;     "

//@ assignable A.xx;     "

//@ requires b == this; assignable x;     "

//@ requires b != null; assignable x;     " // b.x is assigned but only this.x is allowed

//@ assignable x;     "

//@ requires b != null; assignable b.x;     "

//@ requires b == this; assignable b.x;     "

//@ requires b == this; assignable b.x;     "

//@ requires b != null; assignable b.x;     "

//@ assignable x;     "

//@ requires a == this; assignable x;     "

//@ requires a != null; assignable x;     "  // ERROR - a.m() assigns a.x, but only this.x is allowed

//@ requires a != null; assignable a.x;     "

//@ requires a == this; assignable a.x;     "

//@ requires a == this; assignable a.x;     "

//@ requires a != null; assignable a.x;     "  // this.x is assigned but only a.x is allowed

//@ assignable x;     "  // Line 29

//@ assignable x;     "

//@ assignable x;     "

//@ requires i > 0;     "

//@ assignable x;     "

//@ requires i > 0;     "

//@ assignable x;     "

//@ requires i > 0;     "

//@ assignable x;     "

//@ also     "

//@ requires i == 0;     "

//@ assignable y;     "

//@ requires i > 0;     "

//@ assignable x;     "

//@ also     "

//@ requires i == 0;     "

//@ assignable y;     "

//@ requires i > 0;     "

//@ assignable x;     "

//@ also     "

//@ requires i == 0;     "

//@ assignable y;     "

//@ assignable this.x;     "

//@ assignable this.x;     "

//@ assignable TestJava.y;     "

//@ assignable TestJava.y;     "

//@ assignable tt.TestJava.y;     "

//@ assignable tt.TestJava.y;     "

//@ assignable this.x;     "

//@ assignable TestJava.y;     "

//@ assignable tt.TestJava.y;     "

//@ assignable this.*;     "

//@ assignable TestJava.*;     "

//@ assignable tt.TestJava.*;     "

//@ assignable this.*;     "

//@ assignable TestJava.*;     "

//@ assignable tt.TestJava.*;     "

//@ requires true;     "

//@ assignable y;     "

//@ also requires true;     "

//@ assignable this.*;     "

//@ requires true;     "  // TODO check that the semantics of JML is that assignable clauses may be split like this

//@ assignable y;     "

//@ assignable this.*;     "

//@ requires true;     "

//@ assignable y, this.*;     "

/*@ spec_public */
//@ assignable \\everything;     "

//@ assume z != null && z.length > 1;    "

//@ assignable \    othing;     "

//@ assignable \    othing;     "

//@ assignable \    othing;     "

//@ assignable \    othing;     "

//@ assignable \    othing;     "

//@ assignable \    othing;     "

//@ assignable \    othing;     "

//@ assignable \    othing;     "

//@ assignable \    othing;     "

//@ assume z != null && z.length > 1;    "

//@ public invariant z != null && z.length > 10;    "

//@ requires a != null && a.length > 10; assignable a[1];     "

//@ requires a != null && a.length > 10; assignable z[1];     "

//@ requires a != null && a.length > 10; assignable a[*];     "

//@ requires a != null && a.length > 10; assignable z[*];     "

//@ requires a != null && a.length > 10; assignable a[0..3];     "

//@ requires a != null && a.length > 10; assignable z[0..3];     "

//@ requires a != null && a.length > 10; assignable a[2..3];     "

//@ requires a != null && a.length > 10; assignable a[0..0];     "

//@ requires a != null && a.length > 10; assignable a[0..*];     "

//@ requires a != null && a.length > 10; assignable z[0..*];     "

//@ requires a != null && a.length > 10; assignable a[2..*];     "

//@ assignable a.i;     "

//@ assignable a.*;     "

//@ assignable b.i;     "

//@ assignable b.*;     "

//@ assignable a.si;     "

//@ requires a == b; assignable b.i;     "

//@ requires a == this; assignable i;     "

//@ assignable *.i;     "

//@ assignable y, A.xx, a.x, this.y, TestJava.yy, tt.TestJava.yy;     "

//@ assignable x;     "

//@ assignable this.x;     "

//@ assignable y, A.xx, a.xx, a.x, this.y, TestJava.yy, tt.TestJava.yy; //@ requires a != null;     "

//@ assignable x;     "

//@ assignable xx;     "  // Line 40

//@ assignable xx;     "

//@ assignable TestJava.xx;     "

//@ assignable tt.TestJava.xx;     "

//@ assignable this.xx;     "

//@ assignable x;     "

//@ assignable xx;     "  // Line 40

//@ assignable x;     "

//@ assignable xx;     "  // Line 40

//@ assignable this.x;     "

//@ assignable TestJava.xx;     "

//@ assignable tt.TestJava.xx;     "

//@ assignable A.xx;     "

//@ requires b == this; assignable x;     "

//@ requires b != null; assignable x;     " // b.x is assigned but only this.x is allowed

//@ assignable x;     "

//@ requires b != null; assignable b.x;     "

//@ requires b == this; assignable b.x;     "

//@ requires b == this; assignable b.x;     "

//@ requires b != null; assignable b.x;     "

//@ assignable x;     "

//@ requires a == this; assignable x;     "

//@ requires a != null; assignable x;     "  // ERROR - a.m() assigns a.x, but only this.x is allowed

//@ requires a != null; assignable a.x;     "

//@ requires a == this; assignable a.x;     "

//@ requires a == this; assignable a.x;     "

//@ requires a != null; assignable a.x;     "  // this.x is assigned but only a.x is allowed

//@ assignable x;     "  // Line 29

//@ assignable x;     "

//@ assignable x;     "

//@ requires i > 0;     "

//@ assignable x;     "

//@ requires i > 0;     "

//@ assignable x;     "

//@ requires i > 0;     "

//@ assignable x;     "

//@ also     "

//@ requires i == 0;     "

//@ assignable y;     "

//@ requires i > 0;     "

//@ assignable x;     "

//@ also     "

//@ requires i == 0;     "

//@ assignable y;     "

//@ requires i > 0;     "

//@ assignable x;     "

//@ also     "

//@ requires i == 0;     "

//@ assignable y;     "

//@ assignable this.x;     "

//@ assignable this.x;     "

//@ assignable TestJava.y;     "

//@ assignable TestJava.y;     "

//@ assignable tt.TestJava.y;     "

//@ assignable tt.TestJava.y;     "

//@ assignable this.x;     "

//@ assignable TestJava.y;     "

//@ assignable tt.TestJava.y;     "

//@ assignable this.*;     "

//@ assignable TestJava.*;     "

//@ assignable tt.TestJava.*;     "

//@ assignable this.*;     "

//@ assignable TestJava.*;     "

//@ assignable tt.TestJava.*;     "

//@ requires true;     "

//@ assignable y;     "

//@ also requires true;     "

//@ assignable this.*;     "

//@ requires true;     "  // TODO check that the semantics of JML is that assignable clauses may be split like this

//@ assignable y;     "

//@ assignable this.*;     "

//@ requires true;     "

//@ assignable y, this.*;     "

/*@ spec_public */
//@ assignable \\everything;     "

//@ assume z != null && z.length > 1;    "

//@ assignable \    othing;     "

//@ assignable \    othing;     "

//@ assignable \    othing;     "

//@ assignable \    othing;     "

//@ assignable \    othing;     "

//@ assignable \    othing;     "

//@ assignable \    othing;     "

//@ assignable \    othing;     "

//@ assignable \    othing;     "

//@ assume z != null && z.length > 1;    "

//@ public invariant z != null && z.length > 10;    "

//@ requires a != null && a.length > 10; assignable a[1];     "

//@ requires a != null && a.length > 10; assignable z[1];     "

//@ requires a != null && a.length > 10; assignable a[*];     "

//@ requires a != null && a.length > 10; assignable z[*];     "

//@ requires a != null && a.length > 10; assignable a[0..3];     "

//@ requires a != null && a.length > 10; assignable z[0..3];     "

//@ requires a != null && a.length > 10; assignable a[2..3];     "

//@ requires a != null && a.length > 10; assignable a[0..0];     "

//@ requires a != null && a.length > 10; assignable a[0..*];     "

//@ requires a != null && a.length > 10; assignable z[0..*];     "

//@ requires a != null && a.length > 10; assignable a[2..*];     "

//@ assignable a.i;     "

//@ assignable a.*;     "

//@ assignable b.i;     "

//@ assignable b.*;     "

//@ assignable a.si;     "

//@ requires a == b; assignable b.i;     "

//@ requires a == this; assignable i;     "

//@ assignable *.i;     "

//@ assignable y, A.xx, a.x, this.y, TestJava.yy, tt.TestJava.yy;     "

//@ assignable x;     "

//@ assignable this.x;     "

//@ assignable y, A.xx, a.xx, a.x, this.y, TestJava.yy, tt.TestJava.yy; //@ requires a != null;     "

//@ assignable x;     "

//@ assignable xx;     "  // Line 40

//@ assignable xx;     "

//@ assignable TestJava.xx;     "

//@ assignable tt.TestJava.xx;     "

//@ assignable this.xx;     "

//@ assignable x;     "

//@ assignable xx;     "  // Line 40

//@ assignable x;     "

//@ assignable xx;     "  // Line 40

//@ assignable this.x;     "

//@ assignable TestJava.xx;     "

//@ assignable tt.TestJava.xx;     "

//@ assignable A.xx;     "

//@ requires b == this; assignable x;     "

//@ requires b != null; assignable x;     " // b.x is assigned but only this.x is allowed

//@ assignable x;     "

//@ requires b != null; assignable b.x;     "

//@ requires b == this; assignable b.x;     "

//@ requires b == this; assignable b.x;     "

//@ requires b != null; assignable b.x;     "

//@ assignable x;     "

//@ requires a == this; assignable x;     "

//@ requires a != null; assignable x;     "  // ERROR - a.m() assigns a.x, but only this.x is allowed

//@ requires a != null; assignable a.x;     "

//@ requires a == this; assignable a.x;     "

//@ requires a == this; assignable a.x;     "

//@ requires a != null; assignable a.x;     "  // this.x is assigned but only a.x is allowed

//@ assignable x;     "  // Line 29

//@ assignable x;     "

//@ assignable x;     "

//@ requires i > 0;     "

//@ assignable x;     "

//@ requires i > 0;     "

//@ assignable x;     "

//@ requires i > 0;     "

//@ assignable x;     "

//@ also     "

//@ requires i == 0;     "

//@ assignable y;     "

//@ requires i > 0;     "

//@ assignable x;     "

//@ also     "

//@ requires i == 0;     "

//@ assignable y;     "

//@ requires i > 0;     "

//@ assignable x;     "

//@ also     "

//@ requires i == 0;     "

//@ assignable y;     "

//@ assignable this.x;     "

//@ assignable this.x;     "

//@ assignable TestJava.y;     "

//@ assignable TestJava.y;     "

//@ assignable tt.TestJava.y;     "

//@ assignable tt.TestJava.y;     "

//@ assignable this.x;     "

//@ assignable TestJava.y;     "

//@ assignable tt.TestJava.y;     "

//@ assignable this.*;     "

//@ assignable TestJava.*;     "

//@ assignable tt.TestJava.*;     "

//@ assignable this.*;     "

//@ assignable TestJava.*;     "

//@ assignable tt.TestJava.*;     "

//@ requires true;     "

//@ assignable y;     "

//@ also requires true;     "

//@ assignable this.*;     "

//@ requires true;     "  // TODO check that the semantics of JML is that assignable clauses may be split like this

//@ assignable y;     "

//@ assignable this.*;     "

//@ requires true;     "

//@ assignable y, this.*;     "

/*@ spec_public */
//@ assignable \\everything;     "

//@ assume z != null && z.length > 1;    "

//@ assignable \    othing;     "

//@ assignable \    othing;     "

//@ assignable \    othing;     "

//@ assignable \    othing;     "

//@ assignable \    othing;     "

//@ assignable \    othing;     "

//@ assignable \    othing;     "

//@ assignable \    othing;     "

//@ assignable \    othing;     "

//@ assume z != null && z.length > 1;    "

//@ public invariant z != null && z.length > 10;    "

//@ requires a != null && a.length > 10; assignable a[1];     "

//@ requires a != null && a.length > 10; assignable z[1];     "

//@ requires a != null && a.length > 10; assignable a[*];     "

//@ requires a != null && a.length > 10; assignable z[*];     "

//@ requires a != null && a.length > 10; assignable a[0..3];     "

//@ requires a != null && a.length > 10; assignable z[0..3];     "

//@ requires a != null && a.length > 10; assignable a[2..3];     "

//@ requires a != null && a.length > 10; assignable a[0..0];     "

//@ requires a != null && a.length > 10; assignable a[0..*];     "

//@ requires a != null && a.length > 10; assignable z[0..*];     "

//@ requires a != null && a.length > 10; assignable a[2..*];     "

//@ assignable a.i;     "

//@ assignable a.*;     "

//@ assignable b.i;     "

//@ assignable b.*;     "

//@ assignable a.si;     "

//@ requires a == b; assignable b.i;     "

//@ requires a == this; assignable i;     "

//@ assignable *.i;     "

//@ assignable y, A.xx, a.x, this.y, TestJava.yy, tt.TestJava.yy;     "

//@ assignable x;     "

//@ assignable this.x;     "

//@ assignable y, A.xx, a.xx, a.x, this.y, TestJava.yy, tt.TestJava.yy; //@ requires a != null;     "

//@ assignable x;     "

//@ assignable xx;     "  // Line 40

//@ assignable xx;     "

//@ assignable TestJava.xx;     "

//@ assignable tt.TestJava.xx;     "

//@ assignable this.xx;     "

//@ assignable x;     "

//@ assignable xx;     "  // Line 40

//@ assignable x;     "

//@ assignable xx;     "  // Line 40

//@ assignable this.x;     "

//@ assignable TestJava.xx;     "

//@ assignable tt.TestJava.xx;     "

//@ assignable A.xx;     "

//@ requires b == this; assignable x;     "

//@ requires b != null; assignable x;     " // b.x is assigned but only this.x is allowed

//@ assignable x;     "

//@ requires b != null; assignable b.x;     "

//@ requires b == this; assignable b.x;     "

//@ requires b == this; assignable b.x;     "

//@ requires b != null; assignable b.x;     "

//@ assignable x;     "

//@ requires a == this; assignable x;     "

//@ requires a != null; assignable x;     "  // ERROR - a.m() assigns a.x, but only this.x is allowed

//@ requires a != null; assignable a.x;     "

//@ requires a == this; assignable a.x;     "

//@ requires a == this; assignable a.x;     "

//@ requires a != null; assignable a.x;     "  // this.x is assigned but only a.x is allowed

//@ assignable x;     "  // Line 29

//@ assignable x;     "

//@ assignable x;     "

//@ requires i > 0;     "

//@ assignable x;     "

//@ requires i > 0;     "

//@ assignable x;     "

//@ requires i > 0;     "

//@ assignable x;     "

//@ also     "

//@ requires i == 0;     "

//@ assignable y;     "

//@ requires i > 0;     "

//@ assignable x;     "

//@ also     "

//@ requires i == 0;     "

//@ assignable y;     "

//@ requires i > 0;     "

//@ assignable x;     "

//@ also     "

//@ requires i == 0;     "

//@ assignable y;     "

//@ assignable this.x;     "

//@ assignable this.x;     "

//@ assignable TestJava.y;     "

//@ assignable TestJava.y;     "

//@ assignable tt.TestJava.y;     "

//@ assignable tt.TestJava.y;     "

//@ assignable this.x;     "

//@ assignable TestJava.y;     "

//@ assignable tt.TestJava.y;     "

//@ assignable this.*;     "

//@ assignable TestJava.*;     "

//@ assignable tt.TestJava.*;     "

//@ assignable this.*;     "

//@ assignable TestJava.*;     "

//@ assignable tt.TestJava.*;     "

//@ requires true;     "

//@ assignable y;     "

//@ also requires true;     "

//@ assignable this.*;     "

//@ requires true;     "  // TODO check that the semantics of JML is that assignable clauses may be split like this

//@ assignable y;     "

//@ assignable this.*;     "

//@ requires true;     "

//@ assignable y, this.*;     "

/*@ spec_public */
//@ assignable \\everything;     "

//@ assume z != null && z.length > 1;    "

//@ assignable \    othing;     "

//@ assignable \    othing;     "

//@ assignable \    othing;     "

//@ assignable \    othing;     "

//@ assignable \    othing;     "

//@ assignable \    othing;     "

//@ assignable \    othing;     "

//@ assignable \    othing;     "

//@ assignable \    othing;     "

//@ assume z != null && z.length > 1;    "

//@ public invariant z != null && z.length > 10;    "

//@ requires a != null && a.length > 10; assignable a[1];     "

//@ requires a != null && a.length > 10; assignable z[1];     "

//@ requires a != null && a.length > 10; assignable a[*];     "

//@ requires a != null && a.length > 10; assignable z[*];     "

//@ requires a != null && a.length > 10; assignable a[0..3];     "

//@ requires a != null && a.length > 10; assignable z[0..3];     "

//@ requires a != null && a.length > 10; assignable a[2..3];     "

//@ requires a != null && a.length > 10; assignable a[0..0];     "

//@ requires a != null && a.length > 10; assignable a[0..*];     "

//@ requires a != null && a.length > 10; assignable z[0..*];     "

//@ requires a != null && a.length > 10; assignable a[2..*];     "

//@ assignable a.i;     "

//@ assignable a.*;     "

//@ assignable b.i;     "

//@ assignable b.*;     "

//@ assignable a.si;     "

//@ requires a == b; assignable b.i;     "

//@ requires a == this; assignable i;     "

//@ assignable *.i;     "

//@ assignable y, A.xx, a.x, this.y, TestJava.yy, tt.TestJava.yy;     "

//@ assignable x;     "

//@ assignable this.x;     "

//@ assignable y, A.xx, a.xx, a.x, this.y, TestJava.yy, tt.TestJava.yy; //@ requires a != null;     "

//@ assignable x;     "

//@ assignable xx;     "  // Line 40

//@ assignable xx;     "

//@ assignable TestJava.xx;     "

//@ assignable tt.TestJava.xx;     "

//@ assignable this.xx;     "

//@ assignable x;     "

//@ assignable xx;     "  // Line 40

//@ assignable x;     "

//@ assignable xx;     "  // Line 40

//@ assignable this.x;     "

//@ assignable TestJava.xx;     "

//@ assignable tt.TestJava.xx;     "

//@ assignable A.xx;     "

//@ requires b == this; assignable x;     "

//@ requires b != null; assignable x;     " // b.x is assigned but only this.x is allowed

//@ assignable x;     "

//@ requires b != null; assignable b.x;     "

//@ requires b == this; assignable b.x;     "

//@ requires b == this; assignable b.x;     "

//@ requires b != null; assignable b.x;     "

//@ assignable x;     "

//@ requires a == this; assignable x;     "

//@ requires a != null; assignable x;     "  // ERROR - a.m() assigns a.x, but only this.x is allowed

//@ requires a != null; assignable a.x;     "

//@ requires a == this; assignable a.x;     "

//@ requires a == this; assignable a.x;     "

//@ requires a != null; assignable a.x;     "  // this.x is assigned but only a.x is allowed

//@ assignable x;     "  // Line 29

/*@ nullable_by_default*/
//@ assert k == 5 ;    "

//@ assert k == 6 ;    "

//@ assert k == 6 ;    "

//@ assert i != null ;    "

//@ assert \\typeof(i) == \\type(Integer) ;    " // Line 25

/*@ nullable_by_default*/
//@ assert k == 5;     }    "

//@ assert m == 6;     }    "

/*@ nullable_by_default*/
//@ assert k == 5;     }    "

//@ assert m == 6;     }    "

/*@ nullable_by_default*/
//@ assert m == i;     "

/*@ nullable_by_default*/
//@ assert m == i;     "

/*@ nullable_by_default*/
//@ assert m == i;     "

/*@ nullable_by_default*/
//@ assert m == i;     "

/*@ nullable_by_default*/
//@ assert z  == 7;     "

//@ assert z == 8;     "

/*@ nullable_by_default*/
//@ assert k == 5 ;    "

//@ assert k == 6 ;    "

//@ assert k == 6 ;    "

//@ assert i != null ;    "

//@ assert \\typeof(i) == \\type(Integer) ;    " // Line 25

/*@ nullable_by_default*/
//@ assert k == 5;     }    "

//@ assert m == 6;     }    "

/*@ nullable_by_default*/
//@ assert k == 5;     }    "

//@ assert m == 6;     }    "

/*@ nullable_by_default*/
//@ assert m == i;     "

/*@ nullable_by_default*/
//@ assert m == i;     "

/*@ nullable_by_default*/
//@ assert m == i;     "

/*@ nullable_by_default*/
//@ assert m == i;     "

/*@ nullable_by_default*/
//@ assert z  == 7;     "

//@ assert z == 8;     "

/*@ nullable_by_default*/
//@ assert k == 5 ;    "

//@ assert k == 6 ;    "

//@ assert k == 6 ;    "

//@ assert i != null ;    "

//@ assert \\typeof(i) == \\type(Integer) ;    " // Line 25

/*@ nullable_by_default*/
//@ assert k == 5;     }    "

//@ assert m == 6;     }    "

/*@ nullable_by_default*/
//@ assert k == 5;     }    "

//@ assert m == 6;     }    "

/*@ nullable_by_default*/
//@ assert m == i;     "

/*@ nullable_by_default*/
//@ assert m == i;     "

/*@ nullable_by_default*/
//@ assert m == i;     "

/*@ nullable_by_default*/
//@ assert m == i;     "

/*@ nullable_by_default*/
//@ assert z  == 7;     "

//@ assert z == 8;     "

/*@ nullable_by_default*/
//@ assert k == 5 ;    "

//@ assert k == 6 ;    "

//@ assert k == 6 ;    "

//@ assert i != null ;    "

//@ assert \\typeof(i) == \\type(Integer) ;    " // Line 25

/*@ nullable_by_default*/
//@ assert k == 5;     }    "

//@ assert m == 6;     }    "

/*@ nullable_by_default*/
//@ assert k == 5;     }    "

//@ assert m == 6;     }    "

/*@ nullable_by_default*/
//@ assert m == i;     "

/*@ nullable_by_default*/
//@ assert m == i;     "

/*@ nullable_by_default*/
//@ assert m == i;     "

/*@ nullable_by_default*/
//@ assert m == i;     "

/*@ nullable_by_default*/
//@ assert z  == 7;     "

//@ assert z == 8;     "

/*@ nullable_by_default*/
//@ assert k == 5 ;    "

//@ assert k == 6 ;    "

//@ assert k == 6 ;    "

//@ assert i != null ;    "

//@ assert \\typeof(i) == \\type(Integer) ;    " // Line 25

/*@ nullable_by_default*/
//@ assert k == 5;     }    "

//@ assert m == 6;     }    "

/*@ nullable_by_default*/
//@ assert k == 5;     }    "

//@ assert m == 6;     }    "

/*@ nullable_by_default*/
//@ assert m == i;     "

/*@ nullable_by_default*/
//@ assert m == i;     "

/*@ nullable_by_default*/
//@ assert m == i;     "

/*@ nullable_by_default*/
//@ assert m == i;     "

/*@ nullable_by_default*/
//@ assert z  == 7;     "

//@ assert z == 8;     "

//@ assert i>0 ;    "

//@ requires i>=0;    "

//@ assert i>0 ;    "

//@ requires i>0;    "

//@ assert i>0 ;    "

//@ requires i>0;    "

//@ assert i>=0 ;    "

//@ requires i>0;    "

//@ also    "

//@ requires i==0;    "

//@ assert i>=0 ;    "

//@ assert i>0 ;    "

//@ requires i>=0;    "

//@ assert i>0 ;    "

//@ requires i>0;    "

//@ assert i>0 ;    "

//@ requires i>0;    "

//@ assert i>=0 ;    "

//@ requires i>0;    "

//@ also    "

//@ requires i==0;    "

//@ assert i>=0 ;    "

//@ requires i>0;    "

//@ ensures false;    "

//@ requires i>0;    "

//@ requires i<0;    "

//@ ensures false;    "

//@ requires i >= 0 && a[i]>0;    "

//@ requires i < a.length && a[i]>0;    "

//@ requires i >= 0 && i < a.length;    "

//@ requires a[i]>0;    "

//@ requires a.length > 10 && i < 5 && a[i]>0 ;    "

//@ requires i >= 0 && i < a.length;    "

//@ requires a[i]>0;    "

//@ signals (Exception) false;    "

//@ ensures false;    "

//@ ensures false;    "

//@ ensures true;    "

//@ signals (Exception e)  false;    "

//@ ensures false;    "

//@ requires i == 0;    "

//@ ensures false;    "

//@ also    "

//@ requires i!= 0;    "

//@ ensures true;    "

//@ requires i == 0;    "

//@ ensures true;    "

//@ also    "

//@ requires i!= 0;    "

//@ ensures false;    "

//@ requires i == 0;    "

//@ signals (Exception e) false;    "

//@ also    "

//@ requires i!= 0;    "

//@ signals (Exception e) true;    "

//@ requires i == 0;    "

//@ signals (Exception e) true;    "

//@ also    "

//@ requires i!= 0;    "

//@ signals (Exception e) false;    "

//@ signals (Exception e) \\exception == null;    "

//@ signals (Exception e) \\exception != null;    "

//@ signals (Exception) \\exception != null;    "

//@ public normal_behavior ensures iii == \\old(iii) + 3;    "

//@ public normal_behavior ensures iii == \\old(iii) + 3;    "

//@ public normal_behavior assignable iii; ensures iii == \\old(iii) + 1;    "

//@ public normal_behavior ensures i == \\old(i) + 3;    "

//@ public normal_behavior ensures i == \\old(i) + 3;    "

//@ public normal_behavior ensures i == \\old(i) + 1;    "

//@ public normal_behavior ensures iii == \\old(iii) + 3;    "

//@ public normal_behavior ensures iii == \\old(iii) + 3;    "

//@ public normal_behavior assignable iii; ensures iii == \\old(iii) + 1;    "

//@ public normal_behavior ensures i == \\old(i) + 3;    "

//@ public normal_behavior ensures i == \\old(i) + 3;    "

//@ public normal_behavior ensures i == \\old(i) + 1;    "

//@ requires i == 0;     "

//@ assert j == 0;    "

//@ assert \\old(i) == 0;    "

//@ assert \\old(j,a) == 0;    "

//@ assert \\old(i,a) == 0;    "

//@ assert \\old(j,b) == 1;    "

//@ assert \\old(i,b) == 1;    "

//@ assert \\pre(i) == 0;    "

//@ ensures \\result == 7;     "

/*@ signals_only \    othing;*/
//@ requires k > 0;      "

//@ ensures \\result == i* 2 + 1;     "

//@ ensures \\result == i* 2 + 1;     "

//@ ensures \\result == 1;     "

//@ ensures \\result == 0;     "

//@ ensures \\result == 0;     "

//@ ensures \\result == 1;     "

//@ ensures \\result == 2;     "

//@ ensures \\result == 2;     "   // Line 50

//@ ensures \\result == 3;     "

//@ assignable kk;    "

//@ ensures \\result == 3; signals (Exception e)  false;     "

//@ assignable kk;    "

//@ ensures \\result == 3; signals (Exception e)  kk == 1;     "

//@ assignable kk;    "

//@ ensures \\result == 3; signals (Exception e)  kk == 1;     "

//@ assignable kk;    "

//@ ensures \\result == 3; signals (Exception e) kk == 4;     "

//@ assignable kk;    "

//@ ensures i==0 ==> \\result == 4; signals (Exception e) false;     "

//@ assignable kk;    "

//@ ensures \\result == 3; signals (Exception e)  false;     "

//@ unreachable;    "

//@ requires i != 0;     "

//@ unreachable;    "

//@ ghost int k = 0;"

//@ set k = 1;    "

//@ assert k == 0;     "

//@ requires i != 0;     "

//@ ghost int k = 0;"

//@ set k = 1;    "

//@ assert k == 1;     "

//@ ghost int k = 0;"

//@ debug k = 1;    "

//@ assert k == 0;     "

//@ requires i != 0;     "

//@ ghost int k = 0;"

//@ debug k = 1;    "

//@ assert k == 1;     "

//@ ghost boolean k = true;"

//@ set k = (k <=!=> k);    "

//@ assert k;     "

//@ ghost boolean k = true;"

//@ set k = (k <==> k);    "

//@ assert k;     "

//@ ghost int k = 0;"

//@ debug k = 1;    "

//@ assert k == 0;     "

//@ requires i != 0;     "

//@ ghost int k = 0;"

//@ debug k = 1;    "

//@ assert k == 1;     "

//@ assert i == 0;    "

//@ havoc i;     "

//@ assert i == 0;    "

//@ ensures a[i]>0;    "

//@ requires i >= 0 && i < a.length;    "

//@ ensures a[i]==true || a[i]==false;    "

//@ signals (Exception) false;    "

//@ requires true;    "

//@ ensures \\result ==4;    "

//@ requires true;    "

//@ ensures \\result == 3;    "

//@ requires x >= 0;    "

//@ ensures \\result < 0;    "

//@ requires x >= 0;    "

//@ ensures \\result <= 0;    "

//@ assignable \\everything;    "

//@ ensures \\result == i;    "

//@ ensures i == \\old(i) + 1;    "

//@ assignable \\everything;    "

//@ ensures \\result == i;    "

//@ ensures i == \\old(i) - 1;    "

//@ assignable \\everything;    "

//@ ensures \\result == \\old(i);    "

//@ ensures i == \\old(i) + 1;    "

//@ assignable \\everything;    "

//@ ensures \\result == i;    "

//@ ensures i == \\old(i) + 1;    "

//@ assignable \\everything;    "

//@ ensures \\result == \\old(i);    "

//@ ensures i == \\old(i) - 1;    "

//@ assignable \\everything;    "

//@ ensures \\result == i;    "

//@ ensures i == \\old(i) - 1;    "

//@ requires p ==> q;    "

//@ ensures !p || q;    "

//@ requires p <==> q;    "

//@ ensures p == q;    "

//@ requires p <=!=> q;    "

//@ ensures p != q;    "

//@ requires p <== q;    "

//@ ensures p || !q;    "

//@ requires !p || q;    "

//@ ensures p ==> q;    "

//@ requires p == q;    "

//@ ensures p <==> q;    "

//@ requires p != q;    "

//@ ensures p <=!=> q;    "

//@ requires p || !q;    "

//@ ensures p <== q;    "

//@ requires i < 100000;    "

//@ ensures \\result == i;    "

//@ requires i < 100000;    "

//@ ensures \\result >= i;    "

//@ requires true;    "

//@ ensures \\result == i;    "

//@ requires i < 100000;    "

//@ ensures \\result >= i;    "

//@ requires true;    "

//@ ensures \\result >= i;    "

//@ requires true;    "

//@ ensures \\result == i;    "

//@ requires true;    "

//@ ensures \\result >= i;    "

//@ ensures \\result;    "

//@ requires a;    "

//@ ensures \\result;    "

//@ also     "

//@ requires !a;    "

//@ ensures \\result == b;    "

//@ requires a;    "

//@ ensures b;    "

//@ also     "

//@ requires !a;    "

//@ ensures \\result == b;    "

//@ requires a;    "

//@ ensures \\result == b;    "

//@ also     "

//@ requires !a;    "

//@ ensures \\result == false;    "

//@ requires i < 2 && i > -2; ensures \\result;    "

//@ ensures \\result;    "

//@ requires i < 30 && i > -30; ensures \\result;    "

//@ ensures \\result;    "

//@ requires a;    "

//@ ensures \\result;    "

//@ also     "

//@ requires !a;    "

//@ ensures \\result == b;    "

//@ requires a;    "

//@ ensures b;    "

//@ also     "

//@ requires !a;    "

//@ ensures \\result == b;    "

//@ requires a;    "

//@ ensures \\result == b;    "

//@ also     "

//@ requires !a;    "

//@ ensures \\result == false;    "

//@ requires i < 2 && i > -2; ensures \\result;    "

//@ ensures \\result;    "

//@ requires i < 30 && i > -30; ensures \\result;    "

//@ requires true;    "

//@ ensures b ==> (i!=5) ;    "

//@ ghost boolean bb = (\\lbl LBL_BB b);    "

//@ ghost boolean bbp = (\\lblpos LBL_BB2 (i!=5));    "

//@ ghost boolean bbn = (\\lblneg LBL_BB3 (i!=5));    "

//@ ghost int ii = (\\lbl LBL_BBI i);    "

//@ requires true;    "

//@ ensures \\result;    "

//@ requires p && q;    "

//@ ensures \\result;    "

//@ requires true;    "

//@ ensures \\result;    "

//@ requires p && !q;    "

//@ ensures \\result;    "

//@ requires true;    "

//@ ensures \\result;    "

//@ requires p && !q;    "

//@ ensures \\result;    "



//@ assert i == j;    "

//@ requires true;    "

//@ ensures \\result == 1;    "

//@ requires this.f == 1;    "

//@ ensures \\result == 1;    "

//@ requires true;    "

//@ ensures \\result == 1;    "

//@ requires f == 1;    "

//@ ensures \\result == 1;    "

//@ requires f == 1;    "

//@ ensures \\result == 1;    "

//@ requires true;    "

//@ ensures true;    "

/*@nullable*/
//@ requires p.f == 1;    "

//@ ensures \\result == 1;    "

//@ requires i < 100;    "

//@ ensures \\result == i;    "

//@ requires i < 100;    "

//@ ensures \\result == i+1;    "

/*@ assert s == 0; */
/*@ assert s == 1; */
/*@ assert s == 1; */
/*@ assert s == 0; */
/*@ nullable*/
//@ static public invariant CHILD == 3;    "

//@ helper pure     "

//@ assert CHILD == 3 ;    "

//@ static final public invariant CHILD == 3;    "

//@ public normal_behavior ensures true; static_initializer    "

//@ helper pure     "

//@ assert CHILD == 3 ;    "

/*@ final */
//@ helper pure     "

//@ assert CHILD == 3 ;    "

/*@ final */
/*@ final */
//@ public normal_behavior ensures true; static_initializer    "

//@  pure     "

//@ assert H.ZZZZ == 79 ;    "

//@ assert FIELD.length == 5 ;    "

//@ assert FIELD2.length == 6 ;    "

//@ assert H.CHILD.length == 5 ;    "

//@ assert H.CHILD2.length == 6 ;    "

/*@ final */
/*@ final */
/*@ final */
//@ public normal_behavior ensures true; static_initializer    "

//@ ensures true;    "

//@ model pure public int mm(int i);    "

//@ ensures true; pure    "

//@ ensures !\\fresh(\\result); pure    "

//@ model public <TT> TT mt(int i);    "

//@ ensures !\\fresh(\\result); pure    "


//@ ensures true; pure    "

//@ model function public static int mf(int i);    "

//@ ensures true; pure    "

//@ function     "

//@ ensures mm(i) == mm(i);    "

//@ ensures mmr(i) == \\result;    "

//@ ensures mt(i) == mt(i);    "

//@ ensures mtr(i) == \\result;    "


//@ ensures mf(i) == mf(i);    "

//@ ensures mfr(i) == \\result;    "


//@ ensures \\fresh(\\result); pure    "

//@ ensures \\result == null || !\\fresh(\\result); pure    " // FIXME - should this work -= does not prevent the result from being fresh for m2 while not for mm2

//@ ensures \\result == o; pure    "


//@ ensures true; pure    "

//@ ensures \\fresh(\\result);    "  // Line 10

//@ ensures mm(i) == \\result;    " // ERROR - not necessarily the case

//@ ensures \\result == null || !\\fresh(\\result);    "

//@ ensures mm2(i) == \\result;    "


//@ ensures mm3(i) == \\result;    " // Line 20 // ERROR - not necessarily the case

//@ ensures true; pure     "

//@ assert i==1 ==> j == mpure(1);     "

//@ assert i==2 ==> j == mpure(2);     "

//@ assert i==3 ==> j == mpure(1);     " // CAN'T PROVE

//@ assert i==3 ==> j != mpure(1);     " // CAN'T PROVE

//@ ensures true; pure     "

//@ assert i==1 ==> j == mpure(1);     " // CAN'T PROVE

//@ assert i==2 ==> j == mpure(2);     " // CAN'T PROVE

//@ assert i==3 ==> j == mpure(1);     " // CAN'T PROVE

//@ assert i==3 ==> j != mpure(1);     " // CAN'T PROVE

//@ requires true;    "

//@ assert i == 0 ;    "

//@ requires i == 0;    "

//@ assert i == 0 ;    "

//@ assume i == 0 ;    "

//@ assert i == 0 ;    "

//@ requires true;    "

//@ requires true;    "

//@ requires i == 0;    "

//@ assume i == 0 ;    "

//@ requires 10/i < 0;    "

//@ requires i != 0 && 10/i < 0;    "

//@ ensures 10/i < 0 || true;    "

//@ ensures i == 0 || 10/i < 0 || true;    "

//@ assume 10/i < 0 || true;    "

//@ assume i == 0 || 10/i < 0 || true;    "

//@ assert 10/i < 0 ||true;    "

//@ assert i == 0 || 10/i < 0 || true;    "

//@ assert 10%i < 0 ||true;    "

//@ assert i == 0 || 10%i < 0 || true;    "

//@ assert i<10;    "

//@ assert i<10;    "

//@ assert i>=10;    "

//@ assert i<10;    "

//@ assert i>10;    "

//@ assert i<10;    "

//@ assert i<=10;    "

//@ assert i>=10;    "

//@ assert i<10;    "

//@ assert i<=10;    "

//@ assert i>10;    "

//@ requires arg != null;     "

//@ assert i == arg.length;    "

//@ requires arg != null;     "

//@ unreachable;    "

//@ assert !b;    "

//@ assert b;    "

//@ assert !b;    "

//@ assert b;    "

//@ assert b;    "

//@ assert b;    "

//@ assert b;    "

//@ assert b;    "

//@ assert a == 5;    "

//@ assert a == 5;    "

//@ assert g == 5;    "

//@ assert g == 5;    "

//@ assert a == 1;    "

//@ assert g == 1;    "

//@ assert g == 1;    "

//@ assert s = \"xy\";    "

//@ assert s = \"x1\";    "

//@ assert s = \"xtrue\";    "

//@ assert s = \"falsex\";    "

//@ assert s = \"xnull\";    "

//@ requires a.length > 10;    "

//@ ghost boolean b = Integer.class <: Number.class;    "

//@ ghost boolean bb = Number.class <: Boolean.class;    "

//@ assert b && !bb;    "

//@ requires clazz <: Number.class;    "

//@ assignable j;    "

//@ ensures j > 100;    "

//@ also    "

//@ requires clazz <: Boolean.class;    "

//@ assignable j;    "

//@ ensures j > 200;    "

//@ also    "

//@ requires clazz <: String.class;    "

//@ assignable j;    "

//@ ensures j > 200;    "

//@ requires i > 0;    "

//@ assignable j;    "

//@ ensures j > 100;    "

//@ also    "

//@ requires i >= 2;    "

//@ assignable j;    "

//@ ensures j > 200;    "

//@ assert a == 7;    "

//@ assert a == 4;    "

//@ assert a == 4;    "

//@ requires i == 4;    "

//@ ensures \\result == 5;    "

//@ also    "

//@ requires i == 5;    "

//@ ensures \\result == 6;    "

/*@ pure */
//@ assert 0<m(3);    "

//@ old int j = i+2;    "

//@ requires 0 <= j && j < 10;    "

//@ requires a != null && a.length == 10;    "

//@ assignable a[j];    "

//@ ensures a[j] == 42;    "

//@ requires 0 <= i && i < 8;    "

//@ requires a != null && a.length == 10;    "

//@ assignable a[i];    "

//@ requires 0 <= i && i < 8;    "

//@ requires a != null && a.length == 10;    "

//@ assignable a[i+2];    "

//@ old int j = i+1;    "

//@ requires 0 <= j && j < 9;    "

//@ requires a != null && a.length == 10;    "

//@ assignable a[j];    "

//@ old int j = i+off;    "

//@ requires a != null && a.length == 100;    "

//@ requires 0 <= i && i < 50 && 0 <= off && off < 30;    "

//@ assignable a[j];    "

//@ requires 0 <= i && i < 50;    "

//@ requires a != null && a.length == 100;    "

//@ assignable a[i],a[i+10],a[i+25];    "

//@ assert i>0 ;    "

//@ requires i>=0;    "

//@ assert i>0 ;    "

//@ requires i>0;    "

//@ assert i>0 ;    "

//@ requires i>0;    "

//@ assert i>=0 ;    "

//@ requires i>0;    "

//@ also    "

//@ requires i==0;    "

//@ assert i>=0 ;    "

//@ assert i>0 ;    "

//@ requires i>=0;    "

//@ assert i>0 ;    "

//@ requires i>0;    "

//@ assert i>0 ;    "

//@ requires i>0;    "

//@ assert i>=0 ;    "

//@ requires i>0;    "

//@ also    "

//@ requires i==0;    "

//@ assert i>=0 ;    "

//@ requires i>0;    "

//@ ensures false;    "

//@ requires i>0;    "

//@ requires i<0;    "

//@ ensures false;    "

//@ requires i >= 0 && a[i]>0;    "

//@ requires i < a.length && a[i]>0;    "

//@ requires i >= 0 && i < a.length;    "

//@ requires a[i]>0;    "

//@ requires a.length > 10 && i < 5 && a[i]>0 ;    "

//@ requires i >= 0 && i < a.length;    "

//@ requires a[i]>0;    "

//@ signals (Exception) false;    "

//@ ensures false;    "

//@ ensures false;    "

//@ ensures true;    "

//@ signals (Exception e)  false;    "

//@ ensures false;    "

//@ requires i == 0;    "

//@ ensures false;    "

//@ also    "

//@ requires i!= 0;    "

//@ ensures true;    "

//@ requires i == 0;    "

//@ ensures true;    "

//@ also    "

//@ requires i!= 0;    "

//@ ensures false;    "

//@ requires i == 0;    "

//@ signals (Exception e) false;    "

//@ also    "

//@ requires i!= 0;    "

//@ signals (Exception e) true;    "

//@ requires i == 0;    "

//@ signals (Exception e) true;    "

//@ also    "

//@ requires i!= 0;    "

//@ signals (Exception e) false;    "

//@ signals (Exception e) \\exception == null;    "

//@ signals (Exception e) \\exception != null;    "

//@ signals (Exception) \\exception != null;    "

//@ public normal_behavior ensures iii == \\old(iii) + 3;    "

//@ public normal_behavior ensures iii == \\old(iii) + 3;    "

//@ public normal_behavior assignable iii; ensures iii == \\old(iii) + 1;    "

//@ public normal_behavior ensures i == \\old(i) + 3;    "

//@ public normal_behavior ensures i == \\old(i) + 3;    "

//@ public normal_behavior ensures i == \\old(i) + 1;    "

//@ public normal_behavior ensures iii == \\old(iii) + 3;    "

//@ public normal_behavior ensures iii == \\old(iii) + 3;    "

//@ public normal_behavior assignable iii; ensures iii == \\old(iii) + 1;    "

//@ public normal_behavior ensures i == \\old(i) + 3;    "

//@ public normal_behavior ensures i == \\old(i) + 3;    "

//@ public normal_behavior ensures i == \\old(i) + 1;    "

//@ requires i == 0;     "

//@ assert j == 0;    "

//@ assert \\old(i) == 0;    "

//@ assert \\old(j,a) == 0;    "

//@ assert \\old(i,a) == 0;    "

//@ assert \\old(j,b) == 1;    "

//@ assert \\old(i,b) == 1;    "

//@ assert \\pre(i) == 0;    "

//@ ensures \\result == 7;     "

/*@ signals_only \    othing;*/
//@ requires k > 0;      "

//@ ensures \\result == i* 2 + 1;     "

//@ ensures \\result == i* 2 + 1;     "

//@ ensures \\result == 1;     "

//@ ensures \\result == 0;     "

//@ ensures \\result == 0;     "

//@ ensures \\result == 1;     "

//@ ensures \\result == 2;     "

//@ ensures \\result == 2;     "   // Line 50

//@ ensures \\result == 3;     "

//@ assignable kk;    "

//@ ensures \\result == 3; signals (Exception e)  false;     "

//@ assignable kk;    "

//@ ensures \\result == 3; signals (Exception e)  kk == 1;     "

//@ assignable kk;    "

//@ ensures \\result == 3; signals (Exception e)  kk == 1;     "

//@ assignable kk;    "

//@ ensures \\result == 3; signals (Exception e) kk == 4;     "

//@ assignable kk;    "

//@ ensures i==0 ==> \\result == 4; signals (Exception e) false;     "

//@ assignable kk;    "

//@ ensures \\result == 3; signals (Exception e)  false;     "

//@ unreachable;    "

//@ requires i != 0;     "

//@ unreachable;    "

//@ ghost int k = 0;"

//@ set k = 1;    "

//@ assert k == 0;     "

//@ requires i != 0;     "

//@ ghost int k = 0;"

//@ set k = 1;    "

//@ assert k == 1;     "

//@ ghost int k = 0;"

//@ debug k = 1;    "

//@ assert k == 0;     "

//@ requires i != 0;     "

//@ ghost int k = 0;"

//@ debug k = 1;    "

//@ assert k == 1;     "

//@ ghost boolean k = true;"

//@ set k = (k <=!=> k);    "

//@ assert k;     "

//@ ghost boolean k = true;"

//@ set k = (k <==> k);    "

//@ assert k;     "

//@ ghost int k = 0;"

//@ debug k = 1;    "

//@ assert k == 0;     "

//@ requires i != 0;     "

//@ ghost int k = 0;"

//@ debug k = 1;    "

//@ assert k == 1;     "

//@ assert i == 0;    "

//@ havoc i;     "

//@ assert i == 0;    "

//@ ensures a[i]>0;    "

//@ requires i >= 0 && i < a.length;    "

//@ ensures a[i]==true || a[i]==false;    "

//@ signals (Exception) false;    "

//@ requires true;    "

//@ ensures \\result ==4;    "

//@ requires true;    "

//@ ensures \\result == 3;    "

//@ requires x >= 0;    "

//@ ensures \\result < 0;    "

//@ requires x >= 0;    "

//@ ensures \\result <= 0;    "

//@ assignable \\everything;    "

//@ ensures \\result == i;    "

//@ ensures i == \\old(i) + 1;    "

//@ assignable \\everything;    "

//@ ensures \\result == i;    "

//@ ensures i == \\old(i) - 1;    "

//@ assignable \\everything;    "

//@ ensures \\result == \\old(i);    "

//@ ensures i == \\old(i) + 1;    "

//@ assignable \\everything;    "

//@ ensures \\result == i;    "

//@ ensures i == \\old(i) + 1;    "

//@ assignable \\everything;    "

//@ ensures \\result == \\old(i);    "

//@ ensures i == \\old(i) - 1;    "

//@ assignable \\everything;    "

//@ ensures \\result == i;    "

//@ ensures i == \\old(i) - 1;    "

//@ requires p ==> q;    "

//@ ensures !p || q;    "

//@ requires p <==> q;    "

//@ ensures p == q;    "

//@ requires p <=!=> q;    "

//@ ensures p != q;    "

//@ requires p <== q;    "

//@ ensures p || !q;    "

//@ requires !p || q;    "

//@ ensures p ==> q;    "

//@ requires p == q;    "

//@ ensures p <==> q;    "

//@ requires p != q;    "

//@ ensures p <=!=> q;    "

//@ requires p || !q;    "

//@ ensures p <== q;    "

//@ requires i < 100000;    "

//@ ensures \\result == i;    "

//@ requires i < 100000;    "

//@ ensures \\result >= i;    "

//@ requires true;    "

//@ ensures \\result == i;    "

//@ requires i < 100000;    "

//@ ensures \\result >= i;    "

//@ requires true;    "

//@ ensures \\result >= i;    "

//@ requires true;    "

//@ ensures \\result == i;    "

//@ requires true;    "

//@ ensures \\result >= i;    "

//@ ensures \\result;    "

//@ requires a;    "

//@ ensures \\result;    "

//@ also     "

//@ requires !a;    "

//@ ensures \\result == b;    "

//@ requires a;    "

//@ ensures b;    "

//@ also     "

//@ requires !a;    "

//@ ensures \\result == b;    "

//@ requires a;    "

//@ ensures \\result == b;    "

//@ also     "

//@ requires !a;    "

//@ ensures \\result == false;    "

//@ requires i < 2 && i > -2; ensures \\result;    "

//@ ensures \\result;    "

//@ requires i < 30 && i > -30; ensures \\result;    "

//@ ensures \\result;    "

//@ requires a;    "

//@ ensures \\result;    "

//@ also     "

//@ requires !a;    "

//@ ensures \\result == b;    "

//@ requires a;    "

//@ ensures b;    "

//@ also     "

//@ requires !a;    "

//@ ensures \\result == b;    "

//@ requires a;    "

//@ ensures \\result == b;    "

//@ also     "

//@ requires !a;    "

//@ ensures \\result == false;    "

//@ requires i < 2 && i > -2; ensures \\result;    "

//@ ensures \\result;    "

//@ requires i < 30 && i > -30; ensures \\result;    "

//@ requires true;    "

//@ ensures b ==> (i!=5) ;    "

//@ ghost boolean bb = (\\lbl LBL_BB b);    "

//@ ghost boolean bbp = (\\lblpos LBL_BB2 (i!=5));    "

//@ ghost boolean bbn = (\\lblneg LBL_BB3 (i!=5));    "

//@ ghost int ii = (\\lbl LBL_BBI i);    "

//@ requires true;    "

//@ ensures \\result;    "

//@ requires p && q;    "

//@ ensures \\result;    "

//@ requires true;    "

//@ ensures \\result;    "

//@ requires p && !q;    "

//@ ensures \\result;    "

//@ requires true;    "

//@ ensures \\result;    "

//@ requires p && !q;    "

//@ ensures \\result;    "



//@ assert i == j;    "

//@ requires true;    "

//@ ensures \\result == 1;    "

//@ requires this.f == 1;    "

//@ ensures \\result == 1;    "

//@ requires true;    "

//@ ensures \\result == 1;    "

//@ requires f == 1;    "

//@ ensures \\result == 1;    "

//@ requires f == 1;    "

//@ ensures \\result == 1;    "

//@ requires true;    "

//@ ensures true;    "

/*@nullable*/
//@ requires p.f == 1;    "

//@ ensures \\result == 1;    "

//@ requires i < 100;    "

//@ ensures \\result == i;    "

//@ requires i < 100;    "

//@ ensures \\result == i+1;    "

/*@ assert s == 0; */
/*@ assert s == 1; */
/*@ assert s == 1; */
/*@ assert s == 0; */
/*@ nullable*/
//@ static public invariant CHILD == 3;    "

//@ helper pure     "

//@ assert CHILD == 3 ;    "

//@ static final public invariant CHILD == 3;    "

//@ public normal_behavior ensures true; static_initializer    "

//@ helper pure     "

//@ assert CHILD == 3 ;    "

/*@ final */
//@ helper pure     "

//@ assert CHILD == 3 ;    "

/*@ final */
/*@ final */
//@ public normal_behavior ensures true; static_initializer    "

//@  pure     "

//@ assert H.ZZZZ == 79 ;    "

//@ assert FIELD.length == 5 ;    "

//@ assert FIELD2.length == 6 ;    "

//@ assert H.CHILD.length == 5 ;    "

//@ assert H.CHILD2.length == 6 ;    "

/*@ final */
/*@ final */
/*@ final */
//@ public normal_behavior ensures true; static_initializer    "

//@ ensures true;    "

//@ model pure public int mm(int i);    "

//@ ensures true; pure    "

//@ ensures !\\fresh(\\result); pure    "

//@ model public <TT> TT mt(int i);    "

//@ ensures !\\fresh(\\result); pure    "


//@ ensures true; pure    "

//@ model function public static int mf(int i);    "

//@ ensures true; pure    "

//@ function     "

//@ ensures mm(i) == mm(i);    "

//@ ensures mmr(i) == \\result;    "

//@ ensures mt(i) == mt(i);    "

//@ ensures mtr(i) == \\result;    "


//@ ensures mf(i) == mf(i);    "

//@ ensures mfr(i) == \\result;    "


//@ ensures \\fresh(\\result); pure    "

//@ ensures \\result == null || !\\fresh(\\result); pure    " // FIXME - should this work -= does not prevent the result from being fresh for m2 while not for mm2

//@ ensures \\result == o; pure    "


//@ ensures true; pure    "

//@ ensures \\fresh(\\result);    "  // Line 10

//@ ensures mm(i) == \\result;    " // ERROR - not necessarily the case

//@ ensures \\result == null || !\\fresh(\\result);    "

//@ ensures mm2(i) == \\result;    "


//@ ensures mm3(i) == \\result;    " // Line 20 // ERROR - not necessarily the case

//@ ensures true; pure     "

//@ assert i==1 ==> j == mpure(1);     "

//@ assert i==2 ==> j == mpure(2);     "

//@ assert i==3 ==> j == mpure(1);     " // CAN'T PROVE

//@ assert i==3 ==> j != mpure(1);     " // CAN'T PROVE

//@ ensures true; pure     "

//@ assert i==1 ==> j == mpure(1);     " // CAN'T PROVE

//@ assert i==2 ==> j == mpure(2);     " // CAN'T PROVE

//@ assert i==3 ==> j == mpure(1);     " // CAN'T PROVE

//@ assert i==3 ==> j != mpure(1);     " // CAN'T PROVE

//@ requires true;    "

//@ assert i == 0 ;    "

//@ requires i == 0;    "

//@ assert i == 0 ;    "

//@ assume i == 0 ;    "

//@ assert i == 0 ;    "

//@ requires true;    "

//@ requires true;    "

//@ requires i == 0;    "

//@ assume i == 0 ;    "

//@ requires 10/i < 0;    "

//@ requires i != 0 && 10/i < 0;    "

//@ ensures 10/i < 0 || true;    "

//@ ensures i == 0 || 10/i < 0 || true;    "

//@ assume 10/i < 0 || true;    "

//@ assume i == 0 || 10/i < 0 || true;    "

//@ assert 10/i < 0 ||true;    "

//@ assert i == 0 || 10/i < 0 || true;    "

//@ assert 10%i < 0 ||true;    "

//@ assert i == 0 || 10%i < 0 || true;    "

//@ assert i<10;    "

//@ assert i<10;    "

//@ assert i>=10;    "

//@ assert i<10;    "

//@ assert i>10;    "

//@ assert i<10;    "

//@ assert i<=10;    "

//@ assert i>=10;    "

//@ assert i<10;    "

//@ assert i<=10;    "

//@ assert i>10;    "

//@ requires arg != null;     "

//@ assert i == arg.length;    "

//@ requires arg != null;     "

//@ unreachable;    "

//@ assert !b;    "

//@ assert b;    "

//@ assert !b;    "

//@ assert b;    "

//@ assert b;    "

//@ assert b;    "

//@ assert b;    "

//@ assert b;    "

//@ assert a == 5;    "

//@ assert a == 5;    "

//@ assert g == 5;    "

//@ assert g == 5;    "

//@ assert a == 1;    "

//@ assert g == 1;    "

//@ assert g == 1;    "

//@ assert s = \"xy\";    "

//@ assert s = \"x1\";    "

//@ assert s = \"xtrue\";    "

//@ assert s = \"falsex\";    "

//@ assert s = \"xnull\";    "

//@ requires a.length > 10;    "

//@ ghost boolean b = Integer.class <: Number.class;    "

//@ ghost boolean bb = Number.class <: Boolean.class;    "

//@ assert b && !bb;    "

//@ requires clazz <: Number.class;    "

//@ assignable j;    "

//@ ensures j > 100;    "

//@ also    "

//@ requires clazz <: Boolean.class;    "

//@ assignable j;    "

//@ ensures j > 200;    "

//@ also    "

//@ requires clazz <: String.class;    "

//@ assignable j;    "

//@ ensures j > 200;    "

//@ requires i > 0;    "

//@ assignable j;    "

//@ ensures j > 100;    "

//@ also    "

//@ requires i >= 2;    "

//@ assignable j;    "

//@ ensures j > 200;    "

//@ assert a == 7;    "

//@ assert a == 4;    "

//@ assert a == 4;    "

//@ requires i == 4;    "

//@ ensures \\result == 5;    "

//@ also    "

//@ requires i == 5;    "

//@ ensures \\result == 6;    "

/*@ pure */
//@ assert 0<m(3);    "

//@ old int j = i+2;    "

//@ requires 0 <= j && j < 10;    "

//@ requires a != null && a.length == 10;    "

//@ assignable a[j];    "

//@ ensures a[j] == 42;    "

//@ requires 0 <= i && i < 8;    "

//@ requires a != null && a.length == 10;    "

//@ assignable a[i];    "

//@ requires 0 <= i && i < 8;    "

//@ requires a != null && a.length == 10;    "

//@ assignable a[i+2];    "

//@ old int j = i+1;    "

//@ requires 0 <= j && j < 9;    "

//@ requires a != null && a.length == 10;    "

//@ assignable a[j];    "

//@ old int j = i+off;    "

//@ requires a != null && a.length == 100;    "

//@ requires 0 <= i && i < 50 && 0 <= off && off < 30;    "

//@ assignable a[j];    "

//@ requires 0 <= i && i < 50;    "

//@ requires a != null && a.length == 100;    "

//@ assignable a[i],a[i+10],a[i+25];    "

//@ assert i>0 ;    "

//@ requires i>=0;    "

//@ assert i>0 ;    "

//@ requires i>0;    "

//@ assert i>0 ;    "

//@ requires i>0;    "

//@ assert i>=0 ;    "

//@ requires i>0;    "

//@ also    "

//@ requires i==0;    "

//@ assert i>=0 ;    "

//@ assert i>0 ;    "

//@ requires i>=0;    "

//@ assert i>0 ;    "

//@ requires i>0;    "

//@ assert i>0 ;    "

//@ requires i>0;    "

//@ assert i>=0 ;    "

//@ requires i>0;    "

//@ also    "

//@ requires i==0;    "

//@ assert i>=0 ;    "

//@ requires i>0;    "

//@ ensures false;    "

//@ requires i>0;    "

//@ requires i<0;    "

//@ ensures false;    "

//@ requires i >= 0 && a[i]>0;    "

//@ requires i < a.length && a[i]>0;    "

//@ requires i >= 0 && i < a.length;    "

//@ requires a[i]>0;    "

//@ requires a.length > 10 && i < 5 && a[i]>0 ;    "

//@ requires i >= 0 && i < a.length;    "

//@ requires a[i]>0;    "

//@ signals (Exception) false;    "

//@ ensures false;    "

//@ ensures false;    "

//@ ensures true;    "

//@ signals (Exception e)  false;    "

//@ ensures false;    "

//@ requires i == 0;    "

//@ ensures false;    "

//@ also    "

//@ requires i!= 0;    "

//@ ensures true;    "

//@ requires i == 0;    "

//@ ensures true;    "

//@ also    "

//@ requires i!= 0;    "

//@ ensures false;    "

//@ requires i == 0;    "

//@ signals (Exception e) false;    "

//@ also    "

//@ requires i!= 0;    "

//@ signals (Exception e) true;    "

//@ requires i == 0;    "

//@ signals (Exception e) true;    "

//@ also    "

//@ requires i!= 0;    "

//@ signals (Exception e) false;    "

//@ signals (Exception e) \\exception == null;    "

//@ signals (Exception e) \\exception != null;    "

//@ signals (Exception) \\exception != null;    "

//@ public normal_behavior ensures iii == \\old(iii) + 3;    "

//@ public normal_behavior ensures iii == \\old(iii) + 3;    "

//@ public normal_behavior assignable iii; ensures iii == \\old(iii) + 1;    "

//@ public normal_behavior ensures i == \\old(i) + 3;    "

//@ public normal_behavior ensures i == \\old(i) + 3;    "

//@ public normal_behavior ensures i == \\old(i) + 1;    "

//@ public normal_behavior ensures iii == \\old(iii) + 3;    "

//@ public normal_behavior ensures iii == \\old(iii) + 3;    "

//@ public normal_behavior assignable iii; ensures iii == \\old(iii) + 1;    "

//@ public normal_behavior ensures i == \\old(i) + 3;    "

//@ public normal_behavior ensures i == \\old(i) + 3;    "

//@ public normal_behavior ensures i == \\old(i) + 1;    "

//@ requires i == 0;     "

//@ assert j == 0;    "

//@ assert \\old(i) == 0;    "

//@ assert \\old(j,a) == 0;    "

//@ assert \\old(i,a) == 0;    "

//@ assert \\old(j,b) == 1;    "

//@ assert \\old(i,b) == 1;    "

//@ assert \\pre(i) == 0;    "

//@ ensures \\result == 7;     "

/*@ signals_only \    othing;*/
//@ requires k > 0;      "

//@ ensures \\result == i* 2 + 1;     "

//@ ensures \\result == i* 2 + 1;     "

//@ ensures \\result == 1;     "

//@ ensures \\result == 0;     "

//@ ensures \\result == 0;     "

//@ ensures \\result == 1;     "

//@ ensures \\result == 2;     "

//@ ensures \\result == 2;     "   // Line 50

//@ ensures \\result == 3;     "

//@ assignable kk;    "

//@ ensures \\result == 3; signals (Exception e)  false;     "

//@ assignable kk;    "

//@ ensures \\result == 3; signals (Exception e)  kk == 1;     "

//@ assignable kk;    "

//@ ensures \\result == 3; signals (Exception e)  kk == 1;     "

//@ assignable kk;    "

//@ ensures \\result == 3; signals (Exception e) kk == 4;     "

//@ assignable kk;    "

//@ ensures i==0 ==> \\result == 4; signals (Exception e) false;     "

//@ assignable kk;    "

//@ ensures \\result == 3; signals (Exception e)  false;     "

//@ unreachable;    "

//@ requires i != 0;     "

//@ unreachable;    "

//@ ghost int k = 0;"

//@ set k = 1;    "

//@ assert k == 0;     "

//@ requires i != 0;     "

//@ ghost int k = 0;"

//@ set k = 1;    "

//@ assert k == 1;     "

//@ ghost int k = 0;"

//@ debug k = 1;    "

//@ assert k == 0;     "

//@ requires i != 0;     "

//@ ghost int k = 0;"

//@ debug k = 1;    "

//@ assert k == 1;     "

//@ ghost boolean k = true;"

//@ set k = (k <=!=> k);    "

//@ assert k;     "

//@ ghost boolean k = true;"

//@ set k = (k <==> k);    "

//@ assert k;     "

//@ ghost int k = 0;"

//@ debug k = 1;    "

//@ assert k == 0;     "

//@ requires i != 0;     "

//@ ghost int k = 0;"

//@ debug k = 1;    "

//@ assert k == 1;     "

//@ assert i == 0;    "

//@ havoc i;     "

//@ assert i == 0;    "

//@ ensures a[i]>0;    "

//@ requires i >= 0 && i < a.length;    "

//@ ensures a[i]==true || a[i]==false;    "

//@ signals (Exception) false;    "

//@ requires true;    "

//@ ensures \\result ==4;    "

//@ requires true;    "

//@ ensures \\result == 3;    "

//@ requires x >= 0;    "

//@ ensures \\result < 0;    "

//@ requires x >= 0;    "

//@ ensures \\result <= 0;    "

//@ assignable \\everything;    "

//@ ensures \\result == i;    "

//@ ensures i == \\old(i) + 1;    "

//@ assignable \\everything;    "

//@ ensures \\result == i;    "

//@ ensures i == \\old(i) - 1;    "

//@ assignable \\everything;    "

//@ ensures \\result == \\old(i);    "

//@ ensures i == \\old(i) + 1;    "

//@ assignable \\everything;    "

//@ ensures \\result == i;    "

//@ ensures i == \\old(i) + 1;    "

//@ assignable \\everything;    "

//@ ensures \\result == \\old(i);    "

//@ ensures i == \\old(i) - 1;    "

//@ assignable \\everything;    "

//@ ensures \\result == i;    "

//@ ensures i == \\old(i) - 1;    "

//@ requires p ==> q;    "

//@ ensures !p || q;    "

//@ requires p <==> q;    "

//@ ensures p == q;    "

//@ requires p <=!=> q;    "

//@ ensures p != q;    "

//@ requires p <== q;    "

//@ ensures p || !q;    "

//@ requires !p || q;    "

//@ ensures p ==> q;    "

//@ requires p == q;    "

//@ ensures p <==> q;    "

//@ requires p != q;    "

//@ ensures p <=!=> q;    "

//@ requires p || !q;    "

//@ ensures p <== q;    "

//@ requires i < 100000;    "

//@ ensures \\result == i;    "

//@ requires i < 100000;    "

//@ ensures \\result >= i;    "

//@ requires true;    "

//@ ensures \\result == i;    "

//@ requires i < 100000;    "

//@ ensures \\result >= i;    "

//@ requires true;    "

//@ ensures \\result >= i;    "

//@ requires true;    "

//@ ensures \\result == i;    "

//@ requires true;    "

//@ ensures \\result >= i;    "

//@ ensures \\result;    "

//@ requires a;    "

//@ ensures \\result;    "

//@ also     "

//@ requires !a;    "

//@ ensures \\result == b;    "

//@ requires a;    "

//@ ensures b;    "

//@ also     "

//@ requires !a;    "

//@ ensures \\result == b;    "

//@ requires a;    "

//@ ensures \\result == b;    "

//@ also     "

//@ requires !a;    "

//@ ensures \\result == false;    "

//@ requires i < 2 && i > -2; ensures \\result;    "

//@ ensures \\result;    "

//@ requires i < 30 && i > -30; ensures \\result;    "

//@ ensures \\result;    "

//@ requires a;    "

//@ ensures \\result;    "

//@ also     "

//@ requires !a;    "

//@ ensures \\result == b;    "

//@ requires a;    "

//@ ensures b;    "

//@ also     "

//@ requires !a;    "

//@ ensures \\result == b;    "

//@ requires a;    "

//@ ensures \\result == b;    "

//@ also     "

//@ requires !a;    "

//@ ensures \\result == false;    "

//@ requires i < 2 && i > -2; ensures \\result;    "

//@ ensures \\result;    "

//@ requires i < 30 && i > -30; ensures \\result;    "

//@ requires true;    "

//@ ensures b ==> (i!=5) ;    "

//@ ghost boolean bb = (\\lbl LBL_BB b);    "

//@ ghost boolean bbp = (\\lblpos LBL_BB2 (i!=5));    "

//@ ghost boolean bbn = (\\lblneg LBL_BB3 (i!=5));    "

//@ ghost int ii = (\\lbl LBL_BBI i);    "

//@ requires true;    "

//@ ensures \\result;    "

//@ requires p && q;    "

//@ ensures \\result;    "

//@ requires true;    "

//@ ensures \\result;    "

//@ requires p && !q;    "

//@ ensures \\result;    "

//@ requires true;    "

//@ ensures \\result;    "

//@ requires p && !q;    "

//@ ensures \\result;    "



//@ assert i == j;    "

//@ requires true;    "

//@ ensures \\result == 1;    "

//@ requires this.f == 1;    "

//@ ensures \\result == 1;    "

//@ requires true;    "

//@ ensures \\result == 1;    "

//@ requires f == 1;    "

//@ ensures \\result == 1;    "

//@ requires f == 1;    "

//@ ensures \\result == 1;    "

//@ requires true;    "

//@ ensures true;    "

/*@nullable*/
//@ requires p.f == 1;    "

//@ ensures \\result == 1;    "

//@ requires i < 100;    "

//@ ensures \\result == i;    "

//@ requires i < 100;    "

//@ ensures \\result == i+1;    "

/*@ assert s == 0; */
/*@ assert s == 1; */
/*@ assert s == 1; */
/*@ assert s == 0; */
/*@ nullable*/
//@ static public invariant CHILD == 3;    "

//@ helper pure     "

//@ assert CHILD == 3 ;    "

//@ static final public invariant CHILD == 3;    "

//@ public normal_behavior ensures true; static_initializer    "

//@ helper pure     "

//@ assert CHILD == 3 ;    "

/*@ final */
//@ helper pure     "

//@ assert CHILD == 3 ;    "

/*@ final */
/*@ final */
//@ public normal_behavior ensures true; static_initializer    "

//@  pure     "

//@ assert H.ZZZZ == 79 ;    "

//@ assert FIELD.length == 5 ;    "

//@ assert FIELD2.length == 6 ;    "

//@ assert H.CHILD.length == 5 ;    "

//@ assert H.CHILD2.length == 6 ;    "

/*@ final */
/*@ final */
/*@ final */
//@ public normal_behavior ensures true; static_initializer    "

//@ ensures true;    "

//@ model pure public int mm(int i);    "

//@ ensures true; pure    "

//@ ensures !\\fresh(\\result); pure    "

//@ model public <TT> TT mt(int i);    "

//@ ensures !\\fresh(\\result); pure    "


//@ ensures true; pure    "

//@ model function public static int mf(int i);    "

//@ ensures true; pure    "

//@ function     "

//@ ensures mm(i) == mm(i);    "

//@ ensures mmr(i) == \\result;    "

//@ ensures mt(i) == mt(i);    "

//@ ensures mtr(i) == \\result;    "


//@ ensures mf(i) == mf(i);    "

//@ ensures mfr(i) == \\result;    "


//@ ensures \\fresh(\\result); pure    "

//@ ensures \\result == null || !\\fresh(\\result); pure    " // FIXME - should this work -= does not prevent the result from being fresh for m2 while not for mm2

//@ ensures \\result == o; pure    "


//@ ensures true; pure    "

//@ ensures \\fresh(\\result);    "  // Line 10

//@ ensures mm(i) == \\result;    " // ERROR - not necessarily the case

//@ ensures \\result == null || !\\fresh(\\result);    "

//@ ensures mm2(i) == \\result;    "


//@ ensures mm3(i) == \\result;    " // Line 20 // ERROR - not necessarily the case

//@ ensures true; pure     "

//@ assert i==1 ==> j == mpure(1);     "

//@ assert i==2 ==> j == mpure(2);     "

//@ assert i==3 ==> j == mpure(1);     " // CAN'T PROVE

//@ assert i==3 ==> j != mpure(1);     " // CAN'T PROVE

//@ ensures true; pure     "

//@ assert i==1 ==> j == mpure(1);     " // CAN'T PROVE

//@ assert i==2 ==> j == mpure(2);     " // CAN'T PROVE

//@ assert i==3 ==> j == mpure(1);     " // CAN'T PROVE

//@ assert i==3 ==> j != mpure(1);     " // CAN'T PROVE

//@ requires true;    "

//@ assert i == 0 ;    "

//@ requires i == 0;    "

//@ assert i == 0 ;    "

//@ assume i == 0 ;    "

//@ assert i == 0 ;    "

//@ requires true;    "

//@ requires true;    "

//@ requires i == 0;    "

//@ assume i == 0 ;    "

//@ requires 10/i < 0;    "

//@ requires i != 0 && 10/i < 0;    "

//@ ensures 10/i < 0 || true;    "

//@ ensures i == 0 || 10/i < 0 || true;    "

//@ assume 10/i < 0 || true;    "

//@ assume i == 0 || 10/i < 0 || true;    "

//@ assert 10/i < 0 ||true;    "

//@ assert i == 0 || 10/i < 0 || true;    "

//@ assert 10%i < 0 ||true;    "

//@ assert i == 0 || 10%i < 0 || true;    "

//@ assert i<10;    "

//@ assert i<10;    "

//@ assert i>=10;    "

//@ assert i<10;    "

//@ assert i>10;    "

//@ assert i<10;    "

//@ assert i<=10;    "

//@ assert i>=10;    "

//@ assert i<10;    "

//@ assert i<=10;    "

//@ assert i>10;    "

//@ requires arg != null;     "

//@ assert i == arg.length;    "

//@ requires arg != null;     "

//@ unreachable;    "

//@ assert !b;    "

//@ assert b;    "

//@ assert !b;    "

//@ assert b;    "

//@ assert b;    "

//@ assert b;    "

//@ assert b;    "

//@ assert b;    "

//@ assert a == 5;    "

//@ assert a == 5;    "

//@ assert g == 5;    "

//@ assert g == 5;    "

//@ assert a == 1;    "

//@ assert g == 1;    "

//@ assert g == 1;    "

//@ assert s = \"xy\";    "

//@ assert s = \"x1\";    "

//@ assert s = \"xtrue\";    "

//@ assert s = \"falsex\";    "

//@ assert s = \"xnull\";    "

//@ requires a.length > 10;    "

//@ ghost boolean b = Integer.class <: Number.class;    "

//@ ghost boolean bb = Number.class <: Boolean.class;    "

//@ assert b && !bb;    "

//@ requires clazz <: Number.class;    "

//@ assignable j;    "

//@ ensures j > 100;    "

//@ also    "

//@ requires clazz <: Boolean.class;    "

//@ assignable j;    "

//@ ensures j > 200;    "

//@ also    "

//@ requires clazz <: String.class;    "

//@ assignable j;    "

//@ ensures j > 200;    "

//@ requires i > 0;    "

//@ assignable j;    "

//@ ensures j > 100;    "

//@ also    "

//@ requires i >= 2;    "

//@ assignable j;    "

//@ ensures j > 200;    "

//@ assert a == 7;    "

//@ assert a == 4;    "

//@ assert a == 4;    "

//@ requires i == 4;    "

//@ ensures \\result == 5;    "

//@ also    "

//@ requires i == 5;    "

//@ ensures \\result == 6;    "

/*@ pure */
//@ assert 0<m(3);    "

//@ old int j = i+2;    "

//@ requires 0 <= j && j < 10;    "

//@ requires a != null && a.length == 10;    "

//@ assignable a[j];    "

//@ ensures a[j] == 42;    "

//@ requires 0 <= i && i < 8;    "

//@ requires a != null && a.length == 10;    "

//@ assignable a[i];    "

//@ requires 0 <= i && i < 8;    "

//@ requires a != null && a.length == 10;    "

//@ assignable a[i+2];    "

//@ old int j = i+1;    "

//@ requires 0 <= j && j < 9;    "

//@ requires a != null && a.length == 10;    "

//@ assignable a[j];    "

//@ old int j = i+off;    "

//@ requires a != null && a.length == 100;    "

//@ requires 0 <= i && i < 50 && 0 <= off && off < 30;    "

//@ assignable a[j];    "

//@ requires 0 <= i && i < 50;    "

//@ requires a != null && a.length == 100;    "

//@ assignable a[i],a[i+10],a[i+25];    "

//@ assert i>0 ;    "

//@ requires i>=0;    "

//@ assert i>0 ;    "

//@ requires i>0;    "

//@ assert i>0 ;    "

//@ requires i>0;    "

//@ assert i>=0 ;    "

//@ requires i>0;    "

//@ also    "

//@ requires i==0;    "

//@ assert i>=0 ;    "

//@ assert i>0 ;    "

//@ requires i>=0;    "

//@ assert i>0 ;    "

//@ requires i>0;    "

//@ assert i>0 ;    "

//@ requires i>0;    "

//@ assert i>=0 ;    "

//@ requires i>0;    "

//@ also    "

//@ requires i==0;    "

//@ assert i>=0 ;    "

//@ requires i>0;    "

//@ ensures false;    "

//@ requires i>0;    "

//@ requires i<0;    "

//@ ensures false;    "

//@ requires i >= 0 && a[i]>0;    "

//@ requires i < a.length && a[i]>0;    "

//@ requires i >= 0 && i < a.length;    "

//@ requires a[i]>0;    "

//@ requires a.length > 10 && i < 5 && a[i]>0 ;    "

//@ requires i >= 0 && i < a.length;    "

//@ requires a[i]>0;    "

//@ signals (Exception) false;    "

//@ ensures false;    "

//@ ensures false;    "

//@ ensures true;    "

//@ signals (Exception e)  false;    "

//@ ensures false;    "

//@ requires i == 0;    "

//@ ensures false;    "

//@ also    "

//@ requires i!= 0;    "

//@ ensures true;    "

//@ requires i == 0;    "

//@ ensures true;    "

//@ also    "

//@ requires i!= 0;    "

//@ ensures false;    "

//@ requires i == 0;    "

//@ signals (Exception e) false;    "

//@ also    "

//@ requires i!= 0;    "

//@ signals (Exception e) true;    "

//@ requires i == 0;    "

//@ signals (Exception e) true;    "

//@ also    "

//@ requires i!= 0;    "

//@ signals (Exception e) false;    "

//@ signals (Exception e) \\exception == null;    "

//@ signals (Exception e) \\exception != null;    "

//@ signals (Exception) \\exception != null;    "

//@ public normal_behavior ensures iii == \\old(iii) + 3;    "

//@ public normal_behavior ensures iii == \\old(iii) + 3;    "

//@ public normal_behavior assignable iii; ensures iii == \\old(iii) + 1;    "

//@ public normal_behavior ensures i == \\old(i) + 3;    "

//@ public normal_behavior ensures i == \\old(i) + 3;    "

//@ public normal_behavior ensures i == \\old(i) + 1;    "

//@ public normal_behavior ensures iii == \\old(iii) + 3;    "

//@ public normal_behavior ensures iii == \\old(iii) + 3;    "

//@ public normal_behavior assignable iii; ensures iii == \\old(iii) + 1;    "

//@ public normal_behavior ensures i == \\old(i) + 3;    "

//@ public normal_behavior ensures i == \\old(i) + 3;    "

//@ public normal_behavior ensures i == \\old(i) + 1;    "

//@ requires i == 0;     "

//@ assert j == 0;    "

//@ assert \\old(i) == 0;    "

//@ assert \\old(j,a) == 0;    "

//@ assert \\old(i,a) == 0;    "

//@ assert \\old(j,b) == 1;    "

//@ assert \\old(i,b) == 1;    "

//@ assert \\pre(i) == 0;    "

//@ ensures \\result == 7;     "

/*@ signals_only \    othing;*/
//@ requires k > 0;      "

//@ ensures \\result == i* 2 + 1;     "

//@ ensures \\result == i* 2 + 1;     "

//@ ensures \\result == 1;     "

//@ ensures \\result == 0;     "

//@ ensures \\result == 0;     "

//@ ensures \\result == 1;     "

//@ ensures \\result == 2;     "

//@ ensures \\result == 2;     "   // Line 50

//@ ensures \\result == 3;     "

//@ assignable kk;    "

//@ ensures \\result == 3; signals (Exception e)  false;     "

//@ assignable kk;    "

//@ ensures \\result == 3; signals (Exception e)  kk == 1;     "

//@ assignable kk;    "

//@ ensures \\result == 3; signals (Exception e)  kk == 1;     "

//@ assignable kk;    "

//@ ensures \\result == 3; signals (Exception e) kk == 4;     "

//@ assignable kk;    "

//@ ensures i==0 ==> \\result == 4; signals (Exception e) false;     "

//@ assignable kk;    "

//@ ensures \\result == 3; signals (Exception e)  false;     "

//@ unreachable;    "

//@ requires i != 0;     "

//@ unreachable;    "

//@ ghost int k = 0;"

//@ set k = 1;    "

//@ assert k == 0;     "

//@ requires i != 0;     "

//@ ghost int k = 0;"

//@ set k = 1;    "

//@ assert k == 1;     "

//@ ghost int k = 0;"

//@ debug k = 1;    "

//@ assert k == 0;     "

//@ requires i != 0;     "

//@ ghost int k = 0;"

//@ debug k = 1;    "

//@ assert k == 1;     "

//@ ghost boolean k = true;"

//@ set k = (k <=!=> k);    "

//@ assert k;     "

//@ ghost boolean k = true;"

//@ set k = (k <==> k);    "

//@ assert k;     "

//@ ghost int k = 0;"

//@ debug k = 1;    "

//@ assert k == 0;     "

//@ requires i != 0;     "

//@ ghost int k = 0;"

//@ debug k = 1;    "

//@ assert k == 1;     "

//@ assert i == 0;    "

//@ havoc i;     "

//@ assert i == 0;    "

//@ ensures a[i]>0;    "

//@ requires i >= 0 && i < a.length;    "

//@ ensures a[i]==true || a[i]==false;    "

//@ signals (Exception) false;    "

//@ requires true;    "

//@ ensures \\result ==4;    "

//@ requires true;    "

//@ ensures \\result == 3;    "

//@ requires x >= 0;    "

//@ ensures \\result < 0;    "

//@ requires x >= 0;    "

//@ ensures \\result <= 0;    "

//@ assignable \\everything;    "

//@ ensures \\result == i;    "

//@ ensures i == \\old(i) + 1;    "

//@ assignable \\everything;    "

//@ ensures \\result == i;    "

//@ ensures i == \\old(i) - 1;    "

//@ assignable \\everything;    "

//@ ensures \\result == \\old(i);    "

//@ ensures i == \\old(i) + 1;    "

//@ assignable \\everything;    "

//@ ensures \\result == i;    "

//@ ensures i == \\old(i) + 1;    "

//@ assignable \\everything;    "

//@ ensures \\result == \\old(i);    "

//@ ensures i == \\old(i) - 1;    "

//@ assignable \\everything;    "

//@ ensures \\result == i;    "

//@ ensures i == \\old(i) - 1;    "

//@ requires p ==> q;    "

//@ ensures !p || q;    "

//@ requires p <==> q;    "

//@ ensures p == q;    "

//@ requires p <=!=> q;    "

//@ ensures p != q;    "

//@ requires p <== q;    "

//@ ensures p || !q;    "

//@ requires !p || q;    "

//@ ensures p ==> q;    "

//@ requires p == q;    "

//@ ensures p <==> q;    "

//@ requires p != q;    "

//@ ensures p <=!=> q;    "

//@ requires p || !q;    "

//@ ensures p <== q;    "

//@ requires i < 100000;    "

//@ ensures \\result == i;    "

//@ requires i < 100000;    "

//@ ensures \\result >= i;    "

//@ requires true;    "

//@ ensures \\result == i;    "

//@ requires i < 100000;    "

//@ ensures \\result >= i;    "

//@ requires true;    "

//@ ensures \\result >= i;    "

//@ requires true;    "

//@ ensures \\result == i;    "

//@ requires true;    "

//@ ensures \\result >= i;    "

//@ ensures \\result;    "

//@ requires a;    "

//@ ensures \\result;    "

//@ also     "

//@ requires !a;    "

//@ ensures \\result == b;    "

//@ requires a;    "

//@ ensures b;    "

//@ also     "

//@ requires !a;    "

//@ ensures \\result == b;    "

//@ requires a;    "

//@ ensures \\result == b;    "

//@ also     "

//@ requires !a;    "

//@ ensures \\result == false;    "

//@ requires i < 2 && i > -2; ensures \\result;    "

//@ ensures \\result;    "

//@ requires i < 30 && i > -30; ensures \\result;    "

//@ ensures \\result;    "

//@ requires a;    "

//@ ensures \\result;    "

//@ also     "

//@ requires !a;    "

//@ ensures \\result == b;    "

//@ requires a;    "

//@ ensures b;    "

//@ also     "

//@ requires !a;    "

//@ ensures \\result == b;    "

//@ requires a;    "

//@ ensures \\result == b;    "

//@ also     "

//@ requires !a;    "

//@ ensures \\result == false;    "

//@ requires i < 2 && i > -2; ensures \\result;    "

//@ ensures \\result;    "

//@ requires i < 30 && i > -30; ensures \\result;    "

//@ requires true;    "

//@ ensures b ==> (i!=5) ;    "

//@ ghost boolean bb = (\\lbl LBL_BB b);    "

//@ ghost boolean bbp = (\\lblpos LBL_BB2 (i!=5));    "

//@ ghost boolean bbn = (\\lblneg LBL_BB3 (i!=5));    "

//@ ghost int ii = (\\lbl LBL_BBI i);    "

//@ requires true;    "

//@ ensures \\result;    "

//@ requires p && q;    "

//@ ensures \\result;    "

//@ requires true;    "

//@ ensures \\result;    "

//@ requires p && !q;    "

//@ ensures \\result;    "

//@ requires true;    "

//@ ensures \\result;    "

//@ requires p && !q;    "

//@ ensures \\result;    "



//@ assert i == j;    "

//@ requires true;    "

//@ ensures \\result == 1;    "

//@ requires this.f == 1;    "

//@ ensures \\result == 1;    "

//@ requires true;    "

//@ ensures \\result == 1;    "

//@ requires f == 1;    "

//@ ensures \\result == 1;    "

//@ requires f == 1;    "

//@ ensures \\result == 1;    "

//@ requires true;    "

//@ ensures true;    "

/*@nullable*/
//@ requires p.f == 1;    "

//@ ensures \\result == 1;    "

//@ requires i < 100;    "

//@ ensures \\result == i;    "

//@ requires i < 100;    "

//@ ensures \\result == i+1;    "

/*@ assert s == 0; */
/*@ assert s == 1; */
/*@ assert s == 1; */
/*@ assert s == 0; */
/*@ nullable*/
//@ static public invariant CHILD == 3;    "

//@ helper pure     "

//@ assert CHILD == 3 ;    "

//@ static final public invariant CHILD == 3;    "

//@ public normal_behavior ensures true; static_initializer    "

//@ helper pure     "

//@ assert CHILD == 3 ;    "

/*@ final */
//@ helper pure     "

//@ assert CHILD == 3 ;    "

/*@ final */
/*@ final */
//@ public normal_behavior ensures true; static_initializer    "

//@  pure     "

//@ assert H.ZZZZ == 79 ;    "

//@ assert FIELD.length == 5 ;    "

//@ assert FIELD2.length == 6 ;    "

//@ assert H.CHILD.length == 5 ;    "

//@ assert H.CHILD2.length == 6 ;    "

/*@ final */
/*@ final */
/*@ final */
//@ public normal_behavior ensures true; static_initializer    "

//@ ensures true;    "

//@ model pure public int mm(int i);    "

//@ ensures true; pure    "

//@ ensures !\\fresh(\\result); pure    "

//@ model public <TT> TT mt(int i);    "

//@ ensures !\\fresh(\\result); pure    "


//@ ensures true; pure    "

//@ model function public static int mf(int i);    "

//@ ensures true; pure    "

//@ function     "

//@ ensures mm(i) == mm(i);    "

//@ ensures mmr(i) == \\result;    "

//@ ensures mt(i) == mt(i);    "

//@ ensures mtr(i) == \\result;    "


//@ ensures mf(i) == mf(i);    "

//@ ensures mfr(i) == \\result;    "


//@ ensures \\fresh(\\result); pure    "

//@ ensures \\result == null || !\\fresh(\\result); pure    " // FIXME - should this work -= does not prevent the result from being fresh for m2 while not for mm2

//@ ensures \\result == o; pure    "


//@ ensures true; pure    "

//@ ensures \\fresh(\\result);    "  // Line 10

//@ ensures mm(i) == \\result;    " // ERROR - not necessarily the case

//@ ensures \\result == null || !\\fresh(\\result);    "

//@ ensures mm2(i) == \\result;    "


//@ ensures mm3(i) == \\result;    " // Line 20 // ERROR - not necessarily the case

//@ ensures true; pure     "

//@ assert i==1 ==> j == mpure(1);     "

//@ assert i==2 ==> j == mpure(2);     "

//@ assert i==3 ==> j == mpure(1);     " // CAN'T PROVE

//@ assert i==3 ==> j != mpure(1);     " // CAN'T PROVE

//@ ensures true; pure     "

//@ assert i==1 ==> j == mpure(1);     " // CAN'T PROVE

//@ assert i==2 ==> j == mpure(2);     " // CAN'T PROVE

//@ assert i==3 ==> j == mpure(1);     " // CAN'T PROVE

//@ assert i==3 ==> j != mpure(1);     " // CAN'T PROVE

//@ requires true;    "

//@ assert i == 0 ;    "

//@ requires i == 0;    "

//@ assert i == 0 ;    "

//@ assume i == 0 ;    "

//@ assert i == 0 ;    "

//@ requires true;    "

//@ requires true;    "

//@ requires i == 0;    "

//@ assume i == 0 ;    "

//@ requires 10/i < 0;    "

//@ requires i != 0 && 10/i < 0;    "

//@ ensures 10/i < 0 || true;    "

//@ ensures i == 0 || 10/i < 0 || true;    "

//@ assume 10/i < 0 || true;    "

//@ assume i == 0 || 10/i < 0 || true;    "

//@ assert 10/i < 0 ||true;    "

//@ assert i == 0 || 10/i < 0 || true;    "

//@ assert 10%i < 0 ||true;    "

//@ assert i == 0 || 10%i < 0 || true;    "

//@ assert i<10;    "

//@ assert i<10;    "

//@ assert i>=10;    "

//@ assert i<10;    "

//@ assert i>10;    "

//@ assert i<10;    "

//@ assert i<=10;    "

//@ assert i>=10;    "

//@ assert i<10;    "

//@ assert i<=10;    "

//@ assert i>10;    "

//@ requires arg != null;     "

//@ assert i == arg.length;    "

//@ requires arg != null;     "

//@ unreachable;    "

//@ assert !b;    "

//@ assert b;    "

//@ assert !b;    "

//@ assert b;    "

//@ assert b;    "

//@ assert b;    "

//@ assert b;    "

//@ assert b;    "

//@ assert a == 5;    "

//@ assert a == 5;    "

//@ assert g == 5;    "

//@ assert g == 5;    "

//@ assert a == 1;    "

//@ assert g == 1;    "

//@ assert g == 1;    "

//@ assert s = \"xy\";    "

//@ assert s = \"x1\";    "

//@ assert s = \"xtrue\";    "

//@ assert s = \"falsex\";    "

//@ assert s = \"xnull\";    "

//@ requires a.length > 10;    "

//@ ghost boolean b = Integer.class <: Number.class;    "

//@ ghost boolean bb = Number.class <: Boolean.class;    "

//@ assert b && !bb;    "

//@ requires clazz <: Number.class;    "

//@ assignable j;    "

//@ ensures j > 100;    "

//@ also    "

//@ requires clazz <: Boolean.class;    "

//@ assignable j;    "

//@ ensures j > 200;    "

//@ also    "

//@ requires clazz <: String.class;    "

//@ assignable j;    "

//@ ensures j > 200;    "

//@ requires i > 0;    "

//@ assignable j;    "

//@ ensures j > 100;    "

//@ also    "

//@ requires i >= 2;    "

//@ assignable j;    "

//@ ensures j > 200;    "

//@ assert a == 7;    "

//@ assert a == 4;    "

//@ assert a == 4;    "

//@ requires i == 4;    "

//@ ensures \\result == 5;    "

//@ also    "

//@ requires i == 5;    "

//@ ensures \\result == 6;    "

/*@ pure */
//@ assert 0<m(3);    "

//@ old int j = i+2;    "

//@ requires 0 <= j && j < 10;    "

//@ requires a != null && a.length == 10;    "

//@ assignable a[j];    "

//@ ensures a[j] == 42;    "

//@ requires 0 <= i && i < 8;    "

//@ requires a != null && a.length == 10;    "

//@ assignable a[i];    "

//@ requires 0 <= i && i < 8;    "

//@ requires a != null && a.length == 10;    "

//@ assignable a[i+2];    "

//@ old int j = i+1;    "

//@ requires 0 <= j && j < 9;    "

//@ requires a != null && a.length == 10;    "

//@ assignable a[j];    "

//@ old int j = i+off;    "

//@ requires a != null && a.length == 100;    "

//@ requires 0 <= i && i < 50 && 0 <= off && off < 30;    "

//@ assignable a[j];    "

//@ requires 0 <= i && i < 50;    "

//@ requires a != null && a.length == 100;    "

//@ assignable a[i],a[i+10],a[i+25];    "

//@ assert i>0 ;    "

//@ requires i>=0;    "

//@ assert i>0 ;    "

//@ requires i>0;    "

//@ assert i>0 ;    "

//@ requires i>0;    "

//@ assert i>=0 ;    "

//@ requires i>0;    "

//@ also    "

//@ requires i==0;    "

//@ assert i>=0 ;    "

//@ assert i>0 ;    "

//@ requires i>=0;    "

//@ assert i>0 ;    "

//@ requires i>0;    "

//@ assert i>0 ;    "

//@ requires i>0;    "

//@ assert i>=0 ;    "

//@ requires i>0;    "

//@ also    "

//@ requires i==0;    "

//@ assert i>=0 ;    "

//@ requires i>0;    "

//@ ensures false;    "

//@ requires i>0;    "

//@ requires i<0;    "

//@ ensures false;    "

//@ requires i >= 0 && a[i]>0;    "

//@ requires i < a.length && a[i]>0;    "

//@ requires i >= 0 && i < a.length;    "

//@ requires a[i]>0;    "

//@ requires a.length > 10 && i < 5 && a[i]>0 ;    "

//@ requires i >= 0 && i < a.length;    "

//@ requires a[i]>0;    "

//@ signals (Exception) false;    "

//@ ensures false;    "

//@ ensures false;    "

//@ ensures true;    "

//@ signals (Exception e)  false;    "

//@ ensures false;    "

//@ requires i == 0;    "

//@ ensures false;    "

//@ also    "

//@ requires i!= 0;    "

//@ ensures true;    "

//@ requires i == 0;    "

//@ ensures true;    "

//@ also    "

//@ requires i!= 0;    "

//@ ensures false;    "

//@ requires i == 0;    "

//@ signals (Exception e) false;    "

//@ also    "

//@ requires i!= 0;    "

//@ signals (Exception e) true;    "

//@ requires i == 0;    "

//@ signals (Exception e) true;    "

//@ also    "

//@ requires i!= 0;    "

//@ signals (Exception e) false;    "

//@ signals (Exception e) \\exception == null;    "

//@ signals (Exception e) \\exception != null;    "

//@ signals (Exception) \\exception != null;    "

//@ public normal_behavior ensures iii == \\old(iii) + 3;    "

//@ public normal_behavior ensures iii == \\old(iii) + 3;    "

//@ public normal_behavior assignable iii; ensures iii == \\old(iii) + 1;    "

//@ public normal_behavior ensures i == \\old(i) + 3;    "

//@ public normal_behavior ensures i == \\old(i) + 3;    "

//@ public normal_behavior ensures i == \\old(i) + 1;    "

//@ public normal_behavior ensures iii == \\old(iii) + 3;    "

//@ public normal_behavior ensures iii == \\old(iii) + 3;    "

//@ public normal_behavior assignable iii; ensures iii == \\old(iii) + 1;    "

//@ public normal_behavior ensures i == \\old(i) + 3;    "

//@ public normal_behavior ensures i == \\old(i) + 3;    "

//@ public normal_behavior ensures i == \\old(i) + 1;    "

//@ requires i == 0;     "

//@ assert j == 0;    "

//@ assert \\old(i) == 0;    "

//@ assert \\old(j,a) == 0;    "

//@ assert \\old(i,a) == 0;    "

//@ assert \\old(j,b) == 1;    "

//@ assert \\old(i,b) == 1;    "

//@ assert \\pre(i) == 0;    "

//@ ensures \\result == 7;     "

/*@ signals_only \    othing;*/
//@ requires k > 0;      "

//@ ensures \\result == i* 2 + 1;     "

//@ ensures \\result == i* 2 + 1;     "

//@ ensures \\result == 1;     "

//@ ensures \\result == 0;     "

//@ ensures \\result == 0;     "

//@ ensures \\result == 1;     "

//@ ensures \\result == 2;     "

//@ ensures \\result == 2;     "   // Line 50

//@ ensures \\result == 3;     "

//@ assignable kk;    "

//@ ensures \\result == 3; signals (Exception e)  false;     "

//@ assignable kk;    "

//@ ensures \\result == 3; signals (Exception e)  kk == 1;     "

//@ assignable kk;    "

//@ ensures \\result == 3; signals (Exception e)  kk == 1;     "

//@ assignable kk;    "

//@ ensures \\result == 3; signals (Exception e) kk == 4;     "

//@ assignable kk;    "

//@ ensures i==0 ==> \\result == 4; signals (Exception e) false;     "

//@ assignable kk;    "

//@ ensures \\result == 3; signals (Exception e)  false;     "

//@ unreachable;    "

//@ requires i != 0;     "

//@ unreachable;    "

//@ ghost int k = 0;"

//@ set k = 1;    "

//@ assert k == 0;     "

//@ requires i != 0;     "

//@ ghost int k = 0;"

//@ set k = 1;    "

//@ assert k == 1;     "

//@ ghost int k = 0;"

//@ debug k = 1;    "

//@ assert k == 0;     "

//@ requires i != 0;     "

//@ ghost int k = 0;"

//@ debug k = 1;    "

//@ assert k == 1;     "

//@ ghost boolean k = true;"

//@ set k = (k <=!=> k);    "

//@ assert k;     "

//@ ghost boolean k = true;"

//@ set k = (k <==> k);    "

//@ assert k;     "

//@ ghost int k = 0;"

//@ debug k = 1;    "

//@ assert k == 0;     "

//@ requires i != 0;     "

//@ ghost int k = 0;"

//@ debug k = 1;    "

//@ assert k == 1;     "

//@ assert i == 0;    "

//@ havoc i;     "

//@ assert i == 0;    "

//@ ensures a[i]>0;    "

//@ requires i >= 0 && i < a.length;    "

//@ ensures a[i]==true || a[i]==false;    "

//@ signals (Exception) false;    "

//@ requires true;    "

//@ ensures \\result ==4;    "

//@ requires true;    "

//@ ensures \\result == 3;    "

//@ requires x >= 0;    "

//@ ensures \\result < 0;    "

//@ requires x >= 0;    "

//@ ensures \\result <= 0;    "

//@ assignable \\everything;    "

//@ ensures \\result == i;    "

//@ ensures i == \\old(i) + 1;    "

//@ assignable \\everything;    "

//@ ensures \\result == i;    "

//@ ensures i == \\old(i) - 1;    "

//@ assignable \\everything;    "

//@ ensures \\result == \\old(i);    "

//@ ensures i == \\old(i) + 1;    "

//@ assignable \\everything;    "

//@ ensures \\result == i;    "

//@ ensures i == \\old(i) + 1;    "

//@ assignable \\everything;    "

//@ ensures \\result == \\old(i);    "

//@ ensures i == \\old(i) - 1;    "

//@ assignable \\everything;    "

//@ ensures \\result == i;    "

//@ ensures i == \\old(i) - 1;    "

//@ requires p ==> q;    "

//@ ensures !p || q;    "

//@ requires p <==> q;    "

//@ ensures p == q;    "

//@ requires p <=!=> q;    "

//@ ensures p != q;    "

//@ requires p <== q;    "

//@ ensures p || !q;    "

//@ requires !p || q;    "

//@ ensures p ==> q;    "

//@ requires p == q;    "

//@ ensures p <==> q;    "

//@ requires p != q;    "

//@ ensures p <=!=> q;    "

//@ requires p || !q;    "

//@ ensures p <== q;    "

//@ requires i < 100000;    "

//@ ensures \\result == i;    "

//@ requires i < 100000;    "

//@ ensures \\result >= i;    "

//@ requires true;    "

//@ ensures \\result == i;    "

//@ requires i < 100000;    "

//@ ensures \\result >= i;    "

//@ requires true;    "

//@ ensures \\result >= i;    "

//@ requires true;    "

//@ ensures \\result == i;    "

//@ requires true;    "

//@ ensures \\result >= i;    "

//@ ensures \\result;    "

//@ requires a;    "

//@ ensures \\result;    "

//@ also     "

//@ requires !a;    "

//@ ensures \\result == b;    "

//@ requires a;    "

//@ ensures b;    "

//@ also     "

//@ requires !a;    "

//@ ensures \\result == b;    "

//@ requires a;    "

//@ ensures \\result == b;    "

//@ also     "

//@ requires !a;    "

//@ ensures \\result == false;    "

//@ requires i < 2 && i > -2; ensures \\result;    "

//@ ensures \\result;    "

//@ requires i < 30 && i > -30; ensures \\result;    "

//@ ensures \\result;    "

//@ requires a;    "

//@ ensures \\result;    "

//@ also     "

//@ requires !a;    "

//@ ensures \\result == b;    "

//@ requires a;    "

//@ ensures b;    "

//@ also     "

//@ requires !a;    "

//@ ensures \\result == b;    "

//@ requires a;    "

//@ ensures \\result == b;    "

//@ also     "

//@ requires !a;    "

//@ ensures \\result == false;    "

//@ requires i < 2 && i > -2; ensures \\result;    "

//@ ensures \\result;    "

//@ requires i < 30 && i > -30; ensures \\result;    "

//@ requires true;    "

//@ ensures b ==> (i!=5) ;    "

//@ ghost boolean bb = (\\lbl LBL_BB b);    "

//@ ghost boolean bbp = (\\lblpos LBL_BB2 (i!=5));    "

//@ ghost boolean bbn = (\\lblneg LBL_BB3 (i!=5));    "

//@ ghost int ii = (\\lbl LBL_BBI i);    "

//@ requires true;    "

//@ ensures \\result;    "

//@ requires p && q;    "

//@ ensures \\result;    "

//@ requires true;    "

//@ ensures \\result;    "

//@ requires p && !q;    "

//@ ensures \\result;    "

//@ requires true;    "

//@ ensures \\result;    "

//@ requires p && !q;    "

//@ ensures \\result;    "



//@ assert i == j;    "

//@ requires true;    "

//@ ensures \\result == 1;    "

//@ requires this.f == 1;    "

//@ ensures \\result == 1;    "

//@ requires true;    "

//@ ensures \\result == 1;    "

//@ requires f == 1;    "

//@ ensures \\result == 1;    "

//@ requires f == 1;    "

//@ ensures \\result == 1;    "

//@ requires true;    "

//@ ensures true;    "

/*@nullable*/
//@ requires p.f == 1;    "

//@ ensures \\result == 1;    "

//@ requires i < 100;    "

//@ ensures \\result == i;    "

//@ requires i < 100;    "

//@ ensures \\result == i+1;    "

/*@ assert s == 0; */
/*@ assert s == 1; */
/*@ assert s == 1; */
/*@ assert s == 0; */
/*@ nullable*/
//@ static public invariant CHILD == 3;    "

//@ helper pure     "

//@ assert CHILD == 3 ;    "

//@ static final public invariant CHILD == 3;    "

//@ public normal_behavior ensures true; static_initializer    "

//@ helper pure     "

//@ assert CHILD == 3 ;    "

/*@ final */
//@ helper pure     "

//@ assert CHILD == 3 ;    "

/*@ final */
/*@ final */
//@ public normal_behavior ensures true; static_initializer    "

//@  pure     "

//@ assert H.ZZZZ == 79 ;    "

//@ assert FIELD.length == 5 ;    "

//@ assert FIELD2.length == 6 ;    "

//@ assert H.CHILD.length == 5 ;    "

//@ assert H.CHILD2.length == 6 ;    "

/*@ final */
/*@ final */
/*@ final */
//@ public normal_behavior ensures true; static_initializer    "

//@ ensures true;    "

//@ model pure public int mm(int i);    "

//@ ensures true; pure    "

//@ ensures !\\fresh(\\result); pure    "

//@ model public <TT> TT mt(int i);    "

//@ ensures !\\fresh(\\result); pure    "


//@ ensures true; pure    "

//@ model function public static int mf(int i);    "

//@ ensures true; pure    "

//@ function     "

//@ ensures mm(i) == mm(i);    "

//@ ensures mmr(i) == \\result;    "

//@ ensures mt(i) == mt(i);    "

//@ ensures mtr(i) == \\result;    "


//@ ensures mf(i) == mf(i);    "

//@ ensures mfr(i) == \\result;    "


//@ ensures \\fresh(\\result); pure    "

//@ ensures \\result == null || !\\fresh(\\result); pure    " // FIXME - should this work -= does not prevent the result from being fresh for m2 while not for mm2

//@ ensures \\result == o; pure    "


//@ ensures true; pure    "

//@ ensures \\fresh(\\result);    "  // Line 10

//@ ensures mm(i) == \\result;    " // ERROR - not necessarily the case

//@ ensures \\result == null || !\\fresh(\\result);    "

//@ ensures mm2(i) == \\result;    "


//@ ensures mm3(i) == \\result;    " // Line 20 // ERROR - not necessarily the case

//@ ensures true; pure     "

//@ assert i==1 ==> j == mpure(1);     "

//@ assert i==2 ==> j == mpure(2);     "

//@ assert i==3 ==> j == mpure(1);     " // CAN'T PROVE

//@ assert i==3 ==> j != mpure(1);     " // CAN'T PROVE

//@ ensures true; pure     "

//@ assert i==1 ==> j == mpure(1);     " // CAN'T PROVE

//@ assert i==2 ==> j == mpure(2);     " // CAN'T PROVE

//@ assert i==3 ==> j == mpure(1);     " // CAN'T PROVE

//@ assert i==3 ==> j != mpure(1);     " // CAN'T PROVE

//@ requires true;    "

//@ assert i == 0 ;    "

//@ requires i == 0;    "

//@ assert i == 0 ;    "

//@ assume i == 0 ;    "

//@ assert i == 0 ;    "

//@ requires true;    "

//@ requires true;    "

//@ requires i == 0;    "

//@ assume i == 0 ;    "

//@ requires 10/i < 0;    "

//@ requires i != 0 && 10/i < 0;    "

//@ ensures 10/i < 0 || true;    "

//@ ensures i == 0 || 10/i < 0 || true;    "

//@ assume 10/i < 0 || true;    "

//@ assume i == 0 || 10/i < 0 || true;    "

//@ assert 10/i < 0 ||true;    "

//@ assert i == 0 || 10/i < 0 || true;    "

//@ assert 10%i < 0 ||true;    "

//@ assert i == 0 || 10%i < 0 || true;    "

//@ assert i<10;    "

//@ assert i<10;    "

//@ assert i>=10;    "

//@ assert i<10;    "

//@ assert i>10;    "

//@ assert i<10;    "

//@ assert i<=10;    "

//@ assert i>=10;    "

//@ assert i<10;    "

//@ assert i<=10;    "

//@ assert i>10;    "

//@ requires arg != null;     "

//@ assert i == arg.length;    "

//@ requires arg != null;     "

//@ unreachable;    "

//@ assert !b;    "

//@ assert b;    "

//@ assert !b;    "

//@ assert b;    "

//@ assert b;    "

//@ assert b;    "

//@ assert b;    "

//@ assert b;    "

//@ assert a == 5;    "

//@ assert a == 5;    "

//@ assert g == 5;    "

//@ assert g == 5;    "

//@ assert a == 1;    "

//@ assert g == 1;    "

//@ assert g == 1;    "

//@ assert s = \"xy\";    "

//@ assert s = \"x1\";    "

//@ assert s = \"xtrue\";    "

//@ assert s = \"falsex\";    "

//@ assert s = \"xnull\";    "

//@ requires a.length > 10;    "

//@ ghost boolean b = Integer.class <: Number.class;    "

//@ ghost boolean bb = Number.class <: Boolean.class;    "

//@ assert b && !bb;    "

//@ requires clazz <: Number.class;    "

//@ assignable j;    "

//@ ensures j > 100;    "

//@ also    "

//@ requires clazz <: Boolean.class;    "

//@ assignable j;    "

//@ ensures j > 200;    "

//@ also    "

//@ requires clazz <: String.class;    "

//@ assignable j;    "

//@ ensures j > 200;    "

//@ requires i > 0;    "

//@ assignable j;    "

//@ ensures j > 100;    "

//@ also    "

//@ requires i >= 2;    "

//@ assignable j;    "

//@ ensures j > 200;    "

//@ assert a == 7;    "

//@ assert a == 4;    "

//@ assert a == 4;    "

//@ requires i == 4;    "

//@ ensures \\result == 5;    "

//@ also    "

//@ requires i == 5;    "

//@ ensures \\result == 6;    "

/*@ pure */
//@ assert 0<m(3);    "

//@ old int j = i+2;    "

//@ requires 0 <= j && j < 10;    "

//@ requires a != null && a.length == 10;    "

//@ assignable a[j];    "

//@ ensures a[j] == 42;    "

//@ requires 0 <= i && i < 8;    "

//@ requires a != null && a.length == 10;    "

//@ assignable a[i];    "

//@ requires 0 <= i && i < 8;    "

//@ requires a != null && a.length == 10;    "

//@ assignable a[i+2];    "

//@ old int j = i+1;    "

//@ requires 0 <= j && j < 9;    "

//@ requires a != null && a.length == 10;    "

//@ assignable a[j];    "

//@ old int j = i+off;    "

//@ requires a != null && a.length == 100;    "

//@ requires 0 <= i && i < 50 && 0 <= off && off < 30;    "

//@ assignable a[j];    "

//@ requires 0 <= i && i < 50;    "

//@ requires a != null && a.length == 100;    "

//@ assignable a[i],a[i+10],a[i+25];    "

//@   requires b;    "

//@   requires b;    "

//@ nowarn Precondition;     "

//@   ensures false;    "

//@   ensures false;    "

//@ nowarn Postcondition;     "

//@   ensures false;    "

//@   signals (Exception) false;    "

//@ public static invariant i>=0;    "

//@ assignable i;    "

//@ public initially i>=0;    "

//@ assignable i;    "

//@ public initially i>=0;    "

//@ assignable i;    "

//@ nowarn Initially;    "

//@ public initially i>=0;  nowarn Initially;    "

//@ assignable i;    "

//@ public constraint i>=\\old(i);    "

//@ public constraint i>=\\old(i);    "

//@ nowarn Constraint;    "

//@ public constraint i>=\\old(i);  //@ nowarn Constraint;    "

//@   requires b;    "

//@   requires b;    "

//@ nowarn Precondition;     "

//@   ensures false;    "

//@   ensures false;    "

//@ nowarn Postcondition;     "

//@   ensures false;    "

//@   signals (Exception) false;    "

//@ public static invariant i>=0;    "

//@ assignable i;    "

//@ public initially i>=0;    "

//@ assignable i;    "

//@ public initially i>=0;    "

//@ assignable i;    "

//@ nowarn Initially;    "

//@ public initially i>=0;  nowarn Initially;    "

//@ assignable i;    "

//@ public constraint i>=\\old(i);    "

//@ public constraint i>=\\old(i);    "

//@ nowarn Constraint;    "

//@ public constraint i>=\\old(i);  //@ nowarn Constraint;    "

//@   requires b;    "

//@   requires b;    "

//@ nowarn Precondition;     "

//@   ensures false;    "

//@   ensures false;    "

//@ nowarn Postcondition;     "

//@   ensures false;    "

//@   signals (Exception) false;    "

//@ public static invariant i>=0;    "

//@ assignable i;    "

//@ public initially i>=0;    "

//@ assignable i;    "

//@ public initially i>=0;    "

//@ assignable i;    "

//@ nowarn Initially;    "

//@ public initially i>=0;  nowarn Initially;    "

//@ assignable i;    "

//@ public constraint i>=\\old(i);    "

//@ public constraint i>=\\old(i);    "

//@ nowarn Constraint;    "

//@ public constraint i>=\\old(i);  //@ nowarn Constraint;    "

//@   requires b;    "

//@   requires b;    "

//@ nowarn Precondition;     "

//@   ensures false;    "

//@   ensures false;    "

//@ nowarn Postcondition;     "

//@   ensures false;    "

//@   signals (Exception) false;    "

//@ public static invariant i>=0;    "

//@ assignable i;    "

//@ public initially i>=0;    "

//@ assignable i;    "

//@ public initially i>=0;    "

//@ assignable i;    "

//@ nowarn Initially;    "

//@ public initially i>=0;  nowarn Initially;    "

//@ assignable i;    "

//@ public constraint i>=\\old(i);    "

//@ public constraint i>=\\old(i);    "

//@ nowarn Constraint;    "

//@ public constraint i>=\\old(i);  //@ nowarn Constraint;    "

//@   requires b;    "

//@   requires b;    "

//@ nowarn Precondition;     "

//@   ensures false;    "

//@   ensures false;    "

//@ nowarn Postcondition;     "

//@   ensures false;    "

//@   signals (Exception) false;    "

//@ public static invariant i>=0;    "

//@ assignable i;    "

//@ public initially i>=0;    "

//@ assignable i;    "

//@ public initially i>=0;    "

//@ assignable i;    "

//@ nowarn Initially;    "

//@ public initially i>=0;  nowarn Initially;    "

//@ assignable i;    "

//@ public constraint i>=\\old(i);    "

//@ public constraint i>=\\old(i);    "

//@ nowarn Constraint;    "

//@ public constraint i>=\\old(i);  //@ nowarn Constraint;    "

//@ requires bb;    "

//@ ensures true;    "

/*@ assume b; */
/*@assert false;*/
//@ requires bb;    "

//@ ensures true;    "

/*@ assume b; */
/*@assert !bb;*/
//@ requires bb;    "

//@ ensures true;    "

/*@ assume bb; */
/*@assert b;*/
//@ requires bb;    "

//@ ensures true;    "

/*@ assume b; */
/*@assert false;*/
//@ requires bb;    "

//@ ensures true;    "

/*@ assume b; */
/*@assert !bb;*/
//@ requires bb;    "

//@ ensures true;    "

/*@ assume bb; */
/*@assert b;*/
//@ requires bb;    "

//@ ensures true;    "

/*@ assume b; */
/*@assert false;*/
//@ requires bb;    "

//@ ensures true;    "

/*@ assume b; */
/*@assert !bb;*/
//@ requires bb;    "

//@ ensures true;    "

/*@ assume bb; */
/*@assert b;*/
//@ requires bb;    "

//@ ensures true;    "

/*@ assume b; */
/*@assert false;*/
//@ requires bb;    "

//@ ensures true;    "

//@ requires true;    "

//@ ensures true;    "

//@ requires bb;    "

//@ ensures true;    "

//@ requires bb;    "

//@ ensures true;    "

//@ skipesc     "

//@ requires bb;    "

//@ ensures true;    "

//@ requires true;    "

//@ ensures true;    "

//@ requires bb;    "

//@ ensures true;    "

//@ requires bb;    "

//@ ensures true;    "

//@ skipesc     "

//@ requires bb;    "

//@ ensures true;    "

//@ requires true;    "

//@ ensures true;    "

//@ requires bb;    "

//@ ensures true;    "

//@ requires bb;    "

//@ ensures true;    "

//@ skipesc     "

//@ requires bb;    "

//@ ensures true;    "

/*@ assume b; */
/*@assert false;*/
//@ requires bb;    "

//@ ensures true;    "

/*@ assume b; */
/*@assert !bb;*/
//@ requires bb;    "

//@ ensures true;    "

/*@ assume bb; */
/*@assert b;*/
//@ requires bb;    "

//@ ensures true;    "

/*@ assume b; */
/*@assert false;*/
//@ requires bb;    "

//@ ensures true;    "

/*@ assume b; */
/*@assert !bb;*/
//@ requires bb;    "

//@ ensures true;    "

/*@ assume bb; */
/*@assert b;*/
//@ requires bb;    "

//@ ensures true;    "

/*@ assume b; */
/*@assert false;*/
//@ requires bb;    "

//@ ensures true;    "

/*@ assume b; */
/*@assert !bb;*/
//@ requires bb;    "

//@ ensures true;    "

/*@ assume bb; */
/*@assert b;*/
//@ requires bb;    "

//@ ensures true;    "

/*@ assume b; */
/*@assert false;*/
//@ requires bb;    "

//@ ensures true;    "

//@ requires true;    "

//@ ensures true;    "

//@ requires bb;    "

//@ ensures true;    "

//@ requires bb;    "

//@ ensures true;    "

//@ skipesc     "

//@ requires bb;    "

//@ ensures true;    "

//@ requires true;    "

//@ ensures true;    "

//@ requires bb;    "

//@ ensures true;    "

//@ requires bb;    "

//@ ensures true;    "

//@ skipesc     "

//@ requires bb;    "

//@ ensures true;    "

//@ requires true;    "

//@ ensures true;    "

//@ requires bb;    "

//@ ensures true;    "

//@ requires bb;    "

//@ ensures true;    "

//@ skipesc     "

//@ requires bb;    "

//@ ensures true;    "

/*@ assume b; */
/*@assert false;*/
//@ requires bb;    "

//@ ensures true;    "

/*@ assume b; */
/*@assert !bb;*/
//@ requires bb;    "

//@ ensures true;    "

/*@ assume bb; */
/*@assert b;*/
//@ requires bb;    "

//@ ensures true;    "

/*@ assume b; */
/*@assert false;*/
//@ requires bb;    "

//@ ensures true;    "

/*@ assume b; */
/*@assert !bb;*/
//@ requires bb;    "

//@ ensures true;    "

/*@ assume bb; */
/*@assert b;*/
//@ requires bb;    "

//@ ensures true;    "

/*@ assume b; */
/*@assert false;*/
//@ requires bb;    "

//@ ensures true;    "

/*@ assume b; */
/*@assert !bb;*/
//@ requires bb;    "

//@ ensures true;    "

/*@ assume bb; */
/*@assert b;*/
//@ requires bb;    "

//@ ensures true;    "

/*@ assume b; */
/*@assert false;*/
//@ requires bb;    "

//@ ensures true;    "

//@ requires true;    "

//@ ensures true;    "

//@ requires bb;    "

//@ ensures true;    "

//@ requires bb;    "

//@ ensures true;    "

//@ skipesc     "

//@ requires bb;    "

//@ ensures true;    "

//@ requires true;    "

//@ ensures true;    "

//@ requires bb;    "

//@ ensures true;    "

//@ requires bb;    "

//@ ensures true;    "

//@ skipesc     "

//@ requires bb;    "

//@ ensures true;    "

//@ requires true;    "

//@ ensures true;    "

//@ requires bb;    "

//@ ensures true;    "

//@ requires bb;    "

//@ ensures true;    "

//@ skipesc     "

//@ requires bb;    "

//@ ensures true;    "

/*@ assume b; */
/*@assert false;*/
//@ requires bb;    "

//@ ensures true;    "

/*@ assume b; */
/*@assert !bb;*/
//@ requires bb;    "

//@ ensures true;    "

/*@ assume bb; */
/*@assert b;*/
//@ requires bb;    "

//@ ensures true;    "

/*@ assume b; */
/*@assert false;*/
//@ requires bb;    "

//@ ensures true;    "

/*@ assume b; */
/*@assert !bb;*/
//@ requires bb;    "

//@ ensures true;    "

/*@ assume bb; */
/*@assert b;*/
//@ requires bb;    "

//@ ensures true;    "

/*@ assume b; */
/*@assert false;*/
//@ requires bb;    "

//@ ensures true;    "

/*@ assume b; */
/*@assert !bb;*/
//@ requires bb;    "

//@ ensures true;    "

/*@ assume bb; */
/*@assert b;*/
//@ requires bb;    "

//@ ensures true;    "

/*@ assume b; */
/*@assert false;*/
//@ requires bb;    "

//@ ensures true;    "

//@ requires true;    "

//@ ensures true;    "

//@ requires bb;    "

//@ ensures true;    "

//@ requires bb;    "

//@ ensures true;    "

//@ skipesc     "

//@ requires bb;    "

//@ ensures true;    "

//@ requires true;    "

//@ ensures true;    "

//@ requires bb;    "

//@ ensures true;    "

//@ requires bb;    "

//@ ensures true;    "

//@ skipesc     "

//@ requires bb;    "

//@ ensures true;    "

//@ requires true;    "

//@ ensures true;    "

//@ requires bb;    "

//@ ensures true;    "

//@ requires bb;    "

//@ ensures true;    "

//@ skipesc     "

//@ requires bb;    "

//@ ensures true;    "

/*@ assume b; */
/*@assert false;*/
//@ requires bb;    "

//@ ensures true;    "

/*@ assume b; */
/*@assert !bb;*/
//@ requires bb;    "

//@ ensures true;    "

/*@ assume bb; */
/*@assert b;*/
//@ requires bb;    "

//@ ensures true;    "

/*@ assume b; */
/*@assert false;*/
//@ requires bb;    "

//@ ensures true;    "

/*@ assume b; */
/*@assert !bb;*/
//@ requires bb;    "

//@ ensures true;    "

/*@ assume bb; */
/*@assert b;*/
//@ requires bb;    "

//@ ensures true;    "

/*@ assume b; */
/*@assert false;*/
//@ requires bb;    "

//@ ensures true;    "

/*@ assume b; */
/*@assert !bb;*/
//@ requires bb;    "

//@ ensures true;    "

/*@ assume bb; */
/*@assert b;*/
//@ requires bb;    "

//@ ensures true;    "

/*@ assume b; */
/*@assert false;*/
//@ requires bb;    "

//@ ensures true;    "

//@ requires true;    "

//@ ensures true;    "

//@ requires bb;    "

//@ ensures true;    "

//@ requires bb;    "

//@ ensures true;    "

//@ skipesc     "

//@ requires bb;    "

//@ ensures true;    "

//@ requires true;    "

//@ ensures true;    "

//@ requires bb;    "

//@ ensures true;    "

//@ requires bb;    "

//@ ensures true;    "

//@ skipesc     "

//@ requires bb;    "

//@ ensures true;    "

//@ requires true;    "

//@ ensures true;    "

//@ requires bb;    "

//@ ensures true;    "

//@ requires bb;    "

//@ ensures true;    "

//@ skipesc     "

/*@ code_java_math*/
//@ readable z if bb;     "

//@ readable x if b;     "

//@ readable y if b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

/*@ code_java_math*/
//@ writable z if bb;     "

//@ writable x if b;     "

//@ writable y if b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

/*@ code_java_math*/
//@ writable z if bb;     "

//@ writable x if b;     "

//@ writable y if b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

/*@ code_java_math*/
//@ readable z if bb;     "

//@ readable x if b;     "

//@ readable y if b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

/*@ code_java_math*/
//@ readable z if bb;     "

//@ readable x if b;     "

//@ readable y if b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

/*@ code_java_math*/
//@ readable z1 if b1;     "

//@ readable x1 if b1 || b2 || b3 || b4;     "

//@ readable y1 if bs1 || bs2 || bs3 || bs4;     "

//@ readable x2 if b1 || b2 || b3 || b4;     "

//@ readable y2 if bs1 || bs2 || bs3 || bs4;     "

//@ readable x3 if b1 || b2 || b3 || b4;     "

//@ readable y3 if bs1 || bs2 || bs3 || bs4;     "

//@ readable x4 if b1 || b2 || b3 || b4;     "

//@ readable y4 if bs1 || bs2 || bs3 || bs4;     "

/*@ code_java_math*/
//@ readable z if bb;     "

//@ readable x if b;     "

//@ readable y if b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

/*@ code_java_math*/
//@ writable z if bb;     "

//@ writable x if b;     "

//@ writable y if b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

/*@ code_java_math*/
//@ writable z if bb;     "

//@ writable x if b;     "

//@ writable y if b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

/*@ code_java_math*/
//@ readable z if bb;     "

//@ readable x if b;     "

//@ readable y if b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

/*@ code_java_math*/
//@ readable z if bb;     "

//@ readable x if b;     "

//@ readable y if b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

/*@ code_java_math*/
//@ readable z1 if b1;     "

//@ readable x1 if b1 || b2 || b3 || b4;     "

//@ readable y1 if bs1 || bs2 || bs3 || bs4;     "

//@ readable x2 if b1 || b2 || b3 || b4;     "

//@ readable y2 if bs1 || bs2 || bs3 || bs4;     "

//@ readable x3 if b1 || b2 || b3 || b4;     "

//@ readable y3 if bs1 || bs2 || bs3 || bs4;     "

//@ readable x4 if b1 || b2 || b3 || b4;     "

//@ readable y4 if bs1 || bs2 || bs3 || bs4;     "

/*@ code_java_math*/
//@ readable z if bb;     "

//@ readable x if b;     "

//@ readable y if b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

/*@ code_java_math*/
//@ writable z if bb;     "

//@ writable x if b;     "

//@ writable y if b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

/*@ code_java_math*/
//@ writable z if bb;     "

//@ writable x if b;     "

//@ writable y if b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

/*@ code_java_math*/
//@ readable z if bb;     "

//@ readable x if b;     "

//@ readable y if b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

/*@ code_java_math*/
//@ readable z if bb;     "

//@ readable x if b;     "

//@ readable y if b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

/*@ code_java_math*/
//@ readable z1 if b1;     "

//@ readable x1 if b1 || b2 || b3 || b4;     "

//@ readable y1 if bs1 || bs2 || bs3 || bs4;     "

//@ readable x2 if b1 || b2 || b3 || b4;     "

//@ readable y2 if bs1 || bs2 || bs3 || bs4;     "

//@ readable x3 if b1 || b2 || b3 || b4;     "

//@ readable y3 if bs1 || bs2 || bs3 || bs4;     "

//@ readable x4 if b1 || b2 || b3 || b4;     "

//@ readable y4 if bs1 || bs2 || bs3 || bs4;     "

/*@ code_java_math*/
//@ readable z if bb;     "

//@ readable x if b;     "

//@ readable y if b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

/*@ code_java_math*/
//@ writable z if bb;     "

//@ writable x if b;     "

//@ writable y if b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

/*@ code_java_math*/
//@ writable z if bb;     "

//@ writable x if b;     "

//@ writable y if b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

/*@ code_java_math*/
//@ readable z if bb;     "

//@ readable x if b;     "

//@ readable y if b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

/*@ code_java_math*/
//@ readable z if bb;     "

//@ readable x if b;     "

//@ readable y if b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

/*@ code_java_math*/
//@ readable z1 if b1;     "

//@ readable x1 if b1 || b2 || b3 || b4;     "

//@ readable y1 if bs1 || bs2 || bs3 || bs4;     "

//@ readable x2 if b1 || b2 || b3 || b4;     "

//@ readable y2 if bs1 || bs2 || bs3 || bs4;     "

//@ readable x3 if b1 || b2 || b3 || b4;     "

//@ readable y3 if bs1 || bs2 || bs3 || bs4;     "

//@ readable x4 if b1 || b2 || b3 || b4;     "

//@ readable y4 if bs1 || bs2 || bs3 || bs4;     "

/*@ code_java_math*/
//@ readable z if bb;     "

//@ readable x if b;     "

//@ readable y if b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

/*@ code_java_math*/
//@ writable z if bb;     "

//@ writable x if b;     "

//@ writable y if b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

/*@ code_java_math*/
//@ writable z if bb;     "

//@ writable x if b;     "

//@ writable y if b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

/*@ code_java_math*/
//@ readable z if bb;     "

//@ readable x if b;     "

//@ readable y if b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

/*@ code_java_math*/
//@ readable z if bb;     "

//@ readable x if b;     "

//@ readable y if b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

/*@ code_java_math*/
//@ readable z1 if b1;     "

//@ readable x1 if b1 || b2 || b3 || b4;     "

//@ readable y1 if bs1 || bs2 || bs3 || bs4;     "

//@ readable x2 if b1 || b2 || b3 || b4;     "

//@ readable y2 if bs1 || bs2 || bs3 || bs4;     "

//@ readable x3 if b1 || b2 || b3 || b4;     "

//@ readable y3 if bs1 || bs2 || bs3 || bs4;     "

//@ readable x4 if b1 || b2 || b3 || b4;     "

//@ readable y4 if bs1 || bs2 || bs3 || bs4;     "

//@ assert s != null;    "

//@ assert s == ss;    "


//@ assert s.equals(ss);    "

//@ assert !s.equals(sss);    "

//@ assert !sss.equals(ss);    " // Null error


//@ assert s.equals(ss);    "    // This would be true but we are not using any specs.


//@ assert b;    "     // This would be true but we are not using any specs.


//@ assert b;    "     // This would be true but we are not using any specs.


//@ assert  !sss.equals(ss);    " // Null error

//@ assert b;    "

//@ assert (s + ss) != null;    "

//@ assert b;    "  // No specs, so not provable

//@ assert (s+ss).equals(s+ss);    "

//@ assert b;    " // FIXME Should not hold necessarily

//@ assert (s + ss) == (s + ss);     " // FIXME Should not hold necessarily

//@ assert sss != null;    "

//@ reachable true;    "

//@ assert (s + ss) != null;    "

//@ assert sss.equals(s4);    "

//@ assert (s+ss).equals(s+ss);    "

//@ assert b;    " // FIXME Should not hold necessarily

//@ assert (s + ss) == (s + ss);    " // FIXME Should not hold necessarily

//@ requires s.length() > 0;     "

//@ assert s.charAt(0) == s.charAt(0);    "

//@ assert s.charAt(0) == s.charAt(0);    "

//@ requires s.length() > 0;     "

//@ assert s.charAt(0) == ss.charAt(0);    "

//@ requires s.length() > 0;    "

//@ assert s.charAt(0) == ss.charAt(0);    "  // should not hold since s != ss

//@ requires s.length() > 0 && ss.length() > 0;    "

//@ assert s.charAt(0) == ss.charAt(0);    "  // should not hold since s != ss

//@ assert b;    "

//@ assert s.length() >= 0;    "

//@ assert b;    "

//@ assert s.length() == ss.length();     "

//@ assert b;    " // should not hold

//@ assert s.length() == ss.length();     " // ERROR - not necessarily same length

//@ assert s != null;    "

//@ assert s == ss;    "


//@ assert s.equals(ss);    "

//@ assert !s.equals(sss);    "

//@ assert !sss.equals(ss);    " // Null error


//@ assert s.equals(ss);    "    // This would be true but we are not using any specs.


//@ assert b;    "     // This would be true but we are not using any specs.


//@ assert b;    "     // This would be true but we are not using any specs.


//@ assert  !sss.equals(ss);    " // Null error

//@ assert b;    "

//@ assert (s + ss) != null;    "

//@ assert b;    "  // No specs, so not provable

//@ assert (s+ss).equals(s+ss);    "

//@ assert b;    " // FIXME Should not hold necessarily

//@ assert (s + ss) == (s + ss);     " // FIXME Should not hold necessarily

//@ assert sss != null;    "

//@ reachable true;    "

//@ assert (s + ss) != null;    "

//@ assert sss.equals(s4);    "

//@ assert (s+ss).equals(s+ss);    "

//@ assert b;    " // FIXME Should not hold necessarily

//@ assert (s + ss) == (s + ss);    " // FIXME Should not hold necessarily

//@ requires s.length() > 0;     "

//@ assert s.charAt(0) == s.charAt(0);    "

//@ assert s.charAt(0) == s.charAt(0);    "

//@ requires s.length() > 0;     "

//@ assert s.charAt(0) == ss.charAt(0);    "

//@ requires s.length() > 0;    "

//@ assert s.charAt(0) == ss.charAt(0);    "  // should not hold since s != ss

//@ requires s.length() > 0 && ss.length() > 0;    "

//@ assert s.charAt(0) == ss.charAt(0);    "  // should not hold since s != ss

//@ assert b;    "

//@ assert s.length() >= 0;    "

//@ assert b;    "

//@ assert s.length() == ss.length();     "

//@ assert b;    " // should not hold

//@ assert s.length() == ss.length();     " // ERROR - not necessarily same length

//@ assert s != null;    "

//@ assert s == ss;    "


//@ assert s.equals(ss);    "

//@ assert !s.equals(sss);    "

//@ assert !sss.equals(ss);    " // Null error


//@ assert s.equals(ss);    "    // This would be true but we are not using any specs.


//@ assert b;    "     // This would be true but we are not using any specs.


//@ assert b;    "     // This would be true but we are not using any specs.


//@ assert  !sss.equals(ss);    " // Null error

//@ assert b;    "

//@ assert (s + ss) != null;    "

//@ assert b;    "  // No specs, so not provable

//@ assert (s+ss).equals(s+ss);    "

//@ assert b;    " // FIXME Should not hold necessarily

//@ assert (s + ss) == (s + ss);     " // FIXME Should not hold necessarily

//@ assert sss != null;    "

//@ reachable true;    "

//@ assert (s + ss) != null;    "

//@ assert sss.equals(s4);    "

//@ assert (s+ss).equals(s+ss);    "

//@ assert b;    " // FIXME Should not hold necessarily

//@ assert (s + ss) == (s + ss);    " // FIXME Should not hold necessarily

//@ requires s.length() > 0;     "

//@ assert s.charAt(0) == s.charAt(0);    "

//@ assert s.charAt(0) == s.charAt(0);    "

//@ requires s.length() > 0;     "

//@ assert s.charAt(0) == ss.charAt(0);    "

//@ requires s.length() > 0;    "

//@ assert s.charAt(0) == ss.charAt(0);    "  // should not hold since s != ss

//@ requires s.length() > 0 && ss.length() > 0;    "

//@ assert s.charAt(0) == ss.charAt(0);    "  // should not hold since s != ss

//@ assert b;    "

//@ assert s.length() >= 0;    "

//@ assert b;    "

//@ assert s.length() == ss.length();     "

//@ assert b;    " // should not hold

//@ assert s.length() == ss.length();     " // ERROR - not necessarily same length

//@ assert s != null;    "

//@ assert s == ss;    "


//@ assert s.equals(ss);    "

//@ assert !s.equals(sss);    "

//@ assert !sss.equals(ss);    " // Null error


//@ assert s.equals(ss);    "    // This would be true but we are not using any specs.


//@ assert b;    "     // This would be true but we are not using any specs.


//@ assert b;    "     // This would be true but we are not using any specs.


//@ assert  !sss.equals(ss);    " // Null error

//@ assert b;    "

//@ assert (s + ss) != null;    "

//@ assert b;    "  // No specs, so not provable

//@ assert (s+ss).equals(s+ss);    "

//@ assert b;    " // FIXME Should not hold necessarily

//@ assert (s + ss) == (s + ss);     " // FIXME Should not hold necessarily

//@ assert sss != null;    "

//@ reachable true;    "

//@ assert (s + ss) != null;    "

//@ assert sss.equals(s4);    "

//@ assert (s+ss).equals(s+ss);    "

//@ assert b;    " // FIXME Should not hold necessarily

//@ assert (s + ss) == (s + ss);    " // FIXME Should not hold necessarily

//@ requires s.length() > 0;     "

//@ assert s.charAt(0) == s.charAt(0);    "

//@ assert s.charAt(0) == s.charAt(0);    "

//@ requires s.length() > 0;     "

//@ assert s.charAt(0) == ss.charAt(0);    "

//@ requires s.length() > 0;    "

//@ assert s.charAt(0) == ss.charAt(0);    "  // should not hold since s != ss

//@ requires s.length() > 0 && ss.length() > 0;    "

//@ assert s.charAt(0) == ss.charAt(0);    "  // should not hold since s != ss

//@ assert b;    "

//@ assert s.length() >= 0;    "

//@ assert b;    "

//@ assert s.length() == ss.length();     "

//@ assert b;    " // should not hold

//@ assert s.length() == ss.length();     " // ERROR - not necessarily same length

//@ assert s != null;    "

//@ assert s == ss;    "


//@ assert s.equals(ss);    "

//@ assert !s.equals(sss);    "

//@ assert !sss.equals(ss);    " // Null error


//@ assert s.equals(ss);    "    // This would be true but we are not using any specs.


//@ assert b;    "     // This would be true but we are not using any specs.


//@ assert b;    "     // This would be true but we are not using any specs.


//@ assert  !sss.equals(ss);    " // Null error

//@ assert b;    "

//@ assert (s + ss) != null;    "

//@ assert b;    "  // No specs, so not provable

//@ assert (s+ss).equals(s+ss);    "

//@ assert b;    " // FIXME Should not hold necessarily

//@ assert (s + ss) == (s + ss);     " // FIXME Should not hold necessarily

//@ assert sss != null;    "

//@ reachable true;    "

//@ assert (s + ss) != null;    "

//@ assert sss.equals(s4);    "

//@ assert (s+ss).equals(s+ss);    "

//@ assert b;    " // FIXME Should not hold necessarily

//@ assert (s + ss) == (s + ss);    " // FIXME Should not hold necessarily

//@ requires s.length() > 0;     "

//@ assert s.charAt(0) == s.charAt(0);    "

//@ assert s.charAt(0) == s.charAt(0);    "

//@ requires s.length() > 0;     "

//@ assert s.charAt(0) == ss.charAt(0);    "

//@ requires s.length() > 0;    "

//@ assert s.charAt(0) == ss.charAt(0);    "  // should not hold since s != ss

//@ requires s.length() > 0 && ss.length() > 0;    "

//@ assert s.charAt(0) == ss.charAt(0);    "  // should not hold since s != ss

//@ assert b;    "

//@ assert s.length() >= 0;    "

//@ assert b;    "

//@ assert s.length() == ss.length();     "

//@ assert b;    " // should not hold

//@ assert s.length() == ss.length();     " // ERROR - not necessarily same length

//@ requires 0<=i && i <10;    "

//@ assert sum < 1000;    "

//@ requires 0<=i && i <10;    "

//@ assert sum < 1000;    "

//@ requires 0<=i && i <10;    "

//@ assert sum < 1000;    "

//@ requires 0<=i && i <10;    "

//@ assert sum < 1000;    "

//@ requires 0<=i && i <10;    "

//@ assert sum < 1000;    "

//@ requires 0<=i && i <10;    "

//@ assert sum < 1000;    "

//@ requires 0<=i && i <10;    "

//@ assert sum < 1000;    "

//@ ensures \\result >= 0 && \\result < 10;    "

//@ ensures \\result == 0 ;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ ensures \\result >= 0 && \\result < 10;    "

//@ requires 0<=i && i <10;    "

//@ assert sum < 1000;    "

//@ requires 0<=i && i <10;    "

//@ assert sum < 1000;    "

//@ requires 0<=i && i <10;    "

//@ assert sum < 1000;    "

//@ requires 0<=i && i <10;    "

//@ assert sum < 1000;    "

//@ requires 0<=i && i <10;    "

//@ assert sum < 1000;    "

//@ requires 0<=i && i <10;    "

//@ assert sum < 1000;    "

//@ requires 0<=i && i <10;    "

//@ assert sum < 1000;    "

//@ ensures \\result >= 0 && \\result < 10;    "

//@ ensures \\result == 0 ;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ ensures \\result >= 0 && \\result < 10;    "

//@ requires 0<=i && i <10;    "

//@ assert sum < 1000;    "

//@ requires 0<=i && i <10;    "

//@ assert sum < 1000;    "

//@ requires 0<=i && i <10;    "

//@ assert sum < 1000;    "

//@ requires 0<=i && i <10;    "

//@ assert sum < 1000;    "

//@ requires 0<=i && i <10;    "

//@ assert sum < 1000;    "

//@ requires 0<=i && i <10;    "

//@ assert sum < 1000;    "

//@ requires 0<=i && i <10;    "

//@ assert sum < 1000;    "

//@ ensures \\result >= 0 && \\result < 10;    "

//@ ensures \\result == 0 ;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ ensures \\result >= 0 && \\result < 10;    "

//@ requires 0<=i && i <10;    "

//@ assert sum < 1000;    "

//@ requires 0<=i && i <10;    "

//@ assert sum < 1000;    "

//@ requires 0<=i && i <10;    "

//@ assert sum < 1000;    "

//@ requires 0<=i && i <10;    "

//@ assert sum < 1000;    "

//@ requires 0<=i && i <10;    "

//@ assert sum < 1000;    "

//@ requires 0<=i && i <10;    "

//@ assert sum < 1000;    "

//@ requires 0<=i && i <10;    "

//@ assert sum < 1000;    "

//@ ensures \\result >= 0 && \\result < 10;    "

//@ ensures \\result == 0 ;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ ensures \\result >= 0 && \\result < 10;    "

//@ requires 0<=i && i <10;    "

//@ assert sum < 1000;    "

//@ requires 0<=i && i <10;    "

//@ assert sum < 1000;    "

//@ requires 0<=i && i <10;    "

//@ assert sum < 1000;    "

//@ requires 0<=i && i <10;    "

//@ assert sum < 1000;    "

//@ requires 0<=i && i <10;    "

//@ assert sum < 1000;    "

//@ requires 0<=i && i <10;    "

//@ assert sum < 1000;    "

//@ requires 0<=i && i <10;    "

//@ assert sum < 1000;    "

//@ ensures \\result >= 0 && \\result < 10;    "

//@ ensures \\result == 0 ;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ requires 0<=i && i <10;    "

//@ assume i < 10;    "

//@ assert sum < 100;    "

//@ ensures \\result >= 0 && \\result < 10;    "

/*@ code_java_math */
//@ assert j != 7;    "

/*@ code_java_math */
//@ assert k != 7;    "

/*@ code_java_math */
//@ requires i == 1;    "

//@ ensures \\result < i-i;    "

/*@ code_safe_math */
//@ requires i == Integer.MAX_VALUE;    "

//@ ensures \\result < 0;    "

/*@ code_java_math */
//@ assert j != 7;    "

/*@ code_java_math */
//@ assert k != 7;    "

/*@ code_java_math */
//@ requires i == 1;    "

//@ ensures \\result < i-i;    "

/*@ code_safe_math */
//@ requires i == Integer.MAX_VALUE;    "

//@ ensures \\result < 0;    "

/*@ code_java_math */
//@ assert j != 7;    "

/*@ code_java_math */
//@ assert k != 7;    "

/*@ code_java_math */
//@ requires i == 1;    "

//@ ensures \\result < i-i;    "

/*@ code_safe_math */
//@ requires i == Integer.MAX_VALUE;    "

//@ ensures \\result < 0;    "

/*@ code_java_math */
//@ assert j != 7;    "

/*@ code_java_math */
//@ assert k != 7;    "

/*@ code_java_math */
//@ requires i == 1;    "

//@ ensures \\result < i-i;    "

/*@ code_safe_math */
//@ requires i == Integer.MAX_VALUE;    "

//@ ensures \\result < 0;    "

/*@ code_java_math */
//@ assert j != 7;    "

/*@ code_java_math */
//@ assert k != 7;    "

/*@ code_java_math */
//@ requires i == 1;    "

//@ ensures \\result < i-i;    "

/*@ code_safe_math */
//@ requires i == Integer.MAX_VALUE;    "

//@ ensures \\result < 0;    "

//@ invariant 0 == pb;    "  // Line 7

//@ invariant 0 == pt;    "

//@ invariant 0 == pa;    "

//@ invariant 0 == pv;    "

//@ public invariant 0 == pb;    "

//@ public invariant 0 == pt;    "

//@ public invariant 0 == pa;    "

//@ public invariant 0 == pv;    "

//@ protected invariant 0 == pb;    "  // Line 15

//@ protected invariant 0 == pt;    "

//@ protected invariant 0 == pa;    "

//@ protected invariant 0 == pv;    "

//@ private invariant 0 == pb;    "

//@ private invariant 0 == pt;    "

//@ private invariant 0 == pa;    "

//@ private invariant 0 == pv;    "

/*@ pure */
/*@ pure */
/*@ pure */
/*@ pure */
//@ invariant 0 == pb();    "  // Line 7

//@ invariant 0 == pt();    "

//@ invariant 0 == pa();    "

//@ invariant 0 == pv();    "

//@ public invariant 0 == pb();    "

//@ public invariant 0 == pt();    "

//@ public invariant 0 == pa();    "

//@ public invariant 0 == pv();    "

//@ protected invariant 0 == pb();    "  // Line 15

//@ protected invariant 0 == pt();    "

//@ protected invariant 0 == pa();    "

//@ protected invariant 0 == pv();    "

//@ private invariant 0 == pb();    "

//@ private invariant 0 == pt();    "

//@ private invariant 0 == pa();    "

//@ private invariant 0 == pv();    "

/*@ spec_public */
/*@ spec_public */
/*@ spec_public */
//@ invariant 0 == pt;    "  // Line 6

//@ invariant 0 == pa;    "

//@ invariant 0 == pv;    "

//@ public invariant 0 == pt;    "

//@ public invariant 0 == pa;    "

//@ public invariant 0 == pv;    "

//@ protected invariant 0 == pt;    "

//@ protected invariant 0 == pa;    "

//@ protected invariant 0 == pv;    "

//@ private invariant 0 == pt;    "

//@ private invariant 0 == pa;    "

//@ private invariant 0 == pv;    "

/*@ spec_protected */
/*@ spec_protected */
//@ invariant 0 == pat;    "

//@ invariant 0 == pvt;    "

//@ public invariant 0 == pat;    "

//@ public invariant 0 == pvt;    "

//@ protected invariant 0 == pat;    "

//@ protected invariant 0 == pvt;    "

//@ private invariant 0 == pat;    "

//@ private invariant 0 == pvt;    "

//@ model public int pb;    "

//@ model protected int pt;    "

//@ model  int pa;    "

//@ model private int pv;    "

//@ in pb;    "  // Line 7

//@ in pt;    "

//@ in pa;    "

//@ in pv;    "

//@ in pb;    "

//@ in pt;    "

//@ in pa;    "

//@ in pv;    "

//@ in pb;    "

//@ in pt;    "

//@ in pa;    "

//@ in pv;    "

//@ in pb;    "

//@ in pt;    "

//@ in pa;    "

//@ in pv;    "

/*@ spec_public */
/*@ spec_public */
/*@ spec_public */
/*@ spec_protected */
/*@ spec_protected */
//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also private normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also protected normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also public normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

/*@ spec_public */
/*@ spec_public */
/*@ spec_public */
/*@ spec_protected */
/*@ spec_protected */
//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also private normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also protected normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also public normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

/*@ spec_public */
/*@ spec_public */
/*@ spec_public */
/*@ spec_protected */
/*@ spec_protected */
//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also private normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also protected normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also public normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

/*@ spec_public */
/*@ spec_public */
/*@ spec_public */
/*@ spec_protected */
/*@ spec_protected */
//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also private normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also protected normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also public normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ requires true;    " +

//@ pure    " +

//@ pure    " +

//@ pure    " +

//@ pure    " +

//@ pure    " +

//@ pure    " +

//@ pure    " +

//@ pure    " +

//@ pure    " +

//@ pure    " +

//@ invariant 0 == pb;    "  // Line 7

//@ invariant 0 == pt;    "

//@ invariant 0 == pa;    "

//@ invariant 0 == pv;    "

//@ public invariant 0 == pb;    "

//@ public invariant 0 == pt;    "

//@ public invariant 0 == pa;    "

//@ public invariant 0 == pv;    "

//@ protected invariant 0 == pb;    "  // Line 15

//@ protected invariant 0 == pt;    "

//@ protected invariant 0 == pa;    "

//@ protected invariant 0 == pv;    "

//@ private invariant 0 == pb;    "

//@ private invariant 0 == pt;    "

//@ private invariant 0 == pa;    "

//@ private invariant 0 == pv;    "

/*@ pure */
/*@ pure */
/*@ pure */
/*@ pure */
//@ invariant 0 == pb();    "  // Line 7

//@ invariant 0 == pt();    "

//@ invariant 0 == pa();    "

//@ invariant 0 == pv();    "

//@ public invariant 0 == pb();    "

//@ public invariant 0 == pt();    "

//@ public invariant 0 == pa();    "

//@ public invariant 0 == pv();    "

//@ protected invariant 0 == pb();    "  // Line 15

//@ protected invariant 0 == pt();    "

//@ protected invariant 0 == pa();    "

//@ protected invariant 0 == pv();    "

//@ private invariant 0 == pb();    "

//@ private invariant 0 == pt();    "

//@ private invariant 0 == pa();    "

//@ private invariant 0 == pv();    "

/*@ spec_public */
/*@ spec_public */
/*@ spec_public */
//@ invariant 0 == pt;    "  // Line 6

//@ invariant 0 == pa;    "

//@ invariant 0 == pv;    "

//@ public invariant 0 == pt;    "

//@ public invariant 0 == pa;    "

//@ public invariant 0 == pv;    "

//@ protected invariant 0 == pt;    "

//@ protected invariant 0 == pa;    "

//@ protected invariant 0 == pv;    "

//@ private invariant 0 == pt;    "

//@ private invariant 0 == pa;    "

//@ private invariant 0 == pv;    "

/*@ spec_protected */
/*@ spec_protected */
//@ invariant 0 == pat;    "

//@ invariant 0 == pvt;    "

//@ public invariant 0 == pat;    "

//@ public invariant 0 == pvt;    "

//@ protected invariant 0 == pat;    "

//@ protected invariant 0 == pvt;    "

//@ private invariant 0 == pat;    "

//@ private invariant 0 == pvt;    "

//@ model public int pb;    "

//@ model protected int pt;    "

//@ model  int pa;    "

//@ model private int pv;    "

//@ in pb;    "  // Line 7

//@ in pt;    "

//@ in pa;    "

//@ in pv;    "

//@ in pb;    "

//@ in pt;    "

//@ in pa;    "

//@ in pv;    "

//@ in pb;    "

//@ in pt;    "

//@ in pa;    "

//@ in pv;    "

//@ in pb;    "

//@ in pt;    "

//@ in pa;    "

//@ in pv;    "

/*@ spec_public */
/*@ spec_public */
/*@ spec_public */
/*@ spec_protected */
/*@ spec_protected */
//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also private normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also protected normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also public normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

/*@ spec_public */
/*@ spec_public */
/*@ spec_public */
/*@ spec_protected */
/*@ spec_protected */
//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also private normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also protected normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also public normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

/*@ spec_public */
/*@ spec_public */
/*@ spec_public */
/*@ spec_protected */
/*@ spec_protected */
//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also private normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also protected normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also public normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

/*@ spec_public */
/*@ spec_public */
/*@ spec_public */
/*@ spec_protected */
/*@ spec_protected */
//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also private normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also protected normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also public normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ requires true;    " +

//@ pure    " +

//@ pure    " +

//@ pure    " +

//@ pure    " +

//@ pure    " +

//@ pure    " +

//@ pure    " +

//@ pure    " +

//@ pure    " +

//@ pure    " +

//@ invariant 0 == pb;    "  // Line 7

//@ invariant 0 == pt;    "

//@ invariant 0 == pa;    "

//@ invariant 0 == pv;    "

//@ public invariant 0 == pb;    "

//@ public invariant 0 == pt;    "

//@ public invariant 0 == pa;    "

//@ public invariant 0 == pv;    "

//@ protected invariant 0 == pb;    "  // Line 15

//@ protected invariant 0 == pt;    "

//@ protected invariant 0 == pa;    "

//@ protected invariant 0 == pv;    "

//@ private invariant 0 == pb;    "

//@ private invariant 0 == pt;    "

//@ private invariant 0 == pa;    "

//@ private invariant 0 == pv;    "

/*@ pure */
/*@ pure */
/*@ pure */
/*@ pure */
//@ invariant 0 == pb();    "  // Line 7

//@ invariant 0 == pt();    "

//@ invariant 0 == pa();    "

//@ invariant 0 == pv();    "

//@ public invariant 0 == pb();    "

//@ public invariant 0 == pt();    "

//@ public invariant 0 == pa();    "

//@ public invariant 0 == pv();    "

//@ protected invariant 0 == pb();    "  // Line 15

//@ protected invariant 0 == pt();    "

//@ protected invariant 0 == pa();    "

//@ protected invariant 0 == pv();    "

//@ private invariant 0 == pb();    "

//@ private invariant 0 == pt();    "

//@ private invariant 0 == pa();    "

//@ private invariant 0 == pv();    "

/*@ spec_public */
/*@ spec_public */
/*@ spec_public */
//@ invariant 0 == pt;    "  // Line 6

//@ invariant 0 == pa;    "

//@ invariant 0 == pv;    "

//@ public invariant 0 == pt;    "

//@ public invariant 0 == pa;    "

//@ public invariant 0 == pv;    "

//@ protected invariant 0 == pt;    "

//@ protected invariant 0 == pa;    "

//@ protected invariant 0 == pv;    "

//@ private invariant 0 == pt;    "

//@ private invariant 0 == pa;    "

//@ private invariant 0 == pv;    "

/*@ spec_protected */
/*@ spec_protected */
//@ invariant 0 == pat;    "

//@ invariant 0 == pvt;    "

//@ public invariant 0 == pat;    "

//@ public invariant 0 == pvt;    "

//@ protected invariant 0 == pat;    "

//@ protected invariant 0 == pvt;    "

//@ private invariant 0 == pat;    "

//@ private invariant 0 == pvt;    "

//@ model public int pb;    "

//@ model protected int pt;    "

//@ model  int pa;    "

//@ model private int pv;    "

//@ in pb;    "  // Line 7

//@ in pt;    "

//@ in pa;    "

//@ in pv;    "

//@ in pb;    "

//@ in pt;    "

//@ in pa;    "

//@ in pv;    "

//@ in pb;    "

//@ in pt;    "

//@ in pa;    "

//@ in pv;    "

//@ in pb;    "

//@ in pt;    "

//@ in pa;    "

//@ in pv;    "

/*@ spec_public */
/*@ spec_public */
/*@ spec_public */
/*@ spec_protected */
/*@ spec_protected */
//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also private normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also protected normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also public normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

/*@ spec_public */
/*@ spec_public */
/*@ spec_public */
/*@ spec_protected */
/*@ spec_protected */
//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also private normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also protected normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also public normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

/*@ spec_public */
/*@ spec_public */
/*@ spec_public */
/*@ spec_protected */
/*@ spec_protected */
//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also private normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also protected normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also public normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

/*@ spec_public */
/*@ spec_public */
/*@ spec_public */
/*@ spec_protected */
/*@ spec_protected */
//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also private normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also protected normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also public normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ requires true;    " +

//@ pure    " +

//@ pure    " +

//@ pure    " +

//@ pure    " +

//@ pure    " +

//@ pure    " +

//@ pure    " +

//@ pure    " +

//@ pure    " +

//@ pure    " +

//@ invariant 0 == pb;    "  // Line 7

//@ invariant 0 == pt;    "

//@ invariant 0 == pa;    "

//@ invariant 0 == pv;    "

//@ public invariant 0 == pb;    "

//@ public invariant 0 == pt;    "

//@ public invariant 0 == pa;    "

//@ public invariant 0 == pv;    "

//@ protected invariant 0 == pb;    "  // Line 15

//@ protected invariant 0 == pt;    "

//@ protected invariant 0 == pa;    "

//@ protected invariant 0 == pv;    "

//@ private invariant 0 == pb;    "

//@ private invariant 0 == pt;    "

//@ private invariant 0 == pa;    "

//@ private invariant 0 == pv;    "

/*@ pure */
/*@ pure */
/*@ pure */
/*@ pure */
//@ invariant 0 == pb();    "  // Line 7

//@ invariant 0 == pt();    "

//@ invariant 0 == pa();    "

//@ invariant 0 == pv();    "

//@ public invariant 0 == pb();    "

//@ public invariant 0 == pt();    "

//@ public invariant 0 == pa();    "

//@ public invariant 0 == pv();    "

//@ protected invariant 0 == pb();    "  // Line 15

//@ protected invariant 0 == pt();    "

//@ protected invariant 0 == pa();    "

//@ protected invariant 0 == pv();    "

//@ private invariant 0 == pb();    "

//@ private invariant 0 == pt();    "

//@ private invariant 0 == pa();    "

//@ private invariant 0 == pv();    "

/*@ spec_public */
/*@ spec_public */
/*@ spec_public */
//@ invariant 0 == pt;    "  // Line 6

//@ invariant 0 == pa;    "

//@ invariant 0 == pv;    "

//@ public invariant 0 == pt;    "

//@ public invariant 0 == pa;    "

//@ public invariant 0 == pv;    "

//@ protected invariant 0 == pt;    "

//@ protected invariant 0 == pa;    "

//@ protected invariant 0 == pv;    "

//@ private invariant 0 == pt;    "

//@ private invariant 0 == pa;    "

//@ private invariant 0 == pv;    "

/*@ spec_protected */
/*@ spec_protected */
//@ invariant 0 == pat;    "

//@ invariant 0 == pvt;    "

//@ public invariant 0 == pat;    "

//@ public invariant 0 == pvt;    "

//@ protected invariant 0 == pat;    "

//@ protected invariant 0 == pvt;    "

//@ private invariant 0 == pat;    "

//@ private invariant 0 == pvt;    "

//@ model public int pb;    "

//@ model protected int pt;    "

//@ model  int pa;    "

//@ model private int pv;    "

//@ in pb;    "  // Line 7

//@ in pt;    "

//@ in pa;    "

//@ in pv;    "

//@ in pb;    "

//@ in pt;    "

//@ in pa;    "

//@ in pv;    "

//@ in pb;    "

//@ in pt;    "

//@ in pa;    "

//@ in pv;    "

//@ in pb;    "

//@ in pt;    "

//@ in pa;    "

//@ in pv;    "

/*@ spec_public */
/*@ spec_public */
/*@ spec_public */
/*@ spec_protected */
/*@ spec_protected */
//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also private normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also protected normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also public normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

/*@ spec_public */
/*@ spec_public */
/*@ spec_public */
/*@ spec_protected */
/*@ spec_protected */
//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also private normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also protected normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also public normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

/*@ spec_public */
/*@ spec_public */
/*@ spec_public */
/*@ spec_protected */
/*@ spec_protected */
//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also private normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also protected normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also public normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

/*@ spec_public */
/*@ spec_public */
/*@ spec_public */
/*@ spec_protected */
/*@ spec_protected */
//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also private normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also protected normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also public normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ requires true;    " +

//@ pure    " +

//@ pure    " +

//@ pure    " +

//@ pure    " +

//@ pure    " +

//@ pure    " +

//@ pure    " +

//@ pure    " +

//@ pure    " +

//@ pure    " +

//@ invariant 0 == pb;    "  // Line 7

//@ invariant 0 == pt;    "

//@ invariant 0 == pa;    "

//@ invariant 0 == pv;    "

//@ public invariant 0 == pb;    "

//@ public invariant 0 == pt;    "

//@ public invariant 0 == pa;    "

//@ public invariant 0 == pv;    "

//@ protected invariant 0 == pb;    "  // Line 15

//@ protected invariant 0 == pt;    "

//@ protected invariant 0 == pa;    "

//@ protected invariant 0 == pv;    "

//@ private invariant 0 == pb;    "

//@ private invariant 0 == pt;    "

//@ private invariant 0 == pa;    "

//@ private invariant 0 == pv;    "

/*@ pure */
/*@ pure */
/*@ pure */
/*@ pure */
//@ invariant 0 == pb();    "  // Line 7

//@ invariant 0 == pt();    "

//@ invariant 0 == pa();    "

//@ invariant 0 == pv();    "

//@ public invariant 0 == pb();    "

//@ public invariant 0 == pt();    "

//@ public invariant 0 == pa();    "

//@ public invariant 0 == pv();    "

//@ protected invariant 0 == pb();    "  // Line 15

//@ protected invariant 0 == pt();    "

//@ protected invariant 0 == pa();    "

//@ protected invariant 0 == pv();    "

//@ private invariant 0 == pb();    "

//@ private invariant 0 == pt();    "

//@ private invariant 0 == pa();    "

//@ private invariant 0 == pv();    "

/*@ spec_public */
/*@ spec_public */
/*@ spec_public */
//@ invariant 0 == pt;    "  // Line 6

//@ invariant 0 == pa;    "

//@ invariant 0 == pv;    "

//@ public invariant 0 == pt;    "

//@ public invariant 0 == pa;    "

//@ public invariant 0 == pv;    "

//@ protected invariant 0 == pt;    "

//@ protected invariant 0 == pa;    "

//@ protected invariant 0 == pv;    "

//@ private invariant 0 == pt;    "

//@ private invariant 0 == pa;    "

//@ private invariant 0 == pv;    "

/*@ spec_protected */
/*@ spec_protected */
//@ invariant 0 == pat;    "

//@ invariant 0 == pvt;    "

//@ public invariant 0 == pat;    "

//@ public invariant 0 == pvt;    "

//@ protected invariant 0 == pat;    "

//@ protected invariant 0 == pvt;    "

//@ private invariant 0 == pat;    "

//@ private invariant 0 == pvt;    "

//@ model public int pb;    "

//@ model protected int pt;    "

//@ model  int pa;    "

//@ model private int pv;    "

//@ in pb;    "  // Line 7

//@ in pt;    "

//@ in pa;    "

//@ in pv;    "

//@ in pb;    "

//@ in pt;    "

//@ in pa;    "

//@ in pv;    "

//@ in pb;    "

//@ in pt;    "

//@ in pa;    "

//@ in pv;    "

//@ in pb;    "

//@ in pt;    "

//@ in pa;    "

//@ in pv;    "

/*@ spec_public */
/*@ spec_public */
/*@ spec_public */
/*@ spec_protected */
/*@ spec_protected */
//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also private normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also protected normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also public normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

/*@ spec_public */
/*@ spec_public */
/*@ spec_public */
/*@ spec_protected */
/*@ spec_protected */
//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also private normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also protected normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also public normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

/*@ spec_public */
/*@ spec_public */
/*@ spec_public */
/*@ spec_protected */
/*@ spec_protected */
//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also private normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also protected normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also public normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

/*@ spec_public */
/*@ spec_public */
/*@ spec_public */
/*@ spec_protected */
/*@ spec_protected */
//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also private normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also protected normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ also public normal_behavior    "

//@ requires pb && pt && pa && pv && ptb && pab && pvb && pat && pvt;    "

//@ requires true;    " +

//@ pure    " +

//@ pure    " +

//@ pure    " +

//@ pure    " +

//@ pure    " +

//@ pure    " +

//@ pure    " +

//@ pure    " +

//@ pure    " +

//@ pure    " +

//@ private invariant b;     "

//@ ensures bb;    "

//@ public invariant b;     "

//@ protected invariant b;     "

//@ invariant b;     "

//@ private invariant b;     "

//@ public invariant b;     "

//@ protected invariant b;     "

//@ invariant b;     "

//@ private normal_behavior ensures false;    "

//@ public normal_behavior ensures false;    "

//@ protected normal_behavior ensures false;    "

//@ normal_behavior ensures false;    "

//@   ensures false;    "

//@  ensures false;    "

//@  ensures false;    "

//@  ensures false;    "

//@ also private normal_behavior ensures false;    "

//@ also public normal_behavior ensures false;    "

//@ also protected normal_behavior ensures false;    "

//@ also normal_behavior ensures false;    "

//@ private normal_behavior ensures false;    "

//@ public normal_behavior ensures false;    "

//@ protected normal_behavior ensures false;    "

//@ normal_behavior ensures false;    "

//@  ensures false;    "

//@  ensures false;    "

//@  ensures false;    "

//@  ensures false;    "

//@  requires false;    "

//@ private normal_behavior    "

//@  requires false;    "

//@ public normal_behavior    "

//@  requires false;    "

//@ protected normal_behavior    "

//@  requires false;    "

//@ normal_behavior    "

//@  requires false;    "

//@ private normal_behavior    "

//@  requires false;    "

//@ public normal_behavior    "

//@  requires false;    "

//@ protected normal_behavior    "

//@  requires false;    "

//@ normal_behavior    "

//@  requires false;    "

//@ private invariant b;     "

//@ ensures bb;    "

//@ public invariant b;     "

//@ protected invariant b;     "

//@ invariant b;     "

//@ private invariant b;     "

//@ public invariant b;     "

//@ protected invariant b;     "

//@ invariant b;     "

//@ private normal_behavior ensures false;    "

//@ public normal_behavior ensures false;    "

//@ protected normal_behavior ensures false;    "

//@ normal_behavior ensures false;    "

//@   ensures false;    "

//@  ensures false;    "

//@  ensures false;    "

//@  ensures false;    "

//@ also private normal_behavior ensures false;    "

//@ also public normal_behavior ensures false;    "

//@ also protected normal_behavior ensures false;    "

//@ also normal_behavior ensures false;    "

//@ private normal_behavior ensures false;    "

//@ public normal_behavior ensures false;    "

//@ protected normal_behavior ensures false;    "

//@ normal_behavior ensures false;    "

//@  ensures false;    "

//@  ensures false;    "

//@  ensures false;    "

//@  ensures false;    "

//@  requires false;    "

//@ private normal_behavior    "

//@  requires false;    "

//@ public normal_behavior    "

//@  requires false;    "

//@ protected normal_behavior    "

//@  requires false;    "

//@ normal_behavior    "

//@  requires false;    "

//@ private normal_behavior    "

//@  requires false;    "

//@ public normal_behavior    "

//@  requires false;    "

//@ protected normal_behavior    "

//@  requires false;    "

//@ normal_behavior    "

//@  requires false;    "

//@ private invariant b;     "

//@ ensures bb;    "

//@ public invariant b;     "

//@ protected invariant b;     "

//@ invariant b;     "

//@ private invariant b;     "

//@ public invariant b;     "

//@ protected invariant b;     "

//@ invariant b;     "

//@ private normal_behavior ensures false;    "

//@ public normal_behavior ensures false;    "

//@ protected normal_behavior ensures false;    "

//@ normal_behavior ensures false;    "

//@   ensures false;    "

//@  ensures false;    "

//@  ensures false;    "

//@  ensures false;    "

//@ also private normal_behavior ensures false;    "

//@ also public normal_behavior ensures false;    "

//@ also protected normal_behavior ensures false;    "

//@ also normal_behavior ensures false;    "

//@ private normal_behavior ensures false;    "

//@ public normal_behavior ensures false;    "

//@ protected normal_behavior ensures false;    "

//@ normal_behavior ensures false;    "

//@  ensures false;    "

//@  ensures false;    "

//@  ensures false;    "

//@  ensures false;    "

//@  requires false;    "

//@ private normal_behavior    "

//@  requires false;    "

//@ public normal_behavior    "

//@  requires false;    "

//@ protected normal_behavior    "

//@  requires false;    "

//@ normal_behavior    "

//@  requires false;    "

//@ private normal_behavior    "

//@  requires false;    "

//@ public normal_behavior    "

//@  requires false;    "

//@ protected normal_behavior    "

//@  requires false;    "

//@ normal_behavior    "

//@  requires false;    "

//@ private invariant b;     "

//@ ensures bb;    "

//@ public invariant b;     "

//@ protected invariant b;     "

//@ invariant b;     "

//@ private invariant b;     "

//@ public invariant b;     "

//@ protected invariant b;     "

//@ invariant b;     "

//@ private normal_behavior ensures false;    "

//@ public normal_behavior ensures false;    "

//@ protected normal_behavior ensures false;    "

//@ normal_behavior ensures false;    "

//@   ensures false;    "

//@  ensures false;    "

//@  ensures false;    "

//@  ensures false;    "

//@ also private normal_behavior ensures false;    "

//@ also public normal_behavior ensures false;    "

//@ also protected normal_behavior ensures false;    "

//@ also normal_behavior ensures false;    "

//@ private normal_behavior ensures false;    "

//@ public normal_behavior ensures false;    "

//@ protected normal_behavior ensures false;    "

//@ normal_behavior ensures false;    "

//@  ensures false;    "

//@  ensures false;    "

//@  ensures false;    "

//@  ensures false;    "

//@  requires false;    "

//@ private normal_behavior    "

//@  requires false;    "

//@ public normal_behavior    "

//@  requires false;    "

//@ protected normal_behavior    "

//@  requires false;    "

//@ normal_behavior    "

//@  requires false;    "

//@ private normal_behavior    "

//@  requires false;    "

//@ public normal_behavior    "

//@  requires false;    "

//@ protected normal_behavior    "

//@  requires false;    "

//@ normal_behavior    "

//@  requires false;    "

//@ private invariant b;     "

//@ ensures bb;    "

//@ public invariant b;     "

//@ protected invariant b;     "

//@ invariant b;     "

//@ private invariant b;     "

//@ public invariant b;     "

//@ protected invariant b;     "

//@ invariant b;     "

//@ private normal_behavior ensures false;    "

//@ public normal_behavior ensures false;    "

//@ protected normal_behavior ensures false;    "

//@ normal_behavior ensures false;    "

//@   ensures false;    "

//@  ensures false;    "

//@  ensures false;    "

//@  ensures false;    "

//@ also private normal_behavior ensures false;    "

//@ also public normal_behavior ensures false;    "

//@ also protected normal_behavior ensures false;    "

//@ also normal_behavior ensures false;    "

//@ private normal_behavior ensures false;    "

//@ public normal_behavior ensures false;    "

//@ protected normal_behavior ensures false;    "

//@ normal_behavior ensures false;    "

//@  ensures false;    "

//@  ensures false;    "

//@  ensures false;    "

//@  ensures false;    "

//@  requires false;    "

//@ private normal_behavior    "

//@  requires false;    "

//@ public normal_behavior    "

//@  requires false;    "

//@ protected normal_behavior    "

//@  requires false;    "

//@ normal_behavior    "

//@  requires false;    "

//@ private normal_behavior    "

//@  requires false;    "

//@ public normal_behavior    "

//@  requires false;    "

//@ protected normal_behavior    "

//@  requires false;    "

//@ normal_behavior    "

//@  requires false;    "

//@ invariant b;      boolean b;}");

//@ model class B { int b = c; int c = 0; }        ");

//@ model int m() {} );

//@ model public class B {}"

/*@ model public class B { } */
//@ ghost int i = j; ghost int j; );

//@ ghost int n = (\    um_of int i; 0<i && i<5; n>i);    "

//@ ghost int n = (\    um_of int i; ; n>i);    "

//@ invariant b;      boolean b;}");

//@ model class B { int b = c; int c = 0; }        ");

//@ model int m() {} );

//@ model public class B {}"

/*@ model public class B { } */
//@ ghost int i = j; ghost int j; );

//@ ghost int n = (\    um_of int i; 0<i && i<5; n>i);    "

//@ ghost int n = (\    um_of int i; ; n>i);    "

//@ invariant b;      boolean b;}");

//@ model class B { int b = c; int c = 0; }        ");

//@ model int m() {} );

//@ model public class B {}"

/*@ model public class B { } */
//@ ghost int i = j; ghost int j; );

//@ ghost int n = (\    um_of int i; 0<i && i<5; n>i);    "

//@ ghost int n = (\    um_of int i; ; n>i);    "

//@ invariant b;      boolean b;}");

//@ model class B { int b = c; int c = 0; }        ");

//@ model int m() {} );

//@ model public class B {}"

/*@ model public class B { } */
//@ ghost int i = j; ghost int j; );

//@ ghost int n = (\    um_of int i; 0<i && i<5; n>i);    "

//@ ghost int n = (\    um_of int i; ; n>i);    "

//@ invariant b;      boolean b;}");

//@ model class B { int b = c; int c = 0; }        ");

//@ model int m() {} );

//@ model public class B {}"

/*@ model public class B { } */
//@ ghost int i = j; ghost int j; );

//@ ghost int n = (\    um_of int i; 0<i && i<5; n>i);    "

//@ ghost int n = (\    um_of int i; ; n>i);    "

/*@ non_null*/
/*@ non_null pure*/
//@ loop_invariant o != null; decreasing 6;     " +

//@ loop_invariant o != 0; decreasing 6;     " +

//@ loop_invariant o != 0; decreasing 6;     " +

//@ loop_invariant o != 0; decreasing 6;     " +

/*@ non_null*/
/*@ non_null pure*/
//@ loop_invariant o != null; decreasing 6;     " +

//@ loop_invariant o != 0; decreasing 6;     " +

//@ loop_invariant o != 0; decreasing 6;     " +

//@ loop_invariant o != 0; decreasing 6;     " +

/*@ non_null*/
/*@ non_null pure*/
//@ loop_invariant o != null; decreasing 6;     " +

//@ loop_invariant o != 0; decreasing 6;     " +

//@ loop_invariant o != 0; decreasing 6;     " +

//@ loop_invariant o != 0; decreasing 6;     " +

/*@ non_null*/
/*@ non_null pure*/
//@ loop_invariant o != null; decreasing 6;     " +

//@ loop_invariant o != 0; decreasing 6;     " +

//@ loop_invariant o != 0; decreasing 6;     " +

//@ loop_invariant o != 0; decreasing 6;     " +

/*@ non_null*/
/*@ non_null pure*/
//@ loop_invariant o != null; decreasing 6;     " +

//@ loop_invariant o != 0; decreasing 6;     " +

//@ loop_invariant o != 0; decreasing 6;     " +

//@ loop_invariant o != 0; decreasing 6;     " +

/*@ pure */
//@ invariant m(); 

/*@ pure */
//@ invariant m(); 

/*@ pure */
//@ invariant m(); 

/*@ pure */
//@ invariant m(); 

/*@ pure */
//@ invariant m(); 

//@ ghost \\TYPE t;    " +

//@ ghost \\TYPE tt = \\type(Object);    " +

//@ set tt = \\type(int);    " +

//@ set tt = \\type(Vector<Integer>);    " +

//@ ghost \\TYPE ttt = \\typeof(o);    " +

//@ ghost boolean b = \\type(Object) == tt;    " +

//@ set b = \\typeof(o) == tt;    " +

//@ set b = (\\TYPE)c == t;     " + // Casts allowed

//@ set t = \\elemtype(t);     " + // Allow elemtype on TYPE, returning TYPE

//@ set c = \\elemtype(c);     " + // Allow elemtype on Class, returning Class

//@ set b = tt <: ttt;    " +

//@ ghost boolean b = JML.erasure(\\typeof(o)) == Object.class;    " +

//@ set b = JML.typeargs(\\typeof(o)).length == 0;    " +

//@ set b = JML.typeargs(\\typeof(o))[0] != \\typeof(o);    " +

//@ set b = JML.isArray(\\typeof(o));    " +

//@ ghost \\TYPE t = \\real;    " +

//@ ghost boolean b = JML.typeargs(\\type(Object)).length == 0;    " +

//@ set b = JML.typeargs(\\elemtype(t)).length == 0;    " +

//@ ghost \\TYPE t = \\type(Object);    " +

//@ ghost boolean b = JML.typeargs(\\type(Object)).length == 0;    " +

//@ set b = JML.typeargs(\\elemtype(t)).length == 0;    " +

//@ ghost \\TYPE w = \\type(B<Integer>);    " +

//@ ghost \\TYPE t = \\type(B<T>);    " +

//@ ghost \\TYPE v = \\type(T);    " +

//@ ghost \\TYPE t = Object.class;    " + // NO mixing

//@ ghost Class<?> cc = t;    " + // NO mixing

//@ ghost boolean b = \\type(Object) == Object.class;    " + // No mixing

//@ ghost Object oo = \\type(Object);    " +  // \TYPE will box

//@ set b = t <: Object.class;    " +  // No mixing

//@ set b = Object.class <: t;    " +  // No mixing

//@ set b = c instanceof \\type(Object);    " +  // No mixing

//@ set b = t instanceof Object;    " + // \Type is a primitive

//@ set t = (\\TYPE)0;    " + // No casts of ints

//@ set t = (\\TYPE)o;    " + // No casts of Object

//@ ghost \\TYPE t;    " +

//@ ghost \\TYPE tt = \\type(Object);    " +

//@ set tt = \\type(int);    " +

//@ set tt = \\type(Vector<Integer>);    " +

//@ ghost \\TYPE ttt = \\typeof(o);    " +

//@ ghost boolean b = \\type(Object) == tt;    " +

//@ set b = \\typeof(o) == tt;    " +

//@ set b = (\\TYPE)c == t;     " + // Casts allowed

//@ set t = \\elemtype(t);     " + // Allow elemtype on TYPE, returning TYPE

//@ set c = \\elemtype(c);     " + // Allow elemtype on Class, returning Class

//@ set b = tt <: ttt;    " +

//@ ghost boolean b = JML.erasure(\\typeof(o)) == Object.class;    " +

//@ set b = JML.typeargs(\\typeof(o)).length == 0;    " +

//@ set b = JML.typeargs(\\typeof(o))[0] != \\typeof(o);    " +

//@ set b = JML.isArray(\\typeof(o));    " +

//@ ghost \\TYPE t = \\real;    " +

//@ ghost boolean b = JML.typeargs(\\type(Object)).length == 0;    " +

//@ set b = JML.typeargs(\\elemtype(t)).length == 0;    " +

//@ ghost \\TYPE t = \\type(Object);    " +

//@ ghost boolean b = JML.typeargs(\\type(Object)).length == 0;    " +

//@ set b = JML.typeargs(\\elemtype(t)).length == 0;    " +

//@ ghost \\TYPE w = \\type(B<Integer>);    " +

//@ ghost \\TYPE t = \\type(B<T>);    " +

//@ ghost \\TYPE v = \\type(T);    " +

//@ ghost \\TYPE t = Object.class;    " + // NO mixing

//@ ghost Class<?> cc = t;    " + // NO mixing

//@ ghost boolean b = \\type(Object) == Object.class;    " + // No mixing

//@ ghost Object oo = \\type(Object);    " +  // \TYPE will box

//@ set b = t <: Object.class;    " +  // No mixing

//@ set b = Object.class <: t;    " +  // No mixing

//@ set b = c instanceof \\type(Object);    " +  // No mixing

//@ set b = t instanceof Object;    " + // \Type is a primitive

//@ set t = (\\TYPE)0;    " + // No casts of ints

//@ set t = (\\TYPE)o;    " + // No casts of Object

//@ ghost \\TYPE t;    " +

//@ ghost \\TYPE tt = \\type(Object);    " +

//@ set tt = \\type(int);    " +

//@ set tt = \\type(Vector<Integer>);    " +

//@ ghost \\TYPE ttt = \\typeof(o);    " +

//@ ghost boolean b = \\type(Object) == tt;    " +

//@ set b = \\typeof(o) == tt;    " +

//@ set b = (\\TYPE)c == t;     " + // Casts allowed

//@ set t = \\elemtype(t);     " + // Allow elemtype on TYPE, returning TYPE

//@ set c = \\elemtype(c);     " + // Allow elemtype on Class, returning Class

//@ set b = tt <: ttt;    " +

//@ ghost boolean b = JML.erasure(\\typeof(o)) == Object.class;    " +

//@ set b = JML.typeargs(\\typeof(o)).length == 0;    " +

//@ set b = JML.typeargs(\\typeof(o))[0] != \\typeof(o);    " +

//@ set b = JML.isArray(\\typeof(o));    " +

//@ ghost \\TYPE t = \\real;    " +

//@ ghost boolean b = JML.typeargs(\\type(Object)).length == 0;    " +

//@ set b = JML.typeargs(\\elemtype(t)).length == 0;    " +

//@ ghost \\TYPE t = \\type(Object);    " +

//@ ghost boolean b = JML.typeargs(\\type(Object)).length == 0;    " +

//@ set b = JML.typeargs(\\elemtype(t)).length == 0;    " +

//@ ghost \\TYPE w = \\type(B<Integer>);    " +

//@ ghost \\TYPE t = \\type(B<T>);    " +

//@ ghost \\TYPE v = \\type(T);    " +

//@ ghost \\TYPE t = Object.class;    " + // NO mixing

//@ ghost Class<?> cc = t;    " + // NO mixing

//@ ghost boolean b = \\type(Object) == Object.class;    " + // No mixing

//@ ghost Object oo = \\type(Object);    " +  // \TYPE will box

//@ set b = t <: Object.class;    " +  // No mixing

//@ set b = Object.class <: t;    " +  // No mixing

//@ set b = c instanceof \\type(Object);    " +  // No mixing

//@ set b = t instanceof Object;    " + // \Type is a primitive

//@ set t = (\\TYPE)0;    " + // No casts of ints

//@ set t = (\\TYPE)o;    " + // No casts of Object

//@ ghost \\TYPE t;    " +

//@ ghost \\TYPE tt = \\type(Object);    " +

//@ set tt = \\type(int);    " +

//@ set tt = \\type(Vector<Integer>);    " +

//@ ghost \\TYPE ttt = \\typeof(o);    " +

//@ ghost boolean b = \\type(Object) == tt;    " +

//@ set b = \\typeof(o) == tt;    " +

//@ set b = (\\TYPE)c == t;     " + // Casts allowed

//@ set t = \\elemtype(t);     " + // Allow elemtype on TYPE, returning TYPE

//@ set c = \\elemtype(c);     " + // Allow elemtype on Class, returning Class

//@ set b = tt <: ttt;    " +

//@ ghost boolean b = JML.erasure(\\typeof(o)) == Object.class;    " +

//@ set b = JML.typeargs(\\typeof(o)).length == 0;    " +

//@ set b = JML.typeargs(\\typeof(o))[0] != \\typeof(o);    " +

//@ set b = JML.isArray(\\typeof(o));    " +

//@ ghost \\TYPE t = \\real;    " +

//@ ghost boolean b = JML.typeargs(\\type(Object)).length == 0;    " +

//@ set b = JML.typeargs(\\elemtype(t)).length == 0;    " +

//@ ghost \\TYPE t = \\type(Object);    " +

//@ ghost boolean b = JML.typeargs(\\type(Object)).length == 0;    " +

//@ set b = JML.typeargs(\\elemtype(t)).length == 0;    " +

//@ ghost \\TYPE w = \\type(B<Integer>);    " +

//@ ghost \\TYPE t = \\type(B<T>);    " +

//@ ghost \\TYPE v = \\type(T);    " +

//@ ghost \\TYPE t = Object.class;    " + // NO mixing

//@ ghost Class<?> cc = t;    " + // NO mixing

//@ ghost boolean b = \\type(Object) == Object.class;    " + // No mixing

//@ ghost Object oo = \\type(Object);    " +  // \TYPE will box

//@ set b = t <: Object.class;    " +  // No mixing

//@ set b = Object.class <: t;    " +  // No mixing

//@ set b = c instanceof \\type(Object);    " +  // No mixing

//@ set b = t instanceof Object;    " + // \Type is a primitive

//@ set t = (\\TYPE)0;    " + // No casts of ints

//@ set t = (\\TYPE)o;    " + // No casts of Object

//@ ghost \\TYPE t;    " +

//@ ghost \\TYPE tt = \\type(Object);    " +

//@ set tt = \\type(int);    " +

//@ set tt = \\type(Vector<Integer>);    " +

//@ ghost \\TYPE ttt = \\typeof(o);    " +

//@ ghost boolean b = \\type(Object) == tt;    " +

//@ set b = \\typeof(o) == tt;    " +

//@ set b = (\\TYPE)c == t;     " + // Casts allowed

//@ set t = \\elemtype(t);     " + // Allow elemtype on TYPE, returning TYPE

//@ set c = \\elemtype(c);     " + // Allow elemtype on Class, returning Class

//@ set b = tt <: ttt;    " +

//@ ghost boolean b = JML.erasure(\\typeof(o)) == Object.class;    " +

//@ set b = JML.typeargs(\\typeof(o)).length == 0;    " +

//@ set b = JML.typeargs(\\typeof(o))[0] != \\typeof(o);    " +

//@ set b = JML.isArray(\\typeof(o));    " +

//@ ghost \\TYPE t = \\real;    " +

//@ ghost boolean b = JML.typeargs(\\type(Object)).length == 0;    " +

//@ set b = JML.typeargs(\\elemtype(t)).length == 0;    " +

//@ ghost \\TYPE t = \\type(Object);    " +

//@ ghost boolean b = JML.typeargs(\\type(Object)).length == 0;    " +

//@ set b = JML.typeargs(\\elemtype(t)).length == 0;    " +

//@ ghost \\TYPE w = \\type(B<Integer>);    " +

//@ ghost \\TYPE t = \\type(B<T>);    " +

//@ ghost \\TYPE v = \\type(T);    " +

//@ ghost \\TYPE t = Object.class;    " + // NO mixing

//@ ghost Class<?> cc = t;    " + // NO mixing

//@ ghost boolean b = \\type(Object) == Object.class;    " + // No mixing

//@ ghost Object oo = \\type(Object);    " +  // \TYPE will box

//@ set b = t <: Object.class;    " +  // No mixing

//@ set b = Object.class <: t;    " +  // No mixing

//@ set b = c instanceof \\type(Object);    " +  // No mixing

//@ set b = t instanceof Object;    " + // \Type is a primitive

//@ set t = (\\TYPE)0;    " + // No casts of ints

//@ set t = (\\TYPE)o;    " + // No casts of Object

//@ invariant (\\lblneg A false);    " +

//@ invariant (\\lblpos A k);    " +

//@ invariant \\lblneg A false;    " +  // This is not strict JML, but it is difficult to preclude

//@ invariant 0==(\\lblpos A -k);    " +

//@ invariant \\lblneg ghost false;    " +  // This is not strict JML, but it is difficult to preclude

//@ invariant 0==(\\lblpos pure -k);    " +

//@ invariant \\lbl ghost false;    " +  // This is not strict JML, but it is difficult to preclude

//@ invariant 0==(\\lbl pure -k);    " +

//@ invariant \\lbl ghost false;    " +  // This is not strict JML, but it is difficult to preclude

//@ invariant (\\lbl pure -k);    " +

//@ invariant (\\lblneg A false);    " +

//@ invariant (\\lblpos A k);    " +

//@ invariant \\lblneg A false;    " +  // This is not strict JML, but it is difficult to preclude

//@ invariant 0==(\\lblpos A -k);    " +

//@ invariant \\lblneg ghost false;    " +  // This is not strict JML, but it is difficult to preclude

//@ invariant 0==(\\lblpos pure -k);    " +

//@ invariant \\lbl ghost false;    " +  // This is not strict JML, but it is difficult to preclude

//@ invariant 0==(\\lbl pure -k);    " +

//@ invariant \\lbl ghost false;    " +  // This is not strict JML, but it is difficult to preclude

//@ invariant (\\lbl pure -k);    " +

//@ invariant (\\lblneg A false);    " +

//@ invariant (\\lblpos A k);    " +

//@ invariant \\lblneg A false;    " +  // This is not strict JML, but it is difficult to preclude

//@ invariant 0==(\\lblpos A -k);    " +

//@ invariant \\lblneg ghost false;    " +  // This is not strict JML, but it is difficult to preclude

//@ invariant 0==(\\lblpos pure -k);    " +

//@ invariant \\lbl ghost false;    " +  // This is not strict JML, but it is difficult to preclude

//@ invariant 0==(\\lbl pure -k);    " +

//@ invariant \\lbl ghost false;    " +  // This is not strict JML, but it is difficult to preclude

//@ invariant (\\lbl pure -k);    " +

//@ invariant (\\lblneg A false);    " +

//@ invariant (\\lblpos A k);    " +

//@ invariant \\lblneg A false;    " +  // This is not strict JML, but it is difficult to preclude

//@ invariant 0==(\\lblpos A -k);    " +

//@ invariant \\lblneg ghost false;    " +  // This is not strict JML, but it is difficult to preclude

//@ invariant 0==(\\lblpos pure -k);    " +

//@ invariant \\lbl ghost false;    " +  // This is not strict JML, but it is difficult to preclude

//@ invariant 0==(\\lbl pure -k);    " +

//@ invariant \\lbl ghost false;    " +  // This is not strict JML, but it is difficult to preclude

//@ invariant (\\lbl pure -k);    " +

//@ invariant (\\lblneg A false);    " +

//@ invariant (\\lblpos A k);    " +

//@ invariant \\lblneg A false;    " +  // This is not strict JML, but it is difficult to preclude

//@ invariant 0==(\\lblpos A -k);    " +

//@ invariant \\lblneg ghost false;    " +  // This is not strict JML, but it is difficult to preclude

//@ invariant 0==(\\lblpos pure -k);    " +

//@ invariant \\lbl ghost false;    " +  // This is not strict JML, but it is difficult to preclude

//@ invariant 0==(\\lbl pure -k);    " +

//@ invariant \\lbl ghost false;    " +  // This is not strict JML, but it is difficult to preclude

//@ invariant (\\lbl pure -k);    " +

/*@ model class B {} */
/*@ class B {}*/
/*@ model */
/*@ model  class A {} */
/*@ model class A {} */
/*@ model class A {} */
/*@ class A {} */
/*@ model class B {} */
/*@ model class B {} */
/*@  class B {} */
/*@ model */
/*@ model int j; */
/*@ model */
/*@  int j; */
/*@ model int j; */
/*@ model int j; */
/*@ model */
/*@ int jjjj; */
/*@ model int k; */
/*@  int k; */
/*@ model */
/*@ model int j(){return 0;}  */
/*@ model */
/*@ int j(){return 0;}  */
/*@ model int j(){return 0;}  */
/*@ model int j(){return 0;}  */
/*@ model */
/*@ model */
/*@ int j();  */
/*@ model int k();  */
/*@  int k(){return 0;}  */
/*@ model */
/*@ model int k(){return 0;} */
/*@ model int j(); */
/*@ model int k; */
/*@ model int j; */
/*@ model class B {} */
/*@ class B {}*/
/*@ model */
/*@ model  class A {} */
/*@ model class A {} */
/*@ model class A {} */
/*@ class A {} */
/*@ model class B {} */
/*@ model class B {} */
/*@  class B {} */
/*@ model */
/*@ model int j; */
/*@ model */
/*@  int j; */
/*@ model int j; */
/*@ model int j; */
/*@ model */
/*@ int jjjj; */
/*@ model int k; */
/*@  int k; */
/*@ model */
/*@ model int j(){return 0;}  */
/*@ model */
/*@ int j(){return 0;}  */
/*@ model int j(){return 0;}  */
/*@ model int j(){return 0;}  */
/*@ model */
/*@ model */
/*@ int j();  */
/*@ model int k();  */
/*@  int k(){return 0;}  */
/*@ model */
/*@ model int k(){return 0;} */
/*@ model int j(); */
/*@ model int k; */
/*@ model int j; */
/*@ model class B {} */
/*@ class B {}*/
/*@ model */
/*@ model  class A {} */
/*@ model class A {} */
/*@ model class A {} */
/*@ class A {} */
/*@ model class B {} */
/*@ model class B {} */
/*@  class B {} */
/*@ model */
/*@ model int j; */
/*@ model */
/*@  int j; */
/*@ model int j; */
/*@ model int j; */
/*@ model */
/*@ int jjjj; */
/*@ model int k; */
/*@  int k; */
/*@ model */
/*@ model int j(){return 0;}  */
/*@ model */
/*@ int j(){return 0;}  */
/*@ model int j(){return 0;}  */
/*@ model int j(){return 0;}  */
/*@ model */
/*@ model */
/*@ int j();  */
/*@ model int k();  */
/*@  int k(){return 0;}  */
/*@ model */
/*@ model int k(){return 0;} */
/*@ model int j(); */
/*@ model int k; */
/*@ model int j; */
/*@ model class B {} */
/*@ class B {}*/
/*@ model */
/*@ model  class A {} */
/*@ model class A {} */
/*@ model class A {} */
/*@ class A {} */
/*@ model class B {} */
/*@ model class B {} */
/*@  class B {} */
/*@ model */
/*@ model int j; */
/*@ model */
/*@  int j; */
/*@ model int j; */
/*@ model int j; */
/*@ model */
/*@ int jjjj; */
/*@ model int k; */
/*@  int k; */
/*@ model */
/*@ model int j(){return 0;}  */
/*@ model */
/*@ int j(){return 0;}  */
/*@ model int j(){return 0;}  */
/*@ model int j(){return 0;}  */
/*@ model */
/*@ model */
/*@ int j();  */
/*@ model int k();  */
/*@  int k(){return 0;}  */
/*@ model */
/*@ model int k(){return 0;} */
/*@ model int j(); */
/*@ model int k; */
/*@ model int j; */
/*@ model class B {} */
/*@ class B {}*/
/*@ model */
/*@ model  class A {} */
/*@ model class A {} */
/*@ model class A {} */
/*@ class A {} */
/*@ model class B {} */
/*@ model class B {} */
/*@  class B {} */
/*@ model */
/*@ model int j; */
/*@ model */
/*@  int j; */
/*@ model int j; */
/*@ model int j; */
/*@ model */
/*@ int jjjj; */
/*@ model int k; */
/*@  int k; */
/*@ model */
/*@ model int j(){return 0;}  */
/*@ model */
/*@ int j(){return 0;}  */
/*@ model int j(){return 0;}  */
/*@ model int j(){return 0;}  */
/*@ model */
/*@ model */
/*@ int j();  */
/*@ model int k();  */
/*@  int k(){return 0;}  */
/*@ model */
/*@ model int k(){return 0;} */
/*@ model int j(); */
/*@ model int k; */
/*@ model int j; */
//@ also    "

//@ r equires true;    "

//@ signals_only Exception;    "

//@ requires true;    "

//@ s ignals_only Exception;    "

//@ r equires true;    "

//@ signals_only Exception;    "

//@ true equires true;    "

//@ signals_only Exception;    "

//@ class equires true;    "

//@ signals_only Exception;    "

//@ model class ;    "

//@ signals_only Exception;    "

//@ requires true;    "

//@ signals_only Exception;    "

//@ signals_only Exception;    "

//@ requires true;    "

//@ signals_only Exception;    "

//@ requires true;    "

//@ signals_only Object;    "

//@ requires true;    "

//@ signals_only \    othing;    "

//@ requires true;    "

//@ signals_only ;    "

//@ requires true;    "

//@ signals_only Exception;    "

//@ {|    "

//@ ensures false;    "

//@ also    "

//@ signals_only Exception;    "

//@ |}    "

//@ requires true;    "

//@ {|    "

//@ signals_only Exception;    "

//@ also    "

//@ signals_only Exception;    "

//@ |}    "

//@ requires true;    "

//@ {|    "

//@ signals_only Exception;    "

//@ also    "

//@ assignable \\everything;    "

//@ |}    "

//@ pure    "

//@ requires true;    "

//@ {|    "

//@ signals_only Exception;    "

//@ also    "

//@ assignable k, sk, this.k;    "

//@ |}    "

//@ pure    "

//@ requires true;    "

//@ {|    "

//@ signals_only Exception;    "

//@ also    "

//@ assignable sk, A.sk, sbk, B.sbk;    "

//@ |}    "

//@ pure    "

/*@ model instance int bk; model static int sbk; */
//@ requires true;    "

//@ {|    "

//@ signals_only Exception;    "

//@ also    "

//@ assignable     sbk, A.sbk;    "

//@ |}    "

//@ pure    "

//@ behavior    "

//@ requires true;    "

//@ ensures false;    "

//@ also    "

//@ exceptional_behavior    "

//@ assignable \\everything;    "

//@ behavior    "

//@ requires true;    "

//@ also    "

//@ exceptional_behavior    "

//@ ensures false;    "

//@ behavior    "

//@ requires true;    "

//@ signals (Exception e) false;    "

//@ also    "

//@ normal_behavior    "

//@ assignable \\everything;    "

//@ behavior    "

//@ requires true;    "

//@ also    "

//@ normal_behavior    "

//@ signals (Exception e) false;    "

//@ behavior    "

//@ requires true;    "

//@ signals_only RuntimeException;    "

//@ also    "

//@ normal_behavior    "

//@ assignable \\everything;    "

//@ behavior    "

//@ requires true;    "

//@ also    "

//@ normal_behavior    "

//@ signals_only RuntimeException;    "

//@ also    "

//@ r equires true;    "

//@ signals_only Exception;    "

//@ requires true;    "

//@ s ignals_only Exception;    "

//@ r equires true;    "

//@ signals_only Exception;    "

//@ true equires true;    "

//@ signals_only Exception;    "

//@ class equires true;    "

//@ signals_only Exception;    "

//@ model class ;    "

//@ signals_only Exception;    "

//@ requires true;    "

//@ signals_only Exception;    "

//@ signals_only Exception;    "

//@ requires true;    "

//@ signals_only Exception;    "

//@ requires true;    "

//@ signals_only Object;    "

//@ requires true;    "

//@ signals_only \    othing;    "

//@ requires true;    "

//@ signals_only ;    "

//@ requires true;    "

//@ signals_only Exception;    "

//@ {|    "

//@ ensures false;    "

//@ also    "

//@ signals_only Exception;    "

//@ |}    "

//@ requires true;    "

//@ {|    "

//@ signals_only Exception;    "

//@ also    "

//@ signals_only Exception;    "

//@ |}    "

//@ requires true;    "

//@ {|    "

//@ signals_only Exception;    "

//@ also    "

//@ assignable \\everything;    "

//@ |}    "

//@ pure    "

//@ requires true;    "

//@ {|    "

//@ signals_only Exception;    "

//@ also    "

//@ assignable k, sk, this.k;    "

//@ |}    "

//@ pure    "

//@ requires true;    "

//@ {|    "

//@ signals_only Exception;    "

//@ also    "

//@ assignable sk, A.sk, sbk, B.sbk;    "

//@ |}    "

//@ pure    "

/*@ model instance int bk; model static int sbk; */
//@ requires true;    "

//@ {|    "

//@ signals_only Exception;    "

//@ also    "

//@ assignable     sbk, A.sbk;    "

//@ |}    "

//@ pure    "

//@ behavior    "

//@ requires true;    "

//@ ensures false;    "

//@ also    "

//@ exceptional_behavior    "

//@ assignable \\everything;    "

//@ behavior    "

//@ requires true;    "

//@ also    "

//@ exceptional_behavior    "

//@ ensures false;    "

//@ behavior    "

//@ requires true;    "

//@ signals (Exception e) false;    "

//@ also    "

//@ normal_behavior    "

//@ assignable \\everything;    "

//@ behavior    "

//@ requires true;    "

//@ also    "

//@ normal_behavior    "

//@ signals (Exception e) false;    "

//@ behavior    "

//@ requires true;    "

//@ signals_only RuntimeException;    "

//@ also    "

//@ normal_behavior    "

//@ assignable \\everything;    "

//@ behavior    "

//@ requires true;    "

//@ also    "

//@ normal_behavior    "

//@ signals_only RuntimeException;    "

//@ also    "

//@ r equires true;    "

//@ signals_only Exception;    "

//@ requires true;    "

//@ s ignals_only Exception;    "

//@ r equires true;    "

//@ signals_only Exception;    "

//@ true equires true;    "

//@ signals_only Exception;    "

//@ class equires true;    "

//@ signals_only Exception;    "

//@ model class ;    "

//@ signals_only Exception;    "

//@ requires true;    "

//@ signals_only Exception;    "

//@ signals_only Exception;    "

//@ requires true;    "

//@ signals_only Exception;    "

//@ requires true;    "

//@ signals_only Object;    "

//@ requires true;    "

//@ signals_only \    othing;    "

//@ requires true;    "

//@ signals_only ;    "

//@ requires true;    "

//@ signals_only Exception;    "

//@ {|    "

//@ ensures false;    "

//@ also    "

//@ signals_only Exception;    "

//@ |}    "

//@ requires true;    "

//@ {|    "

//@ signals_only Exception;    "

//@ also    "

//@ signals_only Exception;    "

//@ |}    "

//@ requires true;    "

//@ {|    "

//@ signals_only Exception;    "

//@ also    "

//@ assignable \\everything;    "

//@ |}    "

//@ pure    "

//@ requires true;    "

//@ {|    "

//@ signals_only Exception;    "

//@ also    "

//@ assignable k, sk, this.k;    "

//@ |}    "

//@ pure    "

//@ requires true;    "

//@ {|    "

//@ signals_only Exception;    "

//@ also    "

//@ assignable sk, A.sk, sbk, B.sbk;    "

//@ |}    "

//@ pure    "

/*@ model instance int bk; model static int sbk; */
//@ requires true;    "

//@ {|    "

//@ signals_only Exception;    "

//@ also    "

//@ assignable     sbk, A.sbk;    "

//@ |}    "

//@ pure    "

//@ behavior    "

//@ requires true;    "

//@ ensures false;    "

//@ also    "

//@ exceptional_behavior    "

//@ assignable \\everything;    "

//@ behavior    "

//@ requires true;    "

//@ also    "

//@ exceptional_behavior    "

//@ ensures false;    "

//@ behavior    "

//@ requires true;    "

//@ signals (Exception e) false;    "

//@ also    "

//@ normal_behavior    "

//@ assignable \\everything;    "

//@ behavior    "

//@ requires true;    "

//@ also    "

//@ normal_behavior    "

//@ signals (Exception e) false;    "

//@ behavior    "

//@ requires true;    "

//@ signals_only RuntimeException;    "

//@ also    "

//@ normal_behavior    "

//@ assignable \\everything;    "

//@ behavior    "

//@ requires true;    "

//@ also    "

//@ normal_behavior    "

//@ signals_only RuntimeException;    "

//@ also    "

//@ r equires true;    "

//@ signals_only Exception;    "

//@ requires true;    "

//@ s ignals_only Exception;    "

//@ r equires true;    "

//@ signals_only Exception;    "

//@ true equires true;    "

//@ signals_only Exception;    "

//@ class equires true;    "

//@ signals_only Exception;    "

//@ model class ;    "

//@ signals_only Exception;    "

//@ requires true;    "

//@ signals_only Exception;    "

//@ signals_only Exception;    "

//@ requires true;    "

//@ signals_only Exception;    "

//@ requires true;    "

//@ signals_only Object;    "

//@ requires true;    "

//@ signals_only \    othing;    "

//@ requires true;    "

//@ signals_only ;    "

//@ requires true;    "

//@ signals_only Exception;    "

//@ {|    "

//@ ensures false;    "

//@ also    "

//@ signals_only Exception;    "

//@ |}    "

//@ requires true;    "

//@ {|    "

//@ signals_only Exception;    "

//@ also    "

//@ signals_only Exception;    "

//@ |}    "

//@ requires true;    "

//@ {|    "

//@ signals_only Exception;    "

//@ also    "

//@ assignable \\everything;    "

//@ |}    "

//@ pure    "

//@ requires true;    "

//@ {|    "

//@ signals_only Exception;    "

//@ also    "

//@ assignable k, sk, this.k;    "

//@ |}    "

//@ pure    "

//@ requires true;    "

//@ {|    "

//@ signals_only Exception;    "

//@ also    "

//@ assignable sk, A.sk, sbk, B.sbk;    "

//@ |}    "

//@ pure    "

/*@ model instance int bk; model static int sbk; */
//@ requires true;    "

//@ {|    "

//@ signals_only Exception;    "

//@ also    "

//@ assignable     sbk, A.sbk;    "

//@ |}    "

//@ pure    "

//@ behavior    "

//@ requires true;    "

//@ ensures false;    "

//@ also    "

//@ exceptional_behavior    "

//@ assignable \\everything;    "

//@ behavior    "

//@ requires true;    "

//@ also    "

//@ exceptional_behavior    "

//@ ensures false;    "

//@ behavior    "

//@ requires true;    "

//@ signals (Exception e) false;    "

//@ also    "

//@ normal_behavior    "

//@ assignable \\everything;    "

//@ behavior    "

//@ requires true;    "

//@ also    "

//@ normal_behavior    "

//@ signals (Exception e) false;    "

//@ behavior    "

//@ requires true;    "

//@ signals_only RuntimeException;    "

//@ also    "

//@ normal_behavior    "

//@ assignable \\everything;    "

//@ behavior    "

//@ requires true;    "

//@ also    "

//@ normal_behavior    "

//@ signals_only RuntimeException;    "

//@ also    "

//@ r equires true;    "

//@ signals_only Exception;    "

//@ requires true;    "

//@ s ignals_only Exception;    "

//@ r equires true;    "

//@ signals_only Exception;    "

//@ true equires true;    "

//@ signals_only Exception;    "

//@ class equires true;    "

//@ signals_only Exception;    "

//@ model class ;    "

//@ signals_only Exception;    "

//@ requires true;    "

//@ signals_only Exception;    "

//@ signals_only Exception;    "

//@ requires true;    "

//@ signals_only Exception;    "

//@ requires true;    "

//@ signals_only Object;    "

//@ requires true;    "

//@ signals_only \    othing;    "

//@ requires true;    "

//@ signals_only ;    "

//@ requires true;    "

//@ signals_only Exception;    "

//@ {|    "

//@ ensures false;    "

//@ also    "

//@ signals_only Exception;    "

//@ |}    "

//@ requires true;    "

//@ {|    "

//@ signals_only Exception;    "

//@ also    "

//@ signals_only Exception;    "

//@ |}    "

//@ requires true;    "

//@ {|    "

//@ signals_only Exception;    "

//@ also    "

//@ assignable \\everything;    "

//@ |}    "

//@ pure    "

//@ requires true;    "

//@ {|    "

//@ signals_only Exception;    "

//@ also    "

//@ assignable k, sk, this.k;    "

//@ |}    "

//@ pure    "

//@ requires true;    "

//@ {|    "

//@ signals_only Exception;    "

//@ also    "

//@ assignable sk, A.sk, sbk, B.sbk;    "

//@ |}    "

//@ pure    "

/*@ model instance int bk; model static int sbk; */
//@ requires true;    "

//@ {|    "

//@ signals_only Exception;    "

//@ also    "

//@ assignable     sbk, A.sbk;    "

//@ |}    "

//@ pure    "

//@ behavior    "

//@ requires true;    "

//@ ensures false;    "

//@ also    "

//@ exceptional_behavior    "

//@ assignable \\everything;    "

//@ behavior    "

//@ requires true;    "

//@ also    "

//@ exceptional_behavior    "

//@ ensures false;    "

//@ behavior    "

//@ requires true;    "

//@ signals (Exception e) false;    "

//@ also    "

//@ normal_behavior    "

//@ assignable \\everything;    "

//@ behavior    "

//@ requires true;    "

//@ also    "

//@ normal_behavior    "

//@ signals (Exception e) false;    "

//@ behavior    "

//@ requires true;    "

//@ signals_only RuntimeException;    "

//@ also    "

//@ normal_behavior    "

//@ assignable \\everything;    "

//@ behavior    "

//@ requires true;    "

//@ also    "

//@ normal_behavior    "

//@ signals_only RuntimeException;    "

/*@ model int m() { return B.n; } */
/*@ model class B { public static int n; } */
/*@ model int m() { return B.n; } */
/*@ model class B { public static int n; } */
/*@ model B m() { return B.n; }  */
/*@ model class B { public static B n; } */
//@ model int m1() { return 0; }    " + // OK

/*@ model */
//@ model int p1();    " +  // OK

/*@ model */
//@ int q();    " +  // BAD

//@ model int m1() { return 0; }    " + // OK

/*@ model */
//@ model int p1();    " +  // OK

/*@ model */
//@ int q();    " +  // BAD

/*@ static model public class III {    " +  // Line 18
                "  void m() {}    " +  // OK
                "  model int m1() { return 0; }    " + // NO NESTING
                "  void p();    " +  // OK - FIXME - resolve the rules about model methods and embedded model declarations
                "  model int p1();    " +  // NO NESTING
                "  }*/
/*@ model class B {     " +  // Line 25
                "  void m() {}    " +  // OK
                "   model int m1() { return 0; }    " + // NO NESTING
                "  void p();    " +  // OK -- FIXME - as above
                "   model int p1();    " +  // NO NESTING
                "}    */
//@ model int m1() { return 0; }    " + // OK

/*@ model */
//@ model int p1();    " +  // OK

/*@ model */
//@ int q();    " +  // BAD

/*@ pure */
//@ model pure boolean m1() { return true; }    " + // OK

//@ invariant m() && m1();    " +

//@ requires m() && m1();    " +

//@ requires m() && m1();    " + // BAD - VISIBILITY PROBLEMS

//@ requires B.m() && B.m1();    " +

//@ requires B.m() && B.m1();    " + // BAD - VISIBILITY PROBLEMS

/*@ pure */
//@ model pure static boolean m1() { return true; }    " + // OK

//@ static invariant m() && m1();    " +

//@ requires JML.erasure(\\typeof(this)) == JML.erasure(\\type(A));    " +

//@ model static public class B{}    " +

/*@ model */
//@ static public class D{}    " + // SHOULD BE MODEL

//@ model  public class B{}    " +

/*@ model */
//@  public class D{}    " +  // SHOULD BE MODEL

/*@ model public class M {     " +                  // Line 10
                "    model  public class B{}    " +  // NO POINT
                "     public class C{}    " +
                "  }*/
/*@ model */
/*@ model class Q {     " +
                "  model  public class C{}    " + // NO POINT
                "   public class D{}    " +
                "}*/
//@ model  public class B{}    " +

/*@ model */
//@  public class D{}    " + // BAD

//@ model int m1;    " + // OK

//@ ghost int m1a;    " + // OK

/*@ model */
/*@ ghost */
//@ int q;    " +  // BAD

//@ model int m1;    " + // OK

//@ ghost int m1a;    " + // OK

/*@ model */
/*@ ghost */
//@ int q;    " +  // BAD

/*@ static model public class III {    " +  // Line 16
                "    int m;    " +  // OK
                "    model int m1;    " + // NO NESTING
                "    ghost int m1a;    " + // NO NESTING
                "        " +
                "  }*/
/*@ model class B {     " +  // Line 23
                "  int m;    " +  // OK
                "   model int m1; ghost int m2;     " + // NO NESTING
                "}    */
//@ model int m1;    " + // OK

//@ ghost int m1a;    " + // OK

/*@ model */
/*@ ghost */
//@ int q;    " +  // BAD

/*@ model  class B { int i;  { i = 2; } } */
/*@ model public class B { int i;  { i = 2; } } */
/*@ model public class B { int i;  { i = 2; } } */
/*@ model public class B { int i;  { i = 2; } } */
//@ public model instance int z;    "

//@ static model int z2;    "

/*@ model int m() { return B.n; } */
/*@ model class B { public static int n; } */
/*@ model int m() { return B.n; } */
/*@ model class B { public static int n; } */
/*@ model B m() { return B.n; }  */
/*@ model class B { public static B n; } */
//@ model int m1() { return 0; }    " + // OK

/*@ model */
//@ model int p1();    " +  // OK

/*@ model */
//@ int q();    " +  // BAD

//@ model int m1() { return 0; }    " + // OK

/*@ model */
//@ model int p1();    " +  // OK

/*@ model */
//@ int q();    " +  // BAD

/*@ static model public class III {    " +  // Line 18
                "  void m() {}    " +  // OK
                "  model int m1() { return 0; }    " + // NO NESTING
                "  void p();    " +  // OK - FIXME - resolve the rules about model methods and embedded model declarations
                "  model int p1();    " +  // NO NESTING
                "  }*/
/*@ model class B {     " +  // Line 25
                "  void m() {}    " +  // OK
                "   model int m1() { return 0; }    " + // NO NESTING
                "  void p();    " +  // OK -- FIXME - as above
                "   model int p1();    " +  // NO NESTING
                "}    */
//@ model int m1() { return 0; }    " + // OK

/*@ model */
//@ model int p1();    " +  // OK

/*@ model */
//@ int q();    " +  // BAD

/*@ pure */
//@ model pure boolean m1() { return true; }    " + // OK

//@ invariant m() && m1();    " +

//@ requires m() && m1();    " +

//@ requires m() && m1();    " + // BAD - VISIBILITY PROBLEMS

//@ requires B.m() && B.m1();    " +

//@ requires B.m() && B.m1();    " + // BAD - VISIBILITY PROBLEMS

/*@ pure */
//@ model pure static boolean m1() { return true; }    " + // OK

//@ static invariant m() && m1();    " +

//@ requires JML.erasure(\\typeof(this)) == JML.erasure(\\type(A));    " +

//@ model static public class B{}    " +

/*@ model */
//@ static public class D{}    " + // SHOULD BE MODEL

//@ model  public class B{}    " +

/*@ model */
//@  public class D{}    " +  // SHOULD BE MODEL

/*@ model public class M {     " +                  // Line 10
                "    model  public class B{}    " +  // NO POINT
                "     public class C{}    " +
                "  }*/
/*@ model */
/*@ model class Q {     " +
                "  model  public class C{}    " + // NO POINT
                "   public class D{}    " +
                "}*/
//@ model  public class B{}    " +

/*@ model */
//@  public class D{}    " + // BAD

//@ model int m1;    " + // OK

//@ ghost int m1a;    " + // OK

/*@ model */
/*@ ghost */
//@ int q;    " +  // BAD

//@ model int m1;    " + // OK

//@ ghost int m1a;    " + // OK

/*@ model */
/*@ ghost */
//@ int q;    " +  // BAD

/*@ static model public class III {    " +  // Line 16
                "    int m;    " +  // OK
                "    model int m1;    " + // NO NESTING
                "    ghost int m1a;    " + // NO NESTING
                "        " +
                "  }*/
/*@ model class B {     " +  // Line 23
                "  int m;    " +  // OK
                "   model int m1; ghost int m2;     " + // NO NESTING
                "}    */
//@ model int m1;    " + // OK

//@ ghost int m1a;    " + // OK

/*@ model */
/*@ ghost */
//@ int q;    " +  // BAD

/*@ model  class B { int i;  { i = 2; } } */
/*@ model public class B { int i;  { i = 2; } } */
/*@ model public class B { int i;  { i = 2; } } */
/*@ model public class B { int i;  { i = 2; } } */
//@ public model instance int z;    "

//@ static model int z2;    "

/*@ model int m() { return B.n; } */
/*@ model class B { public static int n; } */
/*@ model int m() { return B.n; } */
/*@ model class B { public static int n; } */
/*@ model B m() { return B.n; }  */
/*@ model class B { public static B n; } */
//@ model int m1() { return 0; }    " + // OK

/*@ model */
//@ model int p1();    " +  // OK

/*@ model */
//@ int q();    " +  // BAD

//@ model int m1() { return 0; }    " + // OK

/*@ model */
//@ model int p1();    " +  // OK

/*@ model */
//@ int q();    " +  // BAD

/*@ static model public class III {    " +  // Line 18
                "  void m() {}    " +  // OK
                "  model int m1() { return 0; }    " + // NO NESTING
                "  void p();    " +  // OK - FIXME - resolve the rules about model methods and embedded model declarations
                "  model int p1();    " +  // NO NESTING
                "  }*/
/*@ model class B {     " +  // Line 25
                "  void m() {}    " +  // OK
                "   model int m1() { return 0; }    " + // NO NESTING
                "  void p();    " +  // OK -- FIXME - as above
                "   model int p1();    " +  // NO NESTING
                "}    */
//@ model int m1() { return 0; }    " + // OK

/*@ model */
//@ model int p1();    " +  // OK

/*@ model */
//@ int q();    " +  // BAD

/*@ pure */
//@ model pure boolean m1() { return true; }    " + // OK

//@ invariant m() && m1();    " +

//@ requires m() && m1();    " +

//@ requires m() && m1();    " + // BAD - VISIBILITY PROBLEMS

//@ requires B.m() && B.m1();    " +

//@ requires B.m() && B.m1();    " + // BAD - VISIBILITY PROBLEMS

/*@ pure */
//@ model pure static boolean m1() { return true; }    " + // OK

//@ static invariant m() && m1();    " +

//@ requires JML.erasure(\\typeof(this)) == JML.erasure(\\type(A));    " +

//@ model static public class B{}    " +

/*@ model */
//@ static public class D{}    " + // SHOULD BE MODEL

//@ model  public class B{}    " +

/*@ model */
//@  public class D{}    " +  // SHOULD BE MODEL

/*@ model public class M {     " +                  // Line 10
                "    model  public class B{}    " +  // NO POINT
                "     public class C{}    " +
                "  }*/
/*@ model */
/*@ model class Q {     " +
                "  model  public class C{}    " + // NO POINT
                "   public class D{}    " +
                "}*/
//@ model  public class B{}    " +

/*@ model */
//@  public class D{}    " + // BAD

//@ model int m1;    " + // OK

//@ ghost int m1a;    " + // OK

/*@ model */
/*@ ghost */
//@ int q;    " +  // BAD

//@ model int m1;    " + // OK

//@ ghost int m1a;    " + // OK

/*@ model */
/*@ ghost */
//@ int q;    " +  // BAD

/*@ static model public class III {    " +  // Line 16
                "    int m;    " +  // OK
                "    model int m1;    " + // NO NESTING
                "    ghost int m1a;    " + // NO NESTING
                "        " +
                "  }*/
/*@ model class B {     " +  // Line 23
                "  int m;    " +  // OK
                "   model int m1; ghost int m2;     " + // NO NESTING
                "}    */
//@ model int m1;    " + // OK

//@ ghost int m1a;    " + // OK

/*@ model */
/*@ ghost */
//@ int q;    " +  // BAD

/*@ model  class B { int i;  { i = 2; } } */
/*@ model public class B { int i;  { i = 2; } } */
/*@ model public class B { int i;  { i = 2; } } */
/*@ model public class B { int i;  { i = 2; } } */
//@ public model instance int z;    "

//@ static model int z2;    "

/*@ model int m() { return B.n; } */
/*@ model class B { public static int n; } */
/*@ model int m() { return B.n; } */
/*@ model class B { public static int n; } */
/*@ model B m() { return B.n; }  */
/*@ model class B { public static B n; } */
//@ model int m1() { return 0; }    " + // OK

/*@ model */
//@ model int p1();    " +  // OK

/*@ model */
//@ int q();    " +  // BAD

//@ model int m1() { return 0; }    " + // OK

/*@ model */
//@ model int p1();    " +  // OK

/*@ model */
//@ int q();    " +  // BAD

/*@ static model public class III {    " +  // Line 18
                "  void m() {}    " +  // OK
                "  model int m1() { return 0; }    " + // NO NESTING
                "  void p();    " +  // OK - FIXME - resolve the rules about model methods and embedded model declarations
                "  model int p1();    " +  // NO NESTING
                "  }*/
/*@ model class B {     " +  // Line 25
                "  void m() {}    " +  // OK
                "   model int m1() { return 0; }    " + // NO NESTING
                "  void p();    " +  // OK -- FIXME - as above
                "   model int p1();    " +  // NO NESTING
                "}    */
//@ model int m1() { return 0; }    " + // OK

/*@ model */
//@ model int p1();    " +  // OK

/*@ model */
//@ int q();    " +  // BAD

/*@ pure */
//@ model pure boolean m1() { return true; }    " + // OK

//@ invariant m() && m1();    " +

//@ requires m() && m1();    " +

//@ requires m() && m1();    " + // BAD - VISIBILITY PROBLEMS

//@ requires B.m() && B.m1();    " +

//@ requires B.m() && B.m1();    " + // BAD - VISIBILITY PROBLEMS

/*@ pure */
//@ model pure static boolean m1() { return true; }    " + // OK

//@ static invariant m() && m1();    " +

//@ requires JML.erasure(\\typeof(this)) == JML.erasure(\\type(A));    " +

//@ model static public class B{}    " +

/*@ model */
//@ static public class D{}    " + // SHOULD BE MODEL

//@ model  public class B{}    " +

/*@ model */
//@  public class D{}    " +  // SHOULD BE MODEL

/*@ model public class M {     " +                  // Line 10
                "    model  public class B{}    " +  // NO POINT
                "     public class C{}    " +
                "  }*/
/*@ model */
/*@ model class Q {     " +
                "  model  public class C{}    " + // NO POINT
                "   public class D{}    " +
                "}*/
//@ model  public class B{}    " +

/*@ model */
//@  public class D{}    " + // BAD

//@ model int m1;    " + // OK

//@ ghost int m1a;    " + // OK

/*@ model */
/*@ ghost */
//@ int q;    " +  // BAD

//@ model int m1;    " + // OK

//@ ghost int m1a;    " + // OK

/*@ model */
/*@ ghost */
//@ int q;    " +  // BAD

/*@ static model public class III {    " +  // Line 16
                "    int m;    " +  // OK
                "    model int m1;    " + // NO NESTING
                "    ghost int m1a;    " + // NO NESTING
                "        " +
                "  }*/
/*@ model class B {     " +  // Line 23
                "  int m;    " +  // OK
                "   model int m1; ghost int m2;     " + // NO NESTING
                "}    */
//@ model int m1;    " + // OK

//@ ghost int m1a;    " + // OK

/*@ model */
/*@ ghost */
//@ int q;    " +  // BAD

/*@ model  class B { int i;  { i = 2; } } */
/*@ model public class B { int i;  { i = 2; } } */
/*@ model public class B { int i;  { i = 2; } } */
/*@ model public class B { int i;  { i = 2; } } */
//@ public model instance int z;    "

//@ static model int z2;    "

/*@ model int m() { return B.n; } */
/*@ model class B { public static int n; } */
/*@ model int m() { return B.n; } */
/*@ model class B { public static int n; } */
/*@ model B m() { return B.n; }  */
/*@ model class B { public static B n; } */
//@ model int m1() { return 0; }    " + // OK

/*@ model */
//@ model int p1();    " +  // OK

/*@ model */
//@ int q();    " +  // BAD

//@ model int m1() { return 0; }    " + // OK

/*@ model */
//@ model int p1();    " +  // OK

/*@ model */
//@ int q();    " +  // BAD

/*@ static model public class III {    " +  // Line 18
                "  void m() {}    " +  // OK
                "  model int m1() { return 0; }    " + // NO NESTING
                "  void p();    " +  // OK - FIXME - resolve the rules about model methods and embedded model declarations
                "  model int p1();    " +  // NO NESTING
                "  }*/
/*@ model class B {     " +  // Line 25
                "  void m() {}    " +  // OK
                "   model int m1() { return 0; }    " + // NO NESTING
                "  void p();    " +  // OK -- FIXME - as above
                "   model int p1();    " +  // NO NESTING
                "}    */
//@ model int m1() { return 0; }    " + // OK

/*@ model */
//@ model int p1();    " +  // OK

/*@ model */
//@ int q();    " +  // BAD

/*@ pure */
//@ model pure boolean m1() { return true; }    " + // OK

//@ invariant m() && m1();    " +

//@ requires m() && m1();    " +

//@ requires m() && m1();    " + // BAD - VISIBILITY PROBLEMS

//@ requires B.m() && B.m1();    " +

//@ requires B.m() && B.m1();    " + // BAD - VISIBILITY PROBLEMS

/*@ pure */
//@ model pure static boolean m1() { return true; }    " + // OK

//@ static invariant m() && m1();    " +

//@ requires JML.erasure(\\typeof(this)) == JML.erasure(\\type(A));    " +

//@ model static public class B{}    " +

/*@ model */
//@ static public class D{}    " + // SHOULD BE MODEL

//@ model  public class B{}    " +

/*@ model */
//@  public class D{}    " +  // SHOULD BE MODEL

/*@ model public class M {     " +                  // Line 10
                "    model  public class B{}    " +  // NO POINT
                "     public class C{}    " +
                "  }*/
/*@ model */
/*@ model class Q {     " +
                "  model  public class C{}    " + // NO POINT
                "   public class D{}    " +
                "}*/
//@ model  public class B{}    " +

/*@ model */
//@  public class D{}    " + // BAD

//@ model int m1;    " + // OK

//@ ghost int m1a;    " + // OK

/*@ model */
/*@ ghost */
//@ int q;    " +  // BAD

//@ model int m1;    " + // OK

//@ ghost int m1a;    " + // OK

/*@ model */
/*@ ghost */
//@ int q;    " +  // BAD

/*@ static model public class III {    " +  // Line 16
                "    int m;    " +  // OK
                "    model int m1;    " + // NO NESTING
                "    ghost int m1a;    " + // NO NESTING
                "        " +
                "  }*/
/*@ model class B {     " +  // Line 23
                "  int m;    " +  // OK
                "   model int m1; ghost int m2;     " + // NO NESTING
                "}    */
//@ model int m1;    " + // OK

//@ ghost int m1a;    " + // OK

/*@ model */
/*@ ghost */
//@ int q;    " +  // BAD

/*@ model  class B { int i;  { i = 2; } } */
/*@ model public class B { int i;  { i = 2; } } */
/*@ model public class B { int i;  { i = 2; } } */
/*@ model public class B { int i;  { i = 2; } } */
//@ public model instance int z;    "

//@ static model int z2;    "

/*@ pure */

/*@ pure pure */
/*@ pure */
/*@ pure */
/*@ pure */
/*@ pure */

//@ public model class A{}");

/*@model*/
//@        ghost class B{}       class C{

/*@ghost*/
//@  @Ghost class B{}     public class A {

//@ public model class B{}        ",

//@ class B{}        ",

//@ model class B{}        "

//@ public model class B{

//@ public model class B{}    ",

/*@nullable_by_default*/
/*@non_null_by_default*/
/*@nullable_by_default non_null_by_default*/
/*@ pure */
/*@ pure */
/*@ pure */
/*@ pure */
/*@ pure */
/*@ pure */
/*@ instance model  int i; */
/*@ represents i = 8; */
/*@  model static int i; */
/*@ represents i = 8; */
/*@ model instance int i; */
/*@ static represents i = 8; */
/*@ model static int i; */
/*@ static represents i = 8; */
/*@ ghost int i; */
/*@ set i = 8; */
/*@ instance ghost int i; */
/*@ set i = 8; */
/*@ final model static int i; */
/*@ final model instance int j = 0;*/
/*@ ghost int k; */
/*@ model int k; */
/*@ ghost int k; */
/*@ int k; */
/*@pure nullable_by_default*/
/*@helper ghost spec_public*/
/*@pure nullable_by_default*/
/*@helper ghost spec_protected*/
/*@pure spec_public*/
/*@pure spec_protected*/
/*@helper ghost */
/*@nullable_by_default*/
/*@spec_public spec_protected*/
/*@pure spec_public*/
/*@pure spec_protected*/
/*@helper ghost */
/*@nullable_by_default*/
/*@spec_public spec_protected*/
/*@ model  */
/*@ model   class C {}*/
/*@         class C {};*/
/*@ helper spec_public */
/*@ ghost  class C {} */
/*@spec_public spec_protected*/
/*@non_null nullable*/
/*@spec_public non_null instance monitored*/
/*@spec_protected nullable instance monitored*/
/*@helper*/
/*@ghost Object o; */
/*@ghost non_null nullable Object o; */
/*@ghost non_null instance monitored Object o; */
/*@ghost nullable instance monitored Object o; */
/*@ghost helper spec_protected Object o;*/
/*@ghost helper spec_public Object o;*/
/*@model ghost Object o; */
/*@model non_null nullable Object o; */
/*@model non_null instance  Object o; */
/*@model nullable instance  Object o; */
/*@model helper monitored spec_public Object o;*/
/*@model helper monitored spec_protected Object o;*/
/*@ pure non_null spec_protected extract */
/*@ pure non_null helper private extract */
/*@ pure non_null  spec_protected extract */
/*@ pure nullable spec_public */
/*@ pure nullable helper private */
/*@ query */
/*@ spec_public spec_protected */
/*@ non_null nullable */
/*@ pure spec_protected extract */
/*@ pure extract helper private */
/*@ pure spec_public */
/*@ pure helper private */
/*@ instance non_null nullable */
/*@ spec_public spec_protected */
/*@ model pure non_null extract Object m(){ return null; } */
/*@ model pure non_null extract private helper Object m(){ return null; } */
/*@ model pure non_null extract Object m(); */
/*@ model pure nullable void m(){} */
/*@ model pure nullable private helper  void m(){} */
/*@ model instance spec_public spec_protected void m(){}*/
/*@ model non_null nullable  Object m(){}*/
/*@ model non_null */
/*@ model pure extract  A(){} */
/*@ model pure private helper extract  A(){} */
/*@ model pure  */
/*@ model pure private helper */
/*@ model instance non_null nullable spec_public spec_protected A(){} */


/*@ non_null nullable */
/*@ spec_public */
/*@ non_null uninitialized */
/*@ nullable uninitialized */
/*@ non_null ghost */
/*@ non_null ghost Object o; */
/*@ non_null nullable Object o; */
/*@ non_null nullable */
/*@ helper */
/*@ helper ghost  Object o; */
/*@   Object o; */
//@ public requires true;    " +

//@ pure requires true;    " +

//@ code requires true;    " +

//@ public behavior requires true;    " +

//@ pure behavior requires true;    " +

//@ private code behavior requires true;    " +

//@ public also behavior requires true;    " +

//@ pure also behavior requires true;    " +

//@ code also behavior requires true;    " +

//@ private public behavior requires true;    " +

//@ private spec_protected public behavior requires true;    " +

//@ invariant (\\exists nullable Object o; o == null);     " +

//@ invariant (\\exists non_null Object o; o == null);     " +

//@ invariant (\\exists final Object o; o == null);     " +

//@ invariant (\\exists \\readonly Object o; o == null);     " +

//@ invariant (\\exists @Nullable Object o; o == null);     " +

//@ invariant (\\exists @Pure Object o; o == null);     " +

//@ invariant null != new Object { nullable Integer i | i < 10 };     " +

//@ invariant null != new Object { non_null Integer i | i < 10 };     " +

//@ invariant null != new Object { final Integer i | i < 10 };     " +

//@ invariant null != new Object { @Nullable Integer i | i < 10 };    " +

//@ invariant null != new Object { @Pure Integer i | i < 10 };    " +

//@ invariant null != new Object { \\readonly Integer i | i < 10 };     " +

//@ forall nullable Object o1;     " +

//@ forall non_null Object o2;     " +

//@ forall \\readonly Object o3;     " +

//@ forall @Nullable Object o4;     " +

//@ forall @Pure Object o6;     " +

//@ forall final Object o5;     " +

//@ old nullable Object o1 = null;     " +

//@ old non_null Object o2 = null;     " +

//@ old \\readonly Object o3 = null;     " +

//@ old @Nullable Object o4 = null;     " +

//@ old @Pure Object o6 = null;     " +

//@ old final Object o5 = null;     " +

//@ invariant true;     " +

//@ public invariant true;     " +

//@ pure invariant true;     " +

//@ private invariant true;     " +

//@ public private invariant true;     " +

 invariant true;     " +

//@ spec_public invariant true;     " +

//@ invariant (new A() { int m() { return 5; } }) != null;     " +

//@ constraint true;     " +

//@ public constraint true;     " +

//@ pure constraint true;     " +

//@ private constraint true;     " +

//@ public private constraint true;     " +

 constraint true;     " +

//@ spec_public constraint true;     " +

//@ axiom true;     " +

//@ public axiom true;     " +

//@ pure axiom true;     " +

//@ private axiom true;     " +

//@ public private axiom true;     " +

 axiom true;     " +

//@ spec_public axiom true;     " +

//@ initially true;     " +

//@ public initially true;     " +

//@ pure initially true;     " +

//@ private initially true;     " +

//@ public private initially true;     " +

 initially true;     " +

//@ spec_public initially true;     " +

//@ static initially true;     " +

//@ instance initially true;     " +


//@ spec_public spec_protected    "



//@ spec_public spec_protected    "

/*@ secret model int a; */
//@ model secret int x;  }"

/*@ nonnull_by_default*/
//@ requires a[i]>0;    "

//@ requires i >= 0 && i < a.length;    "

//@ requires a[i]>0;    "

//@ requires a[i]>0;    "

/*@ nonnull */
//@ requires i >= 0 && i < a.length;    "

//@ requires a[i]>0;    "

/*@ helper */
/*@ helper protected */
/*@ helper public */
/*@ helper private */
/*@ helper private spec_protected*/
/*@ helper private spec_public */
/*@ pure */

/*@ pure pure */
/*@ pure */
/*@ pure */
/*@ pure */
/*@ pure */

//@ public model class A{}");

/*@model*/
//@        ghost class B{}       class C{

/*@ghost*/
//@  @Ghost class B{}     public class A {

//@ public model class B{}        ",

//@ class B{}        ",

//@ model class B{}        "

//@ public model class B{

//@ public model class B{}    ",

/*@nullable_by_default*/
/*@non_null_by_default*/
/*@nullable_by_default non_null_by_default*/
/*@ pure */
/*@ pure */
/*@ pure */
/*@ pure */
/*@ pure */
/*@ pure */
/*@ instance model  int i; */
/*@ represents i = 8; */
/*@  model static int i; */
/*@ represents i = 8; */
/*@ model instance int i; */
/*@ static represents i = 8; */
/*@ model static int i; */
/*@ static represents i = 8; */
/*@ ghost int i; */
/*@ set i = 8; */
/*@ instance ghost int i; */
/*@ set i = 8; */
/*@ final model static int i; */
/*@ final model instance int j = 0;*/
/*@ ghost int k; */
/*@ model int k; */
/*@ ghost int k; */
/*@ int k; */
/*@pure nullable_by_default*/
/*@helper ghost spec_public*/
/*@pure nullable_by_default*/
/*@helper ghost spec_protected*/
/*@pure spec_public*/
/*@pure spec_protected*/
/*@helper ghost */
/*@nullable_by_default*/
/*@spec_public spec_protected*/
/*@pure spec_public*/
/*@pure spec_protected*/
/*@helper ghost */
/*@nullable_by_default*/
/*@spec_public spec_protected*/
/*@ model  */
/*@ model   class C {}*/
/*@         class C {};*/
/*@ helper spec_public */
/*@ ghost  class C {} */
/*@spec_public spec_protected*/
/*@non_null nullable*/
/*@spec_public non_null instance monitored*/
/*@spec_protected nullable instance monitored*/
/*@helper*/
/*@ghost Object o; */
/*@ghost non_null nullable Object o; */
/*@ghost non_null instance monitored Object o; */
/*@ghost nullable instance monitored Object o; */
/*@ghost helper spec_protected Object o;*/
/*@ghost helper spec_public Object o;*/
/*@model ghost Object o; */
/*@model non_null nullable Object o; */
/*@model non_null instance  Object o; */
/*@model nullable instance  Object o; */
/*@model helper monitored spec_public Object o;*/
/*@model helper monitored spec_protected Object o;*/
/*@ pure non_null spec_protected extract */
/*@ pure non_null helper private extract */
/*@ pure non_null  spec_protected extract */
/*@ pure nullable spec_public */
/*@ pure nullable helper private */
/*@ query */
/*@ spec_public spec_protected */
/*@ non_null nullable */
/*@ pure spec_protected extract */
/*@ pure extract helper private */
/*@ pure spec_public */
/*@ pure helper private */
/*@ instance non_null nullable */
/*@ spec_public spec_protected */
/*@ model pure non_null extract Object m(){ return null; } */
/*@ model pure non_null extract private helper Object m(){ return null; } */
/*@ model pure non_null extract Object m(); */
/*@ model pure nullable void m(){} */
/*@ model pure nullable private helper  void m(){} */
/*@ model instance spec_public spec_protected void m(){}*/
/*@ model non_null nullable  Object m(){}*/
/*@ model non_null */
/*@ model pure extract  A(){} */
/*@ model pure private helper extract  A(){} */
/*@ model pure  */
/*@ model pure private helper */
/*@ model instance non_null nullable spec_public spec_protected A(){} */


/*@ non_null nullable */
/*@ spec_public */
/*@ non_null uninitialized */
/*@ nullable uninitialized */
/*@ non_null ghost */
/*@ non_null ghost Object o; */
/*@ non_null nullable Object o; */
/*@ non_null nullable */
/*@ helper */
/*@ helper ghost  Object o; */
/*@   Object o; */
//@ public requires true;    " +

//@ pure requires true;    " +

//@ code requires true;    " +

//@ public behavior requires true;    " +

//@ pure behavior requires true;    " +

//@ private code behavior requires true;    " +

//@ public also behavior requires true;    " +

//@ pure also behavior requires true;    " +

//@ code also behavior requires true;    " +

//@ private public behavior requires true;    " +

//@ private spec_protected public behavior requires true;    " +

//@ invariant (\\exists nullable Object o; o == null);     " +

//@ invariant (\\exists non_null Object o; o == null);     " +

//@ invariant (\\exists final Object o; o == null);     " +

//@ invariant (\\exists \\readonly Object o; o == null);     " +

//@ invariant (\\exists @Nullable Object o; o == null);     " +

//@ invariant (\\exists @Pure Object o; o == null);     " +

//@ invariant null != new Object { nullable Integer i | i < 10 };     " +

//@ invariant null != new Object { non_null Integer i | i < 10 };     " +

//@ invariant null != new Object { final Integer i | i < 10 };     " +

//@ invariant null != new Object { @Nullable Integer i | i < 10 };    " +

//@ invariant null != new Object { @Pure Integer i | i < 10 };    " +

//@ invariant null != new Object { \\readonly Integer i | i < 10 };     " +

//@ forall nullable Object o1;     " +

//@ forall non_null Object o2;     " +

//@ forall \\readonly Object o3;     " +

//@ forall @Nullable Object o4;     " +

//@ forall @Pure Object o6;     " +

//@ forall final Object o5;     " +

//@ old nullable Object o1 = null;     " +

//@ old non_null Object o2 = null;     " +

//@ old \\readonly Object o3 = null;     " +

//@ old @Nullable Object o4 = null;     " +

//@ old @Pure Object o6 = null;     " +

//@ old final Object o5 = null;     " +

//@ invariant true;     " +

//@ public invariant true;     " +

//@ pure invariant true;     " +

//@ private invariant true;     " +

//@ public private invariant true;     " +

 invariant true;     " +

//@ spec_public invariant true;     " +

//@ invariant (new A() { int m() { return 5; } }) != null;     " +

//@ constraint true;     " +

//@ public constraint true;     " +

//@ pure constraint true;     " +

//@ private constraint true;     " +

//@ public private constraint true;     " +

 constraint true;     " +

//@ spec_public constraint true;     " +

//@ axiom true;     " +

//@ public axiom true;     " +

//@ pure axiom true;     " +

//@ private axiom true;     " +

//@ public private axiom true;     " +

 axiom true;     " +

//@ spec_public axiom true;     " +

//@ initially true;     " +

//@ public initially true;     " +

//@ pure initially true;     " +

//@ private initially true;     " +

//@ public private initially true;     " +

 initially true;     " +

//@ spec_public initially true;     " +

//@ static initially true;     " +

//@ instance initially true;     " +


//@ spec_public spec_protected    "



//@ spec_public spec_protected    "

/*@ secret model int a; */
//@ model secret int x;  }"

/*@ nonnull_by_default*/
//@ requires a[i]>0;    "

//@ requires i >= 0 && i < a.length;    "

//@ requires a[i]>0;    "

//@ requires a[i]>0;    "

/*@ nonnull */
//@ requires i >= 0 && i < a.length;    "

//@ requires a[i]>0;    "

/*@ helper */
/*@ helper protected */
/*@ helper public */
/*@ helper private */
/*@ helper private spec_protected*/
/*@ helper private spec_public */
/*@ pure */

/*@ pure pure */
/*@ pure */
/*@ pure */
/*@ pure */
/*@ pure */

//@ public model class A{}");

/*@model*/
//@        ghost class B{}       class C{

/*@ghost*/
//@  @Ghost class B{}     public class A {

//@ public model class B{}        ",

//@ class B{}        ",

//@ model class B{}        "

//@ public model class B{

//@ public model class B{}    ",

/*@nullable_by_default*/
/*@non_null_by_default*/
/*@nullable_by_default non_null_by_default*/
/*@ pure */
/*@ pure */
/*@ pure */
/*@ pure */
/*@ pure */
/*@ pure */
/*@ instance model  int i; */
/*@ represents i = 8; */
/*@  model static int i; */
/*@ represents i = 8; */
/*@ model instance int i; */
/*@ static represents i = 8; */
/*@ model static int i; */
/*@ static represents i = 8; */
/*@ ghost int i; */
/*@ set i = 8; */
/*@ instance ghost int i; */
/*@ set i = 8; */
/*@ final model static int i; */
/*@ final model instance int j = 0;*/
/*@ ghost int k; */
/*@ model int k; */
/*@ ghost int k; */
/*@ int k; */
/*@pure nullable_by_default*/
/*@helper ghost spec_public*/
/*@pure nullable_by_default*/
/*@helper ghost spec_protected*/
/*@pure spec_public*/
/*@pure spec_protected*/
/*@helper ghost */
/*@nullable_by_default*/
/*@spec_public spec_protected*/
/*@pure spec_public*/
/*@pure spec_protected*/
/*@helper ghost */
/*@nullable_by_default*/
/*@spec_public spec_protected*/
/*@ model  */
/*@ model   class C {}*/
/*@         class C {};*/
/*@ helper spec_public */
/*@ ghost  class C {} */
/*@spec_public spec_protected*/
/*@non_null nullable*/
/*@spec_public non_null instance monitored*/
/*@spec_protected nullable instance monitored*/
/*@helper*/
/*@ghost Object o; */
/*@ghost non_null nullable Object o; */
/*@ghost non_null instance monitored Object o; */
/*@ghost nullable instance monitored Object o; */
/*@ghost helper spec_protected Object o;*/
/*@ghost helper spec_public Object o;*/
/*@model ghost Object o; */
/*@model non_null nullable Object o; */
/*@model non_null instance  Object o; */
/*@model nullable instance  Object o; */
/*@model helper monitored spec_public Object o;*/
/*@model helper monitored spec_protected Object o;*/
/*@ pure non_null spec_protected extract */
/*@ pure non_null helper private extract */
/*@ pure non_null  spec_protected extract */
/*@ pure nullable spec_public */
/*@ pure nullable helper private */
/*@ query */
/*@ spec_public spec_protected */
/*@ non_null nullable */
/*@ pure spec_protected extract */
/*@ pure extract helper private */
/*@ pure spec_public */
/*@ pure helper private */
/*@ instance non_null nullable */
/*@ spec_public spec_protected */
/*@ model pure non_null extract Object m(){ return null; } */
/*@ model pure non_null extract private helper Object m(){ return null; } */
/*@ model pure non_null extract Object m(); */
/*@ model pure nullable void m(){} */
/*@ model pure nullable private helper  void m(){} */
/*@ model instance spec_public spec_protected void m(){}*/
/*@ model non_null nullable  Object m(){}*/
/*@ model non_null */
/*@ model pure extract  A(){} */
/*@ model pure private helper extract  A(){} */
/*@ model pure  */
/*@ model pure private helper */
/*@ model instance non_null nullable spec_public spec_protected A(){} */


/*@ non_null nullable */
/*@ spec_public */
/*@ non_null uninitialized */
/*@ nullable uninitialized */
/*@ non_null ghost */
/*@ non_null ghost Object o; */
/*@ non_null nullable Object o; */
/*@ non_null nullable */
/*@ helper */
/*@ helper ghost  Object o; */
/*@   Object o; */
//@ public requires true;    " +

//@ pure requires true;    " +

//@ code requires true;    " +

//@ public behavior requires true;    " +

//@ pure behavior requires true;    " +

//@ private code behavior requires true;    " +

//@ public also behavior requires true;    " +

//@ pure also behavior requires true;    " +

//@ code also behavior requires true;    " +

//@ private public behavior requires true;    " +

//@ private spec_protected public behavior requires true;    " +

//@ invariant (\\exists nullable Object o; o == null);     " +

//@ invariant (\\exists non_null Object o; o == null);     " +

//@ invariant (\\exists final Object o; o == null);     " +

//@ invariant (\\exists \\readonly Object o; o == null);     " +

//@ invariant (\\exists @Nullable Object o; o == null);     " +

//@ invariant (\\exists @Pure Object o; o == null);     " +

//@ invariant null != new Object { nullable Integer i | i < 10 };     " +

//@ invariant null != new Object { non_null Integer i | i < 10 };     " +

//@ invariant null != new Object { final Integer i | i < 10 };     " +

//@ invariant null != new Object { @Nullable Integer i | i < 10 };    " +

//@ invariant null != new Object { @Pure Integer i | i < 10 };    " +

//@ invariant null != new Object { \\readonly Integer i | i < 10 };     " +

//@ forall nullable Object o1;     " +

//@ forall non_null Object o2;     " +

//@ forall \\readonly Object o3;     " +

//@ forall @Nullable Object o4;     " +

//@ forall @Pure Object o6;     " +

//@ forall final Object o5;     " +

//@ old nullable Object o1 = null;     " +

//@ old non_null Object o2 = null;     " +

//@ old \\readonly Object o3 = null;     " +

//@ old @Nullable Object o4 = null;     " +

//@ old @Pure Object o6 = null;     " +

//@ old final Object o5 = null;     " +

//@ invariant true;     " +

//@ public invariant true;     " +

//@ pure invariant true;     " +

//@ private invariant true;     " +

//@ public private invariant true;     " +

 invariant true;     " +

//@ spec_public invariant true;     " +

//@ invariant (new A() { int m() { return 5; } }) != null;     " +

//@ constraint true;     " +

//@ public constraint true;     " +

//@ pure constraint true;     " +

//@ private constraint true;     " +

//@ public private constraint true;     " +

 constraint true;     " +

//@ spec_public constraint true;     " +

//@ axiom true;     " +

//@ public axiom true;     " +

//@ pure axiom true;     " +

//@ private axiom true;     " +

//@ public private axiom true;     " +

 axiom true;     " +

//@ spec_public axiom true;     " +

//@ initially true;     " +

//@ public initially true;     " +

//@ pure initially true;     " +

//@ private initially true;     " +

//@ public private initially true;     " +

 initially true;     " +

//@ spec_public initially true;     " +

//@ static initially true;     " +

//@ instance initially true;     " +


//@ spec_public spec_protected    "



//@ spec_public spec_protected    "

/*@ secret model int a; */
//@ model secret int x;  }"

/*@ nonnull_by_default*/
//@ requires a[i]>0;    "

//@ requires i >= 0 && i < a.length;    "

//@ requires a[i]>0;    "

//@ requires a[i]>0;    "

/*@ nonnull */
//@ requires i >= 0 && i < a.length;    "

//@ requires a[i]>0;    "

/*@ helper */
/*@ helper protected */
/*@ helper public */
/*@ helper private */
/*@ helper private spec_protected*/
/*@ helper private spec_public */
/*@ pure */

/*@ pure pure */
/*@ pure */
/*@ pure */
/*@ pure */
/*@ pure */

//@ public model class A{}");

/*@model*/
//@        ghost class B{}       class C{

/*@ghost*/
//@  @Ghost class B{}     public class A {

//@ public model class B{}        ",

//@ class B{}        ",

//@ model class B{}        "

//@ public model class B{

//@ public model class B{}    ",

/*@nullable_by_default*/
/*@non_null_by_default*/
/*@nullable_by_default non_null_by_default*/
/*@ pure */
/*@ pure */
/*@ pure */
/*@ pure */
/*@ pure */
/*@ pure */
/*@ instance model  int i; */
/*@ represents i = 8; */
/*@  model static int i; */
/*@ represents i = 8; */
/*@ model instance int i; */
/*@ static represents i = 8; */
/*@ model static int i; */
/*@ static represents i = 8; */
/*@ ghost int i; */
/*@ set i = 8; */
/*@ instance ghost int i; */
/*@ set i = 8; */
/*@ final model static int i; */
/*@ final model instance int j = 0;*/
/*@ ghost int k; */
/*@ model int k; */
/*@ ghost int k; */
/*@ int k; */
/*@pure nullable_by_default*/
/*@helper ghost spec_public*/
/*@pure nullable_by_default*/
/*@helper ghost spec_protected*/
/*@pure spec_public*/
/*@pure spec_protected*/
/*@helper ghost */
/*@nullable_by_default*/
/*@spec_public spec_protected*/
/*@pure spec_public*/
/*@pure spec_protected*/
/*@helper ghost */
/*@nullable_by_default*/
/*@spec_public spec_protected*/
/*@ model  */
/*@ model   class C {}*/
/*@         class C {};*/
/*@ helper spec_public */
/*@ ghost  class C {} */
/*@spec_public spec_protected*/
/*@non_null nullable*/
/*@spec_public non_null instance monitored*/
/*@spec_protected nullable instance monitored*/
/*@helper*/
/*@ghost Object o; */
/*@ghost non_null nullable Object o; */
/*@ghost non_null instance monitored Object o; */
/*@ghost nullable instance monitored Object o; */
/*@ghost helper spec_protected Object o;*/
/*@ghost helper spec_public Object o;*/
/*@model ghost Object o; */
/*@model non_null nullable Object o; */
/*@model non_null instance  Object o; */
/*@model nullable instance  Object o; */
/*@model helper monitored spec_public Object o;*/
/*@model helper monitored spec_protected Object o;*/
/*@ pure non_null spec_protected extract */
/*@ pure non_null helper private extract */
/*@ pure non_null  spec_protected extract */
/*@ pure nullable spec_public */
/*@ pure nullable helper private */
/*@ query */
/*@ spec_public spec_protected */
/*@ non_null nullable */
/*@ pure spec_protected extract */
/*@ pure extract helper private */
/*@ pure spec_public */
/*@ pure helper private */
/*@ instance non_null nullable */
/*@ spec_public spec_protected */
/*@ model pure non_null extract Object m(){ return null; } */
/*@ model pure non_null extract private helper Object m(){ return null; } */
/*@ model pure non_null extract Object m(); */
/*@ model pure nullable void m(){} */
/*@ model pure nullable private helper  void m(){} */
/*@ model instance spec_public spec_protected void m(){}*/
/*@ model non_null nullable  Object m(){}*/
/*@ model non_null */
/*@ model pure extract  A(){} */
/*@ model pure private helper extract  A(){} */
/*@ model pure  */
/*@ model pure private helper */
/*@ model instance non_null nullable spec_public spec_protected A(){} */


/*@ non_null nullable */
/*@ spec_public */
/*@ non_null uninitialized */
/*@ nullable uninitialized */
/*@ non_null ghost */
/*@ non_null ghost Object o; */
/*@ non_null nullable Object o; */
/*@ non_null nullable */
/*@ helper */
/*@ helper ghost  Object o; */
/*@   Object o; */
//@ public requires true;    " +

//@ pure requires true;    " +

//@ code requires true;    " +

//@ public behavior requires true;    " +

//@ pure behavior requires true;    " +

//@ private code behavior requires true;    " +

//@ public also behavior requires true;    " +

//@ pure also behavior requires true;    " +

//@ code also behavior requires true;    " +

//@ private public behavior requires true;    " +

//@ private spec_protected public behavior requires true;    " +

//@ invariant (\\exists nullable Object o; o == null);     " +

//@ invariant (\\exists non_null Object o; o == null);     " +

//@ invariant (\\exists final Object o; o == null);     " +

//@ invariant (\\exists \\readonly Object o; o == null);     " +

//@ invariant (\\exists @Nullable Object o; o == null);     " +

//@ invariant (\\exists @Pure Object o; o == null);     " +

//@ invariant null != new Object { nullable Integer i | i < 10 };     " +

//@ invariant null != new Object { non_null Integer i | i < 10 };     " +

//@ invariant null != new Object { final Integer i | i < 10 };     " +

//@ invariant null != new Object { @Nullable Integer i | i < 10 };    " +

//@ invariant null != new Object { @Pure Integer i | i < 10 };    " +

//@ invariant null != new Object { \\readonly Integer i | i < 10 };     " +

//@ forall nullable Object o1;     " +

//@ forall non_null Object o2;     " +

//@ forall \\readonly Object o3;     " +

//@ forall @Nullable Object o4;     " +

//@ forall @Pure Object o6;     " +

//@ forall final Object o5;     " +

//@ old nullable Object o1 = null;     " +

//@ old non_null Object o2 = null;     " +

//@ old \\readonly Object o3 = null;     " +

//@ old @Nullable Object o4 = null;     " +

//@ old @Pure Object o6 = null;     " +

//@ old final Object o5 = null;     " +

//@ invariant true;     " +

//@ public invariant true;     " +

//@ pure invariant true;     " +

//@ private invariant true;     " +

//@ public private invariant true;     " +

 invariant true;     " +

//@ spec_public invariant true;     " +

//@ invariant (new A() { int m() { return 5; } }) != null;     " +

//@ constraint true;     " +

//@ public constraint true;     " +

//@ pure constraint true;     " +

//@ private constraint true;     " +

//@ public private constraint true;     " +

 constraint true;     " +

//@ spec_public constraint true;     " +

//@ axiom true;     " +

//@ public axiom true;     " +

//@ pure axiom true;     " +

//@ private axiom true;     " +

//@ public private axiom true;     " +

 axiom true;     " +

//@ spec_public axiom true;     " +

//@ initially true;     " +

//@ public initially true;     " +

//@ pure initially true;     " +

//@ private initially true;     " +

//@ public private initially true;     " +

 initially true;     " +

//@ spec_public initially true;     " +

//@ static initially true;     " +

//@ instance initially true;     " +


//@ spec_public spec_protected    "



//@ spec_public spec_protected    "

/*@ secret model int a; */
//@ model secret int x;  }"

/*@ nonnull_by_default*/
//@ requires a[i]>0;    "

//@ requires i >= 0 && i < a.length;    "

//@ requires a[i]>0;    "

//@ requires a[i]>0;    "

/*@ nonnull */
//@ requires i >= 0 && i < a.length;    "

//@ requires a[i]>0;    "

/*@ helper */
/*@ helper protected */
/*@ helper public */
/*@ helper private */
/*@ helper private spec_protected*/
/*@ helper private spec_public */
/*@ pure */

/*@ pure pure */
/*@ pure */
/*@ pure */
/*@ pure */
/*@ pure */

//@ public model class A{}");

/*@model*/
//@        ghost class B{}       class C{

/*@ghost*/
//@  @Ghost class B{}     public class A {

//@ public model class B{}        ",

//@ class B{}        ",

//@ model class B{}        "

//@ public model class B{

//@ public model class B{}    ",

/*@nullable_by_default*/
/*@non_null_by_default*/
/*@nullable_by_default non_null_by_default*/
/*@ pure */
/*@ pure */
/*@ pure */
/*@ pure */
/*@ pure */
/*@ pure */
/*@ instance model  int i; */
/*@ represents i = 8; */
/*@  model static int i; */
/*@ represents i = 8; */
/*@ model instance int i; */
/*@ static represents i = 8; */
/*@ model static int i; */
/*@ static represents i = 8; */
/*@ ghost int i; */
/*@ set i = 8; */
/*@ instance ghost int i; */
/*@ set i = 8; */
/*@ final model static int i; */
/*@ final model instance int j = 0;*/
/*@ ghost int k; */
/*@ model int k; */
/*@ ghost int k; */
/*@ int k; */
/*@pure nullable_by_default*/
/*@helper ghost spec_public*/
/*@pure nullable_by_default*/
/*@helper ghost spec_protected*/
/*@pure spec_public*/
/*@pure spec_protected*/
/*@helper ghost */
/*@nullable_by_default*/
/*@spec_public spec_protected*/
/*@pure spec_public*/
/*@pure spec_protected*/
/*@helper ghost */
/*@nullable_by_default*/
/*@spec_public spec_protected*/
/*@ model  */
/*@ model   class C {}*/
/*@         class C {};*/
/*@ helper spec_public */
/*@ ghost  class C {} */
/*@spec_public spec_protected*/
/*@non_null nullable*/
/*@spec_public non_null instance monitored*/
/*@spec_protected nullable instance monitored*/
/*@helper*/
/*@ghost Object o; */
/*@ghost non_null nullable Object o; */
/*@ghost non_null instance monitored Object o; */
/*@ghost nullable instance monitored Object o; */
/*@ghost helper spec_protected Object o;*/
/*@ghost helper spec_public Object o;*/
/*@model ghost Object o; */
/*@model non_null nullable Object o; */
/*@model non_null instance  Object o; */
/*@model nullable instance  Object o; */
/*@model helper monitored spec_public Object o;*/
/*@model helper monitored spec_protected Object o;*/
/*@ pure non_null spec_protected extract */
/*@ pure non_null helper private extract */
/*@ pure non_null  spec_protected extract */
/*@ pure nullable spec_public */
/*@ pure nullable helper private */
/*@ query */
/*@ spec_public spec_protected */
/*@ non_null nullable */
/*@ pure spec_protected extract */
/*@ pure extract helper private */
/*@ pure spec_public */
/*@ pure helper private */
/*@ instance non_null nullable */
/*@ spec_public spec_protected */
/*@ model pure non_null extract Object m(){ return null; } */
/*@ model pure non_null extract private helper Object m(){ return null; } */
/*@ model pure non_null extract Object m(); */
/*@ model pure nullable void m(){} */
/*@ model pure nullable private helper  void m(){} */
/*@ model instance spec_public spec_protected void m(){}*/
/*@ model non_null nullable  Object m(){}*/
/*@ model non_null */
/*@ model pure extract  A(){} */
/*@ model pure private helper extract  A(){} */
/*@ model pure  */
/*@ model pure private helper */
/*@ model instance non_null nullable spec_public spec_protected A(){} */


/*@ non_null nullable */
/*@ spec_public */
/*@ non_null uninitialized */
/*@ nullable uninitialized */
/*@ non_null ghost */
/*@ non_null ghost Object o; */
/*@ non_null nullable Object o; */
/*@ non_null nullable */
/*@ helper */
/*@ helper ghost  Object o; */
/*@   Object o; */
//@ public requires true;    " +

//@ pure requires true;    " +

//@ code requires true;    " +

//@ public behavior requires true;    " +

//@ pure behavior requires true;    " +

//@ private code behavior requires true;    " +

//@ public also behavior requires true;    " +

//@ pure also behavior requires true;    " +

//@ code also behavior requires true;    " +

//@ private public behavior requires true;    " +

//@ private spec_protected public behavior requires true;    " +

//@ invariant (\\exists nullable Object o; o == null);     " +

//@ invariant (\\exists non_null Object o; o == null);     " +

//@ invariant (\\exists final Object o; o == null);     " +

//@ invariant (\\exists \\readonly Object o; o == null);     " +

//@ invariant (\\exists @Nullable Object o; o == null);     " +

//@ invariant (\\exists @Pure Object o; o == null);     " +

//@ invariant null != new Object { nullable Integer i | i < 10 };     " +

//@ invariant null != new Object { non_null Integer i | i < 10 };     " +

//@ invariant null != new Object { final Integer i | i < 10 };     " +

//@ invariant null != new Object { @Nullable Integer i | i < 10 };    " +

//@ invariant null != new Object { @Pure Integer i | i < 10 };    " +

//@ invariant null != new Object { \\readonly Integer i | i < 10 };     " +

//@ forall nullable Object o1;     " +

//@ forall non_null Object o2;     " +

//@ forall \\readonly Object o3;     " +

//@ forall @Nullable Object o4;     " +

//@ forall @Pure Object o6;     " +

//@ forall final Object o5;     " +

//@ old nullable Object o1 = null;     " +

//@ old non_null Object o2 = null;     " +

//@ old \\readonly Object o3 = null;     " +

//@ old @Nullable Object o4 = null;     " +

//@ old @Pure Object o6 = null;     " +

//@ old final Object o5 = null;     " +

//@ invariant true;     " +

//@ public invariant true;     " +

//@ pure invariant true;     " +

//@ private invariant true;     " +

//@ public private invariant true;     " +

 invariant true;     " +

//@ spec_public invariant true;     " +

//@ invariant (new A() { int m() { return 5; } }) != null;     " +

//@ constraint true;     " +

//@ public constraint true;     " +

//@ pure constraint true;     " +

//@ private constraint true;     " +

//@ public private constraint true;     " +

 constraint true;     " +

//@ spec_public constraint true;     " +

//@ axiom true;     " +

//@ public axiom true;     " +

//@ pure axiom true;     " +

//@ private axiom true;     " +

//@ public private axiom true;     " +

 axiom true;     " +

//@ spec_public axiom true;     " +

//@ initially true;     " +

//@ public initially true;     " +

//@ pure initially true;     " +

//@ private initially true;     " +

//@ public private initially true;     " +

 initially true;     " +

//@ spec_public initially true;     " +

//@ static initially true;     " +

//@ instance initially true;     " +


//@ spec_public spec_protected    "



//@ spec_public spec_protected    "

/*@ secret model int a; */
//@ model secret int x;  }"

/*@ nonnull_by_default*/
//@ requires a[i]>0;    "

//@ requires i >= 0 && i < a.length;    "

//@ requires a[i]>0;    "

//@ requires a[i]>0;    "

/*@ nonnull */
//@ requires i >= 0 && i < a.length;    "

//@ requires a[i]>0;    "

/*@ helper */
/*@ helper protected */
/*@ helper public */
/*@ helper private */
/*@ helper private spec_protected*/
/*@ helper private spec_public */
//@ invariant k;    " +

//@ requires k;    " +

//@ constraint \\old(k); constraint \\old(d);    " +

//@ assert k;    " +

//@ assert k;    " +

//@ assert \\old(k);    " +

//@ assert \\old(d);    " +

//@ ghost Object k;    " +

//@ assert k == 1;    " + // ERROR - k is Object

//@ assert k == null;    " + // OK

//@ ghost int k;      " +

//@ ghost double k;    " +

//@ ghost double k;    " +

//@ ghost double k;    " +

//@ ghost int d;    " +

//@ ghost double k;    " +

//@ assert k;    " +

//@ model double k;    " +

//@ assert k;    " +

//@ model pure double k() { return 0; }    " +

//@ assert k();    " +

//@ model double k() { return 1; }    " +

/*@pure*/
//@ model pure double k(boolean d) { return 0; }    " +

//@ requires k(true);     " +

//@ requires k(0);     " +

/*@pure*/
//@ model pure static double k(int i) { return 0; }    " +

//@ requires k(0);     " +

//@ assume k(0);    " +

//@ model pure static double k(int i);    " +

//@ requires k(0);     " +

//@ assume k(0);    " +

//@ model static class B { static double i; }      " +

//@ ghost B bb;    " +

//@ assert B.i;    " +

//@ model static class B { static double i; }      " +

//@ ghost B bb;    " +

//@ assert B.i;    " +

//@ model static class B { static double i; }      " +

//@ ghost B bb;    " +

//@ assert B.i;    " + // OK, but wrong type

//@ model class A {}    " +

//@ model class B {}    " +

//@ model class B {}    " +

/*@ model class C {}*/
//@ invariant k;    " +

//@ requires k;    " +

//@ constraint \\old(k); constraint \\old(d);    " +

//@ assert k;    " +

//@ assert k;    " +

//@ assert \\old(k);    " +

//@ assert \\old(d);    " +

//@ ghost Object k;    " +

//@ assert k == 1;    " + // ERROR - k is Object

//@ assert k == null;    " + // OK

//@ ghost int k;      " +

//@ ghost double k;    " +

//@ ghost double k;    " +

//@ ghost double k;    " +

//@ ghost int d;    " +

//@ ghost double k;    " +

//@ assert k;    " +

//@ model double k;    " +

//@ assert k;    " +

//@ model pure double k() { return 0; }    " +

//@ assert k();    " +

//@ model double k() { return 1; }    " +

/*@pure*/
//@ model pure double k(boolean d) { return 0; }    " +

//@ requires k(true);     " +

//@ requires k(0);     " +

/*@pure*/
//@ model pure static double k(int i) { return 0; }    " +

//@ requires k(0);     " +

//@ assume k(0);    " +

//@ model pure static double k(int i);    " +

//@ requires k(0);     " +

//@ assume k(0);    " +

//@ model static class B { static double i; }      " +

//@ ghost B bb;    " +

//@ assert B.i;    " +

//@ model static class B { static double i; }      " +

//@ ghost B bb;    " +

//@ assert B.i;    " +

//@ model static class B { static double i; }      " +

//@ ghost B bb;    " +

//@ assert B.i;    " + // OK, but wrong type

//@ model class A {}    " +

//@ model class B {}    " +

//@ model class B {}    " +

/*@ model class C {}*/
//@ invariant k;    " +

//@ requires k;    " +

//@ constraint \\old(k); constraint \\old(d);    " +

//@ assert k;    " +

//@ assert k;    " +

//@ assert \\old(k);    " +

//@ assert \\old(d);    " +

//@ ghost Object k;    " +

//@ assert k == 1;    " + // ERROR - k is Object

//@ assert k == null;    " + // OK

//@ ghost int k;      " +

//@ ghost double k;    " +

//@ ghost double k;    " +

//@ ghost double k;    " +

//@ ghost int d;    " +

//@ ghost double k;    " +

//@ assert k;    " +

//@ model double k;    " +

//@ assert k;    " +

//@ model pure double k() { return 0; }    " +

//@ assert k();    " +

//@ model double k() { return 1; }    " +

/*@pure*/
//@ model pure double k(boolean d) { return 0; }    " +

//@ requires k(true);     " +

//@ requires k(0);     " +

/*@pure*/
//@ model pure static double k(int i) { return 0; }    " +

//@ requires k(0);     " +

//@ assume k(0);    " +

//@ model pure static double k(int i);    " +

//@ requires k(0);     " +

//@ assume k(0);    " +

//@ model static class B { static double i; }      " +

//@ ghost B bb;    " +

//@ assert B.i;    " +

//@ model static class B { static double i; }      " +

//@ ghost B bb;    " +

//@ assert B.i;    " +

//@ model static class B { static double i; }      " +

//@ ghost B bb;    " +

//@ assert B.i;    " + // OK, but wrong type

//@ model class A {}    " +

//@ model class B {}    " +

//@ model class B {}    " +

/*@ model class C {}*/
//@ invariant k;    " +

//@ requires k;    " +

//@ constraint \\old(k); constraint \\old(d);    " +

//@ assert k;    " +

//@ assert k;    " +

//@ assert \\old(k);    " +

//@ assert \\old(d);    " +

//@ ghost Object k;    " +

//@ assert k == 1;    " + // ERROR - k is Object

//@ assert k == null;    " + // OK

//@ ghost int k;      " +

//@ ghost double k;    " +

//@ ghost double k;    " +

//@ ghost double k;    " +

//@ ghost int d;    " +

//@ ghost double k;    " +

//@ assert k;    " +

//@ model double k;    " +

//@ assert k;    " +

//@ model pure double k() { return 0; }    " +

//@ assert k();    " +

//@ model double k() { return 1; }    " +

/*@pure*/
//@ model pure double k(boolean d) { return 0; }    " +

//@ requires k(true);     " +

//@ requires k(0);     " +

/*@pure*/
//@ model pure static double k(int i) { return 0; }    " +

//@ requires k(0);     " +

//@ assume k(0);    " +

//@ model pure static double k(int i);    " +

//@ requires k(0);     " +

//@ assume k(0);    " +

//@ model static class B { static double i; }      " +

//@ ghost B bb;    " +

//@ assert B.i;    " +

//@ model static class B { static double i; }      " +

//@ ghost B bb;    " +

//@ assert B.i;    " +

//@ model static class B { static double i; }      " +

//@ ghost B bb;    " +

//@ assert B.i;    " + // OK, but wrong type

//@ model class A {}    " +

//@ model class B {}    " +

//@ model class B {}    " +

/*@ model class C {}*/
//@ invariant k;    " +

//@ requires k;    " +

//@ constraint \\old(k); constraint \\old(d);    " +

//@ assert k;    " +

//@ assert k;    " +

//@ assert \\old(k);    " +

//@ assert \\old(d);    " +

//@ ghost Object k;    " +

//@ assert k == 1;    " + // ERROR - k is Object

//@ assert k == null;    " + // OK

//@ ghost int k;      " +

//@ ghost double k;    " +

//@ ghost double k;    " +

//@ ghost double k;    " +

//@ ghost int d;    " +

//@ ghost double k;    " +

//@ assert k;    " +

//@ model double k;    " +

//@ assert k;    " +

//@ model pure double k() { return 0; }    " +

//@ assert k();    " +

//@ model double k() { return 1; }    " +

/*@pure*/
//@ model pure double k(boolean d) { return 0; }    " +

//@ requires k(true);     " +

//@ requires k(0);     " +

/*@pure*/
//@ model pure static double k(int i) { return 0; }    " +

//@ requires k(0);     " +

//@ assume k(0);    " +

//@ model pure static double k(int i);    " +

//@ requires k(0);     " +

//@ assume k(0);    " +

//@ model static class B { static double i; }      " +

//@ ghost B bb;    " +

//@ assert B.i;    " +

//@ model static class B { static double i; }      " +

//@ ghost B bb;    " +

//@ assert B.i;    " +

//@ model static class B { static double i; }      " +

//@ ghost B bb;    " +

//@ assert B.i;    " + // OK, but wrong type

//@ model class A {}    " +

//@ model class B {}    " +

//@ model class B {}    " +

/*@ model class C {}*/
//@ requires \    ot_specified; ensures \    ot_specified; diverges \    ot_specified; when \    ot_specified;      public void m(boolean i) {}}"

//@ signals \    ot_specified;      public void m(boolean i) {}}"

//@ signals (Exception) \    ot_specified;      public void m(boolean i) {}}"

//@ signals_only \    ot_specified;      public void m(boolean i) {}}"

//@ assignable \    ot_specified; assignable \    ot_specified, \    ot_specified;      public void m(boolean i) {}}"

//@ measured_by \    ot_specified; working_space \    ot_specified; duration \    ot_specified;      public void m(boolean i) {}}"

//@ measured_by \    ot_specified if true; working_space \    ot_specified if false ; duration \    ot_specified if true;      public void m(boolean i) {}}"

//@ callable \    ot_specified; accessible \    ot_specified; captures \    ot_specified;       public void m(boolean i) {}}"

//@ requires \    ot_specified; ensures \    ot_specified; diverges \    ot_specified; when \    ot_specified;      public void m(boolean i) {}}"

//@ signals \    ot_specified;      public void m(boolean i) {}}"

//@ signals (Exception) \    ot_specified;      public void m(boolean i) {}}"

//@ signals_only \    ot_specified;      public void m(boolean i) {}}"

//@ assignable \    ot_specified; assignable \    ot_specified, \    ot_specified;      public void m(boolean i) {}}"

//@ measured_by \    ot_specified; working_space \    ot_specified; duration \    ot_specified;      public void m(boolean i) {}}"

//@ measured_by \    ot_specified if true; working_space \    ot_specified if false ; duration \    ot_specified if true;      public void m(boolean i) {}}"

//@ callable \    ot_specified; accessible \    ot_specified; captures \    ot_specified;       public void m(boolean i) {}}"

//@ requires \    ot_specified; ensures \    ot_specified; diverges \    ot_specified; when \    ot_specified;      public void m(boolean i) {}}"

//@ signals \    ot_specified;      public void m(boolean i) {}}"

//@ signals (Exception) \    ot_specified;      public void m(boolean i) {}}"

//@ signals_only \    ot_specified;      public void m(boolean i) {}}"

//@ assignable \    ot_specified; assignable \    ot_specified, \    ot_specified;      public void m(boolean i) {}}"

//@ measured_by \    ot_specified; working_space \    ot_specified; duration \    ot_specified;      public void m(boolean i) {}}"

//@ measured_by \    ot_specified if true; working_space \    ot_specified if false ; duration \    ot_specified if true;      public void m(boolean i) {}}"

//@ callable \    ot_specified; accessible \    ot_specified; captures \    ot_specified;       public void m(boolean i) {}}"

//@ requires \    ot_specified; ensures \    ot_specified; diverges \    ot_specified; when \    ot_specified;      public void m(boolean i) {}}"

//@ signals \    ot_specified;      public void m(boolean i) {}}"

//@ signals (Exception) \    ot_specified;      public void m(boolean i) {}}"

//@ signals_only \    ot_specified;      public void m(boolean i) {}}"

//@ assignable \    ot_specified; assignable \    ot_specified, \    ot_specified;      public void m(boolean i) {}}"

//@ measured_by \    ot_specified; working_space \    ot_specified; duration \    ot_specified;      public void m(boolean i) {}}"

//@ measured_by \    ot_specified if true; working_space \    ot_specified if false ; duration \    ot_specified if true;      public void m(boolean i) {}}"

//@ callable \    ot_specified; accessible \    ot_specified; captures \    ot_specified;       public void m(boolean i) {}}"

//@ requires \    ot_specified; ensures \    ot_specified; diverges \    ot_specified; when \    ot_specified;      public void m(boolean i) {}}"

//@ signals \    ot_specified;      public void m(boolean i) {}}"

//@ signals (Exception) \    ot_specified;      public void m(boolean i) {}}"

//@ signals_only \    ot_specified;      public void m(boolean i) {}}"

//@ assignable \    ot_specified; assignable \    ot_specified, \    ot_specified;      public void m(boolean i) {}}"

//@ measured_by \    ot_specified; working_space \    ot_specified; duration \    ot_specified;      public void m(boolean i) {}}"

//@ measured_by \    ot_specified if true; working_space \    ot_specified if false ; duration \    ot_specified if true;      public void m(boolean i) {}}"

//@ callable \    ot_specified; accessible \    ot_specified; captures \    ot_specified;       public void m(boolean i) {}}"

/*@ nowarn Z; */
//@ nowarn X;     /*@ nowarn Y; */ class A{

/*@ nowarn Z ZZ ZZZ; */
//@ nowarn X,A,B;     /*@ nowarn Y, YY,  YYY; */ class A{

/*@ nowarn Z ; nowarn Q; */
//@ nowarn X,A,B;     /*@ nowarn Y, YY,  YYY; */ class A{

/*@ nowarn Z  */
//@ nowarn X    /*@ nowarn ; */ class A{

/*@ nowarn Z  */
//@ nowarn X    /*@ nowarn ; */ class A{

/*@ nowarn nowarn */
/*@ nowarn ; */
/*@ pure nowarn Y; */
/*@ pure nowarn Y */
/*@ pure nowarn C; nullable_by_default */
/*@ pure nowarn C nullable            */
/*@  nowarn C! ; */
/*@ nowarn Z; */
//@ nowarn X;     /*@ nowarn Y; */ class A{

/*@ nowarn Z ZZ ZZZ; */
//@ nowarn X,A,B;     /*@ nowarn Y, YY,  YYY; */ class A{

/*@ nowarn Z ; nowarn Q; */
//@ nowarn X,A,B;     /*@ nowarn Y, YY,  YYY; */ class A{

/*@ nowarn Z  */
//@ nowarn X    /*@ nowarn ; */ class A{

/*@ nowarn Z  */
//@ nowarn X    /*@ nowarn ; */ class A{

/*@ nowarn nowarn */
/*@ nowarn ; */
/*@ pure nowarn Y; */
/*@ pure nowarn Y */
/*@ pure nowarn C; nullable_by_default */
/*@ pure nowarn C nullable            */
/*@  nowarn C! ; */
/*@ nowarn Z; */
//@ nowarn X;     /*@ nowarn Y; */ class A{

/*@ nowarn Z ZZ ZZZ; */
//@ nowarn X,A,B;     /*@ nowarn Y, YY,  YYY; */ class A{

/*@ nowarn Z ; nowarn Q; */
//@ nowarn X,A,B;     /*@ nowarn Y, YY,  YYY; */ class A{

/*@ nowarn Z  */
//@ nowarn X    /*@ nowarn ; */ class A{

/*@ nowarn Z  */
//@ nowarn X    /*@ nowarn ; */ class A{

/*@ nowarn nowarn */
/*@ nowarn ; */
/*@ pure nowarn Y; */
/*@ pure nowarn Y */
/*@ pure nowarn C; nullable_by_default */
/*@ pure nowarn C nullable            */
/*@  nowarn C! ; */
/*@ nowarn Z; */
//@ nowarn X;     /*@ nowarn Y; */ class A{

/*@ nowarn Z ZZ ZZZ; */
//@ nowarn X,A,B;     /*@ nowarn Y, YY,  YYY; */ class A{

/*@ nowarn Z ; nowarn Q; */
//@ nowarn X,A,B;     /*@ nowarn Y, YY,  YYY; */ class A{

/*@ nowarn Z  */
//@ nowarn X    /*@ nowarn ; */ class A{

/*@ nowarn Z  */
//@ nowarn X    /*@ nowarn ; */ class A{

/*@ nowarn nowarn */
/*@ nowarn ; */
/*@ pure nowarn Y; */
/*@ pure nowarn Y */
/*@ pure nowarn C; nullable_by_default */
/*@ pure nowarn C nullable            */
/*@  nowarn C! ; */
/*@ nowarn Z; */
//@ nowarn X;     /*@ nowarn Y; */ class A{

/*@ nowarn Z ZZ ZZZ; */
//@ nowarn X,A,B;     /*@ nowarn Y, YY,  YYY; */ class A{

/*@ nowarn Z ; nowarn Q; */
//@ nowarn X,A,B;     /*@ nowarn Y, YY,  YYY; */ class A{

/*@ nowarn Z  */
//@ nowarn X    /*@ nowarn ; */ class A{

/*@ nowarn Z  */
//@ nowarn X    /*@ nowarn ; */ class A{

/*@ nowarn nowarn */
/*@ nowarn ; */
/*@ pure nowarn Y; */
/*@ pure nowarn Y */
/*@ pure nowarn C; nullable_by_default */
/*@ pure nowarn C nullable            */
/*@  nowarn C! ; */
//@ ghost boolean i = ##true# ;      JCLiteral.class, 0)},

//@ ghost int i = ##70# ;      JCLiteral.class, 0)},

//@ ghost long i = ##70L# ;      JCLiteral.class, 0)},

//@ ghost char i = ##'c'# ;      JCLiteral.class, 0)},

//@ ghost String i = ##\"asd\"# ;      JCLiteral.class, 0)},

//@ ghost double i = ##70.0# ;      JCLiteral.class, 0)},

//@ ghost double i = ##70.0e1# ;      JCLiteral.class, 0)},

//@ ghost int i = 2 + (##\\forall int x,y; 0 <= x; y == x#) + 7;      JmlQuantifiedExpr.class, 0)},

//@ assignable ##a[ *]#;     void m(){} JmlStoreRefArrayRange.class, 0)},

//@ assignable ##a[ 2 .. 4]#;     void m(){} JmlStoreRefArrayRange.class, 0)},

//@ assignable ##a[ 2 .. ]#;     void m(){} JmlStoreRefArrayRange.class, 0)},

//@ assignable ##abc# ;     void m(){} JCIdent.class, 0)},

//@ assignable ##ab . c# ;     void m(){} JCFieldAccess.class, 0)},

//@ assignable ##ab . *# ;     void m(){} JCFieldAccess.class, 0)},

//@ assignable ##\    othing#;    ", JmlStoreRefKeyword.class, 0)},

//@ assignable ##\\everything#;    ", JmlStoreRefKeyword.class, 0)},

//@ assignable ##\    ot_specified#;    ", JmlStoreRefKeyword.class, 0)},

//@ assignable ##a, ab . *# ;     void m(){} JmlStoreRefListExpression.class, 0)},

//@ ghost boolean i = ##true# ;      JCLiteral.class, 0)},

//@ ghost int i = ##70# ;      JCLiteral.class, 0)},

//@ ghost long i = ##70L# ;      JCLiteral.class, 0)},

//@ ghost char i = ##'c'# ;      JCLiteral.class, 0)},

//@ ghost String i = ##\"asd\"# ;      JCLiteral.class, 0)},

//@ ghost double i = ##70.0# ;      JCLiteral.class, 0)},

//@ ghost double i = ##70.0e1# ;      JCLiteral.class, 0)},

//@ ghost int i = 2 + (##\\forall int x,y; 0 <= x; y == x#) + 7;      JmlQuantifiedExpr.class, 0)},

//@ assignable ##a[ *]#;     void m(){} JmlStoreRefArrayRange.class, 0)},

//@ assignable ##a[ 2 .. 4]#;     void m(){} JmlStoreRefArrayRange.class, 0)},

//@ assignable ##a[ 2 .. ]#;     void m(){} JmlStoreRefArrayRange.class, 0)},

//@ assignable ##abc# ;     void m(){} JCIdent.class, 0)},

//@ assignable ##ab . c# ;     void m(){} JCFieldAccess.class, 0)},

//@ assignable ##ab . *# ;     void m(){} JCFieldAccess.class, 0)},

//@ assignable ##\    othing#;    ", JmlStoreRefKeyword.class, 0)},

//@ assignable ##\\everything#;    ", JmlStoreRefKeyword.class, 0)},

//@ assignable ##\    ot_specified#;    ", JmlStoreRefKeyword.class, 0)},

//@ assignable ##a, ab . *# ;     void m(){} JmlStoreRefListExpression.class, 0)},

//@ ghost boolean i = ##true# ;      JCLiteral.class, 0)},

//@ ghost int i = ##70# ;      JCLiteral.class, 0)},

//@ ghost long i = ##70L# ;      JCLiteral.class, 0)},

//@ ghost char i = ##'c'# ;      JCLiteral.class, 0)},

//@ ghost String i = ##\"asd\"# ;      JCLiteral.class, 0)},

//@ ghost double i = ##70.0# ;      JCLiteral.class, 0)},

//@ ghost double i = ##70.0e1# ;      JCLiteral.class, 0)},

//@ ghost int i = 2 + (##\\forall int x,y; 0 <= x; y == x#) + 7;      JmlQuantifiedExpr.class, 0)},

//@ assignable ##a[ *]#;     void m(){} JmlStoreRefArrayRange.class, 0)},

//@ assignable ##a[ 2 .. 4]#;     void m(){} JmlStoreRefArrayRange.class, 0)},

//@ assignable ##a[ 2 .. ]#;     void m(){} JmlStoreRefArrayRange.class, 0)},

//@ assignable ##abc# ;     void m(){} JCIdent.class, 0)},

//@ assignable ##ab . c# ;     void m(){} JCFieldAccess.class, 0)},

//@ assignable ##ab . *# ;     void m(){} JCFieldAccess.class, 0)},

//@ assignable ##\    othing#;    ", JmlStoreRefKeyword.class, 0)},

//@ assignable ##\\everything#;    ", JmlStoreRefKeyword.class, 0)},

//@ assignable ##\    ot_specified#;    ", JmlStoreRefKeyword.class, 0)},

//@ assignable ##a, ab . *# ;     void m(){} JmlStoreRefListExpression.class, 0)},

//@ ghost boolean i = ##true# ;      JCLiteral.class, 0)},

//@ ghost int i = ##70# ;      JCLiteral.class, 0)},

//@ ghost long i = ##70L# ;      JCLiteral.class, 0)},

//@ ghost char i = ##'c'# ;      JCLiteral.class, 0)},

//@ ghost String i = ##\"asd\"# ;      JCLiteral.class, 0)},

//@ ghost double i = ##70.0# ;      JCLiteral.class, 0)},

//@ ghost double i = ##70.0e1# ;      JCLiteral.class, 0)},

//@ ghost int i = 2 + (##\\forall int x,y; 0 <= x; y == x#) + 7;      JmlQuantifiedExpr.class, 0)},

//@ assignable ##a[ *]#;     void m(){} JmlStoreRefArrayRange.class, 0)},

//@ assignable ##a[ 2 .. 4]#;     void m(){} JmlStoreRefArrayRange.class, 0)},

//@ assignable ##a[ 2 .. ]#;     void m(){} JmlStoreRefArrayRange.class, 0)},

//@ assignable ##abc# ;     void m(){} JCIdent.class, 0)},

//@ assignable ##ab . c# ;     void m(){} JCFieldAccess.class, 0)},

//@ assignable ##ab . *# ;     void m(){} JCFieldAccess.class, 0)},

//@ assignable ##\    othing#;    ", JmlStoreRefKeyword.class, 0)},

//@ assignable ##\\everything#;    ", JmlStoreRefKeyword.class, 0)},

//@ assignable ##\    ot_specified#;    ", JmlStoreRefKeyword.class, 0)},

//@ assignable ##a, ab . *# ;     void m(){} JmlStoreRefListExpression.class, 0)},

//@ ghost boolean i = ##true# ;      JCLiteral.class, 0)},

//@ ghost int i = ##70# ;      JCLiteral.class, 0)},

//@ ghost long i = ##70L# ;      JCLiteral.class, 0)},

//@ ghost char i = ##'c'# ;      JCLiteral.class, 0)},

//@ ghost String i = ##\"asd\"# ;      JCLiteral.class, 0)},

//@ ghost double i = ##70.0# ;      JCLiteral.class, 0)},

//@ ghost double i = ##70.0e1# ;      JCLiteral.class, 0)},

//@ ghost int i = 2 + (##\\forall int x,y; 0 <= x; y == x#) + 7;      JmlQuantifiedExpr.class, 0)},

//@ assignable ##a[ *]#;     void m(){} JmlStoreRefArrayRange.class, 0)},

//@ assignable ##a[ 2 .. 4]#;     void m(){} JmlStoreRefArrayRange.class, 0)},

//@ assignable ##a[ 2 .. ]#;     void m(){} JmlStoreRefArrayRange.class, 0)},

//@ assignable ##abc# ;     void m(){} JCIdent.class, 0)},

//@ assignable ##ab . c# ;     void m(){} JCFieldAccess.class, 0)},

//@ assignable ##ab . *# ;     void m(){} JCFieldAccess.class, 0)},

//@ assignable ##\    othing#;    ", JmlStoreRefKeyword.class, 0)},

//@ assignable ##\\everything#;    ", JmlStoreRefKeyword.class, 0)},

//@ assignable ##\    ot_specified#;    ", JmlStoreRefKeyword.class, 0)},

//@ assignable ##a, ab . *# ;     void m(){} JmlStoreRefListExpression.class, 0)},

//@ model import java.io.File;" + eol +

//@ model import java.io.*;" + eol + eol +

/*@ assume a == 6;*/
/*@ assert a == 6;*/
/*@ debug a = 6;*/
/*@ set a = 6;*/
/*@ assert (* xyz *);*/
/*@ choose { a = 6; } or { assume a == 6; a = 7; } else { a = 7; } */
//@ model import java.io.File;" + eol +

//@ model import java.io.*;" + eol + eol +

/*@ assume a == 6;*/
/*@ assert a == 6;*/
/*@ debug a = 6;*/
/*@ set a = 6;*/
/*@ assert (* xyz *);*/
/*@ choose { a = 6; } or { assume a == 6; a = 7; } else { a = 7; } */
//@ model import java.io.File;" + eol +

//@ model import java.io.*;" + eol + eol +

/*@ assume a == 6;*/
/*@ assert a == 6;*/
/*@ debug a = 6;*/
/*@ set a = 6;*/
/*@ assert (* xyz *);*/
/*@ choose { a = 6; } or { assume a == 6; a = 7; } else { a = 7; } */
//@ model import java.io.File;" + eol +

//@ model import java.io.*;" + eol + eol +

/*@ assume a == 6;*/
/*@ assert a == 6;*/
/*@ debug a = 6;*/
/*@ set a = 6;*/
/*@ assert (* xyz *);*/
/*@ choose { a = 6; } or { assume a == 6; a = 7; } else { a = 7; } */
//@ model import java.io.File;" + eol +

//@ model import java.io.*;" + eol + eol +

/*@ assume a == 6;*/
/*@ assert a == 6;*/
/*@ debug a = 6;*/
/*@ set a = 6;*/
/*@ assert (* xyz *);*/
/*@ choose { a = 6; } or { assume a == 6; a = 7; } else { a = 7; } */
/*@ pure */
//@ invariant m(); 

//@ invariant m(); 

/*@pure*/
//@ invariant m() == 0; );

//@ invariant m() == 0; );

/*@ pure */
//@ invariant m() == 0; );

//@ invariant m() == 0; );

//@ invariant (b=bb); 

//@ invariant (b+=bb)==0; 

//@ invariant 0==(++b); 

//@ invariant 0==(b++); 

//@ invariant 0==(--b); 

//@ invariant 0==(b--); 

//@ invariant mm();     } /*@ pure */ class B { boolean mm() { return true; } }"

//@ invariant mm();     } /*@ pure */ class B { boolean mm() { return true; } }"

//@ invariant mm();     } /*@ pure */ class B {  }"

/*@ pure */
//@ invariant mm();      boolean mm() { return true; } }     } "

/*@ pure */
//@ assert 0 == v.size(); }     } "

/*@ pure */
//@ invariant m(); 

//@ invariant m(); 

/*@pure*/
//@ invariant m() == 0; );

//@ invariant m() == 0; );

/*@ pure */
//@ invariant m() == 0; );

//@ invariant m() == 0; );

//@ invariant (b=bb); 

//@ invariant (b+=bb)==0; 

//@ invariant 0==(++b); 

//@ invariant 0==(b++); 

//@ invariant 0==(--b); 

//@ invariant 0==(b--); 

//@ invariant mm();     } /*@ pure */ class B { boolean mm() { return true; } }"

//@ invariant mm();     } /*@ pure */ class B { boolean mm() { return true; } }"

//@ invariant mm();     } /*@ pure */ class B {  }"

/*@ pure */
//@ invariant mm();      boolean mm() { return true; } }     } "

/*@ pure */
//@ assert 0 == v.size(); }     } "

/*@ pure */
//@ invariant m(); 

//@ invariant m(); 

/*@pure*/
//@ invariant m() == 0; );

//@ invariant m() == 0; );

/*@ pure */
//@ invariant m() == 0; );

//@ invariant m() == 0; );

//@ invariant (b=bb); 

//@ invariant (b+=bb)==0; 

//@ invariant 0==(++b); 

//@ invariant 0==(b++); 

//@ invariant 0==(--b); 

//@ invariant 0==(b--); 

//@ invariant mm();     } /*@ pure */ class B { boolean mm() { return true; } }"

//@ invariant mm();     } /*@ pure */ class B { boolean mm() { return true; } }"

//@ invariant mm();     } /*@ pure */ class B {  }"

/*@ pure */
//@ invariant mm();      boolean mm() { return true; } }     } "

/*@ pure */
//@ assert 0 == v.size(); }     } "

/*@ pure */
//@ invariant m(); 

//@ invariant m(); 

/*@pure*/
//@ invariant m() == 0; );

//@ invariant m() == 0; );

/*@ pure */
//@ invariant m() == 0; );

//@ invariant m() == 0; );

//@ invariant (b=bb); 

//@ invariant (b+=bb)==0; 

//@ invariant 0==(++b); 

//@ invariant 0==(b++); 

//@ invariant 0==(--b); 

//@ invariant 0==(b--); 

//@ invariant mm();     } /*@ pure */ class B { boolean mm() { return true; } }"

//@ invariant mm();     } /*@ pure */ class B { boolean mm() { return true; } }"

//@ invariant mm();     } /*@ pure */ class B {  }"

/*@ pure */
//@ invariant mm();      boolean mm() { return true; } }     } "

/*@ pure */
//@ assert 0 == v.size(); }     } "

/*@ pure */
//@ invariant m(); 

//@ invariant m(); 

/*@pure*/
//@ invariant m() == 0; );

//@ invariant m() == 0; );

/*@ pure */
//@ invariant m() == 0; );

//@ invariant m() == 0; );

//@ invariant (b=bb); 

//@ invariant (b+=bb)==0; 

//@ invariant 0==(++b); 

//@ invariant 0==(b++); 

//@ invariant 0==(--b); 

//@ invariant 0==(b--); 

//@ invariant mm();     } /*@ pure */ class B { boolean mm() { return true; } }"

//@ invariant mm();     } /*@ pure */ class B { boolean mm() { return true; } }"

//@ invariant mm();     } /*@ pure */ class B {  }"

/*@ pure */
//@ invariant mm();      boolean mm() { return true; } }     } "

/*@ pure */
//@ assert 0 == v.size(); }     } "

//@ pure    " +  // OK

//@ query    " +   // OK

//@ pure query    " +  // BAD

//@ query    " +  // BAD

//@ pure    " +  // BAD

//@ query    " +  // BAD

//@ query    " +  // OK

//@pure    " +  // OK

//@ pure query    " +  // BAD

//@ query    " +  // BAD

//@ query    " +  // BAD

//@ pure    " +  // BAD

//@ secret public model JMLDataGroup value;    " +

//@ in value;     " +

//@ ensures \\result == compute();    " +

//@ model public secret Object value;    " +

//@ in value;     " +

//@ ensures \\result == compute();    " +

//@ ensures \\result == compute();    " +

//@ ensures \\result == compute();    " +

//@ in value;     " + // To use the implicit declaration, value here must be after the Query

//@ ensures \\result == compute();    " +

//@ in value;     " + // To use the implicit declaration, value here must be after the Query

//@ @Secret(\"value\") public invariant cache != null ==> cache == compute();    " +

//@ in value;     " +

//@ secret model Object value;    " + // we're allowing forward reference

//@ secret model Integer cache ; //@ in value;     " +

//@ secret model Object value; in cache;     " + // error - circular

//@ secret model Object value; in value;     " + // warning - circular

//@ in value;     " +

//@ ensures \\result == compute();    " +

//@ model secret public Object value;    " +

//@ in value;     " +

//@ ensures \\result == cache;    " +  // ERROR - no use of secret in specs

//@ model secret Object value;    " +

//@ in value;     " +

//@ ensures \\result == compute();    " +

//@ ensures \\result == compute();    " +

//@ in value;     " +

//@ @Secret public model Object o;     " +

//@ in o;    " +

//@ ensures \\result == compute();    " +

//@ in value;     " +

//@ @Secret public model Object o;     " +

//@ in o;    " +

//@ ensures \\result == compute();    " +

//@ in value;     " +

//@ @Secret public model Object value;    " +

//@ @Secret public model Object o; in value;      " +

//@ in o;    " +

//@ ensures \\result == compute();    " +

//@ in value;     " +

//@ @Secret public model Object o;     " +

//@ in o;    " +

//@ ensures \\result == compute();    " +

//@ in value;     " +

//@ @Secret(\"value\") public invariant cache != null ==> cache == compute() + q;    " +// ERROR - no reading other secret

//@ in value;      " +

//@ ensures \\result == compute();    " +

//@ in value;     " +

//@ @Secret(\"value\") public invariant cache != null ==> cache == compute() + 0;    " +

//@ in o;    " +

//@ ensures \\result == compute();    " +

//@ in value;     " +

//@ @Secret(\"value\") public invariant cache != null ==> cache == compute() + q;    " + // OK - q is nested in value

//@ @Secret public model Object o; in value;      " +

//@ @Secret public model Object o; in value;      " +

//@ in o;    " +

//@ ensures \\result == compute();    " +

//@ in value;     " +

//@ @Secret(\"value\") public invariant cache != null ==> cache == compute() + q;    " + // OK - q is nested in value

//@ @Secret public model Object value;    " +

//@ @Secret public model Object o; in value;      " +

//@ in o;    " +

//@ ensures \\result == compute();    " +

//@ in value;     " +

//@ @Secret(\"value\") public invariant cache != null ==> cache == compute() + q;    " + // OK - q is nested in value

//@ @Secret public model Object value;    " +

//@ @Secret public model Object o; in value;      " +

//@ in o;    " +

//@ ensures \\result == compute();    " +

//@ in value;     " +

//@ @Secret public invariant true;    " + // BAD SYNTAX

//@ @Secret(0) public invariant true;    " + // BAD SYNTAX

//@ @Secret(\"org\") public invariant true;    " + // BAD SYNTAX

//@ @Secret(\"value\",\"value\") public invariant true;    " + // BAD SYNTAX

//@ @Secret(\"v\") public invariant true;    " + // ERROR - not found

//@ @Secret public model int value;    " +

//@ @Secret public model Object o; in value;      " +

//@ in o;    " +

//@ in value;     " +

//@ @Secret model int value;    " +

//@ @Secret public model Object o;      " +

//@ in o;    " +

//@ in value;     " +

//@ @Secret model int value;    " +

//@ @Secret public model Object o;      " +

//@ in o;    " +

//@ in value;     " +

//@ pure    " +  // OK

//@ query    " +   // OK

//@ pure query    " +  // BAD

//@ query    " +  // BAD

//@ pure    " +  // BAD

//@ query    " +  // BAD

//@ query    " +  // OK

//@pure    " +  // OK

//@ pure query    " +  // BAD

//@ query    " +  // BAD

//@ query    " +  // BAD

//@ pure    " +  // BAD

//@ secret public model JMLDataGroup value;    " +

//@ in value;     " +

//@ ensures \\result == compute();    " +

//@ model public secret Object value;    " +

//@ in value;     " +

//@ ensures \\result == compute();    " +

//@ ensures \\result == compute();    " +

//@ ensures \\result == compute();    " +

//@ in value;     " + // To use the implicit declaration, value here must be after the Query

//@ ensures \\result == compute();    " +

//@ in value;     " + // To use the implicit declaration, value here must be after the Query

//@ @Secret(\"value\") public invariant cache != null ==> cache == compute();    " +

//@ in value;     " +

//@ secret model Object value;    " + // we're allowing forward reference

//@ secret model Integer cache ; //@ in value;     " +

//@ secret model Object value; in cache;     " + // error - circular

//@ secret model Object value; in value;     " + // warning - circular

//@ in value;     " +

//@ ensures \\result == compute();    " +

//@ model secret public Object value;    " +

//@ in value;     " +

//@ ensures \\result == cache;    " +  // ERROR - no use of secret in specs

//@ model secret Object value;    " +

//@ in value;     " +

//@ ensures \\result == compute();    " +

//@ ensures \\result == compute();    " +

//@ in value;     " +

//@ @Secret public model Object o;     " +

//@ in o;    " +

//@ ensures \\result == compute();    " +

//@ in value;     " +

//@ @Secret public model Object o;     " +

//@ in o;    " +

//@ ensures \\result == compute();    " +

//@ in value;     " +

//@ @Secret public model Object value;    " +

//@ @Secret public model Object o; in value;      " +

//@ in o;    " +

//@ ensures \\result == compute();    " +

//@ in value;     " +

//@ @Secret public model Object o;     " +

//@ in o;    " +

//@ ensures \\result == compute();    " +

//@ in value;     " +

//@ @Secret(\"value\") public invariant cache != null ==> cache == compute() + q;    " +// ERROR - no reading other secret

//@ in value;      " +

//@ ensures \\result == compute();    " +

//@ in value;     " +

//@ @Secret(\"value\") public invariant cache != null ==> cache == compute() + 0;    " +

//@ in o;    " +

//@ ensures \\result == compute();    " +

//@ in value;     " +

//@ @Secret(\"value\") public invariant cache != null ==> cache == compute() + q;    " + // OK - q is nested in value

//@ @Secret public model Object o; in value;      " +

//@ @Secret public model Object o; in value;      " +

//@ in o;    " +

//@ ensures \\result == compute();    " +

//@ in value;     " +

//@ @Secret(\"value\") public invariant cache != null ==> cache == compute() + q;    " + // OK - q is nested in value

//@ @Secret public model Object value;    " +

//@ @Secret public model Object o; in value;      " +

//@ in o;    " +

//@ ensures \\result == compute();    " +

//@ in value;     " +

//@ @Secret(\"value\") public invariant cache != null ==> cache == compute() + q;    " + // OK - q is nested in value

//@ @Secret public model Object value;    " +

//@ @Secret public model Object o; in value;      " +

//@ in o;    " +

//@ ensures \\result == compute();    " +

//@ in value;     " +

//@ @Secret public invariant true;    " + // BAD SYNTAX

//@ @Secret(0) public invariant true;    " + // BAD SYNTAX

//@ @Secret(\"org\") public invariant true;    " + // BAD SYNTAX

//@ @Secret(\"value\",\"value\") public invariant true;    " + // BAD SYNTAX

//@ @Secret(\"v\") public invariant true;    " + // ERROR - not found

//@ @Secret public model int value;    " +

//@ @Secret public model Object o; in value;      " +

//@ in o;    " +

//@ in value;     " +

//@ @Secret model int value;    " +

//@ @Secret public model Object o;      " +

//@ in o;    " +

//@ in value;     " +

//@ @Secret model int value;    " +

//@ @Secret public model Object o;      " +

//@ in o;    " +

//@ in value;     " +

//@ pure    " +  // OK

//@ query    " +   // OK

//@ pure query    " +  // BAD

//@ query    " +  // BAD

//@ pure    " +  // BAD

//@ query    " +  // BAD

//@ query    " +  // OK

//@pure    " +  // OK

//@ pure query    " +  // BAD

//@ query    " +  // BAD

//@ query    " +  // BAD

//@ pure    " +  // BAD

//@ secret public model JMLDataGroup value;    " +

//@ in value;     " +

//@ ensures \\result == compute();    " +

//@ model public secret Object value;    " +

//@ in value;     " +

//@ ensures \\result == compute();    " +

//@ ensures \\result == compute();    " +

//@ ensures \\result == compute();    " +

//@ in value;     " + // To use the implicit declaration, value here must be after the Query

//@ ensures \\result == compute();    " +

//@ in value;     " + // To use the implicit declaration, value here must be after the Query

//@ @Secret(\"value\") public invariant cache != null ==> cache == compute();    " +

//@ in value;     " +

//@ secret model Object value;    " + // we're allowing forward reference

//@ secret model Integer cache ; //@ in value;     " +

//@ secret model Object value; in cache;     " + // error - circular

//@ secret model Object value; in value;     " + // warning - circular

//@ in value;     " +

//@ ensures \\result == compute();    " +

//@ model secret public Object value;    " +

//@ in value;     " +

//@ ensures \\result == cache;    " +  // ERROR - no use of secret in specs

//@ model secret Object value;    " +

//@ in value;     " +

//@ ensures \\result == compute();    " +

//@ ensures \\result == compute();    " +

//@ in value;     " +

//@ @Secret public model Object o;     " +

//@ in o;    " +

//@ ensures \\result == compute();    " +

//@ in value;     " +

//@ @Secret public model Object o;     " +

//@ in o;    " +

//@ ensures \\result == compute();    " +

//@ in value;     " +

//@ @Secret public model Object value;    " +

//@ @Secret public model Object o; in value;      " +

//@ in o;    " +

//@ ensures \\result == compute();    " +

//@ in value;     " +

//@ @Secret public model Object o;     " +

//@ in o;    " +

//@ ensures \\result == compute();    " +

//@ in value;     " +

//@ @Secret(\"value\") public invariant cache != null ==> cache == compute() + q;    " +// ERROR - no reading other secret

//@ in value;      " +

//@ ensures \\result == compute();    " +

//@ in value;     " +

//@ @Secret(\"value\") public invariant cache != null ==> cache == compute() + 0;    " +

//@ in o;    " +

//@ ensures \\result == compute();    " +

//@ in value;     " +

//@ @Secret(\"value\") public invariant cache != null ==> cache == compute() + q;    " + // OK - q is nested in value

//@ @Secret public model Object o; in value;      " +

//@ @Secret public model Object o; in value;      " +

//@ in o;    " +

//@ ensures \\result == compute();    " +

//@ in value;     " +

//@ @Secret(\"value\") public invariant cache != null ==> cache == compute() + q;    " + // OK - q is nested in value

//@ @Secret public model Object value;    " +

//@ @Secret public model Object o; in value;      " +

//@ in o;    " +

//@ ensures \\result == compute();    " +

//@ in value;     " +

//@ @Secret(\"value\") public invariant cache != null ==> cache == compute() + q;    " + // OK - q is nested in value

//@ @Secret public model Object value;    " +

//@ @Secret public model Object o; in value;      " +

//@ in o;    " +

//@ ensures \\result == compute();    " +

//@ in value;     " +

//@ @Secret public invariant true;    " + // BAD SYNTAX

//@ @Secret(0) public invariant true;    " + // BAD SYNTAX

//@ @Secret(\"org\") public invariant true;    " + // BAD SYNTAX

//@ @Secret(\"value\",\"value\") public invariant true;    " + // BAD SYNTAX

//@ @Secret(\"v\") public invariant true;    " + // ERROR - not found

//@ @Secret public model int value;    " +

//@ @Secret public model Object o; in value;      " +

//@ in o;    " +

//@ in value;     " +

//@ @Secret model int value;    " +

//@ @Secret public model Object o;      " +

//@ in o;    " +

//@ in value;     " +

//@ @Secret model int value;    " +

//@ @Secret public model Object o;      " +

//@ in o;    " +

//@ in value;     " +

//@ pure    " +  // OK

//@ query    " +   // OK

//@ pure query    " +  // BAD

//@ query    " +  // BAD

//@ pure    " +  // BAD

//@ query    " +  // BAD

//@ query    " +  // OK

//@pure    " +  // OK

//@ pure query    " +  // BAD

//@ query    " +  // BAD

//@ query    " +  // BAD

//@ pure    " +  // BAD

//@ secret public model JMLDataGroup value;    " +

//@ in value;     " +

//@ ensures \\result == compute();    " +

//@ model public secret Object value;    " +

//@ in value;     " +

//@ ensures \\result == compute();    " +

//@ ensures \\result == compute();    " +

//@ ensures \\result == compute();    " +

//@ in value;     " + // To use the implicit declaration, value here must be after the Query

//@ ensures \\result == compute();    " +

//@ in value;     " + // To use the implicit declaration, value here must be after the Query

//@ @Secret(\"value\") public invariant cache != null ==> cache == compute();    " +

//@ in value;     " +

//@ secret model Object value;    " + // we're allowing forward reference

//@ secret model Integer cache ; //@ in value;     " +

//@ secret model Object value; in cache;     " + // error - circular

//@ secret model Object value; in value;     " + // warning - circular

//@ in value;     " +

//@ ensures \\result == compute();    " +

//@ model secret public Object value;    " +

//@ in value;     " +

//@ ensures \\result == cache;    " +  // ERROR - no use of secret in specs

//@ model secret Object value;    " +

//@ in value;     " +

//@ ensures \\result == compute();    " +

//@ ensures \\result == compute();    " +

//@ in value;     " +

//@ @Secret public model Object o;     " +

//@ in o;    " +

//@ ensures \\result == compute();    " +

//@ in value;     " +

//@ @Secret public model Object o;     " +

//@ in o;    " +

//@ ensures \\result == compute();    " +

//@ in value;     " +

//@ @Secret public model Object value;    " +

//@ @Secret public model Object o; in value;      " +

//@ in o;    " +

//@ ensures \\result == compute();    " +

//@ in value;     " +

//@ @Secret public model Object o;     " +

//@ in o;    " +

//@ ensures \\result == compute();    " +

//@ in value;     " +

//@ @Secret(\"value\") public invariant cache != null ==> cache == compute() + q;    " +// ERROR - no reading other secret

//@ in value;      " +

//@ ensures \\result == compute();    " +

//@ in value;     " +

//@ @Secret(\"value\") public invariant cache != null ==> cache == compute() + 0;    " +

//@ in o;    " +

//@ ensures \\result == compute();    " +

//@ in value;     " +

//@ @Secret(\"value\") public invariant cache != null ==> cache == compute() + q;    " + // OK - q is nested in value

//@ @Secret public model Object o; in value;      " +

//@ @Secret public model Object o; in value;      " +

//@ in o;    " +

//@ ensures \\result == compute();    " +

//@ in value;     " +

//@ @Secret(\"value\") public invariant cache != null ==> cache == compute() + q;    " + // OK - q is nested in value

//@ @Secret public model Object value;    " +

//@ @Secret public model Object o; in value;      " +

//@ in o;    " +

//@ ensures \\result == compute();    " +

//@ in value;     " +

//@ @Secret(\"value\") public invariant cache != null ==> cache == compute() + q;    " + // OK - q is nested in value

//@ @Secret public model Object value;    " +

//@ @Secret public model Object o; in value;      " +

//@ in o;    " +

//@ ensures \\result == compute();    " +

//@ in value;     " +

//@ @Secret public invariant true;    " + // BAD SYNTAX

//@ @Secret(0) public invariant true;    " + // BAD SYNTAX

//@ @Secret(\"org\") public invariant true;    " + // BAD SYNTAX

//@ @Secret(\"value\",\"value\") public invariant true;    " + // BAD SYNTAX

//@ @Secret(\"v\") public invariant true;    " + // ERROR - not found

//@ @Secret public model int value;    " +

//@ @Secret public model Object o; in value;      " +

//@ in o;    " +

//@ in value;     " +

//@ @Secret model int value;    " +

//@ @Secret public model Object o;      " +

//@ in o;    " +

//@ in value;     " +

//@ @Secret model int value;    " +

//@ @Secret public model Object o;      " +

//@ in o;    " +

//@ in value;     " +

//@ pure    " +  // OK

//@ query    " +   // OK

//@ pure query    " +  // BAD

//@ query    " +  // BAD

//@ pure    " +  // BAD

//@ query    " +  // BAD

//@ query    " +  // OK

//@pure    " +  // OK

//@ pure query    " +  // BAD

//@ query    " +  // BAD

//@ query    " +  // BAD

//@ pure    " +  // BAD

//@ secret public model JMLDataGroup value;    " +

//@ in value;     " +

//@ ensures \\result == compute();    " +

//@ model public secret Object value;    " +

//@ in value;     " +

//@ ensures \\result == compute();    " +

//@ ensures \\result == compute();    " +

//@ ensures \\result == compute();    " +

//@ in value;     " + // To use the implicit declaration, value here must be after the Query

//@ ensures \\result == compute();    " +

//@ in value;     " + // To use the implicit declaration, value here must be after the Query

//@ @Secret(\"value\") public invariant cache != null ==> cache == compute();    " +

//@ in value;     " +

//@ secret model Object value;    " + // we're allowing forward reference

//@ secret model Integer cache ; //@ in value;     " +

//@ secret model Object value; in cache;     " + // error - circular

//@ secret model Object value; in value;     " + // warning - circular

//@ in value;     " +

//@ ensures \\result == compute();    " +

//@ model secret public Object value;    " +

//@ in value;     " +

//@ ensures \\result == cache;    " +  // ERROR - no use of secret in specs

//@ model secret Object value;    " +

//@ in value;     " +

//@ ensures \\result == compute();    " +

//@ ensures \\result == compute();    " +

//@ in value;     " +

//@ @Secret public model Object o;     " +

//@ in o;    " +

//@ ensures \\result == compute();    " +

//@ in value;     " +

//@ @Secret public model Object o;     " +

//@ in o;    " +

//@ ensures \\result == compute();    " +

//@ in value;     " +

//@ @Secret public model Object value;    " +

//@ @Secret public model Object o; in value;      " +

//@ in o;    " +

//@ ensures \\result == compute();    " +

//@ in value;     " +

//@ @Secret public model Object o;     " +

//@ in o;    " +

//@ ensures \\result == compute();    " +

//@ in value;     " +

//@ @Secret(\"value\") public invariant cache != null ==> cache == compute() + q;    " +// ERROR - no reading other secret

//@ in value;      " +

//@ ensures \\result == compute();    " +

//@ in value;     " +

//@ @Secret(\"value\") public invariant cache != null ==> cache == compute() + 0;    " +

//@ in o;    " +

//@ ensures \\result == compute();    " +

//@ in value;     " +

//@ @Secret(\"value\") public invariant cache != null ==> cache == compute() + q;    " + // OK - q is nested in value

//@ @Secret public model Object o; in value;      " +

//@ @Secret public model Object o; in value;      " +

//@ in o;    " +

//@ ensures \\result == compute();    " +

//@ in value;     " +

//@ @Secret(\"value\") public invariant cache != null ==> cache == compute() + q;    " + // OK - q is nested in value

//@ @Secret public model Object value;    " +

//@ @Secret public model Object o; in value;      " +

//@ in o;    " +

//@ ensures \\result == compute();    " +

//@ in value;     " +

//@ @Secret(\"value\") public invariant cache != null ==> cache == compute() + q;    " + // OK - q is nested in value

//@ @Secret public model Object value;    " +

//@ @Secret public model Object o; in value;      " +

//@ in o;    " +

//@ ensures \\result == compute();    " +

//@ in value;     " +

//@ @Secret public invariant true;    " + // BAD SYNTAX

//@ @Secret(0) public invariant true;    " + // BAD SYNTAX

//@ @Secret(\"org\") public invariant true;    " + // BAD SYNTAX

//@ @Secret(\"value\",\"value\") public invariant true;    " + // BAD SYNTAX

//@ @Secret(\"v\") public invariant true;    " + // ERROR - not found

//@ @Secret public model int value;    " +

//@ @Secret public model Object o; in value;      " +

//@ in o;    " +

//@ in value;     " +

//@ @Secret model int value;    " +

//@ @Secret public model Object o;      " +

//@ in o;    " +

//@ in value;     " +

//@ @Secret model int value;    " +

//@ @Secret public model Object o;      " +

//@ in o;    " +

//@ in value;     " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

//@ model int q;    " +

//@ model int q;    " +

/*@ public model JMLDataGroup q; */
//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup m;    " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

/*@ public model JMLDataGroup q; */
//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup m;    " +

//@ instance model int p;     " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup m;    " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q,r;    " +

//@ public model JMLDataGroup q;    " +

//@ public secret model JMLDataGroup q;    " +

//@ in q;     " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

//@ in q;     " +

//@ public secret model JMLDataGroup q;    " +

//@ in q;      " +

//@ public secret model JMLDataGroup q;    " +

//@ model int m; //@ in q;      " +

//@ public model JMLDataGroup q;    " +

//@ secret model int m;      " +

//@ secret public model int i;    " +

//@ secret public model int j; in i;     " +

//@ secret public represents i = j;     " +

//@ secret public model int i;    " +

//@ secret public model int j;    " +

//@ secret public represents i = j;     " +

//@ secret public model int i;    " +

//@ public represents i = 0;     " +

//@ public model int i;    " +

//@ secret public represents i = 0;     " +

//@ secret public model int i;    " +

//@ @Secret(\"i\") public represents i = 0;     " +

//@ secret public model int j;    " +

//@ public model int i;    " +

//@ public represents i = j;     " +

//@ secret public model int j;    " +

//@ public invariant j == 0;    " +

//@ public constraint j == 0;    " +

//@ public model int i;    " +

//@ public model int j;    " +

//@ @Query(\"i\")     " +

//@ @Secret(\"i\")     " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

//@ model int q;    " +

//@ model int q;    " +

/*@ public model JMLDataGroup q; */
//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup m;    " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

/*@ public model JMLDataGroup q; */
//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup m;    " +

//@ instance model int p;     " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup m;    " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q,r;    " +

//@ public model JMLDataGroup q;    " +

//@ public secret model JMLDataGroup q;    " +

//@ in q;     " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

//@ in q;     " +

//@ public secret model JMLDataGroup q;    " +

//@ in q;      " +

//@ public secret model JMLDataGroup q;    " +

//@ model int m; //@ in q;      " +

//@ public model JMLDataGroup q;    " +

//@ secret model int m;      " +

//@ secret public model int i;    " +

//@ secret public model int j; in i;     " +

//@ secret public represents i = j;     " +

//@ secret public model int i;    " +

//@ secret public model int j;    " +

//@ secret public represents i = j;     " +

//@ secret public model int i;    " +

//@ public represents i = 0;     " +

//@ public model int i;    " +

//@ secret public represents i = 0;     " +

//@ secret public model int i;    " +

//@ @Secret(\"i\") public represents i = 0;     " +

//@ secret public model int j;    " +

//@ public model int i;    " +

//@ public represents i = j;     " +

//@ secret public model int j;    " +

//@ public invariant j == 0;    " +

//@ public constraint j == 0;    " +

//@ public model int i;    " +

//@ public model int j;    " +

//@ @Query(\"i\")     " +

//@ @Secret(\"i\")     " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

//@ model int q;    " +

//@ model int q;    " +

/*@ public model JMLDataGroup q; */
//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup m;    " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

/*@ public model JMLDataGroup q; */
//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup m;    " +

//@ instance model int p;     " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup m;    " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q,r;    " +

//@ public model JMLDataGroup q;    " +

//@ public secret model JMLDataGroup q;    " +

//@ in q;     " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

//@ in q;     " +

//@ public secret model JMLDataGroup q;    " +

//@ in q;      " +

//@ public secret model JMLDataGroup q;    " +

//@ model int m; //@ in q;      " +

//@ public model JMLDataGroup q;    " +

//@ secret model int m;      " +

//@ secret public model int i;    " +

//@ secret public model int j; in i;     " +

//@ secret public represents i = j;     " +

//@ secret public model int i;    " +

//@ secret public model int j;    " +

//@ secret public represents i = j;     " +

//@ secret public model int i;    " +

//@ public represents i = 0;     " +

//@ public model int i;    " +

//@ secret public represents i = 0;     " +

//@ secret public model int i;    " +

//@ @Secret(\"i\") public represents i = 0;     " +

//@ secret public model int j;    " +

//@ public model int i;    " +

//@ public represents i = j;     " +

//@ secret public model int j;    " +

//@ public invariant j == 0;    " +

//@ public constraint j == 0;    " +

//@ public model int i;    " +

//@ public model int j;    " +

//@ @Query(\"i\")     " +

//@ @Secret(\"i\")     " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

//@ model int q;    " +

//@ model int q;    " +

/*@ public model JMLDataGroup q; */
//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup m;    " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

/*@ public model JMLDataGroup q; */
//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup m;    " +

//@ instance model int p;     " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup m;    " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q,r;    " +

//@ public model JMLDataGroup q;    " +

//@ public secret model JMLDataGroup q;    " +

//@ in q;     " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

//@ in q;     " +

//@ public secret model JMLDataGroup q;    " +

//@ in q;      " +

//@ public secret model JMLDataGroup q;    " +

//@ model int m; //@ in q;      " +

//@ public model JMLDataGroup q;    " +

//@ secret model int m;      " +

//@ secret public model int i;    " +

//@ secret public model int j; in i;     " +

//@ secret public represents i = j;     " +

//@ secret public model int i;    " +

//@ secret public model int j;    " +

//@ secret public represents i = j;     " +

//@ secret public model int i;    " +

//@ public represents i = 0;     " +

//@ public model int i;    " +

//@ secret public represents i = 0;     " +

//@ secret public model int i;    " +

//@ @Secret(\"i\") public represents i = 0;     " +

//@ secret public model int j;    " +

//@ public model int i;    " +

//@ public represents i = j;     " +

//@ secret public model int j;    " +

//@ public invariant j == 0;    " +

//@ public constraint j == 0;    " +

//@ public model int i;    " +

//@ public model int j;    " +

//@ @Query(\"i\")     " +

//@ @Secret(\"i\")     " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

//@ model int q;    " +

//@ model int q;    " +

/*@ public model JMLDataGroup q; */
//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup m;    " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

/*@ public model JMLDataGroup q; */
//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup m;    " +

//@ instance model int p;     " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup m;    " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q,r;    " +

//@ public model JMLDataGroup q;    " +

//@ public secret model JMLDataGroup q;    " +

//@ in q;     " +

//@ public model JMLDataGroup q;    " +

//@ public model JMLDataGroup q;    " +

//@ in q;     " +

//@ public secret model JMLDataGroup q;    " +

//@ in q;      " +

//@ public secret model JMLDataGroup q;    " +

//@ model int m; //@ in q;      " +

//@ public model JMLDataGroup q;    " +

//@ secret model int m;      " +

//@ secret public model int i;    " +

//@ secret public model int j; in i;     " +

//@ secret public represents i = j;     " +

//@ secret public model int i;    " +

//@ secret public model int j;    " +

//@ secret public represents i = j;     " +

//@ secret public model int i;    " +

//@ public represents i = 0;     " +

//@ public model int i;    " +

//@ secret public represents i = 0;     " +

//@ secret public model int i;    " +

//@ @Secret(\"i\") public represents i = 0;     " +

//@ secret public model int j;    " +

//@ public model int i;    " +

//@ public represents i = j;     " +

//@ secret public model int j;    " +

//@ public invariant j == 0;    " +

//@ public constraint j == 0;    " +

//@ public model int i;    " +

//@ public model int j;    " +

//@ @Query(\"i\")     " +

//@ @Secret(\"i\")     " +

//@ assert i == m && q == qq ;    "

//@ assert (k%j) == m && (k/j) == qq;    "

//@ assert i == -m && q == -qq;    "

//@ assert ((-k)%j) == -m && ((-k)/j) == -qq;    "   // Line 15

//@ assert i == m && q == -qq;    "

//@ assert (k%-j) == m && (k/-j) == -qq;    "

//@ assert i == -m && q == qq;    "

//@ assert (-k%-j) == -m && ((-k)/-j) == qq;    "

//@ assert i == m && q == qq ;    "

//@ assert (k%j) == m && (k/j) == qq;    "

//@ assert i == -m && q == -qq;    "

//@ assert ((-k)%j) == -m && ((-k)/j) == -qq;    "   // Line 15

//@ assert i == m && q == -qq;    "

//@ assert (k%-j) == m && (k/-j) == -qq;    "

//@ assert i == -m && q == qq;    "

//@ assert (-k%-j) == -m && ((-k)/-j) == qq;    "

//@ assert i == m && q == qq ;    "

//@ assert (k%j) == m && (k/j) == qq;    "

//@ assert i == -m && q == -qq;    "

//@ assert ((-k)%j) == -m && ((-k)/j) == -qq;    "   // Line 15

//@ assert i == m && q == -qq;    "

//@ assert (k%-j) == m && (k/-j) == -qq;    "

//@ assert i == -m && q == qq;    "

//@ assert (-k%-j) == -m && ((-k)/-j) == qq;    "

//@ assert i == m && q == qq ;    "

//@ assert (k%j) == m && (k/j) == qq;    "

//@ assert i == -m && q == -qq;    "

//@ assert ((-k)%j) == -m && ((-k)/j) == -qq;    "   // Line 15

//@ assert i == m && q == -qq;    "

//@ assert (k%-j) == m && (k/-j) == -qq;    "

//@ assert i == -m && q == qq;    "

//@ assert (-k%-j) == -m && ((-k)/-j) == qq;    "

//@ assert i == m && q == qq ;    "

//@ assert (k%j) == m && (k/j) == qq;    "

//@ assert i == -m && q == -qq;    "

//@ assert ((-k)%j) == -m && ((-k)/j) == -qq;    "   // Line 15

//@ assert i == m && q == -qq;    "

//@ assert (k%-j) == m && (k/-j) == -qq;    "

//@ assert i == -m && q == qq;    "

//@ assert (-k%-j) == -m && ((-k)/-j) == qq;    "

//@ assert i == m && q == qq ;    "

//@ assert (k%j) == m && (k/j) == qq;    "

//@ assert i == -m && q == -qq;    "

//@ assert ((-k)%j) == -m && ((-k)/j) == -qq;    "   // Line 15

//@ assert i == m && q == -qq;    "

//@ assert (k%-j) == m && (k/-j) == -qq;    "

//@ assert i == -m && q == qq;    "

//@ assert (-k%-j) == -m && ((-k)/-j) == qq;    "

//@ assert i == m && q == qq ;    "

//@ assert (k%j) == m && (k/j) == qq;    "

//@ assert i == -m && q == -qq;    "

//@ assert ((-k)%j) == -m && ((-k)/j) == -qq;    "   // Line 15

//@ assert i == m && q == -qq;    "

//@ assert (k%-j) == m && (k/-j) == -qq;    "

//@ assert i == -m && q == qq;    "

//@ assert (-k%-j) == -m && ((-k)/-j) == qq;    "

//@ assert i == m && q == qq ;    "

//@ assert (k%j) == m && (k/j) == qq;    "

//@ assert i == -m && q == -qq;    "

//@ assert ((-k)%j) == -m && ((-k)/j) == -qq;    "   // Line 15

//@ assert i == m && q == -qq;    "

//@ assert (k%-j) == m && (k/-j) == -qq;    "

//@ assert i == -m && q == qq;    "

//@ assert (-k%-j) == -m && ((-k)/-j) == qq;    "

//@ assert i == m && q == qq ;    "

//@ assert (k%j) == m && (k/j) == qq;    "

//@ assert i == -m && q == -qq;    "

//@ assert ((-k)%j) == -m && ((-k)/j) == -qq;    "   // Line 15

//@ assert i == m && q == -qq;    "

//@ assert (k%-j) == m && (k/-j) == -qq;    "

//@ assert i == -m && q == qq;    "

//@ assert (-k%-j) == -m && ((-k)/-j) == qq;    "

//@ assert i == m && q == qq ;    "

//@ assert (k%j) == m && (k/j) == qq;    "

//@ assert i == -m && q == -qq;    "

//@ assert ((-k)%j) == -m && ((-k)/j) == -qq;    "   // Line 15

//@ assert i == m && q == -qq;    "

//@ assert (k%-j) == m && (k/-j) == -qq;    "

//@ assert i == -m && q == qq;    "

//@ assert (-k%-j) == -m && ((-k)/-j) == qq;    "

//@ assert i == m && q == qq ;    "

//@ assert (k%j) == m && (k/j) == qq;    "

//@ assert i == -m && q == -qq;    "

//@ assert ((-k)%j) == -m && ((-k)/j) == -qq;    "   // Line 15

//@ assert i == m && q == -qq;    "

//@ assert (k%-j) == m && (k/-j) == -qq;    "

//@ assert i == -m && q == qq;    "

//@ assert (-k%-j) == -m && ((-k)/-j) == qq;    "

//@ assert i == m && q == qq ;    "

//@ assert (k%j) == m && (k/j) == qq;    "

//@ assert i == -m && q == -qq;    "

//@ assert ((-k)%j) == -m && ((-k)/j) == -qq;    "   // Line 15

//@ assert i == m && q == -qq;    "

//@ assert (k%-j) == m && (k/-j) == -qq;    "

//@ assert i == -m && q == qq;    "

//@ assert (-k%-j) == -m && ((-k)/-j) == qq;    "

//@ assert i == m && q == qq ;    "

//@ assert (k%j) == m && (k/j) == qq;    "

//@ assert i == -m && q == -qq;    "

//@ assert ((-k)%j) == -m && ((-k)/j) == -qq;    "   // Line 15

//@ assert i == m && q == -qq;    "

//@ assert (k%-j) == m && (k/-j) == -qq;    "

//@ assert i == -m && q == qq;    "

//@ assert (-k%-j) == -m && ((-k)/-j) == qq;    "

//@ assert i == m && q == qq ;    "

//@ assert (k%j) == m && (k/j) == qq;    "

//@ assert i == -m && q == -qq;    "

//@ assert ((-k)%j) == -m && ((-k)/j) == -qq;    "   // Line 15

//@ assert i == m && q == -qq;    "

//@ assert (k%-j) == m && (k/-j) == -qq;    "

//@ assert i == -m && q == qq;    "

//@ assert (-k%-j) == -m && ((-k)/-j) == qq;    "

//@ assert i == m && q == qq ;    "

//@ assert (k%j) == m && (k/j) == qq;    "

//@ assert i == -m && q == -qq;    "

//@ assert ((-k)%j) == -m && ((-k)/j) == -qq;    "   // Line 15

//@ assert i == m && q == -qq;    "

//@ assert (k%-j) == m && (k/-j) == -qq;    "

//@ assert i == -m && q == qq;    "

//@ assert (-k%-j) == -m && ((-k)/-j) == qq;    "

//@ assert JML.lbl(\"AL\",\"Z\") != null;     "

//@ assert JML.lbl(\"AL\",\"XYZ\").equals(\"XYZ\");     "

//@ assert JML.lbl(\"AL\",args.length == 0);     "

//@ assert JML.lbl(\"AL\",args.length) == 0;     "

//@ assert JML.lbl(\"AL\",(long)args.length) == 0;     "

//@ assert JML.lbl(\"AL\",(short)args.length) == 0;     "

//@ assert JML.lbl(\"AL\",(byte)args.length) == 0;     "

//@ assert JML.lbl(\"AL\",'Z') == 'Z';     "

//@ ensures JML.lbl(\"INPUT\",i) == \\result;    "

//@ assert JML.lbl(\"AL\",5.0) != 0.0; }    "

//@ assert JML.lbl(\"AL\",\"Z\") != null;     "

//@ assert JML.lbl(\"AL\",\"XYZ\").equals(\"XYZ\");     "

//@ assert JML.lbl(\"AL\",args.length == 0);     "

//@ assert JML.lbl(\"AL\",args.length) == 0;     "

//@ assert JML.lbl(\"AL\",(long)args.length) == 0;     "

//@ assert JML.lbl(\"AL\",(short)args.length) == 0;     "

//@ assert JML.lbl(\"AL\",(byte)args.length) == 0;     "

//@ assert JML.lbl(\"AL\",'Z') == 'Z';     "

//@ ensures JML.lbl(\"INPUT\",i) == \\result;    "

//@ assert JML.lbl(\"AL\",5.0) != 0.0; }    "

//@ assert JML.lbl(\"AL\",\"Z\") != null;     "

//@ assert JML.lbl(\"AL\",\"XYZ\").equals(\"XYZ\");     "

//@ assert JML.lbl(\"AL\",args.length == 0);     "

//@ assert JML.lbl(\"AL\",args.length) == 0;     "

//@ assert JML.lbl(\"AL\",(long)args.length) == 0;     "

//@ assert JML.lbl(\"AL\",(short)args.length) == 0;     "

//@ assert JML.lbl(\"AL\",(byte)args.length) == 0;     "

//@ assert JML.lbl(\"AL\",'Z') == 'Z';     "

//@ ensures JML.lbl(\"INPUT\",i) == \\result;    "

//@ assert JML.lbl(\"AL\",5.0) != 0.0; }    "

//@ assert JML.lbl(\"AL\",\"Z\") != null;     "

//@ assert JML.lbl(\"AL\",\"XYZ\").equals(\"XYZ\");     "

//@ assert JML.lbl(\"AL\",args.length == 0);     "

//@ assert JML.lbl(\"AL\",args.length) == 0;     "

//@ assert JML.lbl(\"AL\",(long)args.length) == 0;     "

//@ assert JML.lbl(\"AL\",(short)args.length) == 0;     "

//@ assert JML.lbl(\"AL\",(byte)args.length) == 0;     "

//@ assert JML.lbl(\"AL\",'Z') == 'Z';     "

//@ ensures JML.lbl(\"INPUT\",i) == \\result;    "

//@ assert JML.lbl(\"AL\",5.0) != 0.0; }    "

//@ assert JML.lbl(\"AL\",\"Z\") != null;     "

//@ assert JML.lbl(\"AL\",\"XYZ\").equals(\"XYZ\");     "

//@ assert JML.lbl(\"AL\",args.length == 0);     "

//@ assert JML.lbl(\"AL\",args.length) == 0;     "

//@ assert JML.lbl(\"AL\",(long)args.length) == 0;     "

//@ assert JML.lbl(\"AL\",(short)args.length) == 0;     "

//@ assert JML.lbl(\"AL\",(byte)args.length) == 0;     "

//@ assert JML.lbl(\"AL\",'Z') == 'Z';     "

//@ ensures JML.lbl(\"INPUT\",i) == \\result;    "

//@ assert JML.lbl(\"AL\",5.0) != 0.0; }    "

//@ ensures \\result > 0;     " +

//@ assert i == 2;     " +

//@ assert i == 2;     " +

//@ assert aa[1].length == 3;     " +

//@ assert (new int[]{1,2,3}).length == 3;     " +

//@ assert (new int[]{1,2,3})[1] == 2;     " +

//@ assert aaa.length == 1;     " +

//@ assert aaa[0].length == 2;     " +

//@ assert aaa[0][0] == null;     " +

//@ assert x.length == 3;     " +

//@ assert x[0] == 0;     " +

//@ assert i == 2;     " +

//@ assert i == 2;     " +

//@ assert aa[1].length == 3;     " +

//@ assert aaa.length == 1;     " +

//@ assert aaa[0].length == 2;     " +

//@ assert aaa[0][0] == null;     " +

//@ assert i == 11;     " +

//@ assert i == 12;     " +

//@ assert (new TestJava() { public pure int m(int i) { return i + 2; } }).m(15) == 17;    " +

/*@ pure */
//@requires i > 0; ensures k == i;    " +

/*@ pure */
//@ assert (new TestJava(2)).k == 2;    " +

//@ assert (new TestJava(0)).k == 0;    " +

//@ assert i == 1;     " +

//@ assert i == 9;      }      

/*@ nullable*/
//@ assert i == 1;     " +

//@ assert c == a + 6;     " +

//@ assert a - c == 6;     " +

//@ assert b == c / 5;     " +

//@ assert b == c * 2;     " +

//@ assert a % b == a && c == 1;     " +

//@ assert  f && a <= b;     " +

//@ assert  f && a < b;     " +

//@ assert  !f && a >= b;     " +

//@ assert  !f && a > b;     " +

//@ assert (c > 4? a + 3 : b + 3) == 9;     " +   // ERROR

//@ assert b+1 == a;     " +

//@ assert b-1 == a;     " +

//@ assert b == a && c+1 == b;     " +

//@ assert b == a && c == b;     " +

//@ assert b == -5;     " +

//@ assert  !d;     " +

//@ assert ((((c) == 50)));     " +

//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 2;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == k;           " +

//@ assert i == k;      break;     " +

//@ assert i == k;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 2;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 2;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 2;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 2;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 2;      break;     " +

//@ assert i == 0;      break;     " +

/*@ nullable_by_default*/
//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 2;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 'a';      break;     " +

//@ assert i == 'a';      break;     " +

//@ assert i == 'c';      break;     " +

//@ assert i == 'a';      break;     " +

//@ assert i == 'a';      break;     " +

//@ assert i == 'a';      break;     " +

//@ assert i == 'c';      break;     " +

//@ assert i == 'a';      break;     " +



//@ assert o instanceof Integer;     " +

//@ assert o instanceof Integer;     " +


//@ assert (Integer)o != null;     " +

//@ assert (Integer)o != null;     " +


//@ assert o instanceof Integer && (Integer)o != null;     " +

//@ assert o instanceof Integer && (Integer)o != null;     " +

/*@nullable*/
//@ assert (\\lbl STRING \"def\") != null;     " +

//@ assert (\\lbl SHORT (short)(i)) != 0;     " +

//@ assert (\\lbl LONG (long)(i)) != 0;     " +

//@ assert (\\lbl BYTE (byte)(i)) != 0;     " +

//@ assert (\\lbl INT (int)(i)) != 0;     " +

//@ assert (\\lbl FLOAT (float)(i)) != 0;     " +

//@ assert (\\lbl DOUBLE (double)(i)) != 0;     " +

//@ assert (\\lbl CHAR (char)(i+60) ) != 0;     " +

//@ assert (\\lbl BOOLEAN (i == 0)) ;     " +

//@ assert (\\lbl OBJECT o) == null;     " +

//@ assert (\\lbl NULL null) == null;     " +

//@ assert (\\lbl STRING \"abc\") != null;     " +

//@ assert (\\lblpos POST (i!=0));     " +

//@ assert !(\\lblpos POSF (i==0));     " +

//@ assert (\\lblneg NEGT (i!=0));     " +

//@ assert !(\\lblneg NEGF (i==0));     " +

//@ assert !(\\lblpos POST (i!=0));     " +

//@ assert (\\lblneg NEGF (i==0));     " +

/*@nullable*/
//@ assert (\\lbl OBJECT null) == null;     " +

//@ assert (\\lbl INT 4) != 0;     " +

//@ assert (\\lbl SHORT (short)(1)) != 0;     " +

//@ assert (\\lbl LONG 2L) != 0;     " +

//@ assert (\\lbl BYTE (byte)(3)) != 0;     " +

//@ assert (\\lbl FLOAT 5.0f) != 0;     " +

//@ assert (\\lbl DOUBLE 6.0) != 0;     " +

//@ assert (\\lbl CHAR 'a') != 0;     " +

//@ assert (\\lbl BOOLEAN true) ;     " +

//@ assert (\\lbl STRING \"abc\") != null;     " +

/*@ assignable \\everything; */
/*@ assignable \\everything; ensures (\\lbl ENS k == 1); */
/*@ assignable \\everything; ensures (\\lbl ENS k == 1); */
/*@ assignable \\everything; ensures (\\lbl ENS k == 1); */
/*@ assignable \\everything; */
/*@ assignable \\everything; ensures (\\lblneg ENS (\\lbl RES k) == 1); */
//@ ghost boolean k; set k = m(); assert k;     " +

//@                  set k = m(); assert k;     " +

//@ ghost static int i = 0;     " +

//@ ghost static int j = 0;     " +

//@ model static boolean m() { j = 1; i+= 1; int k = 2; return i == 1; } " +

//@ assert a[0] == 0;     " +

//@ assert b != null && b[0] == 0;     " +

//@ assert b[0] == 0;     " +

/*@nullable*/
/*@nullable*/
//@ debug System.out.println(p(new G()));     " +

//@ model static public class G {}     " +

//@ model static int p(G i) { return 5; }     " +

/*@nullable*/
//@ ensures i == 0;      "

//@ nowarn Postcondition;     "

//@ nowarn;     "

//@ nowarn InvariantExit;     "

//@ nowarn InvariantExit,Postcondition;     "

//@ public invariant i == 0;      "

//@ nowarn InvariantExit;      "

//@ public invariant i == 0;      "

//@ nowarn ;      "

//@ public invariant i == 0;      "

//@ nowarn Precondition ;      "

//@ invariant i == 0;      "

//@ nowarn Precondition, InvariantExit ;      "

//@ nowarn InvariantExit;     "

/*@ requires i == j; ensures \\result; */
/*@ assignable i; */
/*@ requires i == j; ensures \\result; */
/*@ assignable i; */
/*@ requires i == j; ensures \\result; */
//@ ensures i == k;      "

//@ ensures i == 1;      "

//@ ensures (\\let int k = 1; \\result == k + i) ;      "

//@ ensures (\\let int k = 1; \\result == k - i) ;      "

//@ ensures (\\let int k = 1, int j = k; \\result == j + i) ;      "

//@ ensures (\\let int k = 1, int j = k; \\result == j - i) ;      "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i+1;    }    "

/*@ nullable_by_default*/
//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i+1;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i+1;    }    "

/*@ nullable_by_default*/
//@ assert k == 11;    }    "

//@ assert  !k;    }    "

/*@ nullable_by_default*/
//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

/*@ nullable_by_default*/
//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == false;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == false;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == 6;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == 6;    } catch (Exception e) {}    "

//@ assert k == -i;    } catch (Exception e) {}    "

//@ assert k == -6;    } catch (Exception e) {}    "

//@ assert k == 6;    } catch (Exception e) {}    "

//@ assert ii == 6;    } catch (Exception e) {}    "

//@ assert i == 6;    } catch (Exception e) {}    "

//@ assert i == 5;    } catch (Exception e) {}    "

//@ assert i == 6;    } catch (Exception e) {}    "

//@ assert i == 5;    } catch (Exception e) {}    "

/*@ nullable_by_default*/
//@ assert j == 6;     }    "

//@ assert m == 6;     }    "

/*@ nullable_by_default*/
/*@ nullable_by_default*/
/*@ nullable_by_default*/
/*@ nullable_by_default*/
/*@ nullable_by_default*/
//@ ensures \\result > 0;     " +

//@ assert i == 2;     " +

//@ assert i == 2;     " +

//@ assert aa[1].length == 3;     " +

//@ assert (new int[]{1,2,3}).length == 3;     " +

//@ assert (new int[]{1,2,3})[1] == 2;     " +

//@ assert aaa.length == 1;     " +

//@ assert aaa[0].length == 2;     " +

//@ assert aaa[0][0] == null;     " +

//@ assert x.length == 3;     " +

//@ assert x[0] == 0;     " +

//@ assert i == 2;     " +

//@ assert i == 2;     " +

//@ assert aa[1].length == 3;     " +

//@ assert aaa.length == 1;     " +

//@ assert aaa[0].length == 2;     " +

//@ assert aaa[0][0] == null;     " +

//@ assert i == 11;     " +

//@ assert i == 12;     " +

//@ assert (new TestJava() { public pure int m(int i) { return i + 2; } }).m(15) == 17;    " +

/*@ pure */
//@requires i > 0; ensures k == i;    " +

/*@ pure */
//@ assert (new TestJava(2)).k == 2;    " +

//@ assert (new TestJava(0)).k == 0;    " +

//@ assert i == 1;     " +

//@ assert i == 9;      }      

/*@ nullable*/
//@ assert i == 1;     " +

//@ assert c == a + 6;     " +

//@ assert a - c == 6;     " +

//@ assert b == c / 5;     " +

//@ assert b == c * 2;     " +

//@ assert a % b == a && c == 1;     " +

//@ assert  f && a <= b;     " +

//@ assert  f && a < b;     " +

//@ assert  !f && a >= b;     " +

//@ assert  !f && a > b;     " +

//@ assert (c > 4? a + 3 : b + 3) == 9;     " +   // ERROR

//@ assert b+1 == a;     " +

//@ assert b-1 == a;     " +

//@ assert b == a && c+1 == b;     " +

//@ assert b == a && c == b;     " +

//@ assert b == -5;     " +

//@ assert  !d;     " +

//@ assert ((((c) == 50)));     " +

//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 2;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == k;           " +

//@ assert i == k;      break;     " +

//@ assert i == k;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 2;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 2;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 2;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 2;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 2;      break;     " +

//@ assert i == 0;      break;     " +

/*@ nullable_by_default*/
//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 2;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 'a';      break;     " +

//@ assert i == 'a';      break;     " +

//@ assert i == 'c';      break;     " +

//@ assert i == 'a';      break;     " +

//@ assert i == 'a';      break;     " +

//@ assert i == 'a';      break;     " +

//@ assert i == 'c';      break;     " +

//@ assert i == 'a';      break;     " +



//@ assert o instanceof Integer;     " +

//@ assert o instanceof Integer;     " +


//@ assert (Integer)o != null;     " +

//@ assert (Integer)o != null;     " +


//@ assert o instanceof Integer && (Integer)o != null;     " +

//@ assert o instanceof Integer && (Integer)o != null;     " +

/*@nullable*/
//@ assert (\\lbl STRING \"def\") != null;     " +

//@ assert (\\lbl SHORT (short)(i)) != 0;     " +

//@ assert (\\lbl LONG (long)(i)) != 0;     " +

//@ assert (\\lbl BYTE (byte)(i)) != 0;     " +

//@ assert (\\lbl INT (int)(i)) != 0;     " +

//@ assert (\\lbl FLOAT (float)(i)) != 0;     " +

//@ assert (\\lbl DOUBLE (double)(i)) != 0;     " +

//@ assert (\\lbl CHAR (char)(i+60) ) != 0;     " +

//@ assert (\\lbl BOOLEAN (i == 0)) ;     " +

//@ assert (\\lbl OBJECT o) == null;     " +

//@ assert (\\lbl NULL null) == null;     " +

//@ assert (\\lbl STRING \"abc\") != null;     " +

//@ assert (\\lblpos POST (i!=0));     " +

//@ assert !(\\lblpos POSF (i==0));     " +

//@ assert (\\lblneg NEGT (i!=0));     " +

//@ assert !(\\lblneg NEGF (i==0));     " +

//@ assert !(\\lblpos POST (i!=0));     " +

//@ assert (\\lblneg NEGF (i==0));     " +

/*@nullable*/
//@ assert (\\lbl OBJECT null) == null;     " +

//@ assert (\\lbl INT 4) != 0;     " +

//@ assert (\\lbl SHORT (short)(1)) != 0;     " +

//@ assert (\\lbl LONG 2L) != 0;     " +

//@ assert (\\lbl BYTE (byte)(3)) != 0;     " +

//@ assert (\\lbl FLOAT 5.0f) != 0;     " +

//@ assert (\\lbl DOUBLE 6.0) != 0;     " +

//@ assert (\\lbl CHAR 'a') != 0;     " +

//@ assert (\\lbl BOOLEAN true) ;     " +

//@ assert (\\lbl STRING \"abc\") != null;     " +

/*@ assignable \\everything; */
/*@ assignable \\everything; ensures (\\lbl ENS k == 1); */
/*@ assignable \\everything; ensures (\\lbl ENS k == 1); */
/*@ assignable \\everything; ensures (\\lbl ENS k == 1); */
/*@ assignable \\everything; */
/*@ assignable \\everything; ensures (\\lblneg ENS (\\lbl RES k) == 1); */
//@ ghost boolean k; set k = m(); assert k;     " +

//@                  set k = m(); assert k;     " +

//@ ghost static int i = 0;     " +

//@ ghost static int j = 0;     " +

//@ model static boolean m() { j = 1; i+= 1; int k = 2; return i == 1; } " +

//@ assert a[0] == 0;     " +

//@ assert b != null && b[0] == 0;     " +

//@ assert b[0] == 0;     " +

/*@nullable*/
/*@nullable*/
//@ debug System.out.println(p(new G()));     " +

//@ model static public class G {}     " +

//@ model static int p(G i) { return 5; }     " +

/*@nullable*/
//@ ensures i == 0;      "

//@ nowarn Postcondition;     "

//@ nowarn;     "

//@ nowarn InvariantExit;     "

//@ nowarn InvariantExit,Postcondition;     "

//@ public invariant i == 0;      "

//@ nowarn InvariantExit;      "

//@ public invariant i == 0;      "

//@ nowarn ;      "

//@ public invariant i == 0;      "

//@ nowarn Precondition ;      "

//@ invariant i == 0;      "

//@ nowarn Precondition, InvariantExit ;      "

//@ nowarn InvariantExit;     "

/*@ requires i == j; ensures \\result; */
/*@ assignable i; */
/*@ requires i == j; ensures \\result; */
/*@ assignable i; */
/*@ requires i == j; ensures \\result; */
//@ ensures i == k;      "

//@ ensures i == 1;      "

//@ ensures (\\let int k = 1; \\result == k + i) ;      "

//@ ensures (\\let int k = 1; \\result == k - i) ;      "

//@ ensures (\\let int k = 1, int j = k; \\result == j + i) ;      "

//@ ensures (\\let int k = 1, int j = k; \\result == j - i) ;      "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i+1;    }    "

/*@ nullable_by_default*/
//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i+1;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i+1;    }    "

/*@ nullable_by_default*/
//@ assert k == 11;    }    "

//@ assert  !k;    }    "

/*@ nullable_by_default*/
//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

/*@ nullable_by_default*/
//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == false;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == false;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == 6;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == 6;    } catch (Exception e) {}    "

//@ assert k == -i;    } catch (Exception e) {}    "

//@ assert k == -6;    } catch (Exception e) {}    "

//@ assert k == 6;    } catch (Exception e) {}    "

//@ assert ii == 6;    } catch (Exception e) {}    "

//@ assert i == 6;    } catch (Exception e) {}    "

//@ assert i == 5;    } catch (Exception e) {}    "

//@ assert i == 6;    } catch (Exception e) {}    "

//@ assert i == 5;    } catch (Exception e) {}    "

/*@ nullable_by_default*/
//@ assert j == 6;     }    "

//@ assert m == 6;     }    "

/*@ nullable_by_default*/
/*@ nullable_by_default*/
/*@ nullable_by_default*/
/*@ nullable_by_default*/
/*@ nullable_by_default*/
//@ ensures \\result > 0;     " +

//@ assert i == 2;     " +

//@ assert i == 2;     " +

//@ assert aa[1].length == 3;     " +

//@ assert (new int[]{1,2,3}).length == 3;     " +

//@ assert (new int[]{1,2,3})[1] == 2;     " +

//@ assert aaa.length == 1;     " +

//@ assert aaa[0].length == 2;     " +

//@ assert aaa[0][0] == null;     " +

//@ assert x.length == 3;     " +

//@ assert x[0] == 0;     " +

//@ assert i == 2;     " +

//@ assert i == 2;     " +

//@ assert aa[1].length == 3;     " +

//@ assert aaa.length == 1;     " +

//@ assert aaa[0].length == 2;     " +

//@ assert aaa[0][0] == null;     " +

//@ assert i == 11;     " +

//@ assert i == 12;     " +

//@ assert (new TestJava() { public pure int m(int i) { return i + 2; } }).m(15) == 17;    " +

/*@ pure */
//@requires i > 0; ensures k == i;    " +

/*@ pure */
//@ assert (new TestJava(2)).k == 2;    " +

//@ assert (new TestJava(0)).k == 0;    " +

//@ assert i == 1;     " +

//@ assert i == 9;      }      

/*@ nullable*/
//@ assert i == 1;     " +

//@ assert c == a + 6;     " +

//@ assert a - c == 6;     " +

//@ assert b == c / 5;     " +

//@ assert b == c * 2;     " +

//@ assert a % b == a && c == 1;     " +

//@ assert  f && a <= b;     " +

//@ assert  f && a < b;     " +

//@ assert  !f && a >= b;     " +

//@ assert  !f && a > b;     " +

//@ assert (c > 4? a + 3 : b + 3) == 9;     " +   // ERROR

//@ assert b+1 == a;     " +

//@ assert b-1 == a;     " +

//@ assert b == a && c+1 == b;     " +

//@ assert b == a && c == b;     " +

//@ assert b == -5;     " +

//@ assert  !d;     " +

//@ assert ((((c) == 50)));     " +

//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 2;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == k;           " +

//@ assert i == k;      break;     " +

//@ assert i == k;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 2;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 2;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 2;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 2;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 2;      break;     " +

//@ assert i == 0;      break;     " +

/*@ nullable_by_default*/
//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 2;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 'a';      break;     " +

//@ assert i == 'a';      break;     " +

//@ assert i == 'c';      break;     " +

//@ assert i == 'a';      break;     " +

//@ assert i == 'a';      break;     " +

//@ assert i == 'a';      break;     " +

//@ assert i == 'c';      break;     " +

//@ assert i == 'a';      break;     " +



//@ assert o instanceof Integer;     " +

//@ assert o instanceof Integer;     " +


//@ assert (Integer)o != null;     " +

//@ assert (Integer)o != null;     " +


//@ assert o instanceof Integer && (Integer)o != null;     " +

//@ assert o instanceof Integer && (Integer)o != null;     " +

/*@nullable*/
//@ assert (\\lbl STRING \"def\") != null;     " +

//@ assert (\\lbl SHORT (short)(i)) != 0;     " +

//@ assert (\\lbl LONG (long)(i)) != 0;     " +

//@ assert (\\lbl BYTE (byte)(i)) != 0;     " +

//@ assert (\\lbl INT (int)(i)) != 0;     " +

//@ assert (\\lbl FLOAT (float)(i)) != 0;     " +

//@ assert (\\lbl DOUBLE (double)(i)) != 0;     " +

//@ assert (\\lbl CHAR (char)(i+60) ) != 0;     " +

//@ assert (\\lbl BOOLEAN (i == 0)) ;     " +

//@ assert (\\lbl OBJECT o) == null;     " +

//@ assert (\\lbl NULL null) == null;     " +

//@ assert (\\lbl STRING \"abc\") != null;     " +

//@ assert (\\lblpos POST (i!=0));     " +

//@ assert !(\\lblpos POSF (i==0));     " +

//@ assert (\\lblneg NEGT (i!=0));     " +

//@ assert !(\\lblneg NEGF (i==0));     " +

//@ assert !(\\lblpos POST (i!=0));     " +

//@ assert (\\lblneg NEGF (i==0));     " +

/*@nullable*/
//@ assert (\\lbl OBJECT null) == null;     " +

//@ assert (\\lbl INT 4) != 0;     " +

//@ assert (\\lbl SHORT (short)(1)) != 0;     " +

//@ assert (\\lbl LONG 2L) != 0;     " +

//@ assert (\\lbl BYTE (byte)(3)) != 0;     " +

//@ assert (\\lbl FLOAT 5.0f) != 0;     " +

//@ assert (\\lbl DOUBLE 6.0) != 0;     " +

//@ assert (\\lbl CHAR 'a') != 0;     " +

//@ assert (\\lbl BOOLEAN true) ;     " +

//@ assert (\\lbl STRING \"abc\") != null;     " +

/*@ assignable \\everything; */
/*@ assignable \\everything; ensures (\\lbl ENS k == 1); */
/*@ assignable \\everything; ensures (\\lbl ENS k == 1); */
/*@ assignable \\everything; ensures (\\lbl ENS k == 1); */
/*@ assignable \\everything; */
/*@ assignable \\everything; ensures (\\lblneg ENS (\\lbl RES k) == 1); */
//@ ghost boolean k; set k = m(); assert k;     " +

//@                  set k = m(); assert k;     " +

//@ ghost static int i = 0;     " +

//@ ghost static int j = 0;     " +

//@ model static boolean m() { j = 1; i+= 1; int k = 2; return i == 1; } " +

//@ assert a[0] == 0;     " +

//@ assert b != null && b[0] == 0;     " +

//@ assert b[0] == 0;     " +

/*@nullable*/
/*@nullable*/
//@ debug System.out.println(p(new G()));     " +

//@ model static public class G {}     " +

//@ model static int p(G i) { return 5; }     " +

/*@nullable*/
//@ ensures i == 0;      "

//@ nowarn Postcondition;     "

//@ nowarn;     "

//@ nowarn InvariantExit;     "

//@ nowarn InvariantExit,Postcondition;     "

//@ public invariant i == 0;      "

//@ nowarn InvariantExit;      "

//@ public invariant i == 0;      "

//@ nowarn ;      "

//@ public invariant i == 0;      "

//@ nowarn Precondition ;      "

//@ invariant i == 0;      "

//@ nowarn Precondition, InvariantExit ;      "

//@ nowarn InvariantExit;     "

/*@ requires i == j; ensures \\result; */
/*@ assignable i; */
/*@ requires i == j; ensures \\result; */
/*@ assignable i; */
/*@ requires i == j; ensures \\result; */
//@ ensures i == k;      "

//@ ensures i == 1;      "

//@ ensures (\\let int k = 1; \\result == k + i) ;      "

//@ ensures (\\let int k = 1; \\result == k - i) ;      "

//@ ensures (\\let int k = 1, int j = k; \\result == j + i) ;      "

//@ ensures (\\let int k = 1, int j = k; \\result == j - i) ;      "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i+1;    }    "

/*@ nullable_by_default*/
//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i+1;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i+1;    }    "

/*@ nullable_by_default*/
//@ assert k == 11;    }    "

//@ assert  !k;    }    "

/*@ nullable_by_default*/
//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

/*@ nullable_by_default*/
//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == false;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == false;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == 6;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == 6;    } catch (Exception e) {}    "

//@ assert k == -i;    } catch (Exception e) {}    "

//@ assert k == -6;    } catch (Exception e) {}    "

//@ assert k == 6;    } catch (Exception e) {}    "

//@ assert ii == 6;    } catch (Exception e) {}    "

//@ assert i == 6;    } catch (Exception e) {}    "

//@ assert i == 5;    } catch (Exception e) {}    "

//@ assert i == 6;    } catch (Exception e) {}    "

//@ assert i == 5;    } catch (Exception e) {}    "

/*@ nullable_by_default*/
//@ assert j == 6;     }    "

//@ assert m == 6;     }    "

/*@ nullable_by_default*/
/*@ nullable_by_default*/
/*@ nullable_by_default*/
/*@ nullable_by_default*/
/*@ nullable_by_default*/
//@ ensures \\result > 0;     " +

//@ assert i == 2;     " +

//@ assert i == 2;     " +

//@ assert aa[1].length == 3;     " +

//@ assert (new int[]{1,2,3}).length == 3;     " +

//@ assert (new int[]{1,2,3})[1] == 2;     " +

//@ assert aaa.length == 1;     " +

//@ assert aaa[0].length == 2;     " +

//@ assert aaa[0][0] == null;     " +

//@ assert x.length == 3;     " +

//@ assert x[0] == 0;     " +

//@ assert i == 2;     " +

//@ assert i == 2;     " +

//@ assert aa[1].length == 3;     " +

//@ assert aaa.length == 1;     " +

//@ assert aaa[0].length == 2;     " +

//@ assert aaa[0][0] == null;     " +

//@ assert i == 11;     " +

//@ assert i == 12;     " +

//@ assert (new TestJava() { public pure int m(int i) { return i + 2; } }).m(15) == 17;    " +

/*@ pure */
//@requires i > 0; ensures k == i;    " +

/*@ pure */
//@ assert (new TestJava(2)).k == 2;    " +

//@ assert (new TestJava(0)).k == 0;    " +

//@ assert i == 1;     " +

//@ assert i == 9;      }      

/*@ nullable*/
//@ assert i == 1;     " +

//@ assert c == a + 6;     " +

//@ assert a - c == 6;     " +

//@ assert b == c / 5;     " +

//@ assert b == c * 2;     " +

//@ assert a % b == a && c == 1;     " +

//@ assert  f && a <= b;     " +

//@ assert  f && a < b;     " +

//@ assert  !f && a >= b;     " +

//@ assert  !f && a > b;     " +

//@ assert (c > 4? a + 3 : b + 3) == 9;     " +   // ERROR

//@ assert b+1 == a;     " +

//@ assert b-1 == a;     " +

//@ assert b == a && c+1 == b;     " +

//@ assert b == a && c == b;     " +

//@ assert b == -5;     " +

//@ assert  !d;     " +

//@ assert ((((c) == 50)));     " +

//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 2;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == k;           " +

//@ assert i == k;      break;     " +

//@ assert i == k;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 2;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 2;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 2;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 2;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 2;      break;     " +

//@ assert i == 0;      break;     " +

/*@ nullable_by_default*/
//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 2;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 'a';      break;     " +

//@ assert i == 'a';      break;     " +

//@ assert i == 'c';      break;     " +

//@ assert i == 'a';      break;     " +

//@ assert i == 'a';      break;     " +

//@ assert i == 'a';      break;     " +

//@ assert i == 'c';      break;     " +

//@ assert i == 'a';      break;     " +



//@ assert o instanceof Integer;     " +

//@ assert o instanceof Integer;     " +


//@ assert (Integer)o != null;     " +

//@ assert (Integer)o != null;     " +


//@ assert o instanceof Integer && (Integer)o != null;     " +

//@ assert o instanceof Integer && (Integer)o != null;     " +

/*@nullable*/
//@ assert (\\lbl STRING \"def\") != null;     " +

//@ assert (\\lbl SHORT (short)(i)) != 0;     " +

//@ assert (\\lbl LONG (long)(i)) != 0;     " +

//@ assert (\\lbl BYTE (byte)(i)) != 0;     " +

//@ assert (\\lbl INT (int)(i)) != 0;     " +

//@ assert (\\lbl FLOAT (float)(i)) != 0;     " +

//@ assert (\\lbl DOUBLE (double)(i)) != 0;     " +

//@ assert (\\lbl CHAR (char)(i+60) ) != 0;     " +

//@ assert (\\lbl BOOLEAN (i == 0)) ;     " +

//@ assert (\\lbl OBJECT o) == null;     " +

//@ assert (\\lbl NULL null) == null;     " +

//@ assert (\\lbl STRING \"abc\") != null;     " +

//@ assert (\\lblpos POST (i!=0));     " +

//@ assert !(\\lblpos POSF (i==0));     " +

//@ assert (\\lblneg NEGT (i!=0));     " +

//@ assert !(\\lblneg NEGF (i==0));     " +

//@ assert !(\\lblpos POST (i!=0));     " +

//@ assert (\\lblneg NEGF (i==0));     " +

/*@nullable*/
//@ assert (\\lbl OBJECT null) == null;     " +

//@ assert (\\lbl INT 4) != 0;     " +

//@ assert (\\lbl SHORT (short)(1)) != 0;     " +

//@ assert (\\lbl LONG 2L) != 0;     " +

//@ assert (\\lbl BYTE (byte)(3)) != 0;     " +

//@ assert (\\lbl FLOAT 5.0f) != 0;     " +

//@ assert (\\lbl DOUBLE 6.0) != 0;     " +

//@ assert (\\lbl CHAR 'a') != 0;     " +

//@ assert (\\lbl BOOLEAN true) ;     " +

//@ assert (\\lbl STRING \"abc\") != null;     " +

/*@ assignable \\everything; */
/*@ assignable \\everything; ensures (\\lbl ENS k == 1); */
/*@ assignable \\everything; ensures (\\lbl ENS k == 1); */
/*@ assignable \\everything; ensures (\\lbl ENS k == 1); */
/*@ assignable \\everything; */
/*@ assignable \\everything; ensures (\\lblneg ENS (\\lbl RES k) == 1); */
//@ ghost boolean k; set k = m(); assert k;     " +

//@                  set k = m(); assert k;     " +

//@ ghost static int i = 0;     " +

//@ ghost static int j = 0;     " +

//@ model static boolean m() { j = 1; i+= 1; int k = 2; return i == 1; } " +

//@ assert a[0] == 0;     " +

//@ assert b != null && b[0] == 0;     " +

//@ assert b[0] == 0;     " +

/*@nullable*/
/*@nullable*/
//@ debug System.out.println(p(new G()));     " +

//@ model static public class G {}     " +

//@ model static int p(G i) { return 5; }     " +

/*@nullable*/
//@ ensures i == 0;      "

//@ nowarn Postcondition;     "

//@ nowarn;     "

//@ nowarn InvariantExit;     "

//@ nowarn InvariantExit,Postcondition;     "

//@ public invariant i == 0;      "

//@ nowarn InvariantExit;      "

//@ public invariant i == 0;      "

//@ nowarn ;      "

//@ public invariant i == 0;      "

//@ nowarn Precondition ;      "

//@ invariant i == 0;      "

//@ nowarn Precondition, InvariantExit ;      "

//@ nowarn InvariantExit;     "

/*@ requires i == j; ensures \\result; */
/*@ assignable i; */
/*@ requires i == j; ensures \\result; */
/*@ assignable i; */
/*@ requires i == j; ensures \\result; */
//@ ensures i == k;      "

//@ ensures i == 1;      "

//@ ensures (\\let int k = 1; \\result == k + i) ;      "

//@ ensures (\\let int k = 1; \\result == k - i) ;      "

//@ ensures (\\let int k = 1, int j = k; \\result == j + i) ;      "

//@ ensures (\\let int k = 1, int j = k; \\result == j - i) ;      "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i+1;    }    "

/*@ nullable_by_default*/
//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i+1;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i+1;    }    "

/*@ nullable_by_default*/
//@ assert k == 11;    }    "

//@ assert  !k;    }    "

/*@ nullable_by_default*/
//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

/*@ nullable_by_default*/
//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == false;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == false;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == 6;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == 6;    } catch (Exception e) {}    "

//@ assert k == -i;    } catch (Exception e) {}    "

//@ assert k == -6;    } catch (Exception e) {}    "

//@ assert k == 6;    } catch (Exception e) {}    "

//@ assert ii == 6;    } catch (Exception e) {}    "

//@ assert i == 6;    } catch (Exception e) {}    "

//@ assert i == 5;    } catch (Exception e) {}    "

//@ assert i == 6;    } catch (Exception e) {}    "

//@ assert i == 5;    } catch (Exception e) {}    "

/*@ nullable_by_default*/
//@ assert j == 6;     }    "

//@ assert m == 6;     }    "

/*@ nullable_by_default*/
/*@ nullable_by_default*/
/*@ nullable_by_default*/
/*@ nullable_by_default*/
/*@ nullable_by_default*/
//@ ensures \\result > 0;     " +

//@ assert i == 2;     " +

//@ assert i == 2;     " +

//@ assert aa[1].length == 3;     " +

//@ assert (new int[]{1,2,3}).length == 3;     " +

//@ assert (new int[]{1,2,3})[1] == 2;     " +

//@ assert aaa.length == 1;     " +

//@ assert aaa[0].length == 2;     " +

//@ assert aaa[0][0] == null;     " +

//@ assert x.length == 3;     " +

//@ assert x[0] == 0;     " +

//@ assert i == 2;     " +

//@ assert i == 2;     " +

//@ assert aa[1].length == 3;     " +

//@ assert aaa.length == 1;     " +

//@ assert aaa[0].length == 2;     " +

//@ assert aaa[0][0] == null;     " +

//@ assert i == 11;     " +

//@ assert i == 12;     " +

//@ assert (new TestJava() { public pure int m(int i) { return i + 2; } }).m(15) == 17;    " +

/*@ pure */
//@requires i > 0; ensures k == i;    " +

/*@ pure */
//@ assert (new TestJava(2)).k == 2;    " +

//@ assert (new TestJava(0)).k == 0;    " +

//@ assert i == 1;     " +

//@ assert i == 9;      }      

/*@ nullable*/
//@ assert i == 1;     " +

//@ assert c == a + 6;     " +

//@ assert a - c == 6;     " +

//@ assert b == c / 5;     " +

//@ assert b == c * 2;     " +

//@ assert a % b == a && c == 1;     " +

//@ assert  f && a <= b;     " +

//@ assert  f && a < b;     " +

//@ assert  !f && a >= b;     " +

//@ assert  !f && a > b;     " +

//@ assert (c > 4? a + 3 : b + 3) == 9;     " +   // ERROR

//@ assert b+1 == a;     " +

//@ assert b-1 == a;     " +

//@ assert b == a && c+1 == b;     " +

//@ assert b == a && c == b;     " +

//@ assert b == -5;     " +

//@ assert  !d;     " +

//@ assert ((((c) == 50)));     " +

//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 2;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == k;           " +

//@ assert i == k;      break;     " +

//@ assert i == k;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 2;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 2;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 2;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 2;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 2;      break;     " +

//@ assert i == 0;      break;     " +

/*@ nullable_by_default*/
//@ assert i == 0;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 2;      break;     " +

//@ assert i == 0;      break;     " +

//@ assert i == 'a';      break;     " +

//@ assert i == 'a';      break;     " +

//@ assert i == 'c';      break;     " +

//@ assert i == 'a';      break;     " +

//@ assert i == 'a';      break;     " +

//@ assert i == 'a';      break;     " +

//@ assert i == 'c';      break;     " +

//@ assert i == 'a';      break;     " +



//@ assert o instanceof Integer;     " +

//@ assert o instanceof Integer;     " +


//@ assert (Integer)o != null;     " +

//@ assert (Integer)o != null;     " +


//@ assert o instanceof Integer && (Integer)o != null;     " +

//@ assert o instanceof Integer && (Integer)o != null;     " +

/*@nullable*/
//@ assert (\\lbl STRING \"def\") != null;     " +

//@ assert (\\lbl SHORT (short)(i)) != 0;     " +

//@ assert (\\lbl LONG (long)(i)) != 0;     " +

//@ assert (\\lbl BYTE (byte)(i)) != 0;     " +

//@ assert (\\lbl INT (int)(i)) != 0;     " +

//@ assert (\\lbl FLOAT (float)(i)) != 0;     " +

//@ assert (\\lbl DOUBLE (double)(i)) != 0;     " +

//@ assert (\\lbl CHAR (char)(i+60) ) != 0;     " +

//@ assert (\\lbl BOOLEAN (i == 0)) ;     " +

//@ assert (\\lbl OBJECT o) == null;     " +

//@ assert (\\lbl NULL null) == null;     " +

//@ assert (\\lbl STRING \"abc\") != null;     " +

//@ assert (\\lblpos POST (i!=0));     " +

//@ assert !(\\lblpos POSF (i==0));     " +

//@ assert (\\lblneg NEGT (i!=0));     " +

//@ assert !(\\lblneg NEGF (i==0));     " +

//@ assert !(\\lblpos POST (i!=0));     " +

//@ assert (\\lblneg NEGF (i==0));     " +

/*@nullable*/
//@ assert (\\lbl OBJECT null) == null;     " +

//@ assert (\\lbl INT 4) != 0;     " +

//@ assert (\\lbl SHORT (short)(1)) != 0;     " +

//@ assert (\\lbl LONG 2L) != 0;     " +

//@ assert (\\lbl BYTE (byte)(3)) != 0;     " +

//@ assert (\\lbl FLOAT 5.0f) != 0;     " +

//@ assert (\\lbl DOUBLE 6.0) != 0;     " +

//@ assert (\\lbl CHAR 'a') != 0;     " +

//@ assert (\\lbl BOOLEAN true) ;     " +

//@ assert (\\lbl STRING \"abc\") != null;     " +

/*@ assignable \\everything; */
/*@ assignable \\everything; ensures (\\lbl ENS k == 1); */
/*@ assignable \\everything; ensures (\\lbl ENS k == 1); */
/*@ assignable \\everything; ensures (\\lbl ENS k == 1); */
/*@ assignable \\everything; */
/*@ assignable \\everything; ensures (\\lblneg ENS (\\lbl RES k) == 1); */
//@ ghost boolean k; set k = m(); assert k;     " +

//@                  set k = m(); assert k;     " +

//@ ghost static int i = 0;     " +

//@ ghost static int j = 0;     " +

//@ model static boolean m() { j = 1; i+= 1; int k = 2; return i == 1; } " +

//@ assert a[0] == 0;     " +

//@ assert b != null && b[0] == 0;     " +

//@ assert b[0] == 0;     " +

/*@nullable*/
/*@nullable*/
//@ debug System.out.println(p(new G()));     " +

//@ model static public class G {}     " +

//@ model static int p(G i) { return 5; }     " +

/*@nullable*/
//@ ensures i == 0;      "

//@ nowarn Postcondition;     "

//@ nowarn;     "

//@ nowarn InvariantExit;     "

//@ nowarn InvariantExit,Postcondition;     "

//@ public invariant i == 0;      "

//@ nowarn InvariantExit;      "

//@ public invariant i == 0;      "

//@ nowarn ;      "

//@ public invariant i == 0;      "

//@ nowarn Precondition ;      "

//@ invariant i == 0;      "

//@ nowarn Precondition, InvariantExit ;      "

//@ nowarn InvariantExit;     "

/*@ requires i == j; ensures \\result; */
/*@ assignable i; */
/*@ requires i == j; ensures \\result; */
/*@ assignable i; */
/*@ requires i == j; ensures \\result; */
//@ ensures i == k;      "

//@ ensures i == 1;      "

//@ ensures (\\let int k = 1; \\result == k + i) ;      "

//@ ensures (\\let int k = 1; \\result == k - i) ;      "

//@ ensures (\\let int k = 1, int j = k; \\result == j + i) ;      "

//@ ensures (\\let int k = 1, int j = k; \\result == j - i) ;      "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i+1;    }    "

/*@ nullable_by_default*/
//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i+1;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i;    }    "

//@ assert k == i+1;    }    "

/*@ nullable_by_default*/
//@ assert k == 11;    }    "

//@ assert  !k;    }    "

/*@ nullable_by_default*/
//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

/*@ nullable_by_default*/
//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == false;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == false;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == 6;    } catch (Exception e) {}    "

//@ assert k == i;    } catch (Exception e) {}    "

//@ assert k == 6;    } catch (Exception e) {}    "

//@ assert k == -i;    } catch (Exception e) {}    "

//@ assert k == -6;    } catch (Exception e) {}    "

//@ assert k == 6;    } catch (Exception e) {}    "

//@ assert ii == 6;    } catch (Exception e) {}    "

//@ assert i == 6;    } catch (Exception e) {}    "

//@ assert i == 5;    } catch (Exception e) {}    "

//@ assert i == 6;    } catch (Exception e) {}    "

//@ assert i == 5;    } catch (Exception e) {}    "

/*@ nullable_by_default*/
//@ assert j == 6;     }    "

//@ assert m == 6;     }    "

/*@ nullable_by_default*/
/*@ nullable_by_default*/
/*@ nullable_by_default*/
/*@ nullable_by_default*/
/*@ nullable_by_default*/
//@ assert \    ot_modified(i);    " +

//@ assert \    ot_modified(i);    " + // FAILS

//@ assert \    ot_modified(j,this.f,f);    " +

//@ assert \    ot_modified(this.f);    " + // FAILS

//@ assert \    ot_modified(j,this.f,f);    " +

//@ assert \    ot_modified(f);    " + // FAILS

//@ assert \    ot_modified(a[0]);    " +

//@ assert \    ot_modified(a[0]);    " + // FAILS

//@ requires i == 6;    "

//@ modifies \\everything;    "

//@ assert s == i;    "  // OK

//@ assert b == i;    "  // OK // Line 20

//@ assert c == i;    "  // OK

//@ assert l == i;    "  // OK

//@ assert ii == i;    "  // OK

//@ assert i == (short)i;    "

//@ assert i == (long)i;    "

//@ assert i == (char)i;    "

//@ assert i == (byte)i;    "

//@ assert i == (int)i;    "

//@ requires i == 100000;    "

//@ modifies \\everything;    "

//@ assert s == i;    "  // BAD // Line 37

//@ assert b == i;    "  // BAD

//@ assert c == i;    "  // BAD

//@ assert l == i;    "  // OK

//@ assert ii == i;    "  // OK

//@ assert i == (short)i;    " // BAD // Line

//@ assert i == (long)i;    "

//@ assert i == (char)i;    "

//@ assert i == (byte)i;    "

//@ assert i == (int)i;    "


//@ assert 0 == (short)s;     } catch (NullPointerException e) {}    "


//@ assert 0 == (long)s;    } catch (NullPointerException e) {}    "


//@ assert 0 == (byte)s;    } catch (NullPointerException e) {}    "


//@ assert 0 == (int)s;    } catch (NullPointerException e) {}    "


//@ assert 0 == (char)s;    } catch (NullPointerException e) {}    "


//@ assert 0 == (float)s;    } catch (NullPointerException e) {}    "


//@ assert 0 == (double)s;    } catch (NullPointerException e) {}    "


//@ assert (boolean)s;    } catch (NullPointerException e) {}    "

//@ assert 9 == (Short)s;    "

//@ requires args.length >= 0;     "

//@ ensures args.length == \\result;     "

//@ also assignable TestJava.flag;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 2;    "

//@ assert TestJava.flag == 1;    "

/*@ pure */
//@ also assignable TestJava.flag;    "

//@ ensures TestJava.flag == 1;    "

//@ signals (Exception e) TestJava.flag == 10;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 2;    "

//@ assert (\\lbl FLAG TestJava.flag) == 0 || TestJava.flag == 1|| TestJava.flag == 10;    "

//@ also assignable TestJava.flag;    "

//@ ensures TestJava.flag == 1;    "

//@ signals (Exception e) TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 2;    "

//@ assert TestJava.flag == 1;    "

//@ assert TestJava.flag == 100;    " // ERROR - line 19

//@ also public normal_behavior    "

//@ assignable TestJava.flag;    "

//@ ensures TestJava.flag == 1;    "

//@ also public normal_behavior    "

//@ assignable TestJava.flag;    "

//@ ensures TestJava.flag == 2;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;    "

//@ assert TestJava.flag == 200;    " // ERROR - line 25

/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag;    "

//@ signals_only EE1;    "

//@ signals (Exception e) TestJava.flag == 1;    "

/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag;    "

//@ signals_only EE2;    "

//@ signals (Exception e) TestJava.flag == 2;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 111;    " // not feasible - so not checked in RAC

//@ assert TestJava.flag == 1;    "

//@ assert e instanceof EE3 ;    " // Line 37

//@ assert TestJava.flag == 100;    "

/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag;    "

//@ signals_only EE1;    "

//@ signals (Exception e) TestJava.flag == 1;    "

/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag;    "

//@ signals_only EE2;    "

//@ signals (Exception e) TestJava.flag == 2;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 222;    " // not feasible - so not checked in RAC

//@ assert e instanceof EE3 ;    " // Line 36

//@ assert flag == 2;    "

//@ assert flag == 100;    " // Error

/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag;    "

//@ signals_only EE1;    "

//@ signals (Exception e) TestJava.flag == 1;    "

/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag;    "

//@ signals_only EE2;    "

//@ signals (Exception e) TestJava.flag == 2;    "

//@ requires flag == 0;    " // Line 23

//@ assignable flag;    "

//@ assert TestJava.flag == 0;      "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 222;    "  // Not feasible - so not checked in RAC

//@ assert TestJava.flag == 2;    "  // Line 34 // SHould be OK

//@ assert e instanceof EE1;    "  // Line 35 // Should be OK

//@ also public normal_behavior    "

//@ assignable TestJava.flag;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;    "

//@ also public normal_behavior    "

//@ assignable TestJava.flag;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert normal ==> flag == 1;    "

//@ assert !normal ==> flag == 2;    "

//@ also public normal_behavior    "

//@ assignable TestJava.flag;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;    "  // FIXME - should not be able to skip the catch block

//@ also assignable TestJava.flag;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;    "  // FIXME - should not be able to skip the catch block

//@ also public normal_behavior    "

//@ assignable TestJava.flag;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;     "

//@ also assignable TestJava.flag;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 5;    "

//@ assert \    ot_modified(i);    " +

//@ assert \    ot_modified(i);    " + // FAILS

//@ assert \    ot_modified(j,this.f,f);    " +

//@ assert \    ot_modified(this.f);    " + // FAILS

//@ assert \    ot_modified(j,this.f,f);    " +

//@ assert \    ot_modified(f);    " + // FAILS

//@ assert \    ot_modified(a[0]);    " +

//@ assert \    ot_modified(a[0]);    " + // FAILS

//@ requires i == 6;    "

//@ modifies \\everything;    "

//@ assert s == i;    "  // OK

//@ assert b == i;    "  // OK // Line 20

//@ assert c == i;    "  // OK

//@ assert l == i;    "  // OK

//@ assert ii == i;    "  // OK

//@ assert i == (short)i;    "

//@ assert i == (long)i;    "

//@ assert i == (char)i;    "

//@ assert i == (byte)i;    "

//@ assert i == (int)i;    "

//@ requires i == 100000;    "

//@ modifies \\everything;    "

//@ assert s == i;    "  // BAD // Line 37

//@ assert b == i;    "  // BAD

//@ assert c == i;    "  // BAD

//@ assert l == i;    "  // OK

//@ assert ii == i;    "  // OK

//@ assert i == (short)i;    " // BAD // Line

//@ assert i == (long)i;    "

//@ assert i == (char)i;    "

//@ assert i == (byte)i;    "

//@ assert i == (int)i;    "


//@ assert 0 == (short)s;     } catch (NullPointerException e) {}    "


//@ assert 0 == (long)s;    } catch (NullPointerException e) {}    "


//@ assert 0 == (byte)s;    } catch (NullPointerException e) {}    "


//@ assert 0 == (int)s;    } catch (NullPointerException e) {}    "


//@ assert 0 == (char)s;    } catch (NullPointerException e) {}    "


//@ assert 0 == (float)s;    } catch (NullPointerException e) {}    "


//@ assert 0 == (double)s;    } catch (NullPointerException e) {}    "


//@ assert (boolean)s;    } catch (NullPointerException e) {}    "

//@ assert 9 == (Short)s;    "

//@ requires args.length >= 0;     "

//@ ensures args.length == \\result;     "

//@ also assignable TestJava.flag;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 2;    "

//@ assert TestJava.flag == 1;    "

/*@ pure */
//@ also assignable TestJava.flag;    "

//@ ensures TestJava.flag == 1;    "

//@ signals (Exception e) TestJava.flag == 10;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 2;    "

//@ assert (\\lbl FLAG TestJava.flag) == 0 || TestJava.flag == 1|| TestJava.flag == 10;    "

//@ also assignable TestJava.flag;    "

//@ ensures TestJava.flag == 1;    "

//@ signals (Exception e) TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 2;    "

//@ assert TestJava.flag == 1;    "

//@ assert TestJava.flag == 100;    " // ERROR - line 19

//@ also public normal_behavior    "

//@ assignable TestJava.flag;    "

//@ ensures TestJava.flag == 1;    "

//@ also public normal_behavior    "

//@ assignable TestJava.flag;    "

//@ ensures TestJava.flag == 2;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;    "

//@ assert TestJava.flag == 200;    " // ERROR - line 25

/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag;    "

//@ signals_only EE1;    "

//@ signals (Exception e) TestJava.flag == 1;    "

/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag;    "

//@ signals_only EE2;    "

//@ signals (Exception e) TestJava.flag == 2;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 111;    " // not feasible - so not checked in RAC

//@ assert TestJava.flag == 1;    "

//@ assert e instanceof EE3 ;    " // Line 37

//@ assert TestJava.flag == 100;    "

/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag;    "

//@ signals_only EE1;    "

//@ signals (Exception e) TestJava.flag == 1;    "

/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag;    "

//@ signals_only EE2;    "

//@ signals (Exception e) TestJava.flag == 2;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 222;    " // not feasible - so not checked in RAC

//@ assert e instanceof EE3 ;    " // Line 36

//@ assert flag == 2;    "

//@ assert flag == 100;    " // Error

/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag;    "

//@ signals_only EE1;    "

//@ signals (Exception e) TestJava.flag == 1;    "

/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag;    "

//@ signals_only EE2;    "

//@ signals (Exception e) TestJava.flag == 2;    "

//@ requires flag == 0;    " // Line 23

//@ assignable flag;    "

//@ assert TestJava.flag == 0;      "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 222;    "  // Not feasible - so not checked in RAC

//@ assert TestJava.flag == 2;    "  // Line 34 // SHould be OK

//@ assert e instanceof EE1;    "  // Line 35 // Should be OK

//@ also public normal_behavior    "

//@ assignable TestJava.flag;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;    "

//@ also public normal_behavior    "

//@ assignable TestJava.flag;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert normal ==> flag == 1;    "

//@ assert !normal ==> flag == 2;    "

//@ also public normal_behavior    "

//@ assignable TestJava.flag;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;    "  // FIXME - should not be able to skip the catch block

//@ also assignable TestJava.flag;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;    "  // FIXME - should not be able to skip the catch block

//@ also public normal_behavior    "

//@ assignable TestJava.flag;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;     "

//@ also assignable TestJava.flag;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 5;    "

//@ assert \    ot_modified(i);    " +

//@ assert \    ot_modified(i);    " + // FAILS

//@ assert \    ot_modified(j,this.f,f);    " +

//@ assert \    ot_modified(this.f);    " + // FAILS

//@ assert \    ot_modified(j,this.f,f);    " +

//@ assert \    ot_modified(f);    " + // FAILS

//@ assert \    ot_modified(a[0]);    " +

//@ assert \    ot_modified(a[0]);    " + // FAILS

//@ requires i == 6;    "

//@ modifies \\everything;    "

//@ assert s == i;    "  // OK

//@ assert b == i;    "  // OK // Line 20

//@ assert c == i;    "  // OK

//@ assert l == i;    "  // OK

//@ assert ii == i;    "  // OK

//@ assert i == (short)i;    "

//@ assert i == (long)i;    "

//@ assert i == (char)i;    "

//@ assert i == (byte)i;    "

//@ assert i == (int)i;    "

//@ requires i == 100000;    "

//@ modifies \\everything;    "

//@ assert s == i;    "  // BAD // Line 37

//@ assert b == i;    "  // BAD

//@ assert c == i;    "  // BAD

//@ assert l == i;    "  // OK

//@ assert ii == i;    "  // OK

//@ assert i == (short)i;    " // BAD // Line

//@ assert i == (long)i;    "

//@ assert i == (char)i;    "

//@ assert i == (byte)i;    "

//@ assert i == (int)i;    "


//@ assert 0 == (short)s;     } catch (NullPointerException e) {}    "


//@ assert 0 == (long)s;    } catch (NullPointerException e) {}    "


//@ assert 0 == (byte)s;    } catch (NullPointerException e) {}    "


//@ assert 0 == (int)s;    } catch (NullPointerException e) {}    "


//@ assert 0 == (char)s;    } catch (NullPointerException e) {}    "


//@ assert 0 == (float)s;    } catch (NullPointerException e) {}    "


//@ assert 0 == (double)s;    } catch (NullPointerException e) {}    "


//@ assert (boolean)s;    } catch (NullPointerException e) {}    "

//@ assert 9 == (Short)s;    "

//@ requires args.length >= 0;     "

//@ ensures args.length == \\result;     "

//@ also assignable TestJava.flag;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 2;    "

//@ assert TestJava.flag == 1;    "

/*@ pure */
//@ also assignable TestJava.flag;    "

//@ ensures TestJava.flag == 1;    "

//@ signals (Exception e) TestJava.flag == 10;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 2;    "

//@ assert (\\lbl FLAG TestJava.flag) == 0 || TestJava.flag == 1|| TestJava.flag == 10;    "

//@ also assignable TestJava.flag;    "

//@ ensures TestJava.flag == 1;    "

//@ signals (Exception e) TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 2;    "

//@ assert TestJava.flag == 1;    "

//@ assert TestJava.flag == 100;    " // ERROR - line 19

//@ also public normal_behavior    "

//@ assignable TestJava.flag;    "

//@ ensures TestJava.flag == 1;    "

//@ also public normal_behavior    "

//@ assignable TestJava.flag;    "

//@ ensures TestJava.flag == 2;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;    "

//@ assert TestJava.flag == 200;    " // ERROR - line 25

/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag;    "

//@ signals_only EE1;    "

//@ signals (Exception e) TestJava.flag == 1;    "

/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag;    "

//@ signals_only EE2;    "

//@ signals (Exception e) TestJava.flag == 2;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 111;    " // not feasible - so not checked in RAC

//@ assert TestJava.flag == 1;    "

//@ assert e instanceof EE3 ;    " // Line 37

//@ assert TestJava.flag == 100;    "

/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag;    "

//@ signals_only EE1;    "

//@ signals (Exception e) TestJava.flag == 1;    "

/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag;    "

//@ signals_only EE2;    "

//@ signals (Exception e) TestJava.flag == 2;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 222;    " // not feasible - so not checked in RAC

//@ assert e instanceof EE3 ;    " // Line 36

//@ assert flag == 2;    "

//@ assert flag == 100;    " // Error

/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag;    "

//@ signals_only EE1;    "

//@ signals (Exception e) TestJava.flag == 1;    "

/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag;    "

//@ signals_only EE2;    "

//@ signals (Exception e) TestJava.flag == 2;    "

//@ requires flag == 0;    " // Line 23

//@ assignable flag;    "

//@ assert TestJava.flag == 0;      "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 222;    "  // Not feasible - so not checked in RAC

//@ assert TestJava.flag == 2;    "  // Line 34 // SHould be OK

//@ assert e instanceof EE1;    "  // Line 35 // Should be OK

//@ also public normal_behavior    "

//@ assignable TestJava.flag;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;    "

//@ also public normal_behavior    "

//@ assignable TestJava.flag;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert normal ==> flag == 1;    "

//@ assert !normal ==> flag == 2;    "

//@ also public normal_behavior    "

//@ assignable TestJava.flag;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;    "  // FIXME - should not be able to skip the catch block

//@ also assignable TestJava.flag;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;    "  // FIXME - should not be able to skip the catch block

//@ also public normal_behavior    "

//@ assignable TestJava.flag;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;     "

//@ also assignable TestJava.flag;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 5;    "

//@ assert \    ot_modified(i);    " +

//@ assert \    ot_modified(i);    " + // FAILS

//@ assert \    ot_modified(j,this.f,f);    " +

//@ assert \    ot_modified(this.f);    " + // FAILS

//@ assert \    ot_modified(j,this.f,f);    " +

//@ assert \    ot_modified(f);    " + // FAILS

//@ assert \    ot_modified(a[0]);    " +

//@ assert \    ot_modified(a[0]);    " + // FAILS

//@ requires i == 6;    "

//@ modifies \\everything;    "

//@ assert s == i;    "  // OK

//@ assert b == i;    "  // OK // Line 20

//@ assert c == i;    "  // OK

//@ assert l == i;    "  // OK

//@ assert ii == i;    "  // OK

//@ assert i == (short)i;    "

//@ assert i == (long)i;    "

//@ assert i == (char)i;    "

//@ assert i == (byte)i;    "

//@ assert i == (int)i;    "

//@ requires i == 100000;    "

//@ modifies \\everything;    "

//@ assert s == i;    "  // BAD // Line 37

//@ assert b == i;    "  // BAD

//@ assert c == i;    "  // BAD

//@ assert l == i;    "  // OK

//@ assert ii == i;    "  // OK

//@ assert i == (short)i;    " // BAD // Line

//@ assert i == (long)i;    "

//@ assert i == (char)i;    "

//@ assert i == (byte)i;    "

//@ assert i == (int)i;    "


//@ assert 0 == (short)s;     } catch (NullPointerException e) {}    "


//@ assert 0 == (long)s;    } catch (NullPointerException e) {}    "


//@ assert 0 == (byte)s;    } catch (NullPointerException e) {}    "


//@ assert 0 == (int)s;    } catch (NullPointerException e) {}    "


//@ assert 0 == (char)s;    } catch (NullPointerException e) {}    "


//@ assert 0 == (float)s;    } catch (NullPointerException e) {}    "


//@ assert 0 == (double)s;    } catch (NullPointerException e) {}    "


//@ assert (boolean)s;    } catch (NullPointerException e) {}    "

//@ assert 9 == (Short)s;    "

//@ requires args.length >= 0;     "

//@ ensures args.length == \\result;     "

//@ also assignable TestJava.flag;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 2;    "

//@ assert TestJava.flag == 1;    "

/*@ pure */
//@ also assignable TestJava.flag;    "

//@ ensures TestJava.flag == 1;    "

//@ signals (Exception e) TestJava.flag == 10;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 2;    "

//@ assert (\\lbl FLAG TestJava.flag) == 0 || TestJava.flag == 1|| TestJava.flag == 10;    "

//@ also assignable TestJava.flag;    "

//@ ensures TestJava.flag == 1;    "

//@ signals (Exception e) TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 2;    "

//@ assert TestJava.flag == 1;    "

//@ assert TestJava.flag == 100;    " // ERROR - line 19

//@ also public normal_behavior    "

//@ assignable TestJava.flag;    "

//@ ensures TestJava.flag == 1;    "

//@ also public normal_behavior    "

//@ assignable TestJava.flag;    "

//@ ensures TestJava.flag == 2;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;    "

//@ assert TestJava.flag == 200;    " // ERROR - line 25

/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag;    "

//@ signals_only EE1;    "

//@ signals (Exception e) TestJava.flag == 1;    "

/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag;    "

//@ signals_only EE2;    "

//@ signals (Exception e) TestJava.flag == 2;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 111;    " // not feasible - so not checked in RAC

//@ assert TestJava.flag == 1;    "

//@ assert e instanceof EE3 ;    " // Line 37

//@ assert TestJava.flag == 100;    "

/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag;    "

//@ signals_only EE1;    "

//@ signals (Exception e) TestJava.flag == 1;    "

/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag;    "

//@ signals_only EE2;    "

//@ signals (Exception e) TestJava.flag == 2;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 222;    " // not feasible - so not checked in RAC

//@ assert e instanceof EE3 ;    " // Line 36

//@ assert flag == 2;    "

//@ assert flag == 100;    " // Error

/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag;    "

//@ signals_only EE1;    "

//@ signals (Exception e) TestJava.flag == 1;    "

/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag;    "

//@ signals_only EE2;    "

//@ signals (Exception e) TestJava.flag == 2;    "

//@ requires flag == 0;    " // Line 23

//@ assignable flag;    "

//@ assert TestJava.flag == 0;      "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 222;    "  // Not feasible - so not checked in RAC

//@ assert TestJava.flag == 2;    "  // Line 34 // SHould be OK

//@ assert e instanceof EE1;    "  // Line 35 // Should be OK

//@ also public normal_behavior    "

//@ assignable TestJava.flag;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;    "

//@ also public normal_behavior    "

//@ assignable TestJava.flag;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert normal ==> flag == 1;    "

//@ assert !normal ==> flag == 2;    "

//@ also public normal_behavior    "

//@ assignable TestJava.flag;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;    "  // FIXME - should not be able to skip the catch block

//@ also assignable TestJava.flag;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;    "  // FIXME - should not be able to skip the catch block

//@ also public normal_behavior    "

//@ assignable TestJava.flag;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;     "

//@ also assignable TestJava.flag;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 5;    "

//@ assert \    ot_modified(i);    " +

//@ assert \    ot_modified(i);    " + // FAILS

//@ assert \    ot_modified(j,this.f,f);    " +

//@ assert \    ot_modified(this.f);    " + // FAILS

//@ assert \    ot_modified(j,this.f,f);    " +

//@ assert \    ot_modified(f);    " + // FAILS

//@ assert \    ot_modified(a[0]);    " +

//@ assert \    ot_modified(a[0]);    " + // FAILS

//@ requires i == 6;    "

//@ modifies \\everything;    "

//@ assert s == i;    "  // OK

//@ assert b == i;    "  // OK // Line 20

//@ assert c == i;    "  // OK

//@ assert l == i;    "  // OK

//@ assert ii == i;    "  // OK

//@ assert i == (short)i;    "

//@ assert i == (long)i;    "

//@ assert i == (char)i;    "

//@ assert i == (byte)i;    "

//@ assert i == (int)i;    "

//@ requires i == 100000;    "

//@ modifies \\everything;    "

//@ assert s == i;    "  // BAD // Line 37

//@ assert b == i;    "  // BAD

//@ assert c == i;    "  // BAD

//@ assert l == i;    "  // OK

//@ assert ii == i;    "  // OK

//@ assert i == (short)i;    " // BAD // Line

//@ assert i == (long)i;    "

//@ assert i == (char)i;    "

//@ assert i == (byte)i;    "

//@ assert i == (int)i;    "


//@ assert 0 == (short)s;     } catch (NullPointerException e) {}    "


//@ assert 0 == (long)s;    } catch (NullPointerException e) {}    "


//@ assert 0 == (byte)s;    } catch (NullPointerException e) {}    "


//@ assert 0 == (int)s;    } catch (NullPointerException e) {}    "


//@ assert 0 == (char)s;    } catch (NullPointerException e) {}    "


//@ assert 0 == (float)s;    } catch (NullPointerException e) {}    "


//@ assert 0 == (double)s;    } catch (NullPointerException e) {}    "


//@ assert (boolean)s;    } catch (NullPointerException e) {}    "

//@ assert 9 == (Short)s;    "

//@ requires args.length >= 0;     "

//@ ensures args.length == \\result;     "

//@ also assignable TestJava.flag;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 2;    "

//@ assert TestJava.flag == 1;    "

/*@ pure */
//@ also assignable TestJava.flag;    "

//@ ensures TestJava.flag == 1;    "

//@ signals (Exception e) TestJava.flag == 10;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 2;    "

//@ assert (\\lbl FLAG TestJava.flag) == 0 || TestJava.flag == 1|| TestJava.flag == 10;    "

//@ also assignable TestJava.flag;    "

//@ ensures TestJava.flag == 1;    "

//@ signals (Exception e) TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 2;    "

//@ assert TestJava.flag == 1;    "

//@ assert TestJava.flag == 100;    " // ERROR - line 19

//@ also public normal_behavior    "

//@ assignable TestJava.flag;    "

//@ ensures TestJava.flag == 1;    "

//@ also public normal_behavior    "

//@ assignable TestJava.flag;    "

//@ ensures TestJava.flag == 2;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;    "

//@ assert TestJava.flag == 200;    " // ERROR - line 25

/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag;    "

//@ signals_only EE1;    "

//@ signals (Exception e) TestJava.flag == 1;    "

/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag;    "

//@ signals_only EE2;    "

//@ signals (Exception e) TestJava.flag == 2;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 111;    " // not feasible - so not checked in RAC

//@ assert TestJava.flag == 1;    "

//@ assert e instanceof EE3 ;    " // Line 37

//@ assert TestJava.flag == 100;    "

/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag;    "

//@ signals_only EE1;    "

//@ signals (Exception e) TestJava.flag == 1;    "

/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag;    "

//@ signals_only EE2;    "

//@ signals (Exception e) TestJava.flag == 2;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 222;    " // not feasible - so not checked in RAC

//@ assert e instanceof EE3 ;    " // Line 36

//@ assert flag == 2;    "

//@ assert flag == 100;    " // Error

/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag;    "

//@ signals_only EE1;    "

//@ signals (Exception e) TestJava.flag == 1;    "

/*@ public normal_behavior ensures true; */
//@ also public exceptional_behavior    "

//@ assignable TestJava.flag;    "

//@ signals_only EE2;    "

//@ signals (Exception e) TestJava.flag == 2;    "

//@ requires flag == 0;    " // Line 23

//@ assignable flag;    "

//@ assert TestJava.flag == 0;      "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 222;    "  // Not feasible - so not checked in RAC

//@ assert TestJava.flag == 2;    "  // Line 34 // SHould be OK

//@ assert e instanceof EE1;    "  // Line 35 // Should be OK

//@ also public normal_behavior    "

//@ assignable TestJava.flag;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;    "

//@ also public normal_behavior    "

//@ assignable TestJava.flag;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert normal ==> flag == 1;    "

//@ assert !normal ==> flag == 2;    "

//@ also public normal_behavior    "

//@ assignable TestJava.flag;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;    "  // FIXME - should not be able to skip the catch block

//@ also assignable TestJava.flag;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;    "  // FIXME - should not be able to skip the catch block

//@ also public normal_behavior    "

//@ assignable TestJava.flag;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 2;     "

//@ also assignable TestJava.flag;    "

//@ ensures TestJava.flag == 1;    "

//@ requires flag == 0;    "

//@ assignable flag;    "

//@ assert TestJava.flag == 0;    "

//@ assert TestJava.flag == 3;    "

//@ assert TestJava.flag == 5;    "

//@ ghost int i = 0;      //@ set i = 1;      //@ set System.out.println(i);      System.out.println(\"END\"); }}"

//@ assert false;      System.out.println(\"END\"); }}"

//@ assert false: \"ABC\";      System.out.println(\"END\"); }}"

//@ assert false: (int)args.length;      System.out.println(\"END\"); }}"

//@ assert true: args.length;      System.out.println(\"END\"); }}"

//@ assume false;      System.out.println(\"END\"); }}"

//@ assume false: \"DEF\";      System.out.println(\"END\"); }}"

//@ unreachable;      System.out.println(\"END\"); }}"

/*@ requires i == 0; */
/*@ requires i != 0; */
/*@ requires i > 0; */
/*@ requires i < 0; */
//@ nowarn Precondition;    " +

/*@ requires i != 0; */
//@ nowarn Precondition;    " +

/*@ requires true; */
/*@non_null*/
/*@non_null*/
/*@ requires true; */
/*@non_null*/
/*@non_null*/
/*@nullable*/
/*@ ensures k == i; */
/*@ ensures k == 0; */
/*@ nowarn Postcondition;*/
/*@ ensures k == 0; */
/*@ nowarn Postcondition;*/
/*@ requires true;     also     requires false;     ensures k == 0; */
/*@ requires true;     ensures true;     also     requires false;     ensures k == 0; */
/*@ requires true;     " +
                "     ensures k != i;     " +
                "     also     " +
                "     requires true;     " +
                "     ensures k == 0; */
/*@   requires true;     "
                +"        ensures k != i;     "
                +"      also     "
                +"        requires true;     "
                +"        ensures k == 0; */
/*@ requires true;     "
                +"     signals (java.io.FileNotFoundException e) e == null; */
/*@ requires true;     signals (java.io.FileNotFoundException e) e == null; */
/*@ requires true;     signals_only \    othing; */
/*@ requires true;     signals_only java.io.FileNotFoundException; */
/*@ requires true;     signals_only java.io.FileNotFoundException; */
/*@ requires true;     */
/*@ requires true;     */
/*@ ensures \\result == 4; */
/*@ ensures \\result == 4; */
/*@ ensures (\\lbl ENS \\result == 1); */
/*@ ensures (\\lbl ENS (\\lbl RES \\result) == 1); */
/*@ ensures (\\lbl ENS \\old(k)) == k; */
//@ assert (\\lbl AST \\old(k)) == 0;      k=i; //@ assert (\\lbl AST2 \\old(k)) == 0;     //@ assert (\\lbl AST3 k) == 0;      return i; } " +

//@ ghost int p = (\\lbl AST \\old(k));     "

//@ ghost int kk =  (\\lbl AST2 \\old(k));     "

//@ set kk = (\\lbl AST3 k);      "

//@ set kk = (\\lbl AST4 \\old(k,lab));      "

//@ assert (i==0) <==> (* informal *);      return i; } " +

//@ ghost nullable java.lang.Class t; ghost nullable \\TYPE tt;     "

//@ set tt = (\\lbl A \\elemtype(\\typeof(o)));    "

//@ set tt = (\\lbl B \\elemtype(\\typeof(oo)));    "

//@ set tt = (\\lbl C \\elemtype(\\typeof(o3)));    "

//@ set t = (\\lbl D \\elemtype(java.lang.Class.class));    "

//@ set t = (\\lbl E \\elemtype(java.lang.Boolean[].class));    "

//@ requires JML.informal(\"asd\") && (\\lbl CLS \\erasure(\\typeof(i))) == Object.class;     " +

/*@nullable*/
//@ requires (\\lbl CLS \\typeof(i)) == \\type(Object);     " +

/*@nullable*/
//@ requires (\\lbl CLS \\typeof(i)) == \\type(Object);     " +

//@ assert (\\lbl AST \\typeof(true)) == \\typeof(true);     " +

//@ assert (\\lbl AST2 \\typeof((short)0)) != \\typeof(true);     " +

//@ assert (\\lbl AST3 \\typeof((long)0)) != \\typeof(true);     " +

//@ assert (\\lbl AST4 \\typeof((byte)0)) != \\typeof(true);     " +

//@ assert (\\lbl AST5 \\typeof('c')) != \\typeof(true);     " +

//@ assert (\\lbl AST6 \\typeof(\"c\")) != \\typeof(true);     " +

//@ assert (\\lbl AST7 \\typeof((float)0)) != \\typeof(true);     " +

//@ assert (\\lbl AST8 \\typeof((double)0)) != \\typeof(true);     " +

//@ assert (\\lbl AST9 \\typeof(5/0)) == \\typeof(5/0);     " +

//@ assert (\\lbl AST10 \\typeof(5.0/0.0)) != \\typeof(5/0);     " +

//@ requires (\\lbl CLS \\typeof(i)) == ( \\type(LinkedList<Integer>) );     " +

/*@nullable*/
//@ requires (\\lbl CLS \\typeof(i)) == ( \\type(LinkedList<Integer>) );     " +

/*@nullable*/
//@ requires (\\lbl CLS \\typeof(i)) != ( \\type(LinkedList<Integer>) );     " +

/*@nullable*/
//@ assert \    onnullelements(s2,s2null);     " +

//@ assert \    onnullelements(s2,s2);     " +

//@ assert \    onnullelements(s2null,new Integer[]{5/z});     " +

//@ assert (\\lbl ELEM \    onnullelements(o));     " +

/*@nullable*/
//@ assert (\\lbl ELEM \    onnullelements((\\lbl O o)));     " +

/*@nullable*/
//@ assert (\\lbl STRING \"def\") != null;     " +

//@ assert (\\lbl SHORT (short)(i)) != 0;     " +

//@ assert (\\lbl LONG (long)(i)) != 0;     " +

//@ assert (\\lbl BYTE (byte)(i)) != 0;     " +

//@ assert (\\lbl INT (int)(i)) != 0;     " +

//@ assert (\\lbl FLOAT (float)(i)) != 0;     " +

//@ assert (\\lbl DOUBLE (double)(i)) != 0;     " +

//@ assert (\\lbl CHAR n.charAt(0)) != 0;     " +

//@ assert (\\lbl BOOLEAN (i == 0)) ;     " +

//@ assert (\\lbl OBJECT o) == null;     " +

//@ assert (\\lbl STRING \"abc\") != null;     " +

/*@nullable*/
//@ assert (\\lbl OBJECT null) == null;     " +

//@ assert (\\lbl INT (int)(4)) != 0;     " +

//@ assert (\\lbl SHORT (short)(1)) != 0;     " +

//@ assert (\\lbl LONG (long)(2)) != 0;     " +

//@ assert (\\lbl BYTE (byte)(3)) != 0;     " +

//@ assert (\\lbl FLOAT (float)(5)) != 0;     " +

//@ assert (\\lbl DOUBLE (double)(6)) != 0;     " +

//@ assert (\\lbl CHAR 'a') != 0;     " +

//@ assert (\\lbl BOOLEAN true) ;     " +

//@ assert (\\lbl STRING \"abc\") != null;     " +

//@ ghost \\TYPE c;     " +

//@ set c = \\type(int);     " +

//@ set c = (\\lbl TYP1 c);     " +

//@ set c = \\type(boolean);     " +

//@ set c = (\\lbl TYP2 c);     " +

//@ ghost \\TYPE c;     " +

//@ set c = \\type(java.lang.Object);     " +

//@ set c = (\\lbl TYP1 c);     " +

//@ set c = \\type(Object);     " +

//@ set c = (\\lbl TYP2 c);     " +

//@ set c = \\type(java.lang.String);     " +

//@ set c = (\\lbl TYP3 c);     " +

//@ set c = \\type(String);     " +

//@ set c = (\\lbl TYP4 c);     " +

//@ ghost \\TYPE c;     " +

//@ set c = \\type(java.lang.String[]);     " +

//@ set c = (\\lbl TYP1 c);     " +

//@ set c = \\type(String[]);     " +

//@ set c = (\\lbl TYP2 c);     " +

//@ set c = \\type(java.lang.String[][]);     " +

//@ set c = (\\lbl TYP3 c);     " +

//@ set c = \\type(String[][]);     " +

//@ set c = (\\lbl TYP4 c);     " +

//@ ghost \\TYPE c;     " +

//@ set c = \\type(java.lang.Class<Integer>);     " +

//@ set c = (\\lbl TYP1 c);     " +

//@ ghost boolean bbb = (\\lbl TRUE Class.class == \\erasure(\\type(Class)));     " +

//@ set c = (\\lbl TYP2 c);     " +

//@ ghost \\TYPE c;     " +

//@ set c = \\type(int);     " +

//@ set c = (\\lbl TYP1 c);     " +

//@ set c = \\type(boolean);     " +

//@ set c = (\\lbl TYP2 c);     " +

//@ ghost \\TYPE c;     " +

//@ set c = \\type(java.lang.Object);     " +

//@ set c = (\\lbl TYP1 c);     " +

//@ set c = \\type(Object);     " +

//@ set c = (\\lbl TYP2 c);     " +

//@ set c = \\type(java.lang.String);     " +

//@ set c = (\\lbl TYP3 c);     " +

//@ set c = \\type(String);     " +

//@ set c = (\\lbl TYP4 c);     " +

//@ ghost \\TYPE c;     " +

//@ set c = \\type(java.lang.String[]);     " +

//@ set c = (\\lbl TYP1 c);     " +

//@ set c = \\type(String[]);     " +

//@ set c = (\\lbl TYP2 c);     " +

//@ set c = \\type(java.lang.String[][]);     " +

//@ set c = (\\lbl TYP3 c);     " +

//@ set c = \\type(String[][]);     " +

//@ set c = (\\lbl TYP4 c);     " +

//@ ghost \\TYPE c;     " +

//@ set c = \\type(java.lang.Class<Integer>);     " +

//@ set c = (\\lbl TYP1 c);     " +

//@ ghost boolean c;     " +

//@ set c = o.getClass() <: o.getClass();     " + // Object <: Object  // Class

//@ set c = (\\lbl TYP1 c);     " +

//@ set c = \\typeof(o) <: \\typeof(o);     " +  // Object <: Object // \TYPE

//@ set c = (\\lbl TYP2 c);     " +

//@ set c = \\typeof(o) <: \\typeof(oo);     " + // Object <: String // \TYPE

//@ set c = (\\lbl TYP3 c);     " +

//@ set c = \\typeof(oo) <: \\typeof(o);     " + // String <: Object // \TYPE

//@ set c = (\\lbl TYP4 c);     " +

//@ set c = \\typeof(ob) <: \\typeof(oo);     " + // Boolean <: String // \TYPE

//@ set c = (\\lbl TYP5 c);     " +

//@ ghost boolean c;     " +

//@ set c = s.getClass() <: b.getClass();     " + // String <: Boolean // Class

//@ set c = (\\lbl TYP1 c);     " +

//@ set c = \\typeof(s) <: \\typeof(b);     " +  // String <: Boolean // \TYPE

//@ set c = (\\lbl TYP2 c);     " +

//@ set c = \\type(int) <: \\typeof(o);     " + // int <: Object // \TYPE

//@ set c = (\\lbl TYP3 c);     " +

//@ set c = \\type(int) <: \\type(int);     " + // int <: int  // false

//@ set c = (\\lbl TYP4 c);     " +

//@ set c = \\type(int) <: \\type(boolean);     " + // int <: boolean

//@ set c = (\\lbl TYP5 c);     " +

//@ requires 10/i != 0;     " +

//@ ensures 10/(i-1) == 0;     " +

//@ requires i != 0;     " +

//@ requires 10/i == 10;     " +

//@ ghost public static int i = 0;      //@ public invariant i == 0;      //@ requires i == 1;     static public int m(); }");

//@ ghost static int i = 0;      //@ invariant i == 0;      //@ ensures i == 1;     static int m(); }");

//@ set i = 1;      return 0; }       public static void main(String[] args) { m(); System.out.println(\"END\"); }}"

/*@ model static pure public int mm() { return 5; } */
//@ ghost static public int i = 0;      "

//@ public invariant i == 0;      //@ ensures i == 1;     static public int m(); "

//@ set i = mm();     "

/*@ model public static class AA { static public int mm() { return 5; }} */
//@ ghost public static int i = 0;      "

//@ public invariant i == 0;      "

//@ ensures i == 0;     "

//@ set i = AA.mm();     "

/*@ model public static class AB { static public int mm() { return 5; }} */
//@ ghost public static int i = 0;      "

//@ public invariant i == 0;      "

//@ ensures i == 0;     "

//@ set i = AB.mm();     "

//@ static public invariant i == 0;      "

//@ static public invariant i == 0;      "

//@ public invariant i == 0;    "

//@ public invariant i == 0;"

//@ public invariant i == 0;"

//@ public invariant i == 0;"

//@ public invariant i == 0;"

//@ public initially i == 1;      "

//@ public initially j == 1;      "

//@ public invariant i == j;      "

/*@ assignable j; */
//@ constraint i == \\old(i)+1;      "

//@ invariant i == 0;      "

/*@ private helper */
//@ static model int i;     "

//@ static represents i \\such_that i == j+1;     "

//@ static model int i;      "

//@ static represents i = j+1;      "

//@ debug System.out.println(\"A \" + i);     "

//@ debug System.out.println(\"A \" + i);     "

//@ static ghost int ii;      "

//@ static model int i;      "

//@ static represents i \\such_that i==j+1;      "

//@ static represents i =j+1;      "

//@ debug System.out.println(\"A \" + i);     "

//@ debug System.out.println(\"A \" + i);     "

//@ static ghost int ii;      "

//@ static model int i;      "

//@ static represents i = j+1;      "

//@ static represents i = j;      "

//@ debug System.out.println(\"A \" + i);     "

//@ debug System.out.println(\"A \" + i);     "

//@  represents i = j+1;      "

//@ debug System.out.println(\"A \" + a.i);     "

//@ debug System.out.println(\"B \" + b.i);     "

//@ debug System.out.println(\"B \" + b.i);     "

//@ model  int i; 

//@  represents super.i = j+1;      "

//@ debug System.out.println(\"A \" + a.i);     "

//@ debug System.out.println(\"B \" + b.i);     "

//@ debug System.out.println(\"B \" + b.i);     "

//@ model protected int i; }    "

//@  model int i; represents i = j;     "

//@ debug System.out.println(\"A \" + a.i);     "

//@ debug System.out.println(\"B \" + b.i);     "

//@ model  int i; represents i = PA.j+1;     

//@ debug System.out.println(\"A \" + a.i);     "

//@ debug System.out.println(\"B \" + b.i);     "

//@ debug System.out.println(\"B \" + b.i);     "

//@ model  int i; 

//@ static model int i;     "

//@ debug System.out.println(\"A \" + i);     "

//@ ghost boolean n = (\\forall int i; 0<=i && i<=5; i >= 2);      "

//@ ghost boolean nn = (\\exists int i; 0<=i && i<=5; i >= 2);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost boolean n = (\\forall int i; 0<=i && i<=5; i >= 0);      "

//@ ghost boolean nn = (\\exists int i; 0<=i && i<=5; i >= 6);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost boolean n = (\\forall int i; ; i >= 0);      "

//@ ghost boolean nn = (\\exists int i; i == 4; i >= 6);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost boolean n = (\\forall int i; 0<i && i<=5; (\\exists int j; 0<=j && j < 5; j<i));      "

//@ ghost boolean nn = (\\forall int i; 0<=i && i<=5; (\\exists int j; 0<=j && j < 5; j<i));      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost long n1 = (\    um_of int i; 0 <= i && i <= 5; true);      "

//@ ghost long n2 = (\    um_of int i; 0 < i && i < 5; true);      "

//@ debug System.out.println(\"A \" + n1 + \" \" + n2);     "

//@ ghost long n = (\    um_of int i; 0 <= i && i < 5; i >= 2);      "

//@ ghost long nn = (\    um_of int i; 0 <= i && i < 5; false);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost int n = (\    um_of int i; 0 <= i && i < 5; i >= m);      "

//@ ghost int nn = (\    um_of int i; 0 <= i && i < 5; m > 0);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn );     "

//@ ensures (\    um_of int i; 0 <= i && i < 5; i >= m) == 3;    "

//@ ensures (\    um_of int i; 0 <= i && i < 5; i >= m) == 4;    "

//@ ghost long n1 = (\    um_of int i,j; 0 <= i && i <= 5 && 0 <= j && j < i; true);      "

//@ debug System.out.println(\"A \" + n1);     "

//@ ghost int n = (\\sum int i; 0<i && i<=5; i+1);      "

//@ ghost int nn = (\\sum int i; 0<i && i<0; i+1);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost int n = (\\product int i; 0<i && i<=5; i+1);      "

//@ ghost int nn = (\\product int i; 0<i && i<0; i+1);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost int n = (\\max int i; 0<=i && i<=5 && (i%2)==0; i+1);      "

//@ ghost int nn = (\\max int i; 0<i && i<0; i+1);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost int n = (\\max int i; 0<=i && i<=5 && (i%2)==0; inc(i));      "

//@ ghost int nn = (\\max int i; -9<=i && i<=5 ; Math.abs(i));      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost short n1 = (\\max int i; 0<=i && i<=5; (short)(i+10));      "

//@ ghost short n2 = (\\min int i; 0<=i && i<=5; (short)(i+10));      "

//@ debug System.out.println(\"A \" + n1 + \" \" + n2);     "

//@ ghost short n1 = (\\max short i; 2<=i && i<=5; i);      "

//@ ghost short n2 = (\\min short i; 2<=i && i<=5; i);      "

//@ debug System.out.println(\"A \" + n1 + \" \" + n2);     "

//@ ghost byte n1 = (\\max int i; 2<=i && i<=5; (byte)i);      "

//@ ghost byte n2 = (\\min int i; 2<=i && i<=5; (byte)i);      "

//@ debug System.out.println(\"A \" + n1 + \" \" + n2);     "

//@ ghost byte n1 = (\\max byte i; 2<=i && i<=5; i);      "

//@ ghost byte n2 = (\\min byte i; 2<=i && i<=5; i);      "

//@ debug System.out.println(\"A \" + n1 + \" \" + n2);     "

//@ ghost long n1 = (\\max int i; 0<=i && i<=5; (i+10L));      "

//@ ghost long n2 = (\\min int i; 0<=i && i<=5; (i+10L));      "

//@ debug System.out.println(\"A \" + n1 + \" \" + n2);     "

//@ ghost long n1 = (\\max long i; 0<=i && i<=5; (i+10L));      "

//@ ghost long n2 = (\\min long i; 0<=i && i<=5; (i+10L));      "

//@ debug System.out.println(\"A \" + n1 + \" \" + n2);     "

//@ ghost double n1 = (\\max int i; 0<=i && i<=5; (double)(i+10.5));      "

//@ ghost double n2 = (\\min int i; 0<=i && i<=5; (double)(i+10.5));      "

//@ debug System.out.println(\"A \" + n1 + \" \" + n2);     "

//@ ghost float n1 = (\\max int i; 0<=i && i<=5; (float)(i+10.5));      "

//@ ghost float n2 = (\\min int i; 0<=i && i<=5; (float)(i+10.5));      "

//@ debug System.out.println(\"A \" + n1 + \" \" + n2);     "

//@ ghost char n1 = (\\max int i; 'a'<i && i<='q'; (char)i);      "

//@ ghost char n2 = (\\min int i; 'a'<i && i<='q'; (char)i);      "

//@ debug System.out.println(\"A \" + n1 + \" \" + n2);     "

//@ ghost char n1 = (\\max char i; 'a'<i && i<='q'; i);      "

//@ ghost char n2 = (\\min char i; 'a'<i && i<='q'; i);      "

//@ debug System.out.println(\"A \" + n1 + \" \" + n2);     "

//@ ghost int n = (\\min int i; 0<=i && i<=5 && (i%2)==1; i+1);      "

//@ ghost int nn = (\\min int i; 0<i && i<0; i+1);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost long n = (\\max int i; 0<=i && i<=5 && (i%2)==0; (long)i+1);      "

//@ ghost long nn = (\\max int i; 0<i && i<0; i+1);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost long n = (\\min int i; 0<=i && i<=5 && (i%2)==1; (long)i+1);      "

//@ ghost long nn = (\\min int i; 0<i && i<0; i+1);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost double n = (\\max int i; 0<=i && i<=5 && (i%2)==0; (double)i+1);      "

//@ ghost double nn = (\\max int i; 0<i && i<0; i+1);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost double n = (\\min int i; 0<=i && i<=5 && (i%2)==1; (double)i+1);      "

//@ ghost double nn = (\\min int i; 0<i && i<0; (double)i+1);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost int n = (\\sum boolean i; bb; (i?2:5));      "

//@ ghost int nn = (\\sum boolean i; !i; (i?2:5));      "

//@ ghost int nnn = (\\sum boolean i; i; (i?2:5));      "

//@ ghost int nnnn = (\\sum boolean i; false; (i?2:5));      "

//@ debug System.out.println(\"A \" + n + \" \" + nn + \" \" + nnn + \" \" + nnnn);     "

//@ ghost int n = (\    um_of Object o; list.contains(o); true);      "

//@ ghost int nn = (\    um_of Object o; list.contains(o) && true; true);      "

//@ ghost int nnn = (\    um_of Object o; list.contains(o) && o == oo; true);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn + \" \" + nnn);     "

//@ model int i; );

//@ debug System.out.println(\"A \" + a.i);     "

//@ debug System.out.println(\"B \" + b.i);     "

//@ debug System.out.println(\"B \" + b.i);     "

//@ model int i; );

//@ debug System.out.println(\"A \" + a.i);     "

//@ debug System.out.println(\"B \" + b.i);     "

//@ debug System.out.println(\"B \" + b.i);     "

/*@non_null*/
/*@ non_null*/
//@ model  int i; represents i = 0; 

/*@non_null*/
/*@nullable*/
/*@nullable*/
//@ ghost int k; set k = A.i;    "

//@ set k = a.i;    "

//@ set k = a.b.i;    "

/*@nullable_by_default*/
/*@non_null*/
 ghost static Object oooo = null;    "

/*@ non_null*/
//@ ghost non_null String loc = null;     "

/*@nullable*/
//@ nullable ghost static Object oooo = null;    "

/*@ nullable*/
//@ ghost String loc = null;     "

/*@nullable*/
//@ static invariant o != ooo;    "

//@ nullable ghost static Object oooo = null;    "

/*@ nullable*/
//@ ghost String loc = null;     "

//@ axiom true;    "

//@ public invariant \\duration(true) == 0;    "

//@ public model long i;    "

//@ public represents i =  \\duration(true);    "

//@ public constraint \\duration(true) == 0;    "

//@ public initially \\duration(true) == 0;    "

//@ hence_by true;     "

//@ assert \\duration(true) == 0;    "

//@ assume \\duration(true) == 0;    "

//@ ghost long k = \\duration(true);    "

//@ set k = \\duration(true);    "

//@ debug k = \\duration(true);    "

//@ ghost long z = \\duration(true);    "

//@ ghost long[] zz = { \\duration(true) } ;    "

/*@ requires \\duration(true) == 0;*/
//@ ensures \\duration(true) == 0;    "

//@ signals (Exception ex) \\duration(true) == 0;    "

//@ signals_only RuntimeException;    "

//@ diverges \\duration(true) == 0;    " // line 23

//@ duration  \\duration(true);    "

//@ working_space \\duration(true);    "

//@   requires \\duration(true) == 0;    "

//@   ensures true;    "

//@ also    "

//@   requires \\duration(true) == 0;    "

//@   signals (Exception ex) true;    "

//@ also    "

//@   requires \\duration(true) == 0;    "

//@   signals_only RuntimeException;    "

//@ also    "

//@   ensures true;    "

//@public  invariant i == 1;     "

//@ public invariant i == 2;     "

//@ public invariant i == 3;     "

//@ public invariant i == 2;     "

//@ public invariant i == 3;     "

//@public  invariant i == 1;     "

//@ static public invariant i == 2;     "

//@ static public invariant i == 3;     "

//@ static public invariant i == 1;     "

//@ also ensures i == 2;     "

//@ also ensures i == 3;     "

//@ ensures false;     "

//@ also ensures i == 2;     "

//@ also private behavior ensures i == 2;     "

//@ also ensures i == 3;     "

//@ ensures false;     "

//@ also ensures i == 2;     "

//@ requires kc == 3; ensures i == 3;     "

//@ also requires kb == 2; ensures i == 2;     "

//@ also requires ka==1; ensures i == 1;     "

//@ requires i > 0;    "

//@ modifies j;    "

//@ ensures j == i;    "

//@ ensures j == 1;    "

//@ requires i > 0;    "

//@ modifies j;    "

//@ ensures j == i;    "

//@ ensures j == 1;    "

//@ requires i > 0;    "

//@ modifies k;    "

//@ ensures j == i;    "

//@ ensures j == 1;    "

/*@ assert i == 0; */
/*@ assert i == -1; */
//@ assert false;      } " +

//@ assert false;            } " +

//@ assert false;      } " +

//@ ensures \\result == i;    "

//@ ensures \\result == i+1;    "

//@ loop_invariant sum >= 0;     "

//@ assert sum >= 0;     "

//@ loop_invariant sum >= 0;     "

//@ assert sum > 0;     "

//@ loop_invariant sum >= 0;     "

/*@ assume o >= 0; */
//@ assert sum >= 0;     "

//@ loop_invariant sum >= 0;     "

/*@ assume o >= 0; */
//@ assert sum > 0;     "

//@ old int kk = k; requires i > kk; assignable k; ensures k == i+1; ensures kk == 5;    "

//@ also    "

//@ old int kkk = k+1; requires i < kkk; assignable k; ensures k == i-1; ensures kkk == 7;    "

//@ old int kk = k; requires i > kk; assignable k; ensures k == i+1; ensures kk == 5;    "

//@ also    " // Purposely duplicating the name of the old variable

//@ old int kk = k+1; requires i < kk; assignable k; ensures k == i-1; ensures kk == 7;    "

//@ old int kk = k;    "

//@ {| requires i > kk; assignable k; ensures k == i+1; ensures kk == 5;    "

//@ also    "

//@    requires i < kk; assignable k; ensures k == i-1; ensures kk == 6;    "

//@ |}    "

//@ public normal_behavior     "

//@   requires true;     "

//@ show i, j+1;    "

//@ show k;    "

//@ assert k > 0;    "

//@ show m,k;    "

//@ assert m > 0;    "

//@ ghost int i = 0;      //@ set i = 1;      //@ set System.out.println(i);      System.out.println(\"END\"); }}"

//@ assert false;      System.out.println(\"END\"); }}"

//@ assert false: \"ABC\";      System.out.println(\"END\"); }}"

//@ assert false: (int)args.length;      System.out.println(\"END\"); }}"

//@ assert true: args.length;      System.out.println(\"END\"); }}"

//@ assume false;      System.out.println(\"END\"); }}"

//@ assume false: \"DEF\";      System.out.println(\"END\"); }}"

//@ unreachable;      System.out.println(\"END\"); }}"

/*@ requires i == 0; */
/*@ requires i != 0; */
/*@ requires i > 0; */
/*@ requires i < 0; */
//@ nowarn Precondition;    " +

/*@ requires i != 0; */
//@ nowarn Precondition;    " +

/*@ requires true; */
/*@non_null*/
/*@non_null*/
/*@ requires true; */
/*@non_null*/
/*@non_null*/
/*@nullable*/
/*@ ensures k == i; */
/*@ ensures k == 0; */
/*@ nowarn Postcondition;*/
/*@ ensures k == 0; */
/*@ nowarn Postcondition;*/
/*@ requires true;     also     requires false;     ensures k == 0; */
/*@ requires true;     ensures true;     also     requires false;     ensures k == 0; */
/*@ requires true;     " +
                "     ensures k != i;     " +
                "     also     " +
                "     requires true;     " +
                "     ensures k == 0; */
/*@   requires true;     "
                +"        ensures k != i;     "
                +"      also     "
                +"        requires true;     "
                +"        ensures k == 0; */
/*@ requires true;     "
                +"     signals (java.io.FileNotFoundException e) e == null; */
/*@ requires true;     signals (java.io.FileNotFoundException e) e == null; */
/*@ requires true;     signals_only \    othing; */
/*@ requires true;     signals_only java.io.FileNotFoundException; */
/*@ requires true;     signals_only java.io.FileNotFoundException; */
/*@ requires true;     */
/*@ requires true;     */
/*@ ensures \\result == 4; */
/*@ ensures \\result == 4; */
/*@ ensures (\\lbl ENS \\result == 1); */
/*@ ensures (\\lbl ENS (\\lbl RES \\result) == 1); */
/*@ ensures (\\lbl ENS \\old(k)) == k; */
//@ assert (\\lbl AST \\old(k)) == 0;      k=i; //@ assert (\\lbl AST2 \\old(k)) == 0;     //@ assert (\\lbl AST3 k) == 0;      return i; } " +

//@ ghost int p = (\\lbl AST \\old(k));     "

//@ ghost int kk =  (\\lbl AST2 \\old(k));     "

//@ set kk = (\\lbl AST3 k);      "

//@ set kk = (\\lbl AST4 \\old(k,lab));      "

//@ assert (i==0) <==> (* informal *);      return i; } " +

//@ ghost nullable java.lang.Class t; ghost nullable \\TYPE tt;     "

//@ set tt = (\\lbl A \\elemtype(\\typeof(o)));    "

//@ set tt = (\\lbl B \\elemtype(\\typeof(oo)));    "

//@ set tt = (\\lbl C \\elemtype(\\typeof(o3)));    "

//@ set t = (\\lbl D \\elemtype(java.lang.Class.class));    "

//@ set t = (\\lbl E \\elemtype(java.lang.Boolean[].class));    "

//@ requires JML.informal(\"asd\") && (\\lbl CLS \\erasure(\\typeof(i))) == Object.class;     " +

/*@nullable*/
//@ requires (\\lbl CLS \\typeof(i)) == \\type(Object);     " +

/*@nullable*/
//@ requires (\\lbl CLS \\typeof(i)) == \\type(Object);     " +

//@ assert (\\lbl AST \\typeof(true)) == \\typeof(true);     " +

//@ assert (\\lbl AST2 \\typeof((short)0)) != \\typeof(true);     " +

//@ assert (\\lbl AST3 \\typeof((long)0)) != \\typeof(true);     " +

//@ assert (\\lbl AST4 \\typeof((byte)0)) != \\typeof(true);     " +

//@ assert (\\lbl AST5 \\typeof('c')) != \\typeof(true);     " +

//@ assert (\\lbl AST6 \\typeof(\"c\")) != \\typeof(true);     " +

//@ assert (\\lbl AST7 \\typeof((float)0)) != \\typeof(true);     " +

//@ assert (\\lbl AST8 \\typeof((double)0)) != \\typeof(true);     " +

//@ assert (\\lbl AST9 \\typeof(5/0)) == \\typeof(5/0);     " +

//@ assert (\\lbl AST10 \\typeof(5.0/0.0)) != \\typeof(5/0);     " +

//@ requires (\\lbl CLS \\typeof(i)) == ( \\type(LinkedList<Integer>) );     " +

/*@nullable*/
//@ requires (\\lbl CLS \\typeof(i)) == ( \\type(LinkedList<Integer>) );     " +

/*@nullable*/
//@ requires (\\lbl CLS \\typeof(i)) != ( \\type(LinkedList<Integer>) );     " +

/*@nullable*/
//@ assert \    onnullelements(s2,s2null);     " +

//@ assert \    onnullelements(s2,s2);     " +

//@ assert \    onnullelements(s2null,new Integer[]{5/z});     " +

//@ assert (\\lbl ELEM \    onnullelements(o));     " +

/*@nullable*/
//@ assert (\\lbl ELEM \    onnullelements((\\lbl O o)));     " +

/*@nullable*/
//@ assert (\\lbl STRING \"def\") != null;     " +

//@ assert (\\lbl SHORT (short)(i)) != 0;     " +

//@ assert (\\lbl LONG (long)(i)) != 0;     " +

//@ assert (\\lbl BYTE (byte)(i)) != 0;     " +

//@ assert (\\lbl INT (int)(i)) != 0;     " +

//@ assert (\\lbl FLOAT (float)(i)) != 0;     " +

//@ assert (\\lbl DOUBLE (double)(i)) != 0;     " +

//@ assert (\\lbl CHAR n.charAt(0)) != 0;     " +

//@ assert (\\lbl BOOLEAN (i == 0)) ;     " +

//@ assert (\\lbl OBJECT o) == null;     " +

//@ assert (\\lbl STRING \"abc\") != null;     " +

/*@nullable*/
//@ assert (\\lbl OBJECT null) == null;     " +

//@ assert (\\lbl INT (int)(4)) != 0;     " +

//@ assert (\\lbl SHORT (short)(1)) != 0;     " +

//@ assert (\\lbl LONG (long)(2)) != 0;     " +

//@ assert (\\lbl BYTE (byte)(3)) != 0;     " +

//@ assert (\\lbl FLOAT (float)(5)) != 0;     " +

//@ assert (\\lbl DOUBLE (double)(6)) != 0;     " +

//@ assert (\\lbl CHAR 'a') != 0;     " +

//@ assert (\\lbl BOOLEAN true) ;     " +

//@ assert (\\lbl STRING \"abc\") != null;     " +

//@ ghost \\TYPE c;     " +

//@ set c = \\type(int);     " +

//@ set c = (\\lbl TYP1 c);     " +

//@ set c = \\type(boolean);     " +

//@ set c = (\\lbl TYP2 c);     " +

//@ ghost \\TYPE c;     " +

//@ set c = \\type(java.lang.Object);     " +

//@ set c = (\\lbl TYP1 c);     " +

//@ set c = \\type(Object);     " +

//@ set c = (\\lbl TYP2 c);     " +

//@ set c = \\type(java.lang.String);     " +

//@ set c = (\\lbl TYP3 c);     " +

//@ set c = \\type(String);     " +

//@ set c = (\\lbl TYP4 c);     " +

//@ ghost \\TYPE c;     " +

//@ set c = \\type(java.lang.String[]);     " +

//@ set c = (\\lbl TYP1 c);     " +

//@ set c = \\type(String[]);     " +

//@ set c = (\\lbl TYP2 c);     " +

//@ set c = \\type(java.lang.String[][]);     " +

//@ set c = (\\lbl TYP3 c);     " +

//@ set c = \\type(String[][]);     " +

//@ set c = (\\lbl TYP4 c);     " +

//@ ghost \\TYPE c;     " +

//@ set c = \\type(java.lang.Class<Integer>);     " +

//@ set c = (\\lbl TYP1 c);     " +

//@ ghost boolean bbb = (\\lbl TRUE Class.class == \\erasure(\\type(Class)));     " +

//@ set c = (\\lbl TYP2 c);     " +

//@ ghost \\TYPE c;     " +

//@ set c = \\type(int);     " +

//@ set c = (\\lbl TYP1 c);     " +

//@ set c = \\type(boolean);     " +

//@ set c = (\\lbl TYP2 c);     " +

//@ ghost \\TYPE c;     " +

//@ set c = \\type(java.lang.Object);     " +

//@ set c = (\\lbl TYP1 c);     " +

//@ set c = \\type(Object);     " +

//@ set c = (\\lbl TYP2 c);     " +

//@ set c = \\type(java.lang.String);     " +

//@ set c = (\\lbl TYP3 c);     " +

//@ set c = \\type(String);     " +

//@ set c = (\\lbl TYP4 c);     " +

//@ ghost \\TYPE c;     " +

//@ set c = \\type(java.lang.String[]);     " +

//@ set c = (\\lbl TYP1 c);     " +

//@ set c = \\type(String[]);     " +

//@ set c = (\\lbl TYP2 c);     " +

//@ set c = \\type(java.lang.String[][]);     " +

//@ set c = (\\lbl TYP3 c);     " +

//@ set c = \\type(String[][]);     " +

//@ set c = (\\lbl TYP4 c);     " +

//@ ghost \\TYPE c;     " +

//@ set c = \\type(java.lang.Class<Integer>);     " +

//@ set c = (\\lbl TYP1 c);     " +

//@ ghost boolean c;     " +

//@ set c = o.getClass() <: o.getClass();     " + // Object <: Object  // Class

//@ set c = (\\lbl TYP1 c);     " +

//@ set c = \\typeof(o) <: \\typeof(o);     " +  // Object <: Object // \TYPE

//@ set c = (\\lbl TYP2 c);     " +

//@ set c = \\typeof(o) <: \\typeof(oo);     " + // Object <: String // \TYPE

//@ set c = (\\lbl TYP3 c);     " +

//@ set c = \\typeof(oo) <: \\typeof(o);     " + // String <: Object // \TYPE

//@ set c = (\\lbl TYP4 c);     " +

//@ set c = \\typeof(ob) <: \\typeof(oo);     " + // Boolean <: String // \TYPE

//@ set c = (\\lbl TYP5 c);     " +

//@ ghost boolean c;     " +

//@ set c = s.getClass() <: b.getClass();     " + // String <: Boolean // Class

//@ set c = (\\lbl TYP1 c);     " +

//@ set c = \\typeof(s) <: \\typeof(b);     " +  // String <: Boolean // \TYPE

//@ set c = (\\lbl TYP2 c);     " +

//@ set c = \\type(int) <: \\typeof(o);     " + // int <: Object // \TYPE

//@ set c = (\\lbl TYP3 c);     " +

//@ set c = \\type(int) <: \\type(int);     " + // int <: int  // false

//@ set c = (\\lbl TYP4 c);     " +

//@ set c = \\type(int) <: \\type(boolean);     " + // int <: boolean

//@ set c = (\\lbl TYP5 c);     " +

//@ requires 10/i != 0;     " +

//@ ensures 10/(i-1) == 0;     " +

//@ requires i != 0;     " +

//@ requires 10/i == 10;     " +

//@ ghost public static int i = 0;      //@ public invariant i == 0;      //@ requires i == 1;     static public int m(); }");

//@ ghost static int i = 0;      //@ invariant i == 0;      //@ ensures i == 1;     static int m(); }");

//@ set i = 1;      return 0; }       public static void main(String[] args) { m(); System.out.println(\"END\"); }}"

/*@ model static pure public int mm() { return 5; } */
//@ ghost static public int i = 0;      "

//@ public invariant i == 0;      //@ ensures i == 1;     static public int m(); "

//@ set i = mm();     "

/*@ model public static class AA { static public int mm() { return 5; }} */
//@ ghost public static int i = 0;      "

//@ public invariant i == 0;      "

//@ ensures i == 0;     "

//@ set i = AA.mm();     "

/*@ model public static class AB { static public int mm() { return 5; }} */
//@ ghost public static int i = 0;      "

//@ public invariant i == 0;      "

//@ ensures i == 0;     "

//@ set i = AB.mm();     "

//@ static public invariant i == 0;      "

//@ static public invariant i == 0;      "

//@ public invariant i == 0;    "

//@ public invariant i == 0;"

//@ public invariant i == 0;"

//@ public invariant i == 0;"

//@ public invariant i == 0;"

//@ public initially i == 1;      "

//@ public initially j == 1;      "

//@ public invariant i == j;      "

/*@ assignable j; */
//@ constraint i == \\old(i)+1;      "

//@ invariant i == 0;      "

/*@ private helper */
//@ static model int i;     "

//@ static represents i \\such_that i == j+1;     "

//@ static model int i;      "

//@ static represents i = j+1;      "

//@ debug System.out.println(\"A \" + i);     "

//@ debug System.out.println(\"A \" + i);     "

//@ static ghost int ii;      "

//@ static model int i;      "

//@ static represents i \\such_that i==j+1;      "

//@ static represents i =j+1;      "

//@ debug System.out.println(\"A \" + i);     "

//@ debug System.out.println(\"A \" + i);     "

//@ static ghost int ii;      "

//@ static model int i;      "

//@ static represents i = j+1;      "

//@ static represents i = j;      "

//@ debug System.out.println(\"A \" + i);     "

//@ debug System.out.println(\"A \" + i);     "

//@  represents i = j+1;      "

//@ debug System.out.println(\"A \" + a.i);     "

//@ debug System.out.println(\"B \" + b.i);     "

//@ debug System.out.println(\"B \" + b.i);     "

//@ model  int i; 

//@  represents super.i = j+1;      "

//@ debug System.out.println(\"A \" + a.i);     "

//@ debug System.out.println(\"B \" + b.i);     "

//@ debug System.out.println(\"B \" + b.i);     "

//@ model protected int i; }    "

//@  model int i; represents i = j;     "

//@ debug System.out.println(\"A \" + a.i);     "

//@ debug System.out.println(\"B \" + b.i);     "

//@ model  int i; represents i = PA.j+1;     

//@ debug System.out.println(\"A \" + a.i);     "

//@ debug System.out.println(\"B \" + b.i);     "

//@ debug System.out.println(\"B \" + b.i);     "

//@ model  int i; 

//@ static model int i;     "

//@ debug System.out.println(\"A \" + i);     "

//@ ghost boolean n = (\\forall int i; 0<=i && i<=5; i >= 2);      "

//@ ghost boolean nn = (\\exists int i; 0<=i && i<=5; i >= 2);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost boolean n = (\\forall int i; 0<=i && i<=5; i >= 0);      "

//@ ghost boolean nn = (\\exists int i; 0<=i && i<=5; i >= 6);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost boolean n = (\\forall int i; ; i >= 0);      "

//@ ghost boolean nn = (\\exists int i; i == 4; i >= 6);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost boolean n = (\\forall int i; 0<i && i<=5; (\\exists int j; 0<=j && j < 5; j<i));      "

//@ ghost boolean nn = (\\forall int i; 0<=i && i<=5; (\\exists int j; 0<=j && j < 5; j<i));      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost long n1 = (\    um_of int i; 0 <= i && i <= 5; true);      "

//@ ghost long n2 = (\    um_of int i; 0 < i && i < 5; true);      "

//@ debug System.out.println(\"A \" + n1 + \" \" + n2);     "

//@ ghost long n = (\    um_of int i; 0 <= i && i < 5; i >= 2);      "

//@ ghost long nn = (\    um_of int i; 0 <= i && i < 5; false);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost int n = (\    um_of int i; 0 <= i && i < 5; i >= m);      "

//@ ghost int nn = (\    um_of int i; 0 <= i && i < 5; m > 0);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn );     "

//@ ensures (\    um_of int i; 0 <= i && i < 5; i >= m) == 3;    "

//@ ensures (\    um_of int i; 0 <= i && i < 5; i >= m) == 4;    "

//@ ghost long n1 = (\    um_of int i,j; 0 <= i && i <= 5 && 0 <= j && j < i; true);      "

//@ debug System.out.println(\"A \" + n1);     "

//@ ghost int n = (\\sum int i; 0<i && i<=5; i+1);      "

//@ ghost int nn = (\\sum int i; 0<i && i<0; i+1);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost int n = (\\product int i; 0<i && i<=5; i+1);      "

//@ ghost int nn = (\\product int i; 0<i && i<0; i+1);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost int n = (\\max int i; 0<=i && i<=5 && (i%2)==0; i+1);      "

//@ ghost int nn = (\\max int i; 0<i && i<0; i+1);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost int n = (\\max int i; 0<=i && i<=5 && (i%2)==0; inc(i));      "

//@ ghost int nn = (\\max int i; -9<=i && i<=5 ; Math.abs(i));      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost short n1 = (\\max int i; 0<=i && i<=5; (short)(i+10));      "

//@ ghost short n2 = (\\min int i; 0<=i && i<=5; (short)(i+10));      "

//@ debug System.out.println(\"A \" + n1 + \" \" + n2);     "

//@ ghost short n1 = (\\max short i; 2<=i && i<=5; i);      "

//@ ghost short n2 = (\\min short i; 2<=i && i<=5; i);      "

//@ debug System.out.println(\"A \" + n1 + \" \" + n2);     "

//@ ghost byte n1 = (\\max int i; 2<=i && i<=5; (byte)i);      "

//@ ghost byte n2 = (\\min int i; 2<=i && i<=5; (byte)i);      "

//@ debug System.out.println(\"A \" + n1 + \" \" + n2);     "

//@ ghost byte n1 = (\\max byte i; 2<=i && i<=5; i);      "

//@ ghost byte n2 = (\\min byte i; 2<=i && i<=5; i);      "

//@ debug System.out.println(\"A \" + n1 + \" \" + n2);     "

//@ ghost long n1 = (\\max int i; 0<=i && i<=5; (i+10L));      "

//@ ghost long n2 = (\\min int i; 0<=i && i<=5; (i+10L));      "

//@ debug System.out.println(\"A \" + n1 + \" \" + n2);     "

//@ ghost long n1 = (\\max long i; 0<=i && i<=5; (i+10L));      "

//@ ghost long n2 = (\\min long i; 0<=i && i<=5; (i+10L));      "

//@ debug System.out.println(\"A \" + n1 + \" \" + n2);     "

//@ ghost double n1 = (\\max int i; 0<=i && i<=5; (double)(i+10.5));      "

//@ ghost double n2 = (\\min int i; 0<=i && i<=5; (double)(i+10.5));      "

//@ debug System.out.println(\"A \" + n1 + \" \" + n2);     "

//@ ghost float n1 = (\\max int i; 0<=i && i<=5; (float)(i+10.5));      "

//@ ghost float n2 = (\\min int i; 0<=i && i<=5; (float)(i+10.5));      "

//@ debug System.out.println(\"A \" + n1 + \" \" + n2);     "

//@ ghost char n1 = (\\max int i; 'a'<i && i<='q'; (char)i);      "

//@ ghost char n2 = (\\min int i; 'a'<i && i<='q'; (char)i);      "

//@ debug System.out.println(\"A \" + n1 + \" \" + n2);     "

//@ ghost char n1 = (\\max char i; 'a'<i && i<='q'; i);      "

//@ ghost char n2 = (\\min char i; 'a'<i && i<='q'; i);      "

//@ debug System.out.println(\"A \" + n1 + \" \" + n2);     "

//@ ghost int n = (\\min int i; 0<=i && i<=5 && (i%2)==1; i+1);      "

//@ ghost int nn = (\\min int i; 0<i && i<0; i+1);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost long n = (\\max int i; 0<=i && i<=5 && (i%2)==0; (long)i+1);      "

//@ ghost long nn = (\\max int i; 0<i && i<0; i+1);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost long n = (\\min int i; 0<=i && i<=5 && (i%2)==1; (long)i+1);      "

//@ ghost long nn = (\\min int i; 0<i && i<0; i+1);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost double n = (\\max int i; 0<=i && i<=5 && (i%2)==0; (double)i+1);      "

//@ ghost double nn = (\\max int i; 0<i && i<0; i+1);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost double n = (\\min int i; 0<=i && i<=5 && (i%2)==1; (double)i+1);      "

//@ ghost double nn = (\\min int i; 0<i && i<0; (double)i+1);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost int n = (\\sum boolean i; bb; (i?2:5));      "

//@ ghost int nn = (\\sum boolean i; !i; (i?2:5));      "

//@ ghost int nnn = (\\sum boolean i; i; (i?2:5));      "

//@ ghost int nnnn = (\\sum boolean i; false; (i?2:5));      "

//@ debug System.out.println(\"A \" + n + \" \" + nn + \" \" + nnn + \" \" + nnnn);     "

//@ ghost int n = (\    um_of Object o; list.contains(o); true);      "

//@ ghost int nn = (\    um_of Object o; list.contains(o) && true; true);      "

//@ ghost int nnn = (\    um_of Object o; list.contains(o) && o == oo; true);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn + \" \" + nnn);     "

//@ model int i; );

//@ debug System.out.println(\"A \" + a.i);     "

//@ debug System.out.println(\"B \" + b.i);     "

//@ debug System.out.println(\"B \" + b.i);     "

//@ model int i; );

//@ debug System.out.println(\"A \" + a.i);     "

//@ debug System.out.println(\"B \" + b.i);     "

//@ debug System.out.println(\"B \" + b.i);     "

/*@non_null*/
/*@ non_null*/
//@ model  int i; represents i = 0; 

/*@non_null*/
/*@nullable*/
/*@nullable*/
//@ ghost int k; set k = A.i;    "

//@ set k = a.i;    "

//@ set k = a.b.i;    "

/*@nullable_by_default*/
/*@non_null*/
 ghost static Object oooo = null;    "

/*@ non_null*/
//@ ghost non_null String loc = null;     "

/*@nullable*/
//@ nullable ghost static Object oooo = null;    "

/*@ nullable*/
//@ ghost String loc = null;     "

/*@nullable*/
//@ static invariant o != ooo;    "

//@ nullable ghost static Object oooo = null;    "

/*@ nullable*/
//@ ghost String loc = null;     "

//@ axiom true;    "

//@ public invariant \\duration(true) == 0;    "

//@ public model long i;    "

//@ public represents i =  \\duration(true);    "

//@ public constraint \\duration(true) == 0;    "

//@ public initially \\duration(true) == 0;    "

//@ hence_by true;     "

//@ assert \\duration(true) == 0;    "

//@ assume \\duration(true) == 0;    "

//@ ghost long k = \\duration(true);    "

//@ set k = \\duration(true);    "

//@ debug k = \\duration(true);    "

//@ ghost long z = \\duration(true);    "

//@ ghost long[] zz = { \\duration(true) } ;    "

/*@ requires \\duration(true) == 0;*/
//@ ensures \\duration(true) == 0;    "

//@ signals (Exception ex) \\duration(true) == 0;    "

//@ signals_only RuntimeException;    "

//@ diverges \\duration(true) == 0;    " // line 23

//@ duration  \\duration(true);    "

//@ working_space \\duration(true);    "

//@   requires \\duration(true) == 0;    "

//@   ensures true;    "

//@ also    "

//@   requires \\duration(true) == 0;    "

//@   signals (Exception ex) true;    "

//@ also    "

//@   requires \\duration(true) == 0;    "

//@   signals_only RuntimeException;    "

//@ also    "

//@   ensures true;    "

//@public  invariant i == 1;     "

//@ public invariant i == 2;     "

//@ public invariant i == 3;     "

//@ public invariant i == 2;     "

//@ public invariant i == 3;     "

//@public  invariant i == 1;     "

//@ static public invariant i == 2;     "

//@ static public invariant i == 3;     "

//@ static public invariant i == 1;     "

//@ also ensures i == 2;     "

//@ also ensures i == 3;     "

//@ ensures false;     "

//@ also ensures i == 2;     "

//@ also private behavior ensures i == 2;     "

//@ also ensures i == 3;     "

//@ ensures false;     "

//@ also ensures i == 2;     "

//@ requires kc == 3; ensures i == 3;     "

//@ also requires kb == 2; ensures i == 2;     "

//@ also requires ka==1; ensures i == 1;     "

//@ requires i > 0;    "

//@ modifies j;    "

//@ ensures j == i;    "

//@ ensures j == 1;    "

//@ requires i > 0;    "

//@ modifies j;    "

//@ ensures j == i;    "

//@ ensures j == 1;    "

//@ requires i > 0;    "

//@ modifies k;    "

//@ ensures j == i;    "

//@ ensures j == 1;    "

/*@ assert i == 0; */
/*@ assert i == -1; */
//@ assert false;      } " +

//@ assert false;            } " +

//@ assert false;      } " +

//@ ensures \\result == i;    "

//@ ensures \\result == i+1;    "

//@ loop_invariant sum >= 0;     "

//@ assert sum >= 0;     "

//@ loop_invariant sum >= 0;     "

//@ assert sum > 0;     "

//@ loop_invariant sum >= 0;     "

/*@ assume o >= 0; */
//@ assert sum >= 0;     "

//@ loop_invariant sum >= 0;     "

/*@ assume o >= 0; */
//@ assert sum > 0;     "

//@ old int kk = k; requires i > kk; assignable k; ensures k == i+1; ensures kk == 5;    "

//@ also    "

//@ old int kkk = k+1; requires i < kkk; assignable k; ensures k == i-1; ensures kkk == 7;    "

//@ old int kk = k; requires i > kk; assignable k; ensures k == i+1; ensures kk == 5;    "

//@ also    " // Purposely duplicating the name of the old variable

//@ old int kk = k+1; requires i < kk; assignable k; ensures k == i-1; ensures kk == 7;    "

//@ old int kk = k;    "

//@ {| requires i > kk; assignable k; ensures k == i+1; ensures kk == 5;    "

//@ also    "

//@    requires i < kk; assignable k; ensures k == i-1; ensures kk == 6;    "

//@ |}    "

//@ public normal_behavior     "

//@   requires true;     "

//@ show i, j+1;    "

//@ show k;    "

//@ assert k > 0;    "

//@ show m,k;    "

//@ assert m > 0;    "

//@ ghost int i = 0;      //@ set i = 1;      //@ set System.out.println(i);      System.out.println(\"END\"); }}"

//@ assert false;      System.out.println(\"END\"); }}"

//@ assert false: \"ABC\";      System.out.println(\"END\"); }}"

//@ assert false: (int)args.length;      System.out.println(\"END\"); }}"

//@ assert true: args.length;      System.out.println(\"END\"); }}"

//@ assume false;      System.out.println(\"END\"); }}"

//@ assume false: \"DEF\";      System.out.println(\"END\"); }}"

//@ unreachable;      System.out.println(\"END\"); }}"

/*@ requires i == 0; */
/*@ requires i != 0; */
/*@ requires i > 0; */
/*@ requires i < 0; */
//@ nowarn Precondition;    " +

/*@ requires i != 0; */
//@ nowarn Precondition;    " +

/*@ requires true; */
/*@non_null*/
/*@non_null*/
/*@ requires true; */
/*@non_null*/
/*@non_null*/
/*@nullable*/
/*@ ensures k == i; */
/*@ ensures k == 0; */
/*@ nowarn Postcondition;*/
/*@ ensures k == 0; */
/*@ nowarn Postcondition;*/
/*@ requires true;     also     requires false;     ensures k == 0; */
/*@ requires true;     ensures true;     also     requires false;     ensures k == 0; */
/*@ requires true;     " +
                "     ensures k != i;     " +
                "     also     " +
                "     requires true;     " +
                "     ensures k == 0; */
/*@   requires true;     "
                +"        ensures k != i;     "
                +"      also     "
                +"        requires true;     "
                +"        ensures k == 0; */
/*@ requires true;     "
                +"     signals (java.io.FileNotFoundException e) e == null; */
/*@ requires true;     signals (java.io.FileNotFoundException e) e == null; */
/*@ requires true;     signals_only \    othing; */
/*@ requires true;     signals_only java.io.FileNotFoundException; */
/*@ requires true;     signals_only java.io.FileNotFoundException; */
/*@ requires true;     */
/*@ requires true;     */
/*@ ensures \\result == 4; */
/*@ ensures \\result == 4; */
/*@ ensures (\\lbl ENS \\result == 1); */
/*@ ensures (\\lbl ENS (\\lbl RES \\result) == 1); */
/*@ ensures (\\lbl ENS \\old(k)) == k; */
//@ assert (\\lbl AST \\old(k)) == 0;      k=i; //@ assert (\\lbl AST2 \\old(k)) == 0;     //@ assert (\\lbl AST3 k) == 0;      return i; } " +

//@ ghost int p = (\\lbl AST \\old(k));     "

//@ ghost int kk =  (\\lbl AST2 \\old(k));     "

//@ set kk = (\\lbl AST3 k);      "

//@ set kk = (\\lbl AST4 \\old(k,lab));      "

//@ assert (i==0) <==> (* informal *);      return i; } " +

//@ ghost nullable java.lang.Class t; ghost nullable \\TYPE tt;     "

//@ set tt = (\\lbl A \\elemtype(\\typeof(o)));    "

//@ set tt = (\\lbl B \\elemtype(\\typeof(oo)));    "

//@ set tt = (\\lbl C \\elemtype(\\typeof(o3)));    "

//@ set t = (\\lbl D \\elemtype(java.lang.Class.class));    "

//@ set t = (\\lbl E \\elemtype(java.lang.Boolean[].class));    "

//@ requires JML.informal(\"asd\") && (\\lbl CLS \\erasure(\\typeof(i))) == Object.class;     " +

/*@nullable*/
//@ requires (\\lbl CLS \\typeof(i)) == \\type(Object);     " +

/*@nullable*/
//@ requires (\\lbl CLS \\typeof(i)) == \\type(Object);     " +

//@ assert (\\lbl AST \\typeof(true)) == \\typeof(true);     " +

//@ assert (\\lbl AST2 \\typeof((short)0)) != \\typeof(true);     " +

//@ assert (\\lbl AST3 \\typeof((long)0)) != \\typeof(true);     " +

//@ assert (\\lbl AST4 \\typeof((byte)0)) != \\typeof(true);     " +

//@ assert (\\lbl AST5 \\typeof('c')) != \\typeof(true);     " +

//@ assert (\\lbl AST6 \\typeof(\"c\")) != \\typeof(true);     " +

//@ assert (\\lbl AST7 \\typeof((float)0)) != \\typeof(true);     " +

//@ assert (\\lbl AST8 \\typeof((double)0)) != \\typeof(true);     " +

//@ assert (\\lbl AST9 \\typeof(5/0)) == \\typeof(5/0);     " +

//@ assert (\\lbl AST10 \\typeof(5.0/0.0)) != \\typeof(5/0);     " +

//@ requires (\\lbl CLS \\typeof(i)) == ( \\type(LinkedList<Integer>) );     " +

/*@nullable*/
//@ requires (\\lbl CLS \\typeof(i)) == ( \\type(LinkedList<Integer>) );     " +

/*@nullable*/
//@ requires (\\lbl CLS \\typeof(i)) != ( \\type(LinkedList<Integer>) );     " +

/*@nullable*/
//@ assert \    onnullelements(s2,s2null);     " +

//@ assert \    onnullelements(s2,s2);     " +

//@ assert \    onnullelements(s2null,new Integer[]{5/z});     " +

//@ assert (\\lbl ELEM \    onnullelements(o));     " +

/*@nullable*/
//@ assert (\\lbl ELEM \    onnullelements((\\lbl O o)));     " +

/*@nullable*/
//@ assert (\\lbl STRING \"def\") != null;     " +

//@ assert (\\lbl SHORT (short)(i)) != 0;     " +

//@ assert (\\lbl LONG (long)(i)) != 0;     " +

//@ assert (\\lbl BYTE (byte)(i)) != 0;     " +

//@ assert (\\lbl INT (int)(i)) != 0;     " +

//@ assert (\\lbl FLOAT (float)(i)) != 0;     " +

//@ assert (\\lbl DOUBLE (double)(i)) != 0;     " +

//@ assert (\\lbl CHAR n.charAt(0)) != 0;     " +

//@ assert (\\lbl BOOLEAN (i == 0)) ;     " +

//@ assert (\\lbl OBJECT o) == null;     " +

//@ assert (\\lbl STRING \"abc\") != null;     " +

/*@nullable*/
//@ assert (\\lbl OBJECT null) == null;     " +

//@ assert (\\lbl INT (int)(4)) != 0;     " +

//@ assert (\\lbl SHORT (short)(1)) != 0;     " +

//@ assert (\\lbl LONG (long)(2)) != 0;     " +

//@ assert (\\lbl BYTE (byte)(3)) != 0;     " +

//@ assert (\\lbl FLOAT (float)(5)) != 0;     " +

//@ assert (\\lbl DOUBLE (double)(6)) != 0;     " +

//@ assert (\\lbl CHAR 'a') != 0;     " +

//@ assert (\\lbl BOOLEAN true) ;     " +

//@ assert (\\lbl STRING \"abc\") != null;     " +

//@ ghost \\TYPE c;     " +

//@ set c = \\type(int);     " +

//@ set c = (\\lbl TYP1 c);     " +

//@ set c = \\type(boolean);     " +

//@ set c = (\\lbl TYP2 c);     " +

//@ ghost \\TYPE c;     " +

//@ set c = \\type(java.lang.Object);     " +

//@ set c = (\\lbl TYP1 c);     " +

//@ set c = \\type(Object);     " +

//@ set c = (\\lbl TYP2 c);     " +

//@ set c = \\type(java.lang.String);     " +

//@ set c = (\\lbl TYP3 c);     " +

//@ set c = \\type(String);     " +

//@ set c = (\\lbl TYP4 c);     " +

//@ ghost \\TYPE c;     " +

//@ set c = \\type(java.lang.String[]);     " +

//@ set c = (\\lbl TYP1 c);     " +

//@ set c = \\type(String[]);     " +

//@ set c = (\\lbl TYP2 c);     " +

//@ set c = \\type(java.lang.String[][]);     " +

//@ set c = (\\lbl TYP3 c);     " +

//@ set c = \\type(String[][]);     " +

//@ set c = (\\lbl TYP4 c);     " +

//@ ghost \\TYPE c;     " +

//@ set c = \\type(java.lang.Class<Integer>);     " +

//@ set c = (\\lbl TYP1 c);     " +

//@ ghost boolean bbb = (\\lbl TRUE Class.class == \\erasure(\\type(Class)));     " +

//@ set c = (\\lbl TYP2 c);     " +

//@ ghost \\TYPE c;     " +

//@ set c = \\type(int);     " +

//@ set c = (\\lbl TYP1 c);     " +

//@ set c = \\type(boolean);     " +

//@ set c = (\\lbl TYP2 c);     " +

//@ ghost \\TYPE c;     " +

//@ set c = \\type(java.lang.Object);     " +

//@ set c = (\\lbl TYP1 c);     " +

//@ set c = \\type(Object);     " +

//@ set c = (\\lbl TYP2 c);     " +

//@ set c = \\type(java.lang.String);     " +

//@ set c = (\\lbl TYP3 c);     " +

//@ set c = \\type(String);     " +

//@ set c = (\\lbl TYP4 c);     " +

//@ ghost \\TYPE c;     " +

//@ set c = \\type(java.lang.String[]);     " +

//@ set c = (\\lbl TYP1 c);     " +

//@ set c = \\type(String[]);     " +

//@ set c = (\\lbl TYP2 c);     " +

//@ set c = \\type(java.lang.String[][]);     " +

//@ set c = (\\lbl TYP3 c);     " +

//@ set c = \\type(String[][]);     " +

//@ set c = (\\lbl TYP4 c);     " +

//@ ghost \\TYPE c;     " +

//@ set c = \\type(java.lang.Class<Integer>);     " +

//@ set c = (\\lbl TYP1 c);     " +

//@ ghost boolean c;     " +

//@ set c = o.getClass() <: o.getClass();     " + // Object <: Object  // Class

//@ set c = (\\lbl TYP1 c);     " +

//@ set c = \\typeof(o) <: \\typeof(o);     " +  // Object <: Object // \TYPE

//@ set c = (\\lbl TYP2 c);     " +

//@ set c = \\typeof(o) <: \\typeof(oo);     " + // Object <: String // \TYPE

//@ set c = (\\lbl TYP3 c);     " +

//@ set c = \\typeof(oo) <: \\typeof(o);     " + // String <: Object // \TYPE

//@ set c = (\\lbl TYP4 c);     " +

//@ set c = \\typeof(ob) <: \\typeof(oo);     " + // Boolean <: String // \TYPE

//@ set c = (\\lbl TYP5 c);     " +

//@ ghost boolean c;     " +

//@ set c = s.getClass() <: b.getClass();     " + // String <: Boolean // Class

//@ set c = (\\lbl TYP1 c);     " +

//@ set c = \\typeof(s) <: \\typeof(b);     " +  // String <: Boolean // \TYPE

//@ set c = (\\lbl TYP2 c);     " +

//@ set c = \\type(int) <: \\typeof(o);     " + // int <: Object // \TYPE

//@ set c = (\\lbl TYP3 c);     " +

//@ set c = \\type(int) <: \\type(int);     " + // int <: int  // false

//@ set c = (\\lbl TYP4 c);     " +

//@ set c = \\type(int) <: \\type(boolean);     " + // int <: boolean

//@ set c = (\\lbl TYP5 c);     " +

//@ requires 10/i != 0;     " +

//@ ensures 10/(i-1) == 0;     " +

//@ requires i != 0;     " +

//@ requires 10/i == 10;     " +

//@ ghost public static int i = 0;      //@ public invariant i == 0;      //@ requires i == 1;     static public int m(); }");

//@ ghost static int i = 0;      //@ invariant i == 0;      //@ ensures i == 1;     static int m(); }");

//@ set i = 1;      return 0; }       public static void main(String[] args) { m(); System.out.println(\"END\"); }}"

/*@ model static pure public int mm() { return 5; } */
//@ ghost static public int i = 0;      "

//@ public invariant i == 0;      //@ ensures i == 1;     static public int m(); "

//@ set i = mm();     "

/*@ model public static class AA { static public int mm() { return 5; }} */
//@ ghost public static int i = 0;      "

//@ public invariant i == 0;      "

//@ ensures i == 0;     "

//@ set i = AA.mm();     "

/*@ model public static class AB { static public int mm() { return 5; }} */
//@ ghost public static int i = 0;      "

//@ public invariant i == 0;      "

//@ ensures i == 0;     "

//@ set i = AB.mm();     "

//@ static public invariant i == 0;      "

//@ static public invariant i == 0;      "

//@ public invariant i == 0;    "

//@ public invariant i == 0;"

//@ public invariant i == 0;"

//@ public invariant i == 0;"

//@ public invariant i == 0;"

//@ public initially i == 1;      "

//@ public initially j == 1;      "

//@ public invariant i == j;      "

/*@ assignable j; */
//@ constraint i == \\old(i)+1;      "

//@ invariant i == 0;      "

/*@ private helper */
//@ static model int i;     "

//@ static represents i \\such_that i == j+1;     "

//@ static model int i;      "

//@ static represents i = j+1;      "

//@ debug System.out.println(\"A \" + i);     "

//@ debug System.out.println(\"A \" + i);     "

//@ static ghost int ii;      "

//@ static model int i;      "

//@ static represents i \\such_that i==j+1;      "

//@ static represents i =j+1;      "

//@ debug System.out.println(\"A \" + i);     "

//@ debug System.out.println(\"A \" + i);     "

//@ static ghost int ii;      "

//@ static model int i;      "

//@ static represents i = j+1;      "

//@ static represents i = j;      "

//@ debug System.out.println(\"A \" + i);     "

//@ debug System.out.println(\"A \" + i);     "

//@  represents i = j+1;      "

//@ debug System.out.println(\"A \" + a.i);     "

//@ debug System.out.println(\"B \" + b.i);     "

//@ debug System.out.println(\"B \" + b.i);     "

//@ model  int i; 

//@  represents super.i = j+1;      "

//@ debug System.out.println(\"A \" + a.i);     "

//@ debug System.out.println(\"B \" + b.i);     "

//@ debug System.out.println(\"B \" + b.i);     "

//@ model protected int i; }    "

//@  model int i; represents i = j;     "

//@ debug System.out.println(\"A \" + a.i);     "

//@ debug System.out.println(\"B \" + b.i);     "

//@ model  int i; represents i = PA.j+1;     

//@ debug System.out.println(\"A \" + a.i);     "

//@ debug System.out.println(\"B \" + b.i);     "

//@ debug System.out.println(\"B \" + b.i);     "

//@ model  int i; 

//@ static model int i;     "

//@ debug System.out.println(\"A \" + i);     "

//@ ghost boolean n = (\\forall int i; 0<=i && i<=5; i >= 2);      "

//@ ghost boolean nn = (\\exists int i; 0<=i && i<=5; i >= 2);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost boolean n = (\\forall int i; 0<=i && i<=5; i >= 0);      "

//@ ghost boolean nn = (\\exists int i; 0<=i && i<=5; i >= 6);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost boolean n = (\\forall int i; ; i >= 0);      "

//@ ghost boolean nn = (\\exists int i; i == 4; i >= 6);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost boolean n = (\\forall int i; 0<i && i<=5; (\\exists int j; 0<=j && j < 5; j<i));      "

//@ ghost boolean nn = (\\forall int i; 0<=i && i<=5; (\\exists int j; 0<=j && j < 5; j<i));      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost long n1 = (\    um_of int i; 0 <= i && i <= 5; true);      "

//@ ghost long n2 = (\    um_of int i; 0 < i && i < 5; true);      "

//@ debug System.out.println(\"A \" + n1 + \" \" + n2);     "

//@ ghost long n = (\    um_of int i; 0 <= i && i < 5; i >= 2);      "

//@ ghost long nn = (\    um_of int i; 0 <= i && i < 5; false);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost int n = (\    um_of int i; 0 <= i && i < 5; i >= m);      "

//@ ghost int nn = (\    um_of int i; 0 <= i && i < 5; m > 0);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn );     "

//@ ensures (\    um_of int i; 0 <= i && i < 5; i >= m) == 3;    "

//@ ensures (\    um_of int i; 0 <= i && i < 5; i >= m) == 4;    "

//@ ghost long n1 = (\    um_of int i,j; 0 <= i && i <= 5 && 0 <= j && j < i; true);      "

//@ debug System.out.println(\"A \" + n1);     "

//@ ghost int n = (\\sum int i; 0<i && i<=5; i+1);      "

//@ ghost int nn = (\\sum int i; 0<i && i<0; i+1);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost int n = (\\product int i; 0<i && i<=5; i+1);      "

//@ ghost int nn = (\\product int i; 0<i && i<0; i+1);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost int n = (\\max int i; 0<=i && i<=5 && (i%2)==0; i+1);      "

//@ ghost int nn = (\\max int i; 0<i && i<0; i+1);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost int n = (\\max int i; 0<=i && i<=5 && (i%2)==0; inc(i));      "

//@ ghost int nn = (\\max int i; -9<=i && i<=5 ; Math.abs(i));      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost short n1 = (\\max int i; 0<=i && i<=5; (short)(i+10));      "

//@ ghost short n2 = (\\min int i; 0<=i && i<=5; (short)(i+10));      "

//@ debug System.out.println(\"A \" + n1 + \" \" + n2);     "

//@ ghost short n1 = (\\max short i; 2<=i && i<=5; i);      "

//@ ghost short n2 = (\\min short i; 2<=i && i<=5; i);      "

//@ debug System.out.println(\"A \" + n1 + \" \" + n2);     "

//@ ghost byte n1 = (\\max int i; 2<=i && i<=5; (byte)i);      "

//@ ghost byte n2 = (\\min int i; 2<=i && i<=5; (byte)i);      "

//@ debug System.out.println(\"A \" + n1 + \" \" + n2);     "

//@ ghost byte n1 = (\\max byte i; 2<=i && i<=5; i);      "

//@ ghost byte n2 = (\\min byte i; 2<=i && i<=5; i);      "

//@ debug System.out.println(\"A \" + n1 + \" \" + n2);     "

//@ ghost long n1 = (\\max int i; 0<=i && i<=5; (i+10L));      "

//@ ghost long n2 = (\\min int i; 0<=i && i<=5; (i+10L));      "

//@ debug System.out.println(\"A \" + n1 + \" \" + n2);     "

//@ ghost long n1 = (\\max long i; 0<=i && i<=5; (i+10L));      "

//@ ghost long n2 = (\\min long i; 0<=i && i<=5; (i+10L));      "

//@ debug System.out.println(\"A \" + n1 + \" \" + n2);     "

//@ ghost double n1 = (\\max int i; 0<=i && i<=5; (double)(i+10.5));      "

//@ ghost double n2 = (\\min int i; 0<=i && i<=5; (double)(i+10.5));      "

//@ debug System.out.println(\"A \" + n1 + \" \" + n2);     "

//@ ghost float n1 = (\\max int i; 0<=i && i<=5; (float)(i+10.5));      "

//@ ghost float n2 = (\\min int i; 0<=i && i<=5; (float)(i+10.5));      "

//@ debug System.out.println(\"A \" + n1 + \" \" + n2);     "

//@ ghost char n1 = (\\max int i; 'a'<i && i<='q'; (char)i);      "

//@ ghost char n2 = (\\min int i; 'a'<i && i<='q'; (char)i);      "

//@ debug System.out.println(\"A \" + n1 + \" \" + n2);     "

//@ ghost char n1 = (\\max char i; 'a'<i && i<='q'; i);      "

//@ ghost char n2 = (\\min char i; 'a'<i && i<='q'; i);      "

//@ debug System.out.println(\"A \" + n1 + \" \" + n2);     "

//@ ghost int n = (\\min int i; 0<=i && i<=5 && (i%2)==1; i+1);      "

//@ ghost int nn = (\\min int i; 0<i && i<0; i+1);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost long n = (\\max int i; 0<=i && i<=5 && (i%2)==0; (long)i+1);      "

//@ ghost long nn = (\\max int i; 0<i && i<0; i+1);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost long n = (\\min int i; 0<=i && i<=5 && (i%2)==1; (long)i+1);      "

//@ ghost long nn = (\\min int i; 0<i && i<0; i+1);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost double n = (\\max int i; 0<=i && i<=5 && (i%2)==0; (double)i+1);      "

//@ ghost double nn = (\\max int i; 0<i && i<0; i+1);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost double n = (\\min int i; 0<=i && i<=5 && (i%2)==1; (double)i+1);      "

//@ ghost double nn = (\\min int i; 0<i && i<0; (double)i+1);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost int n = (\\sum boolean i; bb; (i?2:5));      "

//@ ghost int nn = (\\sum boolean i; !i; (i?2:5));      "

//@ ghost int nnn = (\\sum boolean i; i; (i?2:5));      "

//@ ghost int nnnn = (\\sum boolean i; false; (i?2:5));      "

//@ debug System.out.println(\"A \" + n + \" \" + nn + \" \" + nnn + \" \" + nnnn);     "

//@ ghost int n = (\    um_of Object o; list.contains(o); true);      "

//@ ghost int nn = (\    um_of Object o; list.contains(o) && true; true);      "

//@ ghost int nnn = (\    um_of Object o; list.contains(o) && o == oo; true);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn + \" \" + nnn);     "

//@ model int i; );

//@ debug System.out.println(\"A \" + a.i);     "

//@ debug System.out.println(\"B \" + b.i);     "

//@ debug System.out.println(\"B \" + b.i);     "

//@ model int i; );

//@ debug System.out.println(\"A \" + a.i);     "

//@ debug System.out.println(\"B \" + b.i);     "

//@ debug System.out.println(\"B \" + b.i);     "

/*@non_null*/
/*@ non_null*/
//@ model  int i; represents i = 0; 

/*@non_null*/
/*@nullable*/
/*@nullable*/
//@ ghost int k; set k = A.i;    "

//@ set k = a.i;    "

//@ set k = a.b.i;    "

/*@nullable_by_default*/
/*@non_null*/
 ghost static Object oooo = null;    "

/*@ non_null*/
//@ ghost non_null String loc = null;     "

/*@nullable*/
//@ nullable ghost static Object oooo = null;    "

/*@ nullable*/
//@ ghost String loc = null;     "

/*@nullable*/
//@ static invariant o != ooo;    "

//@ nullable ghost static Object oooo = null;    "

/*@ nullable*/
//@ ghost String loc = null;     "

//@ axiom true;    "

//@ public invariant \\duration(true) == 0;    "

//@ public model long i;    "

//@ public represents i =  \\duration(true);    "

//@ public constraint \\duration(true) == 0;    "

//@ public initially \\duration(true) == 0;    "

//@ hence_by true;     "

//@ assert \\duration(true) == 0;    "

//@ assume \\duration(true) == 0;    "

//@ ghost long k = \\duration(true);    "

//@ set k = \\duration(true);    "

//@ debug k = \\duration(true);    "

//@ ghost long z = \\duration(true);    "

//@ ghost long[] zz = { \\duration(true) } ;    "

/*@ requires \\duration(true) == 0;*/
//@ ensures \\duration(true) == 0;    "

//@ signals (Exception ex) \\duration(true) == 0;    "

//@ signals_only RuntimeException;    "

//@ diverges \\duration(true) == 0;    " // line 23

//@ duration  \\duration(true);    "

//@ working_space \\duration(true);    "

//@   requires \\duration(true) == 0;    "

//@   ensures true;    "

//@ also    "

//@   requires \\duration(true) == 0;    "

//@   signals (Exception ex) true;    "

//@ also    "

//@   requires \\duration(true) == 0;    "

//@   signals_only RuntimeException;    "

//@ also    "

//@   ensures true;    "

//@public  invariant i == 1;     "

//@ public invariant i == 2;     "

//@ public invariant i == 3;     "

//@ public invariant i == 2;     "

//@ public invariant i == 3;     "

//@public  invariant i == 1;     "

//@ static public invariant i == 2;     "

//@ static public invariant i == 3;     "

//@ static public invariant i == 1;     "

//@ also ensures i == 2;     "

//@ also ensures i == 3;     "

//@ ensures false;     "

//@ also ensures i == 2;     "

//@ also private behavior ensures i == 2;     "

//@ also ensures i == 3;     "

//@ ensures false;     "

//@ also ensures i == 2;     "

//@ requires kc == 3; ensures i == 3;     "

//@ also requires kb == 2; ensures i == 2;     "

//@ also requires ka==1; ensures i == 1;     "

//@ requires i > 0;    "

//@ modifies j;    "

//@ ensures j == i;    "

//@ ensures j == 1;    "

//@ requires i > 0;    "

//@ modifies j;    "

//@ ensures j == i;    "

//@ ensures j == 1;    "

//@ requires i > 0;    "

//@ modifies k;    "

//@ ensures j == i;    "

//@ ensures j == 1;    "

/*@ assert i == 0; */
/*@ assert i == -1; */
//@ assert false;      } " +

//@ assert false;            } " +

//@ assert false;      } " +

//@ ensures \\result == i;    "

//@ ensures \\result == i+1;    "

//@ loop_invariant sum >= 0;     "

//@ assert sum >= 0;     "

//@ loop_invariant sum >= 0;     "

//@ assert sum > 0;     "

//@ loop_invariant sum >= 0;     "

/*@ assume o >= 0; */
//@ assert sum >= 0;     "

//@ loop_invariant sum >= 0;     "

/*@ assume o >= 0; */
//@ assert sum > 0;     "

//@ old int kk = k; requires i > kk; assignable k; ensures k == i+1; ensures kk == 5;    "

//@ also    "

//@ old int kkk = k+1; requires i < kkk; assignable k; ensures k == i-1; ensures kkk == 7;    "

//@ old int kk = k; requires i > kk; assignable k; ensures k == i+1; ensures kk == 5;    "

//@ also    " // Purposely duplicating the name of the old variable

//@ old int kk = k+1; requires i < kk; assignable k; ensures k == i-1; ensures kk == 7;    "

//@ old int kk = k;    "

//@ {| requires i > kk; assignable k; ensures k == i+1; ensures kk == 5;    "

//@ also    "

//@    requires i < kk; assignable k; ensures k == i-1; ensures kk == 6;    "

//@ |}    "

//@ public normal_behavior     "

//@   requires true;     "

//@ show i, j+1;    "

//@ show k;    "

//@ assert k > 0;    "

//@ show m,k;    "

//@ assert m > 0;    "

//@ ghost int i = 0;      //@ set i = 1;      //@ set System.out.println(i);      System.out.println(\"END\"); }}"

//@ assert false;      System.out.println(\"END\"); }}"

//@ assert false: \"ABC\";      System.out.println(\"END\"); }}"

//@ assert false: (int)args.length;      System.out.println(\"END\"); }}"

//@ assert true: args.length;      System.out.println(\"END\"); }}"

//@ assume false;      System.out.println(\"END\"); }}"

//@ assume false: \"DEF\";      System.out.println(\"END\"); }}"

//@ unreachable;      System.out.println(\"END\"); }}"

/*@ requires i == 0; */
/*@ requires i != 0; */
/*@ requires i > 0; */
/*@ requires i < 0; */
//@ nowarn Precondition;    " +

/*@ requires i != 0; */
//@ nowarn Precondition;    " +

/*@ requires true; */
/*@non_null*/
/*@non_null*/
/*@ requires true; */
/*@non_null*/
/*@non_null*/
/*@nullable*/
/*@ ensures k == i; */
/*@ ensures k == 0; */
/*@ nowarn Postcondition;*/
/*@ ensures k == 0; */
/*@ nowarn Postcondition;*/
/*@ requires true;     also     requires false;     ensures k == 0; */
/*@ requires true;     ensures true;     also     requires false;     ensures k == 0; */
/*@ requires true;     " +
                "     ensures k != i;     " +
                "     also     " +
                "     requires true;     " +
                "     ensures k == 0; */
/*@   requires true;     "
                +"        ensures k != i;     "
                +"      also     "
                +"        requires true;     "
                +"        ensures k == 0; */
/*@ requires true;     "
                +"     signals (java.io.FileNotFoundException e) e == null; */
/*@ requires true;     signals (java.io.FileNotFoundException e) e == null; */
/*@ requires true;     signals_only \    othing; */
/*@ requires true;     signals_only java.io.FileNotFoundException; */
/*@ requires true;     signals_only java.io.FileNotFoundException; */
/*@ requires true;     */
/*@ requires true;     */
/*@ ensures \\result == 4; */
/*@ ensures \\result == 4; */
/*@ ensures (\\lbl ENS \\result == 1); */
/*@ ensures (\\lbl ENS (\\lbl RES \\result) == 1); */
/*@ ensures (\\lbl ENS \\old(k)) == k; */
//@ assert (\\lbl AST \\old(k)) == 0;      k=i; //@ assert (\\lbl AST2 \\old(k)) == 0;     //@ assert (\\lbl AST3 k) == 0;      return i; } " +

//@ ghost int p = (\\lbl AST \\old(k));     "

//@ ghost int kk =  (\\lbl AST2 \\old(k));     "

//@ set kk = (\\lbl AST3 k);      "

//@ set kk = (\\lbl AST4 \\old(k,lab));      "

//@ assert (i==0) <==> (* informal *);      return i; } " +

//@ ghost nullable java.lang.Class t; ghost nullable \\TYPE tt;     "

//@ set tt = (\\lbl A \\elemtype(\\typeof(o)));    "

//@ set tt = (\\lbl B \\elemtype(\\typeof(oo)));    "

//@ set tt = (\\lbl C \\elemtype(\\typeof(o3)));    "

//@ set t = (\\lbl D \\elemtype(java.lang.Class.class));    "

//@ set t = (\\lbl E \\elemtype(java.lang.Boolean[].class));    "

//@ requires JML.informal(\"asd\") && (\\lbl CLS \\erasure(\\typeof(i))) == Object.class;     " +

/*@nullable*/
//@ requires (\\lbl CLS \\typeof(i)) == \\type(Object);     " +

/*@nullable*/
//@ requires (\\lbl CLS \\typeof(i)) == \\type(Object);     " +

//@ assert (\\lbl AST \\typeof(true)) == \\typeof(true);     " +

//@ assert (\\lbl AST2 \\typeof((short)0)) != \\typeof(true);     " +

//@ assert (\\lbl AST3 \\typeof((long)0)) != \\typeof(true);     " +

//@ assert (\\lbl AST4 \\typeof((byte)0)) != \\typeof(true);     " +

//@ assert (\\lbl AST5 \\typeof('c')) != \\typeof(true);     " +

//@ assert (\\lbl AST6 \\typeof(\"c\")) != \\typeof(true);     " +

//@ assert (\\lbl AST7 \\typeof((float)0)) != \\typeof(true);     " +

//@ assert (\\lbl AST8 \\typeof((double)0)) != \\typeof(true);     " +

//@ assert (\\lbl AST9 \\typeof(5/0)) == \\typeof(5/0);     " +

//@ assert (\\lbl AST10 \\typeof(5.0/0.0)) != \\typeof(5/0);     " +

//@ requires (\\lbl CLS \\typeof(i)) == ( \\type(LinkedList<Integer>) );     " +

/*@nullable*/
//@ requires (\\lbl CLS \\typeof(i)) == ( \\type(LinkedList<Integer>) );     " +

/*@nullable*/
//@ requires (\\lbl CLS \\typeof(i)) != ( \\type(LinkedList<Integer>) );     " +

/*@nullable*/
//@ assert \    onnullelements(s2,s2null);     " +

//@ assert \    onnullelements(s2,s2);     " +

//@ assert \    onnullelements(s2null,new Integer[]{5/z});     " +

//@ assert (\\lbl ELEM \    onnullelements(o));     " +

/*@nullable*/
//@ assert (\\lbl ELEM \    onnullelements((\\lbl O o)));     " +

/*@nullable*/
//@ assert (\\lbl STRING \"def\") != null;     " +

//@ assert (\\lbl SHORT (short)(i)) != 0;     " +

//@ assert (\\lbl LONG (long)(i)) != 0;     " +

//@ assert (\\lbl BYTE (byte)(i)) != 0;     " +

//@ assert (\\lbl INT (int)(i)) != 0;     " +

//@ assert (\\lbl FLOAT (float)(i)) != 0;     " +

//@ assert (\\lbl DOUBLE (double)(i)) != 0;     " +

//@ assert (\\lbl CHAR n.charAt(0)) != 0;     " +

//@ assert (\\lbl BOOLEAN (i == 0)) ;     " +

//@ assert (\\lbl OBJECT o) == null;     " +

//@ assert (\\lbl STRING \"abc\") != null;     " +

/*@nullable*/
//@ assert (\\lbl OBJECT null) == null;     " +

//@ assert (\\lbl INT (int)(4)) != 0;     " +

//@ assert (\\lbl SHORT (short)(1)) != 0;     " +

//@ assert (\\lbl LONG (long)(2)) != 0;     " +

//@ assert (\\lbl BYTE (byte)(3)) != 0;     " +

//@ assert (\\lbl FLOAT (float)(5)) != 0;     " +

//@ assert (\\lbl DOUBLE (double)(6)) != 0;     " +

//@ assert (\\lbl CHAR 'a') != 0;     " +

//@ assert (\\lbl BOOLEAN true) ;     " +

//@ assert (\\lbl STRING \"abc\") != null;     " +

//@ ghost \\TYPE c;     " +

//@ set c = \\type(int);     " +

//@ set c = (\\lbl TYP1 c);     " +

//@ set c = \\type(boolean);     " +

//@ set c = (\\lbl TYP2 c);     " +

//@ ghost \\TYPE c;     " +

//@ set c = \\type(java.lang.Object);     " +

//@ set c = (\\lbl TYP1 c);     " +

//@ set c = \\type(Object);     " +

//@ set c = (\\lbl TYP2 c);     " +

//@ set c = \\type(java.lang.String);     " +

//@ set c = (\\lbl TYP3 c);     " +

//@ set c = \\type(String);     " +

//@ set c = (\\lbl TYP4 c);     " +

//@ ghost \\TYPE c;     " +

//@ set c = \\type(java.lang.String[]);     " +

//@ set c = (\\lbl TYP1 c);     " +

//@ set c = \\type(String[]);     " +

//@ set c = (\\lbl TYP2 c);     " +

//@ set c = \\type(java.lang.String[][]);     " +

//@ set c = (\\lbl TYP3 c);     " +

//@ set c = \\type(String[][]);     " +

//@ set c = (\\lbl TYP4 c);     " +

//@ ghost \\TYPE c;     " +

//@ set c = \\type(java.lang.Class<Integer>);     " +

//@ set c = (\\lbl TYP1 c);     " +

//@ ghost boolean bbb = (\\lbl TRUE Class.class == \\erasure(\\type(Class)));     " +

//@ set c = (\\lbl TYP2 c);     " +

//@ ghost \\TYPE c;     " +

//@ set c = \\type(int);     " +

//@ set c = (\\lbl TYP1 c);     " +

//@ set c = \\type(boolean);     " +

//@ set c = (\\lbl TYP2 c);     " +

//@ ghost \\TYPE c;     " +

//@ set c = \\type(java.lang.Object);     " +

//@ set c = (\\lbl TYP1 c);     " +

//@ set c = \\type(Object);     " +

//@ set c = (\\lbl TYP2 c);     " +

//@ set c = \\type(java.lang.String);     " +

//@ set c = (\\lbl TYP3 c);     " +

//@ set c = \\type(String);     " +

//@ set c = (\\lbl TYP4 c);     " +

//@ ghost \\TYPE c;     " +

//@ set c = \\type(java.lang.String[]);     " +

//@ set c = (\\lbl TYP1 c);     " +

//@ set c = \\type(String[]);     " +

//@ set c = (\\lbl TYP2 c);     " +

//@ set c = \\type(java.lang.String[][]);     " +

//@ set c = (\\lbl TYP3 c);     " +

//@ set c = \\type(String[][]);     " +

//@ set c = (\\lbl TYP4 c);     " +

//@ ghost \\TYPE c;     " +

//@ set c = \\type(java.lang.Class<Integer>);     " +

//@ set c = (\\lbl TYP1 c);     " +

//@ ghost boolean c;     " +

//@ set c = o.getClass() <: o.getClass();     " + // Object <: Object  // Class

//@ set c = (\\lbl TYP1 c);     " +

//@ set c = \\typeof(o) <: \\typeof(o);     " +  // Object <: Object // \TYPE

//@ set c = (\\lbl TYP2 c);     " +

//@ set c = \\typeof(o) <: \\typeof(oo);     " + // Object <: String // \TYPE

//@ set c = (\\lbl TYP3 c);     " +

//@ set c = \\typeof(oo) <: \\typeof(o);     " + // String <: Object // \TYPE

//@ set c = (\\lbl TYP4 c);     " +

//@ set c = \\typeof(ob) <: \\typeof(oo);     " + // Boolean <: String // \TYPE

//@ set c = (\\lbl TYP5 c);     " +

//@ ghost boolean c;     " +

//@ set c = s.getClass() <: b.getClass();     " + // String <: Boolean // Class

//@ set c = (\\lbl TYP1 c);     " +

//@ set c = \\typeof(s) <: \\typeof(b);     " +  // String <: Boolean // \TYPE

//@ set c = (\\lbl TYP2 c);     " +

//@ set c = \\type(int) <: \\typeof(o);     " + // int <: Object // \TYPE

//@ set c = (\\lbl TYP3 c);     " +

//@ set c = \\type(int) <: \\type(int);     " + // int <: int  // false

//@ set c = (\\lbl TYP4 c);     " +

//@ set c = \\type(int) <: \\type(boolean);     " + // int <: boolean

//@ set c = (\\lbl TYP5 c);     " +

//@ requires 10/i != 0;     " +

//@ ensures 10/(i-1) == 0;     " +

//@ requires i != 0;     " +

//@ requires 10/i == 10;     " +

//@ ghost public static int i = 0;      //@ public invariant i == 0;      //@ requires i == 1;     static public int m(); }");

//@ ghost static int i = 0;      //@ invariant i == 0;      //@ ensures i == 1;     static int m(); }");

//@ set i = 1;      return 0; }       public static void main(String[] args) { m(); System.out.println(\"END\"); }}"

/*@ model static pure public int mm() { return 5; } */
//@ ghost static public int i = 0;      "

//@ public invariant i == 0;      //@ ensures i == 1;     static public int m(); "

//@ set i = mm();     "

/*@ model public static class AA { static public int mm() { return 5; }} */
//@ ghost public static int i = 0;      "

//@ public invariant i == 0;      "

//@ ensures i == 0;     "

//@ set i = AA.mm();     "

/*@ model public static class AB { static public int mm() { return 5; }} */
//@ ghost public static int i = 0;      "

//@ public invariant i == 0;      "

//@ ensures i == 0;     "

//@ set i = AB.mm();     "

//@ static public invariant i == 0;      "

//@ static public invariant i == 0;      "

//@ public invariant i == 0;    "

//@ public invariant i == 0;"

//@ public invariant i == 0;"

//@ public invariant i == 0;"

//@ public invariant i == 0;"

//@ public initially i == 1;      "

//@ public initially j == 1;      "

//@ public invariant i == j;      "

/*@ assignable j; */
//@ constraint i == \\old(i)+1;      "

//@ invariant i == 0;      "

/*@ private helper */
//@ static model int i;     "

//@ static represents i \\such_that i == j+1;     "

//@ static model int i;      "

//@ static represents i = j+1;      "

//@ debug System.out.println(\"A \" + i);     "

//@ debug System.out.println(\"A \" + i);     "

//@ static ghost int ii;      "

//@ static model int i;      "

//@ static represents i \\such_that i==j+1;      "

//@ static represents i =j+1;      "

//@ debug System.out.println(\"A \" + i);     "

//@ debug System.out.println(\"A \" + i);     "

//@ static ghost int ii;      "

//@ static model int i;      "

//@ static represents i = j+1;      "

//@ static represents i = j;      "

//@ debug System.out.println(\"A \" + i);     "

//@ debug System.out.println(\"A \" + i);     "

//@  represents i = j+1;      "

//@ debug System.out.println(\"A \" + a.i);     "

//@ debug System.out.println(\"B \" + b.i);     "

//@ debug System.out.println(\"B \" + b.i);     "

//@ model  int i; 

//@  represents super.i = j+1;      "

//@ debug System.out.println(\"A \" + a.i);     "

//@ debug System.out.println(\"B \" + b.i);     "

//@ debug System.out.println(\"B \" + b.i);     "

//@ model protected int i; }    "

//@  model int i; represents i = j;     "

//@ debug System.out.println(\"A \" + a.i);     "

//@ debug System.out.println(\"B \" + b.i);     "

//@ model  int i; represents i = PA.j+1;     

//@ debug System.out.println(\"A \" + a.i);     "

//@ debug System.out.println(\"B \" + b.i);     "

//@ debug System.out.println(\"B \" + b.i);     "

//@ model  int i; 

//@ static model int i;     "

//@ debug System.out.println(\"A \" + i);     "

//@ ghost boolean n = (\\forall int i; 0<=i && i<=5; i >= 2);      "

//@ ghost boolean nn = (\\exists int i; 0<=i && i<=5; i >= 2);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost boolean n = (\\forall int i; 0<=i && i<=5; i >= 0);      "

//@ ghost boolean nn = (\\exists int i; 0<=i && i<=5; i >= 6);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost boolean n = (\\forall int i; ; i >= 0);      "

//@ ghost boolean nn = (\\exists int i; i == 4; i >= 6);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost boolean n = (\\forall int i; 0<i && i<=5; (\\exists int j; 0<=j && j < 5; j<i));      "

//@ ghost boolean nn = (\\forall int i; 0<=i && i<=5; (\\exists int j; 0<=j && j < 5; j<i));      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost long n1 = (\    um_of int i; 0 <= i && i <= 5; true);      "

//@ ghost long n2 = (\    um_of int i; 0 < i && i < 5; true);      "

//@ debug System.out.println(\"A \" + n1 + \" \" + n2);     "

//@ ghost long n = (\    um_of int i; 0 <= i && i < 5; i >= 2);      "

//@ ghost long nn = (\    um_of int i; 0 <= i && i < 5; false);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost int n = (\    um_of int i; 0 <= i && i < 5; i >= m);      "

//@ ghost int nn = (\    um_of int i; 0 <= i && i < 5; m > 0);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn );     "

//@ ensures (\    um_of int i; 0 <= i && i < 5; i >= m) == 3;    "

//@ ensures (\    um_of int i; 0 <= i && i < 5; i >= m) == 4;    "

//@ ghost long n1 = (\    um_of int i,j; 0 <= i && i <= 5 && 0 <= j && j < i; true);      "

//@ debug System.out.println(\"A \" + n1);     "

//@ ghost int n = (\\sum int i; 0<i && i<=5; i+1);      "

//@ ghost int nn = (\\sum int i; 0<i && i<0; i+1);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost int n = (\\product int i; 0<i && i<=5; i+1);      "

//@ ghost int nn = (\\product int i; 0<i && i<0; i+1);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost int n = (\\max int i; 0<=i && i<=5 && (i%2)==0; i+1);      "

//@ ghost int nn = (\\max int i; 0<i && i<0; i+1);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost int n = (\\max int i; 0<=i && i<=5 && (i%2)==0; inc(i));      "

//@ ghost int nn = (\\max int i; -9<=i && i<=5 ; Math.abs(i));      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost short n1 = (\\max int i; 0<=i && i<=5; (short)(i+10));      "

//@ ghost short n2 = (\\min int i; 0<=i && i<=5; (short)(i+10));      "

//@ debug System.out.println(\"A \" + n1 + \" \" + n2);     "

//@ ghost short n1 = (\\max short i; 2<=i && i<=5; i);      "

//@ ghost short n2 = (\\min short i; 2<=i && i<=5; i);      "

//@ debug System.out.println(\"A \" + n1 + \" \" + n2);     "

//@ ghost byte n1 = (\\max int i; 2<=i && i<=5; (byte)i);      "

//@ ghost byte n2 = (\\min int i; 2<=i && i<=5; (byte)i);      "

//@ debug System.out.println(\"A \" + n1 + \" \" + n2);     "

//@ ghost byte n1 = (\\max byte i; 2<=i && i<=5; i);      "

//@ ghost byte n2 = (\\min byte i; 2<=i && i<=5; i);      "

//@ debug System.out.println(\"A \" + n1 + \" \" + n2);     "

//@ ghost long n1 = (\\max int i; 0<=i && i<=5; (i+10L));      "

//@ ghost long n2 = (\\min int i; 0<=i && i<=5; (i+10L));      "

//@ debug System.out.println(\"A \" + n1 + \" \" + n2);     "

//@ ghost long n1 = (\\max long i; 0<=i && i<=5; (i+10L));      "

//@ ghost long n2 = (\\min long i; 0<=i && i<=5; (i+10L));      "

//@ debug System.out.println(\"A \" + n1 + \" \" + n2);     "

//@ ghost double n1 = (\\max int i; 0<=i && i<=5; (double)(i+10.5));      "

//@ ghost double n2 = (\\min int i; 0<=i && i<=5; (double)(i+10.5));      "

//@ debug System.out.println(\"A \" + n1 + \" \" + n2);     "

//@ ghost float n1 = (\\max int i; 0<=i && i<=5; (float)(i+10.5));      "

//@ ghost float n2 = (\\min int i; 0<=i && i<=5; (float)(i+10.5));      "

//@ debug System.out.println(\"A \" + n1 + \" \" + n2);     "

//@ ghost char n1 = (\\max int i; 'a'<i && i<='q'; (char)i);      "

//@ ghost char n2 = (\\min int i; 'a'<i && i<='q'; (char)i);      "

//@ debug System.out.println(\"A \" + n1 + \" \" + n2);     "

//@ ghost char n1 = (\\max char i; 'a'<i && i<='q'; i);      "

//@ ghost char n2 = (\\min char i; 'a'<i && i<='q'; i);      "

//@ debug System.out.println(\"A \" + n1 + \" \" + n2);     "

//@ ghost int n = (\\min int i; 0<=i && i<=5 && (i%2)==1; i+1);      "

//@ ghost int nn = (\\min int i; 0<i && i<0; i+1);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost long n = (\\max int i; 0<=i && i<=5 && (i%2)==0; (long)i+1);      "

//@ ghost long nn = (\\max int i; 0<i && i<0; i+1);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost long n = (\\min int i; 0<=i && i<=5 && (i%2)==1; (long)i+1);      "

//@ ghost long nn = (\\min int i; 0<i && i<0; i+1);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost double n = (\\max int i; 0<=i && i<=5 && (i%2)==0; (double)i+1);      "

//@ ghost double nn = (\\max int i; 0<i && i<0; i+1);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost double n = (\\min int i; 0<=i && i<=5 && (i%2)==1; (double)i+1);      "

//@ ghost double nn = (\\min int i; 0<i && i<0; (double)i+1);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost int n = (\\sum boolean i; bb; (i?2:5));      "

//@ ghost int nn = (\\sum boolean i; !i; (i?2:5));      "

//@ ghost int nnn = (\\sum boolean i; i; (i?2:5));      "

//@ ghost int nnnn = (\\sum boolean i; false; (i?2:5));      "

//@ debug System.out.println(\"A \" + n + \" \" + nn + \" \" + nnn + \" \" + nnnn);     "

//@ ghost int n = (\    um_of Object o; list.contains(o); true);      "

//@ ghost int nn = (\    um_of Object o; list.contains(o) && true; true);      "

//@ ghost int nnn = (\    um_of Object o; list.contains(o) && o == oo; true);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn + \" \" + nnn);     "

//@ model int i; );

//@ debug System.out.println(\"A \" + a.i);     "

//@ debug System.out.println(\"B \" + b.i);     "

//@ debug System.out.println(\"B \" + b.i);     "

//@ model int i; );

//@ debug System.out.println(\"A \" + a.i);     "

//@ debug System.out.println(\"B \" + b.i);     "

//@ debug System.out.println(\"B \" + b.i);     "

/*@non_null*/
/*@ non_null*/
//@ model  int i; represents i = 0; 

/*@non_null*/
/*@nullable*/
/*@nullable*/
//@ ghost int k; set k = A.i;    "

//@ set k = a.i;    "

//@ set k = a.b.i;    "

/*@nullable_by_default*/
/*@non_null*/
 ghost static Object oooo = null;    "

/*@ non_null*/
//@ ghost non_null String loc = null;     "

/*@nullable*/
//@ nullable ghost static Object oooo = null;    "

/*@ nullable*/
//@ ghost String loc = null;     "

/*@nullable*/
//@ static invariant o != ooo;    "

//@ nullable ghost static Object oooo = null;    "

/*@ nullable*/
//@ ghost String loc = null;     "

//@ axiom true;    "

//@ public invariant \\duration(true) == 0;    "

//@ public model long i;    "

//@ public represents i =  \\duration(true);    "

//@ public constraint \\duration(true) == 0;    "

//@ public initially \\duration(true) == 0;    "

//@ hence_by true;     "

//@ assert \\duration(true) == 0;    "

//@ assume \\duration(true) == 0;    "

//@ ghost long k = \\duration(true);    "

//@ set k = \\duration(true);    "

//@ debug k = \\duration(true);    "

//@ ghost long z = \\duration(true);    "

//@ ghost long[] zz = { \\duration(true) } ;    "

/*@ requires \\duration(true) == 0;*/
//@ ensures \\duration(true) == 0;    "

//@ signals (Exception ex) \\duration(true) == 0;    "

//@ signals_only RuntimeException;    "

//@ diverges \\duration(true) == 0;    " // line 23

//@ duration  \\duration(true);    "

//@ working_space \\duration(true);    "

//@   requires \\duration(true) == 0;    "

//@   ensures true;    "

//@ also    "

//@   requires \\duration(true) == 0;    "

//@   signals (Exception ex) true;    "

//@ also    "

//@   requires \\duration(true) == 0;    "

//@   signals_only RuntimeException;    "

//@ also    "

//@   ensures true;    "

//@public  invariant i == 1;     "

//@ public invariant i == 2;     "

//@ public invariant i == 3;     "

//@ public invariant i == 2;     "

//@ public invariant i == 3;     "

//@public  invariant i == 1;     "

//@ static public invariant i == 2;     "

//@ static public invariant i == 3;     "

//@ static public invariant i == 1;     "

//@ also ensures i == 2;     "

//@ also ensures i == 3;     "

//@ ensures false;     "

//@ also ensures i == 2;     "

//@ also private behavior ensures i == 2;     "

//@ also ensures i == 3;     "

//@ ensures false;     "

//@ also ensures i == 2;     "

//@ requires kc == 3; ensures i == 3;     "

//@ also requires kb == 2; ensures i == 2;     "

//@ also requires ka==1; ensures i == 1;     "

//@ requires i > 0;    "

//@ modifies j;    "

//@ ensures j == i;    "

//@ ensures j == 1;    "

//@ requires i > 0;    "

//@ modifies j;    "

//@ ensures j == i;    "

//@ ensures j == 1;    "

//@ requires i > 0;    "

//@ modifies k;    "

//@ ensures j == i;    "

//@ ensures j == 1;    "

/*@ assert i == 0; */
/*@ assert i == -1; */
//@ assert false;      } " +

//@ assert false;            } " +

//@ assert false;      } " +

//@ ensures \\result == i;    "

//@ ensures \\result == i+1;    "

//@ loop_invariant sum >= 0;     "

//@ assert sum >= 0;     "

//@ loop_invariant sum >= 0;     "

//@ assert sum > 0;     "

//@ loop_invariant sum >= 0;     "

/*@ assume o >= 0; */
//@ assert sum >= 0;     "

//@ loop_invariant sum >= 0;     "

/*@ assume o >= 0; */
//@ assert sum > 0;     "

//@ old int kk = k; requires i > kk; assignable k; ensures k == i+1; ensures kk == 5;    "

//@ also    "

//@ old int kkk = k+1; requires i < kkk; assignable k; ensures k == i-1; ensures kkk == 7;    "

//@ old int kk = k; requires i > kk; assignable k; ensures k == i+1; ensures kk == 5;    "

//@ also    " // Purposely duplicating the name of the old variable

//@ old int kk = k+1; requires i < kk; assignable k; ensures k == i-1; ensures kk == 7;    "

//@ old int kk = k;    "

//@ {| requires i > kk; assignable k; ensures k == i+1; ensures kk == 5;    "

//@ also    "

//@    requires i < kk; assignable k; ensures k == i-1; ensures kk == 6;    "

//@ |}    "

//@ public normal_behavior     "

//@   requires true;     "

//@ show i, j+1;    "

//@ show k;    "

//@ assert k > 0;    "

//@ show m,k;    "

//@ assert m > 0;    "

//@ ghost int i = 0;      //@ set i = 1;      //@ set System.out.println(i);      System.out.println(\"END\"); }}"

//@ assert false;      System.out.println(\"END\"); }}"

//@ assert false: \"ABC\";      System.out.println(\"END\"); }}"

//@ assert false: (int)args.length;      System.out.println(\"END\"); }}"

//@ assert true: args.length;      System.out.println(\"END\"); }}"

//@ assume false;      System.out.println(\"END\"); }}"

//@ assume false: \"DEF\";      System.out.println(\"END\"); }}"

//@ unreachable;      System.out.println(\"END\"); }}"

/*@ requires i == 0; */
/*@ requires i != 0; */
/*@ requires i > 0; */
/*@ requires i < 0; */
//@ nowarn Precondition;    " +

/*@ requires i != 0; */
//@ nowarn Precondition;    " +

/*@ requires true; */
/*@non_null*/
/*@non_null*/
/*@ requires true; */
/*@non_null*/
/*@non_null*/
/*@nullable*/
/*@ ensures k == i; */
/*@ ensures k == 0; */
/*@ nowarn Postcondition;*/
/*@ ensures k == 0; */
/*@ nowarn Postcondition;*/
/*@ requires true;     also     requires false;     ensures k == 0; */
/*@ requires true;     ensures true;     also     requires false;     ensures k == 0; */
/*@ requires true;     " +
                "     ensures k != i;     " +
                "     also     " +
                "     requires true;     " +
                "     ensures k == 0; */
/*@   requires true;     "
                +"        ensures k != i;     "
                +"      also     "
                +"        requires true;     "
                +"        ensures k == 0; */
/*@ requires true;     "
                +"     signals (java.io.FileNotFoundException e) e == null; */
/*@ requires true;     signals (java.io.FileNotFoundException e) e == null; */
/*@ requires true;     signals_only \    othing; */
/*@ requires true;     signals_only java.io.FileNotFoundException; */
/*@ requires true;     signals_only java.io.FileNotFoundException; */
/*@ requires true;     */
/*@ requires true;     */
/*@ ensures \\result == 4; */
/*@ ensures \\result == 4; */
/*@ ensures (\\lbl ENS \\result == 1); */
/*@ ensures (\\lbl ENS (\\lbl RES \\result) == 1); */
/*@ ensures (\\lbl ENS \\old(k)) == k; */
//@ assert (\\lbl AST \\old(k)) == 0;      k=i; //@ assert (\\lbl AST2 \\old(k)) == 0;     //@ assert (\\lbl AST3 k) == 0;      return i; } " +

//@ ghost int p = (\\lbl AST \\old(k));     "

//@ ghost int kk =  (\\lbl AST2 \\old(k));     "

//@ set kk = (\\lbl AST3 k);      "

//@ set kk = (\\lbl AST4 \\old(k,lab));      "

//@ assert (i==0) <==> (* informal *);      return i; } " +

//@ ghost nullable java.lang.Class t; ghost nullable \\TYPE tt;     "

//@ set tt = (\\lbl A \\elemtype(\\typeof(o)));    "

//@ set tt = (\\lbl B \\elemtype(\\typeof(oo)));    "

//@ set tt = (\\lbl C \\elemtype(\\typeof(o3)));    "

//@ set t = (\\lbl D \\elemtype(java.lang.Class.class));    "

//@ set t = (\\lbl E \\elemtype(java.lang.Boolean[].class));    "

//@ requires JML.informal(\"asd\") && (\\lbl CLS \\erasure(\\typeof(i))) == Object.class;     " +

/*@nullable*/
//@ requires (\\lbl CLS \\typeof(i)) == \\type(Object);     " +

/*@nullable*/
//@ requires (\\lbl CLS \\typeof(i)) == \\type(Object);     " +

//@ assert (\\lbl AST \\typeof(true)) == \\typeof(true);     " +

//@ assert (\\lbl AST2 \\typeof((short)0)) != \\typeof(true);     " +

//@ assert (\\lbl AST3 \\typeof((long)0)) != \\typeof(true);     " +

//@ assert (\\lbl AST4 \\typeof((byte)0)) != \\typeof(true);     " +

//@ assert (\\lbl AST5 \\typeof('c')) != \\typeof(true);     " +

//@ assert (\\lbl AST6 \\typeof(\"c\")) != \\typeof(true);     " +

//@ assert (\\lbl AST7 \\typeof((float)0)) != \\typeof(true);     " +

//@ assert (\\lbl AST8 \\typeof((double)0)) != \\typeof(true);     " +

//@ assert (\\lbl AST9 \\typeof(5/0)) == \\typeof(5/0);     " +

//@ assert (\\lbl AST10 \\typeof(5.0/0.0)) != \\typeof(5/0);     " +

//@ requires (\\lbl CLS \\typeof(i)) == ( \\type(LinkedList<Integer>) );     " +

/*@nullable*/
//@ requires (\\lbl CLS \\typeof(i)) == ( \\type(LinkedList<Integer>) );     " +

/*@nullable*/
//@ requires (\\lbl CLS \\typeof(i)) != ( \\type(LinkedList<Integer>) );     " +

/*@nullable*/
//@ assert \    onnullelements(s2,s2null);     " +

//@ assert \    onnullelements(s2,s2);     " +

//@ assert \    onnullelements(s2null,new Integer[]{5/z});     " +

//@ assert (\\lbl ELEM \    onnullelements(o));     " +

/*@nullable*/
//@ assert (\\lbl ELEM \    onnullelements((\\lbl O o)));     " +

/*@nullable*/
//@ assert (\\lbl STRING \"def\") != null;     " +

//@ assert (\\lbl SHORT (short)(i)) != 0;     " +

//@ assert (\\lbl LONG (long)(i)) != 0;     " +

//@ assert (\\lbl BYTE (byte)(i)) != 0;     " +

//@ assert (\\lbl INT (int)(i)) != 0;     " +

//@ assert (\\lbl FLOAT (float)(i)) != 0;     " +

//@ assert (\\lbl DOUBLE (double)(i)) != 0;     " +

//@ assert (\\lbl CHAR n.charAt(0)) != 0;     " +

//@ assert (\\lbl BOOLEAN (i == 0)) ;     " +

//@ assert (\\lbl OBJECT o) == null;     " +

//@ assert (\\lbl STRING \"abc\") != null;     " +

/*@nullable*/
//@ assert (\\lbl OBJECT null) == null;     " +

//@ assert (\\lbl INT (int)(4)) != 0;     " +

//@ assert (\\lbl SHORT (short)(1)) != 0;     " +

//@ assert (\\lbl LONG (long)(2)) != 0;     " +

//@ assert (\\lbl BYTE (byte)(3)) != 0;     " +

//@ assert (\\lbl FLOAT (float)(5)) != 0;     " +

//@ assert (\\lbl DOUBLE (double)(6)) != 0;     " +

//@ assert (\\lbl CHAR 'a') != 0;     " +

//@ assert (\\lbl BOOLEAN true) ;     " +

//@ assert (\\lbl STRING \"abc\") != null;     " +

//@ ghost \\TYPE c;     " +

//@ set c = \\type(int);     " +

//@ set c = (\\lbl TYP1 c);     " +

//@ set c = \\type(boolean);     " +

//@ set c = (\\lbl TYP2 c);     " +

//@ ghost \\TYPE c;     " +

//@ set c = \\type(java.lang.Object);     " +

//@ set c = (\\lbl TYP1 c);     " +

//@ set c = \\type(Object);     " +

//@ set c = (\\lbl TYP2 c);     " +

//@ set c = \\type(java.lang.String);     " +

//@ set c = (\\lbl TYP3 c);     " +

//@ set c = \\type(String);     " +

//@ set c = (\\lbl TYP4 c);     " +

//@ ghost \\TYPE c;     " +

//@ set c = \\type(java.lang.String[]);     " +

//@ set c = (\\lbl TYP1 c);     " +

//@ set c = \\type(String[]);     " +

//@ set c = (\\lbl TYP2 c);     " +

//@ set c = \\type(java.lang.String[][]);     " +

//@ set c = (\\lbl TYP3 c);     " +

//@ set c = \\type(String[][]);     " +

//@ set c = (\\lbl TYP4 c);     " +

//@ ghost \\TYPE c;     " +

//@ set c = \\type(java.lang.Class<Integer>);     " +

//@ set c = (\\lbl TYP1 c);     " +

//@ ghost boolean bbb = (\\lbl TRUE Class.class == \\erasure(\\type(Class)));     " +

//@ set c = (\\lbl TYP2 c);     " +

//@ ghost \\TYPE c;     " +

//@ set c = \\type(int);     " +

//@ set c = (\\lbl TYP1 c);     " +

//@ set c = \\type(boolean);     " +

//@ set c = (\\lbl TYP2 c);     " +

//@ ghost \\TYPE c;     " +

//@ set c = \\type(java.lang.Object);     " +

//@ set c = (\\lbl TYP1 c);     " +

//@ set c = \\type(Object);     " +

//@ set c = (\\lbl TYP2 c);     " +

//@ set c = \\type(java.lang.String);     " +

//@ set c = (\\lbl TYP3 c);     " +

//@ set c = \\type(String);     " +

//@ set c = (\\lbl TYP4 c);     " +

//@ ghost \\TYPE c;     " +

//@ set c = \\type(java.lang.String[]);     " +

//@ set c = (\\lbl TYP1 c);     " +

//@ set c = \\type(String[]);     " +

//@ set c = (\\lbl TYP2 c);     " +

//@ set c = \\type(java.lang.String[][]);     " +

//@ set c = (\\lbl TYP3 c);     " +

//@ set c = \\type(String[][]);     " +

//@ set c = (\\lbl TYP4 c);     " +

//@ ghost \\TYPE c;     " +

//@ set c = \\type(java.lang.Class<Integer>);     " +

//@ set c = (\\lbl TYP1 c);     " +

//@ ghost boolean c;     " +

//@ set c = o.getClass() <: o.getClass();     " + // Object <: Object  // Class

//@ set c = (\\lbl TYP1 c);     " +

//@ set c = \\typeof(o) <: \\typeof(o);     " +  // Object <: Object // \TYPE

//@ set c = (\\lbl TYP2 c);     " +

//@ set c = \\typeof(o) <: \\typeof(oo);     " + // Object <: String // \TYPE

//@ set c = (\\lbl TYP3 c);     " +

//@ set c = \\typeof(oo) <: \\typeof(o);     " + // String <: Object // \TYPE

//@ set c = (\\lbl TYP4 c);     " +

//@ set c = \\typeof(ob) <: \\typeof(oo);     " + // Boolean <: String // \TYPE

//@ set c = (\\lbl TYP5 c);     " +

//@ ghost boolean c;     " +

//@ set c = s.getClass() <: b.getClass();     " + // String <: Boolean // Class

//@ set c = (\\lbl TYP1 c);     " +

//@ set c = \\typeof(s) <: \\typeof(b);     " +  // String <: Boolean // \TYPE

//@ set c = (\\lbl TYP2 c);     " +

//@ set c = \\type(int) <: \\typeof(o);     " + // int <: Object // \TYPE

//@ set c = (\\lbl TYP3 c);     " +

//@ set c = \\type(int) <: \\type(int);     " + // int <: int  // false

//@ set c = (\\lbl TYP4 c);     " +

//@ set c = \\type(int) <: \\type(boolean);     " + // int <: boolean

//@ set c = (\\lbl TYP5 c);     " +

//@ requires 10/i != 0;     " +

//@ ensures 10/(i-1) == 0;     " +

//@ requires i != 0;     " +

//@ requires 10/i == 10;     " +

//@ ghost public static int i = 0;      //@ public invariant i == 0;      //@ requires i == 1;     static public int m(); }");

//@ ghost static int i = 0;      //@ invariant i == 0;      //@ ensures i == 1;     static int m(); }");

//@ set i = 1;      return 0; }       public static void main(String[] args) { m(); System.out.println(\"END\"); }}"

/*@ model static pure public int mm() { return 5; } */
//@ ghost static public int i = 0;      "

//@ public invariant i == 0;      //@ ensures i == 1;     static public int m(); "

//@ set i = mm();     "

/*@ model public static class AA { static public int mm() { return 5; }} */
//@ ghost public static int i = 0;      "

//@ public invariant i == 0;      "

//@ ensures i == 0;     "

//@ set i = AA.mm();     "

/*@ model public static class AB { static public int mm() { return 5; }} */
//@ ghost public static int i = 0;      "

//@ public invariant i == 0;      "

//@ ensures i == 0;     "

//@ set i = AB.mm();     "

//@ static public invariant i == 0;      "

//@ static public invariant i == 0;      "

//@ public invariant i == 0;    "

//@ public invariant i == 0;"

//@ public invariant i == 0;"

//@ public invariant i == 0;"

//@ public invariant i == 0;"

//@ public initially i == 1;      "

//@ public initially j == 1;      "

//@ public invariant i == j;      "

/*@ assignable j; */
//@ constraint i == \\old(i)+1;      "

//@ invariant i == 0;      "

/*@ private helper */
//@ static model int i;     "

//@ static represents i \\such_that i == j+1;     "

//@ static model int i;      "

//@ static represents i = j+1;      "

//@ debug System.out.println(\"A \" + i);     "

//@ debug System.out.println(\"A \" + i);     "

//@ static ghost int ii;      "

//@ static model int i;      "

//@ static represents i \\such_that i==j+1;      "

//@ static represents i =j+1;      "

//@ debug System.out.println(\"A \" + i);     "

//@ debug System.out.println(\"A \" + i);     "

//@ static ghost int ii;      "

//@ static model int i;      "

//@ static represents i = j+1;      "

//@ static represents i = j;      "

//@ debug System.out.println(\"A \" + i);     "

//@ debug System.out.println(\"A \" + i);     "

//@  represents i = j+1;      "

//@ debug System.out.println(\"A \" + a.i);     "

//@ debug System.out.println(\"B \" + b.i);     "

//@ debug System.out.println(\"B \" + b.i);     "

//@ model  int i; 

//@  represents super.i = j+1;      "

//@ debug System.out.println(\"A \" + a.i);     "

//@ debug System.out.println(\"B \" + b.i);     "

//@ debug System.out.println(\"B \" + b.i);     "

//@ model protected int i; }    "

//@  model int i; represents i = j;     "

//@ debug System.out.println(\"A \" + a.i);     "

//@ debug System.out.println(\"B \" + b.i);     "

//@ model  int i; represents i = PA.j+1;     

//@ debug System.out.println(\"A \" + a.i);     "

//@ debug System.out.println(\"B \" + b.i);     "

//@ debug System.out.println(\"B \" + b.i);     "

//@ model  int i; 

//@ static model int i;     "

//@ debug System.out.println(\"A \" + i);     "

//@ ghost boolean n = (\\forall int i; 0<=i && i<=5; i >= 2);      "

//@ ghost boolean nn = (\\exists int i; 0<=i && i<=5; i >= 2);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost boolean n = (\\forall int i; 0<=i && i<=5; i >= 0);      "

//@ ghost boolean nn = (\\exists int i; 0<=i && i<=5; i >= 6);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost boolean n = (\\forall int i; ; i >= 0);      "

//@ ghost boolean nn = (\\exists int i; i == 4; i >= 6);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost boolean n = (\\forall int i; 0<i && i<=5; (\\exists int j; 0<=j && j < 5; j<i));      "

//@ ghost boolean nn = (\\forall int i; 0<=i && i<=5; (\\exists int j; 0<=j && j < 5; j<i));      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost long n1 = (\    um_of int i; 0 <= i && i <= 5; true);      "

//@ ghost long n2 = (\    um_of int i; 0 < i && i < 5; true);      "

//@ debug System.out.println(\"A \" + n1 + \" \" + n2);     "

//@ ghost long n = (\    um_of int i; 0 <= i && i < 5; i >= 2);      "

//@ ghost long nn = (\    um_of int i; 0 <= i && i < 5; false);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost int n = (\    um_of int i; 0 <= i && i < 5; i >= m);      "

//@ ghost int nn = (\    um_of int i; 0 <= i && i < 5; m > 0);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn );     "

//@ ensures (\    um_of int i; 0 <= i && i < 5; i >= m) == 3;    "

//@ ensures (\    um_of int i; 0 <= i && i < 5; i >= m) == 4;    "

//@ ghost long n1 = (\    um_of int i,j; 0 <= i && i <= 5 && 0 <= j && j < i; true);      "

//@ debug System.out.println(\"A \" + n1);     "

//@ ghost int n = (\\sum int i; 0<i && i<=5; i+1);      "

//@ ghost int nn = (\\sum int i; 0<i && i<0; i+1);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost int n = (\\product int i; 0<i && i<=5; i+1);      "

//@ ghost int nn = (\\product int i; 0<i && i<0; i+1);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost int n = (\\max int i; 0<=i && i<=5 && (i%2)==0; i+1);      "

//@ ghost int nn = (\\max int i; 0<i && i<0; i+1);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost int n = (\\max int i; 0<=i && i<=5 && (i%2)==0; inc(i));      "

//@ ghost int nn = (\\max int i; -9<=i && i<=5 ; Math.abs(i));      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost short n1 = (\\max int i; 0<=i && i<=5; (short)(i+10));      "

//@ ghost short n2 = (\\min int i; 0<=i && i<=5; (short)(i+10));      "

//@ debug System.out.println(\"A \" + n1 + \" \" + n2);     "

//@ ghost short n1 = (\\max short i; 2<=i && i<=5; i);      "

//@ ghost short n2 = (\\min short i; 2<=i && i<=5; i);      "

//@ debug System.out.println(\"A \" + n1 + \" \" + n2);     "

//@ ghost byte n1 = (\\max int i; 2<=i && i<=5; (byte)i);      "

//@ ghost byte n2 = (\\min int i; 2<=i && i<=5; (byte)i);      "

//@ debug System.out.println(\"A \" + n1 + \" \" + n2);     "

//@ ghost byte n1 = (\\max byte i; 2<=i && i<=5; i);      "

//@ ghost byte n2 = (\\min byte i; 2<=i && i<=5; i);      "

//@ debug System.out.println(\"A \" + n1 + \" \" + n2);     "

//@ ghost long n1 = (\\max int i; 0<=i && i<=5; (i+10L));      "

//@ ghost long n2 = (\\min int i; 0<=i && i<=5; (i+10L));      "

//@ debug System.out.println(\"A \" + n1 + \" \" + n2);     "

//@ ghost long n1 = (\\max long i; 0<=i && i<=5; (i+10L));      "

//@ ghost long n2 = (\\min long i; 0<=i && i<=5; (i+10L));      "

//@ debug System.out.println(\"A \" + n1 + \" \" + n2);     "

//@ ghost double n1 = (\\max int i; 0<=i && i<=5; (double)(i+10.5));      "

//@ ghost double n2 = (\\min int i; 0<=i && i<=5; (double)(i+10.5));      "

//@ debug System.out.println(\"A \" + n1 + \" \" + n2);     "

//@ ghost float n1 = (\\max int i; 0<=i && i<=5; (float)(i+10.5));      "

//@ ghost float n2 = (\\min int i; 0<=i && i<=5; (float)(i+10.5));      "

//@ debug System.out.println(\"A \" + n1 + \" \" + n2);     "

//@ ghost char n1 = (\\max int i; 'a'<i && i<='q'; (char)i);      "

//@ ghost char n2 = (\\min int i; 'a'<i && i<='q'; (char)i);      "

//@ debug System.out.println(\"A \" + n1 + \" \" + n2);     "

//@ ghost char n1 = (\\max char i; 'a'<i && i<='q'; i);      "

//@ ghost char n2 = (\\min char i; 'a'<i && i<='q'; i);      "

//@ debug System.out.println(\"A \" + n1 + \" \" + n2);     "

//@ ghost int n = (\\min int i; 0<=i && i<=5 && (i%2)==1; i+1);      "

//@ ghost int nn = (\\min int i; 0<i && i<0; i+1);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost long n = (\\max int i; 0<=i && i<=5 && (i%2)==0; (long)i+1);      "

//@ ghost long nn = (\\max int i; 0<i && i<0; i+1);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost long n = (\\min int i; 0<=i && i<=5 && (i%2)==1; (long)i+1);      "

//@ ghost long nn = (\\min int i; 0<i && i<0; i+1);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost double n = (\\max int i; 0<=i && i<=5 && (i%2)==0; (double)i+1);      "

//@ ghost double nn = (\\max int i; 0<i && i<0; i+1);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost double n = (\\min int i; 0<=i && i<=5 && (i%2)==1; (double)i+1);      "

//@ ghost double nn = (\\min int i; 0<i && i<0; (double)i+1);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn);     "

//@ ghost int n = (\\sum boolean i; bb; (i?2:5));      "

//@ ghost int nn = (\\sum boolean i; !i; (i?2:5));      "

//@ ghost int nnn = (\\sum boolean i; i; (i?2:5));      "

//@ ghost int nnnn = (\\sum boolean i; false; (i?2:5));      "

//@ debug System.out.println(\"A \" + n + \" \" + nn + \" \" + nnn + \" \" + nnnn);     "

//@ ghost int n = (\    um_of Object o; list.contains(o); true);      "

//@ ghost int nn = (\    um_of Object o; list.contains(o) && true; true);      "

//@ ghost int nnn = (\    um_of Object o; list.contains(o) && o == oo; true);      "

//@ debug System.out.println(\"A \" + n + \" \" + nn + \" \" + nnn);     "

//@ model int i; );

//@ debug System.out.println(\"A \" + a.i);     "

//@ debug System.out.println(\"B \" + b.i);     "

//@ debug System.out.println(\"B \" + b.i);     "

//@ model int i; );

//@ debug System.out.println(\"A \" + a.i);     "

//@ debug System.out.println(\"B \" + b.i);     "

//@ debug System.out.println(\"B \" + b.i);     "

/*@non_null*/
/*@ non_null*/
//@ model  int i; represents i = 0; 

/*@non_null*/
/*@nullable*/
/*@nullable*/
//@ ghost int k; set k = A.i;    "

//@ set k = a.i;    "

//@ set k = a.b.i;    "

/*@nullable_by_default*/
/*@non_null*/
 ghost static Object oooo = null;    "

/*@ non_null*/
//@ ghost non_null String loc = null;     "

/*@nullable*/
//@ nullable ghost static Object oooo = null;    "

/*@ nullable*/
//@ ghost String loc = null;     "

/*@nullable*/
//@ static invariant o != ooo;    "

//@ nullable ghost static Object oooo = null;    "

/*@ nullable*/
//@ ghost String loc = null;     "

//@ axiom true;    "

//@ public invariant \\duration(true) == 0;    "

//@ public model long i;    "

//@ public represents i =  \\duration(true);    "

//@ public constraint \\duration(true) == 0;    "

//@ public initially \\duration(true) == 0;    "

//@ hence_by true;     "

//@ assert \\duration(true) == 0;    "

//@ assume \\duration(true) == 0;    "

//@ ghost long k = \\duration(true);    "

//@ set k = \\duration(true);    "

//@ debug k = \\duration(true);    "

//@ ghost long z = \\duration(true);    "

//@ ghost long[] zz = { \\duration(true) } ;    "

/*@ requires \\duration(true) == 0;*/
//@ ensures \\duration(true) == 0;    "

//@ signals (Exception ex) \\duration(true) == 0;    "

//@ signals_only RuntimeException;    "

//@ diverges \\duration(true) == 0;    " // line 23

//@ duration  \\duration(true);    "

//@ working_space \\duration(true);    "

//@   requires \\duration(true) == 0;    "

//@   ensures true;    "

//@ also    "

//@   requires \\duration(true) == 0;    "

//@   signals (Exception ex) true;    "

//@ also    "

//@   requires \\duration(true) == 0;    "

//@   signals_only RuntimeException;    "

//@ also    "

//@   ensures true;    "

//@public  invariant i == 1;     "

//@ public invariant i == 2;     "

//@ public invariant i == 3;     "

//@ public invariant i == 2;     "

//@ public invariant i == 3;     "

//@public  invariant i == 1;     "

//@ static public invariant i == 2;     "

//@ static public invariant i == 3;     "

//@ static public invariant i == 1;     "

//@ also ensures i == 2;     "

//@ also ensures i == 3;     "

//@ ensures false;     "

//@ also ensures i == 2;     "

//@ also private behavior ensures i == 2;     "

//@ also ensures i == 3;     "

//@ ensures false;     "

//@ also ensures i == 2;     "

//@ requires kc == 3; ensures i == 3;     "

//@ also requires kb == 2; ensures i == 2;     "

//@ also requires ka==1; ensures i == 1;     "

//@ requires i > 0;    "

//@ modifies j;    "

//@ ensures j == i;    "

//@ ensures j == 1;    "

//@ requires i > 0;    "

//@ modifies j;    "

//@ ensures j == i;    "

//@ ensures j == 1;    "

//@ requires i > 0;    "

//@ modifies k;    "

//@ ensures j == i;    "

//@ ensures j == 1;    "

/*@ assert i == 0; */
/*@ assert i == -1; */
//@ assert false;      } " +

//@ assert false;            } " +

//@ assert false;      } " +

//@ ensures \\result == i;    "

//@ ensures \\result == i+1;    "

//@ loop_invariant sum >= 0;     "

//@ assert sum >= 0;     "

//@ loop_invariant sum >= 0;     "

//@ assert sum > 0;     "

//@ loop_invariant sum >= 0;     "

/*@ assume o >= 0; */
//@ assert sum >= 0;     "

//@ loop_invariant sum >= 0;     "

/*@ assume o >= 0; */
//@ assert sum > 0;     "

//@ old int kk = k; requires i > kk; assignable k; ensures k == i+1; ensures kk == 5;    "

//@ also    "

//@ old int kkk = k+1; requires i < kkk; assignable k; ensures k == i-1; ensures kkk == 7;    "

//@ old int kk = k; requires i > kk; assignable k; ensures k == i+1; ensures kk == 5;    "

//@ also    " // Purposely duplicating the name of the old variable

//@ old int kk = k+1; requires i < kk; assignable k; ensures k == i-1; ensures kk == 7;    "

//@ old int kk = k;    "

//@ {| requires i > kk; assignable k; ensures k == i+1; ensures kk == 5;    "

//@ also    "

//@    requires i < kk; assignable k; ensures k == i-1; ensures kk == 6;    "

//@ |}    "

//@ public normal_behavior     "

//@   requires true;     "

//@ show i, j+1;    "

//@ show k;    "

//@ assert k > 0;    "

//@ show m,k;    "

//@ assert m > 0;    "

//@ loop_invariant i <9 ;     " +

//@ decreases 10-i;     " +

//@ loop_invariant i <= 10 ;     " +

//@ decreases 7-i;     " +

//@ loop_invariant i == \\count ;     " +

//@ decreases 10-\\count;     " +

//@ loop_invariant i <= 10 ;     " +

//@ ghost int save = \\count;    " +

//@ loop_invariant \\count <= save;     " +

//@ ghost int i = 0;     " +

//@ loop_invariant i <= a.length ;     " +

//@ decreases a.length-i;     " +

//@ set i = i + 1;    " +

//@ ghost int i = 0;     " +

//@ loop_invariant i < a.length ;     " +

//@ decreases a.length-i-2;     " +

//@ set i = i + 1;    " +

//@ loop_invariant i>= 0;     " +

//@ decreases i;     " +

//@ loop_invariant i + \\count == \\old(i);     " +

//@ decreases i;     " +

//@ loop_invariant i>= 0;     " +

//@ decreases i;     " +

//@ loop_invariant i>= 0;     " +

//@ decreases i-2;     " +

//@ loop_invariant i>= 0;     " +

//@ decreases 10-i;     " +

//@ loop_invariant i>= 0;     " +

//@ decreases i;     " +

//@ loop_invariant i>= 0;     " +

//@ decreases i;     " +

//@ loop_invariant i>= 0;     " +

//@ decreases i;     " +

/*@ loop_invariant i + \\count == \\old(i); */
//@ decreases i;     " +

/*@ loop_invariant i + \\count == \\old(i); */
//@ assert i == -1;    " +

//@ loop_invariant i>= 0;     " +

//@ decreases i;     " +

//@ loop_invariant sum >= 0;     "

//@ assert sum >= 0;     "

//@ loop_invariant sum >= 0;     "

//@ assert sum > 0;     "

//@ loop_invariant sum >= 0;     "

/*@ assume o >= 0; */
//@ assert sum >= 0;     "

//@ loop_invariant sum >= 0;     "

/*@ assume o >= 0; */
//@ assert sum > 0;     "

//@ loop_invariant i <9 ;     " +

//@ decreases 10-i;     " +

//@ loop_invariant i <= 10 ;     " +

//@ decreases 7-i;     " +

//@ loop_invariant i == \\count ;     " +

//@ decreases 10-\\count;     " +

//@ loop_invariant i <= 10 ;     " +

//@ ghost int save = \\count;    " +

//@ loop_invariant \\count <= save;     " +

//@ ghost int i = 0;     " +

//@ loop_invariant i <= a.length ;     " +

//@ decreases a.length-i;     " +

//@ set i = i + 1;    " +

//@ ghost int i = 0;     " +

//@ loop_invariant i < a.length ;     " +

//@ decreases a.length-i-2;     " +

//@ set i = i + 1;    " +

//@ loop_invariant i>= 0;     " +

//@ decreases i;     " +

//@ loop_invariant i + \\count == \\old(i);     " +

//@ decreases i;     " +

//@ loop_invariant i>= 0;     " +

//@ decreases i;     " +

//@ loop_invariant i>= 0;     " +

//@ decreases i-2;     " +

//@ loop_invariant i>= 0;     " +

//@ decreases 10-i;     " +

//@ loop_invariant i>= 0;     " +

//@ decreases i;     " +

//@ loop_invariant i>= 0;     " +

//@ decreases i;     " +

//@ loop_invariant i>= 0;     " +

//@ decreases i;     " +

/*@ loop_invariant i + \\count == \\old(i); */
//@ decreases i;     " +

/*@ loop_invariant i + \\count == \\old(i); */
//@ assert i == -1;    " +

//@ loop_invariant i>= 0;     " +

//@ decreases i;     " +

//@ loop_invariant sum >= 0;     "

//@ assert sum >= 0;     "

//@ loop_invariant sum >= 0;     "

//@ assert sum > 0;     "

//@ loop_invariant sum >= 0;     "

/*@ assume o >= 0; */
//@ assert sum >= 0;     "

//@ loop_invariant sum >= 0;     "

/*@ assume o >= 0; */
//@ assert sum > 0;     "

//@ loop_invariant i <9 ;     " +

//@ decreases 10-i;     " +

//@ loop_invariant i <= 10 ;     " +

//@ decreases 7-i;     " +

//@ loop_invariant i == \\count ;     " +

//@ decreases 10-\\count;     " +

//@ loop_invariant i <= 10 ;     " +

//@ ghost int save = \\count;    " +

//@ loop_invariant \\count <= save;     " +

//@ ghost int i = 0;     " +

//@ loop_invariant i <= a.length ;     " +

//@ decreases a.length-i;     " +

//@ set i = i + 1;    " +

//@ ghost int i = 0;     " +

//@ loop_invariant i < a.length ;     " +

//@ decreases a.length-i-2;     " +

//@ set i = i + 1;    " +

//@ loop_invariant i>= 0;     " +

//@ decreases i;     " +

//@ loop_invariant i + \\count == \\old(i);     " +

//@ decreases i;     " +

//@ loop_invariant i>= 0;     " +

//@ decreases i;     " +

//@ loop_invariant i>= 0;     " +

//@ decreases i-2;     " +

//@ loop_invariant i>= 0;     " +

//@ decreases 10-i;     " +

//@ loop_invariant i>= 0;     " +

//@ decreases i;     " +

//@ loop_invariant i>= 0;     " +

//@ decreases i;     " +

//@ loop_invariant i>= 0;     " +

//@ decreases i;     " +

/*@ loop_invariant i + \\count == \\old(i); */
//@ decreases i;     " +

/*@ loop_invariant i + \\count == \\old(i); */
//@ assert i == -1;    " +

//@ loop_invariant i>= 0;     " +

//@ decreases i;     " +

//@ loop_invariant sum >= 0;     "

//@ assert sum >= 0;     "

//@ loop_invariant sum >= 0;     "

//@ assert sum > 0;     "

//@ loop_invariant sum >= 0;     "

/*@ assume o >= 0; */
//@ assert sum >= 0;     "

//@ loop_invariant sum >= 0;     "

/*@ assume o >= 0; */
//@ assert sum > 0;     "

//@ loop_invariant i <9 ;     " +

//@ decreases 10-i;     " +

//@ loop_invariant i <= 10 ;     " +

//@ decreases 7-i;     " +

//@ loop_invariant i == \\count ;     " +

//@ decreases 10-\\count;     " +

//@ loop_invariant i <= 10 ;     " +

//@ ghost int save = \\count;    " +

//@ loop_invariant \\count <= save;     " +

//@ ghost int i = 0;     " +

//@ loop_invariant i <= a.length ;     " +

//@ decreases a.length-i;     " +

//@ set i = i + 1;    " +

//@ ghost int i = 0;     " +

//@ loop_invariant i < a.length ;     " +

//@ decreases a.length-i-2;     " +

//@ set i = i + 1;    " +

//@ loop_invariant i>= 0;     " +

//@ decreases i;     " +

//@ loop_invariant i + \\count == \\old(i);     " +

//@ decreases i;     " +

//@ loop_invariant i>= 0;     " +

//@ decreases i;     " +

//@ loop_invariant i>= 0;     " +

//@ decreases i-2;     " +

//@ loop_invariant i>= 0;     " +

//@ decreases 10-i;     " +

//@ loop_invariant i>= 0;     " +

//@ decreases i;     " +

//@ loop_invariant i>= 0;     " +

//@ decreases i;     " +

//@ loop_invariant i>= 0;     " +

//@ decreases i;     " +

/*@ loop_invariant i + \\count == \\old(i); */
//@ decreases i;     " +

/*@ loop_invariant i + \\count == \\old(i); */
//@ assert i == -1;    " +

//@ loop_invariant i>= 0;     " +

//@ decreases i;     " +

//@ loop_invariant sum >= 0;     "

//@ assert sum >= 0;     "

//@ loop_invariant sum >= 0;     "

//@ assert sum > 0;     "

//@ loop_invariant sum >= 0;     "

/*@ assume o >= 0; */
//@ assert sum >= 0;     "

//@ loop_invariant sum >= 0;     "

/*@ assume o >= 0; */
//@ assert sum > 0;     "

//@ loop_invariant i <9 ;     " +

//@ decreases 10-i;     " +

//@ loop_invariant i <= 10 ;     " +

//@ decreases 7-i;     " +

//@ loop_invariant i == \\count ;     " +

//@ decreases 10-\\count;     " +

//@ loop_invariant i <= 10 ;     " +

//@ ghost int save = \\count;    " +

//@ loop_invariant \\count <= save;     " +

//@ ghost int i = 0;     " +

//@ loop_invariant i <= a.length ;     " +

//@ decreases a.length-i;     " +

//@ set i = i + 1;    " +

//@ ghost int i = 0;     " +

//@ loop_invariant i < a.length ;     " +

//@ decreases a.length-i-2;     " +

//@ set i = i + 1;    " +

//@ loop_invariant i>= 0;     " +

//@ decreases i;     " +

//@ loop_invariant i + \\count == \\old(i);     " +

//@ decreases i;     " +

//@ loop_invariant i>= 0;     " +

//@ decreases i;     " +

//@ loop_invariant i>= 0;     " +

//@ decreases i-2;     " +

//@ loop_invariant i>= 0;     " +

//@ decreases 10-i;     " +

//@ loop_invariant i>= 0;     " +

//@ decreases i;     " +

//@ loop_invariant i>= 0;     " +

//@ decreases i;     " +

//@ loop_invariant i>= 0;     " +

//@ decreases i;     " +

/*@ loop_invariant i + \\count == \\old(i); */
//@ decreases i;     " +

/*@ loop_invariant i + \\count == \\old(i); */
//@ assert i == -1;    " +

//@ loop_invariant i>= 0;     " +

//@ decreases i;     " +

//@ loop_invariant sum >= 0;     "

//@ assert sum >= 0;     "

//@ loop_invariant sum >= 0;     "

//@ assert sum > 0;     "

//@ loop_invariant sum >= 0;     "

/*@ assume o >= 0; */
//@ assert sum >= 0;     "

//@ loop_invariant sum >= 0;     "

/*@ assume o >= 0; */
//@ assert sum > 0;     "

//@ requires JML.informal(\"asd\") && (\\lbl CLS JML.erasure(\\typeof(i))) == Object.class;     "

/*@nullable*/
//@ requires JML.informal(\"asd\") && (\\lbl CLS JML.erasure(\\typeof(i))) == Object.class;     "

/*@nullable*/
//@ requires JML.informal(\"asd\") && (\\lbl CLS JML.erasure(\\typeof(i))) == Object.class;     "

/*@nullable*/
//@ requires JML.informal(\"asd\") && (\\lbl CLS JML.erasure(\\typeof(i))) == Object.class;     "

/*@nullable*/
//@ requires JML.informal(\"asd\") && (\\lbl CLS JML.erasure(\\typeof(i))) == Object.class;     "

/*@nullable*/
/*@ code_java_math*/
//@ readable z if bb;     "

//@ readable x if b;     "

//@ readable y if b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

/*@ code_java_math*/
//@ writable z if bb;     "

//@ writable x if b;     "

//@ writable y if b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

/*@ code_java_math*/
//@ readable z if bb;     "

//@ readable x if b;     "

//@ readable y if b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

/*@ code_java_math*/
//@ writable z if bb;     "

//@ writable x if b;     "

//@ writable y if b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

/*@ code_java_math*/
//@ readable z if bb;     "

//@ readable x if b;     "

//@ readable y if b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

/*@ code_java_math*/
//@ writable z if bb;     "

//@ writable x if b;     "

//@ writable y if b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

/*@ code_java_math*/
//@ readable z if bb;     "

//@ readable x if b;     "

//@ readable y if b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

/*@ code_java_math*/
//@ writable z if bb;     "

//@ writable x if b;     "

//@ writable y if b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

/*@ code_java_math*/
//@ readable z if bb;     "

//@ readable x if b;     "

//@ readable y if b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

/*@ code_java_math*/
//@ writable z if bb;     "

//@ writable x if b;     "

//@ writable y if b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires b;     "

//@ requires !b;     "

//@ requires !b;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

//@ requires !bb && a.bb;     "

//@ requires bb && !a.bb;     "

/*@ signals (Exception e) false;*/
/*@ requires false;*/
/*@ signals (Exception e) false;*/
//@ assert false;    "

//@ signals_only Exception;    "

//@ assert args.length != 0;    "

//@ assert args.length != 0;    "

/*@ signals (Exception e) false;*/
/*@ requires false;*/
/*@ signals (Exception e) false;*/
//@ assert false;    "

//@ signals_only Exception;    "

//@ assert args.length != 0;    "

//@ assert args.length != 0;    "

/*@ signals (Exception e) false;*/
/*@ requires false;*/
/*@ signals (Exception e) false;*/
//@ assert false;    "

//@ signals_only Exception;    "

//@ assert args.length != 0;    "

//@ assert args.length != 0;    "

/*@ signals (Exception e) false;*/
/*@ requires false;*/
/*@ signals (Exception e) false;*/
//@ assert false;    "

//@ signals_only Exception;    "

//@ assert args.length != 0;    "

//@ assert args.length != 0;    "

/*@ signals (Exception e) false;*/
/*@ requires false;*/
/*@ signals (Exception e) false;*/
//@ assert false;    "

//@ signals_only Exception;    "

//@ assert args.length != 0;    "

//@ assert args.length != 0;    "

/*@ ensures true; implies_that  ensures false; for_example ensures true; */
/*@ ensures true; implies_that behavior ensures false; for_example example ensures true; */
/*@ ensures true; implies_that normal_behavior ensures false; for_example normal_example ensures true; */
/*@ ensures true; implies_that exceptional_behavior signals_only Exception; for_example exceptional_example requires true; */
/*@ ensures true; implies_that example ensures false; for_example behavior ensures true; */
/*@ ensures true; implies_that normal_example ensures false; for_example normal_behavior ensures true; */
/*@ ensures true; implies_that exceptional_example requires false; for_example exceptional_behavior requires true; */
/*@ ensures true; implies_that  ensures false; also requires true; for_example ensures true; also normal_example ensures false; */
/*@ ensures true; implies_that public behavior ensures false; */
/*@ ensures true; for_example public normal_example ensures false; */
/*@ ensures true; implies_that  ensures false; for_example ensures true; */
/*@ ensures true; implies_that behavior ensures false; for_example example ensures true; */
/*@ ensures true; implies_that normal_behavior ensures false; for_example normal_example ensures true; */
/*@ ensures true; implies_that exceptional_behavior signals_only Exception; for_example exceptional_example requires true; */
/*@ ensures true; implies_that example ensures false; for_example behavior ensures true; */
/*@ ensures true; implies_that normal_example ensures false; for_example normal_behavior ensures true; */
/*@ ensures true; implies_that exceptional_example requires false; for_example exceptional_behavior requires true; */
/*@ ensures true; implies_that  ensures false; also requires true; for_example ensures true; also normal_example ensures false; */
/*@ ensures true; implies_that public behavior ensures false; */
/*@ ensures true; for_example public normal_example ensures false; */
/*@ ensures true; implies_that  ensures false; for_example ensures true; */
/*@ ensures true; implies_that behavior ensures false; for_example example ensures true; */
/*@ ensures true; implies_that normal_behavior ensures false; for_example normal_example ensures true; */
/*@ ensures true; implies_that exceptional_behavior signals_only Exception; for_example exceptional_example requires true; */
/*@ ensures true; implies_that example ensures false; for_example behavior ensures true; */
/*@ ensures true; implies_that normal_example ensures false; for_example normal_behavior ensures true; */
/*@ ensures true; implies_that exceptional_example requires false; for_example exceptional_behavior requires true; */
/*@ ensures true; implies_that  ensures false; also requires true; for_example ensures true; also normal_example ensures false; */
/*@ ensures true; implies_that public behavior ensures false; */
/*@ ensures true; for_example public normal_example ensures false; */
/*@ ensures true; implies_that  ensures false; for_example ensures true; */
/*@ ensures true; implies_that behavior ensures false; for_example example ensures true; */
/*@ ensures true; implies_that normal_behavior ensures false; for_example normal_example ensures true; */
/*@ ensures true; implies_that exceptional_behavior signals_only Exception; for_example exceptional_example requires true; */
/*@ ensures true; implies_that example ensures false; for_example behavior ensures true; */
/*@ ensures true; implies_that normal_example ensures false; for_example normal_behavior ensures true; */
/*@ ensures true; implies_that exceptional_example requires false; for_example exceptional_behavior requires true; */
/*@ ensures true; implies_that  ensures false; also requires true; for_example ensures true; also normal_example ensures false; */
/*@ ensures true; implies_that public behavior ensures false; */
/*@ ensures true; for_example public normal_example ensures false; */
/*@ ensures true; implies_that  ensures false; for_example ensures true; */
/*@ ensures true; implies_that behavior ensures false; for_example example ensures true; */
/*@ ensures true; implies_that normal_behavior ensures false; for_example normal_example ensures true; */
/*@ ensures true; implies_that exceptional_behavior signals_only Exception; for_example exceptional_example requires true; */
/*@ ensures true; implies_that example ensures false; for_example behavior ensures true; */
/*@ ensures true; implies_that normal_example ensures false; for_example normal_behavior ensures true; */
/*@ ensures true; implies_that exceptional_example requires false; for_example exceptional_behavior requires true; */
/*@ ensures true; implies_that  ensures false; also requires true; for_example ensures true; also normal_example ensures false; */
/*@ ensures true; implies_that public behavior ensures false; */
/*@ ensures true; for_example public normal_example ensures false; */
//@ requires positions != null && list != null ==> positions.length == list.length*2;

/*@nullable*/
/*@requires ensures pure */
//@requires ensures pure      ",

/*@nowarn A; nowarn B,requires,C; requires ensures pure */
/*@requires */
/*@requires */
/*@ ==> <== <: <==> <=!=> <- */
/*@ ==  <=  <  */
/*@ <<< <<<= <: <:= @ */
/*@ <=! + */
/*@ <=!= + */
/*@ -> */
/*@ \\result */
/*@ \\result\\result */
/*@ \\result     \\result*/
/*@ \\result result*/
/*@ \\xyz result*/
/*@ \\ \\result*/
//@*/ requires",

//@requires",

//@requires //@ requires",

/*@requires /*@ requires */
/*@requires //@ requires       requires */
/*@requires //@ requires */
//@requires /*@ requires     requires */ requires",

//@requires // requires",

//@requires /* requires */ ensures ",

//@requires /* requires ensures      signals */ modifies ",

/*@requires // modifies      ensures */
/*@requires /* modifies      ensures */
//@ requires",new ITokenKind[]{REQUIRES,EOF},null);

//@ requires    ",new ITokenKind[]{REQUIRES,EOF},null);

//@ requires     ",

//@ requires\r ",

//@ requires\r    ",

//@ requires    requires",

//@ requires @     ",

//@    requires ",

//@@@@@    requires ",

//@@x\\@@@    requires ",

//@@\\@x@@    requires ",

/*@ requires    requires@*/
/*@ requires      requires@*/
/*@ requires    @requires@*/
/*@ requires    @@@requires@*/
/*@ requires     @requires@*/
/*@ requires      @@@requires@*/
/*@ \\result      @@@\\xyz@*/
/*@ \\result(* requires *)*/
/*@ \\result(* requires *****)*/
/*@ \\result(* requires **** *)*/
/*@ \\result(* requires **** */
/*@ \\result(* requires *    *** */
/*@ \\result(* requires *    *** ",
                new ITokenKind[]{ERROR,EOF},
                null, //new int[]{4,11,11,30,30,31},
                1);
        checkMessages("/TEST.java:1: unclosed comment",1);
    }

    // Testing an unclosed informal comment in a LINE comment
    @Test public void testInformalComment5() {
        helpScanner("//@ \\result(* requires ****      public",
                new ITokenKind[]{IDENTIFIER,INFORMAL_COMMENT,EJML,PUBLIC,EOF},
                new int[]{4,11,11,28,28,29,30,36,36,36},
                1);
        checkMessages("/TEST.java:1: The informal expression is not closed",13);
    }

    // Testing an unclosed informal comment in a LINE comment
    @Test public void testInformalComment5a() {
        helpScanner("//@ \\result(* requires *****",
                new ITokenKind[]{IDENTIFIER,INFORMAL_COMMENT,EOF},
                new int[]{4,11,11,28,28,28},
                1);
        checkMessages("/TEST.java:1: The informal expression is not closed",13);
    }

    // Testing an unclosed informal comment in a LINE comment
    @Test public void testInformalComment6() {
        helpScanner("//@ \\result(* requires ***\"*) \" requires    ",
                new ITokenKind[]{IDENTIFIER,INFORMAL_COMMENT,ERROR,EOF},
                new int[]{4,11,11,29,30,40,40,40},  // FIXME - check posiiton of EOF
                1);
        checkMessages("/TEST.java:1: unclosed string literal",31);
    }

    @Test public void testStringLiteral() {
        Scanner sc = fac.newScanner("\"\\tA\\\\B\"", true);
        sc.nextToken();
        assertEquals(STRINGLITERAL,sc.token().kind);
        assertEquals("\tA\\B",sc.token().stringVal());
    }

    @Test public void testCharLiteral() {
        Scanner sc = fac.newScanner("\'\\t\'", true);
        sc.nextToken();
        assertEquals(CHARLITERAL,sc.token().kind);
        assertEquals("\t",sc.token().stringVal());
    }

    @Test public void testIntLiteralWithUnderscore() {
        String v = "123_456";
        Scanner sc = fac.newScanner(v, true);
        sc.nextToken();
        assertEquals(INTLITERAL,sc.token().kind);
        assertEquals("123456",sc.token().stringVal());
        assertEquals(123456,Integer.parseInt(sc.token().stringVal()));
    }

    @Test public void testIntLiteralWithUnderscoreBin() {
        String v = "0b0101_1010";
        Scanner sc = fac.newScanner(v, true);
        sc.nextToken();
        assertEquals(INTLITERAL,sc.token().kind);
        assertEquals("01011010",sc.token().stringVal());
        assertEquals(90,Integer.parseInt(sc.token().stringVal(),2));
    }

    @Test public void testIntLiteralWithUnderscoreHex() {
        String v = "0xDE_AF";
        Scanner sc = fac.newScanner(v, true);
        sc.nextToken();
        assertEquals(INTLITERAL,sc.token().kind);
        assertEquals("DEAF",sc.token().stringVal());
        assertEquals(57007,Integer.parseInt(sc.token().stringVal(),16));
    }

    @Test public void testIntLiteralWithUnderscoreHexLong() {
        String v = "0xDEAF_DEAF";
        Scanner sc = fac.newScanner(v, true);
        sc.nextToken();
        assertEquals(INTLITERAL,sc.token().kind);
        assertEquals("DEAFDEAF",sc.token().stringVal());
        assertEquals(3736067759L,Long.parseLong(sc.token().stringVal(),16));
    }

    @Test public void testDotDot() {
        helpScanner("//@..",
                new ITokenKind[]{DOT_DOT,EOF},
                new int[]{3,5,5,5},
                0);
    }

//    @Test public void testDotDot2() {
//        helpScanner("//@ modifies ..;",
//                new ITokenKind[]{ASSIGNABLE,DOT_DOT,SEMI,EOF},
//                null,
//                0);
//    }

    @Test public void testDotDot2a() {
        helpScanner("//@ 123..456;",
                new ITokenKind[]{INTLITERAL,DOT_DOT,INTLITERAL,SEMI,EOF},
                null,
                0);
    }

//    @Test public void testDotDot3() {
//        helpScanner("//@ modifies a[b .. c];",
//                new ITokenKind[]{ASSIGNABLE,IDENTIFIER,LBRACKET,IDENTIFIER,DOT_DOT,IDENTIFIER,RBRACKET,SEMI,EOF},
//                null,
//                0);
//    }
//
//    @Test public void testDotDot4() {
//        helpScanner("//@ modifies a[0..4];",
//                new ITokenKind[]{ASSIGNABLE,IDENTIFIER,LBRACKET,INTLITERAL,DOT_DOT,INTLITERAL,RBRACKET,SEMI,EOF},
//                null,
//                0);
//    }
//
//    @Test public void testDotDot4a() {
//        helpScanner("//@ modifies a[0 ..4];",
//                new ITokenKind[]{ASSIGNABLE,IDENTIFIER,LBRACKET,INTLITERAL,DOT_DOT,INTLITERAL,RBRACKET,SEMI,EOF},
//                null,
//                0);
//    }
//
//    @Test public void testDotDot5() {
//        helpScanner("//@ modifies ..234;",
//                new ITokenKind[]{ASSIGNABLE,DOT_DOT,INTLITERAL,SEMI,EOF},
//                null,
//                0);
//    }
//
//    @Test public void testDotDot6() {
//        helpScanner("//@ modifies .234;",
//                new ITokenKind[]{ASSIGNABLE,DOUBLELITERAL,SEMI,EOF},
//                null,
//                0);
//    }
//
//    @Test public void testDotDot7() {
//        helpScanner("//@ modifies 0.234;",
//                new ITokenKind[]{ASSIGNABLE,DOUBLELITERAL,SEMI,EOF},
//                null,
//                0);
//    }
//
//    @Test public void testDotDot8() {
//        helpScanner("//@ modifies a[0. .4];",
//                new ITokenKind[]{ASSIGNABLE,IDENTIFIER,LBRACKET,DOUBLELITERAL,DOUBLELITERAL,RBRACKET,SEMI,EOF},
//                null,
//                0);
//    }

    @Test public void testDotDot9() {
        helpScanner("//@ 0xApA     ",
                new ITokenKind[]{DOUBLELITERAL,IDENTIFIER,EJML,EOF},
                null,
                1);
        checkMessages("/TEST.java:1: malformed floating point literal",5);
    }

    @Test public void testDotDot10() {
        helpScanner("//@ 1.0eZ      ",
                new ITokenKind[]{DOUBLELITERAL,IDENTIFIER,EJML,EOF},
                null,
                1);
        checkMessages("/TEST.java:1: malformed floating point literal",5);
    }

    @Test public void testDotDot11() {
        helpScanner("//@ 0xA.0pZ     ",
                new ITokenKind[]{DOUBLELITERAL,IDENTIFIER,EJML,EOF},
                null,
                1);
        checkMessages("/TEST.java:1: malformed floating point literal",5);
    }

    @Test public void testDotDot12() {
        helpScanner("//@ 0xA.Z     ",
                new ITokenKind[]{DOUBLELITERAL,IDENTIFIER,EJML,EOF},
                null,
                1);
        checkMessages("/TEST.java:1: malformed floating point literal",5);
    }

    @Test public void testConditionalKey1() {
        helpScanner("//+POS@ requires      /*+POS@ requires */
//@ requires positions != null && list != null ==> positions.length == list.length*2;

/*@nullable*/
/*@requires ensures pure */
//@requires ensures pure      ",

/*@nowarn A; nowarn B,requires,C; requires ensures pure */
/*@requires */
/*@requires */
/*@ ==> <== <: <==> <=!=> <- */
/*@ ==  <=  <  */
/*@ <<< <<<= <: <:= @ */
/*@ <=! + */
/*@ <=!= + */
/*@ -> */
/*@ \\result */
/*@ \\result\\result */
/*@ \\result     \\result*/
/*@ \\result result*/
/*@ \\xyz result*/
/*@ \\ \\result*/
//@*/ requires",

//@requires",

//@requires //@ requires",

/*@requires /*@ requires */
/*@requires //@ requires       requires */
/*@requires //@ requires */
//@requires /*@ requires     requires */ requires",

//@requires // requires",

//@requires /* requires */ ensures ",

//@requires /* requires ensures      signals */ modifies ",

/*@requires // modifies      ensures */
/*@requires /* modifies      ensures */
//@ requires",new ITokenKind[]{REQUIRES,EOF},null);

//@ requires    ",new ITokenKind[]{REQUIRES,EOF},null);

//@ requires     ",

//@ requires\r ",

//@ requires\r    ",

//@ requires    requires",

//@ requires @     ",

//@    requires ",

//@@@@@    requires ",

//@@x\\@@@    requires ",

//@@\\@x@@    requires ",

/*@ requires    requires@*/
/*@ requires      requires@*/
/*@ requires    @requires@*/
/*@ requires    @@@requires@*/
/*@ requires     @requires@*/
/*@ requires      @@@requires@*/
/*@ \\result      @@@\\xyz@*/
/*@ \\result(* requires *)*/
/*@ \\result(* requires *****)*/
/*@ \\result(* requires **** *)*/
/*@ \\result(* requires **** */
/*@ \\result(* requires *    *** */
/*@ \\result(* requires *    *** ",
                new ITokenKind[]{ERROR,EOF},
                null, //new int[]{4,11,11,30,30,31},
                1);
        checkMessages("/TEST.java:1: unclosed comment",1);
    }

    // Testing an unclosed informal comment in a LINE comment
    @Test public void testInformalComment5() {
        helpScanner("//@ \\result(* requires ****      public",
                new ITokenKind[]{IDENTIFIER,INFORMAL_COMMENT,EJML,PUBLIC,EOF},
                new int[]{4,11,11,28,28,29,30,36,36,36},
                1);
        checkMessages("/TEST.java:1: The informal expression is not closed",13);
    }

    // Testing an unclosed informal comment in a LINE comment
    @Test public void testInformalComment5a() {
        helpScanner("//@ \\result(* requires *****",
                new ITokenKind[]{IDENTIFIER,INFORMAL_COMMENT,EOF},
                new int[]{4,11,11,28,28,28},
                1);
        checkMessages("/TEST.java:1: The informal expression is not closed",13);
    }

    // Testing an unclosed informal comment in a LINE comment
    @Test public void testInformalComment6() {
        helpScanner("//@ \\result(* requires ***\"*) \" requires    ",
                new ITokenKind[]{IDENTIFIER,INFORMAL_COMMENT,ERROR,EOF},
                new int[]{4,11,11,29,30,40,40,40},  // FIXME - check posiiton of EOF
                1);
        checkMessages("/TEST.java:1: unclosed string literal",31);
    }

    @Test public void testStringLiteral() {
        Scanner sc = fac.newScanner("\"\\tA\\\\B\"", true);
        sc.nextToken();
        assertEquals(STRINGLITERAL,sc.token().kind);
        assertEquals("\tA\\B",sc.token().stringVal());
    }

    @Test public void testCharLiteral() {
        Scanner sc = fac.newScanner("\'\\t\'", true);
        sc.nextToken();
        assertEquals(CHARLITERAL,sc.token().kind);
        assertEquals("\t",sc.token().stringVal());
    }

    @Test public void testIntLiteralWithUnderscore() {
        String v = "123_456";
        Scanner sc = fac.newScanner(v, true);
        sc.nextToken();
        assertEquals(INTLITERAL,sc.token().kind);
        assertEquals("123456",sc.token().stringVal());
        assertEquals(123456,Integer.parseInt(sc.token().stringVal()));
    }

    @Test public void testIntLiteralWithUnderscoreBin() {
        String v = "0b0101_1010";
        Scanner sc = fac.newScanner(v, true);
        sc.nextToken();
        assertEquals(INTLITERAL,sc.token().kind);
        assertEquals("01011010",sc.token().stringVal());
        assertEquals(90,Integer.parseInt(sc.token().stringVal(),2));
    }

    @Test public void testIntLiteralWithUnderscoreHex() {
        String v = "0xDE_AF";
        Scanner sc = fac.newScanner(v, true);
        sc.nextToken();
        assertEquals(INTLITERAL,sc.token().kind);
        assertEquals("DEAF",sc.token().stringVal());
        assertEquals(57007,Integer.parseInt(sc.token().stringVal(),16));
    }

    @Test public void testIntLiteralWithUnderscoreHexLong() {
        String v = "0xDEAF_DEAF";
        Scanner sc = fac.newScanner(v, true);
        sc.nextToken();
        assertEquals(INTLITERAL,sc.token().kind);
        assertEquals("DEAFDEAF",sc.token().stringVal());
        assertEquals(3736067759L,Long.parseLong(sc.token().stringVal(),16));
    }

    @Test public void testDotDot() {
        helpScanner("//@..",
                new ITokenKind[]{DOT_DOT,EOF},
                new int[]{3,5,5,5},
                0);
    }

//    @Test public void testDotDot2() {
//        helpScanner("//@ modifies ..;",
//                new ITokenKind[]{ASSIGNABLE,DOT_DOT,SEMI,EOF},
//                null,
//                0);
//    }

    @Test public void testDotDot2a() {
        helpScanner("//@ 123..456;",
                new ITokenKind[]{INTLITERAL,DOT_DOT,INTLITERAL,SEMI,EOF},
                null,
                0);
    }

//    @Test public void testDotDot3() {
//        helpScanner("//@ modifies a[b .. c];",
//                new ITokenKind[]{ASSIGNABLE,IDENTIFIER,LBRACKET,IDENTIFIER,DOT_DOT,IDENTIFIER,RBRACKET,SEMI,EOF},
//                null,
//                0);
//    }
//
//    @Test public void testDotDot4() {
//        helpScanner("//@ modifies a[0..4];",
//                new ITokenKind[]{ASSIGNABLE,IDENTIFIER,LBRACKET,INTLITERAL,DOT_DOT,INTLITERAL,RBRACKET,SEMI,EOF},
//                null,
//                0);
//    }
//
//    @Test public void testDotDot4a() {
//        helpScanner("//@ modifies a[0 ..4];",
//                new ITokenKind[]{ASSIGNABLE,IDENTIFIER,LBRACKET,INTLITERAL,DOT_DOT,INTLITERAL,RBRACKET,SEMI,EOF},
//                null,
//                0);
//    }
//
//    @Test public void testDotDot5() {
//        helpScanner("//@ modifies ..234;",
//                new ITokenKind[]{ASSIGNABLE,DOT_DOT,INTLITERAL,SEMI,EOF},
//                null,
//                0);
//    }
//
//    @Test public void testDotDot6() {
//        helpScanner("//@ modifies .234;",
//                new ITokenKind[]{ASSIGNABLE,DOUBLELITERAL,SEMI,EOF},
//                null,
//                0);
//    }
//
//    @Test public void testDotDot7() {
//        helpScanner("//@ modifies 0.234;",
//                new ITokenKind[]{ASSIGNABLE,DOUBLELITERAL,SEMI,EOF},
//                null,
//                0);
//    }
//
//    @Test public void testDotDot8() {
//        helpScanner("//@ modifies a[0. .4];",
//                new ITokenKind[]{ASSIGNABLE,IDENTIFIER,LBRACKET,DOUBLELITERAL,DOUBLELITERAL,RBRACKET,SEMI,EOF},
//                null,
//                0);
//    }

    @Test public void testDotDot9() {
        helpScanner("//@ 0xApA     ",
                new ITokenKind[]{DOUBLELITERAL,IDENTIFIER,EJML,EOF},
                null,
                1);
        checkMessages("/TEST.java:1: malformed floating point literal",5);
    }

    @Test public void testDotDot10() {
        helpScanner("//@ 1.0eZ      ",
                new ITokenKind[]{DOUBLELITERAL,IDENTIFIER,EJML,EOF},
                null,
                1);
        checkMessages("/TEST.java:1: malformed floating point literal",5);
    }

    @Test public void testDotDot11() {
        helpScanner("//@ 0xA.0pZ     ",
                new ITokenKind[]{DOUBLELITERAL,IDENTIFIER,EJML,EOF},
                null,
                1);
        checkMessages("/TEST.java:1: malformed floating point literal",5);
    }

    @Test public void testDotDot12() {
        helpScanner("//@ 0xA.Z     ",
                new ITokenKind[]{DOUBLELITERAL,IDENTIFIER,EJML,EOF},
                null,
                1);
        checkMessages("/TEST.java:1: malformed floating point literal",5);
    }

    @Test public void testConditionalKey1() {
        helpScanner("//+POS@ requires      /*+POS@ requires */
//@ requires positions != null && list != null ==> positions.length == list.length*2;

/*@nullable*/
/*@requires ensures pure */
//@requires ensures pure      ",

/*@nowarn A; nowarn B,requires,C; requires ensures pure */
/*@requires */
/*@requires */
/*@ ==> <== <: <==> <=!=> <- */
/*@ ==  <=  <  */
/*@ <<< <<<= <: <:= @ */
/*@ <=! + */
/*@ <=!= + */
/*@ -> */
/*@ \\result */
/*@ \\result\\result */
/*@ \\result     \\result*/
/*@ \\result result*/
/*@ \\xyz result*/
/*@ \\ \\result*/
//@*/ requires",

//@requires",

//@requires //@ requires",

/*@requires /*@ requires */
/*@requires //@ requires       requires */
/*@requires //@ requires */
//@requires /*@ requires     requires */ requires",

//@requires // requires",

//@requires /* requires */ ensures ",

//@requires /* requires ensures      signals */ modifies ",

/*@requires // modifies      ensures */
/*@requires /* modifies      ensures */
//@ requires",new ITokenKind[]{REQUIRES,EOF},null);

//@ requires    ",new ITokenKind[]{REQUIRES,EOF},null);

//@ requires     ",

//@ requires\r ",

//@ requires\r    ",

//@ requires    requires",

//@ requires @     ",

//@    requires ",

//@@@@@    requires ",

//@@x\\@@@    requires ",

//@@\\@x@@    requires ",

/*@ requires    requires@*/
/*@ requires      requires@*/
/*@ requires    @requires@*/
/*@ requires    @@@requires@*/
/*@ requires     @requires@*/
/*@ requires      @@@requires@*/
/*@ \\result      @@@\\xyz@*/
/*@ \\result(* requires *)*/
/*@ \\result(* requires *****)*/
/*@ \\result(* requires **** *)*/
/*@ \\result(* requires **** */
/*@ \\result(* requires *    *** */
/*@ \\result(* requires *    *** ",
                new ITokenKind[]{ERROR,EOF},
                null, //new int[]{4,11,11,30,30,31},
                1);
        checkMessages("/TEST.java:1: unclosed comment",1);
    }

    // Testing an unclosed informal comment in a LINE comment
    @Test public void testInformalComment5() {
        helpScanner("//@ \\result(* requires ****      public",
                new ITokenKind[]{IDENTIFIER,INFORMAL_COMMENT,EJML,PUBLIC,EOF},
                new int[]{4,11,11,28,28,29,30,36,36,36},
                1);
        checkMessages("/TEST.java:1: The informal expression is not closed",13);
    }

    // Testing an unclosed informal comment in a LINE comment
    @Test public void testInformalComment5a() {
        helpScanner("//@ \\result(* requires *****",
                new ITokenKind[]{IDENTIFIER,INFORMAL_COMMENT,EOF},
                new int[]{4,11,11,28,28,28},
                1);
        checkMessages("/TEST.java:1: The informal expression is not closed",13);
    }

    // Testing an unclosed informal comment in a LINE comment
    @Test public void testInformalComment6() {
        helpScanner("//@ \\result(* requires ***\"*) \" requires    ",
                new ITokenKind[]{IDENTIFIER,INFORMAL_COMMENT,ERROR,EOF},
                new int[]{4,11,11,29,30,40,40,40},  // FIXME - check posiiton of EOF
                1);
        checkMessages("/TEST.java:1: unclosed string literal",31);
    }

    @Test public void testStringLiteral() {
        Scanner sc = fac.newScanner("\"\\tA\\\\B\"", true);
        sc.nextToken();
        assertEquals(STRINGLITERAL,sc.token().kind);
        assertEquals("\tA\\B",sc.token().stringVal());
    }

    @Test public void testCharLiteral() {
        Scanner sc = fac.newScanner("\'\\t\'", true);
        sc.nextToken();
        assertEquals(CHARLITERAL,sc.token().kind);
        assertEquals("\t",sc.token().stringVal());
    }

    @Test public void testIntLiteralWithUnderscore() {
        String v = "123_456";
        Scanner sc = fac.newScanner(v, true);
        sc.nextToken();
        assertEquals(INTLITERAL,sc.token().kind);
        assertEquals("123456",sc.token().stringVal());
        assertEquals(123456,Integer.parseInt(sc.token().stringVal()));
    }

    @Test public void testIntLiteralWithUnderscoreBin() {
        String v = "0b0101_1010";
        Scanner sc = fac.newScanner(v, true);
        sc.nextToken();
        assertEquals(INTLITERAL,sc.token().kind);
        assertEquals("01011010",sc.token().stringVal());
        assertEquals(90,Integer.parseInt(sc.token().stringVal(),2));
    }

    @Test public void testIntLiteralWithUnderscoreHex() {
        String v = "0xDE_AF";
        Scanner sc = fac.newScanner(v, true);
        sc.nextToken();
        assertEquals(INTLITERAL,sc.token().kind);
        assertEquals("DEAF",sc.token().stringVal());
        assertEquals(57007,Integer.parseInt(sc.token().stringVal(),16));
    }

    @Test public void testIntLiteralWithUnderscoreHexLong() {
        String v = "0xDEAF_DEAF";
        Scanner sc = fac.newScanner(v, true);
        sc.nextToken();
        assertEquals(INTLITERAL,sc.token().kind);
        assertEquals("DEAFDEAF",sc.token().stringVal());
        assertEquals(3736067759L,Long.parseLong(sc.token().stringVal(),16));
    }

    @Test public void testDotDot() {
        helpScanner("//@..",
                new ITokenKind[]{DOT_DOT,EOF},
                new int[]{3,5,5,5},
                0);
    }

//    @Test public void testDotDot2() {
//        helpScanner("//@ modifies ..;",
//                new ITokenKind[]{ASSIGNABLE,DOT_DOT,SEMI,EOF},
//                null,
//                0);
//    }

    @Test public void testDotDot2a() {
        helpScanner("//@ 123..456;",
                new ITokenKind[]{INTLITERAL,DOT_DOT,INTLITERAL,SEMI,EOF},
                null,
                0);
    }

//    @Test public void testDotDot3() {
//        helpScanner("//@ modifies a[b .. c];",
//                new ITokenKind[]{ASSIGNABLE,IDENTIFIER,LBRACKET,IDENTIFIER,DOT_DOT,IDENTIFIER,RBRACKET,SEMI,EOF},
//                null,
//                0);
//    }
//
//    @Test public void testDotDot4() {
//        helpScanner("//@ modifies a[0..4];",
//                new ITokenKind[]{ASSIGNABLE,IDENTIFIER,LBRACKET,INTLITERAL,DOT_DOT,INTLITERAL,RBRACKET,SEMI,EOF},
//                null,
//                0);
//    }
//
//    @Test public void testDotDot4a() {
//        helpScanner("//@ modifies a[0 ..4];",
//                new ITokenKind[]{ASSIGNABLE,IDENTIFIER,LBRACKET,INTLITERAL,DOT_DOT,INTLITERAL,RBRACKET,SEMI,EOF},
//                null,
//                0);
//    }
//
//    @Test public void testDotDot5() {
//        helpScanner("//@ modifies ..234;",
//                new ITokenKind[]{ASSIGNABLE,DOT_DOT,INTLITERAL,SEMI,EOF},
//                null,
//                0);
//    }
//
//    @Test public void testDotDot6() {
//        helpScanner("//@ modifies .234;",
//                new ITokenKind[]{ASSIGNABLE,DOUBLELITERAL,SEMI,EOF},
//                null,
//                0);
//    }
//
//    @Test public void testDotDot7() {
//        helpScanner("//@ modifies 0.234;",
//                new ITokenKind[]{ASSIGNABLE,DOUBLELITERAL,SEMI,EOF},
//                null,
//                0);
//    }
//
//    @Test public void testDotDot8() {
//        helpScanner("//@ modifies a[0. .4];",
//                new ITokenKind[]{ASSIGNABLE,IDENTIFIER,LBRACKET,DOUBLELITERAL,DOUBLELITERAL,RBRACKET,SEMI,EOF},
//                null,
//                0);
//    }

    @Test public void testDotDot9() {
        helpScanner("//@ 0xApA     ",
                new ITokenKind[]{DOUBLELITERAL,IDENTIFIER,EJML,EOF},
                null,
                1);
        checkMessages("/TEST.java:1: malformed floating point literal",5);
    }

    @Test public void testDotDot10() {
        helpScanner("//@ 1.0eZ      ",
                new ITokenKind[]{DOUBLELITERAL,IDENTIFIER,EJML,EOF},
                null,
                1);
        checkMessages("/TEST.java:1: malformed floating point literal",5);
    }

    @Test public void testDotDot11() {
        helpScanner("//@ 0xA.0pZ     ",
                new ITokenKind[]{DOUBLELITERAL,IDENTIFIER,EJML,EOF},
                null,
                1);
        checkMessages("/TEST.java:1: malformed floating point literal",5);
    }

    @Test public void testDotDot12() {
        helpScanner("//@ 0xA.Z     ",
                new ITokenKind[]{DOUBLELITERAL,IDENTIFIER,EJML,EOF},
                null,
                1);
        checkMessages("/TEST.java:1: malformed floating point literal",5);
    }

    @Test public void testConditionalKey1() {
        helpScanner("//+POS@ requires      /*+POS@ requires */
//@ requires positions != null && list != null ==> positions.length == list.length*2;

/*@nullable*/
/*@requires ensures pure */
//@requires ensures pure      ",

/*@nowarn A; nowarn B,requires,C; requires ensures pure */
/*@requires */
/*@requires */
/*@ ==> <== <: <==> <=!=> <- */
/*@ ==  <=  <  */
/*@ <<< <<<= <: <:= @ */
/*@ <=! + */
/*@ <=!= + */
/*@ -> */
/*@ \\result */
/*@ \\result\\result */
/*@ \\result     \\result*/
/*@ \\result result*/
/*@ \\xyz result*/
/*@ \\ \\result*/
//@*/ requires",

//@requires",

//@requires //@ requires",

/*@requires /*@ requires */
/*@requires //@ requires       requires */
/*@requires //@ requires */
//@requires /*@ requires     requires */ requires",

//@requires // requires",

//@requires /* requires */ ensures ",

//@requires /* requires ensures      signals */ modifies ",

/*@requires // modifies      ensures */
/*@requires /* modifies      ensures */
//@ requires",new ITokenKind[]{REQUIRES,EOF},null);

//@ requires    ",new ITokenKind[]{REQUIRES,EOF},null);

//@ requires     ",

//@ requires\r ",

//@ requires\r    ",

//@ requires    requires",

//@ requires @     ",

//@    requires ",

//@@@@@    requires ",

//@@x\\@@@    requires ",

//@@\\@x@@    requires ",

/*@ requires    requires@*/
/*@ requires      requires@*/
/*@ requires    @requires@*/
/*@ requires    @@@requires@*/
/*@ requires     @requires@*/
/*@ requires      @@@requires@*/
/*@ \\result      @@@\\xyz@*/
/*@ \\result(* requires *)*/
/*@ \\result(* requires *****)*/
/*@ \\result(* requires **** *)*/
/*@ \\result(* requires **** */
/*@ \\result(* requires *    *** */
/*@ \\result(* requires *    *** ",
                new ITokenKind[]{ERROR,EOF},
                null, //new int[]{4,11,11,30,30,31},
                1);
        checkMessages("/TEST.java:1: unclosed comment",1);
    }

    // Testing an unclosed informal comment in a LINE comment
    @Test public void testInformalComment5() {
        helpScanner("//@ \\result(* requires ****      public",
                new ITokenKind[]{IDENTIFIER,INFORMAL_COMMENT,EJML,PUBLIC,EOF},
                new int[]{4,11,11,28,28,29,30,36,36,36},
                1);
        checkMessages("/TEST.java:1: The informal expression is not closed",13);
    }

    // Testing an unclosed informal comment in a LINE comment
    @Test public void testInformalComment5a() {
        helpScanner("//@ \\result(* requires *****",
                new ITokenKind[]{IDENTIFIER,INFORMAL_COMMENT,EOF},
                new int[]{4,11,11,28,28,28},
                1);
        checkMessages("/TEST.java:1: The informal expression is not closed",13);
    }

    // Testing an unclosed informal comment in a LINE comment
    @Test public void testInformalComment6() {
        helpScanner("//@ \\result(* requires ***\"*) \" requires    ",
                new ITokenKind[]{IDENTIFIER,INFORMAL_COMMENT,ERROR,EOF},
                new int[]{4,11,11,29,30,40,40,40},  // FIXME - check posiiton of EOF
                1);
        checkMessages("/TEST.java:1: unclosed string literal",31);
    }

    @Test public void testStringLiteral() {
        Scanner sc = fac.newScanner("\"\\tA\\\\B\"", true);
        sc.nextToken();
        assertEquals(STRINGLITERAL,sc.token().kind);
        assertEquals("\tA\\B",sc.token().stringVal());
    }

    @Test public void testCharLiteral() {
        Scanner sc = fac.newScanner("\'\\t\'", true);
        sc.nextToken();
        assertEquals(CHARLITERAL,sc.token().kind);
        assertEquals("\t",sc.token().stringVal());
    }

    @Test public void testIntLiteralWithUnderscore() {
        String v = "123_456";
        Scanner sc = fac.newScanner(v, true);
        sc.nextToken();
        assertEquals(INTLITERAL,sc.token().kind);
        assertEquals("123456",sc.token().stringVal());
        assertEquals(123456,Integer.parseInt(sc.token().stringVal()));
    }

    @Test public void testIntLiteralWithUnderscoreBin() {
        String v = "0b0101_1010";
        Scanner sc = fac.newScanner(v, true);
        sc.nextToken();
        assertEquals(INTLITERAL,sc.token().kind);
        assertEquals("01011010",sc.token().stringVal());
        assertEquals(90,Integer.parseInt(sc.token().stringVal(),2));
    }

    @Test public void testIntLiteralWithUnderscoreHex() {
        String v = "0xDE_AF";
        Scanner sc = fac.newScanner(v, true);
        sc.nextToken();
        assertEquals(INTLITERAL,sc.token().kind);
        assertEquals("DEAF",sc.token().stringVal());
        assertEquals(57007,Integer.parseInt(sc.token().stringVal(),16));
    }

    @Test public void testIntLiteralWithUnderscoreHexLong() {
        String v = "0xDEAF_DEAF";
        Scanner sc = fac.newScanner(v, true);
        sc.nextToken();
        assertEquals(INTLITERAL,sc.token().kind);
        assertEquals("DEAFDEAF",sc.token().stringVal());
        assertEquals(3736067759L,Long.parseLong(sc.token().stringVal(),16));
    }

    @Test public void testDotDot() {
        helpScanner("//@..",
                new ITokenKind[]{DOT_DOT,EOF},
                new int[]{3,5,5,5},
                0);
    }

//    @Test public void testDotDot2() {
//        helpScanner("//@ modifies ..;",
//                new ITokenKind[]{ASSIGNABLE,DOT_DOT,SEMI,EOF},
//                null,
//                0);
//    }

    @Test public void testDotDot2a() {
        helpScanner("//@ 123..456;",
                new ITokenKind[]{INTLITERAL,DOT_DOT,INTLITERAL,SEMI,EOF},
                null,
                0);
    }

//    @Test public void testDotDot3() {
//        helpScanner("//@ modifies a[b .. c];",
//                new ITokenKind[]{ASSIGNABLE,IDENTIFIER,LBRACKET,IDENTIFIER,DOT_DOT,IDENTIFIER,RBRACKET,SEMI,EOF},
//                null,
//                0);
//    }
//
//    @Test public void testDotDot4() {
//        helpScanner("//@ modifies a[0..4];",
//                new ITokenKind[]{ASSIGNABLE,IDENTIFIER,LBRACKET,INTLITERAL,DOT_DOT,INTLITERAL,RBRACKET,SEMI,EOF},
//                null,
//                0);
//    }
//
//    @Test public void testDotDot4a() {
//        helpScanner("//@ modifies a[0 ..4];",
//                new ITokenKind[]{ASSIGNABLE,IDENTIFIER,LBRACKET,INTLITERAL,DOT_DOT,INTLITERAL,RBRACKET,SEMI,EOF},
//                null,
//                0);
//    }
//
//    @Test public void testDotDot5() {
//        helpScanner("//@ modifies ..234;",
//                new ITokenKind[]{ASSIGNABLE,DOT_DOT,INTLITERAL,SEMI,EOF},
//                null,
//                0);
//    }
//
//    @Test public void testDotDot6() {
//        helpScanner("//@ modifies .234;",
//                new ITokenKind[]{ASSIGNABLE,DOUBLELITERAL,SEMI,EOF},
//                null,
//                0);
//    }
//
//    @Test public void testDotDot7() {
//        helpScanner("//@ modifies 0.234;",
//                new ITokenKind[]{ASSIGNABLE,DOUBLELITERAL,SEMI,EOF},
//                null,
//                0);
//    }
//
//    @Test public void testDotDot8() {
//        helpScanner("//@ modifies a[0. .4];",
//                new ITokenKind[]{ASSIGNABLE,IDENTIFIER,LBRACKET,DOUBLELITERAL,DOUBLELITERAL,RBRACKET,SEMI,EOF},
//                null,
//                0);
//    }

    @Test public void testDotDot9() {
        helpScanner("//@ 0xApA     ",
                new ITokenKind[]{DOUBLELITERAL,IDENTIFIER,EJML,EOF},
                null,
                1);
        checkMessages("/TEST.java:1: malformed floating point literal",5);
    }

    @Test public void testDotDot10() {
        helpScanner("//@ 1.0eZ      ",
                new ITokenKind[]{DOUBLELITERAL,IDENTIFIER,EJML,EOF},
                null,
                1);
        checkMessages("/TEST.java:1: malformed floating point literal",5);
    }

    @Test public void testDotDot11() {
        helpScanner("//@ 0xA.0pZ     ",
                new ITokenKind[]{DOUBLELITERAL,IDENTIFIER,EJML,EOF},
                null,
                1);
        checkMessages("/TEST.java:1: malformed floating point literal",5);
    }

    @Test public void testDotDot12() {
        helpScanner("//@ 0xA.Z     ",
                new ITokenKind[]{DOUBLELITERAL,IDENTIFIER,EJML,EOF},
                null,
                1);
        checkMessages("/TEST.java:1: malformed floating point literal",5);
    }

    @Test public void testConditionalKey1() {
        helpScanner("//+POS@ requires      /*+POS@ requires */
//@ requires positions != null && list != null ==> positions.length == list.length*2;

/*@nullable*/
/*@requires ensures pure */
//@requires ensures pure      ",

/*@nowarn A; nowarn B,requires,C; requires ensures pure */
/*@requires */
/*@requires */
/*@ ==> <== <: <==> <=!=> <- */
/*@ ==  <=  <  */
/*@ <<< <<<= <: <:= @ */
/*@ <=! + */
/*@ <=!= + */
/*@ -> */
/*@ \\result */
/*@ \\result\\result */
/*@ \\result     \\result*/
/*@ \\result result*/
/*@ \\xyz result*/
/*@ \\ \\result*/
//@*/ requires",

//@requires",

//@requires //@ requires",

/*@requires /*@ requires */
/*@requires //@ requires       requires */
/*@requires //@ requires */
//@requires /*@ requires     requires */ requires",

//@requires // requires",

//@requires /* requires */ ensures ",

//@requires /* requires ensures      signals */ modifies ",

/*@requires // modifies      ensures */
/*@requires /* modifies      ensures */
//@ requires",new ITokenKind[]{REQUIRES,EOF},null);

//@ requires    ",new ITokenKind[]{REQUIRES,EOF},null);

//@ requires     ",

//@ requires\r ",

//@ requires\r    ",

//@ requires    requires",

//@ requires @     ",

//@    requires ",

//@@@@@    requires ",

//@@x\\@@@    requires ",

//@@\\@x@@    requires ",

/*@ requires    requires@*/
/*@ requires      requires@*/
/*@ requires    @requires@*/
/*@ requires    @@@requires@*/
/*@ requires     @requires@*/
/*@ requires      @@@requires@*/
/*@ \\result      @@@\\xyz@*/
/*@ \\result(* requires *)*/
/*@ \\result(* requires *****)*/
/*@ \\result(* requires **** *)*/
/*@ \\result(* requires **** */
/*@ \\result(* requires *    *** */
/*@ \\result(* requires *    *** ",
                new ITokenKind[]{ERROR,EOF},
                null, //new int[]{4,11,11,30,30,31},
                1);
        checkMessages("/TEST.java:1: unclosed comment",1);
    }

    // Testing an unclosed informal comment in a LINE comment
    @Test public void testInformalComment5() {
        helpScanner("//@ \\result(* requires ****      public",
                new ITokenKind[]{IDENTIFIER,INFORMAL_COMMENT,EJML,PUBLIC,EOF},
                new int[]{4,11,11,28,28,29,30,36,36,36},
                1);
        checkMessages("/TEST.java:1: The informal expression is not closed",13);
    }

    // Testing an unclosed informal comment in a LINE comment
    @Test public void testInformalComment5a() {
        helpScanner("//@ \\result(* requires *****",
                new ITokenKind[]{IDENTIFIER,INFORMAL_COMMENT,EOF},
                new int[]{4,11,11,28,28,28},
                1);
        checkMessages("/TEST.java:1: The informal expression is not closed",13);
    }

    // Testing an unclosed informal comment in a LINE comment
    @Test public void testInformalComment6() {
        helpScanner("//@ \\result(* requires ***\"*) \" requires    ",
                new ITokenKind[]{IDENTIFIER,INFORMAL_COMMENT,ERROR,EOF},
                new int[]{4,11,11,29,30,40,40,40},  // FIXME - check posiiton of EOF
                1);
        checkMessages("/TEST.java:1: unclosed string literal",31);
    }

    @Test public void testStringLiteral() {
        Scanner sc = fac.newScanner("\"\\tA\\\\B\"", true);
        sc.nextToken();
        assertEquals(STRINGLITERAL,sc.token().kind);
        assertEquals("\tA\\B",sc.token().stringVal());
    }

    @Test public void testCharLiteral() {
        Scanner sc = fac.newScanner("\'\\t\'", true);
        sc.nextToken();
        assertEquals(CHARLITERAL,sc.token().kind);
        assertEquals("\t",sc.token().stringVal());
    }

    @Test public void testIntLiteralWithUnderscore() {
        String v = "123_456";
        Scanner sc = fac.newScanner(v, true);
        sc.nextToken();
        assertEquals(INTLITERAL,sc.token().kind);
        assertEquals("123456",sc.token().stringVal());
        assertEquals(123456,Integer.parseInt(sc.token().stringVal()));
    }

    @Test public void testIntLiteralWithUnderscoreBin() {
        String v = "0b0101_1010";
        Scanner sc = fac.newScanner(v, true);
        sc.nextToken();
        assertEquals(INTLITERAL,sc.token().kind);
        assertEquals("01011010",sc.token().stringVal());
        assertEquals(90,Integer.parseInt(sc.token().stringVal(),2));
    }

    @Test public void testIntLiteralWithUnderscoreHex() {
        String v = "0xDE_AF";
        Scanner sc = fac.newScanner(v, true);
        sc.nextToken();
        assertEquals(INTLITERAL,sc.token().kind);
        assertEquals("DEAF",sc.token().stringVal());
        assertEquals(57007,Integer.parseInt(sc.token().stringVal(),16));
    }

    @Test public void testIntLiteralWithUnderscoreHexLong() {
        String v = "0xDEAF_DEAF";
        Scanner sc = fac.newScanner(v, true);
        sc.nextToken();
        assertEquals(INTLITERAL,sc.token().kind);
        assertEquals("DEAFDEAF",sc.token().stringVal());
        assertEquals(3736067759L,Long.parseLong(sc.token().stringVal(),16));
    }

    @Test public void testDotDot() {
        helpScanner("//@..",
                new ITokenKind[]{DOT_DOT,EOF},
                new int[]{3,5,5,5},
                0);
    }

//    @Test public void testDotDot2() {
//        helpScanner("//@ modifies ..;",
//                new ITokenKind[]{ASSIGNABLE,DOT_DOT,SEMI,EOF},
//                null,
//                0);
//    }

    @Test public void testDotDot2a() {
        helpScanner("//@ 123..456;",
                new ITokenKind[]{INTLITERAL,DOT_DOT,INTLITERAL,SEMI,EOF},
                null,
                0);
    }

//    @Test public void testDotDot3() {
//        helpScanner("//@ modifies a[b .. c];",
//                new ITokenKind[]{ASSIGNABLE,IDENTIFIER,LBRACKET,IDENTIFIER,DOT_DOT,IDENTIFIER,RBRACKET,SEMI,EOF},
//                null,
//                0);
//    }
//
//    @Test public void testDotDot4() {
//        helpScanner("//@ modifies a[0..4];",
//                new ITokenKind[]{ASSIGNABLE,IDENTIFIER,LBRACKET,INTLITERAL,DOT_DOT,INTLITERAL,RBRACKET,SEMI,EOF},
//                null,
//                0);
//    }
//
//    @Test public void testDotDot4a() {
//        helpScanner("//@ modifies a[0 ..4];",
//                new ITokenKind[]{ASSIGNABLE,IDENTIFIER,LBRACKET,INTLITERAL,DOT_DOT,INTLITERAL,RBRACKET,SEMI,EOF},
//                null,
//                0);
//    }
//
//    @Test public void testDotDot5() {
//        helpScanner("//@ modifies ..234;",
//                new ITokenKind[]{ASSIGNABLE,DOT_DOT,INTLITERAL,SEMI,EOF},
//                null,
//                0);
//    }
//
//    @Test public void testDotDot6() {
//        helpScanner("//@ modifies .234;",
//                new ITokenKind[]{ASSIGNABLE,DOUBLELITERAL,SEMI,EOF},
//                null,
//                0);
//    }
//
//    @Test public void testDotDot7() {
//        helpScanner("//@ modifies 0.234;",
//                new ITokenKind[]{ASSIGNABLE,DOUBLELITERAL,SEMI,EOF},
//                null,
//                0);
//    }
//
//    @Test public void testDotDot8() {
//        helpScanner("//@ modifies a[0. .4];",
//                new ITokenKind[]{ASSIGNABLE,IDENTIFIER,LBRACKET,DOUBLELITERAL,DOUBLELITERAL,RBRACKET,SEMI,EOF},
//                null,
//                0);
//    }

    @Test public void testDotDot9() {
        helpScanner("//@ 0xApA     ",
                new ITokenKind[]{DOUBLELITERAL,IDENTIFIER,EJML,EOF},
                null,
                1);
        checkMessages("/TEST.java:1: malformed floating point literal",5);
    }

    @Test public void testDotDot10() {
        helpScanner("//@ 1.0eZ      ",
                new ITokenKind[]{DOUBLELITERAL,IDENTIFIER,EJML,EOF},
                null,
                1);
        checkMessages("/TEST.java:1: malformed floating point literal",5);
    }

    @Test public void testDotDot11() {
        helpScanner("//@ 0xA.0pZ     ",
                new ITokenKind[]{DOUBLELITERAL,IDENTIFIER,EJML,EOF},
                null,
                1);
        checkMessages("/TEST.java:1: malformed floating point literal",5);
    }

    @Test public void testDotDot12() {
        helpScanner("//@ 0xA.Z     ",
                new ITokenKind[]{DOUBLELITERAL,IDENTIFIER,EJML,EOF},
                null,
                1);
        checkMessages("/TEST.java:1: malformed floating point literal",5);
    }

    @Test public void testConditionalKey1() {
        helpScanner("//+POS@ requires      /*+POS@ requires */
/*@ non_null*/
//@ modifies foundErrors;

/*@ nullable*/
//@ modifies foundErrors;

/*@ non_null*/
//@ modifies foundErrors;

/*@ nullable*/
//@ modifies foundErrors;

/*@ non_null*/
//@ modifies foundErrors;

/*@ nullable*/
//@ modifies foundErrors;

/*@ non_null*/
//@ modifies foundErrors;

/*@ nullable*/
//@ modifies foundErrors;

/*@ non_null*/
//@ modifies foundErrors;

/*@ nullable*/
//@ modifies foundErrors;

/*@ non_null*/
/*@ non_null*/
/*@ non_null*/
/*@ non_null*/
/*@ non_null*/
/*@ non_null*/
/*@ non_null*/
/*@ non_null*/
/*@ non_null*/
/*@ non_null*/
//@ loop_invariant i>=0; decreasing -i;      for (int i=0; i<10; i++) {}      }}"

//@  loop_modifies k; loop_invariant i>=0; decreasing -i;     for (int i=0; i<10; i++) {}      }}"

//@ loop_modifies x;      for (int i=0; i<10; i++) {}      }}"

//@ loop_modifies j;      for (int i=0; i<10; i++) {}      }}"

//@ loop_modifies \    othing;      for (int i=0; i<10; i++) {}      }}"

//@ loop_modifies \\everything;      for (int i=0; i<10; i++) {}      }}"

//@ loop_modifies ;      for (int i=0; i<10; i++) {}      }}"

//@ loop_modifies k[;      for (int i=0; i<10; i++) {}      }}"

//@ loop_modifies k.;      for (int i=0; i<10; i++) {}      }}"

//@ loop_modifies k k k;      for (int i=0; i<10; i++) {}      }}"

//@ loop_modifies k,,;      for (int i=0; i<10; i++) {}      }}"

//@ loop_invariant o != null; decreasing 6;      for (Object o: list) {}      }}"

//@ loop_invariant i>=0; decreasing i;      while (i>=0) {}      }}"

//@ loop_invariant j;     for (int i=0; i<10; i++) {}      }}"

//@ loop_invariant j;     int a = 0;      }}"

//@ loop_invariant j;          }}"

//@ loop_invariant j;     j=true;     }}"

/*@ assume true; assert o==o;*/
//@ assume true: \"a\";     //@ assert false: \"b\";          }}"

/*@ assume 0; assert o;*/
/*@ assume ; assert ;*/
/*@ assume true assert false;*/
//@ unreachable;      i = 0;     }}"

//@ unreachable      i = 0;     }}"

//@ ghost int j; set j = 1;      i = 0;     }}"

//@ ghost int j; set j = 1      i = 0;     }}"

//@ ghost int j; set if (true) {};      i = 0;     }}"

//@ ghost boolean j; set j =  (o <==> \\old(o));      i = 0;     }}"

//@ ghost int j; debug m();      i = 0;     }}"

//@ ghost int j; debug m()      i = 0;     }}"

//@ ghost int j; debug while (i>0) {};      i = 0;     }}"

//@ ghost int j; final ghost int k = 0;      i = 0;     }}"

//@ ghost int j; ghost final int k = 0;      i = 0;     }}"

//@ refining ensures i ==0;      i = 0;     }}"

//@ refining normal_behavior ensures i ==0; also behavior ensures i >= 0;      i = 0;     }}"

//@ refining also ensures i ==0;      i = 0;     }}"

//@ refining public behavior ensures i ==0;      i = 0;     }}"

//@ loop_invariant i>=0; decreasing -i;      for (int i=0; i<10; i++) {}      }}"

//@  loop_modifies k; loop_invariant i>=0; decreasing -i;     for (int i=0; i<10; i++) {}      }}"

//@ loop_modifies x;      for (int i=0; i<10; i++) {}      }}"

//@ loop_modifies j;      for (int i=0; i<10; i++) {}      }}"

//@ loop_modifies \    othing;      for (int i=0; i<10; i++) {}      }}"

//@ loop_modifies \\everything;      for (int i=0; i<10; i++) {}      }}"

//@ loop_modifies ;      for (int i=0; i<10; i++) {}      }}"

//@ loop_modifies k[;      for (int i=0; i<10; i++) {}      }}"

//@ loop_modifies k.;      for (int i=0; i<10; i++) {}      }}"

//@ loop_modifies k k k;      for (int i=0; i<10; i++) {}      }}"

//@ loop_modifies k,,;      for (int i=0; i<10; i++) {}      }}"

//@ loop_invariant o != null; decreasing 6;      for (Object o: list) {}      }}"

//@ loop_invariant i>=0; decreasing i;      while (i>=0) {}      }}"

//@ loop_invariant j;     for (int i=0; i<10; i++) {}      }}"

//@ loop_invariant j;     int a = 0;      }}"

//@ loop_invariant j;          }}"

//@ loop_invariant j;     j=true;     }}"

/*@ assume true; assert o==o;*/
//@ assume true: \"a\";     //@ assert false: \"b\";          }}"

/*@ assume 0; assert o;*/
/*@ assume ; assert ;*/
/*@ assume true assert false;*/
//@ unreachable;      i = 0;     }}"

//@ unreachable      i = 0;     }}"

//@ ghost int j; set j = 1;      i = 0;     }}"

//@ ghost int j; set j = 1      i = 0;     }}"

//@ ghost int j; set if (true) {};      i = 0;     }}"

//@ ghost boolean j; set j =  (o <==> \\old(o));      i = 0;     }}"

//@ ghost int j; debug m();      i = 0;     }}"

//@ ghost int j; debug m()      i = 0;     }}"

//@ ghost int j; debug while (i>0) {};      i = 0;     }}"

//@ ghost int j; final ghost int k = 0;      i = 0;     }}"

//@ ghost int j; ghost final int k = 0;      i = 0;     }}"

//@ refining ensures i ==0;      i = 0;     }}"

//@ refining normal_behavior ensures i ==0; also behavior ensures i >= 0;      i = 0;     }}"

//@ refining also ensures i ==0;      i = 0;     }}"

//@ refining public behavior ensures i ==0;      i = 0;     }}"

//@ loop_invariant i>=0; decreasing -i;      for (int i=0; i<10; i++) {}      }}"

//@  loop_modifies k; loop_invariant i>=0; decreasing -i;     for (int i=0; i<10; i++) {}      }}"

//@ loop_modifies x;      for (int i=0; i<10; i++) {}      }}"

//@ loop_modifies j;      for (int i=0; i<10; i++) {}      }}"

//@ loop_modifies \    othing;      for (int i=0; i<10; i++) {}      }}"

//@ loop_modifies \\everything;      for (int i=0; i<10; i++) {}      }}"

//@ loop_modifies ;      for (int i=0; i<10; i++) {}      }}"

//@ loop_modifies k[;      for (int i=0; i<10; i++) {}      }}"

//@ loop_modifies k.;      for (int i=0; i<10; i++) {}      }}"

//@ loop_modifies k k k;      for (int i=0; i<10; i++) {}      }}"

//@ loop_modifies k,,;      for (int i=0; i<10; i++) {}      }}"

//@ loop_invariant o != null; decreasing 6;      for (Object o: list) {}      }}"

//@ loop_invariant i>=0; decreasing i;      while (i>=0) {}      }}"

//@ loop_invariant j;     for (int i=0; i<10; i++) {}      }}"

//@ loop_invariant j;     int a = 0;      }}"

//@ loop_invariant j;          }}"

//@ loop_invariant j;     j=true;     }}"

/*@ assume true; assert o==o;*/
//@ assume true: \"a\";     //@ assert false: \"b\";          }}"

/*@ assume 0; assert o;*/
/*@ assume ; assert ;*/
/*@ assume true assert false;*/
//@ unreachable;      i = 0;     }}"

//@ unreachable      i = 0;     }}"

//@ ghost int j; set j = 1;      i = 0;     }}"

//@ ghost int j; set j = 1      i = 0;     }}"

//@ ghost int j; set if (true) {};      i = 0;     }}"

//@ ghost boolean j; set j =  (o <==> \\old(o));      i = 0;     }}"

//@ ghost int j; debug m();      i = 0;     }}"

//@ ghost int j; debug m()      i = 0;     }}"

//@ ghost int j; debug while (i>0) {};      i = 0;     }}"

//@ ghost int j; final ghost int k = 0;      i = 0;     }}"

//@ ghost int j; ghost final int k = 0;      i = 0;     }}"

//@ refining ensures i ==0;      i = 0;     }}"

//@ refining normal_behavior ensures i ==0; also behavior ensures i >= 0;      i = 0;     }}"

//@ refining also ensures i ==0;      i = 0;     }}"

//@ refining public behavior ensures i ==0;      i = 0;     }}"

//@ loop_invariant i>=0; decreasing -i;      for (int i=0; i<10; i++) {}      }}"

//@  loop_modifies k; loop_invariant i>=0; decreasing -i;     for (int i=0; i<10; i++) {}      }}"

//@ loop_modifies x;      for (int i=0; i<10; i++) {}      }}"

//@ loop_modifies j;      for (int i=0; i<10; i++) {}      }}"

//@ loop_modifies \    othing;      for (int i=0; i<10; i++) {}      }}"

//@ loop_modifies \\everything;      for (int i=0; i<10; i++) {}      }}"

//@ loop_modifies ;      for (int i=0; i<10; i++) {}      }}"

//@ loop_modifies k[;      for (int i=0; i<10; i++) {}      }}"

//@ loop_modifies k.;      for (int i=0; i<10; i++) {}      }}"

//@ loop_modifies k k k;      for (int i=0; i<10; i++) {}      }}"

//@ loop_modifies k,,;      for (int i=0; i<10; i++) {}      }}"

//@ loop_invariant o != null; decreasing 6;      for (Object o: list) {}      }}"

//@ loop_invariant i>=0; decreasing i;      while (i>=0) {}      }}"

//@ loop_invariant j;     for (int i=0; i<10; i++) {}      }}"

//@ loop_invariant j;     int a = 0;      }}"

//@ loop_invariant j;          }}"

//@ loop_invariant j;     j=true;     }}"

/*@ assume true; assert o==o;*/
//@ assume true: \"a\";     //@ assert false: \"b\";          }}"

/*@ assume 0; assert o;*/
/*@ assume ; assert ;*/
/*@ assume true assert false;*/
//@ unreachable;      i = 0;     }}"

//@ unreachable      i = 0;     }}"

//@ ghost int j; set j = 1;      i = 0;     }}"

//@ ghost int j; set j = 1      i = 0;     }}"

//@ ghost int j; set if (true) {};      i = 0;     }}"

//@ ghost boolean j; set j =  (o <==> \\old(o));      i = 0;     }}"

//@ ghost int j; debug m();      i = 0;     }}"

//@ ghost int j; debug m()      i = 0;     }}"

//@ ghost int j; debug while (i>0) {};      i = 0;     }}"

//@ ghost int j; final ghost int k = 0;      i = 0;     }}"

//@ ghost int j; ghost final int k = 0;      i = 0;     }}"

//@ refining ensures i ==0;      i = 0;     }}"

//@ refining normal_behavior ensures i ==0; also behavior ensures i >= 0;      i = 0;     }}"

//@ refining also ensures i ==0;      i = 0;     }}"

//@ refining public behavior ensures i ==0;      i = 0;     }}"

//@ loop_invariant i>=0; decreasing -i;      for (int i=0; i<10; i++) {}      }}"

//@  loop_modifies k; loop_invariant i>=0; decreasing -i;     for (int i=0; i<10; i++) {}      }}"

//@ loop_modifies x;      for (int i=0; i<10; i++) {}      }}"

//@ loop_modifies j;      for (int i=0; i<10; i++) {}      }}"

//@ loop_modifies \    othing;      for (int i=0; i<10; i++) {}      }}"

//@ loop_modifies \\everything;      for (int i=0; i<10; i++) {}      }}"

//@ loop_modifies ;      for (int i=0; i<10; i++) {}      }}"

//@ loop_modifies k[;      for (int i=0; i<10; i++) {}      }}"

//@ loop_modifies k.;      for (int i=0; i<10; i++) {}      }}"

//@ loop_modifies k k k;      for (int i=0; i<10; i++) {}      }}"

//@ loop_modifies k,,;      for (int i=0; i<10; i++) {}      }}"

//@ loop_invariant o != null; decreasing 6;      for (Object o: list) {}      }}"

//@ loop_invariant i>=0; decreasing i;      while (i>=0) {}      }}"

//@ loop_invariant j;     for (int i=0; i<10; i++) {}      }}"

//@ loop_invariant j;     int a = 0;      }}"

//@ loop_invariant j;          }}"

//@ loop_invariant j;     j=true;     }}"

/*@ assume true; assert o==o;*/
//@ assume true: \"a\";     //@ assert false: \"b\";          }}"

/*@ assume 0; assert o;*/
/*@ assume ; assert ;*/
/*@ assume true assert false;*/
//@ unreachable;      i = 0;     }}"

//@ unreachable      i = 0;     }}"

//@ ghost int j; set j = 1;      i = 0;     }}"

//@ ghost int j; set j = 1      i = 0;     }}"

//@ ghost int j; set if (true) {};      i = 0;     }}"

//@ ghost boolean j; set j =  (o <==> \\old(o));      i = 0;     }}"

//@ ghost int j; debug m();      i = 0;     }}"

//@ ghost int j; debug m()      i = 0;     }}"

//@ ghost int j; debug while (i>0) {};      i = 0;     }}"

//@ ghost int j; final ghost int k = 0;      i = 0;     }}"

//@ ghost int j; ghost final int k = 0;      i = 0;     }}"

//@ refining ensures i ==0;      i = 0;     }}"

//@ refining normal_behavior ensures i ==0; also behavior ensures i >= 0;      i = 0;     }}"

//@ refining also ensures i ==0;      i = 0;     }}"

//@ refining public behavior ensures i ==0;      i = 0;     }}"

//@ ghost int i = (\\lbl A 0);     }"

//@ ghost int i = (\\lbl A 0);     }"

//@ assert \\count == i;     " +

//@ assert \\count == i;     " +

//@ assert \\values.size() >= 0;     " +

//@ assert \\values.size() >= 0;     " +

//@ signals (Exception) \\exception != null;    " +

//@ signals (Exception) \\exception != null;    " +

/*@ secret */
/*@ secret */
//@ query    " +

//@ query    " +

//@ assignable a[0..];    " +

//@ assignable a[0..];    " +

//@  model static int i; static represents i <- j;

//@ ghost int i = (\\lbl A 0);     }"

//@ ghost int i = (\\lbl A 0);     }"

//@ assert \\count == i;     " +

//@ assert \\count == i;     " +

//@ assert \\values.size() >= 0;     " +

//@ assert \\values.size() >= 0;     " +

//@ signals (Exception) \\exception != null;    " +

//@ signals (Exception) \\exception != null;    " +

/*@ secret */
/*@ secret */
//@ query    " +

//@ query    " +

//@ assignable a[0..];    " +

//@ assignable a[0..];    " +

//@  model static int i; static represents i <- j;

//@ ghost int i = (\\lbl A 0);     }"

//@ ghost int i = (\\lbl A 0);     }"

//@ assert \\count == i;     " +

//@ assert \\count == i;     " +

//@ assert \\values.size() >= 0;     " +

//@ assert \\values.size() >= 0;     " +

//@ signals (Exception) \\exception != null;    " +

//@ signals (Exception) \\exception != null;    " +

/*@ secret */
/*@ secret */
//@ query    " +

//@ query    " +

//@ assignable a[0..];    " +

//@ assignable a[0..];    " +

//@  model static int i; static represents i <- j;

//@ ghost int i = (\\lbl A 0);     }"

//@ ghost int i = (\\lbl A 0);     }"

//@ assert \\count == i;     " +

//@ assert \\count == i;     " +

//@ assert \\values.size() >= 0;     " +

//@ assert \\values.size() >= 0;     " +

//@ signals (Exception) \\exception != null;    " +

//@ signals (Exception) \\exception != null;    " +

/*@ secret */
/*@ secret */
//@ query    " +

//@ query    " +

//@ assignable a[0..];    " +

//@ assignable a[0..];    " +

//@  model static int i; static represents i <- j;

//@ ghost int i = (\\lbl A 0);     }"

//@ ghost int i = (\\lbl A 0);     }"

//@ assert \\count == i;     " +

//@ assert \\count == i;     " +

//@ assert \\values.size() >= 0;     " +

//@ assert \\values.size() >= 0;     " +

//@ signals (Exception) \\exception != null;    " +

//@ signals (Exception) \\exception != null;    " +

/*@ secret */
/*@ secret */
//@ query    " +

//@ query    " +

//@ assignable a[0..];    " +

//@ assignable a[0..];    " +

//@  model static int i; static represents i <- j;

//@ public model JMLDataGroup streamState;

//@ public model JMLDataGroup streamState;

//@ public model JMLDataGroup streamState;

//@ public model JMLDataGroup streamState;

//@ public model JMLDataGroup streamState;

//@ assert k;    }

//@ assert <Object>\\old(k);    }}"

/*@ also requires true; */
/*@ requires true; */
/*@ requires true; */
/*@ also requires true; */
/*@ also requires true; */
/*@ requires true; */
/*@ public normal_behavior requires true; */
/*@ also requires true; */
/*@ also requires true; */
/*@ requires true; */
/*@ requires true; */
/*@ also requires true; */
/*@ also public normal_behavior requires true; */
/*@ public normal_behavior requires true; */
//@ assert \\old;    }

//@ assert \\old();    }

//@ assert \\pre();    }

//@ assert \\old(k);    }

//@ assert \\old(b);    }}");

//@ assert \\pre(b,k);    }

//@ assert \\old(b,5);    }

//@ assert \\old(b,k);    }}"

//@ requires \\old(b);      void m() { }

//@ ensures \\old(b,k);      void m() { }

//@ requires \\pre(b);      void m() { }

//@ assert \\old(b,k);    }}"

//@ assert \\old(bb) && \\old(bb,k);    }}"

//@ assert \\old(b,k);    }}"

//@ assert \\max(\\lockset);    }

//@ assert \\max;    }

//@ assert \\max();    }

//@ assert \\max(k);    }

//@ assert \\max(b,k);    }

//@ assert \\invariant_for(i);    }}"

//@ assert \\invariant_for(k);    }}"

//@ assert \\invariant_for(A);    }}"

//@ assert \\invariant_for();    }}"

//@ assert \\invariant_for(Integer,k);    }}"

//@ assert \\invariant_for(Integer,k);    }}"

//@ assert \\invariant_for(Integer,k);    }}"

//@ assert \\invariant_for();    }}"

//@ assert \\type(A,k);    }}"

//@ assert \\type();    }}"

//@ assert \\type(b);    }}"

//@ assert \\type(true);    }}"

//@ assert \\type(int);    }}"

//@ assert \\type(int[][]);    }}"

//@ assert \\type(Object);    }}"

//@ assert \\type(java.lang.Object);    }}"

//@ assert \\type(java.lang.Object[][]);    }}"

//@ assert \\type(A);    }}"

//@ assert \\type(void);    }}"

//@ assert \\type(Void);    }}"

//@ assert \\typeof(b);    }

//@ assert \\result;    }}"

//@ ensures \\result;     void m() {     }

//@ assert \\result;     void m() {     }

/*@ ensures \\result == 1; */
/*@ ensures \\result == 1; */
/*@ ensures \\result     ; */
//@ return true;    }}"

/*@ ensures \\result     ; */
//@ int t;    }}"

/*@ ghost \\TYPE t; */
/*@ ghost \\TYPE t,tt; */
/*@ ghost \\bigint i; model \\real r; ghost \\TYPE t; */
/*@  \\TYPE t; */
/*@ @Ghost int i; */
/*@ ghost \\TYPE t; */
//@ensures t <: t;    void m() {}}");

/*@ ghost \\TYPE t; */
//@ensures c <: c;    void m() {}}");

/*@ ghost \\TYPE t; */
//@ensures c <: c;    void m() {}}");

/*@ ghost \\TYPE t; */
//@ensures c <: c;    void m() {}}");

/*@ ghost \\TYPE t; */
//@ensures t <: \\typeof(o);    void m() {}}"

/*@ ghost \\TYPE t; */
//@ensures o.getClass() <: Object.class;    void m() {}}"

/*@ ghost \\TYPE t; */
//@ensures JML.erasure(t) <: c;    void m() {}}");

/*@ ghost \\TYPE t; */
//@ensures t <: 5;    void m() {}

/*@ ghost \\TYPE t; */
//@ensures true <: c;    void m() {}

//@ ghost \\TYPE t = \\type(java.lang.Integer);

//@ ghost \\TYPE t = \\type(java.util.List);

//@ ghost \\TYPE t = \\type(java.util.List<Integer>);

//@ ghost Class<?> t = \\erasure(\\type(java.lang.Integer));

//@ ghost Class<?> t = \\erasure(\\type(java.util.List));

//@ ghost Class<?> t = \\erasure(\\type(java.util.List<Integer>));

//@requires \\result == 0;     int m() {return 0;}

//@ invariant new JMLSetType { Integer i | c.contains(i) && i<10};           }"

//@ requires new JMLSetType { Integer i | c.contains(i) && i<10};      void m() {}      }"

//@ ghost Object j;      //@ requires m( (\\exists int i; 0 < i && i <10; m(i)) );     /*@pure*/boolean m(int k) { return false; }     

//@ ghost int k = new JMLSetType { Integer i | c.contains(i) && i<10};      void m() {}      }"

//@ ghost Object k = new JMLSetType { Integer i | c.contains(i) && p<10};      void m() {}      }"

//@ ghost Object k = new JMLSetType { Integer i | c.contains(i) && i<10};      void m() {}      }"

//@ ghost Object j = m( (\\exists int i; 0 < i && i <10; m(i)) );     boolean m(int k) { return false; }     

//@ ghost Object j = m( (\\exists int i; 0 < i && i <10; m(i)) );     boolean m(boolean k) { return false; } boolean m(int p) { return false; }     }"

//@ ghost Object j = m( (\\exists int i; 0 < i && i <10; m(i)) );     boolean m(boolean k) { return false; }      }"

//@ ghost boolean j = ( (\\exists int i; 0 < i && i <10; m(p)) );     boolean m(int k) { return false; }      }"

//@ ghost int k = new JMLSetType { Integer i | c.contains(i) && i<10};     }      }"

//@ ghost Object k = new JMLSetType { Integer i | c.contains(i) && p<10};     }      }"

//@ ghost Object k = new JMLSetType { Integer i | c.contains(i) && i<10};     }      }"

//@ ghost Object j = m( (\\exists int i; 0 < i && i <10; m(i)) );      return false; }     

//@ ghost boolean j = ( (\\exists int i; 0 < i && i <10; m(i)) );      return false; }     }"

//@ ghost boolean j = ( (\\exists int i; 0 < i && i <10; m(p)) );      return false; }     

//@ ghost Object k;       java.util.Collection c;  void m() { //@ set k = new JMLSetType { Integer i | c.contains(i) && i<10};     }      }"

//@ ghost int j;            boolean m(int k) { //@ set j = m( (\\exists int i; 0 < i && i <10; m(i)) );      return false; }     

//@ ghost Object j;      /*@pure*/ boolean m(int i) { return false; }    //@ invariant m( (\\exists int i; 0 < i && i <10; m(i)) );      

//@ ghost Object j;      /*@pure*/ boolean m(int i) { return false; }    //@ invariant m( (\\forall int i; 0 < i && i <10; m(i)) );      

//@ ghost Object j;      /*@pure*/ boolean m(int i) { return false; }    //@ invariant (\    um_of int i; 0 < i && i <10; m(i)) ;      

//@ ghost Object j;      boolean m(int i) { return false; }    //@ invariant (\\max long i; 0 < i && i <10; i) ;      

//@ ghost Object j;      boolean m(float i) { return false; }    //@ invariant (\\sum long i; 0 < i && i <10; i) ;      

//@ ghost Object j;      boolean m(double i) { return false; }    //@ invariant (\\product long i,k; 0 < i && k <10; i) ;      

//@ ghost Object j;      boolean m(double i) { return false; }    //@ invariant (\\product long i; j; i) ;      

//@ invariant (\\product long i; 0 < j && i <10; i) ;      

//@ invariant (\\exists int i; 0 < i && i <10;  i > -1) ;      //@ static invariant (\\exists int i; 0 < i && i <10;  i > -1) ;      void m() {}}"

//@ invariant (\\exists int i; 0 < i && i <10;  i > m) ;      //@ static invariant (\\exists int i; 0 < i && i <10;  i > m) ;      void m() {}}"

//@ static invariant (\\exists int i; 0 < i && i <10;  i > s) ;      //@ static invariant (\\exists int i; 0 < i && i <10;  i > s) ;      void m() {}}"

//@ ghost boolean b = (\\exists int i; 0 < i && i <10;  i > m) ;      //@ static ghost boolean bb = (\\exists int i; 0 < i && i <10;  i > m) ;      //@ requires b && bb;     void m() {}}"

//@ ghost boolean b = (\\exists int i; 0 < i && i <10;  i > s) ;      //@ static ghost boolean bb = (\\exists int i; 0 < i && i <10;  i > s) ;      //@ requires b && bb;     void m() {}}"

//@ requires (\\exists int i; 0 < i && i <10;  i > -1) ;       void m() {}}"

//@ requires (\\exists int i; 0 < i && i <10;  i > -1) ;       static void m() {}}"

//@ assert (\\let int i = 0; i != 0);     }}"

//@ assert 0 == (\\let int i = 0, int j = 2; i - j);     }}"

//@ assert (\\let int i = 0; i);     }}"

//@ assert (\\let int i; i==0);     }}"

//@ assert (\\let int i=0; i==0);      i = true; }}"

//@ assert (\\let int i=0; i==0);      i = true; }}"

//@ invariant (\\let int i=0; i==0);       }"

//@ assert (\\let int i=0; i==j);       }}"

//@ invariant (\\let int i=0; i==j);       }"

//@ assert (\\let int i=0; i==j);       }}"

//@ invariant (\\let int i=0; i==j);       }"

//@ requires  i; also requires \\same;      boolean m(boolean i) { return false; }

//@ requires 1+\\same;      boolean m(double i) { return false; },

//@ requires i; also requires !\\same;      boolean m(boolean i) { return false; }

//@ requires \\same;      boolean m(double i) { return false; }

//@ ensures \\same;      boolean m(double i) { return false; }

//@ invariant o < oo;      }"

//@ invariant o < oo;      }"

//@ invariant o <= oo;      }"

//@ invariant o <= oo;      }"

//@ invariant o < true;      }"

//@ invariant o < 5;      }"

//@ invariant o < 5;      }"

//@ invariant o <# oo;      }"

//@ invariant o <#= oo;      }"

//@ invariant \\fresh(o);       }"

//@ ensures \\fresh(o);      void m() {}      }"

//@ ensures \\fresh(o,oo);      void m() {}       }"

//@ ensures \\fresh();      void m() {}       }"

//@ ensures   \\fresh(i);      void m() {}       }"

//@ ensures   \\fresh(o) + 1 == 0;      void m() {}       }"

//@ ghost boolean k = \\fresh(o);       }"

//@ invariant \\only_assigned(o) || \\only_accessed(o) || \\only_captured(o) || \    ot_assigned(o) || \    ot_modified(o);       }"

//@ ensures \\only_assigned(o) || \\only_accessed(o) || \\only_captured(o) || \    ot_assigned(o) || \    ot_modified(o);      void m() {}      }"

//@ ghost boolean k = \\only_assigned(o) || \\only_accessed(o) || \\only_captured(o) || \    ot_assigned(o) || \    ot_modified(o);       }"

//@ invariant (* stuff *);     //@ ghost int k = (* stuff *);       }"

//@ public model int duration;       void m() { //@ set duration = 0;     }      }"

//@ model import java.util.List;     public class A {     //@ ghost List k;     List n;       }"

//@ model import java.util.*;     public class A {     //@ ghost List k;     List n;       }"

//@ model import java.util.List;     public class A {     //@ ghost List k;     List n;       }"

//@ import java.util.List;     public class A {     //@ ghost List k;     List n;       }"

/*@ model */
/*@ model */
/*@ model import */
/*@ instance ghost V r; @*/
//@ loop_invariant 0<=i && i <= blub.length;    "

/*@nullable @*/
//@ loop_invariant 0<=i && i <= blub.length;    "

/*@nullable @*/
/*@ in height; @*/
/*@ public model int height;    "
                +"      in_redundantly height;    "
                +"      public invariant 0 < height;    "
                +"      public constraint \\old(height) == height;    "
                +"      private represents height = my_height;    "
                +"      private invariant 0 < my_height;    "
                +"  @*/
/*@ in height; @*/
/*@ public model int height;    "
                +"      in_redundantly height2;    "
                +"  @*/
/*@ public model int height2;    "
                +"      in_redundantly height;    "
                +"  @*/
//@ ghost boolean b4 = \\type(java.util.Map<java.util.List<?>,?>) <: \\type(java.util.List<?>);

/*@ public invariant (\\sum Integer i; 0<=i && i < 6; new Object()); */
//@ ghost boolean bb = (\\forall int i; 0<=i && i <=4; 0!=(\\lbl LBL i));    "

//@ model public void m1bad(java.util.function.Function<Integer,Integer> f) ;    "

//@ public behavior requires true;    "

//@ protected behavior requires true;    "

//@ behavior requires true;    "

//@ private behavior requires true;    "

//@ requires true;    "

//@ public behavior requires true;    "  // Warning

//@ protected behavior requires true;    "

//@ behavior requires true;    "

//@ private behavior requires true;    "

//@ requires true;    "

//@ public behavior requires true;    " // Warning

//@ protected behavior requires true;    " // Warning

//@ behavior requires true;    "  // Warning

//@ private behavior requires true;    "

//@ requires true;    "

//@ public behavior requires true;    " // Warning

//@ protected behavior requires true;    " // Warning

//@ behavior requires true;    "

//@ private behavior requires true;    "

//@ requires true;    "

//@ assert k;    }

//@ assert <Object>\\old(k);    }}"

/*@ also requires true; */
/*@ requires true; */
/*@ requires true; */
/*@ also requires true; */
/*@ also requires true; */
/*@ requires true; */
/*@ public normal_behavior requires true; */
/*@ also requires true; */
/*@ also requires true; */
/*@ requires true; */
/*@ requires true; */
/*@ also requires true; */
/*@ also public normal_behavior requires true; */
/*@ public normal_behavior requires true; */
//@ assert \\old;    }

//@ assert \\old();    }

//@ assert \\pre();    }

//@ assert \\old(k);    }

//@ assert \\old(b);    }}");

//@ assert \\pre(b,k);    }

//@ assert \\old(b,5);    }

//@ assert \\old(b,k);    }}"

//@ requires \\old(b);      void m() { }

//@ ensures \\old(b,k);      void m() { }

//@ requires \\pre(b);      void m() { }

//@ assert \\old(b,k);    }}"

//@ assert \\old(bb) && \\old(bb,k);    }}"

//@ assert \\old(b,k);    }}"

//@ assert \\max(\\lockset);    }

//@ assert \\max;    }

//@ assert \\max();    }

//@ assert \\max(k);    }

//@ assert \\max(b,k);    }

//@ assert \\invariant_for(i);    }}"

//@ assert \\invariant_for(k);    }}"

//@ assert \\invariant_for(A);    }}"

//@ assert \\invariant_for();    }}"

//@ assert \\invariant_for(Integer,k);    }}"

//@ assert \\invariant_for(Integer,k);    }}"

//@ assert \\invariant_for(Integer,k);    }}"

//@ assert \\invariant_for();    }}"

//@ assert \\type(A,k);    }}"

//@ assert \\type();    }}"

//@ assert \\type(b);    }}"

//@ assert \\type(true);    }}"

//@ assert \\type(int);    }}"

//@ assert \\type(int[][]);    }}"

//@ assert \\type(Object);    }}"

//@ assert \\type(java.lang.Object);    }}"

//@ assert \\type(java.lang.Object[][]);    }}"

//@ assert \\type(A);    }}"

//@ assert \\type(void);    }}"

//@ assert \\type(Void);    }}"

//@ assert \\typeof(b);    }

//@ assert \\result;    }}"

//@ ensures \\result;     void m() {     }

//@ assert \\result;     void m() {     }

/*@ ensures \\result == 1; */
/*@ ensures \\result == 1; */
/*@ ensures \\result     ; */
//@ return true;    }}"

/*@ ensures \\result     ; */
//@ int t;    }}"

/*@ ghost \\TYPE t; */
/*@ ghost \\TYPE t,tt; */
/*@ ghost \\bigint i; model \\real r; ghost \\TYPE t; */
/*@  \\TYPE t; */
/*@ @Ghost int i; */
/*@ ghost \\TYPE t; */
//@ensures t <: t;    void m() {}}");

/*@ ghost \\TYPE t; */
//@ensures c <: c;    void m() {}}");

/*@ ghost \\TYPE t; */
//@ensures c <: c;    void m() {}}");

/*@ ghost \\TYPE t; */
//@ensures c <: c;    void m() {}}");

/*@ ghost \\TYPE t; */
//@ensures t <: \\typeof(o);    void m() {}}"

/*@ ghost \\TYPE t; */
//@ensures o.getClass() <: Object.class;    void m() {}}"

/*@ ghost \\TYPE t; */
//@ensures JML.erasure(t) <: c;    void m() {}}");

/*@ ghost \\TYPE t; */
//@ensures t <: 5;    void m() {}

/*@ ghost \\TYPE t; */
//@ensures true <: c;    void m() {}

//@ ghost \\TYPE t = \\type(java.lang.Integer);

//@ ghost \\TYPE t = \\type(java.util.List);

//@ ghost \\TYPE t = \\type(java.util.List<Integer>);

//@ ghost Class<?> t = \\erasure(\\type(java.lang.Integer));

//@ ghost Class<?> t = \\erasure(\\type(java.util.List));

//@ ghost Class<?> t = \\erasure(\\type(java.util.List<Integer>));

//@requires \\result == 0;     int m() {return 0;}

//@ invariant new JMLSetType { Integer i | c.contains(i) && i<10};           }"

//@ requires new JMLSetType { Integer i | c.contains(i) && i<10};      void m() {}      }"

//@ ghost Object j;      //@ requires m( (\\exists int i; 0 < i && i <10; m(i)) );     /*@pure*/boolean m(int k) { return false; }     

//@ ghost int k = new JMLSetType { Integer i | c.contains(i) && i<10};      void m() {}      }"

//@ ghost Object k = new JMLSetType { Integer i | c.contains(i) && p<10};      void m() {}      }"

//@ ghost Object k = new JMLSetType { Integer i | c.contains(i) && i<10};      void m() {}      }"

//@ ghost Object j = m( (\\exists int i; 0 < i && i <10; m(i)) );     boolean m(int k) { return false; }     

//@ ghost Object j = m( (\\exists int i; 0 < i && i <10; m(i)) );     boolean m(boolean k) { return false; } boolean m(int p) { return false; }     }"

//@ ghost Object j = m( (\\exists int i; 0 < i && i <10; m(i)) );     boolean m(boolean k) { return false; }      }"

//@ ghost boolean j = ( (\\exists int i; 0 < i && i <10; m(p)) );     boolean m(int k) { return false; }      }"

//@ ghost int k = new JMLSetType { Integer i | c.contains(i) && i<10};     }      }"

//@ ghost Object k = new JMLSetType { Integer i | c.contains(i) && p<10};     }      }"

//@ ghost Object k = new JMLSetType { Integer i | c.contains(i) && i<10};     }      }"

//@ ghost Object j = m( (\\exists int i; 0 < i && i <10; m(i)) );      return false; }     

//@ ghost boolean j = ( (\\exists int i; 0 < i && i <10; m(i)) );      return false; }     }"

//@ ghost boolean j = ( (\\exists int i; 0 < i && i <10; m(p)) );      return false; }     

//@ ghost Object k;       java.util.Collection c;  void m() { //@ set k = new JMLSetType { Integer i | c.contains(i) && i<10};     }      }"

//@ ghost int j;            boolean m(int k) { //@ set j = m( (\\exists int i; 0 < i && i <10; m(i)) );      return false; }     

//@ ghost Object j;      /*@pure*/ boolean m(int i) { return false; }    //@ invariant m( (\\exists int i; 0 < i && i <10; m(i)) );      

//@ ghost Object j;      /*@pure*/ boolean m(int i) { return false; }    //@ invariant m( (\\forall int i; 0 < i && i <10; m(i)) );      

//@ ghost Object j;      /*@pure*/ boolean m(int i) { return false; }    //@ invariant (\    um_of int i; 0 < i && i <10; m(i)) ;      

//@ ghost Object j;      boolean m(int i) { return false; }    //@ invariant (\\max long i; 0 < i && i <10; i) ;      

//@ ghost Object j;      boolean m(float i) { return false; }    //@ invariant (\\sum long i; 0 < i && i <10; i) ;      

//@ ghost Object j;      boolean m(double i) { return false; }    //@ invariant (\\product long i,k; 0 < i && k <10; i) ;      

//@ ghost Object j;      boolean m(double i) { return false; }    //@ invariant (\\product long i; j; i) ;      

//@ invariant (\\product long i; 0 < j && i <10; i) ;      

//@ invariant (\\exists int i; 0 < i && i <10;  i > -1) ;      //@ static invariant (\\exists int i; 0 < i && i <10;  i > -1) ;      void m() {}}"

//@ invariant (\\exists int i; 0 < i && i <10;  i > m) ;      //@ static invariant (\\exists int i; 0 < i && i <10;  i > m) ;      void m() {}}"

//@ static invariant (\\exists int i; 0 < i && i <10;  i > s) ;      //@ static invariant (\\exists int i; 0 < i && i <10;  i > s) ;      void m() {}}"

//@ ghost boolean b = (\\exists int i; 0 < i && i <10;  i > m) ;      //@ static ghost boolean bb = (\\exists int i; 0 < i && i <10;  i > m) ;      //@ requires b && bb;     void m() {}}"

//@ ghost boolean b = (\\exists int i; 0 < i && i <10;  i > s) ;      //@ static ghost boolean bb = (\\exists int i; 0 < i && i <10;  i > s) ;      //@ requires b && bb;     void m() {}}"

//@ requires (\\exists int i; 0 < i && i <10;  i > -1) ;       void m() {}}"

//@ requires (\\exists int i; 0 < i && i <10;  i > -1) ;       static void m() {}}"

//@ assert (\\let int i = 0; i != 0);     }}"

//@ assert 0 == (\\let int i = 0, int j = 2; i - j);     }}"

//@ assert (\\let int i = 0; i);     }}"

//@ assert (\\let int i; i==0);     }}"

//@ assert (\\let int i=0; i==0);      i = true; }}"

//@ assert (\\let int i=0; i==0);      i = true; }}"

//@ invariant (\\let int i=0; i==0);       }"

//@ assert (\\let int i=0; i==j);       }}"

//@ invariant (\\let int i=0; i==j);       }"

//@ assert (\\let int i=0; i==j);       }}"

//@ invariant (\\let int i=0; i==j);       }"

//@ requires  i; also requires \\same;      boolean m(boolean i) { return false; }

//@ requires 1+\\same;      boolean m(double i) { return false; },

//@ requires i; also requires !\\same;      boolean m(boolean i) { return false; }

//@ requires \\same;      boolean m(double i) { return false; }

//@ ensures \\same;      boolean m(double i) { return false; }

//@ invariant o < oo;      }"

//@ invariant o < oo;      }"

//@ invariant o <= oo;      }"

//@ invariant o <= oo;      }"

//@ invariant o < true;      }"

//@ invariant o < 5;      }"

//@ invariant o < 5;      }"

//@ invariant o <# oo;      }"

//@ invariant o <#= oo;      }"

//@ invariant \\fresh(o);       }"

//@ ensures \\fresh(o);      void m() {}      }"

//@ ensures \\fresh(o,oo);      void m() {}       }"

//@ ensures \\fresh();      void m() {}       }"

//@ ensures   \\fresh(i);      void m() {}       }"

//@ ensures   \\fresh(o) + 1 == 0;      void m() {}       }"

//@ ghost boolean k = \\fresh(o);       }"

//@ invariant \\only_assigned(o) || \\only_accessed(o) || \\only_captured(o) || \    ot_assigned(o) || \    ot_modified(o);       }"

//@ ensures \\only_assigned(o) || \\only_accessed(o) || \\only_captured(o) || \    ot_assigned(o) || \    ot_modified(o);      void m() {}      }"

//@ ghost boolean k = \\only_assigned(o) || \\only_accessed(o) || \\only_captured(o) || \    ot_assigned(o) || \    ot_modified(o);       }"

//@ invariant (* stuff *);     //@ ghost int k = (* stuff *);       }"

//@ public model int duration;       void m() { //@ set duration = 0;     }      }"

//@ model import java.util.List;     public class A {     //@ ghost List k;     List n;       }"

//@ model import java.util.*;     public class A {     //@ ghost List k;     List n;       }"

//@ model import java.util.List;     public class A {     //@ ghost List k;     List n;       }"

//@ import java.util.List;     public class A {     //@ ghost List k;     List n;       }"

/*@ model */
/*@ model */
/*@ model import */
/*@ instance ghost V r; @*/
//@ loop_invariant 0<=i && i <= blub.length;    "

/*@nullable @*/
//@ loop_invariant 0<=i && i <= blub.length;    "

/*@nullable @*/
/*@ in height; @*/
/*@ public model int height;    "
                +"      in_redundantly height;    "
                +"      public invariant 0 < height;    "
                +"      public constraint \\old(height) == height;    "
                +"      private represents height = my_height;    "
                +"      private invariant 0 < my_height;    "
                +"  @*/
/*@ in height; @*/
/*@ public model int height;    "
                +"      in_redundantly height2;    "
                +"  @*/
/*@ public model int height2;    "
                +"      in_redundantly height;    "
                +"  @*/
//@ ghost boolean b4 = \\type(java.util.Map<java.util.List<?>,?>) <: \\type(java.util.List<?>);

/*@ public invariant (\\sum Integer i; 0<=i && i < 6; new Object()); */
//@ ghost boolean bb = (\\forall int i; 0<=i && i <=4; 0!=(\\lbl LBL i));    "

//@ model public void m1bad(java.util.function.Function<Integer,Integer> f) ;    "

//@ public behavior requires true;    "

//@ protected behavior requires true;    "

//@ behavior requires true;    "

//@ private behavior requires true;    "

//@ requires true;    "

//@ public behavior requires true;    "  // Warning

//@ protected behavior requires true;    "

//@ behavior requires true;    "

//@ private behavior requires true;    "

//@ requires true;    "

//@ public behavior requires true;    " // Warning

//@ protected behavior requires true;    " // Warning

//@ behavior requires true;    "  // Warning

//@ private behavior requires true;    "

//@ requires true;    "

//@ public behavior requires true;    " // Warning

//@ protected behavior requires true;    " // Warning

//@ behavior requires true;    "

//@ private behavior requires true;    "

//@ requires true;    "

//@ assert k;    }

//@ assert <Object>\\old(k);    }}"

/*@ also requires true; */
/*@ requires true; */
/*@ requires true; */
/*@ also requires true; */
/*@ also requires true; */
/*@ requires true; */
/*@ public normal_behavior requires true; */
/*@ also requires true; */
/*@ also requires true; */
/*@ requires true; */
/*@ requires true; */
/*@ also requires true; */
/*@ also public normal_behavior requires true; */
/*@ public normal_behavior requires true; */
//@ assert \\old;    }

//@ assert \\old();    }

//@ assert \\pre();    }

//@ assert \\old(k);    }

//@ assert \\old(b);    }}");

//@ assert \\pre(b,k);    }

//@ assert \\old(b,5);    }

//@ assert \\old(b,k);    }}"

//@ requires \\old(b);      void m() { }

//@ ensures \\old(b,k);      void m() { }

//@ requires \\pre(b);      void m() { }

//@ assert \\old(b,k);    }}"

//@ assert \\old(bb) && \\old(bb,k);    }}"

//@ assert \\old(b,k);    }}"

//@ assert \\max(\\lockset);    }

//@ assert \\max;    }

//@ assert \\max();    }

//@ assert \\max(k);    }

//@ assert \\max(b,k);    }

//@ assert \\invariant_for(i);    }}"

//@ assert \\invariant_for(k);    }}"

//@ assert \\invariant_for(A);    }}"

//@ assert \\invariant_for();    }}"

//@ assert \\invariant_for(Integer,k);    }}"

//@ assert \\invariant_for(Integer,k);    }}"

//@ assert \\invariant_for(Integer,k);    }}"

//@ assert \\invariant_for();    }}"

//@ assert \\type(A,k);    }}"

//@ assert \\type();    }}"

//@ assert \\type(b);    }}"

//@ assert \\type(true);    }}"

//@ assert \\type(int);    }}"

//@ assert \\type(int[][]);    }}"

//@ assert \\type(Object);    }}"

//@ assert \\type(java.lang.Object);    }}"

//@ assert \\type(java.lang.Object[][]);    }}"

//@ assert \\type(A);    }}"

//@ assert \\type(void);    }}"

//@ assert \\type(Void);    }}"

//@ assert \\typeof(b);    }

//@ assert \\result;    }}"

//@ ensures \\result;     void m() {     }

//@ assert \\result;     void m() {     }

/*@ ensures \\result == 1; */
/*@ ensures \\result == 1; */
/*@ ensures \\result     ; */
//@ return true;    }}"

/*@ ensures \\result     ; */
//@ int t;    }}"

/*@ ghost \\TYPE t; */
/*@ ghost \\TYPE t,tt; */
/*@ ghost \\bigint i; model \\real r; ghost \\TYPE t; */
/*@  \\TYPE t; */
/*@ @Ghost int i; */
/*@ ghost \\TYPE t; */
//@ensures t <: t;    void m() {}}");

/*@ ghost \\TYPE t; */
//@ensures c <: c;    void m() {}}");

/*@ ghost \\TYPE t; */
//@ensures c <: c;    void m() {}}");

/*@ ghost \\TYPE t; */
//@ensures c <: c;    void m() {}}");

/*@ ghost \\TYPE t; */
//@ensures t <: \\typeof(o);    void m() {}}"

/*@ ghost \\TYPE t; */
//@ensures o.getClass() <: Object.class;    void m() {}}"

/*@ ghost \\TYPE t; */
//@ensures JML.erasure(t) <: c;    void m() {}}");

/*@ ghost \\TYPE t; */
//@ensures t <: 5;    void m() {}

/*@ ghost \\TYPE t; */
//@ensures true <: c;    void m() {}

//@ ghost \\TYPE t = \\type(java.lang.Integer);

//@ ghost \\TYPE t = \\type(java.util.List);

//@ ghost \\TYPE t = \\type(java.util.List<Integer>);

//@ ghost Class<?> t = \\erasure(\\type(java.lang.Integer));

//@ ghost Class<?> t = \\erasure(\\type(java.util.List));

//@ ghost Class<?> t = \\erasure(\\type(java.util.List<Integer>));

//@requires \\result == 0;     int m() {return 0;}

//@ invariant new JMLSetType { Integer i | c.contains(i) && i<10};           }"

//@ requires new JMLSetType { Integer i | c.contains(i) && i<10};      void m() {}      }"

//@ ghost Object j;      //@ requires m( (\\exists int i; 0 < i && i <10; m(i)) );     /*@pure*/boolean m(int k) { return false; }     

//@ ghost int k = new JMLSetType { Integer i | c.contains(i) && i<10};      void m() {}      }"

//@ ghost Object k = new JMLSetType { Integer i | c.contains(i) && p<10};      void m() {}      }"

//@ ghost Object k = new JMLSetType { Integer i | c.contains(i) && i<10};      void m() {}      }"

//@ ghost Object j = m( (\\exists int i; 0 < i && i <10; m(i)) );     boolean m(int k) { return false; }     

//@ ghost Object j = m( (\\exists int i; 0 < i && i <10; m(i)) );     boolean m(boolean k) { return false; } boolean m(int p) { return false; }     }"

//@ ghost Object j = m( (\\exists int i; 0 < i && i <10; m(i)) );     boolean m(boolean k) { return false; }      }"

//@ ghost boolean j = ( (\\exists int i; 0 < i && i <10; m(p)) );     boolean m(int k) { return false; }      }"

//@ ghost int k = new JMLSetType { Integer i | c.contains(i) && i<10};     }      }"

//@ ghost Object k = new JMLSetType { Integer i | c.contains(i) && p<10};     }      }"

//@ ghost Object k = new JMLSetType { Integer i | c.contains(i) && i<10};     }      }"

//@ ghost Object j = m( (\\exists int i; 0 < i && i <10; m(i)) );      return false; }     

//@ ghost boolean j = ( (\\exists int i; 0 < i && i <10; m(i)) );      return false; }     }"

//@ ghost boolean j = ( (\\exists int i; 0 < i && i <10; m(p)) );      return false; }     

//@ ghost Object k;       java.util.Collection c;  void m() { //@ set k = new JMLSetType { Integer i | c.contains(i) && i<10};     }      }"

//@ ghost int j;            boolean m(int k) { //@ set j = m( (\\exists int i; 0 < i && i <10; m(i)) );      return false; }     

//@ ghost Object j;      /*@pure*/ boolean m(int i) { return false; }    //@ invariant m( (\\exists int i; 0 < i && i <10; m(i)) );      

//@ ghost Object j;      /*@pure*/ boolean m(int i) { return false; }    //@ invariant m( (\\forall int i; 0 < i && i <10; m(i)) );      

//@ ghost Object j;      /*@pure*/ boolean m(int i) { return false; }    //@ invariant (\    um_of int i; 0 < i && i <10; m(i)) ;      

//@ ghost Object j;      boolean m(int i) { return false; }    //@ invariant (\\max long i; 0 < i && i <10; i) ;      

//@ ghost Object j;      boolean m(float i) { return false; }    //@ invariant (\\sum long i; 0 < i && i <10; i) ;      

//@ ghost Object j;      boolean m(double i) { return false; }    //@ invariant (\\product long i,k; 0 < i && k <10; i) ;      

//@ ghost Object j;      boolean m(double i) { return false; }    //@ invariant (\\product long i; j; i) ;      

//@ invariant (\\product long i; 0 < j && i <10; i) ;      

//@ invariant (\\exists int i; 0 < i && i <10;  i > -1) ;      //@ static invariant (\\exists int i; 0 < i && i <10;  i > -1) ;      void m() {}}"

//@ invariant (\\exists int i; 0 < i && i <10;  i > m) ;      //@ static invariant (\\exists int i; 0 < i && i <10;  i > m) ;      void m() {}}"

//@ static invariant (\\exists int i; 0 < i && i <10;  i > s) ;      //@ static invariant (\\exists int i; 0 < i && i <10;  i > s) ;      void m() {}}"

//@ ghost boolean b = (\\exists int i; 0 < i && i <10;  i > m) ;      //@ static ghost boolean bb = (\\exists int i; 0 < i && i <10;  i > m) ;      //@ requires b && bb;     void m() {}}"

//@ ghost boolean b = (\\exists int i; 0 < i && i <10;  i > s) ;      //@ static ghost boolean bb = (\\exists int i; 0 < i && i <10;  i > s) ;      //@ requires b && bb;     void m() {}}"

//@ requires (\\exists int i; 0 < i && i <10;  i > -1) ;       void m() {}}"

//@ requires (\\exists int i; 0 < i && i <10;  i > -1) ;       static void m() {}}"

//@ assert (\\let int i = 0; i != 0);     }}"

//@ assert 0 == (\\let int i = 0, int j = 2; i - j);     }}"

//@ assert (\\let int i = 0; i);     }}"

//@ assert (\\let int i; i==0);     }}"

//@ assert (\\let int i=0; i==0);      i = true; }}"

//@ assert (\\let int i=0; i==0);      i = true; }}"

//@ invariant (\\let int i=0; i==0);       }"

//@ assert (\\let int i=0; i==j);       }}"

//@ invariant (\\let int i=0; i==j);       }"

//@ assert (\\let int i=0; i==j);       }}"

//@ invariant (\\let int i=0; i==j);       }"

//@ requires  i; also requires \\same;      boolean m(boolean i) { return false; }

//@ requires 1+\\same;      boolean m(double i) { return false; },

//@ requires i; also requires !\\same;      boolean m(boolean i) { return false; }

//@ requires \\same;      boolean m(double i) { return false; }

//@ ensures \\same;      boolean m(double i) { return false; }

//@ invariant o < oo;      }"

//@ invariant o < oo;      }"

//@ invariant o <= oo;      }"

//@ invariant o <= oo;      }"

//@ invariant o < true;      }"

//@ invariant o < 5;      }"

//@ invariant o < 5;      }"

//@ invariant o <# oo;      }"

//@ invariant o <#= oo;      }"

//@ invariant \\fresh(o);       }"

//@ ensures \\fresh(o);      void m() {}      }"

//@ ensures \\fresh(o,oo);      void m() {}       }"

//@ ensures \\fresh();      void m() {}       }"

//@ ensures   \\fresh(i);      void m() {}       }"

//@ ensures   \\fresh(o) + 1 == 0;      void m() {}       }"

//@ ghost boolean k = \\fresh(o);       }"

//@ invariant \\only_assigned(o) || \\only_accessed(o) || \\only_captured(o) || \    ot_assigned(o) || \    ot_modified(o);       }"

//@ ensures \\only_assigned(o) || \\only_accessed(o) || \\only_captured(o) || \    ot_assigned(o) || \    ot_modified(o);      void m() {}      }"

//@ ghost boolean k = \\only_assigned(o) || \\only_accessed(o) || \\only_captured(o) || \    ot_assigned(o) || \    ot_modified(o);       }"

//@ invariant (* stuff *);     //@ ghost int k = (* stuff *);       }"

//@ public model int duration;       void m() { //@ set duration = 0;     }      }"

//@ model import java.util.List;     public class A {     //@ ghost List k;     List n;       }"

//@ model import java.util.*;     public class A {     //@ ghost List k;     List n;       }"

//@ model import java.util.List;     public class A {     //@ ghost List k;     List n;       }"

//@ import java.util.List;     public class A {     //@ ghost List k;     List n;       }"

/*@ model */
/*@ model */
/*@ model import */
/*@ instance ghost V r; @*/
//@ loop_invariant 0<=i && i <= blub.length;    "

/*@nullable @*/
//@ loop_invariant 0<=i && i <= blub.length;    "

/*@nullable @*/
/*@ in height; @*/
/*@ public model int height;    "
                +"      in_redundantly height;    "
                +"      public invariant 0 < height;    "
                +"      public constraint \\old(height) == height;    "
                +"      private represents height = my_height;    "
                +"      private invariant 0 < my_height;    "
                +"  @*/
/*@ in height; @*/
/*@ public model int height;    "
                +"      in_redundantly height2;    "
                +"  @*/
/*@ public model int height2;    "
                +"      in_redundantly height;    "
                +"  @*/
//@ ghost boolean b4 = \\type(java.util.Map<java.util.List<?>,?>) <: \\type(java.util.List<?>);

/*@ public invariant (\\sum Integer i; 0<=i && i < 6; new Object()); */
//@ ghost boolean bb = (\\forall int i; 0<=i && i <=4; 0!=(\\lbl LBL i));    "

//@ model public void m1bad(java.util.function.Function<Integer,Integer> f) ;    "

//@ public behavior requires true;    "

//@ protected behavior requires true;    "

//@ behavior requires true;    "

//@ private behavior requires true;    "

//@ requires true;    "

//@ public behavior requires true;    "  // Warning

//@ protected behavior requires true;    "

//@ behavior requires true;    "

//@ private behavior requires true;    "

//@ requires true;    "

//@ public behavior requires true;    " // Warning

//@ protected behavior requires true;    " // Warning

//@ behavior requires true;    "  // Warning

//@ private behavior requires true;    "

//@ requires true;    "

//@ public behavior requires true;    " // Warning

//@ protected behavior requires true;    " // Warning

//@ behavior requires true;    "

//@ private behavior requires true;    "

//@ requires true;    "

//@ assert k;    }

//@ assert <Object>\\old(k);    }}"

/*@ also requires true; */
/*@ requires true; */
/*@ requires true; */
/*@ also requires true; */
/*@ also requires true; */
/*@ requires true; */
/*@ public normal_behavior requires true; */
/*@ also requires true; */
/*@ also requires true; */
/*@ requires true; */
/*@ requires true; */
/*@ also requires true; */
/*@ also public normal_behavior requires true; */
/*@ public normal_behavior requires true; */
//@ assert \\old;    }

//@ assert \\old();    }

//@ assert \\pre();    }

//@ assert \\old(k);    }

//@ assert \\old(b);    }}");

//@ assert \\pre(b,k);    }

//@ assert \\old(b,5);    }

//@ assert \\old(b,k);    }}"

//@ requires \\old(b);      void m() { }

//@ ensures \\old(b,k);      void m() { }

//@ requires \\pre(b);      void m() { }

//@ assert \\old(b,k);    }}"

//@ assert \\old(bb) && \\old(bb,k);    }}"

//@ assert \\old(b,k);    }}"

//@ assert \\max(\\lockset);    }

//@ assert \\max;    }

//@ assert \\max();    }

//@ assert \\max(k);    }

//@ assert \\max(b,k);    }

//@ assert \\invariant_for(i);    }}"

//@ assert \\invariant_for(k);    }}"

//@ assert \\invariant_for(A);    }}"

//@ assert \\invariant_for();    }}"

//@ assert \\invariant_for(Integer,k);    }}"

//@ assert \\invariant_for(Integer,k);    }}"

//@ assert \\invariant_for(Integer,k);    }}"

//@ assert \\invariant_for();    }}"

//@ assert \\type(A,k);    }}"

//@ assert \\type();    }}"

//@ assert \\type(b);    }}"

//@ assert \\type(true);    }}"

//@ assert \\type(int);    }}"

//@ assert \\type(int[][]);    }}"

//@ assert \\type(Object);    }}"

//@ assert \\type(java.lang.Object);    }}"

//@ assert \\type(java.lang.Object[][]);    }}"

//@ assert \\type(A);    }}"

//@ assert \\type(void);    }}"

//@ assert \\type(Void);    }}"

//@ assert \\typeof(b);    }

//@ assert \\result;    }}"

//@ ensures \\result;     void m() {     }

//@ assert \\result;     void m() {     }

/*@ ensures \\result == 1; */
/*@ ensures \\result == 1; */
/*@ ensures \\result     ; */
//@ return true;    }}"

/*@ ensures \\result     ; */
//@ int t;    }}"

/*@ ghost \\TYPE t; */
/*@ ghost \\TYPE t,tt; */
/*@ ghost \\bigint i; model \\real r; ghost \\TYPE t; */
/*@  \\TYPE t; */
/*@ @Ghost int i; */
/*@ ghost \\TYPE t; */
//@ensures t <: t;    void m() {}}");

/*@ ghost \\TYPE t; */
//@ensures c <: c;    void m() {}}");

/*@ ghost \\TYPE t; */
//@ensures c <: c;    void m() {}}");

/*@ ghost \\TYPE t; */
//@ensures c <: c;    void m() {}}");

/*@ ghost \\TYPE t; */
//@ensures t <: \\typeof(o);    void m() {}}"

/*@ ghost \\TYPE t; */
//@ensures o.getClass() <: Object.class;    void m() {}}"

/*@ ghost \\TYPE t; */
//@ensures JML.erasure(t) <: c;    void m() {}}");

/*@ ghost \\TYPE t; */
//@ensures t <: 5;    void m() {}

/*@ ghost \\TYPE t; */
//@ensures true <: c;    void m() {}

//@ ghost \\TYPE t = \\type(java.lang.Integer);

//@ ghost \\TYPE t = \\type(java.util.List);

//@ ghost \\TYPE t = \\type(java.util.List<Integer>);

//@ ghost Class<?> t = \\erasure(\\type(java.lang.Integer));

//@ ghost Class<?> t = \\erasure(\\type(java.util.List));

//@ ghost Class<?> t = \\erasure(\\type(java.util.List<Integer>));

//@requires \\result == 0;     int m() {return 0;}

//@ invariant new JMLSetType { Integer i | c.contains(i) && i<10};           }"

//@ requires new JMLSetType { Integer i | c.contains(i) && i<10};      void m() {}      }"

//@ ghost Object j;      //@ requires m( (\\exists int i; 0 < i && i <10; m(i)) );     /*@pure*/boolean m(int k) { return false; }     

//@ ghost int k = new JMLSetType { Integer i | c.contains(i) && i<10};      void m() {}      }"

//@ ghost Object k = new JMLSetType { Integer i | c.contains(i) && p<10};      void m() {}      }"

//@ ghost Object k = new JMLSetType { Integer i | c.contains(i) && i<10};      void m() {}      }"

//@ ghost Object j = m( (\\exists int i; 0 < i && i <10; m(i)) );     boolean m(int k) { return false; }     

//@ ghost Object j = m( (\\exists int i; 0 < i && i <10; m(i)) );     boolean m(boolean k) { return false; } boolean m(int p) { return false; }     }"

//@ ghost Object j = m( (\\exists int i; 0 < i && i <10; m(i)) );     boolean m(boolean k) { return false; }      }"

//@ ghost boolean j = ( (\\exists int i; 0 < i && i <10; m(p)) );     boolean m(int k) { return false; }      }"

//@ ghost int k = new JMLSetType { Integer i | c.contains(i) && i<10};     }      }"

//@ ghost Object k = new JMLSetType { Integer i | c.contains(i) && p<10};     }      }"

//@ ghost Object k = new JMLSetType { Integer i | c.contains(i) && i<10};     }      }"

//@ ghost Object j = m( (\\exists int i; 0 < i && i <10; m(i)) );      return false; }     

//@ ghost boolean j = ( (\\exists int i; 0 < i && i <10; m(i)) );      return false; }     }"

//@ ghost boolean j = ( (\\exists int i; 0 < i && i <10; m(p)) );      return false; }     

//@ ghost Object k;       java.util.Collection c;  void m() { //@ set k = new JMLSetType { Integer i | c.contains(i) && i<10};     }      }"

//@ ghost int j;            boolean m(int k) { //@ set j = m( (\\exists int i; 0 < i && i <10; m(i)) );      return false; }     

//@ ghost Object j;      /*@pure*/ boolean m(int i) { return false; }    //@ invariant m( (\\exists int i; 0 < i && i <10; m(i)) );      

//@ ghost Object j;      /*@pure*/ boolean m(int i) { return false; }    //@ invariant m( (\\forall int i; 0 < i && i <10; m(i)) );      

//@ ghost Object j;      /*@pure*/ boolean m(int i) { return false; }    //@ invariant (\    um_of int i; 0 < i && i <10; m(i)) ;      

//@ ghost Object j;      boolean m(int i) { return false; }    //@ invariant (\\max long i; 0 < i && i <10; i) ;      

//@ ghost Object j;      boolean m(float i) { return false; }    //@ invariant (\\sum long i; 0 < i && i <10; i) ;      

//@ ghost Object j;      boolean m(double i) { return false; }    //@ invariant (\\product long i,k; 0 < i && k <10; i) ;      

//@ ghost Object j;      boolean m(double i) { return false; }    //@ invariant (\\product long i; j; i) ;      

//@ invariant (\\product long i; 0 < j && i <10; i) ;      

//@ invariant (\\exists int i; 0 < i && i <10;  i > -1) ;      //@ static invariant (\\exists int i; 0 < i && i <10;  i > -1) ;      void m() {}}"

//@ invariant (\\exists int i; 0 < i && i <10;  i > m) ;      //@ static invariant (\\exists int i; 0 < i && i <10;  i > m) ;      void m() {}}"

//@ static invariant (\\exists int i; 0 < i && i <10;  i > s) ;      //@ static invariant (\\exists int i; 0 < i && i <10;  i > s) ;      void m() {}}"

//@ ghost boolean b = (\\exists int i; 0 < i && i <10;  i > m) ;      //@ static ghost boolean bb = (\\exists int i; 0 < i && i <10;  i > m) ;      //@ requires b && bb;     void m() {}}"

//@ ghost boolean b = (\\exists int i; 0 < i && i <10;  i > s) ;      //@ static ghost boolean bb = (\\exists int i; 0 < i && i <10;  i > s) ;      //@ requires b && bb;     void m() {}}"

//@ requires (\\exists int i; 0 < i && i <10;  i > -1) ;       void m() {}}"

//@ requires (\\exists int i; 0 < i && i <10;  i > -1) ;       static void m() {}}"

//@ assert (\\let int i = 0; i != 0);     }}"

//@ assert 0 == (\\let int i = 0, int j = 2; i - j);     }}"

//@ assert (\\let int i = 0; i);     }}"

//@ assert (\\let int i; i==0);     }}"

//@ assert (\\let int i=0; i==0);      i = true; }}"

//@ assert (\\let int i=0; i==0);      i = true; }}"

//@ invariant (\\let int i=0; i==0);       }"

//@ assert (\\let int i=0; i==j);       }}"

//@ invariant (\\let int i=0; i==j);       }"

//@ assert (\\let int i=0; i==j);       }}"

//@ invariant (\\let int i=0; i==j);       }"

//@ requires  i; also requires \\same;      boolean m(boolean i) { return false; }

//@ requires 1+\\same;      boolean m(double i) { return false; },

//@ requires i; also requires !\\same;      boolean m(boolean i) { return false; }

//@ requires \\same;      boolean m(double i) { return false; }

//@ ensures \\same;      boolean m(double i) { return false; }

//@ invariant o < oo;      }"

//@ invariant o < oo;      }"

//@ invariant o <= oo;      }"

//@ invariant o <= oo;      }"

//@ invariant o < true;      }"

//@ invariant o < 5;      }"

//@ invariant o < 5;      }"

//@ invariant o <# oo;      }"

//@ invariant o <#= oo;      }"

//@ invariant \\fresh(o);       }"

//@ ensures \\fresh(o);      void m() {}      }"

//@ ensures \\fresh(o,oo);      void m() {}       }"

//@ ensures \\fresh();      void m() {}       }"

//@ ensures   \\fresh(i);      void m() {}       }"

//@ ensures   \\fresh(o) + 1 == 0;      void m() {}       }"

//@ ghost boolean k = \\fresh(o);       }"

//@ invariant \\only_assigned(o) || \\only_accessed(o) || \\only_captured(o) || \    ot_assigned(o) || \    ot_modified(o);       }"

//@ ensures \\only_assigned(o) || \\only_accessed(o) || \\only_captured(o) || \    ot_assigned(o) || \    ot_modified(o);      void m() {}      }"

//@ ghost boolean k = \\only_assigned(o) || \\only_accessed(o) || \\only_captured(o) || \    ot_assigned(o) || \    ot_modified(o);       }"

//@ invariant (* stuff *);     //@ ghost int k = (* stuff *);       }"

//@ public model int duration;       void m() { //@ set duration = 0;     }      }"

//@ model import java.util.List;     public class A {     //@ ghost List k;     List n;       }"

//@ model import java.util.*;     public class A {     //@ ghost List k;     List n;       }"

//@ model import java.util.List;     public class A {     //@ ghost List k;     List n;       }"

//@ import java.util.List;     public class A {     //@ ghost List k;     List n;       }"

/*@ model */
/*@ model */
/*@ model import */
/*@ instance ghost V r; @*/
//@ loop_invariant 0<=i && i <= blub.length;    "

/*@nullable @*/
//@ loop_invariant 0<=i && i <= blub.length;    "

/*@nullable @*/
/*@ in height; @*/
/*@ public model int height;    "
                +"      in_redundantly height;    "
                +"      public invariant 0 < height;    "
                +"      public constraint \\old(height) == height;    "
                +"      private represents height = my_height;    "
                +"      private invariant 0 < my_height;    "
                +"  @*/
/*@ in height; @*/
/*@ public model int height;    "
                +"      in_redundantly height2;    "
                +"  @*/
/*@ public model int height2;    "
                +"      in_redundantly height;    "
                +"  @*/
//@ ghost boolean b4 = \\type(java.util.Map<java.util.List<?>,?>) <: \\type(java.util.List<?>);

/*@ public invariant (\\sum Integer i; 0<=i && i < 6; new Object()); */
//@ ghost boolean bb = (\\forall int i; 0<=i && i <=4; 0!=(\\lbl LBL i));    "

//@ model public void m1bad(java.util.function.Function<Integer,Integer> f) ;    "

//@ public behavior requires true;    "

//@ protected behavior requires true;    "

//@ behavior requires true;    "

//@ private behavior requires true;    "

//@ requires true;    "

//@ public behavior requires true;    "  // Warning

//@ protected behavior requires true;    "

//@ behavior requires true;    "

//@ private behavior requires true;    "

//@ requires true;    "

//@ public behavior requires true;    " // Warning

//@ protected behavior requires true;    " // Warning

//@ behavior requires true;    "  // Warning

//@ private behavior requires true;    "

//@ requires true;    "

//@ public behavior requires true;    " // Warning

//@ protected behavior requires true;    " // Warning

//@ behavior requires true;    "

//@ private behavior requires true;    "

//@ requires true;    "

//@ assert k;    }

//@ assert <Object>\\old(k);    }}"

/*@ also requires true; */
/*@ requires true; */
/*@ requires true; */
/*@ also requires true; */
/*@ also requires true; */
/*@ requires true; */
/*@ public normal_behavior requires true; */
/*@ also requires true; */
/*@ also requires true; */
/*@ requires true; */
/*@ requires true; */
/*@ also requires true; */
/*@ also public normal_behavior requires true; */
/*@ public normal_behavior requires true; */
//@ assert \\old;    }

//@ assert \\old();    }

//@ assert \\pre();    }

//@ assert \\old(k);    }

//@ assert \\old(b);    }}");

//@ assert \\pre(b,k);    }

//@ assert \\old(b,5);    }

//@ assert \\old(b,k);    }}"

//@ requires \\old(b);      void m() { }

//@ ensures \\old(b,k);      void m() { }

//@ requires \\pre(b);      void m() { }

//@ assert \\old(b,k);    }}"

//@ assert \\old(bb) && \\old(bb,k);    }}"

//@ assert \\old(b,k);    }}"

//@ assert \\max(\\lockset);    }

//@ assert \\max;    }

//@ assert \\max();    }

//@ assert \\max(k);    }

//@ assert \\max(b,k);    }

//@ assert \\invariant_for(i);    }}"

//@ assert \\invariant_for(k);    }}"

//@ assert \\invariant_for(A);    }}"

//@ assert \\invariant_for();    }}"

//@ assert \\invariant_for(Integer,k);    }}"

//@ assert \\invariant_for(Integer,k);    }}"

//@ assert \\invariant_for(Integer,k);    }}"

//@ assert \\invariant_for();    }}"

//@ assert \\type(A,k);    }}"

//@ assert \\type();    }}"

//@ assert \\type(b);    }}"

//@ assert \\type(true);    }}"

//@ assert \\type(int);    }}"

//@ assert \\type(int[][]);    }}"

//@ assert \\type(Object);    }}"

//@ assert \\type(java.lang.Object);    }}"

//@ assert \\type(java.lang.Object[][]);    }}"

//@ assert \\type(A);    }}"

//@ assert \\type(void);    }}"

//@ assert \\type(Void);    }}"

//@ assert \\typeof(b);    }

//@ assert \\result;    }}"

//@ ensures \\result;     void m() {     }

//@ assert \\result;     void m() {     }

/*@ ensures \\result == 1; */
/*@ ensures \\result == 1; */
/*@ ensures \\result     ; */
//@ return true;    }}"

/*@ ensures \\result     ; */
//@ int t;    }}"

/*@ ghost \\TYPE t; */
/*@ ghost \\TYPE t,tt; */
/*@ ghost \\bigint i; model \\real r; ghost \\TYPE t; */
/*@  \\TYPE t; */
/*@ @Ghost int i; */
/*@ ghost \\TYPE t; */
//@ensures t <: t;    void m() {}}");

/*@ ghost \\TYPE t; */
//@ensures c <: c;    void m() {}}");

/*@ ghost \\TYPE t; */
//@ensures c <: c;    void m() {}}");

/*@ ghost \\TYPE t; */
//@ensures c <: c;    void m() {}}");

/*@ ghost \\TYPE t; */
//@ensures t <: \\typeof(o);    void m() {}}"

/*@ ghost \\TYPE t; */
//@ensures o.getClass() <: Object.class;    void m() {}}"

/*@ ghost \\TYPE t; */
//@ensures JML.erasure(t) <: c;    void m() {}}");

/*@ ghost \\TYPE t; */
//@ensures t <: 5;    void m() {}

/*@ ghost \\TYPE t; */
//@ensures true <: c;    void m() {}

//@ ghost \\TYPE t = \\type(java.lang.Integer);

//@ ghost \\TYPE t = \\type(java.util.List);

//@ ghost \\TYPE t = \\type(java.util.List<Integer>);

//@ ghost Class<?> t = \\erasure(\\type(java.lang.Integer));

//@ ghost Class<?> t = \\erasure(\\type(java.util.List));

//@ ghost Class<?> t = \\erasure(\\type(java.util.List<Integer>));

//@requires \\result == 0;     int m() {return 0;}

//@ invariant new JMLSetType { Integer i | c.contains(i) && i<10};           }"

//@ requires new JMLSetType { Integer i | c.contains(i) && i<10};      void m() {}      }"

//@ ghost Object j;      //@ requires m( (\\exists int i; 0 < i && i <10; m(i)) );     /*@pure*/boolean m(int k) { return false; }     

//@ ghost int k = new JMLSetType { Integer i | c.contains(i) && i<10};      void m() {}      }"

//@ ghost Object k = new JMLSetType { Integer i | c.contains(i) && p<10};      void m() {}      }"

//@ ghost Object k = new JMLSetType { Integer i | c.contains(i) && i<10};      void m() {}      }"

//@ ghost Object j = m( (\\exists int i; 0 < i && i <10; m(i)) );     boolean m(int k) { return false; }     

//@ ghost Object j = m( (\\exists int i; 0 < i && i <10; m(i)) );     boolean m(boolean k) { return false; } boolean m(int p) { return false; }     }"

//@ ghost Object j = m( (\\exists int i; 0 < i && i <10; m(i)) );     boolean m(boolean k) { return false; }      }"

//@ ghost boolean j = ( (\\exists int i; 0 < i && i <10; m(p)) );     boolean m(int k) { return false; }      }"

//@ ghost int k = new JMLSetType { Integer i | c.contains(i) && i<10};     }      }"

//@ ghost Object k = new JMLSetType { Integer i | c.contains(i) && p<10};     }      }"

//@ ghost Object k = new JMLSetType { Integer i | c.contains(i) && i<10};     }      }"

//@ ghost Object j = m( (\\exists int i; 0 < i && i <10; m(i)) );      return false; }     

//@ ghost boolean j = ( (\\exists int i; 0 < i && i <10; m(i)) );      return false; }     }"

//@ ghost boolean j = ( (\\exists int i; 0 < i && i <10; m(p)) );      return false; }     

//@ ghost Object k;       java.util.Collection c;  void m() { //@ set k = new JMLSetType { Integer i | c.contains(i) && i<10};     }      }"

//@ ghost int j;            boolean m(int k) { //@ set j = m( (\\exists int i; 0 < i && i <10; m(i)) );      return false; }     

//@ ghost Object j;      /*@pure*/ boolean m(int i) { return false; }    //@ invariant m( (\\exists int i; 0 < i && i <10; m(i)) );      

//@ ghost Object j;      /*@pure*/ boolean m(int i) { return false; }    //@ invariant m( (\\forall int i; 0 < i && i <10; m(i)) );      

//@ ghost Object j;      /*@pure*/ boolean m(int i) { return false; }    //@ invariant (\    um_of int i; 0 < i && i <10; m(i)) ;      

//@ ghost Object j;      boolean m(int i) { return false; }    //@ invariant (\\max long i; 0 < i && i <10; i) ;      

//@ ghost Object j;      boolean m(float i) { return false; }    //@ invariant (\\sum long i; 0 < i && i <10; i) ;      

//@ ghost Object j;      boolean m(double i) { return false; }    //@ invariant (\\product long i,k; 0 < i && k <10; i) ;      

//@ ghost Object j;      boolean m(double i) { return false; }    //@ invariant (\\product long i; j; i) ;      

//@ invariant (\\product long i; 0 < j && i <10; i) ;      

//@ invariant (\\exists int i; 0 < i && i <10;  i > -1) ;      //@ static invariant (\\exists int i; 0 < i && i <10;  i > -1) ;      void m() {}}"

//@ invariant (\\exists int i; 0 < i && i <10;  i > m) ;      //@ static invariant (\\exists int i; 0 < i && i <10;  i > m) ;      void m() {}}"

//@ static invariant (\\exists int i; 0 < i && i <10;  i > s) ;      //@ static invariant (\\exists int i; 0 < i && i <10;  i > s) ;      void m() {}}"

//@ ghost boolean b = (\\exists int i; 0 < i && i <10;  i > m) ;      //@ static ghost boolean bb = (\\exists int i; 0 < i && i <10;  i > m) ;      //@ requires b && bb;     void m() {}}"

//@ ghost boolean b = (\\exists int i; 0 < i && i <10;  i > s) ;      //@ static ghost boolean bb = (\\exists int i; 0 < i && i <10;  i > s) ;      //@ requires b && bb;     void m() {}}"

//@ requires (\\exists int i; 0 < i && i <10;  i > -1) ;       void m() {}}"

//@ requires (\\exists int i; 0 < i && i <10;  i > -1) ;       static void m() {}}"

//@ assert (\\let int i = 0; i != 0);     }}"

//@ assert 0 == (\\let int i = 0, int j = 2; i - j);     }}"

//@ assert (\\let int i = 0; i);     }}"

//@ assert (\\let int i; i==0);     }}"

//@ assert (\\let int i=0; i==0);      i = true; }}"

//@ assert (\\let int i=0; i==0);      i = true; }}"

//@ invariant (\\let int i=0; i==0);       }"

//@ assert (\\let int i=0; i==j);       }}"

//@ invariant (\\let int i=0; i==j);       }"

//@ assert (\\let int i=0; i==j);       }}"

//@ invariant (\\let int i=0; i==j);       }"

//@ requires  i; also requires \\same;      boolean m(boolean i) { return false; }

//@ requires 1+\\same;      boolean m(double i) { return false; },

//@ requires i; also requires !\\same;      boolean m(boolean i) { return false; }

//@ requires \\same;      boolean m(double i) { return false; }

//@ ensures \\same;      boolean m(double i) { return false; }

//@ invariant o < oo;      }"

//@ invariant o < oo;      }"

//@ invariant o <= oo;      }"

//@ invariant o <= oo;      }"

//@ invariant o < true;      }"

//@ invariant o < 5;      }"

//@ invariant o < 5;      }"

//@ invariant o <# oo;      }"

//@ invariant o <#= oo;      }"

//@ invariant \\fresh(o);       }"

//@ ensures \\fresh(o);      void m() {}      }"

//@ ensures \\fresh(o,oo);      void m() {}       }"

//@ ensures \\fresh();      void m() {}       }"

//@ ensures   \\fresh(i);      void m() {}       }"

//@ ensures   \\fresh(o) + 1 == 0;      void m() {}       }"

//@ ghost boolean k = \\fresh(o);       }"

//@ invariant \\only_assigned(o) || \\only_accessed(o) || \\only_captured(o) || \    ot_assigned(o) || \    ot_modified(o);       }"

//@ ensures \\only_assigned(o) || \\only_accessed(o) || \\only_captured(o) || \    ot_assigned(o) || \    ot_modified(o);      void m() {}      }"

//@ ghost boolean k = \\only_assigned(o) || \\only_accessed(o) || \\only_captured(o) || \    ot_assigned(o) || \    ot_modified(o);       }"

//@ invariant (* stuff *);     //@ ghost int k = (* stuff *);       }"

//@ public model int duration;       void m() { //@ set duration = 0;     }      }"

//@ model import java.util.List;     public class A {     //@ ghost List k;     List n;       }"

//@ model import java.util.*;     public class A {     //@ ghost List k;     List n;       }"

//@ model import java.util.List;     public class A {     //@ ghost List k;     List n;       }"

//@ import java.util.List;     public class A {     //@ ghost List k;     List n;       }"

/*@ model */
/*@ model */
/*@ model import */
/*@ instance ghost V r; @*/
//@ loop_invariant 0<=i && i <= blub.length;    "

/*@nullable @*/
//@ loop_invariant 0<=i && i <= blub.length;    "

/*@nullable @*/
/*@ in height; @*/
/*@ public model int height;    "
                +"      in_redundantly height;    "
                +"      public invariant 0 < height;    "
                +"      public constraint \\old(height) == height;    "
                +"      private represents height = my_height;    "
                +"      private invariant 0 < my_height;    "
                +"  @*/
/*@ in height; @*/
/*@ public model int height;    "
                +"      in_redundantly height2;    "
                +"  @*/
/*@ public model int height2;    "
                +"      in_redundantly height;    "
                +"  @*/
//@ ghost boolean b4 = \\type(java.util.Map<java.util.List<?>,?>) <: \\type(java.util.List<?>);

/*@ public invariant (\\sum Integer i; 0<=i && i < 6; new Object()); */
//@ ghost boolean bb = (\\forall int i; 0<=i && i <=4; 0!=(\\lbl LBL i));    "

//@ model public void m1bad(java.util.function.Function<Integer,Integer> f) ;    "

//@ public behavior requires true;    "

//@ protected behavior requires true;    "

//@ behavior requires true;    "

//@ private behavior requires true;    "

//@ requires true;    "

//@ public behavior requires true;    "  // Warning

//@ protected behavior requires true;    "

//@ behavior requires true;    "

//@ private behavior requires true;    "

//@ requires true;    "

//@ public behavior requires true;    " // Warning

//@ protected behavior requires true;    " // Warning

//@ behavior requires true;    "  // Warning

//@ private behavior requires true;    "

//@ requires true;    "

//@ public behavior requires true;    " // Warning

//@ protected behavior requires true;    " // Warning

//@ behavior requires true;    "

//@ private behavior requires true;    "

//@ requires true;    "

//@ ghost \\bigint b = 0; );

//@ ghost \\real b = 0; );

//@ ghost \\TYPE b ; );

//@ ghost \\bigint b = 0; ghost \\bigint bb = -b; );

//@ ghost \\bigint b = 0; ghost \\bigint bb = b + b; set bb = b-b; set bb = b*b; set bb = b/b;     }}");

//@ ghost map<string,string> b ; );

//@ ghost map<Object,Object> b ; );

//@ ghost \\bigint b = 0; );

//@ ghost \\real b = 0; );

//@ ghost \\TYPE b ; );

//@ ghost \\bigint b = 0; ghost \\bigint bb = -b; );

//@ ghost \\bigint b = 0; ghost \\bigint bb = b + b; set bb = b-b; set bb = b*b; set bb = b/b;     }}");

//@ ghost map<string,string> b ; );

//@ ghost map<Object,Object> b ; );

//@ ghost \\bigint b = 0; );

//@ ghost \\real b = 0; );

//@ ghost \\TYPE b ; );

//@ ghost \\bigint b = 0; ghost \\bigint bb = -b; );

//@ ghost \\bigint b = 0; ghost \\bigint bb = b + b; set bb = b-b; set bb = b*b; set bb = b/b;     }}");

//@ ghost map<string,string> b ; );

//@ ghost map<Object,Object> b ; );

//@ ghost \\bigint b = 0; );

//@ ghost \\real b = 0; );

//@ ghost \\TYPE b ; );

//@ ghost \\bigint b = 0; ghost \\bigint bb = -b; );

//@ ghost \\bigint b = 0; ghost \\bigint bb = b + b; set bb = b-b; set bb = b*b; set bb = b/b;     }}");

//@ ghost map<string,string> b ; );

//@ ghost map<Object,Object> b ; );

//@ ghost \\bigint b = 0; );

//@ ghost \\real b = 0; );

//@ ghost \\TYPE b ; );

//@ ghost \\bigint b = 0; ghost \\bigint bb = -b; );

//@ ghost \\bigint b = 0; ghost \\bigint bb = b + b; set bb = b-b; set bb = b*b; set bb = b/b;     }}");

//@ ghost map<string,string> b ; );

//@ ghost map<Object,Object> b ; );

/*@ private invariant (\\forall int i; i>0; i!= 0); */
/*@ public invariant (\\forall int i; i>0; i!= 0); */
/*@ public invariant 0 == (\\let int i = 0; i); */
/*@  invariant i == 0; */
/*@  invariant this.i == 0; */
/*@ spec_public */
/*@  public normal_behavior requires this.i == 0; */
/*@ spec_public */
/*@  public normal_behavior requires this.i == 0; */
//@ model import java.util.List;     //@     //@     /*@ */ /*@ */ public class TestJava {   }");

/*@ private invariant (\\forall int i; i>0; i!= 0); */
/*@ public invariant (\\forall int i; i>0; i!= 0); */
/*@ public invariant 0 == (\\let int i = 0; i); */
/*@  invariant i == 0; */
/*@  invariant this.i == 0; */
/*@ spec_public */
/*@  public normal_behavior requires this.i == 0; */
/*@ spec_public */
/*@  public normal_behavior requires this.i == 0; */
//@ model import java.util.List;     //@     //@     /*@ */ /*@ */ public class TestJava {   }");

/*@ private invariant (\\forall int i; i>0; i!= 0); */
/*@ public invariant (\\forall int i; i>0; i!= 0); */
/*@ public invariant 0 == (\\let int i = 0; i); */
/*@  invariant i == 0; */
/*@  invariant this.i == 0; */
/*@ spec_public */
/*@  public normal_behavior requires this.i == 0; */
/*@ spec_public */
/*@  public normal_behavior requires this.i == 0; */
//@ model import java.util.List;     //@     //@     /*@ */ /*@ */ public class TestJava {   }");

/*@ private invariant (\\forall int i; i>0; i!= 0); */
/*@ public invariant (\\forall int i; i>0; i!= 0); */
/*@ public invariant 0 == (\\let int i = 0; i); */
/*@  invariant i == 0; */
/*@  invariant this.i == 0; */
/*@ spec_public */
/*@  public normal_behavior requires this.i == 0; */
/*@ spec_public */
/*@  public normal_behavior requires this.i == 0; */
//@ model import java.util.List;     //@     //@     /*@ */ /*@ */ public class TestJava {   }");

/*@ private invariant (\\forall int i; i>0; i!= 0); */
/*@ public invariant (\\forall int i; i>0; i!= 0); */
/*@ public invariant 0 == (\\let int i = 0; i); */
/*@  invariant i == 0; */
/*@  invariant this.i == 0; */
/*@ spec_public */
/*@  public normal_behavior requires this.i == 0; */
/*@ spec_public */
/*@  public normal_behavior requires this.i == 0; */
//@ model import java.util.List;     //@     //@     /*@ */ /*@ */ public class TestJava {   }");

//@ invariant b;);

//@ invariant k;,

//@ invariant bb;);

//@ static invariant bb;

//@ static invariant bb;);

//@ constraint b;);

//@ constraint k;,

//@ constraint bb;);

//@ constraint bb for \\everything;);

//@ constraint bb for A(), m, m(int), m(Object);

//@ static constraint bb for A();

//@ static constraint bb ;

//@ static constraint bb ;);

//@ constraint bb for m;);

//@ constraint bb for mm;);

//@ constraint bb for this.m;);

//@ constraint bb for A.m;);

//@ constraint bb for m(int););

//@ constraint bb for mm(int);

//@ constraint bb for this.m(int[],Object););

//@ constraint bb for a.m(java.lang.Integer););

//@ constraint bb for A.m(java.lang.Integer););

//@ constraint bb for A.m(java.lang.Integer);

//@ constraint bb for a.m(java.lang.Integer););

//@ constraint bb for m(java.lang.Integer);    } class B { void m(Integer i) {} }"

//@ constraint bb for B.m(java.lang.Integer);    } class B { void m(Integer i) {} }"

//@ axiom b;);

//@ axiom k;,

//@ axiom bb;);

//@ initially b;);

//@ initially k;,

//@ initially bb;);

//@ initially x;,

//@ static initially b;

//@ model int i; represents i = true;

//@ model int i; represents i <- true;

//@ model int i; represents i \\such_that 0;

//@ model int i; represents j = 0;

//@ model int i; represents i :0;

//@ model int j; represents j = ;

//@ model int i; represents j = 0

//@ model int i; represents x = 0

//@ model int i; represents x.* = 0

//@ model int i; represents x[*] = 0

//@ model int i; represents x[3] = 0;

//@ model int i; static represents i = 0;

//@ model static int i; represents i = 0;

//@ ghost int i; represents i = 0;

//@ represents i = 0;

//@ ghost int i; represents i = 0;);

//@ represents i = 0;);

//@ static represents i = 0;    } class B { //@ static model int i; 

//@ model static int i; static represents i = k;

//@ model static int i; static represents i = j;

//@  model static int i; static represents i <- j;

//@ ensures ((boolean)\\result);     int m() { return 0; }}"

//@ ensures ((short)\\result) == 0;     int m() { return 0; }}"

//@ public normal_behavior ensures true; public model boolean m();      }"

//@ forall int i,j; old boolean k=true, m = false; requires i == 0;      public void m() {}}"

//@ forall int i=0,j; old boolean k, m = false; requires i == 0;      public void m() {}}"

//@ old int i=true; old boolean m=0; requires i == 0;      public void m() {}}"

//@ forall int j; old int k=0; requires i+j<k;      public void m(int i) {}}"

//@ forall boolean j; old boolean  k=true; requires i+j<k;      public void m(boolean i) {}}"

//@ forall boolean j; old boolean k=true; requires i+j<k;      public void m(boolean i) {}}"

//@ forall int i; old int k=0   ; requires i<k;      public void m(int i) {}}"

//@ forall int k; old int k=0   ; requires i<k;      public void m(int i) {}}"

//@ forall int j; old int k=0   ; requires i<k;     //@{| forall int m; ensures k<m; also ensures k<m; |}      public void m(int i) {}}"

//@ forall int j; old int k=0   ; requires i<k;     //@{| forall int k; ensures k<m; also ensures i==0; |}      public void m(int i) {}}"

//@signals(Exception e) true;      void m(){}}");

//@signals(Exception) true;      void m(){}}");

//@signals(Object e) true;      void m(){}

//@signals true;      void m(){}

//@signals(RuntimeException ) ;      void m(){}}"

//@signals(java.io.IOException e) 2;      void m(){}

//@signals(int e) true;      void m(){}

//@signals(java.io.IOException e) e==null;      void m(){}}");

//@signals_only \    othing;    void m() {}}");

//@signals_only RuntimeException;    void m() {}}");

//@signals_only RuntimeException,Exception;    void m() {}}");

//@signals_only ;    void m() {}

//@signals_only RuntimeException java.lang.Exception;    void m() {}

//@signals_only RuntimeException,;    void m() {}

//@signals_only RuntimeException,,RuntimeException;    void m() {}

//@signals_only RuntimeException    void m() {}

//@signals_only RuntimeException[];    void m() {}

//@signals_only int;    void m() {}

//@signals_only Q;    void m() {}

//@ model JMLDataGroup k;      int n; //@ in k; 

//@ in k, this.k, super.kk;     } class B { //@ model int kk; 

/*@ spec_public */
//@ in k, this.k, super.kk;     } class B { //@ model int kk; 

/*@ spec_public */
//@ in m; 

//@ model static int m;      int n; //@ in m; 

//@ model JMLDataGroup k;      A next; //@ maps next.next \\into k; 

//@ model JMLDataGroup k;      A[] next; //@ maps next[*].next \\into k; 

//@ model JMLDataGroup k;      A[] next; //@ maps next[*] \\into k; 

//@ model JMLDataGroup k;      A[] next; //@ maps next[2 .. 3].next \\into k,k; 

//@ model JMLDataGroup k;      A[] next; //@ maps next[2].next \\into this.k; 

//@initializer static_initializer 

//@initializer static_initializer initializer static_initializer

//@ ensures i==0; initializer ensures j == 0; static_initializer 

//@ ensures i == 0; static_initializer 

//@ ensures i == 0; static_initializer );

//@ {} static {} {} static {}

//@ ensures i==0;      {} //@ ensures i==0;      static {} 

//@ ensures i==0;      static { i = 0; } 

//@ monitors_for i = j,a.k,Object.class;      }"

//@ monitors_for i = 5;      }"

//@ monitors_for i <- m;      }"

//@ monitors_for k = i,A.k;      }"

//@ monitors_for k = Object;      }"

//@ monitors_for z = i;      } class B { public Object z; }"

//@ readable j if i == null; writable j if i == null;      } class B { public Object z; }"

//@ readable k if i == null; writable k if i == null;      } class B { public Object z; }"

//@ readable z if i == null; writable z if i == null;      } class B { Object z; }"

//@ readable k if k == null; writable k if k == null;      } class B { public Object z; }"

//@ readable i if this == null; writable i if this == null;      } class B { public Object z; }"

//@ readable k if this == null; writable k if this == null;      } class B { public Object z; }"

//@ readable k if Object.class == null; writable k if Object.class == null;      } class B { public Object z; }"

//@ invariant b;);

//@ invariant k;,

//@ invariant bb;);

//@ static invariant bb;

//@ static invariant bb;);

//@ constraint b;);

//@ constraint k;,

//@ constraint bb;);

//@ constraint bb for \\everything;);

//@ constraint bb for A(), m, m(int), m(Object);

//@ static constraint bb for A();

//@ static constraint bb ;

//@ static constraint bb ;);

//@ constraint bb for m;);

//@ constraint bb for mm;);

//@ constraint bb for this.m;);

//@ constraint bb for A.m;);

//@ constraint bb for m(int););

//@ constraint bb for mm(int);

//@ constraint bb for this.m(int[],Object););

//@ constraint bb for a.m(java.lang.Integer););

//@ constraint bb for A.m(java.lang.Integer););

//@ constraint bb for A.m(java.lang.Integer);

//@ constraint bb for a.m(java.lang.Integer););

//@ constraint bb for m(java.lang.Integer);    } class B { void m(Integer i) {} }"

//@ constraint bb for B.m(java.lang.Integer);    } class B { void m(Integer i) {} }"

//@ axiom b;);

//@ axiom k;,

//@ axiom bb;);

//@ initially b;);

//@ initially k;,

//@ initially bb;);

//@ initially x;,

//@ static initially b;

//@ model int i; represents i = true;

//@ model int i; represents i <- true;

//@ model int i; represents i \\such_that 0;

//@ model int i; represents j = 0;

//@ model int i; represents i :0;

//@ model int j; represents j = ;

//@ model int i; represents j = 0

//@ model int i; represents x = 0

//@ model int i; represents x.* = 0

//@ model int i; represents x[*] = 0

//@ model int i; represents x[3] = 0;

//@ model int i; static represents i = 0;

//@ model static int i; represents i = 0;

//@ ghost int i; represents i = 0;

//@ represents i = 0;

//@ ghost int i; represents i = 0;);

//@ represents i = 0;);

//@ static represents i = 0;    } class B { //@ static model int i; 

//@ model static int i; static represents i = k;

//@ model static int i; static represents i = j;

//@  model static int i; static represents i <- j;

//@ ensures ((boolean)\\result);     int m() { return 0; }}"

//@ ensures ((short)\\result) == 0;     int m() { return 0; }}"

//@ public normal_behavior ensures true; public model boolean m();      }"

//@ forall int i,j; old boolean k=true, m = false; requires i == 0;      public void m() {}}"

//@ forall int i=0,j; old boolean k, m = false; requires i == 0;      public void m() {}}"

//@ old int i=true; old boolean m=0; requires i == 0;      public void m() {}}"

//@ forall int j; old int k=0; requires i+j<k;      public void m(int i) {}}"

//@ forall boolean j; old boolean  k=true; requires i+j<k;      public void m(boolean i) {}}"

//@ forall boolean j; old boolean k=true; requires i+j<k;      public void m(boolean i) {}}"

//@ forall int i; old int k=0   ; requires i<k;      public void m(int i) {}}"

//@ forall int k; old int k=0   ; requires i<k;      public void m(int i) {}}"

//@ forall int j; old int k=0   ; requires i<k;     //@{| forall int m; ensures k<m; also ensures k<m; |}      public void m(int i) {}}"

//@ forall int j; old int k=0   ; requires i<k;     //@{| forall int k; ensures k<m; also ensures i==0; |}      public void m(int i) {}}"

//@signals(Exception e) true;      void m(){}}");

//@signals(Exception) true;      void m(){}}");

//@signals(Object e) true;      void m(){}

//@signals true;      void m(){}

//@signals(RuntimeException ) ;      void m(){}}"

//@signals(java.io.IOException e) 2;      void m(){}

//@signals(int e) true;      void m(){}

//@signals(java.io.IOException e) e==null;      void m(){}}");

//@signals_only \    othing;    void m() {}}");

//@signals_only RuntimeException;    void m() {}}");

//@signals_only RuntimeException,Exception;    void m() {}}");

//@signals_only ;    void m() {}

//@signals_only RuntimeException java.lang.Exception;    void m() {}

//@signals_only RuntimeException,;    void m() {}

//@signals_only RuntimeException,,RuntimeException;    void m() {}

//@signals_only RuntimeException    void m() {}

//@signals_only RuntimeException[];    void m() {}

//@signals_only int;    void m() {}

//@signals_only Q;    void m() {}

//@ model JMLDataGroup k;      int n; //@ in k; 

//@ in k, this.k, super.kk;     } class B { //@ model int kk; 

/*@ spec_public */
//@ in k, this.k, super.kk;     } class B { //@ model int kk; 

/*@ spec_public */
//@ in m; 

//@ model static int m;      int n; //@ in m; 

//@ model JMLDataGroup k;      A next; //@ maps next.next \\into k; 

//@ model JMLDataGroup k;      A[] next; //@ maps next[*].next \\into k; 

//@ model JMLDataGroup k;      A[] next; //@ maps next[*] \\into k; 

//@ model JMLDataGroup k;      A[] next; //@ maps next[2 .. 3].next \\into k,k; 

//@ model JMLDataGroup k;      A[] next; //@ maps next[2].next \\into this.k; 

//@initializer static_initializer 

//@initializer static_initializer initializer static_initializer

//@ ensures i==0; initializer ensures j == 0; static_initializer 

//@ ensures i == 0; static_initializer 

//@ ensures i == 0; static_initializer );

//@ {} static {} {} static {}

//@ ensures i==0;      {} //@ ensures i==0;      static {} 

//@ ensures i==0;      static { i = 0; } 

//@ monitors_for i = j,a.k,Object.class;      }"

//@ monitors_for i = 5;      }"

//@ monitors_for i <- m;      }"

//@ monitors_for k = i,A.k;      }"

//@ monitors_for k = Object;      }"

//@ monitors_for z = i;      } class B { public Object z; }"

//@ readable j if i == null; writable j if i == null;      } class B { public Object z; }"

//@ readable k if i == null; writable k if i == null;      } class B { public Object z; }"

//@ readable z if i == null; writable z if i == null;      } class B { Object z; }"

//@ readable k if k == null; writable k if k == null;      } class B { public Object z; }"

//@ readable i if this == null; writable i if this == null;      } class B { public Object z; }"

//@ readable k if this == null; writable k if this == null;      } class B { public Object z; }"

//@ readable k if Object.class == null; writable k if Object.class == null;      } class B { public Object z; }"

//@ invariant b;);

//@ invariant k;,

//@ invariant bb;);

//@ static invariant bb;

//@ static invariant bb;);

//@ constraint b;);

//@ constraint k;,

//@ constraint bb;);

//@ constraint bb for \\everything;);

//@ constraint bb for A(), m, m(int), m(Object);

//@ static constraint bb for A();

//@ static constraint bb ;

//@ static constraint bb ;);

//@ constraint bb for m;);

//@ constraint bb for mm;);

//@ constraint bb for this.m;);

//@ constraint bb for A.m;);

//@ constraint bb for m(int););

//@ constraint bb for mm(int);

//@ constraint bb for this.m(int[],Object););

//@ constraint bb for a.m(java.lang.Integer););

//@ constraint bb for A.m(java.lang.Integer););

//@ constraint bb for A.m(java.lang.Integer);

//@ constraint bb for a.m(java.lang.Integer););

//@ constraint bb for m(java.lang.Integer);    } class B { void m(Integer i) {} }"

//@ constraint bb for B.m(java.lang.Integer);    } class B { void m(Integer i) {} }"

//@ axiom b;);

//@ axiom k;,

//@ axiom bb;);

//@ initially b;);

//@ initially k;,

//@ initially bb;);

//@ initially x;,

//@ static initially b;

//@ model int i; represents i = true;

//@ model int i; represents i <- true;

//@ model int i; represents i \\such_that 0;

//@ model int i; represents j = 0;

//@ model int i; represents i :0;

//@ model int j; represents j = ;

//@ model int i; represents j = 0

//@ model int i; represents x = 0

//@ model int i; represents x.* = 0

//@ model int i; represents x[*] = 0

//@ model int i; represents x[3] = 0;

//@ model int i; static represents i = 0;

//@ model static int i; represents i = 0;

//@ ghost int i; represents i = 0;

//@ represents i = 0;

//@ ghost int i; represents i = 0;);

//@ represents i = 0;);

//@ static represents i = 0;    } class B { //@ static model int i; 

//@ model static int i; static represents i = k;

//@ model static int i; static represents i = j;

//@  model static int i; static represents i <- j;

//@ ensures ((boolean)\\result);     int m() { return 0; }}"

//@ ensures ((short)\\result) == 0;     int m() { return 0; }}"

//@ public normal_behavior ensures true; public model boolean m();      }"

//@ forall int i,j; old boolean k=true, m = false; requires i == 0;      public void m() {}}"

//@ forall int i=0,j; old boolean k, m = false; requires i == 0;      public void m() {}}"

//@ old int i=true; old boolean m=0; requires i == 0;      public void m() {}}"

//@ forall int j; old int k=0; requires i+j<k;      public void m(int i) {}}"

//@ forall boolean j; old boolean  k=true; requires i+j<k;      public void m(boolean i) {}}"

//@ forall boolean j; old boolean k=true; requires i+j<k;      public void m(boolean i) {}}"

//@ forall int i; old int k=0   ; requires i<k;      public void m(int i) {}}"

//@ forall int k; old int k=0   ; requires i<k;      public void m(int i) {}}"

//@ forall int j; old int k=0   ; requires i<k;     //@{| forall int m; ensures k<m; also ensures k<m; |}      public void m(int i) {}}"

//@ forall int j; old int k=0   ; requires i<k;     //@{| forall int k; ensures k<m; also ensures i==0; |}      public void m(int i) {}}"

//@signals(Exception e) true;      void m(){}}");

//@signals(Exception) true;      void m(){}}");

//@signals(Object e) true;      void m(){}

//@signals true;      void m(){}

//@signals(RuntimeException ) ;      void m(){}}"

//@signals(java.io.IOException e) 2;      void m(){}

//@signals(int e) true;      void m(){}

//@signals(java.io.IOException e) e==null;      void m(){}}");

//@signals_only \    othing;    void m() {}}");

//@signals_only RuntimeException;    void m() {}}");

//@signals_only RuntimeException,Exception;    void m() {}}");

//@signals_only ;    void m() {}

//@signals_only RuntimeException java.lang.Exception;    void m() {}

//@signals_only RuntimeException,;    void m() {}

//@signals_only RuntimeException,,RuntimeException;    void m() {}

//@signals_only RuntimeException    void m() {}

//@signals_only RuntimeException[];    void m() {}

//@signals_only int;    void m() {}

//@signals_only Q;    void m() {}

//@ model JMLDataGroup k;      int n; //@ in k; 

//@ in k, this.k, super.kk;     } class B { //@ model int kk; 

/*@ spec_public */
//@ in k, this.k, super.kk;     } class B { //@ model int kk; 

/*@ spec_public */
//@ in m; 

//@ model static int m;      int n; //@ in m; 

//@ model JMLDataGroup k;      A next; //@ maps next.next \\into k; 

//@ model JMLDataGroup k;      A[] next; //@ maps next[*].next \\into k; 

//@ model JMLDataGroup k;      A[] next; //@ maps next[*] \\into k; 

//@ model JMLDataGroup k;      A[] next; //@ maps next[2 .. 3].next \\into k,k; 

//@ model JMLDataGroup k;      A[] next; //@ maps next[2].next \\into this.k; 

//@initializer static_initializer 

//@initializer static_initializer initializer static_initializer

//@ ensures i==0; initializer ensures j == 0; static_initializer 

//@ ensures i == 0; static_initializer 

//@ ensures i == 0; static_initializer );

//@ {} static {} {} static {}

//@ ensures i==0;      {} //@ ensures i==0;      static {} 

//@ ensures i==0;      static { i = 0; } 

//@ monitors_for i = j,a.k,Object.class;      }"

//@ monitors_for i = 5;      }"

//@ monitors_for i <- m;      }"

//@ monitors_for k = i,A.k;      }"

//@ monitors_for k = Object;      }"

//@ monitors_for z = i;      } class B { public Object z; }"

//@ readable j if i == null; writable j if i == null;      } class B { public Object z; }"

//@ readable k if i == null; writable k if i == null;      } class B { public Object z; }"

//@ readable z if i == null; writable z if i == null;      } class B { Object z; }"

//@ readable k if k == null; writable k if k == null;      } class B { public Object z; }"

//@ readable i if this == null; writable i if this == null;      } class B { public Object z; }"

//@ readable k if this == null; writable k if this == null;      } class B { public Object z; }"

//@ readable k if Object.class == null; writable k if Object.class == null;      } class B { public Object z; }"

//@ invariant b;);

//@ invariant k;,

//@ invariant bb;);

//@ static invariant bb;

//@ static invariant bb;);

//@ constraint b;);

//@ constraint k;,

//@ constraint bb;);

//@ constraint bb for \\everything;);

//@ constraint bb for A(), m, m(int), m(Object);

//@ static constraint bb for A();

//@ static constraint bb ;

//@ static constraint bb ;);

//@ constraint bb for m;);

//@ constraint bb for mm;);

//@ constraint bb for this.m;);

//@ constraint bb for A.m;);

//@ constraint bb for m(int););

//@ constraint bb for mm(int);

//@ constraint bb for this.m(int[],Object););

//@ constraint bb for a.m(java.lang.Integer););

//@ constraint bb for A.m(java.lang.Integer););

//@ constraint bb for A.m(java.lang.Integer);

//@ constraint bb for a.m(java.lang.Integer););

//@ constraint bb for m(java.lang.Integer);    } class B { void m(Integer i) {} }"

//@ constraint bb for B.m(java.lang.Integer);    } class B { void m(Integer i) {} }"

//@ axiom b;);

//@ axiom k;,

//@ axiom bb;

//@ initially b;);

//@ initially k;,

//@ initially bb;);

//@ initially x;,

//@ static initially b;

//@ model int i; represents i = true;

//@ model int i; represents i <- true;

//@ model int i; represents i \\such_that 0;

//@ model int i; represents j = 0;

//@ model int i; represents i :0;

//@ model int j; represents j = ;

//@ model int i; represents j = 0

//@ model int i; represents x = 0

//@ model int i; represents x.* = 0

//@ model int i; represents x[*] = 0

//@ model int i; represents x[3] = 0;

//@ model int i; static represents i = 0;

//@ model static int i; represents i = 0;

//@ ghost int i; represents i = 0;

//@ represents i = 0;

//@ ghost int i; represents i = 0;);

//@ represents i = 0;);

//@ static represents i = 0;    } class B { //@ static model int i; 

//@ model static int i; static represents i = k;

//@ model static int i; static represents i = j;

//@  model static int i; static represents i <- j;

//@ ensures ((boolean)\\result);     int m() { return 0; }}"

//@ ensures ((short)\\result) == 0;     int m() { return 0; }}"

//@ public normal_behavior ensures true; public model boolean m();      }"

//@ forall int i,j; old boolean k=true, m = false; requires i == 0;      public void m() {}}"

//@ forall int i=0,j; old boolean k, m = false; requires i == 0;      public void m() {}}"

//@ old int i=true; old boolean m=0; requires i == 0;      public void m() {}}"

//@ forall int j; old int k=0; requires i+j<k;      public void m(int i) {}}"

//@ forall boolean j; old boolean  k=true; requires i+j<k;      public void m(boolean i) {}}"

//@ forall boolean j; old boolean k=true; requires i+j<k;      public void m(boolean i) {}}"

//@ forall int i; old int k=0   ; requires i<k;      public void m(int i) {}}"

//@ forall int k; old int k=0   ; requires i<k;      public void m(int i) {}}"

//@ forall int j; old int k=0   ; requires i<k;     //@{| forall int m; ensures k<m; also ensures k<m; |}      public void m(int i) {}}"

//@ forall int j; old int k=0   ; requires i<k;     //@{| forall int k; ensures k<m; also ensures i==0; |}      public void m(int i) {}}"

//@signals(Exception e) true;      void m(){}}");

//@signals(Exception) true;      void m(){}}");

//@signals(Object e) true;      void m(){}

//@signals true;      void m(){}

//@signals(RuntimeException ) ;      void m(){}}"

//@signals(java.io.IOException e) 2;      void m(){}

//@signals(int e) true;      void m(){}

//@signals(java.io.IOException e) e==null;      void m(){}}");

//@signals_only \    othing;    void m() {}}");

//@signals_only RuntimeException;    void m() {}}");

//@signals_only RuntimeException,Exception;    void m() {}}");

//@signals_only ;    void m() {}

//@signals_only RuntimeException java.lang.Exception;    void m() {}

//@signals_only RuntimeException,;    void m() {}

//@signals_only RuntimeException,,RuntimeException;    void m() {}

//@signals_only RuntimeException    void m() {}

//@signals_only RuntimeException[];    void m() {}

//@signals_only int;    void m() {}

//@signals_only Q;    void m() {}

//@ model JMLDataGroup k;      int n; //@ in k; 

//@ in k, this.k, super.kk;     } class B { //@ model int kk; 

/*@ spec_public */
//@ in k, this.k, super.kk;     } class B { //@ model int kk; 

/*@ spec_public */
//@ in m; 

//@ model static int m;      int n; //@ in m; 

//@ model JMLDataGroup k;      A next; //@ maps next.next \\into k; 

//@ model JMLDataGroup k;      A[] next; //@ maps next[*].next \\into k; 

//@ model JMLDataGroup k;      A[] next; //@ maps next[*] \\into k; 

//@ model JMLDataGroup k;      A[] next; //@ maps next[2 .. 3].next \\into k,k; 

//@ model JMLDataGroup k;      A[] next; //@ maps next[2].next \\into this.k; 

//@initializer static_initializer 

//@initializer static_initializer initializer static_initializer

//@ ensures i==0; initializer ensures j == 0; static_initializer 

//@ ensures i == 0; static_initializer 

//@ ensures i == 0; static_initializer );

//@ {} static {} {} static {}

//@ ensures i==0;      {} //@ ensures i==0;      static {} 

//@ ensures i==0;      static { i = 0; } 

//@ monitors_for i = j,a.k,Object.class;      }"

//@ monitors_for i = 5;      }"

//@ monitors_for i <- m;      }"

//@ monitors_for k = i,A.k;      }"

//@ monitors_for k = Object;      }"

//@ monitors_for z = i;      } class B { public Object z; }"

//@ readable j if i == null; writable j if i == null;      } class B { public Object z; }"

//@ readable k if i == null; writable k if i == null;      } class B { public Object z; }"

//@ readable z if i == null; writable z if i == null;      } class B { Object z; }"

//@ readable k if k == null; writable k if k == null;      } class B { public Object z; }"

//@ readable i if this == null; writable i if this == null;      } class B { public Object z; }"

//@ readable k if this == null; writable k if this == null;      } class B { public Object z; }"

//@ readable k if Object.class == null; writable k if Object.class == null;      } class B { public Object z; }"

//@ invariant b;);

//@ invariant k;,

//@ invariant bb;);

//@ static invariant bb;

//@ static invariant bb;);

//@ constraint b;);

//@ constraint k;,

//@ constraint bb;);

//@ constraint bb for \\everything;);

//@ constraint bb for A(), m, m(int), m(Object);

//@ static constraint bb for A();

//@ static constraint bb ;

//@ static constraint bb ;);

//@ constraint bb for m;);

//@ constraint bb for mm;);

//@ constraint bb for this.m;);

//@ constraint bb for A.m;);

//@ constraint bb for m(int););

//@ constraint bb for mm(int);

//@ constraint bb for this.m(int[],Object););

//@ constraint bb for a.m(java.lang.Integer););

//@ constraint bb for A.m(java.lang.Integer););

//@ constraint bb for A.m(java.lang.Integer);

//@ constraint bb for a.m(java.lang.Integer););

//@ constraint bb for m(java.lang.Integer);    } class B { void m(Integer i) {} }"

//@ constraint bb for B.m(java.lang.Integer);    } class B { void m(Integer i) {} }"
//@ axiom b;);
//@ axiom k;,
//@ axiom bb;);
//@ initially b;);
//@ initially k;,
//@ initially bb;);
//@ initially x;,
//@ static initially b;
//@ model int i; represents i = true;
//@ model int i; represents i <- true;
//@ model int i; represents i \\such_that 0;
//@ model int i; represents j = 0;
//@ model int i; represents i :0;
//@ model int j; represents j = ;

//@ model int i; represents j = 0

//@ model int i; represents x = 0

//@ model int i; represents x.* = 0

//@ model int i; represents x[*] = 0

//@ model int i; represents x[3] = 0;

//@ model int i; static represents i = 0;

//@ model static int i; represents i = 0;

//@ ghost int i; represents i = 0;

//@ represents i = 0;

//@ ghost int i; represents i = 0;);

//@ represents i = 0;);

//@ static represents i = 0;    } class B { //@ static model int i; 

//@ model static int i; static represents i = k;

//@ model static int i; static represents i = j;

//@  model static int i; static represents i <- j;

//@ ensures ((boolean)\\result);     int m() { return 0; }}"

//@ ensures ((short)\\result) == 0;     int m() { return 0; }}"

//@ public normal_behavior ensures true; public model boolean m();      }"

//@ forall int i,j; old boolean k=true, m = false; requires i == 0;      public void m() {}}"

//@ forall int i=0,j; old boolean k, m = false; requires i == 0;      public void m() {}}"

//@ old int i=true; old boolean m=0; requires i == 0;      public void m() {}}"

//@ forall int j; old int k=0; requires i+j<k;      public void m(int i) {}}"

//@ forall boolean j; old boolean  k=true; requires i+j<k;      public void m(boolean i) {}}"

//@ forall boolean j; old boolean k=true; requires i+j<k;      public void m(boolean i) {}}"

//@ forall int i; old int k=0   ; requires i<k;      public void m(int i) {}}"

//@ forall int k; old int k=0   ; requires i<k;      public void m(int i) {}}"

//@ forall int j; old int k=0   ; requires i<k;     //@{| forall int m; ensures k<m; also ensures k<m; |}      public void m(int i) {}}"

//@ forall int j; old int k=0   ; requires i<k;     //@{| forall int k; ensures k<m; also ensures i==0; |}      public void m(int i) {}}"

//@signals(Exception e) true;      void m(){}}");

//@signals(Exception) true;      void m(){}}");

//@signals(Object e) true;      void m(){}

//@signals true;      void m(){}

//@signals(RuntimeException ) ;      void m(){}}"

//@signals(java.io.IOException e) 2;      void m(){}

//@signals(int e) true;      void m(){}

//@signals(java.io.IOException e) e==null;      void m(){}}");

//@signals_only \    othing;    void m() {}}");

//@signals_only RuntimeException;    void m() {}}");

//@signals_only RuntimeException,Exception;    void m() {}}");

//@signals_only ;    void m() {}

//@signals_only RuntimeException java.lang.Exception;    void m() {}

//@signals_only RuntimeException,;    void m() {}

//@signals_only RuntimeException,,RuntimeException;    void m() {}

//@signals_only RuntimeException    void m() {}

//@signals_only RuntimeException[];    void m() {}

//@signals_only int;    void m() {}

//@signals_only Q;    void m() {}

//@ model JMLDataGroup k;      int n; //@ in k; 

//@ in k, this.k, super.kk;     } class B { //@ model int kk; 

/*@ spec_public */
//@ in k, this.k, super.kk;     } class B { //@ model int kk; 

/*@ spec_public */
//@ in m; 

//@ model static int m;      int n; //@ in m; 

//@ model JMLDataGroup k;      A next; //@ maps next.next \\into k; 

//@ model JMLDataGroup k;      A[] next; //@ maps next[*].next \\into k; 

//@ model JMLDataGroup k;      A[] next; //@ maps next[*] \\into k; 

//@ model JMLDataGroup k;      A[] next; //@ maps next[2 .. 3].next \\into k,k; 

//@ model JMLDataGroup k;      A[] next; //@ maps next[2].next \\into this.k; 

//@initializer static_initializer 

//@initializer static_initializer initializer static_initializer

//@ ensures i==0; initializer ensures j == 0; static_initializer 

//@ ensures i == 0; static_initializer 

//@ ensures i == 0; static_initializer );

//@ {} static {} {} static {}

//@ ensures i==0;      {} //@ ensures i==0;      static {} 
//@ ensures i==0;      static { i = 0; } 
//@ monitors_for i = j,a.k,Object.class;      }"
//@ monitors_for i = 5;      }"
//@ monitors_for i <- m;      }"
//@ monitors_for k = i,A.k;      }"
//@ monitors_for k = Object;      }"
//@ monitors_for z = i;      } class B { public Object z; }"
//@ readable j if i == null; writable j if i == null;      } class B { public Object z; }"
//@ readable k if i == null; writable k if i == null;      } class B { public Object z; }"
//@ readable z if i == null; writable z if i == null;      } class B { Object z; }"
//@ readable k if k == null; writable k if k == null;      } class B { public Object z; }"
//@ readable i if this == null; writable i if this == null;      } class B { public Object z; }"
//@ readable k if this == null; writable k if this == null;      } class B { public Object z; }"
//@ readable k if Object.class == null; writable k if Object.class == null;      } class B { public Object z; }"

/*@ non_null */
/*@ nullable */