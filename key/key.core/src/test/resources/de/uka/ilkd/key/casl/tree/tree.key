\sorts {
    /*! @defaultValue(Empty) */
    Tree;
}
\functions {
    \unique Tree Empty;
    \unique Tree Leaf(int);
    \unique Tree Node(Tree, Tree);
    int depth(Tree);
    int tmax(int, int);
}
\axioms {
    tree_induction {
        \schemaVar \formula phi;
        \schemaVar \variable Tree base;
        \schemaVar \variable int val;
        \schemaVar \variable Tree t1;
        \schemaVar \variable Tree t2;

        \find( ==> \forall base; phi )
        \varcond( \notFreeIn(val,phi) )
        \varcond( \notFreeIn(t1,phi) )
        \varcond( \notFreeIn(t2,phi) )

        "1. case": \replacewith( ==>  ( {\subst base; Empty} phi ) );
        "2. case": \replacewith( ==> \forall val;  ( {\subst base; Leaf(val)} phi ) );
        "3. case": \replacewith( ==> \forall t1; \forall t2;  (  {\subst base; t1} phi & {\subst base; t2} phi -> {\subst base; Node(t1, t2)} phi ) )
    };
    tree_ctor_split {
        \schemaVar \term Tree tree;
        \schemaVar \skolemTerm int val;
        \schemaVar \skolemTerm Tree t1;
        \schemaVar \skolemTerm Tree t2;
        \find(tree) \sameUpdateLevel
        \varcond(\new(t1, \dependingOn(tree)), \new(t2, \dependingOn(tree)), \new(val, \dependingOn(tree)))
        \replacewith(Empty) \add(tree = Empty ==>);
        \replacewith(Leaf(val)) \add(tree = Leaf(val) ==>);
        \replacewith(Node(t1, t2)) \add(tree = Node(t1, t2) ==>)
    };
    depth_Empty {
        \find( depth(Empty) )
        \replacewith( 0 )
    };
    depth_Leaf_val {
        \schemaVar \term int val;
        \find( depth(Leaf(val)) )
        \replacewith( 1 )
    };
    depth_Node_t1_t2 {
        \schemaVar \term Tree t1;
        \schemaVar \term Tree t2;
        \find( depth(Node(t1, t2)) )
        \replacewith( tmax(depth(t1), depth(t2))+1 )
    };
    depth_t1_ge_depth_t3_and_depth_t2_ge_depth_t4 {
        \schemaVar \term Tree t1;
        \schemaVar \term Tree t2;
        \schemaVar \term Tree t3;
        \schemaVar \term Tree t4;
        \find(  ( depth(t1)>=depth(t3) ) & ( depth(t2)>=depth(t4) )  )
        \replacewith( depth(Node(t1, t2))>=depth(Node(t3, t4)) )
    };
}
\javaSource ".";
\chooseContract
