spec NatList =
    free type Nat ::= Nat(arg : int) %key(defaultValue=Nat(0))% %key(extends=java.lang.Object)%

    free type NatList ::= nil | cons(first : Nat; rest : NatList) %key(defaultValue=nil)%

    ops
        append : NatList * NatList -> NatList;
        reverse: NatList -> NatList;
        len: NatList -> int;
        get: NatList * int -> Nat;
        remove: NatList * int -> NatList;

    forall l : NatList . append(nil,l) = l %key(heuristic=simplify)%
    forall l1,l2 : NatList; e : Nat . append(cons(e, l1), l2) = cons(e, append(l1,l2)) %key(heuristic=simplify)%
    
    . reverse(nil) = nil %key(heuristic=simplify)%
    forall e : Nat; l : NatList . reverse(cons(e,l)) = append(reverse(l), cons(e, nil)) %key(heuristic=simplify)%

    . len(nil) = 0 %key(heuristic=simplify)%
    forall e : Nat; L : NatList . len(cons(e,l)) = 1 + len(l) %key(heuristic=simplify)%

    forall e : Nat; L : NatList . get(cons(e,l), 0) = e %key(heuristic=simplify)%
    forall e : Nat; L : NatList; i : int . get(cons(e,l), i) = get(l, i-1) %key(heuristic=simplify)%

    forall e : Nat; l : NatList . remove(cons(e,l), 0) = l %key(heuristic=simplify)%
    forall e : Nat; l : NatList; j : int . remove(cons(e,l),j) = cons(e,remove(l, j-1)) %key(heuristic=simplify)%
end
