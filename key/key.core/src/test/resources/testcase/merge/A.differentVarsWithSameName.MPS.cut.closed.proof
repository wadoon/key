\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Thu Dec 16 23:34:07 CET 2021
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=JavaCard-JavaCard\\:on , Strings-Strings\\:on , assertions-assertions\\:safe , bigint-bigint\\:on , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , integerSimplificationRules-integerSimplificationRules\\:full , javaLoopTreatment-javaLoopTreatment\\:efficient , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:on , methodExpansion-methodExpansion\\:noRestriction , modelFields-modelFields\\:treatAsAxiom , moreSeqRules-moreSeqRules\\:off , permissions-permissions\\:off , programRules-programRules\\:Java , reach-reach\\:on , runtimeExceptions-runtimeExceptions\\:ban , sequences-sequences\\:on , wdChecks-wdChecks\\:off , wdOperator-wdOperator\\:L
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_NONE
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=7000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_EXPAND
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource ".";

\proofObligation "#Proof Obligation Settings
#Thu Dec 16 23:34:07 CET 2021
contract=A[A\\:\\:m(boolean)].JML operation contract.0
name=A[A\\:\\:m(boolean)].JML operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "dscheurer" ) (keyVersion "327015b4b7182a877de25e71099a53d78919e1bb"))
(keyLog "1" (keyUser "dscheurer" ) (keyVersion "327015b4b7182a877de25e71099a53d78919e1bb"))
(keyLog "2" (keyUser "lukas" ) (keyVersion "7514d7421a"))

(autoModeTime "1611")

(branch "dummy ID"
 (builtin "One Step Simplification" (formula "1") (newnames "heapAtPre,o,f"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "assignment" (formula "7") (term "1"))
 (builtin "One Step Simplification" (formula "7"))
(rule "Class_invariant_axiom_for_A" (formula "5") (ifseqformula "3"))
(rule "notLeft" (formula "5"))
(rule "methodBodyExpand" (formula "6") (term "1") (newnames "heapBefore_m,savedHeapBefore_m"))
 (builtin "One Step Simplification" (formula "6"))
(rule "variableDeclaration" (formula "6") (term "1") (newnames "r"))
(rule "ifElseSplit" (formula "6"))
(branch "if _b true"
    (builtin "One Step Simplification" (formula "7"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "compound_greater_than_comparison_1" (formula "7") (term "1") (inst "#v0=x"))
   (rule "variableDeclarationAssign" (formula "7") (term "1"))
   (rule "variableDeclaration" (formula "7") (term "1") (newnames "x"))
    (builtin "Use Operation Contract" (formula "7") (newnames "heapBefore_f,result_0,exc_0,heapAfter_f,anon_heap_f") (contract "A[A::f()].JML operation contract.0"))
   (branch "Post (f)"
       (builtin "One Step Simplification" (formula "9"))
       (builtin "One Step Simplification" (formula "7"))
      (rule "andLeft" (formula "7"))
      (rule "andLeft" (formula "8"))
      (rule "typeEqDerived" (formula "9") (term "0,1,1,1,1") (ifseqformula "8"))
      (rule "typeEqDerived" (formula "9") (term "0,0,1,1,1") (ifseqformula "8"))
       (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "8")) (ifInst ""  (formula "8")))
      (rule "andLeft" (formula "9"))
      (rule "inEqSimp_gtToGeq" (formula "9"))
      (rule "times_zero_1" (formula "9") (term "1,0,0"))
      (rule "add_literals" (formula "9") (term "0,0"))
      (rule "assignment" (formula "12") (term "1"))
       (builtin "One Step Simplification" (formula "12"))
      (rule "inEqSimp_sepPosMonomial1" (formula "9"))
      (rule "mul_literals" (formula "9") (term "1"))
      (rule "Class_invariant_axiom_for_A" (formula "10") (ifseqformula "4"))
      (rule "notLeft" (formula "10"))
      (rule "greater_than_comparison_simple" (formula "11") (term "1"))
       (builtin "One Step Simplification" (formula "11"))
      (rule "inEqSimp_gtToGeq" (formula "11") (term "0,0,1,0"))
      (rule "times_zero_1" (formula "11") (term "1,0,0,0,0,1,0"))
      (rule "add_zero_right" (formula "11") (term "0,0,0,0,1,0"))
      (rule "blockEmpty" (formula "11") (term "1"))
       (builtin "MergeRule" (formula "11") (mergeProc "MergeByIfThenElse") (nrMergePartners "1") (mergeId "194"))
      (rule "deleteMergePoint" (formula "7") (term "1"))
      (rule "notLeft" (formula "1"))
      (rule "inEqSimp_sepPosMonomial1" (formula "7") (term "0,1,0,0,0,0"))
      (rule "mul_literals" (formula "7") (term "1,0,1,0,0,0,0"))
      (rule "cnf_rightDist" (formula "5"))
      (rule "andLeft" (formula "5"))
      (rule "cnf_rightDist" (formula "6"))
      (rule "andLeft" (formula "6"))
      (rule "commute_or" (formula "7"))
      (rule "cnf_rightDist" (formula "6"))
      (rule "andLeft" (formula "6"))
      (rule "shift_paren_or" (formula "7"))
      (rule "cnf_rightDist" (formula "6"))
      (rule "andLeft" (formula "6"))
      (rule "commute_or" (formula "7"))
      (rule "cnf_rightDist" (formula "6"))
      (rule "andLeft" (formula "6"))
      (rule "commute_or_2" (formula "6"))
      (rule "shift_paren_or" (formula "7"))
      (rule "commute_or" (formula "6") (term "0"))
      (rule "commute_and_2" (formula "5") (term "1"))
      (rule "commute_and_2" (formula "5") (term "0,0"))
      (rule "cnf_rightDist" (formula "5"))
      (rule "andLeft" (formula "5"))
      (rule "cnf_rightDist" (formula "6"))
      (rule "andLeft" (formula "6"))
      (rule "commute_or" (formula "7"))
      (rule "cnf_rightDist" (formula "6"))
      (rule "andLeft" (formula "6"))
      (rule "cnf_rightDist" (formula "6"))
      (rule "andLeft" (formula "6"))
      (rule "cnf_rightDist" (formula "6"))
      (rule "andLeft" (formula "6"))
      (rule "commute_or" (formula "6"))
      (rule "cnf_rightDist" (formula "5"))
      (rule "andLeft" (formula "5"))
      (rule "cnf_rightDist" (formula "6"))
      (rule "andLeft" (formula "6"))
      (rule "commute_or" (formula "7"))
      (rule "cnf_rightDist" (formula "6"))
      (rule "andLeft" (formula "6"))
      (rule "commute_or" (formula "7"))
      (rule "cnf_rightDist" (formula "6"))
      (rule "andLeft" (formula "6"))
      (rule "cnf_rightDist" (formula "6"))
      (rule "andLeft" (formula "6"))
      (rule "commute_or" (formula "6"))
      (rule "commute_and_2" (formula "5") (term "1"))
      (rule "cnf_rightDist" (formula "5"))
      (rule "andLeft" (formula "5"))
      (rule "cnf_rightDist" (formula "6"))
      (rule "andLeft" (formula "6"))
      (rule "commute_or" (formula "7"))
      (rule "cnf_rightDist" (formula "6"))
      (rule "andLeft" (formula "6"))
      (rule "commute_or" (formula "7"))
      (rule "cnf_rightDist" (formula "6"))
      (rule "andLeft" (formula "6"))
      (rule "cnf_rightDist" (formula "6"))
      (rule "andLeft" (formula "6"))
      (rule "commute_or" (formula "6"))
      (rule "commute_and" (formula "5") (term "1"))
      (rule "cnf_rightDist" (formula "5"))
      (rule "andLeft" (formula "5"))
      (rule "commute_or" (formula "5"))
      (rule "cnf_rightDist" (formula "6"))
      (rule "andLeft" (formula "6"))
      (rule "commute_or" (formula "7"))
      (rule "cnf_rightDist" (formula "5"))
      (rule "andLeft" (formula "5"))
      (rule "commute_or" (formula "6"))
      (rule "cnf_rightDist" (formula "7"))
      (rule "andLeft" (formula "7"))
      (rule "commute_or" (formula "8"))
      (rule "cnf_rightDist" (formula "5"))
      (rule "andLeft" (formula "5"))
      (rule "commute_or" (formula "6"))
      (rule "cnf_rightDist" (formula "8"))
      (rule "andLeft" (formula "8"))
      (rule "commute_or" (formula "9"))
      (rule "cnf_rightDist" (formula "5"))
      (rule "andLeft" (formula "5"))
      (rule "commute_or" (formula "6"))
      (rule "cnf_rightDist" (formula "9"))
       (builtin "One Step Simplification" (formula "9"))
      (rule "cnf_rightDist" (formula "5"))
      (rule "andLeft" (formula "5"))
      (rule "methodCallReturn" (formula "35") (term "1"))
      (rule "assignment" (formula "35") (term "1"))
       (builtin "One Step Simplification" (formula "35"))
      (rule "methodCallEmpty" (formula "35") (term "1"))
      (rule "tryEmpty" (formula "35") (term "1"))
      (rule "emptyModality" (formula "35") (term "1"))
       (builtin "One Step Simplification" (formula "35") (ifInst ""  (formula "13")))
      (rule "Class_invariant_axiom_for_A" (formula "35") (ifseqformula "3"))
      (rule "notRight" (formula "35"))
      (rule "close" (formula "35") (ifseqformula "1"))
   )
   (branch "Exceptional Post (f)"
       (builtin "One Step Simplification" (formula "7"))
       (builtin "One Step Simplification" (formula "9"))
      (rule "andLeft" (formula "7"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "8") (term "1,0") (ifseqformula "7"))
      (rule "andLeft" (formula "8"))
      (rule "andLeft" (formula "8"))
      (rule "andLeft" (formula "10"))
      (rule "notLeft" (formula "8"))
      (rule "replace_known_right" (formula "9") (term "0") (ifseqformula "11"))
       (builtin "One Step Simplification" (formula "9"))
      (rule "true_left" (formula "9"))
      (rule "replace_known_right" (formula "9") (term "0,0") (ifseqformula "10"))
       (builtin "One Step Simplification" (formula "9"))
      (rule "andLeft" (formula "9"))
      (rule "blockThrow" (formula "13") (term "1"))
      (rule "Class_invariant_axiom_for_A" (formula "9") (ifseqformula "4"))
      (rule "notLeft" (formula "9"))
      (rule "methodCallParamThrow" (formula "12") (term "1"))
      (rule "tryCatchThrow" (formula "12") (term "1"))
      (rule "ifElseUnfold" (formula "12") (term "1") (inst "#boolv=x"))
      (rule "variableDeclaration" (formula "12") (term "1") (newnames "x_1"))
      (rule "equality_comparison_simple" (formula "12") (term "1"))
       (builtin "One Step Simplification" (formula "12"))
      (rule "replace_known_right" (formula "12") (term "0,0,1,0") (ifseqformula "10"))
       (builtin "One Step Simplification" (formula "12"))
      (rule "ifElseSplit" (formula "12"))
      (branch "if x_1 true"
          (builtin "One Step Simplification" (formula "1"))
         (rule "closeFalse" (formula "1"))
      )
      (branch "if x_1 false"
          (builtin "One Step Simplification" (formula "13"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "true_left" (formula "1"))
         (rule "elim_double_block" (formula "12") (term "1"))
         (rule "ifElseSplit" (formula "12"))
         (branch "if exc_0 instanceof java.lang.Throwable true"
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "11")))
            (rule "true_left" (formula "1"))
            (rule "variableDeclaration" (formula "12") (term "1") (newnames "e"))
            (rule "delete_unnecessary_cast" (formula "12") (term "1"))
             (builtin "One Step Simplification" (formula "13"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "assignment" (formula "12") (term "1"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "emptyModality" (formula "12") (term "1"))
             (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "10")) (ifInst ""  (formula "10")) (ifInst ""  (formula "9")))
            (rule "Class_invariant_axiom_for_A" (formula "12") (ifseqformula "4"))
            (rule "notRight" (formula "12"))
            (rule "close" (formula "12") (ifseqformula "1"))
         )
         (branch "if exc_0 instanceof java.lang.Throwable false"
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "11")))
            (rule "closeFalse" (formula "1"))
         )
      )
   )
   (branch "Pre (f)"
       (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "2")))
      (rule "Class_invariant_axiom_for_A" (formula "7") (ifseqformula "4"))
      (rule "notRight" (formula "7"))
      (rule "close" (formula "7") (ifseqformula "1"))
   )
)
(branch "if _b false"
    (builtin "One Step Simplification" (formula "7"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "notLeft" (formula "1"))
   (rule "compound_inequality_comparison_1" (formula "7") (term "1") (inst "#v0=o"))
   (rule "variableDeclarationAssign" (formula "7") (term "1"))
   (rule "variableDeclaration" (formula "7") (term "1") (newnames "o"))
    (builtin "Use Operation Contract" (formula "7") (newnames "heapBefore_g,result_0,exc_0,heapAfter_g,anon_heap_g") (contract "A[A::g()].JML operation contract.0"))
   (branch "Post (g)"
       (builtin "One Step Simplification" (formula "9"))
       (builtin "One Step Simplification" (formula "6"))
      (rule "andLeft" (formula "6"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "7") (term "1,1,0") (ifseqformula "6"))
      (rule "andLeft" (formula "7"))
      (rule "andLeft" (formula "8"))
      (rule "andLeft" (formula "7"))
      (rule "typeEqDerived" (formula "10") (term "0,0,1,1") (ifseqformula "7"))
      (rule "typeEqDerived" (formula "10") (term "0,1,1,1") (ifseqformula "7"))
       (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "7")))
      (rule "true_left" (formula "10"))
      (rule "replace_known_left" (formula "9") (term "0") (ifseqformula "7"))
       (builtin "One Step Simplification" (formula "9"))
      (rule "andLeft" (formula "9"))
      (rule "andLeft" (formula "10"))
      (rule "notLeft" (formula "9"))
      (rule "replace_known_right" (formula "8") (term "0") (ifseqformula "10"))
       (builtin "One Step Simplification" (formula "8"))
      (rule "assignment" (formula "13") (term "1"))
       (builtin "One Step Simplification" (formula "13"))
      (rule "Class_invariant_axiom_for_A" (formula "9") (ifseqformula "3"))
      (rule "notLeft" (formula "9"))
      (rule "inequality_comparison_simple" (formula "12") (term "1"))
       (builtin "One Step Simplification" (formula "12"))
      (rule "replace_known_right" (formula "12") (term "0,0,1,0") (ifseqformula "9"))
       (builtin "One Step Simplification" (formula "12"))
      (rule "blockEmpty" (formula "12") (term "1"))
       (builtin "CloseAfterMerge" (formula "12") (newnames "result_0_0,result_0_1,exc_0_0,exc_0_1,P") (mergeNode "194"))
      (branch "Merged node is weakening"
         (rule "cut" (inst "cutFormula=(  (!(  self<<origin(\"User_Interaction @ node 196 (cut)\",\"[]\")>>
      = null)<<origin(\"User_Interaction @ node 196 (cut)\",\"[]\")>>)<<origin(\"User_Interaction @ node 196 (cut)\",\"[]\")>>
 & ((  (!(  b<<origin(\"User_Interaction @ node 196 (cut)\",\"[]\")>>
          = TRUE)<<origin(\"User_Interaction @ node 196 (cut)\",\"[]\")>>)<<origin(\"User_Interaction @ node 196 (cut)\",\"[]\")>>
     & ((  (!(  result_0_1<<origin(\"User_Interaction @ node 196 (cut)\",\"[]\")>>
              = null)<<origin(\"User_Interaction @ node 196 (cut)\",\"[]\")>>)<<origin(\"User_Interaction @ node 196 (cut)\",\"[]\")>>
         & ((  wellFormed(heap)<<origin(\"User_Interaction @ node 196 (cut)\",\"[]\")>>
             & ((  (  boolean::select(heap,
                                      self,
                                      java.lang.Object::<created>)
                    = TRUE)<<origin(\"User_Interaction @ node 196 (cut)\",\"[]\")>>
                 & ((  (A::exactInstance(self) = TRUE)<<origin(\"User_Interaction @ node 196 (cut)\",\"[]\")>>
                     & ((  measuredByEmpty<<origin(\"User_Interaction @ node 196 (cut)\",\"[]\")>>
                         & ((  wellFormed(anon_heap_g)<<origin(\"User_Interaction @ node 196 (cut)\",\"[]\")>>
                             & ((  (  anon(heap,
                                           allLocs,
                                           anon_heap_g)
                                    = heapAfter_g)<<origin(\"User_Interaction @ node 196 (cut)\",\"[]\")>>
                                 & ((  (  exc_0_1<<origin(\"User_Interaction @ node 196 (cut)\",\"[]\")>>
                                        = null)<<origin(\"User_Interaction @ node 196 (cut)\",\"[]\")>>
                                     & ((  (  boolean::select(heap,
                                                              result_0_1,
                                                              java.lang.Object::<created>)
                                            = TRUE)<<origin(\"User_Interaction @ node 196 (cut)\",\"[]\")>>
                                         | (  boolean::select(anon_heap_g,
                                                              result_0_1,
                                                              java.lang.Object::<created>)
                                            = TRUE)<<origin(\"User_Interaction @ node 196 (cut)\",\"[]\")>>)<<origin(\"User_Interaction @ node 196 (cut)\",\"[]\")>>))<<origin(\"User_Interaction @ node 196 (cut)\",\"[]\")>>))<<origin(\"User_Interaction @ node 196 (cut)\",\"[]\")>>))<<origin(\"User_Interaction @ node 196 (cut)\",\"[]\")>>))<<origin(\"User_Interaction @ node 196 (cut)\",\"[]\")>>))<<origin(\"User_Interaction @ node 196 (cut)\",\"[]\")>>))<<origin(\"User_Interaction @ node 196 (cut)\",\"[]\")>>))<<origin(\"User_Interaction @ node 196 (cut)\",\"[]\")>>))<<origin(\"User_Interaction @ node 196 (cut)\",\"[]\")>>))<<origin(\"User_Interaction @ node 196 (cut)\",\"[]\")>>))<<origin(\"User_Interaction @ node 196 (cut)\",\"[]\")>>") (userinteraction))
         (branch "CUT: !self = null & ( !b = TRUE & ( !result_0_1 = null & ( wellFormed(heap) & ( self.<created> = TRUE & ( A::exactInstance(self) = TRUE & ( measuredByEmpty & ( wellFormed(anon_heap_g) & ( heap[anon(allLocs, anon_heap_g)] = heapAfter_g & ( exc_0_1 = null & ( result_0_1.<created> = TRUE | result_0_1.<created>@anon_heap_g = TRUE)))))))))) TRUE"
             (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "1")))
            (rule "andLeft" (formula "1"))
            (rule "impRight" (formula "3"))
            (rule "notLeft" (formula "2"))
            (rule "andLeft" (formula "2"))
            (rule "andLeft" (formula "3"))
            (rule "notLeft" (formula "2"))
            (rule "notLeft" (formula "2"))
            (rule "andLeft" (formula "2"))
            (rule "andLeft" (formula "3"))
            (rule "andLeft" (formula "4"))
            (rule "andLeft" (formula "5"))
            (rule "andLeft" (formula "6"))
            (rule "andLeft" (formula "7"))
            (rule "andLeft" (formula "8"))
            (rule "replace_known_left" (formula "1") (term "1,0,0,0,1,1,0") (ifseqformula "6"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "12")) (ifInst ""  (formula "2")) (ifInst ""  (formula "3")) (ifInst ""  (formula "4")) (ifInst ""  (formula "5")) (ifInst ""  (formula "11")) (ifInst ""  (formula "11")) (ifInst ""  (formula "10")) (ifInst ""  (formula "7")) (ifInst ""  (formula "8")) (ifInst ""  (formula "9")) (ifInst ""  (formula "11")) (ifInst ""  (formula "11")) (ifInst ""  (formula "13")))
            (rule "closeFalse" (formula "1"))
         )
         (branch "CUT: !self = null & ( !b = TRUE & ( !result_0_1 = null & ( wellFormed(heap) & ( self.<created> = TRUE & ( A::exactInstance(self) = TRUE & ( measuredByEmpty & ( wellFormed(anon_heap_g) & ( heap[anon(allLocs, anon_heap_g)] = heapAfter_g & ( exc_0_1 = null & ( result_0_1.<created> = TRUE | result_0_1.<created>@anon_heap_g = TRUE)))))))))) FALSE"
             (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "1")))
            (rule "closeTrue" (formula "2"))
         )
      )
      (branch "Merged with node 194"
      )
   )
   (branch "Exceptional Post (g)"
       (builtin "One Step Simplification" (formula "9"))
       (builtin "One Step Simplification" (formula "6"))
      (rule "andLeft" (formula "6"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "7") (term "1,0") (ifseqformula "6"))
      (rule "andLeft" (formula "7"))
      (rule "andLeft" (formula "8"))
      (rule "andLeft" (formula "7"))
      (rule "notLeft" (formula "7"))
      (rule "replace_known_right" (formula "8") (term "0") (ifseqformula "10"))
       (builtin "One Step Simplification" (formula "8"))
      (rule "true_left" (formula "8"))
      (rule "replace_known_right" (formula "8") (term "0,0") (ifseqformula "9"))
       (builtin "One Step Simplification" (formula "8"))
      (rule "andLeft" (formula "8"))
      (rule "blockThrow" (formula "13") (term "1"))
      (rule "Class_invariant_axiom_for_A" (formula "8") (ifseqformula "3"))
      (rule "notLeft" (formula "8"))
      (rule "methodCallParamThrow" (formula "12") (term "1"))
      (rule "tryCatchThrow" (formula "12") (term "1"))
      (rule "ifElseUnfold" (formula "12") (term "1") (inst "#boolv=x"))
      (rule "variableDeclaration" (formula "12") (term "1") (newnames "x"))
      (rule "equality_comparison_simple" (formula "12") (term "1"))
       (builtin "One Step Simplification" (formula "12"))
      (rule "replace_known_right" (formula "12") (term "0,0,1,0") (ifseqformula "9"))
       (builtin "One Step Simplification" (formula "12"))
      (rule "ifElseSplit" (formula "12"))
      (branch "if x true"
          (builtin "One Step Simplification" (formula "1"))
         (rule "closeFalse" (formula "1"))
      )
      (branch "if x false"
          (builtin "One Step Simplification" (formula "1"))
          (builtin "One Step Simplification" (formula "13"))
         (rule "true_left" (formula "1"))
         (rule "elim_double_block" (formula "12") (term "1"))
         (rule "ifElseSplit" (formula "12"))
         (branch "if exc_0 instanceof java.lang.Throwable true"
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "10")))
            (rule "true_left" (formula "1"))
            (rule "variableDeclaration" (formula "12") (term "1") (newnames "e"))
            (rule "delete_unnecessary_cast" (formula "12") (term "1"))
             (builtin "One Step Simplification" (formula "1"))
             (builtin "One Step Simplification" (formula "13"))
            (rule "true_left" (formula "1"))
            (rule "assignment" (formula "12") (term "1"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "emptyModality" (formula "12") (term "1"))
             (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "9")) (ifInst ""  (formula "9")) (ifInst ""  (formula "8")))
            (rule "Class_invariant_axiom_for_A" (formula "12") (ifseqformula "3"))
            (rule "notRight" (formula "12"))
            (rule "close" (formula "12") (ifseqformula "1"))
         )
         (branch "if exc_0 instanceof java.lang.Throwable false"
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "10")))
            (rule "closeFalse" (formula "1"))
         )
      )
   )
   (branch "Pre (g)"
       (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "1")))
      (rule "Class_invariant_axiom_for_A" (formula "7") (ifseqformula "3"))
      (rule "notRight" (formula "7"))
      (rule "close" (formula "7") (ifseqformula "1"))
   )
)
)
}
