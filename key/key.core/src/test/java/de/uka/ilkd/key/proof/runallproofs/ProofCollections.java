package de.uka.ilkd.key.proof.runallproofs;

import de.uka.ilkd.key.proof.runallproofs.proofcollection.ForkMode;
import de.uka.ilkd.key.proof.runallproofs.proofcollection.ProofCollection;
import org.key_project.util.helper.FindResources;

/**
 * This file contains factory methods for creating well-known proof collections.
 *
 * @author Alexander Weigl
 * @version 1 (8/14/20)
 */
public final class ProofCollections {
    public static ProofCollection getJavaDlProofCollection() {
        ProofCollection c = new ProofCollection();
        c.getSettings()
                .setBaseDirectory(FindResources.getExampleDirectory().getAbsolutePath())
                .setStatisticsFile("build/test-results/testRunAllProofs/runStatistics.csv")
                .setForkMode(ForkMode.PERGROUP)
                .setForkTimeout(2000)
                .setReloadEnabled(true)
                .setTempDir("runallproofs_tmp")
                .setGlobalKeYSettings("#Proof-Settings-Config-File\n" +
                        "#Mon Aug 03 16:58:18 CEST 2009\n" +
                        "[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT\n" +
                        "[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT\n" +
                        "# The 'Defaults' are ON for the following:\n" +
                        "[StrategyProperty]DEP_OPTIONS_KEY=DEP_OFF\n" +
                        "[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF\n" +
                        "[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF\n" +
                        "[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER\n" +
                        "[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF\n" +
                        "[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_SCOPE_INV_TACLET\n" +
                        "[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF\n" +
                        "[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF\n" +
                        "[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS\n" +
                        "[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED\n" +
                        "# The 'Defaults' are NONE for the following.\n" +
                        "[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS\n" +
                        "[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT\n" +
                        "[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON\n" +
                        "[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE\n" +
                        "[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF\n" +
                        "[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL\n" +
                        "[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE\n" +
                        "[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON\n" +
                        "[DecisionProcedure]Timeout=60\n" +
                        "[Strategy]Timeout=-1\n" +
                        "[Strategy]MaximumNumberOfAutomaticApplications=10000\n" +
                        "[SMTSettings]integersMaximum=2147483645\n" +
                        "[SMTSettings]integersMinimum=-2147483645\n" +
                        "[SMTSettings]invariantForall=false\n" +
                        "[SMTSettings]UseBuiltUniqueness=false\n" +
                        "[SMTSettings]explicitTypeHierarchy=false\n" +
                        "[SMTSettings]instantiateHierarchyAssumptions=true\n" +
                        "[SMTSettings]useUninterpretedMultiplication=true\n" +
                        "[SMTSettings]SelectedTaclets=\n" +
                        "[Choice]DefaultChoices=assertions-assertions:on , intRules-intRules:arithmeticSemanticsIgnoringOF , initialisation-initialisation:disableStaticInitialisation , programRules-programRules:Java , runtimeExceptions-runtimeExceptions:ban , JavaCard-JavaCard:on , Strings-Strings:on , modelFields-modelFields:showSatisfiability , bigint-bigint:on , sequences-sequences:on , reach-reach:on , integerSimplificationRules-integerSimplificationRules:full , wdOperator-wdOperator:L , wdChecks-wdChecks:off , permissions-permissions:off , moreSeqRules-moreSeqRules:off , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal:off , javaLoopTreatment-javaLoopTreatment:efficient\n" +
                        "[Strategy]ActiveStrategy=JavaCardDLStrategy\n");

        c.addGroup("newBook")
                .provable("newBook/09.list_modelfield/ArrayList.add.key")
                .provable("newBook/09.list_modelfield/ArrayList.remFirst.key")
                .provable("newBook/09.list_modelfield/ArrayList.empty.key")
                .provable("newBook/09.list_modelfield/ArrayList.size.key")
                .provable("newBook/09.list_modelfield/ArrayList.get.key");
        c.addGroup("oldBook")
                .provable("./standard_key/BookExamples/02FirstOrderLogic/Ex2.58.key")
                .provable("./standard_key/BookExamples/03DynamicLogic/Sect3.3.1.key");
        c.addGroup("comprehensions")
                .provable("heap/comprehensions/general_sum.key")
                .provable("heap/comprehensions/sum0.key")
                .provable("heap/comprehensions/sum1.key")
                .provable("heap/comprehensions/sum2.key")
                .provable("heap/comprehensions/sum3.key")
                .provable("heap/comprehensions/segsum.key")
                .provable("heap/comprehensions/bsum_negative.key")
                .provable("heap/comprehensions/bsum_neg2.key")
                .provable("heap/comprehensions/bsumSplit.key")
                .provable("heap/comprehensions/bprodSplit.key")
                .notprovable("heap/comprehensions/bsumSplitInvalid.key");
        c.addGroup("performance")
                .provable("performance-test/Disjoint(Disjoint__disjoint_08()).JML_operation_contract.0.key")
                .provable("performance-test/Disjoint(Disjoint__disjoint2_08()).JML_operation_contract.0.key")
                .provable("performance-test/AccessChain1(AccessChain1__foo_08()).JML_operation_contract.0.key")
                .provable("performance-test/AccessChain4(AccessChain4__foo_08()).JML_operation_contract.0.key")
                .provable("performance-test/Disjoint(Disjoint__xZero_08()).JML_operation_contract.0.key")
                .provable("performance-test/Dynamic(Dynamic__foo_08()).JML_operation_contract.0.key")
                .provable("performance-test/DynamicGhost(DynamicGhost__dynamicGhost_08()).JML_normal_behavior_operation_contract.0.key")
                .provable("performance-test/GhostFrame(GhostFrame__foo_08()).JML_operation_contract.0.key")
                .provable("performance-test/Modelfield(Modelfield__foo_08()).JML_operation_contract.0.key");
        c.addGroup("performancePOConstruction")
                .provable("performance-test/Test(Test__a0(int)).JML_normal_behavior_operation_contract.0.key")
                .provable("performance-test/Test(Test__a1(int)).JML_normal_behavior_operation_contract.0.key")
                .provable("performance-test/Test(Test__f1(int)).JML_normal_behavior_operation_contract.0.key");
        c.addGroup("applicationRestrictions")
                .provable("heap/polarity_tests/wellformed1.key")
                .notprovable("./heap/polarity_tests/wellformed2.key")
                .provable("heap/polarity_tests/wellformed3.key")
                .notprovable("./heap/polarity_tests/wellformed4.key")
                .provable("heap/polarity_tests/wellformed5.key")
                .notprovable("./heap/polarity_tests/wellformed6.key")
                .provable("heap/polarity_tests/wellformed7.key")
                .notprovable("./heap/polarity_tests/wellformed8.key")
                .provable("heap/polarity_tests/wellformed9.key")
                .notprovable("./heap/polarity_tests/wellformed10.key")
                .notprovable("./heap/polarity_tests/wellformed11.key");
        c.addGroup("blockContracts")
                .provable("heap/block_contracts/Simple__add.key")
                .provable("heap/block_contracts/Simple__addAbsoluteValues.key")
                .provable("heap/block_contracts/Simple__addWithJump.key")
                .provable("heap/block_contracts/Simple__addWithTwoBlockContracts.key")
                .provable("heap/block_contracts/Simple__generateByteArray.key")
                .provable("heap/block_contracts/Simple__getLength.key")
                .provable("heap/block_contracts/Simple__square.key")
                .provable("heap/block_contracts/Simple__unnecessaryBlockContract.key")
                .provable("heap/block_contracts/Simple__unnecessaryLoopInvariant.key")
                // the following test has a reload problem probably caused by the one-step-simplifier
                //.provable("("heap/block_contracts/GreatestCommonDivisor.key")
                .provable("standard_key/java_dl/jml-assert/assert.key")
                .provable("heap/block_loop_contracts/SimpleVariants/sum_onBlock_external.key")
                .provable("heap/block_loop_contracts/SimpleVariants/sum_onBlock_internal.key")
                .provable("heap/block_loop_contracts/SimpleVariants/sum_onBlock_loop.key")
                .provable("heap/block_loop_contracts/SimpleVariants/sum_onLoop_external.key")
                .provable("heap/block_loop_contracts/SimpleVariants/sum_onLoop_internal.key")
                .provable("heap/block_loop_contracts/SimpleVariants/sum_onLoop_loop.key")
                .notprovable("./heap/block_loop_contracts/Finally/block_finally.key")
                .notprovable("./heap/block_loop_contracts/Finally/loop_finally.key");//// Tests for Java Card (should also include the API, pending fix to bug //1475)

        c.addGroup("javaCard")
                .provable("heap/javacard/updateBalance0.key")
                .provable("heap/javacard/updateBalance1.key")
                .provable("heap/javacard/setArray1.key")
                .provable("heap/javacard/setArray2.key")
                //// For this only "half"of the proof is done (see bug //1475), but it makes sure that the PO with two subproofs is initialisable:
                .provable("heap/javacard/arrayFillNonAtomic.key")
                .provable("heap/coincidence_count/project.key")
                .provable("heap/verifyThis11_1_Maximum/project.key")
                .provable("heap/fm12_01_LRS/lcp.key")
                .provable("heap/SemanticSlicing/project.key")
                .provable("heap/information_flow/ArrayList_contains.key")
                .provable("heap/information_flow/ArrayList_get.key")
                .provable("heap/information_flow/ArrayList_size.key")
                .provable("heap/information_flow/UpdateAbstraction_ex7_3_secure.key")
                .provable("heap/information_flow/UpdateAbstraction_ex7_4_secure.key")
                .provable("heap/information_flow/UpdateAbstraction_ex7_5_secure.key")
                .provable("heap/information_flow/UpdateAbstraction_ex7_6_secure.key")
                .provable("heap/information_flow/UpdateAbstraction_ex9_secure.key");

        c.addGroup("list")
                .provable("heap/list/ArrayList_add.key")
                .provable("heap/list/ArrayList_ArrayList.key")
                .provable("heap/list/ArrayList_concatenate.key")
                .provable("heap/list/ArrayList_contains_dep.key")
                .provable("./heap/list/ArrayList_enlarge.key")
                .provable("./heap/list/ArrayList_footprint.key")
                .provable("./heap/list/ArrayList_get_dep.key")
                .provable("./heap/list/ArrayList_get_exceptional.key")
                .provable("./heap/list/ArrayList_get_normal.key")
                .provable("./heap/list/ArrayList_inv.key")
                .provable("./heap/list/ArrayList_iterator.key")
                .provable("./heap/list/ArrayList_size_dep.key")
                .provable("./heap/list/ArrayList_size.key")
                .provable("./heap/list/ArrayList.ArrayListIterator_ArrayListIterator.key")
                .provable("./heap/list/ArrayList.ArrayListIterator_hasNext_dep.key")
                .provable("./heap/list/ArrayList.ArrayListIterator_hasNext.key")
                .provable("./heap/list/ArrayList.ArrayListIterator_inv.key")
                .provable("./heap/list/ArrayList.ArrayListIterator_list.key")
                .provable("./heap/list/ArrayList.ArrayListIterator_next_exceptional.key")
                .provable("./heap/list/ArrayList.ArrayListIterator_next_normal.key")
                .provable("./heap/list/ArrayList.ArrayListIterator_pos.key")
                .provable("./heap/list/Client_m.key")
                .provable("./heap/list/Client_n.key")
                .provable("./heap/list/LinkedList_get_exceptional.key")
                .provable("./heap/list/LinkedList_get_normal.key")
                .provable("./heap/list/LinkedList_LinkedList.key")
                .provable("./heap/list/LinkedList_size_dep.key")
                .provable("./heap/list/LinkedList_size.key")
                .provable("./heap/list/MySet_footprint.key")
                .provable("./heap/list/MySet_MySet.key");

        c.addGroup("list_ghost")
                .provable("./heap/list_ghost/ArrayList_add.key")
                .provable("./heap/list_ghost/ArrayList_ArrayList.key")
                .provable("./heap/list_ghost/ArrayList_enlarge.key")
                .provable("./heap/list_ghost/ArrayList_get_dep.key")
                .provable("./heap/list_ghost/ArrayList_get_exceptional.key")
                .provable("./heap/list_ghost/ArrayList_get_normal.key")
                .provable("./heap/list_ghost/ArrayList_inv.key")
                .provable("./heap/list_ghost/ArrayList_size_dep.key")
                .provable("./heap/list_ghost/ArrayList_size.key");

        c.addGroup("list_recursive")
                .provable("./heap/list_recursiveSpec/ListOperationsNonNull_getNextNN_normal_behavior.key")
                .provable("./heap/list_recursiveSpec/ListOperationsNonNull_setValueAt_normal_behavior.key")
                .provable("./heap/list_recursiveSpec/ListOperationsNonNull_remove_normal_behavior.key");

        c.addGroup("list_seq")
                .provable("./heap/list_seq/SimplifiedLinkedList.remove.key")
                .provable("./heap/list_seq/ArrayList.ArrayList.key")
                .provable("./heap/list_seq/ArrayList.add.key")
                .provable("./heap/list_seq/ArrayList.contains.key")
                .provable("./heap/list_seq/ArrayList.enlarge.key")
                .provable("./heap/list_seq/ArrayList.get.key")
                .provable("./heap/list_seq/ArrayList.newArray.key")
                .provable("./heap/list_seq/ArrayList.remove.0.key")
                .provable("./heap/list_seq/ArrayList.remove.1.key");

        c.addGroup("observer")
                .provable("./heap/observer/ExampleObserver_ExampleObserver.key")
                .provable("./heap/observer/ExampleObserver_inv.key")
                .provable("./heap/observer/ExampleObserver_subject.key")
                .provable("./heap/observer/ExampleObserver_update.key")
                .provable("./heap/observer/ExampleObserver_upToDate.key")
                .provable("./heap/observer/ExampleObserver_value.key")
                .provable("./heap/observer/ExampleSubject_addObserver.key")
                .provable("./heap/observer/ExampleSubject_change.key")
                .provable("./heap/observer/ExampleSubject_ExampleSubject.key")
                .provable("./heap/observer/ExampleSubject_footprint.key")
                .provable("./heap/observer/ExampleSubject_inv.key")
                .provable("./heap/observer/ExampleSubject_notifyObservers.key")
                .provable("./heap/observer/ExampleSubject_value_dep.key")
                .provable("./heap/observer/ExampleSubject_value.key");

        c.addGroup("removeDups")
                .provable("./heap/removeDups/arrayPart.key")
                .provable("./heap/removeDups/contains.key")
                .provable("./heap/removeDups/removeDup.key").provable("./heap/saddleback_search/Saddleback_search.key");

        c.addGroup("quicksort")
                .localSettings("[Choice]DefaultChoices=moreSeqRules-moreSeqRules:on")
                .directory("heap/quicksort/")
                .provable("toplevel.key")
                .provable("sort.key")
                .provable("split.key");

        /*
         * These are simpler regression tests that show a certain feature works
         * fine.
         */
        c.addGroup("simpleTests")
                .provable("./heap/simple/anonymise_datagroup.key")
                .provable("./heap/simple/array_creation.key")
                .provable("./heap/simple/arrays_with_disjoint_sorts.key")
                .provable("./heap/simple/arrays.key")
                .provable("./heap/simple/attributes.key")
                .provable("./heap/simple/constructor_contracts.key")
                .provable("./heap/simple/dependencies.key")
                .provable("./heap/simple/dependency_contracts.key")
                .provable("./heap/simple/invariant_preservation.key")
                .provable("./heap/simple/locsets.key")
                .provable("./heap/simple/loop1.key")
                .provable("./heap/simple/loop2.key")
                .provable("./heap/simple/modifies_datagroup.key")
                .provable("./heap/simple/modifies.key")
                .provable("./heap/simple/object_creation.key")
                .provable("./heap/simple/operation_contracts.key")
                .provable("./heap/simple/select_store.key")
                .provable("./heap/simple/selection_sort.key")
                .provable("./heap/simple/seq.key")
                .provable("./heap/simple/oldForParams.key")
                .provable("./heap/simple/parse_lmtd.key")
                .provable("./heap/strictly_pure/strictlyPureMethod.key")
                .provable("./heap/strictly_pure/useStrictlyPureMethod.key")
                .provable("./heap/Wellfounded/ackermann.key")
                .provable("./standard_key/unicode_test.key")
                .provable("./heap/strictlyModular/mayExpand.key")
                .notprovable("./heap/strictlyModular/modularOnly.key");
        c.addGroup("SmansEtAl")
                .provable("./heap/SmansEtAl/ArrayList_add.key")
                .provable("./heap/SmansEtAl/ArrayList_ArrayList.key")
                .provable("./heap/SmansEtAl/ArrayList_footprint.key")
                .provable("./heap/SmansEtAl/ArrayList_get_dep.key")
                .provable("./heap/SmansEtAl/ArrayList_get.key")
                .provable("./heap/SmansEtAl/ArrayList_inv.key")
                .provable("./heap/SmansEtAl/ArrayList_size_dep.key")
                .provable("./heap/SmansEtAl/ArrayList_size.key")
                .provable("./heap/SmansEtAl/Cell_Cell.key")
                .provable("./heap/SmansEtAl/Cell_footprint.key")
                .provable("./heap/SmansEtAl/Cell_getX_dep.key")
                .provable("./heap/SmansEtAl/Cell_getX.key")
                .provable("./heap/SmansEtAl/Cell_inv.key")
                .provable("./heap/SmansEtAl/Cell_setX.key")
                .provable("./heap/SmansEtAl/CellClient_m.key")
                .provable("./heap/SmansEtAl/Iterator_footprint.key")
                .provable("./heap/SmansEtAl/Iterator_hasNext_dep.key")
                .provable("./heap/SmansEtAl/Iterator_hasNext.key")
                .provable("./heap/SmansEtAl/Iterator_inv.key")
                .provable("./heap/SmansEtAl/Iterator_Iterator.key")
                .provable("./heap/SmansEtAl/Iterator_list_dep.key")
                .provable("./heap/SmansEtAl/Iterator_list.key")
                .provable("./heap/SmansEtAl/Iterator_next.key")
                .provable("./heap/SmansEtAl/Stack_footprint.key")
                .provable("./heap/SmansEtAl/Stack_inv.key")
                .provable("./heap/SmansEtAl/Stack_push.key")
                .provable("./heap/SmansEtAl/Stack_size.key")
                .provable("./heap/SmansEtAl/Stack_Stack.key")
                .provable("./heap/SmansEtAl/Stack_switchContents.key");
        c.addGroup("VACID0")
                .provable("./heap/vacid0_01_SparseArray/Harness_sparseArrayTestHarness1.key")
                .provable("./heap/vacid0_01_SparseArray/Harness_sparseArrayTestHarness2.key")
                .provable("./heap/vacid0_01_SparseArray/MemoryAllocator_alloc_unsigned.key")
                .provable("./heap/vacid0_01_SparseArray/MemoryAllocator_alloc.key")
                .provable("./heap/vacid0_01_SparseArray/SparseArray_get_dep.key")
                .provable("./heap/vacid0_01_SparseArray/SparseArray_get.key")
                .provable("./heap/vacid0_01_SparseArray/SparseArray_inv.key")
                .provable("./heap/vacid0_01_SparseArray/SparseArray_SparseArray.key");
        c.addGroup("VSTTE10")
                .provable("./heap/vstte10_01_SumAndMax/SumAndMax_sumAndMax.key")
                .provable("./heap/vstte10_03_LinkedList/Node_cons.key")
                .provable("./heap/vstte10_03_LinkedList/Node_inv.key")
                .provable("./heap/vstte10_03_LinkedList/Node_search.key")
                .provable("./heap/vstte10_04_Queens/Queens_isConsistent.key")
                .provable("./heap/vstte10_04_Queens/Queens_nQueens.key")
                .provable("./heap/vstte10_05_Queue/AmortizedQueue_AmortizedQueue.key")
                .provable("./heap/vstte10_05_Queue/AmortizedQueue_front.key")
                .provable("./heap/vstte10_05_Queue/LinkedList_concat.key")
                .provable("./heap/vstte10_05_Queue/LinkedList_cons.key")
                .provable("./heap/vstte10_05_Queue/LinkedList_head.key")
                .provable("./heap/vstte10_05_Queue/LinkedList_inv.key")
                .provable("./heap/vstte10_05_Queue/LinkedList_length.key")
                .provable("./heap/vstte10_05_Queue/LinkedList_LinkedList1.key")
                .provable("./heap/vstte10_05_Queue/LinkedList_LinkedList2.key")
                .provable("./heap/vstte10_05_Queue/LinkedList_LinkedList3.key")
                .provable("./heap/vstte10_05_Queue/LinkedList_reverse.key")
                .provable("./heap/vstte10_05_Queue/LinkedList_tail.key");
        c.addGroup("WeideEtAl")
                .provable("./heap/WeideEtAl_01_AddAndMultiply/AddAndMultiply_add.key")
                .provable("./heap/WeideEtAl_01_AddAndMultiply/AddAndMultiply_mul.key")
                .provable("./heap/WeideEtAl_02_BinarySearch/BinarySearch_search.key");

        // this file contains Unicode symbols for logic operators
        c.addGroup("arithmetic")
                .provable("./standard_key/arith/binomial1.key")
                .provable("./standard_key/arith/binomial2.key")
                .provable("./standard_key/arith/check_jdiv.key")
                .provable("./standard_key/arith/check_jdiv_concrete.key")
                .provable("./standard_key/arith/check_jdiv_instantiated.key")
                .provable("./standard_key/arith/check_jmod.key")
                .provable("./standard_key/arith/complexExpressions.key")
                .provable("./standard_key/arith/compound_unaryMinus.key")
                .provable("./standard_key/arith/computation.key")
                .provable("./standard_key/arith/cubicSum.key")
                .provable("./standard_key/arith/divByZero.key")
                .provable("./standard_key/arith/divisionAssoc.key")
                .provable("./standard_key/arith/divisionBy2.key")
                .provable("./standard_key/arith/euclidean/gcdHelp-post.key")
                .provable("./standard_key/arith/gemplusDecimal/add.key")
                .provable("./standard_key/arith/jdivevenodd.key")
                .provable("./standard_key/arith/median.key")
                .provable("./standard_key/arith/mod1.key")
                .provable("./standard_key/arith/mod2.key")
                .provable("./standard_key/arith/mod7.key")
                .provable("./standard_key/arith/overflow_hija.key")
                .provable("./standard_key/arith/poly_division0.key")
                .provable("./standard_key/arith/poly_division1.key")
                .provable("./standard_key/inEqSimp/division.key")
                .provable("./standard_key/inEqSimp/inequations0.key")
                .provable("./standard_key/inEqSimp/inequations1.key")
                .provable("./standard_key/inEqSimp/inequations2.key")
                .provable("./standard_key/inEqSimp/linApprox.key")
                .provable("./standard_key/inEqSimp/nonLinInEqExample0.key")
                .provable("./standard_key/inEqSimp/nonLinInEqExample2.key")
                .provable("./standard_key/inEqSimp/nonLinInEqExample3.key")
                .provable("./standard_key/inEqSimp/nonLinInEqExample4.key")
                .provable("./standard_key/inEqSimp/quadraticInEq.key")
                .provable("./standard_key/inEqSimp/quadraticInEq10.key")
                .provable("./standard_key/inEqSimp/quadraticInEq13.key")
                .provable("./standard_key/inEqSimp/quadraticInEq14.key")
                .provable("./standard_key/inEqSimp/quadraticInEq2.key")
                .provable("./standard_key/inEqSimp/quadraticInEq3.key")
                .provable("./standard_key/inEqSimp/quadraticInEq4.key")
                .provable("./standard_key/inEqSimp/quadraticInEq5.key")
                .provable("./standard_key/inEqSimp/quadraticInEq6.key")
                .provable("./standard_key/inEqSimp/quadraticInEq7.key")
                .provable("./standard_key/inEqSimp/quadraticInEq8.key")
                .provable("./standard_key/inEqSimp/simplify0.key")
                .provable("./standard_key/inEqSimp/simplify1.key")
                .provable("./standard_key/inEqSimp/simplify2.key")
                .provable("./standard_key/inEqSimp/simplify3.key")
                .provable("./standard_key/inEqSimp/simplify4.key")
                .provable("./standard_key/inEqSimp/simplify5.key")
                .provable("./standard_key/inEqSimp/subsumptionExample.key")
                .provable("./standard_key/polySimp/simplify0.key")
                .provable("./standard_key/polySimp/simplify1.key")
                .provable("./standard_key/polySimp/simplify10.key")
                .provable("./standard_key/polySimp/simplify11.key")
                .provable("./standard_key/polySimp/simplify12.key")
                .provable("./standard_key/polySimp/simplify13.key")
                .provable("./standard_key/polySimp/simplify14.key")
                .provable("./standard_key/polySimp/simplify15.key")
                .provable("./standard_key/polySimp/simplify16.key")
                .provable("./standard_key/polySimp/simplify17.key")
                .provable("./standard_key/polySimp/simplify18.key")
                .provable("./standard_key/polySimp/simplify19.key")
                .provable("./standard_key/polySimp/simplify2.key")
                .provable("./standard_key/polySimp/simplify20.key")
                .provable("./standard_key/polySimp/simplify21.key")
                .provable("./standard_key/polySimp/simplify22.key")
                .provable("./standard_key/polySimp/simplify23.key")
                .provable("./standard_key/polySimp/simplify24.key")
                .provable("./standard_key/polySimp/simplify25.key")
                .provable("./standard_key/polySimp/simplify3.key")
                .provable("./standard_key/polySimp/simplify4.key")
                .provable("./standard_key/polySimp/simplify5.key")
                .provable("./standard_key/polySimp/simplify6.key")
                .provable("./standard_key/polySimp/simplify7.key")
                .provable("./standard_key/polySimp/simplify8.key")
                .provable("./standard_key/polySimp/simplify9.key");

        c.addGroup("arrays")
                .provable("./standard_key/arrays/arrayStoreException/array2DimPrim.key")
                .provable("./standard_key/arrays/arrayStoreException/arrayStoreKnownDynType.key")
                .provable("./standard_key/arrays/arrayStoreException/reverseArray.key")
                .provable("./standard_key/arrays/arrayStoreException/throwArrayStoreException.key")
                .provable("./standard_key/arrays/creation/arrayCreation1.key")
                .notprovable("./standard_key/arrays/arrayStoreException/array2Dim.key")
                .notprovable("./standard_key/arrays/arrayStoreException/array2DimClose.key")
                .notprovable("./standard_key/arrays/arrayStoreException/throwASEForPrim.key");
        c.addGroup("javadl")
                .provable("./standard_key/instanceCreation/instanceCreation1.key")
                .provable("./standard_key/instanceCreation/instanceCreation2.key")
                .provable("./standard_key/instanceCreation/interfacesAndAbstractClassesHaveNoInstances.key")
                .provable("./standard_key/instanceCreation/successiveCreatedObjectsAreDistinct.key")
                .provable("./standard_key/instanceCreation/testOverloadingConstructors.key")
                .provable("./standard_key/java_dl/SimpleAttributes.key")
                .provable("./standard_key/java_dl/arrayMax.key")
                .provable("./standard_key/java_dl/arrayUpdateSimp.key")
                .provable("./standard_key/java_dl/attributes.key")
                .provable("./standard_key/java_dl/break.key")
                .provable("./standard_key/java_dl/char.key")
                .provable("./standard_key/java_dl/compileTimeConstants.key")
                .provable("./standard_key/java_dl/constructorException/test.key")
                .notprovable("./standard_key/java_dl/constructorException/regressionTestBug1333.key")
                .provable("./standard_key/java_dl/continue1.key")
                .provable("./standard_key/java_dl/continue2.key")
                .provable("./standard_key/java_dl/complexAssignment.key")
                .provable("./standard_key/java_dl/danglingElseSolution1.key")
                .provable("./standard_key/java_dl/danglingElseSolution2.key")
                .provable("./standard_key/java_dl/deepNonNull/deepNonNull0.key")
                .provable("./standard_key/java_dl/deepNonNull/deepNonNull1.key")
                .notprovable("./standard_key/java_dl/deepNonNull/deepNonNull2.key")
                .provable("./standard_key/java_dl/deepNonNull/deepNonNull3.key")
                .provable("./standard_key/java_dl/exceptions.key")
                .provable("./standard_key/java_dl/exceptions1.key")
                .provable("./standard_key/java_dl/exceptions2.key")
                .provable("./standard_key/java_dl/exceptions3.key")
                .provable("./standard_key/java_dl/exchange.key")
                .provable("./standard_key/java_dl/if.key")
                .provable("./standard_key/java_dl/incrementcounter.key")
                .notprovable("./standard_key/java_dl/danglingElse.key")
                // commented out - in the current handling of this references (from branch mostThisRef)
                // inner classes do not work. According to Richard, there is a bug in handling inner classes
                // that needs a non-trivial fix.
                // .provable(": ./standard_key/java_dl/innerClasses/inner.key")
                .provable("./standard_key/java_dl/iteratedAssignment.key")
                .notprovable("./standard_key/java_dl/assert/assert1.key")
                .provable("./standard_key/java_dl/assert/assert2.key")
                .notprovable("./standard_key/java_dl/assert/assert3.key")
                .provable("./standard_key/java_dl/java5/vararg.key")
                .provable("./standard_key/java_dl/java5/for_Array.key")
                .provable("./standard_key/java_dl/java5/for_Iterable.key")
                .provable("./standard_key/java_dl/java5/for_ReferenceArray.key")
                .provable("./standard_key/java_dl/jml-bigint/cast.key")
                .provable("./standard_key/java_dl/jml-free/loopInvFree.key")
                .provable("./standard_key/java_dl/jml-free/ensuresFree.key")
                // proof gets very long
                // requires further investigations
                .provable("./standard_key/java_dl/jml-information-flow.key")
                .notprovable("./standard_key/java_dl/jml-min/min-unprovable1.key")
                .notprovable("./standard_key/java_dl/jml-min/min-unprovable2.key")
                .provable("./standard_key/java_dl/methodCall.key")
                .provable("./standard_key/java_dl/methodCall1.key")
                .provable("./standard_key/java_dl/methodCall1box.key")
                // Commented out as this can not be proved modularly sound (See !183 which is related)
                //  .provable("./standard_key/java_dl/methodCall2.key")
                .provable("./standard_key/java_dl/methodCall3.key")
                .provable("./standard_key/java_dl/polishFlagSort.key")
                .provable("./standard_key/java_dl/postConditionTaclets1.key")
                .provable("./standard_key/java_dl/postConditionTaclets2.key")
                .provable("./standard_key/java_dl/quantifiedQuery.key")
                .provable("./standard_key/java_dl/recursion/triangular.key")
                .provable("./standard_key/java_dl/reverseArray.key")
                .provable("./standard_key/java_dl/reverseArray2.key")
                .provable("./standard_key/java_dl/simpleAssignment.key")
                .provable("./standard_key/java_dl/simpleAssignment2.key")
                .provable("./standard_key/java_dl/splittingWithQueries.key")
                .provable("./standard_key/java_dl/strassen/strassen.key")
                .provable("./standard_key/java_dl/symmArray.key")
                .provable("./standard_key/java_dl/testcontext.key")
                .provable("./standard_key/staticInitialisation/cascadeStaticInitialisation.key")
                .provable("./standard_key/staticInitialisation/erroneousClassImpliesErroneousSubclass.key")
                .provable("./standard_key/staticInitialisation/initializedSubclassImpliesInitializedSuperclass.key")
                .provable("./standard_key/staticInitialisation/localDeclared.key")
                .provable("./standard_key/staticInitialisation/localDeclaredMethod.key")
                .provable("./standard_key/staticInitialisation/objectOfErroneousClass.key")
                .provable("./standard_key/staticInitialisation/staticInitialisersAreNonSimple.key")
                .provable("./standard_key/types/disjoint.key")
                .provable("../../key.core/src/test/resources/testcase/classpath/classpath.key")
                .notprovable("./heap/inconsistent_represents/MyClass_m.key")
                .notprovable("./heap/inconsistent_represents/MyClass_n.key");
        c.addGroup("FOL")
                .provable("./standard_key/pred_log/count.key")
                .provable("./standard_key/pred_log/count2.key")
                .provable("./standard_key/pred_log/count3.key")
                .provable("./standard_key/pred_log/equalities.key")
                .provable("./standard_key/pred_log/equalities2.key")
                .provable("./standard_key/pred_log/equalities3.key")
                // cannot be proven automatically (see bug //1248)
                // .provable(": ./standard_key/pred_log/exist1.key")
                .provable("./standard_key/pred_log/functions.key")
                .provable("./standard_key/pred_log/mv1.key")
                .provable("./standard_key/pred_log/mv2.key")
                .provable("./standard_key/pred_log/quantifiers.key")
                .provable("./standard_key/pred_log/simpleEps.key")
                .provable("./standard_key/pred_log/steam1.key")
                .provable("./standard_key/pred_log/tptp/PUZ/PUZ001p1.key")
                .provable("./standard_key/pred_log/tptp/PUZ/PUZ001p1-eq.key")
                .provable("./standard_key/pred_log/tptp/PUZ/PUZ031p1.key")
                .provable("./standard_key/pred_log/tptp/SET/SET027p3.key")
                .provable("./standard_key/pred_log/tptp/SET/SET043p1.key")
                // cannot be proven automatically (see bug //1248)
                // .provable(": ./standard_key/pred_log/tptp/SET/SET044p1.key")
                .provable("./standard_key/pred_log/tptp/SET/SET045p1.key")
                .provable("./standard_key/pred_log/tptp/SET/SET062p3.key")
                .provable("./standard_key/pred_log/tptp/SET/SET063p3.key")
                // cannot be proven automatically (see bug //1248)
                // .provable(": ./standard_key/pred_log/tptp/SYN/SYN002m1.007.008.key")
                .provable("./standard_key/pred_log/tptp/SYN/SYN036p2.key")
                // cannot be proven automatically (timeout, possibly due to bug //1248)
                // .provable(": ./standard_key/pred_log/tptp/SYN/SYN548p1.key")
                .provable("./standard_key/pred_log/tptp/SYN/SYN550p1.key")
                .notprovable("./standard_key/prop_log/reallySimple.key")
                .notprovable("./standard_key/pred_log/sameName1.key")
                .provable("./standard_key/pred_log/jbyteIfEx.key")
                .provable("./standard_key/prop_log/allClausesLength4.key")
                .provable("./standard_key/prop_log/allClausesLength5.key")
                .provable("./standard_key/prop_log/doubleNeg.key")
                .provable("./standard_key/prop_log/liarsville.key")
                .provable("./standard_key/prop_log/simplest.key")
                .provable("./standard_key/prop_log/contraposition.key")
                .provable("./standard_key/quantifiers/elimination0.key")
                .provable("./standard_key/quantifiers/heuristic_PUZ001p1-eq.key")
                .provable("./standard_key/quantifiers/heuristic_PUZ001p1.key")
                .provable("./standard_key/quantifiers/heuristic_PUZ031p1.key")
                .provable("./standard_key/quantifiers/heuristic_SYN036p2.key")
                .provable("./standard_key/quantifiers/injectivity.key")
                .provable("./standard_key/quantifiers/normalisation0.key")
                .provable("./standard_key/quantifiers/normalisation1.key")
                .provable("./standard_key/quantifiers/normalisation2.key")
                .provable("./standard_key/quantifiers/normalisation3.key")
                .provable("./standard_key/quantifiers/normalisation4.key")
                .provable("./standard_key/quantifiers/normalisation5.key")
                .provable("./standard_key/quantifiers/normalisation6.key")
                .provable("./standard_key/quantifiers/normalisation7.key")
                .provable("./standard_key/quantifiers/normalisation8.key")
                .provable("./standard_key/quantifiers/normalisation9.key")
                .provable("./standard_key/quantifiers/normalisation10.key")
                //removed as long as we do not have a rule safely removing identical updates
                //.provable(": ./standard_key/quantifiers/normalisation11.key")
                .provable("./standard_key/quantifiers/normalisation12.key")
                .provable("./standard_key/quantifiers/normalisation13.key")
                .provable("./standard_key/quantifiers/triggers0.key");
        c.addGroup("strings")
                .provable("./standard_key/strings/charAt0.key")
                .provable("./standard_key/strings/charAt1.key")
                .provable("./standard_key/strings/concat1.key")
                .provable("./standard_key/strings/concat2.key")
                .provable("./standard_key/strings/deriveLength1.key")
                .provable("./standard_key/strings/emptyStringLengthZero.key")
                .provable("./standard_key/strings/implicitBooleanStringConversion.key")
                .provable("./standard_key/strings/implicitBooleanStringConversion2.key")
                .provable("./standard_key/strings/implicitIntStringConversion.key")
                .provable("./standard_key/strings/implicitNullStringConversion.key")
                .provable("./standard_key/strings/implicitNullStringConversion2.key")
                .provable("./standard_key/strings/implicitObjectStringConversion.key")
                .provable("./standard_key/strings/literalEquality.key")
                .provable("./standard_key/strings/replace0.key")
                .provable("./standard_key/strings/replace1.key")
                .provable("./standard_key/strings/simpleAssignment.key")
                .provable("./standard_key/strings/simpleLengthComp.key")
                .provable("./standard_key/strings/stringCompileTimeConstant1.key")
                .provable("./standard_key/strings/stringCompileTimeConstant2.key")
                .provable("./standard_key/strings/stringEquality1.key")
                .provable("./standard_key/strings/stringEquality2.key")
                .provable("./standard_key/strings/substring0.key")
                .provable("./standard_key/strings/substring1.key")
                .provable("./standard_key/strings/substring2.key")
                .provable("./standard_key/strings/substring3.key")
                .provable("./standard_key/strings/substring4.key")
                .provable("./standard_key/strings/substring5.key");
        c.addGroup("simple_info_flow")
                .notprovable("./heap/information_flow/UpdateAbstraction_ex7_1_insecure.key")
                .notprovable("./heap/information_flow/UpdateAbstraction_ex7_2_insecure.key");
        // Model methods tests:

        // (Note: some of the problems are trivial, but they should be kept
        // here as these problems provide the only test base for model methods)
        c.addGroup("modelMethods")
                .provable("./heap/model_methods/Cell_footprint_acc.key")
                .provable("./heap/model_methods/Cell_footprint.key")
                .provable("./heap/model_methods/Cell_get_acc.key")
                .provable("./heap/model_methods/Cell_get.key")
                .provable("./heap/model_methods/Cell_post_set.key")
                .provable("./heap/model_methods/Cell_set.key")
                .provable("./heap/model_methods/CellTest_callSet.key")
                .provable("./heap/model_methods/CellTest_test2.key")
                .provable("./heap/model_methods/CellTest_test.key")
                .provable("./heap/model_methods/Coll1_add.key")
                .provable("./heap/model_methods/Coll1_Coll1_add_pre.key")
                .provable("./heap/model_methods/Coll1_Coll_add_pre.key")
                .provable("./heap/model_methods/Coll2_add.key")
                .provable("./heap/model_methods/Coll2_Coll2_add_pre.key")
                .provable("./heap/model_methods/Coll2_Coll_add_pre.key")
                .provable("./heap/model_methods/Coll_add.key")
                .provable("./heap/model_methods/Coll_add_pre.key")
                .provable("./heap/model_methods/Indirect_callAdd.key")
                .provable("./heap/model_methods/Indirect_test.key")
                .provable("./heap/model_methods/Recell_Cell_footprint.key")
                .provable("./heap/model_methods/Recell_Cell_post_set.key")
                .provable("./heap/model_methods/Recell_footprint_acc.key")
                .provable("./heap/model_methods/Recell_get_acc.key")
                .provable("./heap/model_methods/Recell_get.key")
                .provable("./heap/model_methods/Recell_Recell_footprint.key")
                .provable("./heap/model_methods/Recell_Recell_post_set.key")
                .provable("./heap/model_methods/Recell_set.key")
                .provable("./heap/model_methods/Recell_undo.key");
// Well-Definedness check problems:
//  Needs to be commented out for now as loading different taclet options does currently not work
//c.addGroup("wdChecks")
//   .provable("./heap/vstte10_01_SumAndMax/SumAndMax_sumAndMaxWD.key")
//   .provable("./heap/vstte10_01_SumAndMax/SumAndMax_sumAndMaxWithWDLoop.key")
//   .provable("./heap/vstte10_03_LinkedList/Node_consWD.key")
//   .provable("./heap/vstte10_03_LinkedList/Node_invWD.key")
//   .provable("./heap/vstte10_03_LinkedList/Node_searchWD.key")
//   .notprovable("./firstTouch/05-ReverseArray/reverse2WD.key")
//   .provable("./firstTouch/05-ReverseArray/reverse2WD_Y.key")
//   .notprovable("./firstTouch/06-BinarySearch/searchWD.key")
//   .notprovable("./firstTouch/07-Cell/CellClient_mWD.key")
//   .provable("./firstTouch/07-Cell/Cell_CellWD.key")
//   .provable("./firstTouch/07-Cell/Cell_getXWD.key")
//   .provable("./firstTouch/07-Cell/Cell_setXWD.key")
//   .provable("./firstTouch/08-Java5/For_infiniteLoopWD.key")
//   .provable("./firstTouch/08-Java5/For_infiniteLoopWithWDLoop.key")
//   .provable("./firstTouch/08-Java5/For_invariantWD.key")
//   .provable("./firstTouch/08-Java5/For_sumWD.key")
//   .notprovable("./firstTouch/08-Java5/For_sumWithWDLoop.key")
//   .provable("./firstTouch/09-Quicktour/CardException_getCauseWD.key")
//   .provable("./firstTouch/09-Quicktour/CardException_getMessageWD.key")
//   .provable("./firstTouch/09-Quicktour/CardException_initCauseWD.key")
//   .provable("./firstTouch/09-Quicktour/LogFile_LogFileWD.key")
//   .provable("./firstTouch/09-Quicktour/LogFile_LogFileWithWDLoop.key")
//   .provable("./firstTouch/09-Quicktour/LogFile_addRecordWD.key")
//   .provable("./firstTouch/09-Quicktour/LogFile_getMaximumRecordWD.key")
//   .provable("./firstTouch/09-Quicktour/LogFile_getMaximumRecordWithWDLoop.key")
//   .provable("./firstTouch/09-Quicktour/LogFile_invariantWD.key")
//   .provable("./firstTouch/09-Quicktour/LogRecord_getBalanceWD.key")
//   .provable("./firstTouch/09-Quicktour/LogRecord_getTransactionIdWD.key")
//   .provable("./firstTouch/09-Quicktour/LogRecord_invariantWD.key")
//   .provable("./firstTouch/09-Quicktour/LogRecord_setRecordWD.key")
//   .provable("./firstTouch/09-Quicktour/PayCard_PayCardWD.key")
//   .provable("./firstTouch/09-Quicktour/PayCard_PayCardintWD.key")
//   .provable("./firstTouch/09-Quicktour/PayCard__chargeExcWD.key")
//   .provable("./firstTouch/09-Quicktour/PayCard_chargeAndRecordWD.key")
//   .provable("./firstTouch/09-Quicktour/PayCard_chargeWD.0.key")
//   .provable("./firstTouch/09-Quicktour/PayCard_chargeWD.1.key")
//   .provable("./firstTouch/09-Quicktour/PayCard_createJuniorCardWD.key")
//   .provable("./firstTouch/09-Quicktour/PayCard_invariantWD.key")
//   .provable("./firstTouch/09-Quicktour/PayCard_isValidWD.key")
//   .provable("./firstTouch/10-SITA/SITA3_commonEntryWD.key")
//   .provable("./firstTouch/10-SITA/SITA3_commonEntryWithWDLoop.key")
//   .provable("./firstTouch/10-SITA/SITA3_invariantWD.key")
//   .provable("./firstTouch/10-SITA/SITA3_rearrangeWD.key")
//   .provable("./firstTouch/10-SITA/SITA3_rearrangeWithWDLoop.key")
//   .provable("./firstTouch/10-SITA/SITA3_swapWD.key")
//   .notprovable("./heap/block_contracts/GreatestCommonDivisor_ofWithWD.key")
//   .notprovable("./heap/fm12_01_LRS/LCP_lcpWD.key")
//   .notprovable("./heap/fm12_01_LRS/LRS_doLRSWD.key")
//   .notprovable("./heap/fm12_01_LRS/SuffixArray_invariantWD.key")
//   .notprovable("./heap/fm12_02_PrefixSum/PrefixSumRec_minWD.key")
//   .notprovable("./heap/list_recursiveSpec/ListOperationsNonNull_getNextNNWD.key")
//   .notprovable("./heap/list_seq/ArrayList_newArrayWD.key")
//   .provable("./heap/list_seq/ArrayList_newArrayWD_Y.key")
//   .notprovable("./heap/list_seq/SimplifiedLinkedList_getNextWD.key")
//   .notprovable("./heap/list_seq/SimplifiedLinkedList_invariantWD.key")
//   .notprovable("./heap/list_seq/TestLists_appendWD.key")
//   .notprovable("./heap/observer/ExampleSubject_valueWD.key")
//   .notprovable("./heap/saddleback_search/Saddleback_searchWD.key")
//   .provable("./heap/saddleback_search/Saddleback_searchWithWDLoop.key")
//   .notprovable("./heap/vacid0_01_SparseArray/Harness_sparseArrayTestHarness1WD.key")
//   .notprovable("./heap/vstte10_04_Queens/Queens_nQueensWD.key")
//   .notprovable("./heap/vstte10_04_Queens/Queens_searchWD.key")
//   .notprovable("./heap/vstte10_05_Queue/LinkedList_tailWD.key")

        c.addGroup("permissionHeap")
                .provable("./heap/permissions/permissions_method0.key")
                .provable("./heap/permissions/permissions_method1.key")
                .provable("./heap/permissions/permissions_method3.key")
                .provable("./heap/permissions/permissions_setAB.key")
                .provable("./heap/permissions/permissionProperties.key").provable("./heap/permissions/threads/AFilter_AFilter.key")
                .provable("./heap/permissions/threads/AFilter_initPost_accessible.key")
                .provable("./heap/permissions/threads/AFilter_inv_accessible1.key")
                .provable("./heap/permissions/threads/AFilter_inv_accessible2.key")
                .provable("./heap/permissions/threads/AFilter_joinTransfer_accessible.key")
                .provable("./heap/permissions/threads/AFilter_joinTransfer_contract.key")
                .provable("./heap/permissions/threads/AFilter_postJoin_accessible.key")
                .provable("./heap/permissions/threads/AFilter_preStart_accessible.key")
                .provable("./heap/permissions/threads/AFilter_startTransfer_accessible.key")
                .provable("./heap/permissions/threads/AFilter_startTransfer_contract.key")
                .provable("./heap/permissions/threads/AFilter_stateInv_accessible.key")
                .provable("./heap/permissions/threads/AFilter_staticPermissions_accessible.key")
                .provable("./heap/permissions/threads/AFilter_workingPermissions_accessible.key")
                .provable("./heap/permissions/threads/BFilter_BFilter.key")
                .provable("./heap/permissions/threads/BFilter_initPost_accessible.key")
                .provable("./heap/permissions/threads/BFilter_inv_accessible1.key")
                .provable("./heap/permissions/threads/BFilter_inv_accessible2.key")
                .provable("./heap/permissions/threads/BFilter_joinTransfer_accessible.key")
                .provable("./heap/permissions/threads/BFilter_joinTransfer_contract.key")
                .provable("./heap/permissions/threads/BFilter_postJoin_accessible.key")
                .provable("./heap/permissions/threads/BFilter_preStart_accessible.key")
                .provable("./heap/permissions/threads/BFilter_startTransfer_accessible.key")
                .provable("./heap/permissions/threads/BFilter_startTransfer_contract.key")
                .provable("./heap/permissions/threads/BFilter_stateInv_accessible.key")
                .provable("./heap/permissions/threads/BFilter_staticPermissions_accessible.key")
                .provable("./heap/permissions/threads/BFilter_workingPermissions_accessible.key")
                .provable("./heap/permissions/threads/Fib_Fib.key")
                .provable("./heap/permissions/threads/Fib_initPost_accessible.key")
                .provable("./heap/permissions/threads/Fib_inv1_accessible.key")
                .provable("./heap/permissions/threads/Fib_inv2_accessible.key")
                .provable("./heap/permissions/threads/Fib_joinTransfer_accessible.key")
                .provable("./heap/permissions/threads/Fib_joinTransfer_contract.key")
                .provable("./heap/permissions/threads/Fib_postJoin_accessible.key")
                .provable("./heap/permissions/threads/Fib_preStart_accessible.key")
                .provable("./heap/permissions/threads/Fib_startTransfer_accessible.key")
                .provable("./heap/permissions/threads/Fib_startTransfer_contract.key")
                .provable("./heap/permissions/threads/Fib_workingPermissions_accessible.key")
                .provable("./heap/permissions/threads/Plotter_initPost_accessible.key")
                .provable("./heap/permissions/threads/Plotter_inv_accessible1.key")
                .provable("./heap/permissions/threads/Plotter_inv_accessible2.key")
                .provable("./heap/permissions/threads/Plotter_joinTransfer_accessible.key")
                .provable("./heap/permissions/threads/Plotter_joinTransfer_contract.key")
                .provable("./heap/permissions/threads/Plotter_Plotter.key")
                .provable("./heap/permissions/threads/Plotter_postJoin_accessible.key")
                .provable("./heap/permissions/threads/Plotter_preStart_accessible.key")
                .provable("./heap/permissions/threads/Plotter_startTransfer_accessible.key")
                .provable("./heap/permissions/threads/Plotter_stateInv_accessible.key")
                .provable("./heap/permissions/threads/Plotter_workingPermissions_accessible.key")
                .provable("./heap/permissions/threads/Sampler_initPost_accessible.key")
                .provable("./heap/permissions/threads/Sampler_inv_accessible1.key")
                .provable("./heap/permissions/threads/Sampler_inv_accessible2.key")
                .provable("./heap/permissions/threads/Sampler_joinTransfer_accessible.key")
                .provable("./heap/permissions/threads/Sampler_joinTransfer_contract.key")
                .provable("./heap/permissions/threads/Sampler_postJoin_accessible.key")
                .provable("./heap/permissions/threads/Sampler_preStart_accessible.key")
                .provable("./heap/permissions/threads/Sampler_run.key")
                .provable("./heap/permissions/threads/Sampler_Sampler.key")
                .provable("./heap/permissions/threads/Sampler_startTransfer_accessible.key")
                .provable("./heap/permissions/threads/Sampler_startTransfer_contract.key")
                .provable("./heap/permissions/threads/Sampler_stateInv_accessible.key")
                .provable("./heap/permissions/threads/Sampler_staticPermissions_accessible.key")
                .provable("./heap/permissions/threads/Sampler_workingPermissions_accessible.key")// Müller et al example
                .provable("./heap/permissions/mulleretal/ReadWrite_doRead_contract.key")
                .provable("./heap/permissions/mulleretal/ReadWrite_doWrite_contract.key")
                .provable("./heap/permissions/mulleretal/ReadWrite_read_contract.key")
                .provable("./heap/permissions/mulleretal/ReadWrite_write_contract.key")
                .provable("./heap/permissions/mulleretal/ReadWrite_inv1_accessible.key")
                .provable("./heap/permissions/mulleretal/ReadWrite_inv2_accessible.key")// The LockSpec example (permissions & model methods)
                .provable("./heap/permissions/lockspec/Counter_lockConsistent_contract.key")
                .provable("./heap/permissions/lockspec/Counter_increase_contract.key")
                .provable("./heap/permissions/lockspec/Counter_fp_accessible.key")
                .provable("./heap/permissions/lockspec/Counter_fpLock_accessible.key")
                .provable("./heap/permissions/lockspec/Counter_fpPerm_accessible.key")
                .provable("./heap/permissions/lockspec/Counter_inv_accessible1.key")
                .provable("./heap/permissions/lockspec/Counter_inv_accessible2.key")
                .provable("./heap/permissions/lockspec/Counter_lockRef_accessible.key")
                .provable("./heap/permissions/lockspec/Counter_lockRef_contract1.key")
                .provable("./heap/permissions/lockspec/Counter_lockRef_contract2.key")
                .provable("./heap/permissions/lockspec/Counter_lockState_accessible.key")
                .provable("./heap/permissions/lockspec/Counter_lockStatus_accessible.key")
                .provable("./heap/permissions/lockspec/Counter_lockTransfer_accessible.key")
                .provable("./heap/permissions/lockspec/Counter_unlockTransfer_accessible.key");
        // These need (a lot of) interaction at the moment:
        // .provable(": ./heap/permissions/threads/AFilter_run.key")
        // .provable(": ./heap/permissions/threads/BFilter_run.key")
        // .provable(": ./heap/permissions/threads/Fib_run.key")
        // .provable(": ./heap/permissions/threads/Plotter_run.key")
        // .provable(": ./heap/permissions/threads/Main_main.key")// Should be .provable(", but isn't at the moment:
        // .provable(": ./heap/permissions/threads/Plotter_staticPermissions_accessible.key")
        // Is .provable(", but very heavy (~400000 steps)
        // .provable(": ./heap/permissions/threads/Plotter_startTransfer_contract.key")// These are the proof files which can be loaded from the examples menu.

        c.addGroup("reload_examples")
                .provable("./firstTouch/05-ReverseArray/reverseArray.key")
                .loadable("standard_key/arith/saveProofTest.key.proof")
                .loadable("./heap/permutedSum/perm.proof")
                .loadable("./firstTouch/05-ReverseArray/reverseArray.proof")
                .loadable("./heap/verifyThis15_1_RelaxedPrefix/relax.proof")
                .loadable("./heap/verifyThis15_3_DLL/doUndo.proof")
                .loadable("./heap/verifyThis15_2_ParallelGcd/parallelGcd.proof")
                .loadable("./heap/verifyThis17_1_PairInsertionSort/sort.proof.gz");
        return c;
    }

    public static ProofCollection getInfFlowCollection() {
        ProofCollection c = new ProofCollection();
        c.getSettings().setBaseDirectory("../")
                .setBaseDirectory(FindResources.getExampleDirectory().getAbsolutePath())
                .setStatisticsFile("build/test-results/testRunAllProofs/runStatistics_infflow.csv")
                .setForkMode(ForkMode.PERGROUP)
                .setReloadEnabled(false)
                .setTempDir("build/tmp/runallproofs_infflow_tmp")
                .setForkTimeout(1000)
                .setVerbose(true);

        //  forkMemory = 1000m
        //  runOnlyOn = group1,group2
        //  //  Tests for information flow

        c.addGroup("ToyVoting")
                .provable("./InformationFlow/ToyVoting/Voter(Voter__insecure_voting()).JML normal_behavior operation contract.0.key")
                .provable("./InformationFlow/ToyVoting/Voter(Voter__publishVoterParticipation()).JML normal_behavior operation contract.0.key")
                .provable("./InformationFlow/ToyVoting/Voter(Voter__isValid(int)).JML normal_behavior operation contract.0.key")
                .provable("./InformationFlow/ToyVoting/Voter(Voter__sendVote(int)).JML normal_behavior operation contract.0.key")
                .provable("./InformationFlow/ToyVoting/Voter(Voter__inputVote()).JML normal_behavior operation contract.0.key")
                .provable("./InformationFlow/ToyVoting/Voter(Voter__secure_voting()).JML normal_behavior operation contract.0.key");


        c.addGroup("ConditionalConfidential")
                .provable("./InformationFlow/ConditionalConfidential/CCExample(CCExample__hasAccessRight(CCExample.User)).JML normal_behavior operation contract.0.key")
                .provable("./InformationFlow/ConditionalConfidential/CCExample(CCExample__getConfidentialData(CCExample.User)).JML normal_behavior operation contract.0.key");


        c.addGroup("SumExample")
                .provable("./InformationFlow/Sum/SumExample(SumExample__getSum()).JML normal_behavior operation contract.0.key");


        c.addGroup("ToyBanking")
                .provable("./InformationFlow/ToyBanking/banking_example.UserAccount(banking_example.UserAccount__getBankAccount(int)).JML normal_behavior operation contract.0.key")
                .provable("./InformationFlow/ToyBanking/banking_example.UserAccount(banking_example.UserAccount__tryLogin(int,(C)).JML normal_behavior operation contract.0.key")
                .provable("./InformationFlow/ToyBanking/banking_example.UserAccount(java.lang.Object___inv_()).JML accessible clause.0.key")
                .provable("./InformationFlow/ToyBanking/banking_example.BankAccount(banking_example.BankAccount__depositMoney(int)).JML normal_behavior operation contract.0.key")
                .provable("./InformationFlow/ToyBanking/banking_example.BankAccount(banking_example.BankAccount__getBalance()).JML normal_behavior operation contract.0.key")
                .provable("./InformationFlow/ToyBanking/banking_example.BankAccount(banking_example.BankAccount__getId()).JML normal_behavior operation contract.0.key")
                .provable("./InformationFlow/ToyBanking/banking_example.Bank(banking_example.Bank__login(int,(C)).JML normal_behavior operation contract.0.key")
                .provable("./InformationFlow/ToyBanking/banking_example2.UserAccount(banking_example2.UserAccount__getBankAccount(int)).JML normal_behavior operation contract.0.key")
                .provable("./InformationFlow/ToyBanking/banking_example2.UserAccount(banking_example2.UserAccount__tryLogin(int,(C)).JML normal_behavior operation contract.0.key")
                .notprovable("./InformationFlow/ToyBanking/banking_example2.UserAccount(java.lang.Object___inv_()).JML accessible clause.0.key")
                .provable("./InformationFlow/ToyBanking/banking_example2.BankAccount(banking_example2.BankAccount__depositMoney(int)).JML normal_behavior operation contract.0.key")
                .provable("./InformationFlow/ToyBanking/banking_example2.BankAccount(banking_example2.BankAccount__getBalance()).JML normal_behavior operation contract.0.key")
                .provable("./InformationFlow/ToyBanking/banking_example2.BankAccount(banking_example2.BankAccount__getId()).JML normal_behavior operation contract.0.key")
                .provable("./InformationFlow/ToyBanking/banking_example2.Bank(banking_example2.Bank__login(int,(C)).JML normal_behavior operation contract.0.key");


        c.addGroup("BlockContracts")
                .provable("./InformationFlow/BlockContracts/contract.IFBlockExamples(contract.IFBlockExamples__secure_5()).JML operation contract.0.key")
                .provable("./InformationFlow/BlockContracts/contract.IFBlockExamples(contract.IFBlockExamples__block_no_return_secure(int)).JML operation contract.0.key")
                .provable("./InformationFlow/BlockContracts/contract.IFBlockExamples(contract.IFBlockExamples__while_block_insecure(int)).JML operation contract.0.key")
                .provable("./InformationFlow/BlockContracts/contract.IFBlockExamples(contract.IFBlockExamples__while_block_secure(int)).JML operation contract.0.key")
                .provable("./InformationFlow/BlockContracts/contract.IFBlockExamples(contract.IFBlockExamples__block_while_secure(int)).JML operation contract.0.key")
                .provable("./InformationFlow/BlockContracts/contract.IFBlockExamples(contract.IFBlockExamples__insecure_4(int)).JML operation contract.0.key")
                .provable("./InformationFlow/BlockContracts/contract.IFBlockExamples(contract.IFBlockExamples__insecure_3(int)).JML operation contract.0.key")
                .provable("./InformationFlow/BlockContracts/contract.IFBlockExamples(contract.IFBlockExamples__secure_3(int)).JML operation contract.0.key")
                .provable("./InformationFlow/BlockContracts/contract.IFBlockExamples(contract.IFBlockExamples__secure_2(int)).JML operation contract.0.key")
                .provable("./InformationFlow/BlockContracts/contract.IFBlockExamples(contract.IFBlockExamples__secure_8(int)).JML operation contract.0.key")
                .provable("./InformationFlow/BlockContracts/contract.IFBlockExamples(contract.IFBlockExamples__secure_7(int)).JML operation contract.0.key")
                .provable("./InformationFlow/BlockContracts/contract.IFBlockExamples(contract.IFBlockExamples__secure_6(int)).JML operation contract.0.key")
                .provable("./InformationFlow/BlockContracts/contract.IFBlockExamples(contract.IFBlockExamples__insecure_1(int)).JML operation contract.0.key")
                .provable("./InformationFlow/BlockContracts/contract.IFBlockExamples(contract.IFBlockExamples__secure_4(int)).JML operation contract.0.key")
                .provable("./InformationFlow/BlockContracts/contract.IFBlockExamples(contract.IFBlockExamples__secure_1(int)).JML operation contract.0.key")
                .provable("./InformationFlow/BlockContracts/contract.IFEfficiencyExamples(contract.IFEfficiencyExamples__mWithoutBlockContract()).JML operation contract.0.key")
                .provable("./InformationFlow/BlockContracts/contract.IFEfficiencyExamples(contract.IFEfficiencyExamples__mWithBlockContract()).JML operation contract.0.key");


        c.addGroup("MethodContracts")
                .provable("./InformationFlow/MethodContracts/contract.IFMethodContract(contract.IFMethodContract__secure_recursion_2((I,int)).JML normal_behavior operation contract.0.key")
                .provable("./InformationFlow/MethodContracts/contract.IFMethodContract(contract.IFMethodContract__secure_recursion(int)).JML normal_behavior operation contract.0.key")
                .provable("./InformationFlow/MethodContracts/contract.IFMethodContract(contract.IFMethodContract__secure_catch_exception()).JML operation contract.0.key")
                .provable("./InformationFlow/MethodContracts/contract.IFMethodContract(contract.IFMethodContract__n6()).JML normal_behavior operation contract.0.key")
                .provable("./InformationFlow/MethodContracts/contract.IFMethodContract(contract.IFMethodContract__secure_n6()).JML operation contract.0.key")
                .provable("./InformationFlow/MethodContracts/contract.IFMethodContract(contract.IFMethodContract__secure_array_param_helper()).JML normal_behavior operation contract.0.key")
                .provable("./InformationFlow/MethodContracts/contract.IFMethodContract(contract.IFMethodContract__secure_array_param((I,int)).JML operation contract.0.key")
                .provable("./InformationFlow/MethodContracts/contract.IFMethodContract(contract.IFMethodContract__n9()).JML normal_behavior operation contract.0.key")
                .provable("./InformationFlow/MethodContracts/contract.IFMethodContract(contract.IFMethodContract__secure_assignment_0_n9()).JML operation contract.0.key")
                .provable("./InformationFlow/MethodContracts/contract.IFMethodContract(contract.IFMethodContract__insecure_if_high_n5_n1()).JML operation contract.0.key")
                .provable("./InformationFlow/MethodContracts/contract.IFMethodContract(contract.IFMethodContract__n5(int)).JML normal_behavior operation contract.0.key")
                .provable("./InformationFlow/MethodContracts/contract.IFMethodContract(contract.IFMethodContract__secure_if_high_n5_n1()).JML operation contract.0.key")
                .provable("./InformationFlow/MethodContracts/contract.IFMethodContract(contract.IFMethodContract__secure_if_high_n1()).JML operation contract.0.key")
                .provable("./InformationFlow/MethodContracts/contract.IFMethodContract(contract.IFMethodContract__secure_n5()).JML operation contract.0.key")
                .provable("./InformationFlow/MethodContracts/contract.IFMethodContract(contract.IFMethodContract__n4()).JML normal_behavior operation contract.0.key")
                .provable("./InformationFlow/MethodContracts/contract.IFMethodContract(contract.IFMethodContract__n3()).JML normal_behavior operation contract.0.key")
                .provable("./InformationFlow/MethodContracts/contract.IFMethodContract(contract.IFMethodContract__secure_sequential_n3_precond_n4()).JML operation contract.0.key")
                .provable("./InformationFlow/MethodContracts/contract.IFMethodContract(contract.IFMethodContract__insecure_assignment_n2()).JML operation contract.0.key")
                .provable("./InformationFlow/MethodContracts/contract.IFMethodContract(contract.IFMethodContract__secure_assignments_n2()).JML operation contract.0.key")
                .provable("./InformationFlow/MethodContracts/contract.IFMethodContract(contract.IFMethodContract__n2()).JML normal_behavior operation contract.0.key")
                .provable("./InformationFlow/MethodContracts/contract.IFMethodContract(contract.IFMethodContract__n1()).JML normal_behavior operation contract.0.key")
                .provable("./InformationFlow/MethodContracts/contract.IFMethodContract(contract.IFMethodContract__secure_sequential_n1_n2()).JML operation contract.0.key");


        c.addGroup("LoopInvariants")
                .provable("./InformationFlow/LoopInvariants/loop.IFLoopExamples(loop.IFLoopExamples__insecure_while_3(int)).JML operation contract.0.key")
                .provable("./InformationFlow/LoopInvariants/loop.IFLoopExamples(loop.IFLoopExamples__secure_while_2(int)).JML operation contract.0.key")
                .provable("./InformationFlow/LoopInvariants/loop.IFLoopExamples(loop.IFLoopExamples__secure_while_4(int)).JML operation contract.0.key")
                .provable("./InformationFlow/LoopInvariants/loop.IFLoopExamples(loop.IFLoopExamples__insecure_doubleNestedWhile2(int)).JML operation contract.0.key")
                .provable("./InformationFlow/LoopInvariants/loop.IFLoopExamples(loop.IFLoopExamples__insecure_doubleNestedWhile(int)).JML operation contract.0.key")
                .provable("./InformationFlow/LoopInvariants/loop.IFLoopExamples(loop.IFLoopExamples__secure_doubleNestedWhile(int)).JML operation contract.0.key")
                .provable("./InformationFlow/LoopInvariants/loop.IFLoopExamples(loop.IFLoopExamples__secure_nestedTwoWhile(int)).JML operation contract.0.key")
                .provable("./InformationFlow/LoopInvariants/loop.IFLoopExamples(loop.IFLoopExamples__secure_nestedWhile(int)).JML operation contract.0.key")
                .provable("./InformationFlow/LoopInvariants/loop.IFLoopExamples(loop.IFLoopExamples__notSecure_while(int)).JML operation contract.0.key")
                .notprovable("./InformationFlow/LoopInvariants/loop.IFLoopExamples(loop.IFLoopExamples__notSecure_while_wrongInv(int)).JML operation contract.0.key")
                .provable("./InformationFlow/LoopInvariants/loop.IFLoopExamples(loop.IFLoopExamples__insecure_twoWhile(int)).JML operation contract.0.key")
                .provable("./InformationFlow/LoopInvariants/loop.IFLoopExamples(loop.IFLoopExamples__insecure_twoWhile_2(int)).JML operation contract.0.key")
                .provable("./InformationFlow/LoopInvariants/loop.IFLoopExamples(loop.IFLoopExamples__secure_twoWhile(int)).JML operation contract.0.key")
                .provable("./InformationFlow/LoopInvariants/loop.IFLoopExamples(loop.IFLoopExamples__loc_secure_while(int)).JML operation contract.0.key")
                .provable("./InformationFlow/LoopInvariants/loop.IFLoopExamples(loop.IFLoopExamples__secure_while(int)).JML operation contract.0.key")
                .provable("./InformationFlow/LoopInvariants/loop.IFLoopExamples(loop.IFLoopExamples__print(int)).JML normal_behavior operation contract.0.key")
                .provable("./InformationFlow/LoopInvariants/loop.IFLoopExamples(loop.IFLoopExamples__hammer(int)).JML normal_behavior operation contract.0.key");


        c.addGroup("MiniExamples")
                .provable("./InformationFlow/MiniExamples/mini.AliasingExamples(mini.AliasingExamples__insecure_1(mini.AliasingExamples,mini.AliasingExamples,int)).JML operation contract.0.key")
                .provable("./InformationFlow/MiniExamples/mini.AliasingExamples(mini.AliasingExamples__secure_1(mini.AliasingExamples,mini.AliasingExamples,int)).JML operation contract.0.key")
                .provable("./InformationFlow/MiniExamples/mini.MiniExamplesLecture(mini.MiniExamplesLecture__m_6()).JML normal_behavior operation contract.0.key")
                .provable("./InformationFlow/MiniExamples/mini.MiniExamplesLecture(mini.MiniExamplesLecture__m_5()).JML normal_behavior operation contract.0.key")
                .provable("./InformationFlow/MiniExamples/mini.MiniExamplesLecture(mini.MiniExamplesLecture__m_4()).JML normal_behavior operation contract.0.key")
                .provable("./InformationFlow/MiniExamples/mini.MiniExamplesLecture(mini.MiniExamplesLecture__m_3()).JML normal_behavior operation contract.0.key")
                .provable("./InformationFlow/MiniExamples/mini.MiniExamplesLecture(mini.MiniExamplesLecture__m_2()).JML normal_behavior operation contract.0.key")
                .provable("./InformationFlow/MiniExamples/mini.MiniExamplesLecture(mini.MiniExamplesLecture__m_1()).JML normal_behavior operation contract.0.key")
                .provable("./InformationFlow/MiniExamples/mini.DifferenceSeqLocset(mini.DifferenceSeqLocset__m()).JML normal_behavior operation contract.1.key")
                .provable("./InformationFlow/MiniExamples/mini.DifferenceSeqLocset(mini.DifferenceSeqLocset__m()).JML normal_behavior operation contract.0.key")
                .provable("./InformationFlow/MiniExamples/mini.MiniExamples(mini.MiniExamples__secure_p2_8()).JML normal_behavior operation contract.0.key")
                .provable("./InformationFlow/MiniExamples/mini.MiniExamples(mini.MiniExamples__secure_parameter(int)).JML operation contract.0.key")
                .provable("./InformationFlow/MiniExamples/mini.MiniExamples(mini.MiniExamples__secure_p2_7()).JML normal_behavior operation contract.0.key")
                .provable("./InformationFlow/MiniExamples/mini.MiniExamples(mini.MiniExamples__insecure_p2_2()).JML normal_behavior operation contract.0.key")
                .provable("./InformationFlow/MiniExamples/mini.MiniExamples(mini.MiniExamples__secure_p2_6()).JML normal_behavior operation contract.0.key")
                .provable("./InformationFlow/MiniExamples/mini.MiniExamples(mini.MiniExamples__secure_p2_5()).JML normal_behavior operation contract.0.key")
                .provable("./InformationFlow/MiniExamples/mini.MiniExamples(mini.MiniExamples__secure_p2_4()).JML normal_behavior operation contract.0.key")
                .provable("./InformationFlow/MiniExamples/mini.MiniExamples(mini.MiniExamples__secure_p2_3()).JML normal_behavior operation contract.0.key")
                .provable("./InformationFlow/MiniExamples/mini.MiniExamples(mini.MiniExamples__secure_p2_2()).JML normal_behavior operation contract.0.key")
                .provable("./InformationFlow/MiniExamples/mini.MiniExamples(mini.MiniExamples__secure_p2_1()).JML normal_behavior operation contract.0.key")
                .provable("./InformationFlow/MiniExamples/mini.MiniExamples(mini.MiniExamples__insecure_p2_1()).JML normal_behavior operation contract.0.key")
                .provable("./InformationFlow/MiniExamples/mini.MiniExamples(mini.MiniExamples__secure_p1_6()).JML normal_behavior operation contract.0.key")
                .provable("./InformationFlow/MiniExamples/mini.MiniExamples(mini.MiniExamples__secure_p1_5()).JML normal_behavior operation contract.0.key")
                .provable("./InformationFlow/MiniExamples/mini.MiniExamples(mini.MiniExamples__secure_p1_4()).JML normal_behavior operation contract.0.key")
                .provable("./InformationFlow/MiniExamples/mini.MiniExamples(mini.MiniExamples__secure_p1_3()).JML normal_behavior operation contract.0.key")
                .provable("./InformationFlow/MiniExamples/mini.MiniExamples(mini.MiniExamples__secure_p1_2()).JML normal_behavior operation contract.0.key")
                .provable("./InformationFlow/MiniExamples/mini.MiniExamples(mini.MiniExamples__secure_p1_1()).JML normal_behavior operation contract.1.key")
                .provable("./InformationFlow/MiniExamples/mini.MiniExamples(mini.MiniExamples__secure_p1_1()).JML normal_behavior operation contract.0.key")
                .provable("./InformationFlow/MiniExamples/mini.MiniExamples(mini.MiniExamples__insecure_p1_2()).JML normal_behavior operation contract.0.key")
                .provable("./InformationFlow/MiniExamples/mini.MiniExamples(mini.MiniExamples__insecure_p1_1()).JML normal_behavior operation contract.0.key");


        c.addGroup("NewObjects")
                .provable("./InformationFlow/NewObjects/object.AmtoftBanerjee3(object.AmtoftBanerjee3__m()).JML operation contract.0.key")
                .provable("./InformationFlow/NewObjects/object.AmtoftBanerjee(object.AmtoftBanerjee__m_2()).JML normal_behavior operation contract.0.key")
                .provable("./InformationFlow/NewObjects/object.AmtoftBanerjee(object.AmtoftBanerjee__m_1()).JML normal_behavior operation contract.1.key")
                .provable("./InformationFlow/NewObjects/object.AmtoftBanerjee(object.AmtoftBanerjee__m_1()).JML normal_behavior operation contract.0.key")
                .provable("./InformationFlow/NewObjects/object.AmtoftBanerjee(object.AmtoftBanerjee__getQ()).JML normal_behavior operation contract.0.key")
                .provable("./InformationFlow/NewObjects/object.Naumann(object.Naumann__Pair_m(int,int)).JML operation contract.0.key")
                .provable("./InformationFlow/NewObjects/object.ObjectOrientation(object.ObjectOrientation__secure_while_i((Ljava.lang.Object)).JML operation contract.0.key")
                .provable("./InformationFlow/NewObjects/object.ObjectOrientation(object.ObjectOrientation__secure_method_call()).JML operation contract.0.key")
                .provable("./InformationFlow/NewObjects/object.ObjectOrientation(object.ObjectOrientation__if_two_object_creation_next()).JML operation contract.1.key")
                .provable("./InformationFlow/NewObjects/object.ObjectOrientation(object.ObjectOrientation__if_two_object_creation_next()).JML operation contract.0.key")
                .provable("./InformationFlow/NewObjects/object.ObjectOrientation(object.ObjectOrientation__secure_if_two_object_creation()).JML operation contract.0.key")
                .provable("./InformationFlow/NewObjects/object.ObjectOrientation(object.ObjectOrientation__insecure_two_object_creation()).JML operation contract.0.key")
                .provable("./InformationFlow/NewObjects/object.ObjectOrientation(object.ObjectOrientation__secure_two_object_creation()).JML normal_behavior operation contract.0.key")
                .provable("./InformationFlow/NewObjects/object.ObjectOrientation(object.ObjectOrientation__insecure_object_assignment()).JML operation contract.1.key")
                .provable("./InformationFlow/NewObjects/object.ObjectOrientation(object.ObjectOrientation__insecure_object_assignment()).JML operation contract.0.key")
                .provable("./InformationFlow/NewObjects/object.ObjectOrientation(object.ObjectOrientation__secure_object_creation_3()).JML operation contract.0.key")
                .provable("./InformationFlow/NewObjects/object.ObjectOrientation(object.ObjectOrientation__secure_object_creation_2()).JML operation contract.0.key")
                .provable("./InformationFlow/NewObjects/object.ObjectOrientation(object.ObjectOrientation__secure_object_creation()).JML operation contract.0.key")
                .provable("./InformationFlow/NewObjects/object.AmtoftBanerjee2(object.AmtoftBanerjee2__expensive(int)).JML accessible clause.0.key")
                .provable("./InformationFlow/NewObjects/object.AmtoftBanerjee2(object.AmtoftBanerjee2__expensive(int)).JML normal_behavior operation contract.0.key")
                .provable("./InformationFlow/NewObjects/object.AmtoftBanerjee2(object.AmtoftBanerjee2__cexp(int)).JML normal_behavior operation contract.0.key")
                .notprovable("./InformationFlow/PasswordFile/passwordfile.SecurePasswordFile(passwordfile.SecurePasswordFile___userIndex()).JML accessible clause.0.key");

        c.addGroup("SimpleEvoting")
                .provable("./InformationFlow/SimpleEvoting/simple_evoting.Environment(simple_evoting.Environment__untrustedOutputMessage((B)).JML normal_behavior operation contract.0.key")
                .provable("./InformationFlow/SimpleEvoting/simple_evoting.Environment(simple_evoting.Environment__untrustedInputMessage((B)).JML normal_behavior operation contract.0.key")
                .provable("./InformationFlow/SimpleEvoting/simple_evoting.Environment(simple_evoting.Environment__untrustedInputMessage()).JML normal_behavior operation contract.0.key")
                .provable("./InformationFlow/SimpleEvoting/simple_evoting.Environment(simple_evoting.Environment__untrustedOutput(int)).JML normal_behavior operation contract.0.key")
                .notprovable("./InformationFlow/SimpleEvoting/simple_evoting.Environment(simple_evoting.Environment__untrustedInput(int)).JML normal_behavior operation contract.0.key")
                .notprovable("./InformationFlow/SimpleEvoting/simple_evoting.Environment(simple_evoting.Environment__untrustedInput()).JML normal_behavior operation contract.0.key")
                .provable("./InformationFlow/SimpleEvoting/simple_evoting.Environment(simple_evoting.Environment___rep()).JML accessible clause.0.key")
                .provable("./InformationFlow/SimpleEvoting/simple_evoting.SMT(simple_evoting.SMT__send(simple_evoting.Message,int,simple_evoting.Server)).JML normal_behavior operation contract.1.key")
                .provable("./InformationFlow/SimpleEvoting/simple_evoting.SMT(simple_evoting.SMT__send(simple_evoting.Message,int,simple_evoting.Server)).JML normal_behavior operation contract.0.key")
                .provable("./InformationFlow/SimpleEvoting/simple_evoting.Message(java.lang.Object___inv_()).JML accessible clause.0.key")
                .provable("./InformationFlow/SimpleEvoting/simple_evoting.Server(simple_evoting.Server__resultReady()).JML accessible clause.0.key")
                .provable("./InformationFlow/SimpleEvoting/simple_evoting.Server(simple_evoting.Server__resultReady()).JML normal_behavior operation contract.0.key")
                .provable("./InformationFlow/SimpleEvoting/simple_evoting.Server(simple_evoting.Server__onSendResult()).JML normal_behavior operation contract.0.key")
                .provable("./InformationFlow/SimpleEvoting/simple_evoting.Server(simple_evoting.Server__onCollectBallot(simple_evoting.Message)).JML normal_behavior operation contract.1.key")
                .provable("./InformationFlow/SimpleEvoting/simple_evoting.Server(simple_evoting.Server__onCollectBallot(simple_evoting.Message)).JML normal_behavior operation contract.0.key")
                .provable("./InformationFlow/SimpleEvoting/simple_evoting.Server(java.lang.Object___inv_()).JML accessible clause.0.key")
                .provable("./InformationFlow/SimpleEvoting/simple_evoting.SMTEnv(simple_evoting.SMTEnv__send(int,int,int,simple_evoting.Server,int)).JML normal_behavior operation contract.0.key")
                .provable("./InformationFlow/SimpleEvoting/simple_evoting.NetworkClient(simple_evoting.NetworkClient__send((B,simple_evoting.Server,int)).JML normal_behavior operation contract.0.key")
                .provable("./InformationFlow/SimpleEvoting/simple_evoting.Setup(simple_evoting.Setup__publishResult()).JML normal_behavior operation contract.0.key")
                .notprovable("./InformationFlow/SimpleEvoting/simple_evoting.Setup(simple_evoting.Setup__main()).JML normal_behavior operation contract.0.key")
                .provable("./InformationFlow/SimpleEvoting/simple_evoting.Setup(java.lang.Object___inv_()).JML accessible clause.0.key")
                .provable("./InformationFlow/SimpleEvoting/simple_evoting.Voter(simple_evoting.Voter__onSendBallot(simple_evoting.Server)).JML normal_behavior operation contract.1.key")
                .provable("./InformationFlow/SimpleEvoting/simple_evoting.Voter(simple_evoting.Voter__onSendBallot(simple_evoting.Server)).JML normal_behavior operation contract.0.key")
                .provable("./InformationFlow/SimpleEvoting/simple_evoting.Voter(java.lang.Object___inv_()).JML accessible clause.0.key");


//  //  Tests for information flow to be executed without information flow proof macro

        c.addGroup("ToyVoting_nomacro")
                .notprovable("./InformationFlow/ToyVoting/Voter(Voter__insecure_voting()).Non-interference contract.0.key")
                .provable("./InformationFlow/ToyVoting/Voter(Voter__publishVoterParticipation()).Non-interference contract.0.key")
                .provable("./InformationFlow/ToyVoting/Voter(Voter__isValid(int)).Non-interference contract.0.key")
                .provable("./InformationFlow/ToyVoting/Voter(Voter__sendVote(int)).Non-interference contract.0.key")
                .provable("./InformationFlow/ToyVoting/Voter(Voter__inputVote()).Non-interference contract.0.key");
// .provable( "./InformationFlow/ToyVoting/Voter(Voter__secure_voting()).Non-interference contract.0.key")


        c.addGroup("ConditionalConfidential_nomacro");
// .provable( "./InformationFlow/ConditionalConfidential/CCExample(CCExample__getConfidentialData(CCExample.User)).Non-interference contract.0.key")


        c.addGroup("SumExample_nomacro")
                .provable("./InformationFlow/Sum/SumExample(SumExample__getSum()).Non-interference contract.0.key");


        c.addGroup("ToyBanking_nomacro")
                .provable("./InformationFlow/ToyBanking/banking_example.UserAccount(banking_example.UserAccount__getBankAccount(int)).Non-interference contract.0.key")
// .provable( "./InformationFlow/ToyBanking/banking_example.UserAccount(banking_example.UserAccount__tryLogin(int,(C)).Non-interference contract.0.key")
                .provable("./InformationFlow/ToyBanking/banking_example.BankAccount(banking_example.BankAccount__depositMoney(int)).Non-interference contract.0.key")
                .provable("./InformationFlow/ToyBanking/banking_example.BankAccount(banking_example.BankAccount__getBalance()).Non-interference contract.0.key")
                .provable("./InformationFlow/ToyBanking/banking_example.BankAccount(banking_example.BankAccount__getId()).Non-interference contract.0.key")
                .notprovable("./InformationFlow/ToyBanking/banking_example.Bank(banking_example.Bank__login(int,(C)).Non-interference contract.0.key")
                .provable("./InformationFlow/ToyBanking/banking_example2.UserAccount(banking_example2.UserAccount__getBankAccount(int)).Non-interference contract.0.key")
// .provable( "./InformationFlow/ToyBanking/banking_example2.UserAccount(banking_example2.UserAccount__tryLogin(int,(C)).Non-interference contract.0.key")
                .provable("./InformationFlow/ToyBanking/banking_example2.BankAccount(banking_example2.BankAccount__depositMoney(int)).Non-interference contract.0.key")
                .provable("./InformationFlow/ToyBanking/banking_example2.BankAccount(banking_example2.BankAccount__getBalance()).Non-interference contract.0.key")
                .provable("./InformationFlow/ToyBanking/banking_example2.BankAccount(banking_example2.BankAccount__getId()).Non-interference contract.0.key");
// .provable( "./InformationFlow/ToyBanking/banking_example2.Bank(banking_example2.Bank__login(int,(C)).Non-interference contract.0.key")


        c.addGroup("BlockContracts_nomacro")
                .provable("./InformationFlow/BlockContracts/contract.IFBlockExamples(contract.IFBlockExamples__secure_5()).Non-interference contract.0.key")
                .provable("./InformationFlow/BlockContracts/contract.IFBlockExamples(contract.IFBlockExamples__block_no_return_secure(int)).Non-interference contract.0.key")
                .notprovable("./InformationFlow/BlockContracts/contract.IFBlockExamples(contract.IFBlockExamples__while_block_insecure(int)).Non-interference contract.0.key")
                .provable("./InformationFlow/BlockContracts/contract.IFBlockExamples(contract.IFBlockExamples__while_block_secure(int)).Non-interference contract.0.key")
                .provable("./InformationFlow/BlockContracts/contract.IFBlockExamples(contract.IFBlockExamples__block_while_secure(int)).Non-interference contract.0.key")
                .notprovable("./InformationFlow/BlockContracts/contract.IFBlockExamples(contract.IFBlockExamples__insecure_4(int)).Non-interference contract.0.key")
                .notprovable("./InformationFlow/BlockContracts/contract.IFBlockExamples(contract.IFBlockExamples__insecure_3(int)).Non-interference contract.0.key")
                .provable("./InformationFlow/BlockContracts/contract.IFBlockExamples(contract.IFBlockExamples__secure_3(int)).Non-interference contract.0.key")
                .provable("./InformationFlow/BlockContracts/contract.IFBlockExamples(contract.IFBlockExamples__secure_2(int)).Non-interference contract.0.key")
                .provable("./InformationFlow/BlockContracts/contract.IFBlockExamples(contract.IFBlockExamples__secure_8(int)).Non-interference contract.0.key")
                .provable("./InformationFlow/BlockContracts/contract.IFBlockExamples(contract.IFBlockExamples__secure_7(int)).Non-interference contract.0.key")
                .provable("./InformationFlow/BlockContracts/contract.IFBlockExamples(contract.IFBlockExamples__secure_6(int)).Non-interference contract.0.key")
                .notprovable("./InformationFlow/BlockContracts/contract.IFBlockExamples(contract.IFBlockExamples__insecure_1(int)).Non-interference contract.0.key")
                .provable("./InformationFlow/BlockContracts/contract.IFBlockExamples(contract.IFBlockExamples__secure_4(int)).Non-interference contract.0.key")
                .provable("./InformationFlow/BlockContracts/contract.IFBlockExamples(contract.IFBlockExamples__secure_1(int)).Non-interference contract.0.key")
                .provable("./InformationFlow/BlockContracts/contract.IFEfficiencyExamples(contract.IFEfficiencyExamples__mWithoutBlockContract()).Non-interference contract.0.key")
                .provable("./InformationFlow/BlockContracts/contract.IFEfficiencyExamples(contract.IFEfficiencyExamples__mWithBlockContract()).Non-interference contract.0.key");


        c.addGroup("MethodContracts_nomacro")
                .provable("./InformationFlow/MethodContracts/contract.IFMethodContract(contract.IFMethodContract__secure_recursion_2((I,int)).Non-interference contract.0.key")
                .provable("./InformationFlow/MethodContracts/contract.IFMethodContract(contract.IFMethodContract__secure_recursion(int)).Non-interference contract.0.key")
                .provable("./InformationFlow/MethodContracts/contract.IFMethodContract(contract.IFMethodContract__secure_catch_exception()).Non-interference contract.0.key")
                .provable("./InformationFlow/MethodContracts/contract.IFMethodContract(contract.IFMethodContract__n6()).Non-interference contract.0.key")
                .provable("./InformationFlow/MethodContracts/contract.IFMethodContract(contract.IFMethodContract__secure_n6()).Non-interference contract.0.key")
                .provable("./InformationFlow/MethodContracts/contract.IFMethodContract(contract.IFMethodContract__secure_array_param((I,int)).Non-interference contract.0.key")
                .provable("./InformationFlow/MethodContracts/contract.IFMethodContract(contract.IFMethodContract__secure_assignment_0_n9()).Non-interference contract.0.key")
                .notprovable("./InformationFlow/MethodContracts/contract.IFMethodContract(contract.IFMethodContract__insecure_if_high_n5_n1()).Non-interference contract.0.key")
                .provable("./InformationFlow/MethodContracts/contract.IFMethodContract(contract.IFMethodContract__n5(int)).Non-interference contract.0.key")
                .provable("./InformationFlow/MethodContracts/contract.IFMethodContract(contract.IFMethodContract__secure_if_high_n5_n1()).Non-interference contract.0.key")
                .provable("./InformationFlow/MethodContracts/contract.IFMethodContract(contract.IFMethodContract__secure_if_high_n1()).Non-interference contract.0.key")
                .provable("./InformationFlow/MethodContracts/contract.IFMethodContract(contract.IFMethodContract__secure_n5()).Non-interference contract.0.key")
                .provable("./InformationFlow/MethodContracts/contract.IFMethodContract(contract.IFMethodContract__n4()).Non-interference contract.0.key")
                .provable("./InformationFlow/MethodContracts/contract.IFMethodContract(contract.IFMethodContract__n3()).Non-interference contract.0.key")
                .provable("./InformationFlow/MethodContracts/contract.IFMethodContract(contract.IFMethodContract__secure_sequential_n3_precond_n4()).Non-interference contract.0.key")
                .notprovable("./InformationFlow/MethodContracts/contract.IFMethodContract(contract.IFMethodContract__insecure_assignment_n2()).Non-interference contract.0.key")
                .provable("./InformationFlow/MethodContracts/contract.IFMethodContract(contract.IFMethodContract__secure_assignments_n2()).Non-interference contract.0.key")
                .provable("./InformationFlow/MethodContracts/contract.IFMethodContract(contract.IFMethodContract__n2()).Non-interference contract.0.key")
                .provable("./InformationFlow/MethodContracts/contract.IFMethodContract(contract.IFMethodContract__n1()).Non-interference contract.0.key")
                .provable("./InformationFlow/MethodContracts/contract.IFMethodContract(contract.IFMethodContract__secure_sequential_n1_n2()).Non-interference contract.0.key");


        c.addGroup("LoopInvariants_nomacro")
                .notprovable("./InformationFlow/LoopInvariants/loop.IFLoopExamples(loop.IFLoopExamples__insecure_while_3(int)).Non-interference contract.0.key")
                .provable("./InformationFlow/LoopInvariants/loop.IFLoopExamples(loop.IFLoopExamples__secure_while_2(int)).Non-interference contract.0.key")
                .provable("./InformationFlow/LoopInvariants/loop.IFLoopExamples(loop.IFLoopExamples__secure_while_4(int)).Non-interference contract.0.key")
                .notprovable("./InformationFlow/LoopInvariants/loop.IFLoopExamples(loop.IFLoopExamples__insecure_doubleNestedWhile2(int)).Non-interference contract.0.key")
                .notprovable("./InformationFlow/LoopInvariants/loop.IFLoopExamples(loop.IFLoopExamples__insecure_doubleNestedWhile(int)).Non-interference contract.0.key")
                .provable("./InformationFlow/LoopInvariants/loop.IFLoopExamples(loop.IFLoopExamples__secure_doubleNestedWhile(int)).Non-interference contract.0.key")
                .provable("./InformationFlow/LoopInvariants/loop.IFLoopExamples(loop.IFLoopExamples__secure_nestedTwoWhile(int)).Non-interference contract.0.key")
                .provable("./InformationFlow/LoopInvariants/loop.IFLoopExamples(loop.IFLoopExamples__secure_nestedWhile(int)).Non-interference contract.0.key")
                .notprovable("./InformationFlow/LoopInvariants/loop.IFLoopExamples(loop.IFLoopExamples__notSecure_while(int)).Non-interference contract.0.key")
                .notprovable("./InformationFlow/LoopInvariants/loop.IFLoopExamples(loop.IFLoopExamples__notSecure_while_wrongInv(int)).Non-interference contract.0.key")
                .notprovable("./InformationFlow/LoopInvariants/loop.IFLoopExamples(loop.IFLoopExamples__insecure_twoWhile(int)).Non-interference contract.0.key")
                .notprovable("./InformationFlow/LoopInvariants/loop.IFLoopExamples(loop.IFLoopExamples__insecure_twoWhile_2(int)).Non-interference contract.0.key")
                .provable("./InformationFlow/LoopInvariants/loop.IFLoopExamples(loop.IFLoopExamples__secure_twoWhile(int)).Non-interference contract.0.key")
                .provable("./InformationFlow/LoopInvariants/loop.IFLoopExamples(loop.IFLoopExamples__loc_secure_while(int)).Non-interference contract.0.key")
                .provable("./InformationFlow/LoopInvariants/loop.IFLoopExamples(loop.IFLoopExamples__secure_while(int)).Non-interference contract.0.key")
                .provable("./InformationFlow/LoopInvariants/loop.IFLoopExamples(loop.IFLoopExamples__print(int)).Non-interference contract.0.key")
                .provable("./InformationFlow/LoopInvariants/loop.IFLoopExamples(loop.IFLoopExamples__hammer(int)).Non-interference contract.0.key");


        c.addGroup("MiniExamples_nomacro")
                .notprovable("./InformationFlow/MiniExamples/mini.AliasingExamples(mini.AliasingExamples__insecure_1(mini.AliasingExamples,mini.AliasingExamples,int)).Non-interference contract.0.key")
                .provable("./InformationFlow/MiniExamples/mini.AliasingExamples(mini.AliasingExamples__secure_1(mini.AliasingExamples,mini.AliasingExamples,int)).Non-interference contract.0.key")
                .provable("./InformationFlow/MiniExamples/mini.MiniExamplesLecture(mini.MiniExamplesLecture__m_6()).Non-interference contract.0.key")
                .provable("./InformationFlow/MiniExamples/mini.MiniExamplesLecture(mini.MiniExamplesLecture__m_5()).Non-interference contract.0.key")
                .provable("./InformationFlow/MiniExamples/mini.MiniExamplesLecture(mini.MiniExamplesLecture__m_4()).Non-interference contract.0.key")
                .notprovable("./InformationFlow/MiniExamples/mini.MiniExamplesLecture(mini.MiniExamplesLecture__m_3()).Non-interference contract.0.key")
                .provable("./InformationFlow/MiniExamples/mini.MiniExamplesLecture(mini.MiniExamplesLecture__m_2()).Non-interference contract.0.key")
                .notprovable("./InformationFlow/MiniExamples/mini.MiniExamplesLecture(mini.MiniExamplesLecture__m_1()).Non-interference contract.0.key")
                .notprovable("./InformationFlow/MiniExamples/mini.DifferenceSeqLocset(mini.DifferenceSeqLocset__m()).Non-interference contract.1.key")
                .notprovable("./InformationFlow/MiniExamples/mini.DifferenceSeqLocset(mini.DifferenceSeqLocset__m()).Non-interference contract.0.key")
                .provable("./InformationFlow/MiniExamples/mini.MiniExamples(mini.MiniExamples__secure_p2_8()).Non-interference contract.0.key")
                .provable("./InformationFlow/MiniExamples/mini.MiniExamples(mini.MiniExamples__secure_parameter(int)).Non-interference contract.0.key")
                .provable("./InformationFlow/MiniExamples/mini.MiniExamples(mini.MiniExamples__secure_p2_7()).Non-interference contract.0.key")
                .notprovable("./InformationFlow/MiniExamples/mini.MiniExamples(mini.MiniExamples__insecure_p2_2()).Non-interference contract.0.key")
                .provable("./InformationFlow/MiniExamples/mini.MiniExamples(mini.MiniExamples__secure_p2_6()).Non-interference contract.0.key")
                .provable("./InformationFlow/MiniExamples/mini.MiniExamples(mini.MiniExamples__secure_p2_5()).Non-interference contract.0.key")
                .provable("./InformationFlow/MiniExamples/mini.MiniExamples(mini.MiniExamples__secure_p2_4()).Non-interference contract.0.key")
                .provable("./InformationFlow/MiniExamples/mini.MiniExamples(mini.MiniExamples__secure_p2_3()).Non-interference contract.0.key")
                .provable("./InformationFlow/MiniExamples/mini.MiniExamples(mini.MiniExamples__secure_p2_2()).Non-interference contract.0.key")
                .provable("./InformationFlow/MiniExamples/mini.MiniExamples(mini.MiniExamples__secure_p2_1()).Non-interference contract.0.key")
                .notprovable("./InformationFlow/MiniExamples/mini.MiniExamples(mini.MiniExamples__insecure_p2_1()).Non-interference contract.0.key")
                .provable("./InformationFlow/MiniExamples/mini.MiniExamples(mini.MiniExamples__secure_p1_6()).Non-interference contract.0.key")
                .provable("./InformationFlow/MiniExamples/mini.MiniExamples(mini.MiniExamples__secure_p1_5()).Non-interference contract.0.key")
                .provable("./InformationFlow/MiniExamples/mini.MiniExamples(mini.MiniExamples__secure_p1_4()).Non-interference contract.0.key")
                .provable("./InformationFlow/MiniExamples/mini.MiniExamples(mini.MiniExamples__secure_p1_3()).Non-interference contract.0.key")
                .provable("./InformationFlow/MiniExamples/mini.MiniExamples(mini.MiniExamples__secure_p1_2()).Non-interference contract.0.key")
                .provable("./InformationFlow/MiniExamples/mini.MiniExamples(mini.MiniExamples__secure_p1_1()).Non-interference contract.1.key")
                .provable("./InformationFlow/MiniExamples/mini.MiniExamples(mini.MiniExamples__secure_p1_1()).Non-interference contract.0.key")
                .notprovable("./InformationFlow/MiniExamples/mini.MiniExamples(mini.MiniExamples__insecure_p1_2()).Non-interference contract.0.key")
                .notprovable("./InformationFlow/MiniExamples/mini.MiniExamples(mini.MiniExamples__insecure_p1_1()).Non-interference contract.0.key");


        c.addGroup("NewObjects_nomacro")
                .provable("./InformationFlow/NewObjects/object.AmtoftBanerjee3(object.AmtoftBanerjee3__m()).Non-interference contract.0.key")
                .provable("./InformationFlow/NewObjects/object.AmtoftBanerjee(object.AmtoftBanerjee__m_2()).Non-interference contract.0.key")
                .notprovable("./InformationFlow/NewObjects/object.AmtoftBanerjee(object.AmtoftBanerjee__m_1()).Non-interference contract.1.key")
                .provable("./InformationFlow/NewObjects/object.AmtoftBanerjee(object.AmtoftBanerjee__m_1()).Non-interference contract.0.key")
                .provable("./InformationFlow/NewObjects/object.AmtoftBanerjee(object.AmtoftBanerjee__getQ()).Non-interference contract.0.key")
// .provable( "./InformationFlow/NewObjects/object.Naumann(object.Naumann__Pair_m(int,int)).Non-interference contract.0.key")
                .provable("./InformationFlow/NewObjects/object.ObjectOrientation(object.ObjectOrientation__secure_while_i((Ljava.lang.Object)).Non-interference contract.0.key")
                .provable("./InformationFlow/NewObjects/object.ObjectOrientation(object.ObjectOrientation__secure_method_call()).Non-interference contract.0.key")
                .notprovable("./InformationFlow/NewObjects/object.ObjectOrientation(object.ObjectOrientation__if_two_object_creation_next()).Non-interference contract.1.key")
// .provable( "./InformationFlow/NewObjects/object.ObjectOrientation(object.ObjectOrientation__if_two_object_creation_next()).Non-interference contract.0.key")
// .provable( "./InformationFlow/NewObjects/object.ObjectOrientation(object.ObjectOrientation__secure_if_two_object_creation()).Non-interference contract.0.key")
                .notprovable("./InformationFlow/NewObjects/object.ObjectOrientation(object.ObjectOrientation__insecure_two_object_creation()).Non-interference contract.0.key")
                .provable("./InformationFlow/NewObjects/object.ObjectOrientation(object.ObjectOrientation__secure_two_object_creation()).Non-interference contract.0.key")
                .notprovable("./InformationFlow/NewObjects/object.ObjectOrientation(object.ObjectOrientation__insecure_object_assignment()).Non-interference contract.1.key")
                .notprovable("./InformationFlow/NewObjects/object.ObjectOrientation(object.ObjectOrientation__insecure_object_assignment()).Non-interference contract.0.key")
                .provable("./InformationFlow/NewObjects/object.ObjectOrientation(object.ObjectOrientation__secure_object_creation_3()).Non-interference contract.0.key")
                .provable("./InformationFlow/NewObjects/object.ObjectOrientation(object.ObjectOrientation__secure_object_creation_2()).Non-interference contract.0.key")
                .provable("./InformationFlow/NewObjects/object.ObjectOrientation(object.ObjectOrientation__secure_object_creation()).Non-interference contract.0.key")
                .provable("./InformationFlow/NewObjects/object.AmtoftBanerjee2(object.AmtoftBanerjee2__expensive(int)).Non-interference contract.0.key")
                .provable("./InformationFlow/NewObjects/object.AmtoftBanerjee2(object.AmtoftBanerjee2__cexp(int)).Non-interference contract.0.key");


        c.addGroup("SimpleEvoting_nomacro")
                .provable("./InformationFlow/SimpleEvoting/simple_evoting.Environment(simple_evoting.Environment__untrustedOutputMessage((B)).Non-interference contract.0.key")
// .provable( "./InformationFlow/SimpleEvoting/simple_evoting.Environment(simple_evoting.Environment__untrustedInputMessage((B)).Non-interference contract.0.key")
// .provable( "./InformationFlow/SimpleEvoting/simple_evoting.Environment(simple_evoting.Environment__untrustedInputMessage()).Non-interference contract.0.key")
                .provable("./InformationFlow/SimpleEvoting/simple_evoting.Environment(simple_evoting.Environment__untrustedOutput(int)).Non-interference contract.0.key")
                .notprovable("./InformationFlow/SimpleEvoting/simple_evoting.Environment(simple_evoting.Environment__untrustedInput(int)).Non-interference contract.0.key")
                .notprovable("./InformationFlow/SimpleEvoting/simple_evoting.Environment(simple_evoting.Environment__untrustedInput()).Non-interference contract.0.key")
                .provable("./InformationFlow/SimpleEvoting/simple_evoting.SMT(simple_evoting.SMT__send(simple_evoting.Message,int,simple_evoting.Server)).Non-interference contract.1.key")
                .provable("./InformationFlow/SimpleEvoting/simple_evoting.SMT(simple_evoting.SMT__send(simple_evoting.Message,int,simple_evoting.Server)).Non-interference contract.0.key")
// .provable( "./InformationFlow/SimpleEvoting/simple_evoting.SMTEnv(simple_evoting.SMTEnv__send(int,int,int,simple_evoting.Server,int)).Non-interference contract.0.key")
                .provable("./InformationFlow/SimpleEvoting/simple_evoting.NetworkClient(simple_evoting.NetworkClient__send((B,simple_evoting.Server,int)).Non-interference contract.0.key")
// .provable( "./InformationFlow/SimpleEvoting/simple_evoting.Setup(simple_evoting.Setup__publishResult()).Non-interference contract.0.key")
// .provable( "./InformationFlow/SimpleEvoting/simple_evoting.Setup(simple_evoting.Setup__main()).Non-interference contract.0.key")
                .provable("./InformationFlow/SimpleEvoting/simple_evoting.Voter(simple_evoting.Voter__onSendBallot(simple_evoting.Server)).Non-interference contract.1.key")
                .provable("./InformationFlow/SimpleEvoting/simple_evoting.Voter(simple_evoting.Voter__onSendBallot(simple_evoting.Server)).Non-interference contract.0.key");


//  //  Tests for information flow to be executed with information flow proof macro "FullInformationFlowAutoPilotMacro"

        c.addGroup("ToyVoting_fullmacro")
                .notprovable("./InformationFlow/ToyVoting/Voter(Voter__insecure_voting()).Non-interference contract.0.m.key")
                .provable("./InformationFlow/ToyVoting/Voter(Voter__publishVoterParticipation()).Non-interference contract.0.m.key")
                .provable("./InformationFlow/ToyVoting/Voter(Voter__isValid(int)).Non-interference contract.0.m.key")
                .provable("./InformationFlow/ToyVoting/Voter(Voter__sendVote(int)).Non-interference contract.0.m.key")
                .provable("./InformationFlow/ToyVoting/Voter(Voter__inputVote()).Non-interference contract.0.m.key")
                .provable("./InformationFlow/ToyVoting/Voter(Voter__secure_voting()).Non-interference contract.0.m.key");


// .provable( "./InformationFlow/ConditionalConfidential/CCExample(CCExample__getConfidentialData(CCExample.User)).Non-interference contract.0.m.key")

        c.addGroup("SumExample_fullmacro")
                .provable("./InformationFlow/Sum/SumExample(SumExample__getSum()).Non-interference contract.0.m.key");


        c.addGroup("ToyBanking_fullmacro")
                .provable("./InformationFlow/ToyBanking/banking_example.UserAccount(banking_example.UserAccount__getBankAccount(int)).Non-interference contract.0.m.key")
                .provable("./InformationFlow/ToyBanking/banking_example.UserAccount(banking_example.UserAccount__tryLogin(int,(C)).Non-interference contract.0.m.key")
                .provable("./InformationFlow/ToyBanking/banking_example.BankAccount(banking_example.BankAccount__depositMoney(int)).Non-interference contract.0.m.key")
                .provable("./InformationFlow/ToyBanking/banking_example.BankAccount(banking_example.BankAccount__getBalance()).Non-interference contract.0.m.key")
                .provable("./InformationFlow/ToyBanking/banking_example.BankAccount(banking_example.BankAccount__getId()).Non-interference contract.0.m.key")
                .notprovable("./InformationFlow/ToyBanking/banking_example.Bank(banking_example.Bank__login(int,(C)).Non-interference contract.0.m.key")
                .provable("./InformationFlow/ToyBanking/banking_example2.UserAccount(banking_example2.UserAccount__getBankAccount(int)).Non-interference contract.0.m.key")
                .provable("./InformationFlow/ToyBanking/banking_example2.UserAccount(banking_example2.UserAccount__tryLogin(int,(C)).Non-interference contract.0.m.key")
                .provable("./InformationFlow/ToyBanking/banking_example2.BankAccount(banking_example2.BankAccount__depositMoney(int)).Non-interference contract.0.m.key")
                .provable("./InformationFlow/ToyBanking/banking_example2.BankAccount(banking_example2.BankAccount__getBalance()).Non-interference contract.0.m.key")
                .provable("./InformationFlow/ToyBanking/banking_example2.BankAccount(banking_example2.BankAccount__getId()).Non-interference contract.0.m.key");
// .provable( "./InformationFlow/ToyBanking/banking_example2.Bank(banking_example2.Bank__login(int,(C)).Non-interference contract.0.m.key")


        c.addGroup("BlockContracts_fullmacro")
                .provable("./InformationFlow/BlockContracts/contract.IFBlockExamples(contract.IFBlockExamples__secure_5()).Non-interference contract.0.m.key")
                .provable("./InformationFlow/BlockContracts/contract.IFBlockExamples(contract.IFBlockExamples__block_no_return_secure(int)).Non-interference contract.0.m.key")
                .notprovable("./InformationFlow/BlockContracts/contract.IFBlockExamples(contract.IFBlockExamples__while_block_insecure(int)).Non-interference contract.0.m.key")
                .provable("./InformationFlow/BlockContracts/contract.IFBlockExamples(contract.IFBlockExamples__while_block_secure(int)).Non-interference contract.0.m.key")
                .provable("./InformationFlow/BlockContracts/contract.IFBlockExamples(contract.IFBlockExamples__block_while_secure(int)).Non-interference contract.0.m.key")
                .notprovable("./InformationFlow/BlockContracts/contract.IFBlockExamples(contract.IFBlockExamples__insecure_4(int)).Non-interference contract.0.m.key")
                .notprovable("./InformationFlow/BlockContracts/contract.IFBlockExamples(contract.IFBlockExamples__insecure_3(int)).Non-interference contract.0.m.key")
                .provable("./InformationFlow/BlockContracts/contract.IFBlockExamples(contract.IFBlockExamples__secure_3(int)).Non-interference contract.0.m.key")
                .provable("./InformationFlow/BlockContracts/contract.IFBlockExamples(contract.IFBlockExamples__secure_2(int)).Non-interference contract.0.m.key")
                .provable("./InformationFlow/BlockContracts/contract.IFBlockExamples(contract.IFBlockExamples__secure_8(int)).Non-interference contract.0.m.key")
                .provable("./InformationFlow/BlockContracts/contract.IFBlockExamples(contract.IFBlockExamples__secure_7(int)).Non-interference contract.0.m.key")
                .provable("./InformationFlow/BlockContracts/contract.IFBlockExamples(contract.IFBlockExamples__secure_6(int)).Non-interference contract.0.m.key")
                .notprovable("./InformationFlow/BlockContracts/contract.IFBlockExamples(contract.IFBlockExamples__insecure_1(int)).Non-interference contract.0.m.key")
                .provable("./InformationFlow/BlockContracts/contract.IFBlockExamples(contract.IFBlockExamples__secure_4(int)).Non-interference contract.0.m.key")
                .provable("./InformationFlow/BlockContracts/contract.IFBlockExamples(contract.IFBlockExamples__secure_1(int)).Non-interference contract.0.m.key")
                .provable("./InformationFlow/BlockContracts/contract.IFEfficiencyExamples(contract.IFEfficiencyExamples__mWithoutBlockContract()).Non-interference contract.0.m.key")
                .provable("./InformationFlow/BlockContracts/contract.IFEfficiencyExamples(contract.IFEfficiencyExamples__mWithBlockContract()).Non-interference contract.0.m.key");


        c.addGroup("MethodContracts_fullmacro")
                .provable("./InformationFlow/MethodContracts/contract.IFMethodContract(contract.IFMethodContract__secure_recursion_2((I,int)).Non-interference contract.0.m.key")
                .provable("./InformationFlow/MethodContracts/contract.IFMethodContract(contract.IFMethodContract__secure_recursion(int)).Non-interference contract.0.m.key")
                .provable("./InformationFlow/MethodContracts/contract.IFMethodContract(contract.IFMethodContract__secure_catch_exception()).Non-interference contract.0.m.key")
                .provable("./InformationFlow/MethodContracts/contract.IFMethodContract(contract.IFMethodContract__n6()).Non-interference contract.0.m.key")
                .provable("./InformationFlow/MethodContracts/contract.IFMethodContract(contract.IFMethodContract__secure_n6()).Non-interference contract.0.m.key")
                .provable("./InformationFlow/MethodContracts/contract.IFMethodContract(contract.IFMethodContract__secure_array_param((I,int)).Non-interference contract.0.m.key")
                .provable("./InformationFlow/MethodContracts/contract.IFMethodContract(contract.IFMethodContract__secure_assignment_0_n9()).Non-interference contract.0.m.key")
                .notprovable("./InformationFlow/MethodContracts/contract.IFMethodContract(contract.IFMethodContract__insecure_if_high_n5_n1()).Non-interference contract.0.m.key")
                .provable("./InformationFlow/MethodContracts/contract.IFMethodContract(contract.IFMethodContract__n5(int)).Non-interference contract.0.m.key")
                .provable("./InformationFlow/MethodContracts/contract.IFMethodContract(contract.IFMethodContract__secure_if_high_n5_n1()).Non-interference contract.0.m.key")
                .provable("./InformationFlow/MethodContracts/contract.IFMethodContract(contract.IFMethodContract__secure_if_high_n1()).Non-interference contract.0.m.key")
                .provable("./InformationFlow/MethodContracts/contract.IFMethodContract(contract.IFMethodContract__secure_n5()).Non-interference contract.0.m.key")
                .provable("./InformationFlow/MethodContracts/contract.IFMethodContract(contract.IFMethodContract__n4()).Non-interference contract.0.m.key")
                .provable("./InformationFlow/MethodContracts/contract.IFMethodContract(contract.IFMethodContract__n3()).Non-interference contract.0.m.key")
                .provable("./InformationFlow/MethodContracts/contract.IFMethodContract(contract.IFMethodContract__secure_sequential_n3_precond_n4()).Non-interference contract.0.m.key")
                .notprovable("./InformationFlow/MethodContracts/contract.IFMethodContract(contract.IFMethodContract__insecure_assignment_n2()).Non-interference contract.0.m.key")
                .provable("./InformationFlow/MethodContracts/contract.IFMethodContract(contract.IFMethodContract__secure_assignments_n2()).Non-interference contract.0.m.key")
                .provable("./InformationFlow/MethodContracts/contract.IFMethodContract(contract.IFMethodContract__n2()).Non-interference contract.0.m.key")
                .provable("./InformationFlow/MethodContracts/contract.IFMethodContract(contract.IFMethodContract__n1()).Non-interference contract.0.m.key")
                .provable("./InformationFlow/MethodContracts/contract.IFMethodContract(contract.IFMethodContract__secure_sequential_n1_n2()).Non-interference contract.0.m.key");


        c.addGroup("InformationFlow_fullmacro")
                .notprovable("./InformationFlow/LoopInvariants/loop.IFLoopExamples(loop.IFLoopExamples__insecure_while_3(int)).Non-interference contract.0.m.key")
                .provable("./InformationFlow/LoopInvariants/loop.IFLoopExamples(loop.IFLoopExamples__secure_while_2(int)).Non-interference contract.0.m.key")
                .provable("./InformationFlow/LoopInvariants/loop.IFLoopExamples(loop.IFLoopExamples__secure_while_4(int)).Non-interference contract.0.m.key")
                .notprovable("./InformationFlow/LoopInvariants/loop.IFLoopExamples(loop.IFLoopExamples__insecure_doubleNestedWhile2(int)).Non-interference contract.0.m.key")
                .notprovable("./InformationFlow/LoopInvariants/loop.IFLoopExamples(loop.IFLoopExamples__insecure_doubleNestedWhile(int)).Non-interference contract.0.m.key")
                .provable("./InformationFlow/LoopInvariants/loop.IFLoopExamples(loop.IFLoopExamples__secure_doubleNestedWhile(int)).Non-interference contract.0.m.key")
                .provable("./InformationFlow/LoopInvariants/loop.IFLoopExamples(loop.IFLoopExamples__secure_nestedTwoWhile(int)).Non-interference contract.0.m.key")
                .provable("./InformationFlow/LoopInvariants/loop.IFLoopExamples(loop.IFLoopExamples__secure_nestedWhile(int)).Non-interference contract.0.m.key")
                .notprovable("./InformationFlow/LoopInvariants/loop.IFLoopExamples(loop.IFLoopExamples__notSecure_while(int)).Non-interference contract.0.m.key")
                .notprovable("./InformationFlow/LoopInvariants/loop.IFLoopExamples(loop.IFLoopExamples__notSecure_while_wrongInv(int)).Non-interference contract.0.m.key")
                .notprovable("./InformationFlow/LoopInvariants/loop.IFLoopExamples(loop.IFLoopExamples__insecure_twoWhile(int)).Non-interference contract.0.m.key")
                .notprovable("./InformationFlow/LoopInvariants/loop.IFLoopExamples(loop.IFLoopExamples__insecure_twoWhile_2(int)).Non-interference contract.0.m.key")
                .provable("./InformationFlow/LoopInvariants/loop.IFLoopExamples(loop.IFLoopExamples__secure_twoWhile(int)).Non-interference contract.0.m.key")
                .provable("./InformationFlow/LoopInvariants/loop.IFLoopExamples(loop.IFLoopExamples__loc_secure_while(int)).Non-interference contract.0.m.key")
                .provable("./InformationFlow/LoopInvariants/loop.IFLoopExamples(loop.IFLoopExamples__secure_while(int)).Non-interference contract.0.m.key")
                .provable("./InformationFlow/LoopInvariants/loop.IFLoopExamples(loop.IFLoopExamples__print(int)).Non-interference contract.0.m.key")
                .provable("./InformationFlow/LoopInvariants/loop.IFLoopExamples(loop.IFLoopExamples__hammer(int)).Non-interference contract.0.m.key");


        c.addGroup("MiniExamples_fullmacro")
                .notprovable("./InformationFlow/MiniExamples/mini.AliasingExamples(mini.AliasingExamples__insecure_1(mini.AliasingExamples,mini.AliasingExamples,int)).Non-interference contract.0.m.key")
                .provable("./InformationFlow/MiniExamples/mini.AliasingExamples(mini.AliasingExamples__secure_1(mini.AliasingExamples,mini.AliasingExamples,int)).Non-interference contract.0.m.key")
                .provable("./InformationFlow/MiniExamples/mini.MiniExamplesLecture(mini.MiniExamplesLecture__m_6()).Non-interference contract.0.m.key")
                .provable("./InformationFlow/MiniExamples/mini.MiniExamplesLecture(mini.MiniExamplesLecture__m_5()).Non-interference contract.0.m.key")
                .provable("./InformationFlow/MiniExamples/mini.MiniExamplesLecture(mini.MiniExamplesLecture__m_4()).Non-interference contract.0.m.key")
                .notprovable("./InformationFlow/MiniExamples/mini.MiniExamplesLecture(mini.MiniExamplesLecture__m_3()).Non-interference contract.0.m.key")
                .provable("./InformationFlow/MiniExamples/mini.MiniExamplesLecture(mini.MiniExamplesLecture__m_2()).Non-interference contract.0.m.key")
                .notprovable("./InformationFlow/MiniExamples/mini.MiniExamplesLecture(mini.MiniExamplesLecture__m_1()).Non-interference contract.0.m.key")
                .notprovable("./InformationFlow/MiniExamples/mini.DifferenceSeqLocset(mini.DifferenceSeqLocset__m()).Non-interference contract.1.m.key")
                .notprovable("./InformationFlow/MiniExamples/mini.DifferenceSeqLocset(mini.DifferenceSeqLocset__m()).Non-interference contract.0.m.key")
                .provable("./InformationFlow/MiniExamples/mini.MiniExamples(mini.MiniExamples__secure_p2_8()).Non-interference contract.0.m.key")
                .provable("./InformationFlow/MiniExamples/mini.MiniExamples(mini.MiniExamples__secure_parameter(int)).Non-interference contract.0.m.key")
                .provable("./InformationFlow/MiniExamples/mini.MiniExamples(mini.MiniExamples__secure_p2_7()).Non-interference contract.0.m.key")
                .notprovable("./InformationFlow/MiniExamples/mini.MiniExamples(mini.MiniExamples__insecure_p2_2()).Non-interference contract.0.m.key")
                .provable("./InformationFlow/MiniExamples/mini.MiniExamples(mini.MiniExamples__secure_p2_6()).Non-interference contract.0.m.key")
                .provable("./InformationFlow/MiniExamples/mini.MiniExamples(mini.MiniExamples__secure_p2_5()).Non-interference contract.0.m.key")
                .provable("./InformationFlow/MiniExamples/mini.MiniExamples(mini.MiniExamples__secure_p2_4()).Non-interference contract.0.m.key")
                .provable("./InformationFlow/MiniExamples/mini.MiniExamples(mini.MiniExamples__secure_p2_3()).Non-interference contract.0.m.key")
                .provable("./InformationFlow/MiniExamples/mini.MiniExamples(mini.MiniExamples__secure_p2_2()).Non-interference contract.0.m.key")
                .provable("./InformationFlow/MiniExamples/mini.MiniExamples(mini.MiniExamples__secure_p2_1()).Non-interference contract.0.m.key")
                .notprovable("./InformationFlow/MiniExamples/mini.MiniExamples(mini.MiniExamples__insecure_p2_1()).Non-interference contract.0.m.key")
                .provable("./InformationFlow/MiniExamples/mini.MiniExamples(mini.MiniExamples__secure_p1_6()).Non-interference contract.0.m.key")
                .provable("./InformationFlow/MiniExamples/mini.MiniExamples(mini.MiniExamples__secure_p1_5()).Non-interference contract.0.m.key")
                .provable("./InformationFlow/MiniExamples/mini.MiniExamples(mini.MiniExamples__secure_p1_4()).Non-interference contract.0.m.key")
                .provable("./InformationFlow/MiniExamples/mini.MiniExamples(mini.MiniExamples__secure_p1_3()).Non-interference contract.0.m.key")
                .provable("./InformationFlow/MiniExamples/mini.MiniExamples(mini.MiniExamples__secure_p1_2()).Non-interference contract.0.m.key")
                .provable("./InformationFlow/MiniExamples/mini.MiniExamples(mini.MiniExamples__secure_p1_1()).Non-interference contract.1.m.key")
                .provable("./InformationFlow/MiniExamples/mini.MiniExamples(mini.MiniExamples__secure_p1_1()).Non-interference contract.0.m.key")
                .notprovable("./InformationFlow/MiniExamples/mini.MiniExamples(mini.MiniExamples__insecure_p1_2()).Non-interference contract.0.m.key")
                .notprovable("./InformationFlow/MiniExamples/mini.MiniExamples(mini.MiniExamples__insecure_p1_1()).Non-interference contract.0.m.key");


        c.addGroup("NewObjects_fullmacro")
                .provable("./InformationFlow/NewObjects/object.AmtoftBanerjee3(object.AmtoftBanerjee3__m()).Non-interference contract.0.m.key")
                .provable("./InformationFlow/NewObjects/object.AmtoftBanerjee(object.AmtoftBanerjee__m_2()).Non-interference contract.0.m.key")
                .notprovable("./InformationFlow/NewObjects/object.AmtoftBanerjee(object.AmtoftBanerjee__m_1()).Non-interference contract.1.m.key")
                .provable("./InformationFlow/NewObjects/object.AmtoftBanerjee(object.AmtoftBanerjee__m_1()).Non-interference contract.0.m.key")
                .provable("./InformationFlow/NewObjects/object.AmtoftBanerjee(object.AmtoftBanerjee__getQ()).Non-interference contract.0.m.key")
                .provable("./InformationFlow/NewObjects/object.Naumann(object.Naumann__Pair_m(int,int)).Non-interference contract.0.m.key")
                .provable("./InformationFlow/NewObjects/object.ObjectOrientation(object.ObjectOrientation__secure_while_i((Ljava.lang.Object)).Non-interference contract.0.m.key")
                .provable("./InformationFlow/NewObjects/object.ObjectOrientation(object.ObjectOrientation__secure_method_call()).Non-interference contract.0.m.key")
                .notprovable("./InformationFlow/NewObjects/object.ObjectOrientation(object.ObjectOrientation__if_two_object_creation_next()).Non-interference contract.1.m.key")
                .provable("./InformationFlow/NewObjects/object.ObjectOrientation(object.ObjectOrientation__if_two_object_creation_next()).Non-interference contract.0.m.key")
                .provable("./InformationFlow/NewObjects/object.ObjectOrientation(object.ObjectOrientation__secure_if_two_object_creation()).Non-interference contract.0.m.key")
                .notprovable("./InformationFlow/NewObjects/object.ObjectOrientation(object.ObjectOrientation__insecure_two_object_creation()).Non-interference contract.0.m.key")
                .provable("./InformationFlow/NewObjects/object.ObjectOrientation(object.ObjectOrientation__secure_two_object_creation()).Non-interference contract.0.m.key")
                .notprovable("./InformationFlow/NewObjects/object.ObjectOrientation(object.ObjectOrientation__insecure_object_assignment()).Non-interference contract.1.m.key")
                .notprovable("./InformationFlow/NewObjects/object.ObjectOrientation(object.ObjectOrientation__insecure_object_assignment()).Non-interference contract.0.m.key")
                .provable("./InformationFlow/NewObjects/object.ObjectOrientation(object.ObjectOrientation__secure_object_creation_3()).Non-interference contract.0.m.key")
                .provable("./InformationFlow/NewObjects/object.ObjectOrientation(object.ObjectOrientation__secure_object_creation_2()).Non-interference contract.0.m.key")
                .provable("./InformationFlow/NewObjects/object.ObjectOrientation(object.ObjectOrientation__secure_object_creation()).Non-interference contract.0.m.key")
                .provable("./InformationFlow/NewObjects/object.AmtoftBanerjee2(object.AmtoftBanerjee2__expensive(int)).Non-interference contract.0.m.key")
                .provable("./InformationFlow/NewObjects/object.AmtoftBanerjee2(object.AmtoftBanerjee2__cexp(int)).Non-interference contract.0.m.key");


        c.addGroup("SimpleEvoting_fullmacro")
                .provable("./InformationFlow/SimpleEvoting/simple_evoting.Environment(simple_evoting.Environment__untrustedOutputMessage((B)).Non-interference contract.0.m.key")
                // .provable( "./InformationFlow/SimpleEvoting/simple_evoting.Environment(simple_evoting.Environment__untrustedInputMessage((B)).Non-interference contract.0.m.key")
                .provable("./InformationFlow/SimpleEvoting/simple_evoting.Environment(simple_evoting.Environment__untrustedInputMessage()).Non-interference contract.0.m.key")
                .provable("./InformationFlow/SimpleEvoting/simple_evoting.Environment(simple_evoting.Environment__untrustedOutput(int)).Non-interference contract.0.m.key")
                .notprovable("./InformationFlow/SimpleEvoting/simple_evoting.Environment(simple_evoting.Environment__untrustedInput(int)).Non-interference contract.0.m.key")
                .notprovable("./InformationFlow/SimpleEvoting/simple_evoting.Environment(simple_evoting.Environment__untrustedInput()).Non-interference contract.0.m.key")
                .provable("./InformationFlow/SimpleEvoting/simple_evoting.SMT(simple_evoting.SMT__send(simple_evoting.Message,int,simple_evoting.Server)).Non-interference contract.1.m.key")
                .provable("./InformationFlow/SimpleEvoting/simple_evoting.SMT(simple_evoting.SMT__send(simple_evoting.Message,int,simple_evoting.Server)).Non-interference contract.0.m.key")
                .provable("./InformationFlow/SimpleEvoting/simple_evoting.SMTEnv(simple_evoting.SMTEnv__send(int,int,int,simple_evoting.Server,int)).Non-interference contract.0.m.key")
                .provable("./InformationFlow/SimpleEvoting/simple_evoting.NetworkClient(simple_evoting.NetworkClient__send((B,simple_evoting.Server,int)).Non-interference contract.0.m.key")
                // .provable( "./InformationFlow/SimpleEvoting/simple_evoting.Setup(simple_evoting.Setup__publishResult()).Non-interference contract.0.m.key")
                // .provable( "./InformationFlow/SimpleEvoting/simple_evoting.Setup(simple_evoting.Setup__main()).Non-interference contract.0.m.key")
                .provable("./InformationFlow/SimpleEvoting/simple_evoting.Voter(simple_evoting.Voter__onSendBallot(simple_evoting.Server)).Non-interference contract.1.m.key")
                .provable("./InformationFlow/SimpleEvoting/simple_evoting.Voter(simple_evoting.Voter__onSendBallot(simple_evoting.Server)).Non-interference contract.0.m.key");
        return c;
    }

    public static ProofCollection getPerformanceCollection() {
        ProofCollection c = new ProofCollection();
        c.addGroup("performance")
                .provable("./performance-test/AccessChain1(AccessChain1__foo_01()).JML_operation_contract.0.key")
                .provable("./performance-test/AccessChain1(AccessChain1__foo_02()).JML_operation_contract.0.key")
                .provable("./performance-test/AccessChain1(AccessChain1__foo_03()).JML_operation_contract.0.key")
                .provable("./performance-test/AccessChain1(AccessChain1__foo_04()).JML_operation_contract.0.key")
                .provable("./performance-test/AccessChain1(AccessChain1__foo_05()).JML_operation_contract.0.key")
                .provable("./performance-test/AccessChain1(AccessChain1__foo_06()).JML_operation_contract.0.key")
                .provable("./performance-test/AccessChain1(AccessChain1__foo_07()).JML_operation_contract.0.key")
                .provable("./performance-test/AccessChain1(AccessChain1__foo_08()).JML_operation_contract.0.key")
                .provable("./performance-test/AccessChain1(AccessChain1__foo_09()).JML_operation_contract.0.key")
                .provable("./performance-test/AccessChain1(AccessChain1__foo_10()).JML_operation_contract.0.key")
                .provable("./performance-test/AccessChain1(AccessChain1__foo_20()).JML_operation_contract.0.key")
                .provable("./performance-test/AccessChain2(AccessChain2__foo_01()).JML_operation_contract.0.key")
                .provable("./performance-test/AccessChain2(AccessChain2__foo_02()).JML_operation_contract.0.key")
                .provable("./performance-test/AccessChain2(AccessChain2__foo_03()).JML_operation_contract.0.key")
                .provable("./performance-test/AccessChain2(AccessChain2__foo_04()).JML_operation_contract.0.key")
                .provable("./performance-test/AccessChain2(AccessChain2__foo_05()).JML_operation_contract.0.key")
                .provable("./performance-test/AccessChain2(AccessChain2__foo_06()).JML_operation_contract.0.key")
                .provable("./performance-test/AccessChain2(AccessChain2__foo_07()).JML_operation_contract.0.key")
                .provable("./performance-test/AccessChain2(AccessChain2__foo_08()).JML_operation_contract.0.key")
                .provable("./performance-test/AccessChain2(AccessChain2__foo_09()).JML_operation_contract.0.key")
                .provable("./performance-test/AccessChain2(AccessChain2__foo_10()).JML_operation_contract.0.key")
                .provable("./performance-test/AccessChain2(AccessChain2__foo_20()).JML_operation_contract.0.key")
                .provable("./performance-test/AccessChain4(AccessChain4__foo_01()).JML_operation_contract.0.key")
                .provable("./performance-test/AccessChain4(AccessChain4__foo_02()).JML_operation_contract.0.key")
                .provable("./performance-test/AccessChain4(AccessChain4__foo_03()).JML_operation_contract.0.key")
                .provable("./performance-test/AccessChain4(AccessChain4__foo_04()).JML_operation_contract.0.key")
                .provable("./performance-test/AccessChain4(AccessChain4__foo_05()).JML_operation_contract.0.key")
                .provable("./performance-test/AccessChain4(AccessChain4__foo_06()).JML_operation_contract.0.key")
                .provable("./performance-test/AccessChain4(AccessChain4__foo_07()).JML_operation_contract.0.key")
                .provable("./performance-test/AccessChain4(AccessChain4__foo_08()).JML_operation_contract.0.key")
                .provable("./performance-test/AccessChain4(AccessChain4__foo_09()).JML_operation_contract.0.key")
                .provable("./performance-test/AccessChain4(AccessChain4__foo_10()).JML_operation_contract.0.key")
                .provable("./performance-test/AccessChain4(AccessChain4__foo_20()).JML_operation_contract.0.key")
                .provable("./performance-test/Disjoint(Disjoint__disjoint_01()).JML_operation_contract.0.key")
                .provable("./performance-test/Disjoint(Disjoint__disjoint_02()).JML_operation_contract.0.key")
                .provable("./performance-test/Disjoint(Disjoint__disjoint_03()).JML_operation_contract.0.key")
                .provable("./performance-test/Disjoint(Disjoint__disjoint_04()).JML_operation_contract.0.key")
                .provable("./performance-test/Disjoint(Disjoint__disjoint_05()).JML_operation_contract.0.key")
                .provable("./performance-test/Disjoint(Disjoint__disjoint_06()).JML_operation_contract.0.key")
                .provable("./performance-test/Disjoint(Disjoint__disjoint_07()).JML_operation_contract.0.key")
                .provable("./performance-test/Disjoint(Disjoint__disjoint_08()).JML_operation_contract.0.key")
                .provable("./performance-test/Disjoint(Disjoint__disjoint_09()).JML_operation_contract.0.key")
                .provable("./performance-test/Disjoint(Disjoint__disjoint_10()).JML_operation_contract.0.key")
                .provable("./performance-test/Disjoint(Disjoint__disjoint_20()).JML_operation_contract.0.key")
                .provable("./performance-test/Disjoint(Disjoint__disjoint2_01()).JML_operation_contract.0.key")
                .provable("./performance-test/Disjoint(Disjoint__disjoint2_02()).JML_operation_contract.0.key")
                .provable("./performance-test/Disjoint(Disjoint__disjoint2_03()).JML_operation_contract.0.key")
                .provable("./performance-test/Disjoint(Disjoint__disjoint2_04()).JML_operation_contract.0.key")
                .provable("./performance-test/Disjoint(Disjoint__disjoint2_05()).JML_operation_contract.0.key")
                .provable("./performance-test/Disjoint(Disjoint__disjoint2_06()).JML_operation_contract.0.key")
                .provable("./performance-test/Disjoint(Disjoint__disjoint2_07()).JML_operation_contract.0.key")
                .provable("./performance-test/Disjoint(Disjoint__disjoint2_08()).JML_operation_contract.0.key")
                .provable("./performance-test/Disjoint(Disjoint__disjoint2_09()).JML_operation_contract.0.key")
                .provable("./performance-test/Disjoint(Disjoint__disjoint2_10()).JML_operation_contract.0.key")
                .provable("./performance-test/Disjoint(Disjoint__disjoint2_20()).JML_operation_contract.0.key")
                .provable("./performance-test/Disjoint(Disjoint__xZero_01()).JML_operation_contract.0.key")
                .provable("./performance-test/Disjoint(Disjoint__xZero_02()).JML_operation_contract.0.key")
                .provable("./performance-test/Disjoint(Disjoint__xZero_03()).JML_operation_contract.0.key")
                .provable("./performance-test/Disjoint(Disjoint__xZero_04()).JML_operation_contract.0.key")
                .provable("./performance-test/Disjoint(Disjoint__xZero_05()).JML_operation_contract.0.key")
                .provable("./performance-test/Disjoint(Disjoint__xZero_06()).JML_operation_contract.0.key")
                .provable("./performance-test/Disjoint(Disjoint__xZero_07()).JML_operation_contract.0.key")
                .provable("./performance-test/Disjoint(Disjoint__xZero_08()).JML_operation_contract.0.key")
                .provable("./performance-test/Disjoint(Disjoint__xZero_09()).JML_operation_contract.0.key")
                .provable("./performance-test/Disjoint(Disjoint__xZero_10()).JML_operation_contract.0.key")
                .provable("./performance-test/Disjoint(Disjoint__xZero_20()).JML_operation_contract.0.key")
                .provable("./performance-test/Dynamic2(Dynamic2__foo_01()).JML_operation_contract.0.key")
                .provable("./performance-test/Dynamic2(Dynamic2__foo_02()).JML_operation_contract.0.key")
                .provable("./performance-test/Dynamic2(Dynamic2__foo_03()).JML_operation_contract.0.key")
                .provable("./performance-test/Dynamic2(Dynamic2__foo_04()).JML_operation_contract.0.key")
                .provable("./performance-test/Dynamic2(Dynamic2__foo_05()).JML_operation_contract.0.key")
                .provable("./performance-test/Dynamic2(Dynamic2__foo_06()).JML_operation_contract.0.key")
// these cannot be proven within 100,000 steps currently
//.provable("./performance-test/Dynamic2(Dynamic2__foo_07()).JML_operation_contract.0.key")
//.provable("./performance-test/Dynamic2(Dynamic2__foo_08()).JML_operation_contract.0.key")
//.provable("./performance-test/Dynamic2(Dynamic2__foo_09()).JML_operation_contract.0.key")
//.provable("./performance-test/Dynamic2(Dynamic2__foo_10()).JML_operation_contract.0.key")
//.provable("./performance-test/Dynamic2(Dynamic2__foo_20()).JML_operation_contract.0.key")
                .provable("./performance-test/Dynamic(Dynamic__foo_01()).JML_operation_contract.0.key")
                .provable("./performance-test/Dynamic(Dynamic__foo_02()).JML_operation_contract.0.key")
                .provable("./performance-test/Dynamic(Dynamic__foo_03()).JML_operation_contract.0.key")
                .provable("./performance-test/Dynamic(Dynamic__foo_04()).JML_operation_contract.0.key")
                .provable("./performance-test/Dynamic(Dynamic__foo_05()).JML_operation_contract.0.key")
                .provable("./performance-test/Dynamic(Dynamic__foo_06()).JML_operation_contract.0.key")
                .provable("./performance-test/Dynamic(Dynamic__foo_07()).JML_operation_contract.0.key")
                .provable("./performance-test/Dynamic(Dynamic__foo_08()).JML_operation_contract.0.key")
                .provable("./performance-test/Dynamic(Dynamic__foo_09()).JML_operation_contract.0.key")
                .provable("./performance-test/Dynamic(Dynamic__foo_10()).JML_operation_contract.0.key")
                .provable("./performance-test/Dynamic(Dynamic__foo_20()).JML_operation_contract.0.key")
                .provable("./performance-test/DynamicGhost(DynamicGhost__dynamicGhost_01()).JML_normal_behavior_operation_contract.0.key")
                .provable("./performance-test/DynamicGhost(DynamicGhost__dynamicGhost_02()).JML_normal_behavior_operation_contract.0.key")
                .provable("./performance-test/DynamicGhost(DynamicGhost__dynamicGhost_03()).JML_normal_behavior_operation_contract.0.key")
                .provable("./performance-test/DynamicGhost(DynamicGhost__dynamicGhost_04()).JML_normal_behavior_operation_contract.0.key")
                .provable("./performance-test/DynamicGhost(DynamicGhost__dynamicGhost_05()).JML_normal_behavior_operation_contract.0.key")
                .provable("./performance-test/DynamicGhost(DynamicGhost__dynamicGhost_06()).JML_normal_behavior_operation_contract.0.key")
                .provable("./performance-test/DynamicGhost(DynamicGhost__dynamicGhost_07()).JML_normal_behavior_operation_contract.0.key")
                .provable("./performance-test/DynamicGhost(DynamicGhost__dynamicGhost_08()).JML_normal_behavior_operation_contract.0.key")
                .provable("./performance-test/DynamicGhost(DynamicGhost__dynamicGhost_09()).JML_normal_behavior_operation_contract.0.key")
                .provable("./performance-test/DynamicGhost(DynamicGhost__dynamicGhost_10()).JML_normal_behavior_operation_contract.0.key")
                .provable("./performance-test/DynamicGhost(DynamicGhost__dynamicGhost_20()).JML_normal_behavior_operation_contract.0.key")
                .provable("./performance-test/GhostFrame(GhostFrame__foo_01()).JML_operation_contract.0.key")
                .provable("./performance-test/GhostFrame(GhostFrame__foo_02()).JML_operation_contract.0.key")
                .provable("./performance-test/GhostFrame(GhostFrame__foo_03()).JML_operation_contract.0.key")
                .provable("./performance-test/GhostFrame(GhostFrame__foo_04()).JML_operation_contract.0.key")
                .provable("./performance-test/GhostFrame(GhostFrame__foo_05()).JML_operation_contract.0.key")
                .provable("./performance-test/GhostFrame(GhostFrame__foo_06()).JML_operation_contract.0.key")
                .provable("./performance-test/GhostFrame(GhostFrame__foo_07()).JML_operation_contract.0.key")
                .provable("./performance-test/GhostFrame(GhostFrame__foo_08()).JML_operation_contract.0.key")
                .provable("./performance-test/GhostFrame(GhostFrame__foo_09()).JML_operation_contract.0.key")
                .provable("./performance-test/GhostFrame(GhostFrame__foo_10()).JML_operation_contract.0.key")
                .provable("./performance-test/GhostFrame(GhostFrame__foo_20()).JML_operation_contract.0.key")
                .provable("./performance-test/Inc2(Inc2__foo_01()).JML_operation_contract.0.key")
                .provable("./performance-test/Inc2(Inc2__foo_02()).JML_operation_contract.0.key")
                .provable("./performance-test/Inc2(Inc2__foo_03()).JML_operation_contract.0.key")
                .provable("./performance-test/Inc2(Inc2__foo_04()).JML_operation_contract.0.key")
                .provable("./performance-test/Inc2(Inc2__foo_05()).JML_operation_contract.0.key")
                .provable("./performance-test/Inc2(Inc2__foo_06()).JML_operation_contract.0.key")
                .provable("./performance-test/Inc2(Inc2__foo_07()).JML_operation_contract.0.key")
                .provable("./performance-test/Inc2(Inc2__foo_08()).JML_operation_contract.0.key")
                .provable("./performance-test/Inc2(Inc2__foo_09()).JML_operation_contract.0.key")
                .provable("./performance-test/Inc2(Inc2__foo_10()).JML_operation_contract.0.key")
                .provable("./performance-test/Inc2(Inc2__foo_20()).JML_operation_contract.0.key")
                .provable("./performance-test/Inc2(Inc2__foo_40()).JML_operation_contract.0.key")
                .provable("./performance-test/Inc(Inc__foo_01()).JML_operation_contract.0.key")
                .provable("./performance-test/Inc(Inc__foo_02()).JML_operation_contract.0.key")
                .provable("./performance-test/Inc(Inc__foo_03()).JML_operation_contract.0.key")
                .provable("./performance-test/Inc(Inc__foo_04()).JML_operation_contract.0.key")
                .provable("./performance-test/Inc(Inc__foo_05()).JML_operation_contract.0.key")
                .provable("./performance-test/Inc(Inc__foo_06()).JML_operation_contract.0.key")
                .provable("./performance-test/Inc(Inc__foo_07()).JML_operation_contract.0.key")
                .provable("./performance-test/Inc(Inc__foo_08()).JML_operation_contract.0.key")
                .provable("./performance-test/Inc(Inc__foo_09()).JML_operation_contract.0.key")
                .provable("./performance-test/Inc(Inc__foo_10()).JML_operation_contract.0.key")
                .provable("./performance-test/Inc(Inc__foo_20()).JML_operation_contract.0.key")
                .provable("./performance-test/Modelfield(Modelfield__foo_01()).JML_operation_contract.0.key")
                .provable("./performance-test/Modelfield(Modelfield__foo_02()).JML_operation_contract.0.key")
                .provable("./performance-test/Modelfield(Modelfield__foo_03()).JML_operation_contract.0.key")
                .provable("./performance-test/Modelfield(Modelfield__foo_04()).JML_operation_contract.0.key")
                .provable("./performance-test/Modelfield(Modelfield__foo_05()).JML_operation_contract.0.key")
                .provable("./performance-test/Modelfield(Modelfield__foo_06()).JML_operation_contract.0.key")
                .provable("./performance-test/Modelfield(Modelfield__foo_07()).JML_operation_contract.0.key")
                .provable("./performance-test/Modelfield(Modelfield__foo_08()).JML_operation_contract.0.key")
                .provable("./performance-test/Modelfield(Modelfield__foo_09()).JML_operation_contract.0.key")
                .provable("./performance-test/Modelfield(Modelfield__foo_10()).JML_operation_contract.0.key")
                .provable("./performance-test/Modelfield(Modelfield__foo_20()).JML_operation_contract.0.key");
        return c;
    }

    public ProofCollection getDefaultAndPerformanceCollection() {
        ProofCollection c = new ProofCollection();
        c.addGroup("default")
                .provable("./newBook/09.list_modelfield/ArrayList.add.key")
                .provable("./newBook/09.list_modelfield/ArrayList.remFirst.key")
                .provable("./newBook/09.list_modelfield/ArrayList.empty.key")
                .provable("./newBook/09.list_modelfield/ArrayList.size.key")
                .provable("./newBook/09.list_modelfield/ArrayList.get.key")

// Comprehension Tests
                .provable("./heap/comprehensions/general_sum.key")
                .provable("./heap/comprehensions/sum0.key")
                .provable("./heap/comprehensions/sum1.key")
                .provable("./heap/comprehensions/sum2.key")
                .provable("./heap/comprehensions/sum3.key")
                .provable("./heap/comprehensions/segsum.key")
                .provable("./heap/comprehensions/bsum_negative.key")
                .provable("./heap/comprehensions/bsum_neg2.key")
                .provable("./heap/comprehensions/bsumSplit.key")
                .provable("./heap/comprehensions/bprodSplit.key")
                .notprovable("./heap/comprehensions/bsumSplitInvalid.key")

// Tests for rule application restrictions
                .provable("./heap/polarity_tests/wellformed1.key")
                .notprovable("./heap/polarity_tests/wellformed2.key")
                .provable("./heap/polarity_tests/wellformed3.key")
                .notprovable("./heap/polarity_tests/wellformed4.key")
                .provable("./heap/polarity_tests/wellformed5.key")
                .notprovable("./heap/polarity_tests/wellformed6.key")
                .provable("./heap/polarity_tests/wellformed7.key")
                .notprovable("./heap/polarity_tests/wellformed8.key")
                .provable("./heap/polarity_tests/wellformed9.key")
                .notprovable("./heap/polarity_tests/wellformed10.key")
                .notprovable("./heap/polarity_tests/wellformed11.key")


// Tests for block & loop contracts:
                .provable("./heap/block_contracts/Simple__add.key")
                .provable("./heap/block_contracts/Simple__addAbsoluteValues.key")
                .provable("./heap/block_contracts/Simple__addWithJump.key")
                .provable("./heap/block_contracts/Simple__addWithTwoBlockContracts.key")
                .provable("./heap/block_contracts/Simple__generateByteArray.key")
                .provable("./heap/block_contracts/Simple__getLength.key")
                .provable("./heap/block_contracts/Simple__square.key")
                .provable("./heap/block_contracts/Simple__unnecessaryBlockContract.key")
                .provable("./heap/block_contracts/Simple__unnecessaryLoopInvariant.key")
// the following test has a reload problem probably caused by the one-step-simplifier
// .provable("./heap/block_contracts/GreatestCommonDivisor.key")
                .provable("./standard_key/java_dl/jml-;assert/assert.key")
                .provable("./heap/block_loop_contracts/SimpleVariants/sum_onBlock_external.key")
                .provable("./heap/block_loop_contracts/SimpleVariants/sum_onBlock_internal.key")
                .provable("./heap/block_loop_contracts/SimpleVariants/sum_onBlock_loop.key")
                .provable("./heap/block_loop_contracts/SimpleVariants/sum_onLoop_external.key")
                .provable("./heap/block_loop_contracts/SimpleVariants/sum_onLoop_internal.key")
                .provable("./heap/block_loop_contracts/SimpleVariants/sum_onLoop_loop.key")
                .notprovable("./heap/block_loop_contracts/Finally/block_finally.key")
                .notprovable("./heap/block_loop_contracts/Finally/loop_finally.key")

// Other tests:
                .provable("./heap/fm12_01_LRS/lcp.key")
                .provable("./heap/SemanticSlicing/project.key")
                .provable("./heap/information_flow/ArrayList_contains.key")
                .provable("./heap/information_flow/ArrayList_get.key")
                .provable("./heap/information_flow/ArrayList_size.key")
                .provable("./heap/information_flow/UpdateAbstraction_ex7_3_secure.key")
                .provable("./heap/information_flow/UpdateAbstraction_ex7_4_secure.key")
                .provable("./heap/information_flow/UpdateAbstraction_ex7_5_secure.key")
                .provable("./heap/information_flow/UpdateAbstraction_ex7_6_secure.key")
                .provable("./heap/information_flow/UpdateAbstraction_ex9_secure.key")
                .provable("./heap/list/ArrayList_add.key")
                .provable("./heap/list/ArrayList_ArrayList.key")
                .provable("./heap/list/ArrayList_concatenate.key")
                .provable("./heap/list/ArrayList_contains_dep.key")
                .provable("./heap/list/ArrayList_enlarge.key")
                .provable("./heap/list/ArrayList_footprint.key")
                .provable("./heap/list/ArrayList_get_dep.key")
                .provable("./heap/list/ArrayList_get_exceptional.key")
                .provable("./heap/list/ArrayList_get_normal.key")
                .provable("./heap/list/ArrayList_inv.key")
                .provable("./heap/list/ArrayList_iterator.key")
                .provable("./heap/list/ArrayList_size_dep.key")
                .provable("./heap/list/ArrayList_size.key")
                .provable("./heap/list/ArrayList.ArrayListIterator_ArrayListIterator.key")
                .provable("./heap/list/ArrayList.ArrayListIterator_hasNext_dep.key")
                .provable("./heap/list/ArrayList.ArrayListIterator_hasNext.key")
                .provable("./heap/list/ArrayList.ArrayListIterator_inv.key")
                .provable("./heap/list/ArrayList.ArrayListIterator_list.key")
                .provable("./heap/list/ArrayList.ArrayListIterator_next_exceptional.key")
                .provable("./heap/list/ArrayList.ArrayListIterator_next_normal.key")
                .provable("./heap/list/ArrayList.ArrayListIterator_pos.key")
                .provable("./heap/list/Client_m.key")
                .provable("./heap/list/Client_n.key")
                .provable("./heap/list/LinkedList_get_exceptional.key")
                .provable("./heap/list/LinkedList_get_normal.key")
                .provable("./heap/list/LinkedList_LinkedList.key")
                .provable("./heap/list/LinkedList_size_dep.key")
                .provable("./heap/list/LinkedList_size.key")
                .provable("./heap/list/MySet_footprint.key")
                .provable("./heap/list/MySet_MySet.key")
                .provable("./heap/list_ghost/ArrayList_add.key")
                .provable("./heap/list_ghost/ArrayList_ArrayList.key")
                .provable("./heap/list_ghost/ArrayList_enlarge.key")
                .provable("./heap/list_ghost/ArrayList_get_dep.key")
                .provable("./heap/list_ghost/ArrayList_get_exceptional.key")
                .provable("./heap/list_ghost/ArrayList_get_normal.key")
                .provable("./heap/list_ghost/ArrayList_inv.key")
                .provable("./heap/list_ghost/ArrayList_size_dep.key")
                .provable("./heap/list_ghost/ArrayList_size.key")
                .provable("./heap/list_recursiveSpec/ListOperationsNonNull_getNextNN_normal_behavior.key")
                .provable("./heap/list_recursiveSpec/ListOperationsNonNull_setValueAt_normal_behavior.key")
                .provable("./heap/list_recursiveSpec/ListOperationsNonNull_remove_normal_behavior.key")
                .provable("./heap/list_seq/SimplifiedLinkedList.remove.key")
                .provable("./heap/observer/ExampleObserver_ExampleObserver.key")
                .provable("./heap/observer/ExampleObserver_inv.key")
                .provable("./heap/observer/ExampleObserver_subject.key")
                .provable("./heap/observer/ExampleObserver_update.key")
                .provable("./heap/observer/ExampleObserver_upToDate.key")
                .provable("./heap/observer/ExampleObserver_value.key")
                .provable("./heap/observer/ExampleSubject_addObserver.key")
                .provable("./heap/observer/ExampleSubject_change.key")
                .provable("./heap/observer/ExampleSubject_ExampleSubject.key")
                .provable("./heap/observer/ExampleSubject_footprint.key")
                .provable("./heap/observer/ExampleSubject_inv.key")
                .provable("./heap/observer/ExampleSubject_notifyObservers.key")
                .provable("./heap/observer/ExampleSubject_value_dep.key")
                .provable("./heap/observer/ExampleSubject_value.key")
                .provable("./heap/removeDups/arrayPart.key")
                .provable("./heap/removeDups/contains.key")
                .provable("./heap/removeDups/removeDup.key")
                .provable("./heap/saddleback_search/Saddleback_search.key")
                .provable("./heap/simple/anonymise_datagroup.key")
                .provable("./heap/simple/array_creation.key")
                .provable("./heap/simple/arrays_with_disjoint_sorts.key")
                .provable("./heap/simple/arrays.key")
                .provable("./heap/simple/attributes.key")
                .provable("./heap/simple/constructor_contracts.key")
                .provable("./heap/simple/dependencies.key")
                .provable("./heap/simple/dependency_contracts.key")
                .provable("./heap/simple/invariant_preservation.key")
                .provable("./heap/simple/locsets.key")
                .provable("./heap/simple/loop1.key")
                .provable("./heap/simple/loop2.key")
                .provable("./heap/simple/modifies_datagroup.key")
                .provable("./heap/simple/modifies.key")
                .provable("./heap/simple/object_creation.key")
                .provable("./heap/simple/operation_contracts.key")
                .provable("./heap/simple/select_store.key")
                .provable("./heap/simple/selection_sort.key")
                .provable("./heap/simple/seq.key")
                .provable("./heap/SmansEtAl/ArrayList_add.key")
                .provable("./heap/SmansEtAl/ArrayList_ArrayList.key")
                .provable("./heap/SmansEtAl/ArrayList_footprint.key")
                .provable("./heap/SmansEtAl/ArrayList_get_dep.key")
                .provable("./heap/SmansEtAl/ArrayList_get.key")
                .provable("./heap/SmansEtAl/ArrayList_inv.key")
                .provable("./heap/SmansEtAl/ArrayList_size_dep.key")
                .provable("./heap/SmansEtAl/ArrayList_size.key")
                .provable("./heap/SmansEtAl/Cell_Cell.key")
                .provable("./heap/SmansEtAl/Cell_footprint.key")
                .provable("./heap/SmansEtAl/Cell_getX_dep.key")
                .provable("./heap/SmansEtAl/Cell_getX.key")
                .provable("./heap/SmansEtAl/Cell_inv.key")
                .provable("./heap/SmansEtAl/Cell_setX.key")
                .provable("./heap/SmansEtAl/CellClient_m.key")
                .provable("./heap/SmansEtAl/Iterator_footprint.key")
                .provable("./heap/SmansEtAl/Iterator_hasNext_dep.key")
                .provable("./heap/SmansEtAl/Iterator_hasNext.key")
                .provable("./heap/SmansEtAl/Iterator_inv.key")
                .provable("./heap/SmansEtAl/Iterator_Iterator.key")
                .provable("./heap/SmansEtAl/Iterator_list_dep.key")
                .provable("./heap/SmansEtAl/Iterator_list.key")
                .provable("./heap/SmansEtAl/Iterator_next.key")
                .provable("./heap/SmansEtAl/Stack_footprint.key")
                .provable("./heap/SmansEtAl/Stack_inv.key")
                .provable("./heap/SmansEtAl/Stack_push.key")
                .provable("./heap/SmansEtAl/Stack_size.key")
                .provable("./heap/SmansEtAl/Stack_Stack.key")
                .provable("./heap/SmansEtAl/Stack_switchContents.key")
                .provable("./heap/vacid0_01_SparseArray/Harness_sparseArrayTestHarness1.key")
                .provable("./heap/vacid0_01_SparseArray/Harness_sparseArrayTestHarness2.key")
                .provable("./heap/vacid0_01_SparseArray/MemoryAllocator_alloc_unsigned.key")
                .provable("./heap/vacid0_01_SparseArray/MemoryAllocator_alloc.key")
                .provable("./heap/vacid0_01_SparseArray/SparseArray_get_dep.key")
                .provable("./heap/vacid0_01_SparseArray/SparseArray_get.key")
                .provable("./heap/vacid0_01_SparseArray/SparseArray_inv.key")
                .provable("./heap/vacid0_01_SparseArray/SparseArray_SparseArray.key")
                .provable("./heap/vstte10_01_SumAndMax/SumAndMax_sumAndMax.key")
                .provable("./heap/vstte10_03_LinkedList/Node_cons.key")
                .provable("./heap/vstte10_03_LinkedList/Node_inv.key")
                .provable("./heap/vstte10_03_LinkedList/Node_search.key")
                .provable("./heap/vstte10_04_Queens/Queens_isConsistent.key")
                .provable("./heap/vstte10_04_Queens/Queens_nQueens.key")
                .provable("./heap/vstte10_05_Queue/AmortizedQueue_AmortizedQueue.key")
                .provable("./heap/vstte10_05_Queue/AmortizedQueue_front.key")
                .provable("./heap/vstte10_05_Queue/LinkedList_concat.key")
                .provable("./heap/vstte10_05_Queue/LinkedList_cons.key")
                .provable("./heap/vstte10_05_Queue/LinkedList_head.key")
                .provable("./heap/vstte10_05_Queue/LinkedList_inv.key")
                .provable("./heap/vstte10_05_Queue/LinkedList_length.key")
                .provable("./heap/vstte10_05_Queue/LinkedList_LinkedList1.key")
                .provable("./heap/vstte10_05_Queue/LinkedList_LinkedList2.key")
                .provable("./heap/vstte10_05_Queue/LinkedList_LinkedList3.key")
                .provable("./heap/vstte10_05_Queue/LinkedList_reverse.key")
                .provable("./heap/vstte10_05_Queue/LinkedList_tail.key")
                .provable("./heap/WeideEtAl_01_AddAndMultiply/AddAndMultiply_add.key")
                .provable("./heap/WeideEtAl_01_AddAndMultiply/AddAndMultiply_mul.key")
                .provable("./heap/WeideEtAl_02_BinarySearch/BinarySearch_search.key")
                .provable("./heap/Wellfounded/ackermann.key")
                .provable("./heap/strictly_pure/strictlyPureMethod.key")
                .provable("./heap/strictly_pure/useStrictlyPureMethod.key")
// this file contains Unicode symbols for logic operators
                .provable("./standard_key/unicode_test.key")
                .provable("./standard_key/arith/binomial1.key")
                .provable("./standard_key/arith/binomial2.key")
                .provable("./standard_key/arith/check_jdiv.key")
                .provable("./standard_key/arith/check_jdiv_concrete.key")
                .provable("./standard_key/arith/check_jdiv_instantiated.key")
                .provable("./standard_key/arith/check_jmod.key")
                .provable("./standard_key/arith/complexExpressions.key")
                .provable("./standard_key/arith/compound_unaryMinus.key")
                .provable("./standard_key/arith/computation.key")
                .provable("./standard_key/arith/cubicSum.key")
                .provable("./standard_key/arith/divByZero.key")
                .provable("./standard_key/arith/divisionAssoc.key")
                .provable("./standard_key/arith/divisionBy2.key")
                .provable("./standard_key/arith/euclidean/gcdHelp-post.key")
                .provable("./standard_key/arith/gemplusDecimal/add.key")
                .provable("./standard_key/arith/jdivevenodd.key")
                .provable("./standard_key/arith/median.key")
                .provable("./standard_key/arith/mod1.key")
                .provable("./standard_key/arith/mod2.key")
                .provable("./standard_key/arith/mod7.key")
                .provable("./standard_key/arith/overflow_hija.key")
                .provable("./standard_key/arith/poly_division0.key")
                .provable("./standard_key/arith/poly_division1.key")
                .provable("./standard_key/arrays/arrayStoreException/array2DimPrim.key")
                .provable("./standard_key/arrays/arrayStoreException/arrayStoreKnownDynType.key")
                .provable("./standard_key/arrays/arrayStoreException/reverseArray.key")
                .provable("./standard_key/arrays/arrayStoreException/throwArrayStoreException.key")
                .provable("./standard_key/arrays/creation/arrayCreation1.key")
                .provable("./standard_key/BookExamples/02FirstOrderLogic/Ex2.58.key")
                .provable("./standard_key/BookExamples/03DynamicLogic/Sect3.3.1.key")
                .provable("./standard_key/inEqSimp/division.key")
                .provable("./standard_key/inEqSimp/inequations0.key")
                .provable("./standard_key/inEqSimp/inequations1.key")
                .provable("./standard_key/inEqSimp/inequations2.key")
                .provable("./standard_key/inEqSimp/linApprox.key")
                .provable("./standard_key/inEqSimp/nonLinInEqExample0.key")
                .provable("./standard_key/inEqSimp/nonLinInEqExample2.key")
                .provable("./standard_key/inEqSimp/nonLinInEqExample3.key")
                .provable("./standard_key/inEqSimp/nonLinInEqExample4.key")
                .provable("./standard_key/inEqSimp/quadraticInEq.key")
                .provable("./standard_key/inEqSimp/quadraticInEq10.key")
                .provable("./standard_key/inEqSimp/quadraticInEq13.key")
                .provable("./standard_key/inEqSimp/quadraticInEq14.key")
                .provable("./standard_key/inEqSimp/quadraticInEq2.key")
                .provable("./standard_key/inEqSimp/quadraticInEq3.key")
                .provable("./standard_key/inEqSimp/quadraticInEq4.key")
                .provable("./standard_key/inEqSimp/quadraticInEq5.key")
                .provable("./standard_key/inEqSimp/quadraticInEq6.key")
                .provable("./standard_key/inEqSimp/quadraticInEq7.key")
                .provable("./standard_key/inEqSimp/quadraticInEq8.key")
                .provable("./standard_key/inEqSimp/simplify0.key")
                .provable("./standard_key/inEqSimp/simplify1.key")
                .provable("./standard_key/inEqSimp/simplify2.key")
                .provable("./standard_key/inEqSimp/simplify3.key")
                .provable("./standard_key/inEqSimp/simplify4.key")
                .provable("./standard_key/inEqSimp/simplify5.key")
                .provable("./standard_key/inEqSimp/subsumptionExample.key")
                .provable("./standard_key/instanceCreation/instanceCreation1.key")
                .provable("./standard_key/instanceCreation/instanceCreation2.key")
                .provable("./standard_key/instanceCreation/interfacesAndAbstractClassesHaveNoInstances.key")
                .provable("./standard_key/instanceCreation/successiveCreatedObjectsAreDistinct.key")
                .provable("./standard_key/instanceCreation/testOverloadingConstructors.key")
                .provable("./standard_key/java_dl/SimpleAttributes.key")
                .provable("./standard_key/java_dl/arrayMax.key")
                .provable("./standard_key/java_dl/arrayUpdateSimp.key")
                .provable("./standard_key/java_dl/attributes.key")
                .provable("./standard_key/java_dl/break.key")
                .provable("./standard_key/java_dl/char.key")
                .provable("./standard_key/java_dl/compileTimeConstants.key")
                .provable("./standard_key/java_dl/constructorException/test.key")
                .notprovable("./standard_key/java_dl/constructorException/regressionTestBug1333.key")
                .provable("./standard_key/java_dl/continue1.key")
                .provable("./standard_key/java_dl/continue2.key")
                .provable("./standard_key/java_dl/complexAssignment.key")
                .provable("./standard_key/java_dl/danglingElseSolution1.key")
                .provable("./standard_key/java_dl/danglingElseSolution2.key")
                .provable("./standard_key/java_dl/deepNonNull/deepNonNull0.key")
                .provable("./standard_key/java_dl/deepNonNull/deepNonNull1.key")
                .notprovable("./standard_key/java_dl/deepNonNull/deepNonNull2.key")
                .provable("./standard_key/java_dl/deepNonNull/deepNonNull3.key")
                .provable("./standard_key/java_dl/exceptions.key")
                .provable("./standard_key/java_dl/exceptions1.key")
                .provable("./standard_key/java_dl/exceptions2.key")
                .provable("./standard_key/java_dl/exceptions3.key")
                .provable("./standard_key/java_dl/exchange.key")
                .provable("./standard_key/java_dl/if.key")
                .provable("./standard_key/java_dl/incrementcounter.key")
// commented out - in the current handling of this references (from branch mostThisRef)
// inner classes do not work. According to Richard, there is a bug in handling inner classes
// that needs a non-trivial fix.
// .provable("./standard_key/java_dl/innerClasses/inner.key")
                .provable("./standard_key/java_dl/iteratedAssignment.key")
                .notprovable("./standard_key/java_dl/assert/assert1.key")
                .provable("./standard_key/java_dl/assert/assert2.key")
                .notprovable("./standard_key/java_dl/assert/assert3.key")
                .provable("./standard_key/java_dl/java5/vararg.key")
                .provable("./standard_key/java_dl/java5/for_Array.key")
                .provable("./standard_key/java_dl/java5/for_Iterable.key")
                .provable("./standard_key/java_dl/java5/for_ReferenceArray.key")
                .provable("./standard_key/java_dl/jml-bigint/cast.key")
// proof gets very long
// requires further investigations
                .provable("./standard_key/java_dl/jml-information-flow.key")
                .notprovable("./standard_key/java_dl/jml-min/min-unprovable1.key")
                .notprovable("./standard_key/java_dl/jml-min/min-unprovable2.key")
                .provable("./standard_key/java_dl/methodCall.key")
                .provable("./standard_key/java_dl/methodCall1.key")
                .provable("./standard_key/java_dl/methodCall1box.key")
                .provable("./standard_key/java_dl/methodCall2.key")
                .provable("./standard_key/java_dl/methodCall3.key")
                .provable("./standard_key/java_dl/polishFlagSort.key")
                .provable("./standard_key/java_dl/postConditionTaclets1.key")
                .provable("./standard_key/java_dl/postConditionTaclets2.key")
                .provable("./standard_key/java_dl/quantifiedQuery.key")
                .provable("./standard_key/java_dl/reverseArray.key")
                .provable("./standard_key/java_dl/reverseArray2.key")
                .provable("./standard_key/java_dl/simpleAssignment.key")
                .provable("./standard_key/java_dl/simpleAssignment2.key")
                .provable("./standard_key/java_dl/splittingWithQueries.key")
                .provable("./standard_key/java_dl/strassen/strassen.key")
                .provable("./standard_key/java_dl/symmArray.key")
                .provable("./standard_key/java_dl/testcontext.key")
                .provable("./standard_key/polySimp/simplify0.key")
                .provable("./standard_key/polySimp/simplify1.key")
                .provable("./standard_key/polySimp/simplify10.key")
                .provable("./standard_key/polySimp/simplify11.key")
                .provable("./standard_key/polySimp/simplify12.key")
                .provable("./standard_key/polySimp/simplify13.key")
                .provable("./standard_key/polySimp/simplify14.key")
                .provable("./standard_key/polySimp/simplify15.key")
                .provable("./standard_key/polySimp/simplify16.key")
                .provable("./standard_key/polySimp/simplify17.key")
                .provable("./standard_key/polySimp/simplify18.key")
                .provable("./standard_key/polySimp/simplify19.key")
                .provable("./standard_key/polySimp/simplify2.key")
                .provable("./standard_key/polySimp/simplify20.key")
                .provable("./standard_key/polySimp/simplify21.key")
                .provable("./standard_key/polySimp/simplify22.key")
                .provable("./standard_key/polySimp/simplify23.key")
                .provable("./standard_key/polySimp/simplify24.key")
                .provable("./standard_key/polySimp/simplify25.key")
                .provable("./standard_key/polySimp/simplify3.key")
                .provable("./standard_key/polySimp/simplify4.key")
                .provable("./standard_key/polySimp/simplify5.key")
                .provable("./standard_key/polySimp/simplify6.key")
                .provable("./standard_key/polySimp/simplify7.key")
                .provable("./standard_key/polySimp/simplify8.key")
                .provable("./standard_key/polySimp/simplify9.key")
                .provable("./standard_key/pred_log/count.key")
                .provable("./standard_key/pred_log/count2.key")
                .provable("./standard_key/pred_log/count3.key")
                .provable("./standard_key/pred_log/equalities.key")
                .provable("./standard_key/pred_log/equalities2.key")
                .provable("./standard_key/pred_log/equalities3.key")
// cannot be proven automatically (see bug //1248)
// .provable("./standard_key/pred_log/exist1.key")
                .provable("./standard_key/pred_log/functions.key")
                .provable("./standard_key/pred_log/mv1.key")
                .provable("./standard_key/pred_log/mv2.key")
                .provable("./standard_key/pred_log/quantifiers.key")
                .provable("./standard_key/pred_log/simpleEps.key")
                .provable("./standard_key/pred_log/steam1.key")
                .provable("./standard_key/pred_log/tptp/PUZ/PUZ001p1.key")
                .provable("./standard_key/pred_log/tptp/PUZ/PUZ001p1-eq.key")
                .provable("./standard_key/pred_log/tptp/PUZ/PUZ031p1.key")
                .provable("./standard_key/pred_log/tptp/SET/SET027p3.key")
                .provable("./standard_key/pred_log/tptp/SET/SET043p1.key")
// cannot be proven automatically (see bug //1248)
// .provable("./standard_key/pred_log/tptp/SET/SET044p1.key")
                .provable("./standard_key/pred_log/tptp/SET/SET045p1.key")
                .provable("./standard_key/pred_log/tptp/SET/SET062p3.key")
                .provable("./standard_key/pred_log/tptp/SET/SET063p3.key")
// cannot be proven automatically (see bug //1248)
// .provable("./standard_key/pred_log/tptp/SYN/SYN002m1.007.008.key")
                .provable("./standard_key/pred_log/tptp/SYN/SYN036p2.key")
// cannot be proven automatically (timeout, possibly due to bug //1248)
// .provable("./standard_key/pred_log/tptp/SYN/SYN548p1.key")
                .provable("./standard_key/pred_log/tptp/SYN/SYN550p1.key")
                .notprovable("./standard_key/prop_log/reallySimple.key")
                .notprovable("./standard_key/pred_log/sameName1.key")
                .provable("./standard_key/pred_log/jbyteIfEx.key")
                .provable("./standard_key/prop_log/allClausesLength4.key")
                .provable("./standard_key/prop_log/allClausesLength5.key")
                .provable("./standard_key/prop_log/doubleNeg.key")
                .provable("./standard_key/prop_log/simplest.key")
                .provable("./standard_key/prop_log/contraposition.key")
                .provable("./standard_key/quantifiers/elimination0.key")
                .provable("./standard_key/quantifiers/heuristic_PUZ001p1-eq.key")
                .provable("./standard_key/quantifiers/heuristic_PUZ001p1.key")
                .provable("./standard_key/quantifiers/heuristic_PUZ031p1.key")
                .provable("./standard_key/quantifiers/heuristic_SYN036p2.key")
                .provable("./standard_key/quantifiers/injectivity.key")
                .provable("./standard_key/quantifiers/normalisation0.key")
// commented out, does not prove on Jenkins, seems nondeterminism issue
// .provable("./standard_key/quantifiers/normalisation1.key")
                .provable("./standard_key/quantifiers/normalisation2.key")
                .provable("./standard_key/quantifiers/normalisation3.key")
                .provable("./standard_key/quantifiers/normalisation4.key")
                .provable("./standard_key/quantifiers/normalisation5.key")
                .provable("./standard_key/quantifiers/normalisation6.key")
                .provable("./standard_key/quantifiers/normalisation7.key")
                .provable("./standard_key/quantifiers/normalisation8.key")
                .provable("./standard_key/quantifiers/normalisation9.key")
                .provable("./standard_key/quantifiers/normalisation10.key")
//removed as long as we do not have a rule safely removing identical updates
//.provable("./standard_key/quantifiers/normalisation11.key")
                .provable("./standard_key/quantifiers/normalisation12.key")
                .provable("./standard_key/quantifiers/normalisation13.key")
                .provable("./standard_key/quantifiers/triggers0.key")
                .provable("./standard_key/staticInitialisation/cascadeStaticInitialisation.key")
                .provable("./standard_key/staticInitialisation/erroneousClassImpliesErroneousSubclass.key")
                .provable("./standard_key/staticInitialisation/initializedSubclassImpliesInitializedSuperclass.key")
                .provable("./standard_key/staticInitialisation/localDeclared.key")
                .provable("./standard_key/staticInitialisation/localDeclaredMethod.key")
                .provable("./standard_key/staticInitialisation/objectOfErroneousClass.key")
                .provable("./standard_key/staticInitialisation/staticInitialisersAreNonSimple.key")
                .provable("./standard_key/strings/charAt0.key")
                .provable("./standard_key/strings/charAt1.key")
                .provable("./standard_key/strings/concat1.key")
                .provable("./standard_key/strings/concat2.key")
                .provable("./standard_key/strings/deriveLength1.key")
                .provable("./standard_key/strings/emptyStringLengthZero.key")
                .provable("./standard_key/strings/implicitBooleanStringConversion.key")
                .provable("./standard_key/strings/implicitBooleanStringConversion2.key")
                .provable("./standard_key/strings/implicitIntStringConversion.key")
                .provable("./standard_key/strings/implicitNullStringConversion.key")
                .provable("./standard_key/strings/implicitNullStringConversion2.key")
                .provable("./standard_key/strings/implicitObjectStringConversion.key")
                .provable("./standard_key/strings/literalEquality.key")
                .provable("./standard_key/strings/replace0.key")
                .provable("./standard_key/strings/replace1.key")
                .provable("./standard_key/strings/simpleAssignment.key")
                .provable("./standard_key/strings/simpleLengthComp.key")
                .provable("./standard_key/strings/stringCompileTimeConstant1.key")
                .provable("./standard_key/strings/stringCompileTimeConstant2.key")
                .provable("./standard_key/strings/stringEquality1.key")
                .provable("./standard_key/strings/stringEquality2.key")
                .provable("./standard_key/strings/substring0.key")
                .provable("./standard_key/strings/substring1.key")
                .provable("./standard_key/strings/substring2.key")
                .provable("./standard_key/strings/substring3.key")
                .provable("./standard_key/strings/substring4.key")
                .provable("./standard_key/strings/substring5.key")
                .provable("./_testcase/classpath/classpath.key")

                .notprovable("./heap/inconsistent_represents/MyClass_m.key")
                .notprovable("./heap/inconsistent_represents/MyClass_n.key")
                .notprovable("./heap/information_flow/UpdateAbstraction_ex7_1_insecure.key")
                .notprovable("./heap/information_flow/UpdateAbstraction_ex7_2_insecure.key")
                .notprovable("./standard_key/arrays/arrayStoreException/array2Dim.key")
                .notprovable("./standard_key/arrays/arrayStoreException/array2DimClose.key")
                .notprovable("./standard_key/arrays/arrayStoreException/throwASEForPrim.key")
                .notprovable("./standard_key/java_dl/danglingElse.key")

// Model methods tests:
// (Note: some of the problems are trivial, but they should be kept
// here as these problems provide the only test base for model methods)

                .provable("./heap/model_methods/Cell_footprint_acc.key")
                .provable("./heap/model_methods/Cell_footprint.key")
                .provable("./heap/model_methods/Cell_get_acc.key")
                .provable("./heap/model_methods/Cell_get.key")
                .provable("./heap/model_methods/Cell_post_set.key")
                .provable("./heap/model_methods/Cell_set.key")
                .provable("./heap/model_methods/CellTest_callSet.key")
                .provable("./heap/model_methods/CellTest_test2.key")
                .provable("./heap/model_methods/CellTest_test.key")
                .provable("./heap/model_methods/Coll1_add.key")
                .provable("./heap/model_methods/Coll1_Coll1_add_pre.key")
                .provable("./heap/model_methods/Coll1_Coll_add_pre.key")
                .provable("./heap/model_methods/Coll2_add.key")
                .provable("./heap/model_methods/Coll2_Coll2_add_pre.key")
                .provable("./heap/model_methods/Coll2_Coll_add_pre.key")
                .provable("./heap/model_methods/Coll_add.key")
                .provable("./heap/model_methods/Coll_add_pre.key")
                .provable("./heap/model_methods/Indirect_callAdd.key")
                .provable("./heap/model_methods/Indirect_test.key")
                .provable("./heap/model_methods/Recell_Cell_footprint.key")
                .provable("./heap/model_methods/Recell_Cell_post_set.key")
                .provable("./heap/model_methods/Recell_footprint_acc.key")
                .provable("./heap/model_methods/Recell_get_acc.key")
                .provable("./heap/model_methods/Recell_get.key")
                .provable("./heap/model_methods/Recell_Recell_footprint.key")
                .provable("./heap/model_methods/Recell_Recell_post_set.key")
                .provable("./heap/model_methods/Recell_set.key")
                .provable("./heap/model_methods/Recell_undo.key")

// End -- please do not remove this line.
                .provable("./performance-test/AccessChain1(AccessChain1__foo_01()).JML_operation_contract.0.key")
                .provable("./performance-test/AccessChain1(AccessChain1__foo_02()).JML_operation_contract.0.key")
                .provable("./performance-test/AccessChain1(AccessChain1__foo_03()).JML_operation_contract.0.key")
                .provable("./performance-test/AccessChain1(AccessChain1__foo_04()).JML_operation_contract.0.key")
                .provable("./performance-test/AccessChain1(AccessChain1__foo_05()).JML_operation_contract.0.key")
                .provable("./performance-test/AccessChain1(AccessChain1__foo_06()).JML_operation_contract.0.key")
                .provable("./performance-test/AccessChain1(AccessChain1__foo_07()).JML_operation_contract.0.key")
                .provable("./performance-test/AccessChain1(AccessChain1__foo_08()).JML_operation_contract.0.key")
                .provable("./performance-test/AccessChain1(AccessChain1__foo_09()).JML_operation_contract.0.key")
                .provable("./performance-test/AccessChain1(AccessChain1__foo_10()).JML_operation_contract.0.key")
                .provable("./performance-test/AccessChain1(AccessChain1__foo_20()).JML_operation_contract.0.key")
                .provable("./performance-test/AccessChain2(AccessChain2__foo_01()).JML_operation_contract.0.key")
                .provable("./performance-test/AccessChain2(AccessChain2__foo_02()).JML_operation_contract.0.key")
                .provable("./performance-test/AccessChain2(AccessChain2__foo_03()).JML_operation_contract.0.key")
                .provable("./performance-test/AccessChain2(AccessChain2__foo_04()).JML_operation_contract.0.key")
                .provable("./performance-test/AccessChain2(AccessChain2__foo_05()).JML_operation_contract.0.key")
                .provable("./performance-test/AccessChain2(AccessChain2__foo_06()).JML_operation_contract.0.key")
                .provable("./performance-test/AccessChain2(AccessChain2__foo_07()).JML_operation_contract.0.key")
                .provable("./performance-test/AccessChain2(AccessChain2__foo_08()).JML_operation_contract.0.key")
                .provable("./performance-test/AccessChain2(AccessChain2__foo_09()).JML_operation_contract.0.key")
                .provable("./performance-test/AccessChain2(AccessChain2__foo_10()).JML_operation_contract.0.key")
                .provable("./performance-test/AccessChain2(AccessChain2__foo_20()).JML_operation_contract.0.key")
                .provable("./performance-test/AccessChain4(AccessChain4__foo_01()).JML_operation_contract.0.key")
                .provable("./performance-test/AccessChain4(AccessChain4__foo_02()).JML_operation_contract.0.key")
                .provable("./performance-test/AccessChain4(AccessChain4__foo_03()).JML_operation_contract.0.key")
                .provable("./performance-test/AccessChain4(AccessChain4__foo_04()).JML_operation_contract.0.key")
                .provable("./performance-test/AccessChain4(AccessChain4__foo_05()).JML_operation_contract.0.key")
                .provable("./performance-test/AccessChain4(AccessChain4__foo_06()).JML_operation_contract.0.key")
                .provable("./performance-test/AccessChain4(AccessChain4__foo_07()).JML_operation_contract.0.key")
                .provable("./performance-test/AccessChain4(AccessChain4__foo_08()).JML_operation_contract.0.key")
                .provable("./performance-test/AccessChain4(AccessChain4__foo_09()).JML_operation_contract.0.key")
                .provable("./performance-test/AccessChain4(AccessChain4__foo_10()).JML_operation_contract.0.key")
                .provable("./performance-test/AccessChain4(AccessChain4__foo_20()).JML_operation_contract.0.key")
                .provable("./performance-test/Disjoint(Disjoint__disjoint_01()).JML_operation_contract.0.key")
                .provable("./performance-test/Disjoint(Disjoint__disjoint_02()).JML_operation_contract.0.key")
                .provable("./performance-test/Disjoint(Disjoint__disjoint_03()).JML_operation_contract.0.key")
                .provable("./performance-test/Disjoint(Disjoint__disjoint_04()).JML_operation_contract.0.key")
                .provable("./performance-test/Disjoint(Disjoint__disjoint_05()).JML_operation_contract.0.key")
                .provable("./performance-test/Disjoint(Disjoint__disjoint_06()).JML_operation_contract.0.key")
                .provable("./performance-test/Disjoint(Disjoint__disjoint_07()).JML_operation_contract.0.key")
                .provable("./performance-test/Disjoint(Disjoint__disjoint_08()).JML_operation_contract.0.key")
                .provable("./performance-test/Disjoint(Disjoint__disjoint_09()).JML_operation_contract.0.key")
                .provable("./performance-test/Disjoint(Disjoint__disjoint_10()).JML_operation_contract.0.key")
                .provable("./performance-test/Disjoint(Disjoint__disjoint_20()).JML_operation_contract.0.key")
                .provable("./performance-test/Disjoint(Disjoint__disjoint2_01()).JML_operation_contract.0.key")
                .provable("./performance-test/Disjoint(Disjoint__disjoint2_02()).JML_operation_contract.0.key")
                .provable("./performance-test/Disjoint(Disjoint__disjoint2_03()).JML_operation_contract.0.key")
                .provable("./performance-test/Disjoint(Disjoint__disjoint2_04()).JML_operation_contract.0.key")
                .provable("./performance-test/Disjoint(Disjoint__disjoint2_05()).JML_operation_contract.0.key")
                .provable("./performance-test/Disjoint(Disjoint__disjoint2_06()).JML_operation_contract.0.key")
                .provable("./performance-test/Disjoint(Disjoint__disjoint2_07()).JML_operation_contract.0.key")
                .provable("./performance-test/Disjoint(Disjoint__disjoint2_08()).JML_operation_contract.0.key")
                .provable("./performance-test/Disjoint(Disjoint__disjoint2_09()).JML_operation_contract.0.key")
                .provable("./performance-test/Disjoint(Disjoint__disjoint2_10()).JML_operation_contract.0.key")
                .provable("./performance-test/Disjoint(Disjoint__disjoint2_20()).JML_operation_contract.0.key")
                .provable("./performance-test/Disjoint(Disjoint__xZero_01()).JML_operation_contract.0.key")
                .provable("./performance-test/Disjoint(Disjoint__xZero_02()).JML_operation_contract.0.key")
                .provable("./performance-test/Disjoint(Disjoint__xZero_03()).JML_operation_contract.0.key")
                .provable("./performance-test/Disjoint(Disjoint__xZero_04()).JML_operation_contract.0.key")
                .provable("./performance-test/Disjoint(Disjoint__xZero_05()).JML_operation_contract.0.key")
                .provable("./performance-test/Disjoint(Disjoint__xZero_06()).JML_operation_contract.0.key")
                .provable("./performance-test/Disjoint(Disjoint__xZero_07()).JML_operation_contract.0.key")
                .provable("./performance-test/Disjoint(Disjoint__xZero_08()).JML_operation_contract.0.key")
                .provable("./performance-test/Disjoint(Disjoint__xZero_09()).JML_operation_contract.0.key")
                .provable("./performance-test/Disjoint(Disjoint__xZero_10()).JML_operation_contract.0.key")
                .provable("./performance-test/Disjoint(Disjoint__xZero_20()).JML_operation_contract.0.key")
                .provable("./performance-test/Dynamic2(Dynamic2__foo_01()).JML_operation_contract.0.key")
                .provable("./performance-test/Dynamic2(Dynamic2__foo_02()).JML_operation_contract.0.key")
                .provable("./performance-test/Dynamic2(Dynamic2__foo_03()).JML_operation_contract.0.key")
                .provable("./performance-test/Dynamic2(Dynamic2__foo_04()).JML_operation_contract.0.key")
                .provable("./performance-test/Dynamic2(Dynamic2__foo_05()).JML_operation_contract.0.key")
                .provable("./performance-test/Dynamic2(Dynamic2__foo_06()).JML_operation_contract.0.key")
// these cannot be proven within 100,000 steps currently
//.provable("./performance-test/Dynamic2(Dynamic2__foo_07()).JML_operation_contract.0.key")
//.provable("./performance-test/Dynamic2(Dynamic2__foo_08()).JML_operation_contract.0.key")
//.provable("./performance-test/Dynamic2(Dynamic2__foo_09()).JML_operation_contract.0.key")
//.provable("./performance-test/Dynamic2(Dynamic2__foo_10()).JML_operation_contract.0.key")
//.provable("./performance-test/Dynamic2(Dynamic2__foo_20()).JML_operation_contract.0.key")
                .provable("./performance-test/Dynamic(Dynamic__foo_01()).JML_operation_contract.0.key")
                .provable("./performance-test/Dynamic(Dynamic__foo_02()).JML_operation_contract.0.key")
                .provable("./performance-test/Dynamic(Dynamic__foo_03()).JML_operation_contract.0.key")
                .provable("./performance-test/Dynamic(Dynamic__foo_04()).JML_operation_contract.0.key")
                .provable("./performance-test/Dynamic(Dynamic__foo_05()).JML_operation_contract.0.key")
                .provable("./performance-test/Dynamic(Dynamic__foo_06()).JML_operation_contract.0.key")
                .provable("./performance-test/Dynamic(Dynamic__foo_07()).JML_operation_contract.0.key")
                .provable("./performance-test/Dynamic(Dynamic__foo_08()).JML_operation_contract.0.key")
                .provable("./performance-test/Dynamic(Dynamic__foo_09()).JML_operation_contract.0.key")
                .provable("./performance-test/Dynamic(Dynamic__foo_10()).JML_operation_contract.0.key")
                .provable("./performance-test/Dynamic(Dynamic__foo_20()).JML_operation_contract.0.key")
                .provable("./performance-test/DynamicGhost(DynamicGhost__dynamicGhost_01()).JML_normal_behavior_operation_contract.0.key")
                .provable("./performance-test/DynamicGhost(DynamicGhost__dynamicGhost_02()).JML_normal_behavior_operation_contract.0.key")
                .provable("./performance-test/DynamicGhost(DynamicGhost__dynamicGhost_03()).JML_normal_behavior_operation_contract.0.key")
                .provable("./performance-test/DynamicGhost(DynamicGhost__dynamicGhost_04()).JML_normal_behavior_operation_contract.0.key")
                .provable("./performance-test/DynamicGhost(DynamicGhost__dynamicGhost_05()).JML_normal_behavior_operation_contract.0.key")
                .provable("./performance-test/DynamicGhost(DynamicGhost__dynamicGhost_06()).JML_normal_behavior_operation_contract.0.key")
                .provable("./performance-test/DynamicGhost(DynamicGhost__dynamicGhost_07()).JML_normal_behavior_operation_contract.0.key")
                .provable("./performance-test/DynamicGhost(DynamicGhost__dynamicGhost_08()).JML_normal_behavior_operation_contract.0.key")
                .provable("./performance-test/DynamicGhost(DynamicGhost__dynamicGhost_09()).JML_normal_behavior_operation_contract.0.key")
                .provable("./performance-test/DynamicGhost(DynamicGhost__dynamicGhost_10()).JML_normal_behavior_operation_contract.0.key")
                .provable("./performance-test/DynamicGhost(DynamicGhost__dynamicGhost_20()).JML_normal_behavior_operation_contract.0.key")
                .provable("./performance-test/GhostFrame(GhostFrame__foo_01()).JML_operation_contract.0.key")
                .provable("./performance-test/GhostFrame(GhostFrame__foo_02()).JML_operation_contract.0.key")
                .provable("./performance-test/GhostFrame(GhostFrame__foo_03()).JML_operation_contract.0.key")
                .provable("./performance-test/GhostFrame(GhostFrame__foo_04()).JML_operation_contract.0.key")
                .provable("./performance-test/GhostFrame(GhostFrame__foo_05()).JML_operation_contract.0.key")
                .provable("./performance-test/GhostFrame(GhostFrame__foo_06()).JML_operation_contract.0.key")
                .provable("./performance-test/GhostFrame(GhostFrame__foo_07()).JML_operation_contract.0.key")
                .provable("./performance-test/GhostFrame(GhostFrame__foo_08()).JML_operation_contract.0.key")
                .provable("./performance-test/GhostFrame(GhostFrame__foo_09()).JML_operation_contract.0.key")
                .provable("./performance-test/GhostFrame(GhostFrame__foo_10()).JML_operation_contract.0.key")
                .provable("./performance-test/GhostFrame(GhostFrame__foo_20()).JML_operation_contract.0.key")
                .provable("./performance-test/Inc2(Inc2__foo_01()).JML_operation_contract.0.key")
                .provable("./performance-test/Inc2(Inc2__foo_02()).JML_operation_contract.0.key")
                .provable("./performance-test/Inc2(Inc2__foo_03()).JML_operation_contract.0.key")
                .provable("./performance-test/Inc2(Inc2__foo_04()).JML_operation_contract.0.key")
                .provable("./performance-test/Inc2(Inc2__foo_05()).JML_operation_contract.0.key")
                .provable("./performance-test/Inc2(Inc2__foo_06()).JML_operation_contract.0.key")
                .provable("./performance-test/Inc2(Inc2__foo_07()).JML_operation_contract.0.key")
                .provable("./performance-test/Inc2(Inc2__foo_08()).JML_operation_contract.0.key")
                .provable("./performance-test/Inc2(Inc2__foo_09()).JML_operation_contract.0.key")
                .provable("./performance-test/Inc2(Inc2__foo_10()).JML_operation_contract.0.key")
                .provable("./performance-test/Inc2(Inc2__foo_20()).JML_operation_contract.0.key")
                .provable("./performance-test/Inc2(Inc2__foo_40()).JML_operation_contract.0.key")
                .provable("./performance-test/Inc(Inc__foo_01()).JML_operation_contract.0.key")
                .provable("./performance-test/Inc(Inc__foo_02()).JML_operation_contract.0.key")
                .provable("./performance-test/Inc(Inc__foo_03()).JML_operation_contract.0.key")
                .provable("./performance-test/Inc(Inc__foo_04()).JML_operation_contract.0.key")
                .provable("./performance-test/Inc(Inc__foo_05()).JML_operation_contract.0.key")
                .provable("./performance-test/Inc(Inc__foo_06()).JML_operation_contract.0.key")
                .provable("./performance-test/Inc(Inc__foo_07()).JML_operation_contract.0.key")
                .provable("./performance-test/Inc(Inc__foo_08()).JML_operation_contract.0.key")
                .provable("./performance-test/Inc(Inc__foo_09()).JML_operation_contract.0.key")
                .provable("./performance-test/Inc(Inc__foo_10()).JML_operation_contract.0.key")
                .provable("./performance-test/Inc(Inc__foo_20()).JML_operation_contract.0.key")
                .provable("./performance-test/Modelfield(Modelfield__foo_01()).JML_operation_contract.0.key")
                .provable("./performance-test/Modelfield(Modelfield__foo_02()).JML_operation_contract.0.key")
                .provable("./performance-test/Modelfield(Modelfield__foo_03()).JML_operation_contract.0.key")
                .provable("./performance-test/Modelfield(Modelfield__foo_04()).JML_operation_contract.0.key")
                .provable("./performance-test/Modelfield(Modelfield__foo_05()).JML_operation_contract.0.key")
                .provable("./performance-test/Modelfield(Modelfield__foo_06()).JML_operation_contract.0.key")
                .provable("./performance-test/Modelfield(Modelfield__foo_07()).JML_operation_contract.0.key")
                .provable("./performance-test/Modelfield(Modelfield__foo_08()).JML_operation_contract.0.key")
                .provable("./performance-test/Modelfield(Modelfield__foo_09()).JML_operation_contract.0.key")
                .provable("./performance-test/Modelfield(Modelfield__foo_10()).JML_operation_contract.0.key")
                .provable("./performance-test/Modelfield(Modelfield__foo_20()).JML_operation_contract.0.key");
        return c;
    }

}
