// This file is part of KeY - Integrated Deductive Software Design
//
// Copyright (C) 2001-2011 Universitaet Karlsruhe (TH), Germany
//                         Universitaet Koblenz-Landau, Germany
//                         Chalmers University of Technology, Sweden
// Copyright (C) 2011-2013 Karlsruhe Institute of Technology, Germany
//                         Technical University Darmstadt, Germany
//                         Chalmers University of Technology, Sweden
//
// The KeY system is protected by the GNU General
// Public License. See LICENSE.TXT for details.
//

// This file contains only the RULES for the data type Ord
// of ordinals.
// The rules come in sections
//  * Core Axioms
//  * Definitional Extensions 
//  * Additional Axioms
//  * Derived  Taclets
// 


\rules{


//--------------------------------------------------------------------------
//  
//  Core Axioms
//  
//--------------------------------------------------------------------------

 olt_trans_Axiom{
   \schemaVar \variables Ord nv, nv0, nv1;

   \add(  \forall nv;(\forall nv0; (\forall nv1;(
           (olt(nv,nv0) &  olt(nv0,nv1)) -> olt(nv,nv1)))) ==>)
  };

  olt_irref_Axiom{
    \schemaVar \variables Ord nv;

  \add(  \forall nv;( (!olt(nv,nv))) ==>)
  };

  olt_total_Axiom{
    \schemaVar \variables Ord nv, nv1;

  \add(  \forall nv;(  \forall nv1;(
           olt(nv,nv1) | nv = nv1 | olt(nv1,nv))) ==>)
  };

 oleq_zeroAxiom{
    \schemaVar \variables Ord nv;
    \add(  \forall nv;(  oleq(o_0, nv)) ==>)
  };

// osup{nv;}(j,i) is the least ordinal that is strictly greater
//  than any i for all nv < j. Typically, nv will be a
//  free variable in the term i.

 osupDef{
  \schemaVar \variables Ord nv,nv1,nv2;
  \schemaVar \term Ord i,j;
  \find(osup{nv;}(j,i))
  \varcond(\notFreeIn(nv,j), \notFreeIn(nv1,j),\notFreeIn(nv2,j), \notFreeIn(nv1,i),\notFreeIn(nv2,i))
  \add(\forall nv1;(olt(nv1,j) -> olt(({\subst nv;(nv1)}i), osup{nv;}(j,i))),
  \forall nv2;(
       \forall nv1;(olt(nv1,j) -> olt(({\subst nv;(nv1)}i), nv2)) ->
         oleq(osup{nv;}(j,i), nv2))   ==> )
  };

 oIndBasic{
  \schemaVar \variables Ord nv,nv1,nv2;
  \schemaVar \formula phi;
  \find (==> \forall nv;phi)
  \varcond(\notFreeIn(nv1,phi),\notFreeIn(nv2,phi))
  \replacewith(==> 
   \forall nv1;(
    (\forall nv2;(olt(nv2,nv1) -> {\subst nv; nv2}phi))
   ->  {\subst nv; nv1}phi))
  };

 
 oadd_Def0Right{
     \schemaVar \term Ord i;
     \find(oadd(i,o_0))
     \replacewith(i)
     \heuristics(concrete)
     };

 oadd_Def0Left{
     \schemaVar \term Ord i;
     \find(oadd(o_0,i))
     \replacewith(i)
     \heuristics(concrete)
     };

oadd_DefSucc{
     \schemaVar \term Ord i,i1;
     \find(oadd(i,oadd(i1,o_1)))
     \replacewith(oadd(oadd(i,i1),o_1))
     };

oadd_DefLim{
     \schemaVar \variables Ord nv;
     \schemaVar \term Ord i,i1;
     \assumes(lim(i1)==>) 
     \find(oadd(i,i1))  \sameUpdateLevel 
     \varcond (\notFreeIn(nv,i), \notFreeIn(nv,i1))
         \replacewith(osup{nv;}(i1,oadd(i,nv)))
     };


oSucc{
     \schemaVar \variables Ord nv;
     \add(\forall nv;(olt(nv,oadd(nv,o_1)))==>)
};

oLeastSucc{
     \schemaVar \variables Ord nv, nv1;
     \add(\forall nv;(\forall nv1;(
       olt(nv,nv1) -> oleq(oadd(nv,o_1),nv1)))==>)
};



//--------------------------------------------------------------------------
//  
//  Definitional Extensions 
//  
//--------------------------------------------------------------------------


// Definition of less_or_equal relation

 oleq_Def{
       \schemaVar \variables Ord nv, nv1;
            \schemaVar \term Ord i,i1;
       \find(oleq(i,i1))
       \add( \forall nv;( \forall nv1;(
         oleq(nv,nv1) <-> olt(nv,nv1) | nv = nv1)) ==> )
       };

// Definition of limit ordinal

 olimDef{
      \schemaVar \variables Ord nv;
      \schemaVar \term Ord i;
      \find(lim(i))
      \varcond (\notFreeIn(nv,i))
      \replacewith(o_0!=i & !\exists nv;(i=oadd(nv,o_1)))};

// maximum of two ordinals

omaxDef{
      \schemaVar \term Ord i,i1;
      \find(omax(i,i1))
      \replacewith(\if(olt(i,i1))\then(i1)\else(i))
};



//--------------------------------------------------------------------------
//  
//  Derived  taclets
//  
//--------------------------------------------------------------------------


//
// this is a practical version of the transitivity axiom
// avoiding manual instantiation of universal quantifiers.

 olt_trans{ 
   \schemaVar \term Ord i, i0, i1; 
   \assumes (olt(i, i0) ==>) \find (olt(i0, i1) ==>) 
   \add (olt(i, i1) ==>)};

// frequently occuring consequence from olt_irref_Axiom

  olt_irref{
    \schemaVar \term Ord i;
   \find (olt(i, i)) 
   \replacewith (false) 
   \heuristics(simplify) };

oDiff01{
   \find(o_0=o_1)
   \replacewith(false)
   \heuristics(concrete)
};

oleq_replace{
   \schemaVar \term Ord i,i1;
   \find(oleq(i,i1))
   \replacewith(olt(i,i1) | i = i1)
   \heuristics(simplify)
 };

omaxLess{
 \schemaVar \term Ord i, i0, i1; 
   \find(olt(i,omax(i0,i1)))
   \replacewith(olt(i,i0)|olt(i,i1))
   \heuristics(simplify)};

omaxGreater{
 \schemaVar \term Ord i, i0, i1; 
   \find(olt(omax(i0,i1),i))
   \replacewith(olt(i0,i)&olt(i1,i))
   \heuristics(simplify)};


  omaxLeq{
 \schemaVar \term Ord i, i0, i1; 
   \find(oleq(i,omax(i0,i1)))
   \replacewith(oleq(i,i0)|oleq(i,i1))
   \heuristics(simplify)};

omaxGeq{
 \schemaVar \term Ord i, i0, i1; 
   \find(oleq(omax(i0,i1),i))
   \replacewith(oleq(i0,i)&oleq(i1,i))
   \heuristics(simplify)};

//--------------------------------------------------------------------------
//
// derived taclets for oleq
//
//--------------------------------------------------------------------------

 

 oleq_trans{
   \schemaVar \variables Ord nv, nv0, nv1;
   \add(  \forall nv;(\forall nv0; (\forall nv1;(
           (oleq(nv,nv0) &  oleq(nv0,nv1)) -> oleq(nv,nv1)))) ==>)
  };

 oleq_antisym{
  \schemaVar \term Ord i, i1; 
  \assumes(oleq(i,i1) ==>)
  \find(oleq(i1,i) ==>)
  \add(i=i1 ==>)  
  \heuristics(simplify)
  };

 oltleq_trans{ 
   \schemaVar \term Ord i, i0, i1; 
   \assumes (oleq(i, i0) ==>) 
   \find (olt(i0, i1) ==>) 
   \add (olt(i, i1) ==>)};

 oleqolt_trans{ 
   \schemaVar \term Ord i, i0, i1; 
   \assumes (olt(i, i0) ==>) 
   \find (oleq(i0, i1) ==>) 
   \add (olt(i, i1) ==>)};

 olt_zero{
    \schemaVar \term Ord i;
   \find (olt(i, o_0)) 
   \replacewith (false) 
   \heuristics(simplify) };

 olt_O1{
   \find (olt(o_0, o_1))
   \replacewith(true)
   \heuristics(concrete) };

olessPlusOne{
 \schemaVar \term Ord i,j;
 \find(olt(i,oadd(j,o_1)))
 \replacewith(olt(i,j)|i=j)
 \heuristics(simplify_enlarging)
};


//--------------------------------------------------------------------------
//
// derived taclets on osup
//
//--------------------------------------------------------------------------

osupEQDef{ \schemaVar \variables Ord nv,nv1,nv2;
  \schemaVar \term Ord i,j,k;
  \find(==> osup{nv;}(j,i) = k)
  \varcond(\notFreeIn(nv,j), \notFreeIn(nv1,j),\notFreeIn(nv2,j), \notFreeIn(nv1,i),\notFreeIn(nv2,i),
           \notFreeIn(nv,k), \notFreeIn(nv1,k), \notFreeIn(nv2,k) )
  \replacewith( ==> \forall nv1;(olt(nv1,j) -> olt(({\subst nv;(nv1)}i), k)) &
  \forall nv2;(
       \forall nv1;(olt(nv1,j) -> olt(({\subst nv;(nv1)}i), nv2)) ->
         oleq(k, nv2)))
  };

 osup0{
  \schemaVar \variables Ord nv;
  \schemaVar \term Ord i;
  \find(osup{nv;}(o_0,i))
  \replacewith(o_0)
  \heuristics(simplify)
  };

oselfSup{
  \schemaVar \variables Ord nv, lambda;
 \add(\forall nv; (osup{lambda;}(nv,lambda) = nv)==>)
};

oInd{
  \schemaVar \variables Ord nv,nv1;
  \schemaVar \formula phi;
  \find (==> \forall nv;phi)
  \varcond(\notFreeIn(nv1,phi))
  "Base Case":      \add(==> {\subst nv; o_0}phi); 
  "Successor Case": \add(==> \forall nv;   (phi                          ->  {\subst nv; (oadd(nv,o_1))}phi)); 
  "Limit Case":     \add(==> (\forall nv1; (
                         (lim(nv1) &\forall nv; (olt(nv,nv1) -> phi)) ->  {\subst nv; nv1}phi)))
   }; 

 osupSucc{
  \schemaVar \variables Ord nv;
  \schemaVar \term Ord i, j;
  \find(osup{nv;}(oadd(j,o_1),i))
  \varcond(\notFreeIn(nv,j))
  \replacewith(omax(osup{nv;}(j,i),oadd({\subst  nv;(j)}i,o_1)))
  }; 

osupEqualTerms{
   \schemaVar \variables Ord nv;
   \schemaVar \term Ord i1,i2,alpha;
   \find(\forall nv;(olt(nv,alpha) -> i1 = i2) ==>)
   \varcond(\notFreeIn(nv,alpha))
   \add(osup{nv;}(alpha,i1) = osup{nv;}(alpha,i2)==>)
};


oAdd0Left{
 \schemaVar \term Ord i;
 \find(oadd(o_0,i))
 \replacewith(i)
 \heuristics(concrete)
};



oadd_Def0{
     \schemaVar \term Ord i;
     \find(oadd(i,o_0))
     \replacewith(i)
     \heuristics(simplify) };


 olt_discret{
    \schemaVar \term Ord i;
   \find (olt(o_0, i)) 
   \replacewith(oleq(o_1,i))
   \heuristics(simplify) };

 osup1{
  \schemaVar \variables Ord nv;
  \schemaVar \term Ord i;
  \find(osup{nv;}(o_1,i))
  \replacewith(oadd({\subst  nv; (o_0)}i,o_1))
 \heuristics(simplify)
  };

 

 olt_one{
   \schemaVar \term Ord i;
   \find (olt(i, o_1))
   \replacewith (i=o_0) 
   \heuristics(concrete) };

}