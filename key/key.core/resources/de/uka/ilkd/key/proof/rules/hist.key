\sorts {
	Event;
	EventType;
	MethodIdentifier;
	//Maps objects to the objects gained by deserialisation
	//Use functions to use the map, similar to heap.
	DeserialMap;
}

\functions {
	//constructors
	//type, caller, callee, service, content, heap
	Event event(EventType, Object, Object, MethodIdentifier, Seq, Heap);
	\unique EventType serviceCall;
	\unique EventType serviceTermination;

	//destructors
	EventType evType(Event);
	Object evCaller(Event);
	Object evCallee(Event);
	MethodIdentifier evService(Event);
	Seq evContent(Event);
	Heap evHeap(Event);
	
	//function returing for a value the deserialized value
	any deserial(DeserialMap, any);

	Seq filterInput(Seq);
	Seq filterVisible(Seq);
	Seq filterVisibleInternal(Seq);
	
	any callElement(Object, MethodIdentifier);

	//other stuff
	//signature for heapjoin: sendingHeap, receivingHeap, parameterlist, self object of the receiving bean
	Heap heapjoin(Heap, Heap, Seq, any);
}

\predicates {
    wfHist(Seq); // =? wellformedList

		wellformedList(Seq);
		wellformedListCoop(Seq);
		coopListEquiv(Seq, Seq);
		equivHistory(Seq,Seq);
		equivHistoryFiltered(Seq,Seq);
		equivEvent(Event, Event);
		equivEventLocal(Event, Event);
		equivEventGlobal(Event, Event);
		invEvent(Event);
		invEventLocal(Event);
		invEventGlobal(Event);
		isCallable(Event);

		agreePre(Heap, Heap);
		agreePreLocal(Heap, Heap);
		agreePreGlobal(Heap, Heap);
		agreePost(Heap, Heap);
		
		//Equivalence predicate for deserialization effects
		deserialEquiv(DeserialMap, any, Heap, any, Heap);

    //callable stuff
    histCallable(Seq, Seq);
    evIsCallable(Event, Seq);
    
		
    //similarities
    similarHist(Object, Seq, Seq);
    similarEvent(Event, Event);
    similar(any, any, Heap, Heap);

	//Helper predicates for recursive definitions
	wellformedListInternal(Seq);
	wellformedListCoopInternal(Seq);
	coopListEquivInternal(Seq, Seq);
	coopListEquivFilteredInternal(Seq, Seq);
	equivHistoryInternal(Seq,Seq);
	equivHistoryFilteredInternal(Seq,Seq);
	correspondingEvents(Event, Event);
	correspondingEventsCoop(Event, Event);

	//other stuff
	isIso(any, Heap, any, Heap);
	transfresh(any, Heap, Heap);
		agreeBasic(Seq, Seq);
}

\programVariables {
    Seq hist;
	Seq internalHist;
	Seq currentParams;
	Object environmentCaller;
	Object activeComponent;
}


