\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Sat Feb 20 15:37:48 CET 2016
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_RESTRICTED
[StrategyProperty]DEP_OPTIONS_KEY=DEP_OFF
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_ON
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=1000
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=assertions-assertions\\:safe , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:ban , JavaCard-JavaCard\\:on , Strings-Strings\\:on , modelFields-modelFields\\:showSatisfiability , bigint-bigint\\:on , sequences-sequences\\:on , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , moreSeqRules-moreSeqRules\\:on , permissions-permissions\\:off , joinGenerateIsWeakeningGoal-joinGenerateIsWeakeningGoal\\:off
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\proofObligation "#Proof Obligation Settings
#Sat Feb 20 15:37:48 CET 2016
name=olimexplim
class=de.uka.ilkd.key.taclettranslation.lemma.TacletProofObligationInput
";

\proofScript "
macro split-prop;
cut '!olt(o_0,o_1)';
tryclose branch;
rule notRight
  formula='!olt(o_0, o_1)';
rule olt_trans
  formula='olt(o_1, f_i)';
rule olimDefEquiv
  formula='lim(oexp(f_i, f_j))';
rule andRight;
rule oexpGreaterEqualOne;
instantiate hide var=x with=f_i ;
instantiate hide var=y with=f_j ;
rule impLeft;
tryclose branch;
rule allRight;
rule impRight;
rule oexp_DefLim
  formula='olt(oadd(ov_1, o_1), oexp(f_i, f_j))';
rule oexp_DefLim;
rule osupDef occ=0;
instantiate hide var=nv2 with=ov_1;
rule impLeft;
rule allRight;
rule impRight;
cut '!olt(ov_1,oexp(f_i, nv1_0))';
rule notLeft;
rule hide_left
  formula='\forall Ord nv1;
   (   olt(nv1, f_j)
    -> oleq(oexp(f_i, nv1),
            osup{Ord nv;}(f_j, oexp(f_i, nv))))';
rule hide_right
  formula='olt(oadd(ov_1, o_1), osup{Ord nv;}(f_j, oexp(f_i, nv)))';
rule hide_left
  formula='olt(ov_1, osup{Ord nv;}(f_j, oexp(f_i, nv)))';
rule olt_total_Axiom;
tryclose branch;
rule notRight;
rule hide_right
  formula='oleq(oexp(f_i, nv1_0), ov_1)';
instantiate hide var=nv1 with='oadd(nv1_0,o_1)';
rule impLeft;
rule olimDefEquiv;
rule andLeft;
instantiate hide var=ov with=nv1_0;
rule impLeft;
tryclose branch;
rule oltPlusOne
 formula='olt(ov_1, oexp(f_i, nv1_0))';
rule oltAddLessLeft
  formula='olt(o_1, f_i)';
instantiate hide var=k with='oexp(f_i, nv1_0)';
rule olt_trans
   formula='olt(oadd(oexp(f_i, nv1_0), o_1),
     oadd(oexp(f_i, nv1_0), f_i))';
rule hide_left
   formula='olt(oadd(oexp(f_i, nv1_0), o_1),
     oadd(oexp(f_i, nv1_0), f_i))'  ;
rule hide_left
   formula='olt(oadd(ov_1, o_1), oadd(oexp(f_i, nv1_0), o_1))'  ;
rule oleqAddTimes;
instantiate hide var=i with='oexp(f_i, nv1_0)';
instantiate hide var=j with=f_i;
rule impLeft;
rule andRight;
#rule hide_right
#  formula='olt(oadd(ov_1, o_1), osup{Ord nv;}(f_j, oexp(f_i, nv)))';
rule oexpGreaterOne;
instantiate hide var=x with=f_i ;
instantiate hide var=y with=nv1_0 ;
rule impLeft;
rule andRight;
tryclose branch;
cut 'nv1_0=o_0';
cut '!ov_1=o_0';
rule  notLeft;
rule hide_left
  formula='oleq(oexp(f_i, oadd(nv1_0, o_1)),
      osup{Ord nv;}(f_j, oexp(f_i, nv)))';
rule hide_right
  formula='olt(oadd(ov_1, o_1), osup{Ord nv;}(f_j, oexp(f_i, nv)))';
rule hide_right
  formula='olt(o_1, oexp(f_i, nv1_0))';
rule hide_right
  formula='olt(o_0, nv1_0)';
rule hide_left
  formula='olt(oadd(ov_1, o_1), oadd(oexp(f_i, nv1_0), f_i))';
rule hide_left
  formula='olt(ov_1, osup{Ord nv;}(f_j, oexp(f_i, nv)))';
rule hide_left
  formula='olt(nv1_0, f_j)';
rule hide_left
  formula='olt(o_0, o_1)';
rule hide_left
  formula='olt(o_1, f_i)';
rule hide_left
  formula='lim(f_j)';
cut '!(oexp(f_i, nv1_0) = oexp(f_i, o_0))';
tryclose branch;
rule notRight;
rule hide_left
 formula='nv1_0 = o_0';
rule applyEq
  formula='olt(ov_1, oexp(f_i, nv1_0))' occ=1;
tryclose branch;
rule notRight;
cut '!(oadd(ov_1, o_1) = o_1)';
rule notLeft;
tryclose branch;
rule olt_total_Axiom;
tryclose branch;
rule oleqolt_trans
  formula='oleq(oadd(oexp(f_i, nv1_0), f_i),
      otimes(oexp(f_i, nv1_0), f_i))';
rule hide_left
  formula='oleq(oadd(oexp(f_i, nv1_0), f_i),
      otimes(oexp(f_i, nv1_0), f_i))';
rule hide_left
  formula='olt(oadd(ov_1, o_1), oadd(oexp(f_i, nv1_0), f_i))';
cut '!olt(oadd(nv1_0,o_1),f_j)';
rule notLeft;
rule olimDefEquiv;
rule andLeft;
tryclose branch;
rule notRight;
rule osupDef 
  formula='olt(oadd(ov_1, o_1), osup{Ord nv;}(f_j, oexp(f_i, nv)))';
rule hide_left
 formula='\forall Ord nv2;
   (   \forall Ord nv1;
         (olt(nv1, f_j) -> oleq(oexp(f_i, nv1), nv2))
    -> oleq(osup{Ord nv;}(f_j, oexp(f_i, nv)), nv2))';
instantiate hide var=nv1 with='oadd(nv1_0, o_1)';
rule impLeft;
tryclose branch;
rule oexp_DefSucc;
tryclose branch;
"
