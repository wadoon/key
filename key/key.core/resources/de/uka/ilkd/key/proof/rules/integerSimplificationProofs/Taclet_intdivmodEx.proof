\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Thu Jan 05 17:30:51 CET 2017
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_RESTRICTED
[StrategyProperty]DEP_OPTIONS_KEY=DEP_OFF
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_ON
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=500
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=assertions-assertions\\:safe , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:ban , JavaCard-JavaCard\\:on , Strings-Strings\\:on , modelFields-modelFields\\:showSatisfiability , bigint-bigint\\:on , sequences-sequences\\:on , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , moreSeqRules-moreSeqRules\\:on , permissions-permissions\\:off , joinGenerateIsWeakeningGoal-joinGenerateIsWeakeningGoal\\:off
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\proofObligation "#Proof Obligation Settings
#Thu Jan 05 17:30:51 CET 2017
name=intdivmodEx
class=de.uka.ilkd.key.taclettranslation.lemma.TacletProofObligationInput
";

\proof {
(keyLog "0" (keyUser "pschmitt" ) (keyVersion "6f0ad2afd319ff5124002521d628fd26cc1fbe96"))
(keyLog "1" (keyUser "pschmitt" ) (keyVersion "6f0ad2afd319ff5124002521d628fd26cc1fbe96"))

(autoModeTime "382674577")

(branch "dummy ID"
(rule "allRight" (formula "1") (newnames "v_n,v_d,v_m,v_r") (inst "sk=v_n_0"))
(rule "allRight" (formula "1") (inst "sk=v_d_0"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "exRightHide" (formula "3") (inst "t=div(v_n_0, v_d_0)"))
(rule "exRightHide" (formula "3") (inst "t=sub(v_n_0, mul(v_d_0, div(v_n_0, v_d_0)))"))
(rule "intdivmod" (inst "n=n") (inst "d=d"))
(rule "allLeftHide" (formula "1") (inst "t=v_n_0"))
(rule "allLeftHide" (formula "1") (inst "t=v_d_0"))
(rule "impLeft" (formula "1"))
(branch "Case 1"
   (rule "replace_known_left" (formula "3") (term "0") (ifseqformula "1"))
   (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "2")))
   (rule "closeTrue" (formula "3"))
)
(branch "Case 2"
   (rule "andRight" (formula "4"))
   (branch "Case 1"
      (rule "andRight" (formula "4"))
      (branch "Case 1"
         (rule "replace_known_left" (formula "4") (term "1") (ifseqformula "1"))
         (builtin "One Step Simplification" (formula "4"))
         (rule "polySimp_elimSub" (formula "1") (term "0"))
         (rule "polySimp_elimSub" (formula "4") (term "1,1"))
         (rule "polySimp_mulComm0" (formula "4") (term "0,1"))
         (rule "polySimp_mulComm0" (formula "1") (term "0,1,0"))
         (rule "polySimp_mulComm0" (formula "4") (term "0,1,1,1"))
         (rule "polySimp_addAssoc" (formula "4") (term "1"))
         (rule "polySimp_homoEq" (formula "4"))
         (rule "polySimp_addComm1" (formula "4") (term "0"))
         (rule "polySimp_pullOutFactor1b" (formula "4") (term "0,0"))
         (rule "add_literals" (formula "4") (term "1,1,0,0"))
         (rule "times_zero_1" (formula "4") (term "1,0,0"))
         (rule "add_zero_right" (formula "4") (term "0,0"))
         (rule "polySimp_pullOutFactor1" (formula "4") (term "0"))
         (rule "add_literals" (formula "4") (term "1,0"))
         (rule "times_zero_1" (formula "4") (term "0"))
         (builtin "One Step Simplification" (formula "4"))
         (rule "closeTrue" (formula "4"))
      )
      (branch "Case 2"
         (rule "div_axiom" (formula "4") (term "1") (inst "quotient=quotient_0"))
         (rule "orLeft" (formula "1"))
         (branch "v_d_0 = 0"
            (rule "polySimp_elimSub" (formula "2") (term "0"))
            (rule "polySimp_mulComm0" (formula "2") (term "0,1,0"))
            (rule "inEqSimp_leqRight" (formula "5"))
            (rule "add_zero_right" (formula "1") (term "0"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
            (rule "inEqSimp_ltToLeq" (formula "4"))
            (rule "add_zero_right" (formula "4") (term "0"))
            (rule "polySimp_mulComm0" (formula "4") (term "1,0"))
            (rule "inEqSimp_ltToLeq" (formula "3"))
            (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
            (rule "polySimp_addAssoc" (formula "3") (term "0"))
            (rule "inEqSimp_commuteLeq" (formula "5"))
            (rule "applyEqRigid" (formula "4") (term "0,1,0") (ifseqformula "2"))
            (rule "mul_literals" (formula "4") (term "1,0"))
            (rule "add_literals" (formula "4") (term "0"))
            (rule "leq_literals" (formula "4"))
            (rule "closeFalse" (formula "4"))
         )
         (branch " v_n_0 / v_d_0 = quotient_0 & quotient_0 * v_d_0 <= v_n_0 & if (v_d_0 >= 0) then ( quotient_0 * v_d_0 >= 1 + v_n_0 + -1 * v_d_0) else (quotient_0 * v_d_0 >= 1 + v_n_0 + v_d_0)"
            (rule "andLeft" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "cut" (inst "cutFormula=!geq(mul(quotient_0, v_d_0),
     add(add(Z(1(#)), v_n_0),
         mul(Z(neglit(1(#))), v_d_0)))"))
            (branch "CUT: !quotient_0 * v_d_0 >= 1 + v_n_0 + -1 * v_d_0 TRUE"
               (rule "notLeft" (formula "1"))
               (rule "replace_known_right" (formula "3") (term "1") (ifseqformula "7"))
               (rule "polySimp_elimSub" (formula "4") (term "0"))
               (rule "polySimp_mulComm0" (formula "2") (term "0"))
               (rule "polySimp_mulComm0" (formula "3") (term "0,2"))
               (rule "polySimp_mulComm0" (formula "7") (term "0"))
               (rule "polySimp_mulComm0" (formula "7") (term "1,1"))
               (rule "polySimp_mulComm0" (formula "4") (term "0,1,0"))
               (rule "polySimp_addComm1" (formula "3") (term "1,2"))
               (rule "polySimp_addComm1" (formula "7") (term "1"))
               (rule "inEqSimp_leqRight" (formula "8"))
               (rule "add_zero_right" (formula "1") (term "0"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
               (rule "inEqSimp_geqRight" (formula "8"))
               (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
               (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
               (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,0,1,0,0"))
               (rule "polySimp_elimOne" (formula "1") (term "1,0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
               (rule "add_literals" (formula "1") (term "0,0,0,0"))
               (rule "add_zero_left" (formula "1") (term "0,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "7"))
               (rule "add_zero_right" (formula "7") (term "0"))
               (rule "polySimp_mulComm0" (formula "7") (term "1,0"))
               (rule "inEqSimp_ltToLeq" (formula "6"))
               (rule "polySimp_mulComm0" (formula "6") (term "1,0,0"))
               (rule "polySimp_addAssoc" (formula "6") (term "0"))
               (rule "inEqSimp_commuteLeq" (formula "8"))
               (rule "applyEqRigid" (formula "2") (term "0,1,0") (ifseqformula "3"))
               (rule "applyEq" (formula "6") (term "0,0,1,0") (ifseqformula "3"))
               (rule "polySimp_mulComm0" (formula "6") (term "0,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "1"))
               (rule "polySimp_mulComm0" (formula "1") (term "1"))
               (rule "polySimp_rightDist" (formula "1") (term "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
               (rule "polySimp_elimOne" (formula "1") (term "1,1"))
               (rule "polySimp_mulComm0" (formula "1") (term "0,1"))
               (rule "inEqSimp_sepNegMonomial0" (formula "7"))
               (rule "polySimp_mulLiterals" (formula "7") (term "0"))
               (rule "polySimp_elimOne" (formula "7") (term "0"))
               (rule "inEqSimp_sepNegMonomial1" (formula "2"))
               (rule "polySimp_mulLiterals" (formula "2") (term "0"))
               (rule "polySimp_elimOne" (formula "2") (term "0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "6"))
               (rule "polySimp_mulLiterals" (formula "6") (term "0"))
               (rule "polySimp_elimOne" (formula "6") (term "0"))
               (rule "inEqSimp_subsumption1" (formula "5") (term "0") (ifseqformula "7"))
               (rule "leq_literals" (formula "5") (term "0,0"))
               (builtin "One Step Simplification" (formula "5"))
               (rule "closeFalse" (formula "5"))
            )
            (branch "CUT: !quotient_0 * v_d_0 >= 1 + v_n_0 + -1 * v_d_0 FALSE"
               (rule "notRight" (formula "7"))
               (rule "hide_left" (formula "4"))
               (rule "cut" (inst "cutFormula=!gt(mul(add(quotient_0, Z(1(#))), v_d_0), v_n_0)"))
               (branch "CUT: !(quotient_0 + 1) * v_d_0 > v_n_0 TRUE"
                  (rule "notLeft" (formula "1"))
                  (rule "polySimp_elimSub" (formula "4") (term "0"))
                  (rule "polySimp_mulComm0" (formula "3") (term "0"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "0"))
                  (rule "polySimp_mulComm0" (formula "7") (term "0"))
                  (rule "polySimp_mulComm0" (formula "4") (term "0,1,0"))
                  (rule "polySimp_addComm1" (formula "1") (term "1"))
                  (rule "polySimp_addComm0" (formula "7") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "7") (term "0"))
                  (rule "polySimp_elimOne" (formula "7") (term "0,0"))
                  (rule "polySimp_mulComm0" (formula "7") (term "1,0"))
                  (rule "inEqSimp_leqRight" (formula "8"))
                  (rule "add_zero_right" (formula "1") (term "0"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "6"))
                  (rule "add_zero_right" (formula "6") (term "0"))
                  (rule "polySimp_mulComm0" (formula "6") (term "1,0"))
                  (rule "inEqSimp_gtRight" (formula "8"))
                  (rule "polySimp_mulComm0" (formula "1") (term "0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0"))
                  (rule "polySimp_addComm0" (formula "1") (term "0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "6"))
                  (rule "polySimp_mulComm0" (formula "6") (term "1,0,0"))
                  (rule "polySimp_addAssoc" (formula "6") (term "0"))
                  (rule "inEqSimp_commuteLeq" (formula "8"))
                  (rule "applyEq" (formula "2") (term "0,1,0") (ifseqformula "4"))
                  (rule "applyEqRigid" (formula "6") (term "0,0,1,0") (ifseqformula "4"))
                  (rule "polySimp_mulComm0" (formula "6") (term "0,1,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "7"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "0"))
                  (rule "polySimp_elimOne" (formula "7") (term "0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1"))
                  (rule "polySimp_rightDist" (formula "1") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "0,1"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                  (rule "polySimp_elimOne" (formula "2") (term "0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "6"))
                  (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                  (rule "polySimp_elimOne" (formula "6") (term "0"))
                  (rule "inEqSimp_contradInEq0" (formula "3") (ifseqformula "1"))
                  (rule "andLeft" (formula "3"))
                  (rule "inEqSimp_homoInEq1" (formula "3"))
                  (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                  (rule "polySimp_mulAssoc" (formula "3") (term "0,1,0"))
                  (rule "polySimp_mulComm0" (formula "3") (term "0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "3") (term "0,1,0"))
                  (rule "polySimp_elimOne" (formula "3") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "3") (term "0"))
                  (rule "polySimp_addComm1" (formula "3") (term "0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
                  (rule "add_literals" (formula "3") (term "1,1,0"))
                  (rule "times_zero_1" (formula "3") (term "1,0"))
                  (rule "add_zero_right" (formula "3") (term "0"))
                  (rule "polySimp_pullOutFactor2b" (formula "3") (term "0"))
                  (rule "add_literals" (formula "3") (term "1,1,0"))
                  (rule "times_zero_1" (formula "3") (term "1,0"))
                  (rule "add_literals" (formula "3") (term "0"))
                  (rule "leq_literals" (formula "3"))
                  (rule "closeFalse" (formula "3"))
               )
               (branch "CUT: !(quotient_0 + 1) * v_d_0 > v_n_0 FALSE"
                  (rule "notRight" (formula "7"))
                  (rule "hide_left" (formula "2"))
                  (rule "cut" (inst "cutFormula=gt(add(quotient_0, Z(1(#))), Z(0(#)))"))
                  (branch "CUT: quotient_0 + 1 > 0 TRUE"
                     (rule "polySimp_elimSub" (formula "5") (term "0"))
                     (rule "polySimp_mulComm0" (formula "2") (term "0"))
                     (rule "polySimp_mulComm0" (formula "4") (term "0"))
                     (rule "polySimp_mulComm0" (formula "5") (term "0,1,0"))
                     (rule "polySimp_addComm0" (formula "1") (term "0"))
                     (rule "polySimp_addComm0" (formula "2") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "2") (term "0"))
                     (rule "polySimp_elimOne" (formula "2") (term "0,0"))
                     (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
                     (rule "inEqSimp_leqRight" (formula "8"))
                     (rule "add_zero_right" (formula "1") (term "0"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "7"))
                     (rule "add_zero_right" (formula "7") (term "0"))
                     (rule "polySimp_mulComm0" (formula "7") (term "1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "6"))
                     (rule "polySimp_mulComm0" (formula "6") (term "1,0,0"))
                     (rule "polySimp_addAssoc" (formula "6") (term "0"))
                     (rule "inEqSimp_gtToGeq" (formula "2"))
                     (rule "mul_literals" (formula "2") (term "1,0,0"))
                     (rule "add_literals" (formula "2") (term "0,0"))
                     (rule "polySimp_addAssoc" (formula "2") (term "0"))
                     (rule "add_literals" (formula "2") (term "0,0"))
                     (rule "add_zero_left" (formula "2") (term "0"))
                     (rule "inEqSimp_gtToGeq" (formula "3"))
                     (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
                     (rule "polySimp_addAssoc" (formula "3") (term "0"))
                     (rule "polySimp_addComm1" (formula "3") (term "0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "8"))
                     (rule "applyEqRigid" (formula "6") (term "0,0,1,0") (ifseqformula "4"))
                     (rule "polySimp_mulComm0" (formula "6") (term "0,1,0"))
                     (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "4"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "7"))
                     (rule "polySimp_mulLiterals" (formula "7") (term "0"))
                     (rule "polySimp_elimOne" (formula "7") (term "0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                     (rule "polySimp_mulComm0" (formula "3") (term "1"))
                     (rule "polySimp_rightDist" (formula "3") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                     (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                     (rule "polySimp_rightDist" (formula "3") (term "0,1"))
                     (rule "mul_literals" (formula "3") (term "0,0,1"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "6"))
                     (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                     (rule "polySimp_elimOne" (formula "6") (term "0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                     (rule "polySimp_elimOne" (formula "1") (term "0"))
                     (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "1"))
                     (rule "qeq_literals" (formula "2") (term "0"))
                     (builtin "One Step Simplification" (formula "2"))
                     (rule "closeFalse" (formula "2"))
                  )
                  (branch "CUT: quotient_0 + 1 > 0 FALSE"
                     (rule "hide_right" (formula "8"))
                     (rule "hide_left" (formula "4"))
                     (rule "cut" (inst "cutFormula=!gt(mul(add(quotient_0, Z(1(#))), v_d_0), Z(0(#)))"))
                     (branch "CUT: !(quotient_0 + 1) * v_d_0 > 0 TRUE"
                        (rule "notLeft" (formula "1"))
                        (rule "polySimp_mulComm0" (formula "1") (term "0"))
                        (rule "polySimp_mulComm0" (formula "3") (term "0"))
                        (rule "polySimp_mulComm0" (formula "6") (term "0"))
                        (rule "polySimp_addComm0" (formula "7") (term "0"))
                        (rule "polySimp_addComm0" (formula "1") (term "1,0"))
                        (rule "polySimp_addComm0" (formula "6") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "0"))
                        (rule "polySimp_elimOne" (formula "1") (term "0,0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "6") (term "0"))
                        (rule "polySimp_elimOne" (formula "6") (term "0,0"))
                        (rule "polySimp_mulComm0" (formula "6") (term "1,0"))
                        (rule "inEqSimp_gtRight" (formula "7"))
                        (rule "mul_literals" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "inEqSimp_ltToLeq" (formula "5"))
                        (rule "add_zero_right" (formula "5") (term "0"))
                        (rule "polySimp_mulComm0" (formula "5") (term "1,0"))
                        (rule "inEqSimp_gtRight" (formula "7"))
                        (rule "mul_literals" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "inEqSimp_gtToGeq" (formula "3"))
                        (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
                        (rule "polySimp_addAssoc" (formula "3") (term "0"))
                        (rule "polySimp_addComm1" (formula "3") (term "0,0"))
                        (rule "inEqSimp_commuteLeq" (formula "7"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                        (rule "mul_literals" (formula "2") (term "1"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "6"))
                        (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                        (rule "polySimp_elimOne" (formula "6") (term "0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                        (rule "polySimp_mulComm0" (formula "3") (term "1"))
                        (rule "polySimp_rightDist" (formula "3") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                        (rule "polySimp_rightDist" (formula "3") (term "0,1"))
                        (rule "mul_literals" (formula "3") (term "0,0,1"))
                        (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "1"))
                        (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                        (rule "polySimp_addComm1" (formula "3") (term "0"))
                        (rule "polySimp_rightDist" (formula "3") (term "0,0,0"))
                        (rule "mul_literals" (formula "3") (term "0,0,0,0"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "1,0,0,0"))
                        (rule "polySimp_elimOne" (formula "3") (term "1,0,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,0"))
                        (rule "add_literals" (formula "3") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "3") (term "1,0,0"))
                        (rule "add_literals" (formula "3") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                        (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                        (rule "polySimp_elimOne" (formula "3") (term "0"))
                        (rule "inEqSimp_contradInEq0" (formula "8") (ifseqformula "3"))
                        (rule "qeq_literals" (formula "8") (term "0"))
                        (builtin "One Step Simplification" (formula "8"))
                        (rule "closeFalse" (formula "8"))
                     )
                     (branch "CUT: !(quotient_0 + 1) * v_d_0 > 0 FALSE"
                        (rule "notRight" (formula "6"))
                        (rule "hide_left" (formula "2"))
                        (rule "hide_left" (formula "2"))
                        (rule "hide_left" (formula "2"))
                        (rule "hide_left" (formula "3"))
                        (rule "cut" (inst "cutFormula=add(quotient_0, Z(1(#))) = Z(0(#))"))
                        (branch "CUT: quotient_0 + 1 = 0 TRUE"
                           (rule "polySimp_mulComm0" (formula "2") (term "0"))
                           (rule "polySimp_addComm0" (formula "4") (term "0"))
                           (rule "polySimp_addComm0" (formula "1") (term "0"))
                           (rule "polySimp_addComm0" (formula "2") (term "1,0"))
                           (rule "polySimp_rightDist" (formula "2") (term "0"))
                           (rule "polySimp_elimOne" (formula "2") (term "0,0"))
                           (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
                           (rule "inEqSimp_gtRight" (formula "4"))
                           (rule "mul_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "inEqSimp_ltToLeq" (formula "4"))
                           (rule "add_zero_right" (formula "4") (term "0"))
                           (rule "polySimp_mulComm0" (formula "4") (term "1,0"))
                           (rule "inEqSimp_gtToGeq" (formula "3"))
                           (rule "mul_literals" (formula "3") (term "1,0,0"))
                           (rule "add_literals" (formula "3") (term "0,0"))
                           (rule "polySimp_addAssoc" (formula "3") (term "0"))
                           (rule "polySimp_sepPosMonomial" (formula "2"))
                           (rule "mul_literals" (formula "2") (term "1"))
                           (rule "applyEq" (formula "3") (term "1,1,0") (ifseqformula "2"))
                           (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
                           (rule "add_literals" (formula "3") (term "1,1,0"))
                           (rule "times_zero_1" (formula "3") (term "1,0"))
                           (rule "add_literals" (formula "3") (term "0"))
                           (rule "qeq_literals" (formula "3"))
                           (rule "closeFalse" (formula "3"))
                        )
                        (branch "CUT: quotient_0 + 1 = 0 FALSE"
                           (rule "cut" (inst "cutFormula=!lt(add(quotient_0, Z(1(#))), Z(0(#)))"))
                           (branch "CUT: !quotient_0 + 1 < 0 TRUE"
                              (rule "notLeft" (formula "1"))
                              (rule "polySimp_mulComm0" (formula "1") (term "0"))
                              (rule "polySimp_addComm0" (formula "5") (term "0"))
                              (rule "polySimp_addComm0" (formula "4") (term "0"))
                              (rule "polySimp_addComm0" (formula "3") (term "0"))
                              (rule "polySimp_addComm0" (formula "1") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "1") (term "0"))
                              (rule "polySimp_elimOne" (formula "1") (term "0,0"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                              (rule "inEqSimp_gtRight" (formula "5"))
                              (rule "mul_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "inEqSimp_ltRight" (formula "4"))
                              (rule "mul_literals" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "inEqSimp_ltToLeq" (formula "4"))
                              (rule "add_zero_right" (formula "4") (term "0"))
                              (rule "polySimp_mulComm0" (formula "4") (term "1,0"))
                              (rule "inEqSimp_gtToGeq" (formula "3"))
                              (rule "mul_literals" (formula "3") (term "1,0,0"))
                              (rule "add_literals" (formula "3") (term "0,0"))
                              (rule "polySimp_addAssoc" (formula "3") (term "0"))
                              (rule "polySimp_sepPosMonomial" (formula "5"))
                              (rule "mul_literals" (formula "5") (term "1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                              (rule "mul_literals" (formula "2") (term "1"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                              (rule "mul_literals" (formula "1") (term "1"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "4"))
                              (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                              (rule "polySimp_elimOne" (formula "4") (term "0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                              (rule "polySimp_mulComm0" (formula "3") (term "1"))
                              (rule "polySimp_rightDist" (formula "3") (term "1"))
                              (rule "mul_literals" (formula "3") (term "0,1"))
                              (rule "inEqSimp_strengthen1" (formula "1") (ifseqformula "5"))
                              (rule "add_literals" (formula "1") (term "1"))
                              (rule "inEqSimp_contradEq7" (formula "5") (ifseqformula "1"))
                              (rule "mul_literals" (formula "5") (term "1,0,0"))
                              (rule "add_literals" (formula "5") (term "0,0"))
                              (rule "leq_literals" (formula "5") (term "0"))
                              (builtin "One Step Simplification" (formula "5"))
                              (rule "false_right" (formula "5"))
                              (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "2"))
                              (rule "qeq_literals" (formula "1") (term "0"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "closeFalse" (formula "1"))
                           )
                           (branch "CUT: !quotient_0 + 1 < 0 FALSE"
                              (rule "notRight" (formula "3"))
                              (rule "cut" (inst "cutFormula=!(  lt(add(quotient_0, Z(1(#))), Z(0(#)))
  & lt(Z(0(#)), v_d_0))"))
                              (branch "CUT: !(quotient_0 + 1 < 0 & 0 < v_d_0) TRUE"
                                 (rule "notLeft" (formula "1"))
                                 (rule "replace_known_left" (formula "4") (term "1") (ifseqformula "3"))
                                 (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "1")))
                                 (rule "closeTrue" (formula "4"))
                              )
                              (branch "CUT: !(quotient_0 + 1 < 0 & 0 < v_d_0) FALSE"
                                 (rule "notRight" (formula "4"))
                                 (rule "mult_pos_neg" (formula "1"))
                                 (rule "polySimp_mulComm0" (formula "3") (term "0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "0"))
                                 (rule "polySimp_addComm0" (formula "6") (term "0"))
                                 (rule "polySimp_addComm0" (formula "2") (term "0"))
                                 (rule "polySimp_addComm0" (formula "5") (term "0"))
                                 (rule "polySimp_addComm0" (formula "3") (term "1,0"))
                                 (rule "polySimp_addComm0" (formula "1") (term "1,0"))
                                 (rule "polySimp_rightDist" (formula "3") (term "0"))
                                 (rule "polySimp_elimOne" (formula "3") (term "0,0"))
                                 (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "0,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                                 (rule "inEqSimp_gtRight" (formula "6"))
                                 (rule "mul_literals" (formula "1") (term "0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0"))
                                 (rule "inEqSimp_ltToLeq" (formula "5"))
                                 (rule "add_zero_right" (formula "5") (term "0"))
                                 (rule "polySimp_mulComm0" (formula "5") (term "1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "3"))
                                 (rule "mul_literals" (formula "3") (term "1,0,0"))
                                 (rule "add_literals" (formula "3") (term "0,0"))
                                 (rule "polySimp_addAssoc" (formula "3") (term "0"))
                                 (rule "add_literals" (formula "3") (term "0,0"))
                                 (rule "inEqSimp_gtToGeq" (formula "4"))
                                 (rule "mul_literals" (formula "4") (term "1,0,0"))
                                 (rule "add_literals" (formula "4") (term "0,0"))
                                 (rule "polySimp_addAssoc" (formula "4") (term "0"))
                                 (rule "inEqSimp_ltToLeq" (formula "2"))
                                 (rule "mul_literals" (formula "2") (term "1,0,0"))
                                 (rule "add_literals" (formula "2") (term "0,0"))
                                 (rule "polySimp_addAssoc" (formula "2") (term "0"))
                                 (rule "polySimp_sepPosMonomial" (formula "6"))
                                 (rule "mul_literals" (formula "6") (term "1"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                 (rule "mul_literals" (formula "1") (term "1"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "5"))
                                 (rule "polySimp_mulLiterals" (formula "5") (term "0"))
                                 (rule "polySimp_elimOne" (formula "5") (term "0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                                 (rule "mul_literals" (formula "3") (term "1"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                                 (rule "polySimp_mulComm0" (formula "4") (term "1"))
                                 (rule "polySimp_rightDist" (formula "4") (term "1"))
                                 (rule "mul_literals" (formula "4") (term "0,1"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                                 (rule "polySimp_mulComm0" (formula "2") (term "1"))
                                 (rule "polySimp_rightDist" (formula "2") (term "1"))
                                 (rule "mul_literals" (formula "2") (term "0,1"))
                                 (rule "inEqSimp_contradEq3" (formula "6") (ifseqformula "3"))
                                 (rule "mul_literals" (formula "6") (term "1,0,0"))
                                 (rule "add_literals" (formula "6") (term "0,0"))
                                 (rule "qeq_literals" (formula "6") (term "0"))
                                 (builtin "One Step Simplification" (formula "6"))
                                 (rule "false_right" (formula "6"))
                                 (rule "inEqSimp_subsumption0" (formula "1") (ifseqformula "3"))
                                 (rule "leq_literals" (formula "1") (term "0"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "true_left" (formula "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "3"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "inEqSimp_homoInEq1" (formula "1"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1,1,0"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0"))
                                 (rule "polySimp_addComm1" (formula "1") (term "0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0,0"))
                                 (rule "polySimp_pullOutFactor2b" (formula "1") (term "0"))
                                 (rule "add_literals" (formula "1") (term "1,1,0"))
                                 (rule "times_zero_1" (formula "1") (term "1,0"))
                                 (rule "add_literals" (formula "1") (term "0"))
                                 (rule "leq_literals" (formula "1"))
                                 (rule "closeFalse" (formula "1"))
                              )
                           )
                        )
                     )
                  )
               )
            )
         )
      )
   )
   (branch "Case 2"
      (rule "div_axiom" (formula "1") (term "1,1,0") (inst "quotient=quotient_1"))
      (rule "orLeft" (formula "1"))
      (branch "v_d_0 = 0"
         (rule "polySimp_elimSub" (formula "5") (term "1"))
         (rule "polySimp_elimSub" (formula "2") (term "0"))
         (rule "polySimp_mulComm0" (formula "5") (term "0,1,1"))
         (rule "polySimp_mulComm0" (formula "2") (term "0,1,0"))
         (rule "inEqSimp_leqRight" (formula "5"))
         (rule "add_zero_right" (formula "1") (term "0"))
         (rule "polySimp_rightDist" (formula "1") (term "1,0"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0"))
         (rule "polySimp_elimOne" (formula "1") (term "1,1,0"))
         (rule "polySimp_mulComm0" (formula "1") (term "0,1,0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0"))
         (rule "inEqSimp_ltToLeq" (formula "4"))
         (rule "add_zero_right" (formula "4") (term "0"))
         (rule "polySimp_mulComm0" (formula "4") (term "1,0"))
         (rule "inEqSimp_ltToLeq" (formula "3"))
         (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
         (rule "polySimp_addAssoc" (formula "3") (term "0"))
         (rule "inEqSimp_commuteLeq" (formula "5"))
         (rule "applyEqRigid" (formula "3") (term "1,0,0,1,0") (ifseqformula "2"))
         (rule "applyEqRigid" (formula "4") (term "0,1,0") (ifseqformula "2"))
         (rule "mul_literals" (formula "4") (term "1,0"))
         (rule "add_literals" (formula "4") (term "0"))
         (rule "leq_literals" (formula "4"))
         (rule "closeFalse" (formula "4"))
      )
      (branch " v_n_0 / v_d_0 = quotient_1 & quotient_1 * v_d_0 <= v_n_0 & if (v_d_0 >= 0) then ( quotient_1 * v_d_0 >= 1 + v_n_0 + -1 * v_d_0) else (quotient_1 * v_d_0 >= 1 + v_n_0 + v_d_0)"
         (rule "andLeft" (formula "1"))
         (rule "andLeft" (formula "1"))
         (rule "polySimp_elimSub" (formula "7") (term "1"))
         (rule "polySimp_elimSub" (formula "4") (term "0"))
         (rule "polySimp_mulComm0" (formula "3") (term "0,2"))
         (rule "polySimp_mulComm0" (formula "3") (term "1,1,1"))
         (rule "polySimp_mulComm0" (formula "3") (term "0,1"))
         (rule "polySimp_mulComm0" (formula "2") (term "0"))
         (rule "polySimp_mulComm0" (formula "7") (term "0,1,1"))
         (rule "polySimp_mulComm0" (formula "4") (term "0,1,0"))
         (rule "polySimp_addComm1" (formula "3") (term "1,2"))
         (rule "polySimp_addComm1" (formula "3") (term "1,1"))
         (rule "inEqSimp_leqRight" (formula "7"))
         (rule "add_zero_right" (formula "1") (term "0"))
         (rule "polySimp_rightDist" (formula "1") (term "1,0"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0"))
         (rule "polySimp_elimOne" (formula "1") (term "1,1,0"))
         (rule "polySimp_mulComm0" (formula "1") (term "0,1,0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0"))
         (rule "inEqSimp_ltToLeq" (formula "6"))
         (rule "add_zero_right" (formula "6") (term "0"))
         (rule "polySimp_mulComm0" (formula "6") (term "1,0"))
         (rule "inEqSimp_ltToLeq" (formula "5"))
         (rule "polySimp_mulComm0" (formula "5") (term "1,0,0"))
         (rule "polySimp_addAssoc" (formula "5") (term "0"))
         (rule "inEqSimp_commuteLeq" (formula "7"))
         (rule "applyEq" (formula "5") (term "0,0,1,0") (ifseqformula "2"))
         (rule "polySimp_mulComm0" (formula "5") (term "0,1,0"))
         (rule "applyEq" (formula "1") (term "0,1,0") (ifseqformula "2"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "6"))
         (rule "polySimp_mulLiterals" (formula "6") (term "0"))
         (rule "polySimp_elimOne" (formula "6") (term "0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "5"))
         (rule "polySimp_mulLiterals" (formula "5") (term "0"))
         (rule "polySimp_elimOne" (formula "5") (term "0"))
         (rule "replace_known_left" (formula "4") (term "1") (ifseqformula "5"))
         (rule "inEqSimp_sepPosMonomial1" (formula "1"))
         (rule "polySimp_mulComm0" (formula "1") (term "1"))
         (rule "polySimp_rightDist" (formula "1") (term "1"))
         (rule "mul_literals" (formula "1") (term "0,1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
         (rule "polySimp_elimOne" (formula "1") (term "1,1"))
         (rule "inEqSimp_contradInEq1" (formula "3") (ifseqformula "1"))
         (rule "andLeft" (formula "3"))
         (rule "inEqSimp_homoInEq1" (formula "3"))
         (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
         (rule "add_literals" (formula "3") (term "1,1,0"))
         (rule "times_zero_1" (formula "3") (term "1,0"))
         (rule "add_literals" (formula "3") (term "0"))
         (rule "leq_literals" (formula "3"))
         (rule "closeFalse" (formula "3"))
      )
   )
)
)

}
