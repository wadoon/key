\sorts{
  \generic G;
  \generic H;
  \generic J \extends G;
  \generic GOS \extends Object;
  \generic alphaObj \extends Object;
  \generic betaObj \extends Object;
}

\schemaVariables {
 \modalOperator { diamond, box, diamond_transaction, box_transaction } #allmodal;
 \modalOperator { diamond, diamond_transaction } #diamond;
 \modalOperator { box, box_transaction } #box;


 \formula post, inv, post1;
 \program Type #t, #t2 ;
 \program NonPrimitiveType #npit ;  

 \term G q ;
 \skolemTerm G sk ;

 \program ArrayLength #length ;
 
 \program MultipleVariableDeclaration #multvardecl ;
 \program ArrayPostDeclaration #arraypost ;
 \program SimpleExpression #se, #se0, #se1, #se2 ;
 \program SimpleExpression #src, #dest, #srcOff, #destOff, #arlength;

 \program LeftHandSide #lhs, #lhs0, #lhs1, #lhs2 ;
 \program LeftHandSide #attribute ;
 \program Variable #loc ;
 \program StaticVariable #sv, #sv0, #sv1 ;

 \program Variable #v, #v0, #v1, #v2, #boolv, #a, #a0, #a1 ;

 \program ConstantPrimitiveTypeVariable #cv ;   // variables that are compile-time constants
 \program Variable #b0, #ar1 ;
 \program VariableInitializer #vi ;
 \program SimpleJavaBooleanExpression #seBool,#seBool0,#seBool1,#seBool2 ;
 \program JavaBooleanExpression #exBool,#exBool0,#exBool1,#exBool2 ;

 \program NonSimpleExpression #nseBool,#nseBool0,#nseBool1,#nseBool2 ;
 \program Statement #s, #s0, #s1 ;
 \program LoopInit #loopInit ;
 \program Guard #guard ;
 \program ForUpdates #forupdates ;
 \program ForLoop #forloop ;
 \program Expression #e, #e0, #e1, #e2 ;
 \program NonSimpleExpression #nse, #nse0, #nse1, #nse2, #nv ;
 \program NonSimpleExpressionNoClassReference #nsencr ;

 \program ClassReference #cr ;

 \program[list] Statement #slist, #slist1, #slist2, #slist3 ;
 \program[list] Expression #elist ;
 \program[list] SimpleExpression #selist ;
 \program[list] Catch #cs ;

 \program Switch #sw ;
 \program Label #lb, #lb0, #lb1, #innerLabel, #outerLabel;
 \program NonSimpleMethodReference #nsmr;
 \program NonModelMethodBody #mb;
 \program MethodName #mn;

 \program NonPrimitiveType[name=javacard.framework.JCSystem] #jcsystemType;
 \program MethodName[name=nativeKeYBeginTransaction] #beginTransaction;
 \program MethodName[name=nativeKeYCommitTransaction] #commitTransaction;
 \program MethodName[name=nativeKeYAbortTransaction] #abortTransaction;

 \program ExecutionContext #ex, #ex1 ; 
 \program ProgramMethod #pm ; 

 \formula anon1, anon2, anon3;
 
 \formula for1,for2;

 \program NonStringLiteral #lit ;
 \program StringLiteral #slit ;
 
 \variables int iv, iv2, iv3 ;
 \term int idx;

 // generic sorts
 \term G variant ;
 \term GOS array;
 \term H obj ;

 \variables G x ;
 \term H then, else ;
 
 \term G updatedTerm1, updatedTerm2;
}

\rules(programRules:Java) {

//--------------- loops ------------------------------------------------------//

/* Simplifies a loop with a complex guard
loopComplexToSimple {
  \find        (\modality{#allmodal}{.. while(#nseBool) #s ...}\endmodality(post))
  
  \replacewith (\modality{#allmodal}{
      .. #loop-complex-to-simple(while(#nseBool) #s); ...
  }\endmodality(post))
  
  \heuristics(loop_expand)
  };

  /* THIS IS UNSOUND!!! ONLY USED FOR COMPILATION */
  removeLoopForCompilation { 
    \schemaVar \program Variable #exc;

    \find (\modality{#allmodal}{
          .#ex..
             while(#se)
               #s
             #slist
          ...
      }\endmodality(post))

    "Loop Body":
    \replacewith (\modality{#allmodal}{
        method-frame(#ex):
          {
              #s
          }
      }\endmodality(post))
	\add (#se = TRUE ==>);
	
    "After Termination":
    \replacewith (\modality{#allmodal}{
        ..
        #slist
        ...
      }\endmodality(post))
	\add (#se = FALSE ==>)
    \heuristics(loop_expand)
  };

  removeLoopForCompilationVoid { 
    \find (\modality{#allmodal}{
          ..
          try { method-frame(#ex):
            {
                while(#se)
                  #s
                #slist
            }
          } catch #cs
          ...
      }\endmodality(post))

    "Loop Body":
    \replacewith (\modality{#allmodal}{
        ..
        try { method-frame(#ex):
          {
              #s
          }
        } catch #cs
        ...
      }\endmodality(post))
	\add (#se = TRUE ==>);
	
    "After Termination":
    \replacewith (\modality{#allmodal}{
        ..
        try {method-frame(#ex):
          {
              #slist
          }
        } catch #cs
        ...
      }\endmodality(post))
	\add (#se = FALSE ==>)
    \heuristics(loop_expand)
  };
  
//--------------- method calls ------------------------------------------//
  superRemoveForCompilation { 
    \find (\modality{#allmodal}{.#ex.. super.#mn(#selist); ...}\endmodality(post)) 
    \replacewith (\modality{#allmodal}{.. 
                            ...}\endmodality(post)) 
    \heuristics(simplify_autoname)
  };


}
