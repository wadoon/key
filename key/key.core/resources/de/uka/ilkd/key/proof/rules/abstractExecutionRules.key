\sorts {
    \abstract java.lang.Throwable \extends java.lang.Object;
}

\schemaVariables {
    \modalOperator { diamond, box, diamond_transaction, box_transaction } #allmodal;
    
    \formula post;
    \update upd;
    
    \skolemFormula C_sk;
    \skolemUpdate U_sk;
    
    \program AbstractProgram #absProg;
    \program[list] Statement #slist;
    \program Statement #s;
    \program Expression #e;
    \program Variable #exc, #returned, #result;
    \program Variable #v;
    \program ExecutionContext #ctx;
}

\rules(programRules:Java) {
    // TODO (2018-11-18): This rule ignores (labeled and unlabeled)
    // breaks and continues. It will be a bit of work to consider 
    // that in a taclet (there might be breaks to any outer label
    // etc.). Also, continuing only makes sense if we're inside a 
    // loop. This taclet is sound nevertheless since the abstract
    // program occurs as first statement and can therefore not be
    // part of a loop, labeled block etc. We will have to create
    // further taclets or extend this one to be complete... 
    abstractExecutionRet {
        \find (==> {upd}\modality{#allmodal}{ ..
                method-frame(#v, #ctx): {
                    #absProg
                    #slist
                } ... }\endmodality(post))
                
        \varcond(\new(#exc, java.lang.Throwable))
        \varcond(\new(#returned, boolean))
        \varcond(\new(#result, \typeof(#v)))
        
        \replacewith (==> {upd}{U_sk}\modality{#allmodal}{..
            method-frame(#v, #ctx): {
                if (#returned) {
                    return #result;
                }
                if (#exc != null) {
                    throw #exc;
                }
                #slist
            }
         ...}\endmodality(post))
         
        \add ({upd}{U_sk} (C_sk & (
              #returned = FALSE & #exc = null
            | #returned = TRUE  & #exc = null
            | #returned = FALSE & !#exc = null
        )) ==>)
   
        \heuristics(simplify_prog)
    };

    abstractExecutionNoRet {
        \find (==> {upd}\modality{#allmodal}{ ..
                method-frame(#ctx): {
                    #absProg
                    #slist
                } ... }\endmodality(post))
                
        \varcond(\new(#exc, java.lang.Throwable))
        
        \replacewith (==> {upd}{U_sk}\modality{#allmodal}{..
            method-frame(#ctx): {
                if (#exc != null) {
                    throw #exc;
                }
                #slist
            }
         ...}\endmodality(post))
         
        \add ({upd}{U_sk} (C_sk) ==>)
   
        \heuristics(simplify_prog)
    };
}

\rules(programRules:Java, lazySymbExec:on) {
     lazyLoop {
         \find (\modality{#allmodal}{.. while(#e) #s ...}\endmodality(post))
         \replacewith ({U_sk} \modality{#allmodal}{.. ...}\endmodality(post))
         \add ( C_sk ==> )
         \heuristics(simplify_prog)
     };
}
