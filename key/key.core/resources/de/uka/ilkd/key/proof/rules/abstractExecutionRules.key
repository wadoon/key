\sorts {
    \abstract java.lang.Throwable \extends java.lang.Object;
    \generic G;
}

\schemaVariables {
    \modalOperator { diamond, box, diamond_transaction, box_transaction } #allmodal;
    
    \formula fml, post;
    \update upd;
    
    \program AbstractProgram #absProg;
    \program[list] Statement #slist, #slist1;
    \program Statement #s;
    \program Expression #e;
    \program Variable #exc, #returns, #result, #breaks, #continues;
    \program Variable #v, #v1, #x;
    \program[list] Variable #vars;
    \program ExecutionContext #ctx, #ctx1;
    \program Label #label;
    \program[list] Label #labels;
}

\heuristicsDecl {
    abstractExecution;
    abstrUpdPriorityRules;
    abstrUpdLowPrioRules;
    abstrUpdLowestPrioRules;
    abstr_upd_commute;
}

\rules(programRules:Java) {
    /* 
      TODOS
      =====
      
      - (DS, 2019-02-14) Support labeled continues for loop scope rule.
    */

    abstractExecutionNonVoidLoopScope {
        // Note (DS, 2019-02-14): This rule does not yet support labeled continues. 
    
        // All Skolem symbols are "fresh for" the abstract program, such that
        // the same program occurring twice directly encodes the same behavior.
        \schemaVar \formula [nonrigid] C;
        \schemaVar \update U;
        \schemaVar \skolemTerm java.lang.Throwable exc \freshFor(#absProg);
        \schemaVar \skolemTerm boolean returns \freshFor(#absProg);
        \schemaVar \skolemTerm any result \freshFor(#absProg);
        \schemaVar \skolemTerm boolean breaks \freshFor(#absProg);
        \schemaVar \skolemTerm boolean continues \freshFor(#absProg);
    
        \find (\modality{#allmodal}{ .. loop-scope(#x) { { { #absProg } #slist } #slist1 } ... }\endmodality(post))
               
        // TODO (DS, 2019-02-04): Check that there are no loop labels in front 
        // Check that we're inside a method frame (otherwise returning makes no sense)
        \varcond(\prefixContainsElement("MethodFrame"))
        
        // Check that we're in a non-void method, extract result variable
        \varcond(\storeResultVarIn(#v))
        \varcond(\isDefined(#v))
        
        // Surrounding block labels 
        \varcond(\storeContextLabelsIn(#labels))
        // Booleans modeling breaks to those labels. Fresh for the abstract program.
        \varcond(\instantiateVarsFresh(#vars, #labels, "breaks", boolean \freshFor(#absProg)))
        
        // Program variables for modeling irregular termination
        \varcond(\newPV(#exc, "exc", java.lang.Throwable \freshFor(#absProg)))
        \varcond(\newPV(#returns, "returns", boolean \freshFor(#absProg)))
        \varcond(\newPV(#result, "result", \typeof(#v) \freshFor(#absProg)))
        \varcond(\newPV(#breaks, "breaks", boolean \freshFor(#absProg)))
        \varcond(\newPV(#continues, "continues", boolean \freshFor(#absProg)))
        
        // Parametric Skolem update and path condition initialization.
        //
        // The update receives two location sets as parameters; the first one for its
        // assignable, and the second one for its accessible locations (similar to a
        // normal update, just with sets). The path condition receives as argument the
        // location set of its accessible values, including the exception, returns, 
        // result, breaks and continues flags.
        \varcond(\initializeParametricSkolemUpdate(U, #absProg))
        \varcond(\initializeParametricSkolemPathCondition(C, #absProg))
 
        // Index variables for foreach loop 
        \varcond(\new(#v1, boolean))
        \varcond(\newLabel(#label))
        
        \replacewith ( 
             {U}{#exc:=exc || #returns:=returns || #result:=#addCast(result,#result) || #breaks:=breaks || #continues:=continues}
               (  C 
                & #mutualExclusionFormula5(#returns, #exc, #breaks, #continues, #vars) 
                & #returnSpec(#absProg, #returns)
                & #excSpec(#absProg, #exc)
                & #breaksSpec(#absProg, #breaks)
                & #continuesSpec(#absProg, #continues)
               ) ->
             {U}{#exc:=exc || #returns:=returns || #result:=#addCast(result,#result) || #breaks:=breaks || #continues:=continues}
               \modality{#allmodal}{
                 ..
                 loop-scope(#x) {
                     {
                         if (#returns) {
                             return #result;
                         }
                         if (#exc != null) {
                             throw #exc;
                         }
                         if (#continues) {
                             continue;
                         }
                         if (#breaks) {
                             break;
                         }
                         #foreach (#v1, #label in #vars, #labels) { 
                             if (#v1) {
                                 break #label;
                             }
                         }
                         
                         #slist
                     }
                     
                     #slist1
                 }
                 ...
               }\endmodality(post))
        
        \heuristics(abstractExecution, simplify_prog)
    };
    
    abstractExecutionNonVoid {
        // All Skolem symbols are "fresh for" the abstract program, such that
        // the same program occurring twice directly encodes the same behavior.
        \schemaVar \formula [nonrigid] C;
        \schemaVar \update U;
        \schemaVar \skolemTerm java.lang.Throwable exc \freshFor(#absProg);
        \schemaVar \skolemTerm boolean returns \freshFor(#absProg);
        \schemaVar \skolemTerm any result \freshFor(#absProg);
    
        \find (\modality{#allmodal}{ .. #absProg ... }\endmodality(post))
                
        // Check that we're outside a loop scope 
        \varcond(\not\prefixContainsElement("LoopScopeBlock"))
        // Check that we're inside a method frame (otherwise returning makes no sense)
        \varcond(\prefixContainsElement("MethodFrame"))
        
        // Check that we're in a non-void method, extract result variable
        \varcond(\storeResultVarIn(#v))
        \varcond(\isDefined(#v))
        
        // Surrounding block labels 
        \varcond(\storeContextLabelsIn(#labels))
        // Booleans modeling breaks to those labels. Fresh for the abstract program.
        \varcond(\instantiateVarsFresh(#vars, #labels, "breaks", boolean \freshFor(#absProg)))
        
        // Program variables for modeling irregular termination
        \varcond(\newPV(#exc, "exc", java.lang.Throwable \freshFor(#absProg)))
        \varcond(\newPV(#returns, "returns", boolean \freshFor(#absProg)))
        \varcond(\newPV(#result, "result", \typeof(#v) \freshFor(#absProg)))
        
        // Parametric Skolem update and path condition initialization.
        //
        // The update receives two location sets as parameters; the first one for its
        // assignable, and the second one for its accessible locations (similar to a
        // normal update, just with sets). The path condition receives as argument the
        // location set of its accessible values, including the exception, returns, 
        // and result flags.
        \varcond(\initializeParametricSkolemUpdate(U, #absProg))
        \varcond(\initializeParametricSkolemPathCondition(C, #absProg))
 
        // Index variables for foreach loop 
        \varcond(\new(#v1, boolean))
        \varcond(\newLabel(#label))
        
        \replacewith ( 
             {U}{#exc:=exc || #returns:=returns || #result:=#addCast(result,#result)}
               (  C 
                & #mutualExclusionFormula3(#returns, #exc, #vars) 
                & #returnSpec(#absProg, #returns)
                & #excSpec(#absProg, #exc)) ->
             {U}{#exc:=exc || #returns:=returns || #result:=#addCast(result,#result)}
               \modality{#allmodal}{
                 ..
                 if (#returns) {
                     return #result;
                 }
                 if (#exc != null) {
                     throw #exc;
                 }
                 #foreach (#v1, #label in #vars, #labels) { 
                     if (#v1) {
                         break #label;
                     }
                 }
                 ...
               }\endmodality(post))
        
        \heuristics(abstractExecution, simplify_prog)
    };
    
    abstractExecutionVoid {
        // All Skolem symbols are "fresh for" the abstract program, such that
        // the same program occurring twice directly encodes the same behavior.
        \schemaVar \formula [nonrigid] C;
        \schemaVar \update U;
        \schemaVar \skolemTerm java.lang.Throwable exc \freshFor(#absProg);
        \schemaVar \skolemTerm boolean returns \freshFor(#absProg);
    
        \find (\modality{#allmodal}{ .. #absProg ... }\endmodality(post))
                
        // Check that we're outside a loop scope 
        
        \varcond(\not\prefixContainsElement("LoopScopeBlock"))
        // Check that we're inside a method frame (otherwise returning makes no sense)
        \varcond(\prefixContainsElement("MethodFrame"))
        
        // Check that we're in a void method
        \varcond(\storeResultVarIn(#v))
        \varcond(\not\isDefined(#v))
        
        // Surrounding block labels 
        \varcond(\storeContextLabelsIn(#labels))
        // Booleans modeling breaks to those labels. Fresh for the abstract program.
        \varcond(\instantiateVarsFresh(#vars, #labels, "breaks", boolean \freshFor(#absProg)))
        
        // Program variables for modeling irregular termination
        \varcond(\newPV(#exc, "exc", java.lang.Throwable \freshFor(#absProg)))
        \varcond(\newPV(#returns, "returns", boolean \freshFor(#absProg)))
        
        // Parametric Skolem update and path condition initialization.
        //
        // The update receives two location sets as parameters; the first one for its
        // assignable, and the second one for its accessible locations (similar to a
        // normal update, just with sets). The path condition receives as argument the
        // location set of its accessible values, including the exception and returns 
        // flags.
        \varcond(\initializeParametricSkolemUpdate(U, #absProg))
        \varcond(\initializeParametricSkolemPathCondition(C, #absProg))
 
        // Index variables for foreach loop 
        \varcond(\new(#v1, boolean))
        \varcond(\newLabel(#label))
        
        \replacewith ( 
             {U}{#exc:=exc || #returns:=returns}
               (  C 
                & #mutualExclusionFormula3(#returns, #exc, #vars) 
                & #returnSpec(#absProg, #returns)
                & #excSpec(#absProg, #exc)) ->
             {U}{#exc:=exc || #returns:=returns}
               \modality{#allmodal}{
                 ..
                 if (#returns) {
                     return;
                 }
                 if (#exc != null) {
                     throw #exc;
                 }
                 #foreach (#v1, #label in #vars, #labels) { 
                     if (#v1) {
                         break #label;
                     }
                 }
                 ...
               }\endmodality(post))
        
        \heuristics(abstractExecution, simplify_prog)
    };
    
    abstractExecutionNoMethod {
        // All Skolem symbols are "fresh for" the abstract program, such that
        // the same program occurring twice directly encodes the same behavior.
        \schemaVar \formula [nonrigid] C;
        \schemaVar \update U;
        \schemaVar \skolemTerm java.lang.Throwable exc \freshFor(#absProg);
    
        \find (\modality{#allmodal}{ .. #absProg ... }\endmodality(post))
                
        // Check that we're outside a loop scope 
        
        \varcond(\not\prefixContainsElement("LoopScopeBlock"))
        // Check that we're not inside a method frame
        \varcond(\not\prefixContainsElement("MethodFrame"))
        
        // Surrounding block labels 
        \varcond(\storeContextLabelsIn(#labels))
        // Booleans modeling breaks to those labels. Fresh for the abstract program.
        \varcond(\instantiateVarsFresh(#vars, #labels, "breaks", boolean \freshFor(#absProg)))
        
        // Program variables for modeling irregular termination
        \varcond(\newPV(#exc, "exc", java.lang.Throwable \freshFor(#absProg)))
        
        // Parametric Skolem update and path condition initialization.
        //
        // The update receives two location sets as parameters; the first one for its
        // assignable, and the second one for its accessible locations (similar to a
        // normal update, just with sets). The path condition receives as argument the
        // location set of its accessible values, including the exception flag.
        \varcond(\initializeParametricSkolemUpdate(U, #absProg))
        \varcond(\initializeParametricSkolemPathCondition(C, #absProg))
 
        // Index variables for foreach loop 
        \varcond(\new(#v1, boolean))
        \varcond(\newLabel(#label))
        
        \replacewith ( 
             {U}{#exc:=exc}
               (  C 
                & #mutualExclusionFormula2(#exc, #vars) 
                & #excSpec(#absProg, #exc)) ->
             {U}{#exc:=exc}
               \modality{#allmodal}{
                 ..
                 if (#exc != null) {
                     throw #exc;
                 }
                 #foreach (#v1, #label in #vars, #labels) { 
                     if (#v1) {
                         break #label;
                     }
                 }
                 ...
               }\endmodality(post))
        
        \heuristics(abstractExecution, simplify_prog)
    };

    // //////////////////////////////////
    // Special rules for abstract updates
    // //////////////////////////////////
   
    // The following quantifier rules allow quantifier treatment
    // below multiple updates, which we need for abstract execution
    // where updates cannot be always be merged to one. This is,
    // however, no nice solution: It would be better to have generic
    // "update context" SVs (and corresponding notations) in which
    // preceding updates can explicitly be stored. 
    
    allLeftUpdLevel1 {
      \schemaVar \variables G v;
      \schemaVar \term G t;
      \schemaVar \formula phi;
      \schemaVar \update u1;
      
  	  \find ({u1} (\forall v; phi) ==>)
  	  \add  ({u1} ({\subst v; t}(phi)) ==>)
  	  \heuristics(gamma)
    };
    
    allLeftUpdLevel2 {
      \schemaVar \variables G v;
      \schemaVar \term G t;
      \schemaVar \formula phi;
      \schemaVar \update u1, u2;
      
  	  \find ({u1}{u2} (\forall v; phi) ==>)
  	  \add  ({u1}{u2} ({\subst v; t}(phi)) ==>)
    };
    
    allLeftUpdLevel2a {
      \schemaVar \variables G v;
      \schemaVar \term G t;
      \schemaVar \formula phi;
      \schemaVar \update u1;
      
  	  \find ({u1} (\modality{#allmodal}{ #slist }\endmodality(\forall v; phi)) ==>)
  	  \add  ({u1} (\modality{#allmodal}{ #slist }\endmodality({\subst v; t}(phi))) ==>)
    };
    
    allLeftHideUpdLevel2a {
      \schemaVar \variables G v;
      \schemaVar \term G t;
      \schemaVar \formula phi;
      \schemaVar \update u1;
      
  	  \find         ({u1} (\modality{#allmodal}{ #slist }\endmodality(\forall v; phi)) ==>)
  	  \replacewith  ({u1} (\modality{#allmodal}{ #slist }\endmodality({\subst v; t}(phi))) ==>)
      \addrules (insert_hidden { \add ({u1} (\modality{#allmodal}{ #slist }\endmodality(\forall v; phi)) ==>) })
    };
    
    // Abstract update simplification rules
   
    sequentialToConcatenatedAbs {
        \schemaVar \update u, u2;
        \schemaVar \formula phi;    
    
        \find({u}{u2} phi)
        \varcond(\abstractUpdate(u))
        \varcond(\abstractUpdate(u2))
    
        \replacewith({u ++ u2} phi)
    
        \heuristics(abstrUpdLowestPrioRules)
    };
   
    applyAbstrOnConcrUpd {
        \schemaVar \update u1, u2;
        \schemaVar \formula phi, result;
       
        \find({u1}{u2}phi) 
        
        \varcond(\abstractUpdate(u1))
        \varcond(\not\abstractUpdate(u2))
        
        \varcond(\applyAbstrOnConcrUpdate(u1, u2, phi, result))
        
        \replacewith(result)
        \heuristics(abstrUpdPriorityRules)
    };

    applyConcrOnAbstrUpd {
        \schemaVar \update u1, u2;
        \schemaVar \formula phi, result;
       
        \find({u1}{u2}phi) 
        
        \varcond(\not\abstractUpdate(u1))
        \varcond(\abstractUpdate(u2))
        
        \varcond(\applyConcrOnAbstrUpdate(u1, u2, phi, result))
        
        \replacewith(result)
        \heuristics(abstrUpdLowPrioRules)
    };

    simplifyAbstractUpdate1 {
        \schemaVar \update u, result;
        \schemaVar \term [nonrigid] any t;
       
        \find({u}t) 
        
        \varcond(\abstractUpdate(u))
        \varcond(\dropEffectlessAbstractUpdateAssignments(u, t, result))
        
        \replacewith({result}t)
        \heuristics(update_elim)
    };

    simplifyAbstractUpdate2 {
        \schemaVar \update u, result;
        \schemaVar \formula [nonrigid] phi;
       
        \find({u}phi) 
        
        \varcond(\abstractUpdate(u))
        \varcond(\dropEffectlessAbstractUpdateAssignments(u, phi, result))
        
        \replacewith({result}phi)
        \heuristics(update_elim)
    };

    commuteConcatenatedAbstractUpdates1 {
        \schemaVar \update uleft, uright;
        
        \find(uleft ++ uright)
        
        \varcond(\abstractUpdate(uleft))
        \varcond(\abstractUpdate(uright))
        \varcond(\abstrUpdatesIndependent(uleft, uright))
        
        \replacewith(uright ++ uleft)
        
        \heuristics(abstr_upd_commute)
    };
    
    commuteConcatenatedAbstractUpdates2 {
        \schemaVar \update uleft, uright, r;
        
        \find((r ++ uleft) ++ uright)
        
        \varcond(\abstractUpdate(uleft))
        \varcond(\abstractUpdate(uright))
        \varcond(\abstrUpdatesIndependent(uleft, uright))
        
        \replacewith((r ++ uright) ++ uleft)
        
        \heuristics(abstr_upd_commute)
    };
    
    concatenatedAbstractUpdatesAssoc {
        \schemaVar \update uleft, uright, r;
        
        \find(uleft ++ (uright ++ r))
        
        \varcond(\abstractUpdate(uleft))
        \varcond(\abstractUpdate(uright))
        
        \replacewith(uleft ++ uright ++ r)
        
        \heuristics(update_elim)
    };
    
    // The following are rules preprocessing formulas such that they are
    // processable by succedent/antecedent taclets that normally only apply
    // to formulas under at most one update. We need this because with
    // abstract updates, we cannot / do not always simplify them to one
    // update, such that we often have nested update applications at the end.
    
    splitImp {
        \schemaVar \update u;
        \schemaVar \formula phi, psi;
        
        \find({u}(phi -> psi))
        \replacewith({u}phi -> {u}psi)

        \heuristics(abstrUpdLowestPrioRules)
    }; 
    
    splitAnd {
        \schemaVar \update u;
        \schemaVar \formula phi, psi;
        
        \find({u}(phi & psi))
        \replacewith({u}phi & {u}psi)

        \heuristics(abstrUpdLowestPrioRules)
    }; 
    
    splitOr {
        \schemaVar \update u;
        \schemaVar \formula phi, psi;
        
        \find({u}(phi | psi))
        \replacewith({u}phi | {u}psi)

        \heuristics(abstrUpdLowestPrioRules)
    }; 

    splitBiimp {
        \schemaVar \update u;
        \schemaVar \formula phi, psi;
        
        \find({u}(phi <-> psi))
        \replacewith({u}phi <-> {u}psi)

        \heuristics(abstrUpdLowestPrioRules)
    }; 
    
    splitNot {
        \schemaVar \update u;
        \schemaVar \formula phi;
        
        \find({u}(!phi))
        \replacewith(!{u}phi)

        \heuristics(abstrUpdLowestPrioRules)
    }; 
}

//\rules(programRules:Java, lazySymbExec:on) {
//     lazyLoop {
//         \find (\modality{#allmodal}{.. while(#e) #s ...}\endmodality(post))
//         \varcond(\freshAbstractProgram(#absProg))
//         \replacewith (\modality{#allmodal}{.. #absProg ...}\endmodality(post))
//         \heuristics(simplify_prog)
//     };
//}
