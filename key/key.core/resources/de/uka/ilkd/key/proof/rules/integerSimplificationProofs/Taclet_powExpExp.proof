\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Wed Nov 30 11:10:14 CET 2016
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_RESTRICTED
[StrategyProperty]DEP_OPTIONS_KEY=DEP_OFF
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_ON
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=5000
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=assertions-assertions\\:safe , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:ban , JavaCard-JavaCard\\:on , Strings-Strings\\:on , modelFields-modelFields\\:showSatisfiability , bigint-bigint\\:on , sequences-sequences\\:on , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , moreSeqRules-moreSeqRules\\:on , permissions-permissions\\:off , joinGenerateIsWeakeningGoal-joinGenerateIsWeakeningGoal\\:off
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\proofObligation "#Proof Obligation Settings
#Wed Nov 30 11:10:14 CET 2016
name=powExpExp
class=de.uka.ilkd.key.taclettranslation.lemma.TacletProofObligationInput
";

\proof {
(keyLog "0" (keyUser "pschmitt" ) (keyVersion "6d73cdc7b35c11e06d16e181ff733e7fd33d2a3c"))

(autoModeTime "167337298")

(branch "dummy ID"
(rule "impRight" (formula "1") (newnames "f_base,f_exp1,f_exp2"))
(rule "notRight" (formula "2"))
(rule "notLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "cut" (inst "cutFormula=\\forall int e;
  (   geq(e, Z(0(#)))
   ->   pow(pow(f_base, f_exp1), e)
      = pow(f_base, mul(f_exp1, e)))"))
(branch "CUT: forall int e; ( e >= 0 -> pow(pow(f_base, f_exp1), e) = pow(f_base, f_exp1 * e)) TRUE"
   (rule "eqSymm" (formula "1") (term "1,0"))
   (rule "eqSymm" (formula "4"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0,1,0"))
   (rule "polySimp_mulComm0" (formula "4") (term "1,0"))
   (rule "nnf_imp2or" (formula "1") (term "0"))
   (rule "inEqSimp_notGeq" (formula "1") (term "0,0"))
   (rule "mul_literals" (formula "1") (term "1,0,0,0,0"))
   (rule "add_literals" (formula "1") (term "0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0"))
   (rule "mul_literals" (formula "1") (term "1,0,0"))
   (rule "allLeft" (formula "1") (inst "t=f_exp2"))
   (rule "replace_known_right" (formula "1") (term "1") (ifseqformula "5"))
   (builtin "One Step Simplification" (formula "1"))
   (rule "inEqSimp_contradInEq0" (formula "4") (ifseqformula "1"))
   (rule "qeq_literals" (formula "4") (term "0"))
   (builtin "One Step Simplification" (formula "4"))
   (rule "closeFalse" (formula "4"))
)
(branch "CUT: forall int e; ( e >= 0 -> pow(pow(f_base, f_exp1), e) = pow(f_base, f_exp1 * e)) FALSE"
   (rule "hide_right" (formula "4"))
   (rule "hide_left" (formula "2"))
   (rule "auto_int_induction_geqZero" (formula "2") (inst "sk=e_1"))
   (branch "Base Case"
      (builtin "One Step Simplification" (formula "2"))
      (rule "times_zero_1" (formula "2") (term "1,1,1"))
      (builtin "One Step Simplification" (formula "2"))
      (rule "closeTrue" (formula "2"))
   )
   (branch "Step Case (positive)"
      (rule "impRight" (formula "2"))
      (rule "andLeft" (formula "1"))
      (rule "impRight" (formula "4"))
      (rule "impLeft" (formula "3"))
      (branch "Case 1"
         (rule "close" (formula "4") (ifseqformula "2"))
      )
      (branch "Case 2"
         (rule "powExpSucc" (formula "5") (term "0") (ifseqformula "2"))
         (rule "cut" (inst "cutFormula=  pow(f_base, add(mul(f_exp1, e_1), f_exp1))
= mul(pow(f_base, mul(f_exp1, e_1)),
      pow(f_base, f_exp1))"))
         (branch "CUT: pow(f_base, f_exp1 * e_1 + f_exp1) = pow(f_base, f_exp1 * e_1) * pow(f_base, f_exp1) TRUE"
            (rule "eqSymm" (formula "4"))
            (rule "eqSymm" (formula "1"))
            (rule "eqSymm" (formula "6"))
            (rule "polySimp_addComm0" (formula "2") (term "0"))
            (rule "polySimp_addComm0" (formula "1") (term "1,1"))
            (rule "polySimp_addComm0" (formula "6") (term "1,1,0"))
            (rule "polySimp_rightDist" (formula "6") (term "1,0"))
            (rule "polySimp_elimOne" (formula "6") (term "0,1,0"))
            (rule "polySimp_mulComm0" (formula "6") (term "1,1,0"))
            (rule "applyEq" (formula "1") (term "0,0") (ifseqformula "4"))
            (rule "eqSymm" (formula "1"))
            (rule "close" (formula "6") (ifseqformula "1"))
         )
         (branch "CUT: pow(f_base, f_exp1 * e_1 + f_exp1) = pow(f_base, f_exp1 * e_1) * pow(f_base, f_exp1) FALSE"
            (rule "hide_left" (formula "1"))
            (rule "hide_right" (formula "5"))
            (rule "hide_left" (formula "2"))
            (rule "cut" (inst "cutFormula=geq(mul(f_exp1, e_1), Z(0(#)))"))
            (branch "CUT: f_exp1 * e_1 >= 0 TRUE"
               (rule "eqSymm" (formula "4"))
               (rule "polySimp_addComm0" (formula "4") (term "1,1"))
               (rule "powExpAdd" (formula "4") (term "1") (ifseqformula "3") (ifseqformula "1"))
               (rule "polySimp_mulComm0" (formula "4") (term "1"))
               (builtin "One Step Simplification" (formula "4"))
               (rule "closeTrue" (formula "4"))
            )
            (branch "CUT: f_exp1 * e_1 >= 0 FALSE"
               (rule "eqSymm" (formula "4"))
               (rule "polySimp_addComm0" (formula "4") (term "1,1"))
               (rule "inEqSimp_geqRight" (formula "3"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "1"))
               (rule "mul_literals" (formula "1") (term "1"))
               (rule "divide_inEq1" (formula "1") (inst "divY=f_exp1") (ifseqformula "2"))
               (rule "qeq_literals" (formula "1") (term "0,1"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "leq_literals" (formula "1") (term "0,1"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "4"))
               (rule "qeq_literals" (formula "1") (term "0"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "closeFalse" (formula "1"))
            )
         )
      )
   )
   (branch "Step Case (negative)"
      (rule "impRight" (formula "2"))
      (rule "andLeft" (formula "1"))
      (rule "impRight" (formula "4"))
      (rule "eqSymm" (formula "3") (term "1"))
      (rule "eqSymm" (formula "5"))
      (rule "polySimp_elimSub" (formula "1") (term "0"))
      (rule "mul_literals" (formula "1") (term "1,0"))
      (rule "polySimp_elimSub" (formula "5") (term "1,1,0"))
      (rule "mul_literals" (formula "5") (term "1,1,1,0"))
      (rule "polySimp_elimSub" (formula "5") (term "1,1"))
      (rule "mul_literals" (formula "5") (term "1,1,1"))
      (rule "polySimp_addComm0" (formula "1") (term "0"))
      (rule "polySimp_addComm0" (formula "5") (term "1,1,0"))
      (rule "polySimp_addComm0" (formula "5") (term "1,1"))
      (rule "polySimp_rightDist" (formula "5") (term "1,0"))
      (rule "polySimp_mulComm0" (formula "5") (term "1,1,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "1"))
      (rule "mul_literals" (formula "1") (term "1"))
      (rule "inEqSimp_subsumption1" (formula "3") (term "0") (ifseqformula "1"))
      (rule "leq_literals" (formula "3") (term "0,0"))
      (builtin "One Step Simplification" (formula "3"))
      (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "1"))
      (rule "qeq_literals" (formula "2") (term "0"))
      (builtin "One Step Simplification" (formula "2"))
      (rule "closeFalse" (formula "2"))
   )
)
)

}
