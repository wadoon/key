\schemaVariables {
  \modalOperator { diamond, box, diamond_transaction, box_transaction } #allmodal;
  \formula post;

  \program Statement #body;
  \program Expression #nse;

  \program Variable #x;
  \formula #inv;
  
  \update #anon_update;
}

// TODO (DS, 2019-02-14): Anonymize heap, add accessibles condition. CURRENTLY IN GENERAL UNSOUND!

\rules(programRules:Java) {
  loopScopeInvariantTaclet { 
    \find ( (\modality{#allmodal} {.. while (#nse) #body ... }\endmodality(post)) )

    \varcond(\new(#x, boolean))
    \varcond(\getInvariant(#inv))

    "Invariant Initially Valid":
      \replacewith(#inv);

    "Invariant Preserved and Used":
      \replacewith (
        {#createAnonUpdate(\modality{#allmodal}{#body}\endmodality(post))}
        (#inv ->
           (\modality{#allmodal}{
              ..
              boolean #x;
              #x = true;
              loop-scope(#x) {
                if (#nse) { 
                  #body
                  #x = false;
                }
              }
              ...
            }\endmodality(
              (#x = TRUE -> post) & 
            (#x = FALSE -> 
              #inv //  & accessibles & prec(_i, variant)
            )
           )))
      )
  
    \heuristics(loop_scope_inv_taclet)
  };
  
  unwindLoopScope { 
    // TODO (DS, 2019-02-14): Handle loop label
    
    \schemaVar \program Variable #cont;
    
    \find ( (\modality{#allmodal} {.. while (#nse) #body ... }\endmodality(post)) )
    \varcond(\new(#x, boolean))
    \varcond(\new(#cont, boolean))

    \replacewith (
      {#x:=TRUE || #cont:=FALSE}
         (\modality{#allmodal}{
            ..
            loop-scope(#x) {
              if (#nse) {
                #body
                #x = false;
              }
              if (!#x) {
                #x = true;
                #cont = true;
              }
            }
            if (#cont) {
              #reattachLoopInvariant(
                while (#nse) {
                  #body
                }
              );
            }
            ...
          }\endmodality(post))
    )
  
    \heuristics(loop_scope_expand)
  };
}