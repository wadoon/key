macro split-prop;
rule notRight;
rule notLeft;
rule osupDef
  formula="osup{Ord v_nv;}(f_alpha, f_i1(v_nv)) = osup{Ord v_nv;}(f_alpha, f_i2(v_nv))"
            occ=1;
rule osupEQDef;
rule andRight;
rule allRight;
rule impRight;
instantiate hide var=nv1 with="nv1_0";
instantiate hide var=v_nv with="nv1_0";
rule replace_known_left
  formula="olt(nv1_0, f_alpha) -> f_i1(nv1_0) = f_i2(nv1_0)" occ=1;
rule replace_known_left
  formula="olt(nv1_0, f_alpha) -> olt(f_i2(nv1_0), osup{Ord v_nv;}(f_alpha, f_i2(v_nv)))"
            occ=1;
rule hide_left
  formula="\forall Ord nv2;
   (   \forall Ord nv1; (olt(nv1, f_alpha) -> olt(f_i2(nv1), nv2))
    -> oleq(osup{Ord v_nv;}(f_alpha, f_i2(v_nv)), nv2))";
auto steps=5;

# first top level goal finished
rule allRight;
rule impRight;
instantiate hide var=nv2 with="nv2_0";
rule impLeft;
rule allRight;
rule impRight;
rule hide_left
  formula="\forall Ord nv1;
   (olt(nv1, f_alpha) -> olt(f_i2(nv1), osup{Ord v_nv;}(f_alpha, f_i2(v_nv))))";
instantiate hide var=nv1 with="nv1_1";
instantiate hide var=v_nv with="nv1_1";
rule replace_known_left
  formula="olt(nv1_1, f_alpha) -> f_i1(nv1_1) = f_i2(nv1_1)" occ=1;
rule replace_known_left 
  formula="olt(nv1_1, f_alpha) -> olt(f_i1(nv1_1), nv2_0)" occ=1;
rule hide_right
  formula="oleq(osup{Ord v_nv;}(f_alpha, f_i2(v_nv)), nv2_0)";
rule impLeft
    formula="true -> olt(f_i1(nv1_1), nv2_0)";
rule impLeft
  formula="true -> f_i1(nv1_1) = f_i2(nv1_1)";
rule closeTrue;
rule closeTrue;
rule impLeft;
rule closeTrue;
auto steps=2;
tryclose;