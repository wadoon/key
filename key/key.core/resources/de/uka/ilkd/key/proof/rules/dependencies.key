\schemaVariables{
 \modalOperator { diamond, box, diamond_transaction, box_transaction } #allmodal;
}

\functions{
}

\predicates {
  \nonRigid noRaW(LocSet);
  \nonRigid noWaR(LocSet);
  \nonRigid noWaW(LocSet);
  \nonRigid noR(LocSet);
  \nonRigid noW(LocSet);
}

\programVariables {
	int timestamp;
}


\rules { 
 
 applyUpdateOnEvent {
 	\schemaVar \update u;
 	\schemaVar \term LocSet loc;
 	\schemaVar \term EventMarker rw;
 	\schemaVar \term int ts;
 	
 	\find({u}(\event(rw, loc, ts)))
 	
 	\replacewith(\event({u}rw, {u}loc, {u}timestamp))
 	
 	\heuristics(userTaclets1)
 };


//=================Event Elimination Rules=================
 
 applyEventOnRigidTerm {
	\schemaVar \term[rigid] any t;
	\schemaVar \term EventMarker rw;
	\schemaVar \term LocSet loc;
	\schemaVar \term int ts;	
	
	\find({\event(rw, loc, ts)}t)
	
	\replacewith(t)
	
	\heuristics(userTaclets1)
 };

 applyEventOnRigidFormula {
	\schemaVar \formula phi;
	\schemaVar \term EventMarker rw;
	\schemaVar \term LocSet loc;
	\schemaVar \term int ts;
	
	\find({\event(rw, loc, ts)}phi)
	
	\varcond(\applyEventOnRigid(\event(rw, loc, ts), phi))
	
	\replacewith(phi)
	
	\heuristics(userTaclets1)
 };

 applyEventOnElementary {
	\schemaVar \program Variable #pv;
	\schemaVar \term any t;
	\schemaVar \term EventMarker rw;
	\schemaVar \term LocSet loc;	
	\schemaVar \term int ts;
	
	\find({\event(rw, loc, ts)}(#pv := t))
	
	\replacewith((#pv := t))
	
	\heuristics(userTaclets1)
 };
    
 applyEventOnPV {
	\schemaVar \program Variable #pv;
	\schemaVar \term EventMarker rw;
	\schemaVar \term LocSet loc;
	\schemaVar \term int ts;
		
	\find({\event(rw, loc, ts)}#pv)
	
	\replacewith(#pv)
	
	\heuristics(userTaclets1)
 };
    
 applyEventOnSkip {
	\schemaVar \term EventMarker rw;
	\schemaVar \term LocSet loc;
	\schemaVar \term int ts;
	
	\find({\event(rw, loc, ts)}skip)
	
	\replacewith(skip)
	
	\heuristics(userTaclets1)
 };

//===================Non-Event Update Propagation rules===================
    
 propagateNonEventUpdateONnoRaW{
	\schemaVar \update u;
	\schemaVar \term LocSet loc;
	
	\find({u}noRaW(loc))
	
	\varcond(\noEventUpdate(u)) 
	
	\replacewith(noRaW({u}loc))
	
	\heuristics(userTaclets1)
 };
 
 propagateNonEventUpdateONnoWaR{
	\schemaVar \update u;
	\schemaVar \term LocSet loc;
	
	\find({u}noWaR(loc))
	
	\varcond(\noEventUpdate(u)) 
	
	\replacewith(noWaR({u}loc))
	
	\heuristics(userTaclets1)
 };
 
 propagateNonEventUpdateONnoWaW{
	\schemaVar \update u;
	\schemaVar \term LocSet loc;
	
	\find({u}noWaW(loc))
	
	\varcond(\noEventUpdate(u)) 
	
	\replacewith(noWaW({u}loc))
	
	\heuristics(userTaclets1)
 };
 
 propagateNonEventUpdateONnoR{
	\schemaVar \update u;
	\schemaVar \term LocSet loc;
	
	\find({u}noR(loc))
	
	\varcond(\noEventUpdate(u)) 
	
	\replacewith(noR({u}loc))
	
	\heuristics(userTaclets1)
 };
 
 propagateNonEventUpdateONnoW{
	\schemaVar \update u;
	\schemaVar \term LocSet loc;
	
	\find({u}noW(loc))
	
	\varcond(\noEventUpdate(u)) 
	
	\replacewith(noW({u}loc))
	
	\heuristics(userTaclets1)
 };

//===================Event Shifting Rules===================

 applyShiftEventOnTermsWithNoUpdateAround {
 	\schemaVar \program Variable #pv;
 	\schemaVar \term any t1, t2;
 	\schemaVar \term EventMarker rw;
 	\schemaVar \term LocSet loc;
 	\schemaVar \term int ts;
 	
 	\find({\event(rw, loc, ts) || #pv:=t1}t2)
 	
 	\replacewith({#pv:=t1 || \event(rw, loc, ts)}t2)
 	
 	\heuristics(userTaclets1)
 };

 applyShiftEventOnFormulasWithNoUpdateAround {
 	\schemaVar \program Variable #pv;
 	\schemaVar \term any t;
 	\schemaVar \term EventMarker rw;
 	\schemaVar \term LocSet loc;
 	\schemaVar \formula phi;
 	\schemaVar \term int ts;
 	
 	\find({\event(rw, loc, ts) || #pv:=t}phi)
 	
 	\replacewith({#pv:=t || \event(rw, loc, ts)}phi)
 	
 	\heuristics(userTaclets1)
 };

 applyShiftEventOnTermsWithUpdateAtFirstPlace {
 	\schemaVar \update u;
 	\schemaVar \program Variable #pv;
 	\schemaVar \term any t1, t2;
 	\schemaVar \term EventMarker rw;
 	\schemaVar \term LocSet loc;
 	\schemaVar \term int ts;
 	
 	\find({u || \event(rw, loc, ts) || #pv:=t1}t2)
 	
 	\replacewith({u || #pv:=t1 || \event(rw, loc, ts)}t2)
 	
 	\heuristics(userTaclets1)
 };

 applyShiftEventOnFormulasWithUpdateAtFirstPlace {
 	\schemaVar \update u;
 	\schemaVar \program Variable #pv;
 	\schemaVar \term any t;
 	\schemaVar \term EventMarker rw;
 	\schemaVar \term LocSet loc;
 	\schemaVar \formula phi;
 	\schemaVar \term int ts;
 	
 	\find({u || \event(rw, loc, ts) || #pv:=t}phi)
 	
 	\replacewith({u || #pv:=t || \event(rw, loc, ts)}phi)
 	
 	\heuristics(userTaclets1)
 }; 

 applyShiftEventOnTermsWithUpdateAtLasttPlace {
 	\schemaVar \update u;
 	\schemaVar \program Variable #pv;
 	\schemaVar \term any t1, t2;
 	\schemaVar \term EventMarker rw;
 	\schemaVar \term LocSet loc;
 	\schemaVar \term int ts;
 	
 	\find({\event(rw, loc, ts) || #pv:=t1 || u}t2)
 	
 	\replacewith({#pv:=t1 || \event(rw, loc, ts) || u}t2)
 	
 	\heuristics(userTaclets1)
 };

 applyShiftEventOnFormulasWithUpdateAtLastPlace {
 	\schemaVar \update u;
 	\schemaVar \program Variable #pv;
 	\schemaVar \term any t;
 	\schemaVar \term EventMarker rw;
 	\schemaVar \term LocSet loc;
 	\schemaVar \formula phi;
 	\schemaVar \term int ts;
 	
 	\find({\event(rw, loc, ts) || #pv:=t || u}phi)
 	
 	\replacewith({#pv:=t || \event(rw, loc, ts) || u}phi)
 	
 	\heuristics(userTaclets1)
 }; 
 
  applyShiftEventOnTermsWithUpdateAtFirstAndLastPlace {
 	\schemaVar \update u1, u2;
 	\schemaVar \program Variable #pv;
 	\schemaVar \term any t1, t2;
 	\schemaVar \term EventMarker rw;
 	\schemaVar \term LocSet loc;
 	\schemaVar \term int ts;
 	
 	\find({u1 || \event(rw, loc, ts) || #pv:=t1 || u2}t2)
 	
 	\replacewith({u1 || #pv:=t1 || \event(rw, loc, ts) || u2}t2)
 	
 	\heuristics(userTaclets1)
 };

 applyShiftEventOnFormulasWithUpdateAtFirstAndLastPlace {
 	\schemaVar \update u1, u2;
 	\schemaVar \program Variable #pv;
 	\schemaVar \term any t;
 	\schemaVar \term EventMarker rw;
 	\schemaVar \term LocSet loc;
 	\schemaVar \formula phi;
 	\schemaVar \term int ts;
 	
 	\find({u1 || \event(rw, loc, ts) || #pv:=t || u2}phi)
 	
 	\replacewith({u1 || #pv:=t || \event(rw, loc, ts) || u2}phi)
 	
 	\heuristics(userTaclets1)
 }; 

//=================Simplification rules=================

 simplifyEventUpdateNoRaW {
	\schemaVar \update u1,u2;
	\schemaVar \term[rigid] LocSet loc;

	
	\find({u1||u2}noRaW(loc))
	
	\varcond(\noEventUpdate(u1))
	
	\replacewith({u2}noRaW(loc))
	
	\heuristics(userTaclets1)
        
   };
   
 simplifyEventUpdateNoWaR {
	\schemaVar \update u1,u2;
	\schemaVar \term[rigid] LocSet loc;

	
	\find({u1||u2}noWaR(loc))
	
	\varcond(\noEventUpdate(u1))
	
	\replacewith({u2}noWaR(loc))
	
	\heuristics(userTaclets1)
        
   };
   
   simplifyEventUpdateNoWaW {
	\schemaVar \update u1,u2;
	\schemaVar \term[rigid] LocSet loc;

	
	\find({u1||u2}noWaW(loc))
	
	\varcond(\noEventUpdate(u1))
	
	\replacewith({u2}noWaW(loc))
	
	\heuristics(userTaclets1)
        
   };
   
 writeEventBeforeNoRaW {
 	\schemaVar \term LocSet loc1, loc2;
 	\schemaVar \term int ts;
 	
 	\find({\event(write, loc1, ts)} noRaW(loc2))
 	
 	\replacewith(noRaW(loc2))
 	
 	\heuristics(userTaclets1)
 };
 
 ReadEventBeforeNoRaW {
 	\schemaVar \term LocSet loc1, loc2;
 	\schemaVar \term int ts;
 	
 	\find({\event(read, loc1, ts)} noRaW(loc2))
 	
 	\replacewith(\if(intersect(loc1, loc2)!=empty) \then ( noW(intersect(loc1, loc2)) )
 	\else( noRaW(loc2)))
 	
 	\heuristics(userTaclets1)
 };
 
 WriteEventBeforeNoWaR {
 	\schemaVar \term LocSet loc1, loc2;
 	\schemaVar \term int ts;
 	
 	\find({\event(write, loc1, ts)} noWaR(loc2))
 	
 	\replacewith(\if(intersect(loc1, loc2)!=empty) \then ( noR(intersect(loc1, loc2)))
 	\else ( noWaR(loc2)))
 	
 	\heuristics(userTaclets1)
 };
 
 ReadEventBeforeNoWaR {
 	\schemaVar \term LocSet loc1, loc2;
 	\schemaVar \term int ts;
 	
 	\find({\event(read, loc1, ts)} noWaR(loc2))
 	
 	\replacewith( noWaR(loc2))
 	
 	\heuristics(userTaclets1)
 };
 
 WriteEventBeforeNoWaW {
 	\schemaVar \term LocSet loc1, loc2;
 	\schemaVar \term int ts;
 	
 	\find({\event(write, loc1, ts)} noWaW(loc2))
 	
 	\replacewith(\if(intersect(loc1, loc2)!=empty) \then ( noW(intersect(loc1, loc2)))
 	\else ( noWaW(loc2)))
 	
 	\heuristics(userTaclets1)
 };
 
 ReadEventBeforeNoWaW {
 	\schemaVar \term LocSet loc1, loc2;
 	\schemaVar \term int ts;
 	
 	\find({\event(read, loc1, ts)} noWaW(loc2))
 	
 	\replacewith( noWaW(loc2))
 	
 	\heuristics(userTaclets1)
 };
 
 WriteEventBeforeNoW {
 	\schemaVar \term LocSet loc1, loc2;
 	\schemaVar \term int ts;
 	
 	\find({\event(write, loc1, ts)} noW(loc2))
 	
 	\replacewith(\if(intersect(loc1, loc2)!=empty) \then ( false)
 	\else (noW(loc2)))
 	
 	\heuristics(userTaclets1)
 };
 
 ReadEventBeforeNoW {
 	\schemaVar \term LocSet loc1, loc2;
 	\schemaVar \term int ts;
 	
 	\find({\event(read, loc1, ts)} noW(loc2))
 	
 	\replacewith( noW(loc2))
 	
 	\heuristics(userTaclets1)
 };  
 
 writeEventBeforeNoR {
 	\schemaVar \term LocSet loc1, loc2;
 	\schemaVar \term int ts;
 	
 	\find({\event(write, loc1, ts)} noR(loc2))
 	
 	\replacewith(noR(loc2))
 	
 	\heuristics(userTaclets1)
 };
 
 readEventBeforeNoR {
 	\schemaVar \term LocSet loc1, loc2;
 	\schemaVar \term int ts;
 	
 	\find({\event(read, loc1, ts)} noR(loc2))
 	
 	\replacewith(\if(intersect(loc1, loc2)!=empty) \then ( false)
 	\else ( noR(loc2)))
 	
 	\heuristics(userTaclets1)
 };
   
}
//====================Assignment rules====================

\rules(programRules:Java, runtimeExceptions:ban, dependencies:on) {
  assignment_array2{
		\schemaVar \program Variable #v, #v0;
		\schemaVar \program SimpleExpression #se;
		\schemaVar \formula post;
				
		\find (==> \modality{#allmodal}{.. #v = #v0[#se]; ...}\endmodality(post))
                  \varcond(\hasSort(\elemSort(#v0), G))
		"Normal Execution (#v0 != null)":
		   \replacewith(==> {#v:=G::select(heap, #v0, arr(#se))}
		   					{\event(read,singleton(#v0,arr(#se)),timestamp)}
		                    {timestamp:=timestamp + 1}
		   \modality{#allmodal}{.. ...}\endmodality(post))
		   //\add (==>(#v0=null) | leq(length(#v0), #se) | lt(#se,0))
        	;
		"Null Reference (#v0 = null)":
		   \replacewith(==> false)
	           \add (#v0=null ==>);	
		"Index Out of Bounds (#v0 != null, but #se Out of Bounds!)":
	  	   \replacewith(==> false)
		   \add (!(#v0=null) & (leq(length(#v0), #se) | lt(#se,0)) ==>)
    	  
    	   \heuristics(simplify_prog, simplify_prog_subset)
  };
}

\rules(programRules:Java, dependencies:on) {
//-----------------------------------------------------------------------------------------
//                        some common assignment rules 
//-----------------------------------------------------------------------------------------

  assignment  { 
     \schemaVar \program Variable #loc;
     \schemaVar \program SimpleExpression #se;
     \schemaVar \formula post;
     
     \find (\modality{#allmodal}{.. #loc = #se; ...}\endmodality(post))
     \replacewith ({#loc:= #se}{timestamp:=timestamp +1}\modality{#allmodal}{.. ...}\endmodality(post)) 
	
	 \heuristics(simplify_prog, simplify_prog_subset)
  };

}


\rules(programRules:Java, runtimeExceptions:ban, dependencies:on) {
  assignment_read_attribute { 
        \schemaVar \program Variable #v0, #v, #a;
        \schemaVar \formula post;
	
		\find (==> \modality{#allmodal}{.. #v0 = #v.#a; ...}\endmodality(post))
 	        \varcond(\not \static(#a), \not \isArrayLength(#a), \hasSort(#a, G), \not\isThisReference(#v))
		"Normal Execution (#v != null)":
		      \replacewith(==> {#v0 := G::select(heap, #v, #memberPVToField(#a))}
		                       {\event(read,singleton(#v,#memberPVToField(#a)),timestamp)}
		                       {timestamp:=timestamp + 1}
		                                      \modality{#allmodal}{.. ...}\endmodality(post))
		      //\add (==>(#v=null))
		      ;
		"Null Reference (#v = null)":
		      \replacewith(==> false)
		      \add (#v=null ==>)	
		      \heuristics(simplify_prog, simplify_prog_subset)
  };

 assignment_read_attribute_this { 
 		\schemaVar \program Variable #v0, #v, #a;
        \schemaVar \formula post;
 	
		\find (==> \modality{#allmodal}{.. #v0 = #v.#a; ...}\endmodality(post))
 	        \varcond(\not \static(#a), \not \isArrayLength(#a), \hasSort(#a, G), \isThisReference(#v))
		"Normal Execution":
		      \replacewith(==> {#v0 := G::select(heap, #v, #memberPVToField(#a))}
		      				   {\event(read,singleton(#v,#memberPVToField(#a)),timestamp)}
		                       {timestamp:=timestamp + 1}
		      \modality{#allmodal}{.. ...}\endmodality(post))
                
		      \heuristics(simplify_prog, simplify_prog_subset)
  };
  
 /* assignment_read_length { 
  		\schemaVar \program Variable #v0, #v;
        \schemaVar \formula post;
  
		\find (==> \modality{#allmodal}{.. #v0 = #v.#length; ...}\endmodality(post))
		\varcond(\not\isThisReference(#v))
		"Normal Execution (#v != null)":
		      \replacewith(==> {#v0 := length(#v)}
		      
		      \modality{#allmodal}{.. ...}\endmodality(post))
		      //\add (==>(#v=null))
		      ;
		"Null Reference (#v = null)":
		      \replacewith(==> false)
		      \add (#v=null ==>)	
		      \heuristics(simplify_prog, simplify_prog_subset)
  };*/  
}

\rules(programRules:Java, runtimeExceptions:ban, dependencies:on) {

  assignment_write_attribute { 
  
  		\schemaVar \program Variable #v, #a;
  		\schemaVar \program SimpleExpression #se;
		\schemaVar \formula post;
		
		\find (==> \modality{#allmodal}{.. #v.#a=#se; ...}\endmodality(post))
	        \varcond(\not \static(#a), \not\isThisReference(#v))
		"Normal Execution (#v != null)":
		      \replacewith(==> {heap:=store(heap,#v,#memberPVToField(#a),#se)}
		      				   {\event(write,singleton(#v,#memberPVToField(#a)),timestamp)}
		                       {timestamp:=timestamp + 1}
		      					\modality{#allmodal}{.. ...}\endmodality(post))
		      
		      //\add (==>(#v=null))
		      ;
                
		"Null Reference (#v = null)":
		      \replacewith(==> false)
		      \add (#v=null ==>)	 
		      \heuristics(simplify_prog, simplify_prog_subset)
		      \displayname "assignment"
  };  

assignment_write_attribute_this { 
		
		\schemaVar \program Variable #v, #a;
  		\schemaVar \program SimpleExpression #se;
		\schemaVar \formula post;

		\find (==> \modality{#allmodal}{.. #v.#a=#se; ...}\endmodality(post))
	        \varcond(\not \static(#a), \isThisReference(#v))
		"Normal Execution":
		      \replacewith(==> {heap:=store(heap,#v,#memberPVToField(#a),#se)}
		      				   {\event(write,singleton(#v,#memberPVToField(#a)),timestamp)}
		                       {timestamp:=timestamp + 1}
		  				    \modality{#allmodal}{.. ...}\endmodality(post))
                
		      \heuristics(simplify_prog, simplify_prog_subset)
		      \displayname "assignmentThis"
  };  

}
