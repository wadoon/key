// We don't have any rule for {event}(event)

\schemaVariables{
 \modalOperator { diamond, box, diamond_transaction, box_transaction } #allmodal;
}


\rules { 
 
 applyUpdateOnEvent {
 	\schemaVar \update u;
 	\schemaVar \term LocSet loc;
 	\schemaVar \term EventMarker rw;
 	\schemaVar \term int ts;
 	
 	\find({u}(\event(rw, loc, ts)))
 	
 	\replacewith(\event({u}rw, {u}loc, {u}ts))
 	
 	\heuristics(update_apply_on_update)
 	
 };

//-----------------------------------------------------------------------------------------
//                        Event Elimination Rules 
//-----------------------------------------------------------------------------------------
 
 elimEventOnRigidTerm1 {
    \schemaVar \term[rigid] any t;
	\schemaVar \update u;
	
	\find({u}t)
	
	\replacewith(t)
	
	\heuristics(update_elim)
 };
 
 elimEventOnRigidTerm2 {
	\schemaVar \term any t, result;
	\schemaVar \update u;	
	
	\find({u}t)
	\varcond(\applyEventOnRigid(u, t, result))
	
	\replacewith(result)
	
	\heuristics(update_elim)
 };

 elimEventOnRigidFormula1 {  
    \schemaVar \formula[rigid] phi;
	\schemaVar \update u;
	
	\find({u}phi)
	
	\replacewith(phi)
	
	\heuristics(update_elim)
 };
 
 elimEventOnRigidFormula2 {
	\schemaVar \formula phi, result;
	\schemaVar \update u;
	
	\find({u}phi)
	\varcond(\applyEventOnRigid(u, phi, result))
	
	\replacewith(result)
	
	\heuristics(update_elim)
 };

 applyEventOnElementary {
	\schemaVar \program Variable pv;
	\schemaVar \term any t;
	\schemaVar \term EventMarker rw;
	\schemaVar \term LocSet loc;	
	\schemaVar \term int ts;
	
	\find({\event(rw, loc, ts)}(pv := t))
	
	\replacewith((pv := {\event(rw, loc, ts)}t))
	
	\heuristics(update_apply_on_update)
 };
   
 elimEventOnPV {
	\schemaVar \program Variable pv;
	\schemaVar \term EventMarker rw;
	\schemaVar \term LocSet loc;
	\schemaVar \term int ts;
		
	\find({\event(rw, loc, ts)}pv)
	
	\replacewith(pv)
	
	\heuristics(update_elim)
 };
    
 elimEventOnSkip {
	\schemaVar \term EventMarker rw;
	\schemaVar \term LocSet loc;
	\schemaVar \term int ts;
	
	\find({\event(rw, loc, ts)}skip)
	
	\replacewith(skip)
	
	\heuristics(update_elim)
 };

//-----------------------------------------------------------------------------------------
//                        Spliting Rules 
//-----------------------------------------------------------------------------------------

 splitNoRaW {
    
    \schemaVar \term LocSet loc1, loc2;
 
    \find(noRaW(union(loc1,loc2)))
    \replacewith(noRaW(loc1) & noRaW(loc2))
    
 };
 
 splitNoWaR {
    
    \schemaVar \term LocSet loc1, loc2;
 
    \find(noWaR(union(loc1,loc2)))
    \replacewith(noWaR(loc1) & noWaR(loc2))
    
 };
 
 splitNoWaW {
    
    \schemaVar \term LocSet loc1, loc2;
 
    \find(noWaW(union(loc1,loc2)))
    \replacewith(noWaW(loc1) & noWaW(loc2))
    
 };
 
 splitNoR {
    
    \schemaVar \term LocSet loc1, loc2;
 
    \find(noR(union(loc1,loc2)))
    \replacewith(noR(loc1) & noR(loc2))
    
 };
 
 splitNoW {
    
    \schemaVar \term LocSet loc1, loc2;
 
    \find(noW(union(loc1,loc2)))
    \replacewith(noW(loc1) & noW(loc2))
    
 };
 
//-------------------------------------------------- 

 splitNoRaWEQ {
    \schemaVar \term LocSet EQ, loc1, loc2;
 
    \assumes (union(loc1,loc2) = EQ ==>)
    \find(noRaW(EQ)) \sameUpdateLevel
    \replacewith(noRaW(loc1) & noRaW(loc2))
  
 };
 
 splitNoWaREQ {
    \schemaVar \term LocSet EQ, loc1, loc2;
 
    \assumes (union(loc1,loc2) = EQ ==>)
    \find(noWaR(EQ)) \sameUpdateLevel
    \replacewith(noWaR(loc1) & noWaR(loc2))
  
 };
 
 splitNoWaWEQ {
    \schemaVar \term LocSet EQ, loc1, loc2;
 
    \assumes (union(loc1,loc2) = EQ ==>)
    \find(noWaW(EQ)) \sameUpdateLevel
    \replacewith(noWaW(loc1) & noWaW(loc2))
  
 };
 
 splitNoREQ {
    \schemaVar \term LocSet EQ, loc1, loc2;
 
    \assumes (union(loc1,loc2) = EQ ==>)
    \find(noR(EQ)) \sameUpdateLevel
    \replacewith(noR(loc1) & noR(loc2))
  
 };
 
 
 splitNoWEQ {
    \schemaVar \term LocSet EQ, loc1, loc2;
 
    \assumes (union(loc1,loc2) = EQ ==>)
    \find(noW(EQ)) \sameUpdateLevel
    \replacewith(noW(loc1) & noW(loc2))
  
 };
 
//--------------------------------------------------  
 
  noReadORWriteAndNoRaW{
 	\schemaVar \term LocSet loc1;
 	
 	\find(noRaW(loc1))
 		
 	\replacewith(\if(noR(loc1) | noW(loc1)) \then (true) \else  (noRaW(loc1)))
 	
 	//\heuristics(userTaclets1)
 };
 
 noRaWKnownForSuperset{
 	\schemaVar \term LocSet loc1, loc2;
 	
 	\assumes(noRaW(loc1) ==> )
 	\find(noRaW(loc2)) \sameUpdateLevel
 	
 	\replacewith(\if(subset(loc2,loc1)) \then(true) \else(noRaW(loc2)))
 	
 };
  
 noRaWKnownForSuperOrSubset{
 	\schemaVar \term LocSet loc1, loc2;
 	
 	\assumes(noRaW(loc1) ==> )
 	\find(noRaW(loc2)) \sameUpdateLevel
 	
 	\replacewith(\if(subset(loc2,loc1)) \then(true) \else(noRaW(setMinus(loc2,loc1))))
 	
 };
 
//------------------------noR 

  noReadKnownForSuperset{
 	\schemaVar \term LocSet loc1, loc2;
 	
 	\assumes(noR(loc1) ==> )
 	\find(noR(loc2)) \sameUpdateLevel
 	
 	\replacewith(\if(subset(loc2,loc1)) \then(true) \else(noR(loc2)))
 	
 	
 };
 
  noReadKnownForSupersetOrSubset{
 	\schemaVar \term LocSet loc1, loc2;
 	
 	\assumes(noR(loc1) ==> )
 	\find(noR(loc2)) \sameUpdateLevel
 	
 	\replacewith(\if(subset(loc2,loc1)) \then(true) \else(noR(setMinus(loc2,loc1))))
 	
 	\heuristics(dep_replace_known) 	
 };
//------------------------noW
 noWriteKnownForSuperset{
 	\schemaVar \term LocSet loc1, loc2;
 	
 	\assumes(noW(loc1) ==> )
 	\find(noW(loc2)) \sameUpdateLevel
 	
 	\replacewith(\if(subset(loc2,loc1)) \then(true) \else(noW(loc2)))
 	
 	\heuristics(dep_replace_known) 	
 	
 };
 
  noWriteKnownForSupersetOrSubSet{
 	\schemaVar \term LocSet loc1, loc2;
 	
 	\assumes(noW(loc1) ==> )
 	\find(noW(loc2)) \sameUpdateLevel
 	
 	\replacewith(\if(subset(loc2,loc1)) \then(true) \else(noW(setMinus(loc2,loc1))))
 	
 	\heuristics(dep_replace_known) 	
 	
 };
//------------------------noWaR
 noReadORWriteAndNoWaR{
 	\schemaVar \term LocSet loc1;
 	
 	\find(noWaR(loc1))
 		
 	\replacewith(\if(noR(loc1) | noW(loc1)) \then (true) \else  (noWaR(loc1)))
 	
 	//\heuristics(userTaclets1)
 };
 noWriteAfterReadKnownForSuperset{
 	\schemaVar \term LocSet loc1, loc2;
 	
 	\assumes(noWaR(loc1) ==> )
 	\find(noWaR(loc2)) \sameUpdateLevel
 	
 	\replacewith(\if(subset(loc2,loc1)) \then(true) \else(noWaR(loc2)))
 	
 	
 };
 
  noWriteAfterReadKnownForSupersetOrSubset{
 	\schemaVar \term LocSet loc1, loc2;
 	
 	\assumes(noWaR(loc1) ==> )
 	\find(noWaR(loc2)) \sameUpdateLevel
 	
 	\replacewith(\if(subset(loc2,loc1)) \then(true) \else(noWaR(setMinus(loc2,loc1))))
 	
 	\heuristics(dep_replace_known) 	
 	
 };
 
 
 //------------------------noWaW
/*  noWriteAndNoWaW{
 	\schemaVar \term LocSet loc1;
 	
 	\find(noWaW(loc1))
 		
 	\replacewith(\if(noW(loc1)) \then (true) \else  (noWaW(loc1)))
 	
 	//\heuristics(userTaclets1)
 };*/
 
 noWriteAfterWriteKnownForSuperset{
 	\schemaVar \term LocSet loc1, loc2;
 	
 	\assumes(noWaW(loc1) ==> )
 	\find(noWaW(loc2)) \sameUpdateLevel
 	
 	\replacewith(\if(subset(loc2,loc1)) \then(true) \else(noWaW(loc2)))
 	
 	
 };
 
  noWriteAfterWriteKnownForSupersetOrSubset{
 	\schemaVar \term LocSet loc1, loc2;
 	
 	\assumes(noWaW(loc1) ==> )
 	\find(noWaW(loc2)) \sameUpdateLevel
 	
 	\replacewith(\if(subset(loc2,loc1)) \then(true) \else(noWaW(setMinus(loc2,loc1))))
 	
 	\heuristics(dep_replace_known) 	
 	
 };
 
//-----------------------------------------------------------------------------------------
//                        Update Parallel to Event Rules 
//-----------------------------------------------------------------------------------------

 applyUpdateParallelToEventOnElementary {
	\schemaVar \program Variable pv;
	\schemaVar \term any t;
	\schemaVar \term EventMarker rw;
	\schemaVar \term LocSet loc;	
	\schemaVar \term int ts;
	\schemaVar \update u;

	\find({u || \event(rw, loc, ts)}(pv := t))
	
	\replacewith((pv := {u || \event(rw, loc, ts)}t))
	
	\heuristics(update_apply_on_update)//userTaclets1)
 };
    
 applyUpdateParallelToEventOnPV {
	\schemaVar \program Variable pv;
	\schemaVar \term EventMarker rw;
	\schemaVar \term LocSet loc;
	\schemaVar \term int ts;
	\schemaVar \update u;
		
	\find({u || \event(rw, loc, ts)}pv)
	
	\replacewith({u}pv)
	
	\heuristics(update_apply)//userTaclets1)
 };
    
 applyUpdateParallelToEventOnSkip {
	\schemaVar \term EventMarker rw;
	\schemaVar \term LocSet loc;
	\schemaVar \term int ts;
	\schemaVar \update u;
	
	\find({u || \event(rw, loc, ts)}skip)
	
	\replacewith(skip)
	
	\heuristics(update_elim)//userTaclets1)
 };
//===================NoRaW=====================
elimStateUpdatesBeforeNoRaW{
	\schemaVar \update u;
	\schemaVar \program Variable pv;
	\schemaVar \term any t;
	\schemaVar \term[rigid] LocSet tr;
	
	\find({pv:=t || u} noRaW(tr))
	\replacewith({u}noRaW(tr))
	\heuristics(update_elim)
};
elimStateUpdatesBeforeNoWaR{
	\schemaVar \update u;
	\schemaVar \program Variable pv;
	\schemaVar \term any t;
	\schemaVar \term[rigid] LocSet tr;
	
	\find({pv:=t || u} noWaR(tr))
	\replacewith({u}noWaR(tr))
	\heuristics(update_elim)
};
elimStateUpdatesBeforeNoWaW{
	\schemaVar \update u;
	\schemaVar \program Variable pv;
	\schemaVar \term any t;
	\schemaVar \term[rigid] LocSet tr;
	
	\find({pv:=t || u} noWaW(tr))
	\replacewith({u}noWaW(tr))
	\heuristics(update_elim)
};
elimStateUpdatesBeforeNoR{
	\schemaVar \update u;
	\schemaVar \program Variable pv;
	\schemaVar \term any t;
	\schemaVar \term[rigid] LocSet tr;
	
	\find({pv:=t || u} noR(tr))
	\replacewith({u}noR(tr))
	\heuristics(update_elim)
};
elimStateUpdatesBeforeNoW{
	\schemaVar \update u;
	\schemaVar \program Variable pv;
	\schemaVar \term any t;
	\schemaVar \term[rigid] LocSet tr;
	
	\find({pv:=t || u} noW(tr))
	\replacewith({u}noW(tr))
	\heuristics(update_elim)
};



updateParallelToReadEventOnNoRaW{
 	\schemaVar \update u;
	\schemaVar \term LocSet loc1, loc2;
	\schemaVar \term int ts;
	\schemaVar \skolemTerm LocSet tempVar;
 	
 	\find(==> {u || \event(read, loc1, ts)} noRaW(loc2))
 	//To Be Done: WE HAVE TO CHANGE SKOLEM TERM IN A WAY THAT IT CAN BE DEPENDENT ON UPDATES
 	\varcond(/*\new(tempVar, \dependingOn(u)),*/
             \new(tempVar, \dependingOn(loc1)),
             \new(tempVar, \dependingOn(ts)),
             \new(tempVar, \dependingOn(loc2)))        
     \replacewith(==> {u}noRaW(tempVar))
     \add(tempVar = {u || \event(read, loc1, ts)}loc2, 
          intersect(loc1, tempVar) = empty ==> );  
     \replacewith(==> ({u}noW(tempVar)) & {u}noRaW(setMinus(tempVar, loc1)))//Why not (==> ({u}noW(*intersect*(tempVar, loc1))) & ...)?
     \add(tempVar = {u || \event(read, loc1, ts)}loc2, 
          !(intersect(tempVar, loc1) = empty) ==> )
     \heuristics(userTaclets1)
 };
 
 updateParallelToWriteEventOnNoRaW{
 	\schemaVar \update u;
	\schemaVar \term LocSet loc1, loc2;
	\schemaVar \term int ts;
	\schemaVar \skolemTerm LocSet tempVar;
 	
 	\find(==> {u || \event(write, loc1, ts)} noRaW(loc2))
 	//To Be Done: WE HAVE TO CHANGE SKOLEM TERM IN A WAY THAT IT CAN BE DEPENDENT ON UPDATES
 	\varcond(/*\new(tempVar, \dependingOn(u)),*/
             \new(tempVar, \dependingOn(loc1)),
             \new(tempVar, \dependingOn(ts)),
             \new(tempVar, \dependingOn(loc2)))        
     
     \replacewith(==> {u}noRaW(tempVar))
     \add(tempVar = {u || \event(write, loc1, ts)}loc2 ==> )
     
     \heuristics(userTaclets1)
 };

//====================NoWaR====================

 updateParallelToWriteEventOnNoWaR{
 	\schemaVar \update u;
	\schemaVar \term LocSet loc1, loc2;
	\schemaVar \term int ts;
	\schemaVar \skolemTerm LocSet tempVar;
 	
 	\find(==> {u || \event(write, loc1, ts)} noWaR(loc2))
 	//To Be Done: WE HAVE TO CHANGE SKOLEM TERM IN A WAY THAT IT CAN BE DEPENDENT ON UPDATES
 	\varcond(/*\new(tempVar, \dependingOn(u)),*/
             \new(tempVar, \dependingOn(loc1)),
             \new(tempVar, \dependingOn(ts)),
             \new(tempVar, \dependingOn(loc2)))        
     \replacewith(==> {u}noWaR(tempVar))
     \add(tempVar = {u || \event(write, loc1, ts)}loc2,
     	intersect(tempVar, loc1) = empty ==> );
     \replacewith(==> ({u}noR(tempVar)) & {u}noWaR(setMinus(tempVar, loc1)))
     \add(tempVar = {u || \event(write, loc1, ts)}loc2,
     	!(intersect(tempVar, loc1) = empty) ==> )
     \heuristics(userTaclets1)
 };
 
 updateParallelToReadEventOnNoWaR{
 	\schemaVar \update u;
	\schemaVar \term LocSet loc1, loc2;
	\schemaVar \term int ts;
	\schemaVar \skolemTerm LocSet tempVar;
 	
 	\find(==> {u || \event(read, loc1, ts)} noWaR(loc2))
 	//To Be Done: WE HAVE TO CHANGE SKOLEM TERM IN A WAY THAT IT CAN BE DEPENDENT ON UPDATES
 	\varcond(/*\new(tempVar, \dependingOn(u)),*/
             \new(tempVar, \dependingOn(loc1)),
             \new(tempVar, \dependingOn(ts)),
             \new(tempVar, \dependingOn(loc2)))        
     
     \replacewith(==> {u}noWaR(tempVar))
     \add(tempVar = {u || \event(read, loc1, ts)}loc2 ==>)
     \heuristics(userTaclets1)
 };
 
//========================noWaW=======================

 updateParallelToWriteEventOnNoWaW{
 	\schemaVar \update u;
	\schemaVar \term LocSet loc1, loc2;
	\schemaVar \term int ts;
	\schemaVar \skolemTerm LocSet tempVar;
 	
 	\find(==> {u || \event(write, loc1, ts)} noWaW(loc2))
 	//To Be Done: WE HAVE TO CHANGE SKOLEM TERM IN A WAY THAT IT CAN BE DEPENDENT ON UPDATES
 	\varcond(/*\new(tempVar, \dependingOn(u)),*/
             \new(tempVar, \dependingOn(loc1)),
             \new(tempVar, \dependingOn(ts)),
             \new(tempVar, \dependingOn(loc2)))        
     \replacewith(==> {u}noWaW(tempVar))
     \add(tempVar = {u || \event(write, loc1, ts)}loc2,
     	intersect(tempVar, loc1) = empty ==> );
     \replacewith(==> {u}noW(tempVar) & {u}noWaW(setMinus(tempVar, loc1)))
     \add(tempVar = {u || \event(write, loc1, ts)}loc2,
     	!(intersect(tempVar, loc1) = empty) ==> )
     \heuristics(userTaclets1)
 };
 
 updateParallelToReadEventOnNoWaW{
 	\schemaVar \update u;
	\schemaVar \term LocSet loc1, loc2;
	\schemaVar \term int ts;
	\schemaVar \skolemTerm LocSet tempVar;
 	
 	\find(==> {u || \event(read, loc1, ts)} noWaW(loc2))
 	//To Be Done: WE HAVE TO CHANGE SKOLEM TERM IN A WAY THAT IT CAN BE DEPENDENT ON UPDATES
 	\varcond(/*\new(tempVar, \dependingOn(u)),*/
             \new(tempVar, \dependingOn(loc1)),
             \new(tempVar, \dependingOn(ts)),
             \new(tempVar, \dependingOn(loc2)))        
     
     \replacewith(==> {u}noWaW(tempVar))
     \add(tempVar = {u || \event(write, loc1, ts)}loc2 ==> )
     \heuristics(userTaclets1)
 };
 
 //===================General=====================
 parallelUpdateAssociative {
    \schemaVar \update u1, u2, u3;
    
    \find (u1 || (u2 || u3))
    \replacewith(u1 || u2 || u3)
    
    \heuristics(simplify)
 };
 
 //===================NoR=====================
 updateParallelToReadEventOnNoR{
 	\schemaVar \update u;
	\schemaVar \term LocSet loc1, loc2;
	\schemaVar \term int ts;
	\schemaVar \skolemTerm LocSet tempVar;
 	
 	\find(==> {u || \event(read, loc1, ts)} noR(loc2))
 	//To Be Done: WE HAVE TO CHANGE SKOLEM TERM IN A WAY THAT IT CAN BE DEPENDENT ON UPDATES
 	\varcond(/*\new(tempVar, \dependingOn(u)),*/
             \new(tempVar, \dependingOn(loc1)),
             \new(tempVar, \dependingOn(ts)),
             \new(tempVar, \dependingOn(loc2)))        
     \replacewith(==> {u}noR(tempVar))
     \add(tempVar = {u || \event(read, loc1, ts)}loc2, 
          intersect(loc1, tempVar) = empty ==> );  
     \replacewith(==> false)
     \add(tempVar = {u || \event(read, loc1, ts)}loc2, 
          !(intersect(tempVar, loc1) = empty) ==> )
     \heuristics(userTaclets1)
 };
 
 updateParallelToWriteEventOnNoR{
 	\schemaVar \update u;
	\schemaVar \term LocSet loc1, loc2;
	\schemaVar \term int ts;
	\schemaVar \skolemTerm LocSet tempVar;
 	
 	\find(==> {u || \event(write, loc1, ts)} noR(loc2))
 	//To Be Done: WE HAVE TO CHANGE SKOLEM TERM IN A WAY THAT IT CAN BE DEPENDENT ON UPDATES
 	\varcond(/*\new(tempVar, \dependingOn(u)),*/
             \new(tempVar, \dependingOn(loc1)),
             \new(tempVar, \dependingOn(ts)),
             \new(tempVar, \dependingOn(loc2)))        
     
     \replacewith(==> {u}noR(tempVar))
     \add(tempVar = {u || \event(write, loc1, ts)}loc2 ==> )
     
     \heuristics(userTaclets1)
 };

 //===================NoW=====================
 updateParallelToWriteEventOnNoW{
 	\schemaVar \update u;
	\schemaVar \term LocSet loc1, loc2;
	\schemaVar \term int ts;
	\schemaVar \skolemTerm LocSet tempVar;
 	
 	\find(==> {u || \event(write, loc1, ts)} noW(loc2))
 	//To Be Done: WE HAVE TO CHANGE SKOLEM TERM IN A WAY THAT IT CAN BE DEPENDENT ON UPDATES
 	\varcond(/*\new(tempVar, \dependingOn(u)),*/
             \new(tempVar, \dependingOn(loc1)),
             \new(tempVar, \dependingOn(ts)),
             \new(tempVar, \dependingOn(loc2)))        
     \replacewith(==> {u}noW(tempVar))
     \add(tempVar = {u || \event(write, loc1, ts)}loc2, 
          intersect(loc1, tempVar) = empty ==> );  
     \replacewith(==> false)
     \add(tempVar = {u || \event(write, loc1, ts)}loc2, 
          !(intersect(tempVar, loc1) = empty) ==> )
     \heuristics(userTaclets1)
 };
 
 updateParallelToReadEventOnNoW{
 	\schemaVar \update u;
	\schemaVar \term LocSet loc1, loc2;
	\schemaVar \term int ts;
	\schemaVar \skolemTerm LocSet tempVar;
 	
 	\find(==> {u || \event(read, loc1, ts)} noW(loc2))
 	//To Be Done: WE HAVE TO CHANGE SKOLEM TERM IN A WAY THAT IT CAN BE DEPENDENT ON UPDATES
 	\varcond(/*\new(tempVar, \dependingOn(u)),*/
             \new(tempVar, \dependingOn(loc1)),
             \new(tempVar, \dependingOn(ts)),
             \new(tempVar, \dependingOn(loc2)))        
     
     \replacewith(==> {u}noW(tempVar))
     \add(tempVar = {u || \event(read, loc1, ts)}loc2 ==> )
     
     \heuristics(userTaclets1)
 };

//-----------------------------------------------------------------------------------------
//                        Non-Event Update Propagation Rules 
//-----------------------------------------------------------------------------------------
    
 propagateNonEventUpdateONnoRaW{
	\schemaVar \update u;
	\schemaVar \term LocSet loc;
	
	\find({u}noRaW(loc))
	\varcond(\noEventUpdate(u)) 
	
	\replacewith(noRaW({u}loc))
	
	\heuristics(update_apply)
 };
 
 propagateNonEventUpdateONnoWaR{
	\schemaVar \update u;
	\schemaVar \term LocSet loc;
	
	\find({u}noWaR(loc))
	
	\varcond(\noEventUpdate(u)) 
	
	\replacewith(noWaR({u}loc))
	
	\heuristics(update_apply)
 };
 
 propagateNonEventUpdateONnoWaW{
	\schemaVar \update u;
	\schemaVar \term LocSet loc;
	
	\find({u}noWaW(loc))
	
	\varcond(\noEventUpdate(u)) 
	
	\replacewith(noWaW({u}loc))
	
	\heuristics(update_apply)
 };
 
 propagateNonEventUpdateONnoR{
	\schemaVar \update u;
	\schemaVar \term LocSet loc;
	
	\find({u}noR(loc))
	
	\varcond(\noEventUpdate(u)) 
	
	\replacewith(noR({u}loc))
	
	\heuristics(update_apply)
 };
 
 propagateNonEventUpdateONnoW{
	\schemaVar \update u;
	\schemaVar \term LocSet loc;
	
	\find({u}noW(loc))
	
	\varcond(\noEventUpdate(u)) 
	
	\replacewith(noW({u}loc))
	
	\heuristics(update_apply)
 };

//-----------------------------------------------------------------------------------------
//                        Event Shifting Rules 
//-----------------------------------------------------------------------------------------

 shiftEventParallelToUpdate {
 	\schemaVar \term EventMarker rw;
 	\schemaVar \term LocSet loc;
 	\schemaVar \term int ts;
 	\schemaVar \update u;
 	
 	\find(\event(rw, loc, ts) || u)
 	
 	\varcond(\noEventUpdate(u)) 
 	
 	\replacewith(u || \event(rw, loc, ts))
 	
 	\heuristics(update_apply)
 };

 shiftEventParallelToElementry {
 	\schemaVar \program Variable pv;
 	\schemaVar \term any t;
 	\schemaVar \term EventMarker rw;
 	\schemaVar \term LocSet loc;
 	\schemaVar \term int ts;
 	
 	\find(\event(rw, loc, ts) || pv:=t)
 	
 	\replacewith(pv:=t || \event(rw, loc, ts))
 	
 	\heuristics(update_apply)
 };

 shiftEventWithUpdateAtFirstPlace {
 	\schemaVar \update u;
 	\schemaVar \program Variable pv;
 	\schemaVar \term any t;
 	\schemaVar \term EventMarker rw;
 	\schemaVar \term LocSet loc;
 	\schemaVar \term int ts;
 	
 	\find(u || \event(rw, loc, ts) || pv:=t)
 	
 	\replacewith(u || pv:=t || \event(rw, loc, ts))
 	
 	\heuristics(update_apply)
 };

 shiftEventWithUpdateAtLastPlace {
 	\schemaVar \update u;
 	\schemaVar \program Variable pv;
 	\schemaVar \term any t;
 	\schemaVar \term EventMarker rw;
 	\schemaVar \term LocSet loc;
 	\schemaVar \term int ts;
 	
 	\find(\event(rw, loc, ts) || pv:=t || u)
 	
 	\replacewith(pv:=t || \event(rw, loc, ts) || u)
 	
 	\heuristics(update_apply)
 };

// ----------------------------------Shifting rules for only events

 shiftOnlyEventParallelToElementry {
 	\schemaVar \program Variable pv;
 	\schemaVar \term any t;
 	\schemaVar \update evUp;
 	
 	\find(evUp || pv:=t)
 	\varcond(\onlyEventUpdates(evUp))
 	
 	\replacewith(pv:=t || evUp)
 	
 	\heuristics(update_apply)
 };

 shiftOnlyEventWithUpdateAtFirstPlace {
 	\schemaVar \update evUp;
 	\schemaVar \update u;
 	\schemaVar \program Variable pv;
 	\schemaVar \term any t;
 	\schemaVar \term EventMarker rw;
 	\schemaVar \term LocSet loc;
 	\schemaVar \term int ts;
 	
 	\find(u || evUp || pv:=t)
 	\varcond(\onlyEventUpdates(evUp))
 	
 	\replacewith(u || pv:=t || evUp)
 	
 	\heuristics(update_apply)
 };

 shiftOnlyEventWithUpdateAtLastPlace {
 	\schemaVar \update evUp;
 	\schemaVar \update u;
 	\schemaVar \program Variable pv;
 	\schemaVar \term any t;
 	\schemaVar \term EventMarker rw;
 	\schemaVar \term LocSet loc;
 	\schemaVar \term int ts;
 	
 	\find( pv:=t || evUp || u)
 	\varcond(\onlyEventUpdates(evUp),\noEventUpdate(u))
 	
 	\replacewith(pv:=t || u || evUp)
 	
 	\heuristics(update_apply)
 };


//-----------------------------------------------------------------------------------------
//                        Simplification Rules for Dependence Predicates
//-----------------------------------------------------------------------------------------

 simplifyEventUpdateNoRaW {
	\schemaVar \update u1,u2;
	\schemaVar \term[rigid] LocSet loc;
 	\schemaVar \skolemTerm LocSet tempVar;
 	

	
	\find({u1||u2}noRaW(loc))
	
	\varcond(\noEventUpdate(u1),
	   /*\new(tempVar, \dependingOn(u)),*/
             \new(tempVar, \dependingOn(loc)))   
	
	\replacewith({u2}noRaW(loc))
	
	\heuristics(update_apply)
        
   };
   
 simplifyEventUpdateNoWaR {
	\schemaVar \update u1,u2;
	\schemaVar \term[rigid] LocSet loc;
	\schemaVar \skolemTerm LocSet tempVar;

	
	\find({u1||u2}noWaR(loc))
	
	\varcond(\noEventUpdate(u1),
	   /*\new(tempVar, \dependingOn(u)),*/
             \new(tempVar, \dependingOn(loc)))
	
	\replacewith({u2}noWaR(loc))
	
	\heuristics(update_apply)
        
   };
   
   simplifyEventUpdateNoWaW {
	\schemaVar \update u1,u2;
	\schemaVar \term[rigid] LocSet loc;
	\schemaVar \skolemTerm LocSet tempVar;

	
	\find({u1||u2}noWaW(loc))
	
	\varcond(\noEventUpdate(u1),
	   /*\new(tempVar, \dependingOn(u)),*/
             \new(tempVar, \dependingOn(loc)))
             
	\replacewith({u2}noWaW(loc))
	
	\heuristics(update_apply)
        
   };
   
 writeEventBeforeNoRaW {
 	\schemaVar \term LocSet loc1, loc2;
 	\schemaVar \term int ts;
 	
 	\find({\event(write, loc1, ts)} noRaW(loc2))
 	
 	\replacewith(noRaW({\event(write, loc1, ts)}loc2))
 	
 	\heuristics(userTaclets1)
 };
 
 readEventBeforeNoRaW {
 	\schemaVar \term LocSet loc1, loc2;
 	\schemaVar \term int ts;
 	\schemaVar \skolemTerm LocSet tempVar;
 	
 	\find({\event(read, loc1, ts)} noRaW(loc2))
 	\varcond(\new(tempVar, \dependingOn(loc1)),
             \new(tempVar, \dependingOn(ts)),
             \new(tempVar, \dependingOn(loc2)))
		
 	\replacewith(noRaW(tempVar))
 	\add(tempVar = {\event(read, loc1, ts)}loc2 & intersect(loc1, tempVar) = empty ==> );
 	
 	\replacewith(noW(intersect(loc1, tempVar)) & noRaW(setMinus(tempVar,loc1)))
 	\add(tempVar = {\event(read, loc1, ts)}loc2 & !(intersect(loc1, tempVar) = empty) ==> )
 	
 	\heuristics(userTaclets1)
 };

 writeEventBeforeNoWaR {
 	\schemaVar \term LocSet loc1, loc2;
 	\schemaVar \term int ts;
 	\schemaVar \skolemTerm LocSet tempVar;
 	
 	\find({\event(write, loc1, ts)} noWaR(loc2))
 	\varcond(\new(tempVar, \dependingOn(loc1)),
             \new(tempVar, \dependingOn(ts)),
             \new(tempVar, \dependingOn(loc2)))
		
 	\replacewith(noWaR(tempVar))
 	\add(tempVar = {\event(write, loc1, ts)}loc2 & intersect(loc1, tempVar) = empty ==> );
 	
 	\replacewith(noR(intersect(loc1, tempVar)) & noWaR(setMinus(tempVar,loc1)))
 	\add(tempVar = {\event(write, loc1, ts)}loc2 & !(intersect(loc1, tempVar) = empty) ==> )
 	
 	\heuristics(userTaclets1)
 };
 
 readEventBeforeNoWaR {
 	\schemaVar \term LocSet loc1, loc2;
 	\schemaVar \term int ts;
 	
 	\find({\event(read, loc1, ts)} noWaR(loc2))
 	
 	\replacewith( noWaR({\event(read, loc1, ts)}loc2))
 	
 	\heuristics(userTaclets1)
 };
 
 writeEventBeforeNoWaW {
 	\schemaVar \term LocSet loc1, loc2;
 	\schemaVar \term int ts;
 	\schemaVar \skolemTerm LocSet tempVar;
 	
 	\find({\event(write, loc1, ts)} noWaW(loc2))
 	\varcond(\new(tempVar, \dependingOn(loc1)),
             \new(tempVar, \dependingOn(ts)),
             \new(tempVar, \dependingOn(loc2)))
		
 	\replacewith(noWaW(tempVar))
 	\add(tempVar = {\event(write, loc1, ts)}loc2 & intersect(loc1, tempVar) = empty ==> );
 	
 	\replacewith(noW(intersect(loc1, tempVar)) & noWaW(setMinus(tempVar,loc1)))
 	\add(tempVar = {\event(write, loc1, ts)}loc2 & !(intersect(loc1, tempVar) = empty) ==> )
 	
 	\heuristics(userTaclets1)
 };
 
 readEventBeforeNoWaW {
 	\schemaVar \term LocSet loc1, loc2;
 	\schemaVar \term int ts;
 	
 	\find({\event(read, loc1, ts)} noWaW(loc2))
 	
 	\replacewith( noWaW({\event(read, loc1, ts)}loc2))
 	
 	\heuristics(userTaclets1)
 };
 
 writeEventBeforeNoW {
 	\schemaVar \term LocSet loc1, loc2;
 	\schemaVar \term int ts;
 	\schemaVar \skolemTerm LocSet tempVar;
 	
 	\find(==> {\event(write, loc1, ts)} noW(loc2))
 	\varcond(\new(tempVar, \dependingOn(loc1)),
             \new(tempVar, \dependingOn(ts)),
             \new(tempVar, \dependingOn(loc2)))        
     
     \replacewith(==> noW(tempVar))
     \add(tempVar = {\event(write, loc1, ts)}loc2,
     	intersect(loc1, tempVar) = empty ==> );
     
     \replacewith(==> false)
     \add(tempVar = {\event(write, loc1, ts)}loc2,
     	!(intersect(loc1, tempVar) = empty) ==> )
     
 	\heuristics(userTaclets1)
 };
 
 readEventBeforeNoW {
 	\schemaVar \term LocSet loc1, loc2;
 	\schemaVar \term int ts;
 	
 	\find({\event(read, loc1, ts)} noW(loc2))
 	
 	
 	\replacewith( noW({\event(read, loc1, ts)}loc2))
 	
 	\heuristics(userTaclets1)
 };  
 
 writeEventBeforeNoR {
 	\schemaVar \term LocSet loc1, loc2;
 	\schemaVar \term int ts;
 	
 	
 	\find({\event(write, loc1, ts)} noR(loc2))
 	
 	\replacewith(noR({\event(write, loc1, ts)}loc2))
 	
 //	\heuristics(userTaclets1)
 };
 
 readEventBeforeNoR {
 	\schemaVar \term LocSet loc1, loc2;
 	\schemaVar \term int ts;
 	\schemaVar \skolemTerm LocSet tempVar;
 	
 	\find(==> {\event(read, loc1, ts)} noR(loc2))
 	\varcond(\new(tempVar, \dependingOn(loc1)),
             \new(tempVar, \dependingOn(ts)),
             \new(tempVar, \dependingOn(loc2)))        
     
     \replacewith(==> noR(tempVar))
     \add(tempVar = {\event(read, loc1, ts)}loc2,
     	intersect(loc1, tempVar) = empty ==> );
     
     \replacewith(==> false)
     \add(tempVar = {\event(read, loc1, ts)}loc2,
     	!(intersect(loc1, tempVar) = empty) ==> )
     
 	\heuristics(userTaclets1)
 };
 

//-----------------------------------------------------------------------------------------
//						Simplification Rules for Event Predicates
//-----------------------------------------------------------------------------------------
 	 
	 
//-------------------------------------------rPred-----------------------------------------
simplifyParallelUpdateOnReadPredRigidLOC {
	\schemaVar \update u1,u2;
	\schemaVar \term[rigid] LocSet loc;
	\schemaVar \skolemTerm LocSet tempVar;
	\schemaVar \term int ts;


	\find({u1||u2}rPred(loc, ts))

	\varcond(\noDependenceLDT(u1),
			\new(tempVar, \dependingOn(loc)))   

	\replacewith({u2}rPred(loc, {u1}ts))

	\heuristics(update_apply)

};

simplifyUpdateOnReadPredRigidLOC {
	\schemaVar \update u;
	\schemaVar \term[rigid] LocSet loc;
	\schemaVar \skolemTerm LocSet tempVar;
	\schemaVar \term int ts;


	\find({u}rPred(loc, ts))

	\varcond(\noDependenceLDT(u),
			\new(tempVar, \dependingOn(loc)))   

	\replacewith(rPred(loc, {u}ts))

	\heuristics(update_apply)

};

simplifyUpdateOnReadPredNonRigidLOC {
	\schemaVar \update u;
	\schemaVar \term LocSet loc;
	\schemaVar \term int ts;


	\find({u}rPred(loc, ts))

	\varcond(\noDependenceLDT(u))   

	\replacewith(rPred({u}loc, {u}ts))

	\heuristics(update_apply)

};

simplifyParallelUpdateOnReadPredNonRigidLOC {
	\schemaVar \update u1,u2;
	\schemaVar \term LocSet loc;
	\schemaVar \skolemTerm LocSet tempVar;
	\schemaVar \term int ts;


	\find({u1 || u2}rPred(loc, ts))

	\varcond(\noDependenceLDT(u1),
			\noDependenceLDT(u2))   

	\replacewith(rPred({u1 || u2}loc, {u1 || u2}ts))

	\heuristics(update_apply)

};

//-------------------------------------------wPred-----------------------------------------
simplifyParallelUpdateOnWritePredRigidLOC {
	\schemaVar \update u1,u2;
	\schemaVar \term[rigid] LocSet loc;
	\schemaVar \skolemTerm LocSet tempVar;
	\schemaVar \term int ts;


	\find({u1||u2}wPred(loc, ts))

	\varcond(\noDependenceLDT(u1),
			\new(tempVar, \dependingOn(loc)))   

	\replacewith({u2}wPred(loc, {u1}ts))

	\heuristics(update_apply)

};

simplifyUpdateOnWritePredRigidLOC {
	\schemaVar \update u;
	\schemaVar \term[rigid] LocSet loc;
	\schemaVar \skolemTerm LocSet tempVar;
	\schemaVar \term int ts;


	\find({u}wPred(loc, ts))

	\varcond(\noDependenceLDT(u),
			\new(tempVar, \dependingOn(loc)))   

	\replacewith(wPred(loc, {u}ts))

	\heuristics(update_apply)

};

simplifyUpdateOnWritePredNonRigidLOC {
	\schemaVar \update u;
	\schemaVar \term LocSet loc;
	\schemaVar \term int ts;


	\find({u}wPred(loc, ts))

	\varcond(\noDependenceLDT(u))   

	\replacewith(wPred({u}loc, {u}ts))

	\heuristics(update_apply)

};

simplifyParallelUpdateOnWritePredNonRigidLOC {
	\schemaVar \update u1,u2;
	\schemaVar \term LocSet loc;
	\schemaVar \term int ts;


	\find({u1 || u2}wPred(loc, ts))

	\varcond(\noDependenceLDT(u1),
			\noDependenceLDT(u2))   

	\replacewith(wPred({u1 || u2}loc, {u1 || u2}ts))

	\heuristics(update_apply)

}; 
 
 
//-----------------------------------------------------------------------------------------
//                        Proof Closing Rules 
//-----------------------------------------------------------------------------------------

 noRaWOnEmptySet{
 	
 	\find(noRaW(empty))
 	\replacewith(true)
 	
 	\heuristics(concrete)
 };

 noWaROnEmptySet{
 	
 	\find(noWaR(empty))
 	\replacewith(true)
 	
 	\heuristics(concrete)
 };
 
 noWaWOnEmptySet{
 	
 	\find(noWaW(empty))
 	\replacewith(true)
 	
 	\heuristics(concrete)
 };
 
 noWOnEmptySet{
 	
 	\find(noW(empty))
 	\replacewith(true)
 	
 	\heuristics(concrete)
 };
 
 noROnEmptySet{
 	
 	\find(noR(empty))
 	\replacewith(true)
 	
 	\heuristics(concrete)
 };    
}

//-----------------------------------------------------------------------------------------
//                      Anon Event Rules 
//-----------------------------------------------------------------------------------------
\rules(programRules:Java, runtimeExceptions:ban, dependencies:on){

 applyEventOnAnonEvUp { 
	
	\schemaVar \term LocSet loc, anonLoc;
	\schemaVar \term EventMarker rw;
	\schemaVar \term int ts, id;
	 	
	\find({\event(rw, loc, ts)} (\anonEvUp(anonLoc, id)))
	\replacewith(\anonEvUp({\event(rw, loc, ts)}anonLoc, {\event(rw, loc, ts)}id))
};

applyanonEvUpOnEvent { 

	\schemaVar \term LocSet loc, anonLoc;
	\schemaVar \term EventMarker rw;
	\schemaVar \term int ts, id;
	 	
	\find({\anonEvUp(anonLoc, id)}(\event(rw, loc, ts)))
	\replacewith(\event({\anonEvUp(anonLoc,id)}rw, {\anonEvUp(anonLoc,id)}loc, {\anonEvUp(anonLoc,id)}ts))

 };
		
//===================================={anonEvUp} depPred ===============
anonEvUpOnNoRaW{
	 	
	\schemaVar \skolemTerm LocSet tempVar;
	\schemaVar \term LocSet loc, anonLoc;
	\schemaVar \term int id;
	
	\find({\anonEvUp(anonLoc,id)} noRaW(loc))
	\varcond(\new(tempVar, \dependingOn(anonLoc)),
	           \new(tempVar, \dependingOn(loc)))
			  
	\replacewith(({\anonEvUp(anonLoc,id)}noRaW(tempVar)) & noRaW(setMinus(tempVar, anonLoc))) //ask Richard: shouldn't it be ({\anonEvUp(anonLoc)}noRaW(intersect(tempVar,anonLoc))) for completeness
	\add(tempVar = {\anonEvUp(anonLoc,id)}loc,
		!(intersect(tempVar, anonLoc) = empty)==> );
			
	\replacewith({\anonEvUp(anonLoc,id)}noRaW(tempVar))
	\add(tempVar = {\anonEvUp(anonLoc,id)}loc,
		intersect(tempVar, anonLoc) = empty==> )
};
anonEvUpOnNoWaR{
 	
	\schemaVar \skolemTerm LocSet tempVar;
	\schemaVar \term LocSet loc, anonLoc;
	\schemaVar \term int id;
	 	
	\find({\anonEvUp(anonLoc,id)} noWaR(loc))	
	\varcond(\new(tempVar, \dependingOn(anonLoc)),
	           \new(tempVar, \dependingOn(loc)))
			  
	\replacewith(({\anonEvUp(anonLoc,id)}noWaR(tempVar)) & noWaR(setMinus(tempVar, anonLoc))) //ask Richard: shouldn't it be ({\anonEvUp(anonLoc)}noRaW(intersect(tempVar,anonLoc))) for completeness
	\add(tempVar = {\anonEvUp(anonLoc,id)}loc,
		!(intersect(tempVar, anonLoc) = empty)==> );
			
	\replacewith({\anonEvUp(anonLoc,id)}noWaR(tempVar))
	\add(tempVar = {\anonEvUp(anonLoc,id)}loc,
		intersect(tempVar, anonLoc) = empty==> )
};

anonEvUpOnNoWaW{
 	
	\schemaVar \skolemTerm LocSet tempVar;
	\schemaVar \term LocSet loc, anonLoc;
	\schemaVar \term int id;
	 	
	 \find({\anonEvUp(anonLoc,id)} noWaW(loc))
		
	\varcond(\new(tempVar, \dependingOn(anonLoc)),
	           \new(tempVar, \dependingOn(loc)))
			  
	\replacewith(({\anonEvUp(anonLoc,id)}noWaW(tempVar)) & noWaW(setMinus(tempVar, anonLoc))) //ask Richard: shouldn't it be ({\anonEvUp(anonLoc)}noRaW(intersect(tempVar,anonLoc))) for completeness
	\add(tempVar = {\anonEvUp(anonLoc,id)}loc,
		!(intersect(tempVar, anonLoc) = empty)==> );
			
	\replacewith({\anonEvUp(anonLoc,id)}noWaW(tempVar))
	\add(tempVar = {\anonEvUp(anonLoc,id)}loc,
		intersect(tempVar, anonLoc) = empty==> )
};

anonEvUpOnNoW{
 	
	\schemaVar \skolemTerm LocSet tempVar;
	\schemaVar \term LocSet loc, anonLoc;
	\schemaVar \term int id;
	 	
	 \find({\anonEvUp(anonLoc,id)} noW(loc))
		
	\varcond(\new(tempVar, \dependingOn(anonLoc)),
	           \new(tempVar, \dependingOn(loc)))
			  
	\replacewith(({\anonEvUp(anonLoc,id)}noW(tempVar)) & noW(setMinus(tempVar, anonLoc))) //ask Richard: shouldn't it be ({\anonEvUp(anonLoc)}noRaW(intersect(tempVar,anonLoc))) for completeness
	\add(tempVar = {\anonEvUp(anonLoc,id)}loc,
		!(intersect(tempVar, anonLoc) = empty)==> );
			
	\replacewith({\anonEvUp(anonLoc,id)}noW(tempVar))
	\add(tempVar = {\anonEvUp(anonLoc,id)}loc,
		intersect(tempVar, anonLoc) = empty==> )
};

anonEvUpOnNoR{
 	
	\schemaVar \skolemTerm LocSet tempVar;
	\schemaVar \term LocSet loc, anonLoc;
	\schemaVar \term int id;
	 	
	 \find({\anonEvUp(anonLoc,id)} noR(loc))
		
	\varcond(\new(tempVar, \dependingOn(anonLoc)),
	           \new(tempVar, \dependingOn(loc)))
			  
	\replacewith(({\anonEvUp(anonLoc,id)}noR(tempVar)) & noR(setMinus(tempVar, anonLoc))) //ask Richard: shouldn't it be ({\anonEvUp(anonLoc)}noRaW(intersect(tempVar,anonLoc))) for completeness
	\add(tempVar = {\anonEvUp(anonLoc,id)}loc,
		!(intersect(tempVar, anonLoc) = empty)==> );
			
	\replacewith({\anonEvUp(anonLoc,id)}noR(tempVar))
	\add(tempVar = {\anonEvUp(anonLoc,id)}loc,
		intersect(tempVar, anonLoc) = empty==> )
};
//===================================={anonEvUp} depPred ==>  {anonEvUp} depPred===============

anonEvUponNoRaWBothSides{
	\schemaVar \skolemTerm LocSet tempVar1, tempVar2;
	\schemaVar \term LocSet loc1, loc2, anonLoc;
	\schemaVar \term int id;
	
	\assumes({\anonEvUp(anonLoc,id)}noRaW(loc1) ==>)
	\find(==> {\anonEvUp(anonLoc,id)}noRaW(loc2))
		
	\replacewith(==> \if(!(intersect(tempVar1, tempVar2) = empty)) \then({\anonEvUp(anonLoc,id)}noRaW(setMinus(tempVar2, tempVar1))) \else({\anonEvUp(anonLoc,id)}noRaW(tempVar2)))
	\add(tempVar1 = {\anonEvUp(anonLoc,id)}loc1,
		tempVar2 = {\anonEvUp(anonLoc,id)}loc2 ==>)
	};
	
anonEvUponNoWaRBothSides{
	\schemaVar \skolemTerm LocSet tempVar1, tempVar2;
	\schemaVar \term LocSet loc1, loc2, anonLoc;
	\schemaVar \term int id;
	
	\assumes({\anonEvUp(anonLoc,id)}noWaR(loc1) ==>)
	\find(==> {\anonEvUp(anonLoc,id)}noWaR(loc2))
		
	\replacewith(==> \if(!(intersect(tempVar1, tempVar2) = empty)) \then({\anonEvUp(anonLoc,id)}noWaR(setMinus(tempVar2, tempVar1))) \else({\anonEvUp(anonLoc,id)}noWaR(tempVar2)))
	\add(tempVar1 = {\anonEvUp(anonLoc,id)}loc1,
		tempVar2 = {\anonEvUp(anonLoc,id)}loc2 ==>)
	};
	
anonEvUponNoWaWBothSides{
	\schemaVar \skolemTerm LocSet tempVar1, tempVar2;
	\schemaVar \term LocSet loc1, loc2, anonLoc;
	\schemaVar \term int id;
	
	\assumes({\anonEvUp(anonLoc,id)}noWaW(loc1) ==>)
	\find(==> {\anonEvUp(anonLoc,id)}noWaW(loc2))
		
	\replacewith(==> \if(!(intersect(tempVar1, tempVar2) = empty)) \then({\anonEvUp(anonLoc,id)}noWaW(setMinus(tempVar2, tempVar1))) \else({\anonEvUp(anonLoc,id)}noWaW(tempVar2)))
	\add(tempVar1 = {\anonEvUp(anonLoc,id)}loc1,
		tempVar2 = {\anonEvUp(anonLoc,id)}loc2 ==>)
	};
	
anonEvUponNoWBothSides{
	\schemaVar \skolemTerm LocSet tempVar1, tempVar2;
	\schemaVar \term LocSet loc1, loc2, anonLoc;
	\schemaVar \term int id;
	
	\assumes({\anonEvUp(anonLoc,id)}noW(loc1) ==>)
	\find(==> {\anonEvUp(anonLoc,id)}noW(loc2))
		
	\replacewith(==> \if(!(intersect(tempVar1, tempVar2) = empty)) \then({\anonEvUp(anonLoc,id)}noW(setMinus(tempVar2, tempVar1))) \else({\anonEvUp(anonLoc,id)}noW(tempVar2)))
	\add(tempVar1 = {\anonEvUp(anonLoc,id)}loc1,
		tempVar2 = {\anonEvUp(anonLoc,id)}loc2 ==>)
	};
	
anonEvUponNoRBothSides{
	\schemaVar \skolemTerm LocSet tempVar1, tempVar2;
	\schemaVar \term LocSet loc1, loc2, anonLoc;
	\schemaVar \term int id;
	
	\assumes({\anonEvUp(anonLoc,id)}noR(loc1) ==>)
	\find(==> {\anonEvUp(anonLoc,id)}noR(loc2))
		
	\replacewith(==> \if(!(intersect(tempVar1, tempVar2) = empty)) \then({\anonEvUp(anonLoc,id)}noR(setMinus(tempVar2, tempVar1))) \else({\anonEvUp(anonLoc,id)}noR(tempVar2)))
	\add(tempVar1 = {\anonEvUp(anonLoc,id)}loc1,
		tempVar2 = {\anonEvUp(anonLoc,id)}loc2 ==>)
	};	
//=================================={ update/event/anonEvUp || \anonEvUp}==================================
	applyUpdateParallelToAnonEventOnElementary {
		\schemaVar \program Variable pv;
		\schemaVar \term any t;
		\schemaVar \term LocSet anonLoc;	
		\schemaVar \term int id;
		\schemaVar \update u;

		\find({u || \anonEvUp(anonLoc, id)}(pv := t))
		
		\replacewith((pv := {u || \anonEvUp(anonLoc, id)}t))
		
		\heuristics(update_apply_on_update)//userTaclets1)
	 };
	    
	 applyUpdateParallelToAnonEventOnPV {
		\schemaVar \program Variable pv;
		\schemaVar \term LocSet anonLoc;
		\schemaVar \term int id;
		\schemaVar \update u;
			
		\find({u || \anonEvUp(anonLoc, id)}pv)
		
		\replacewith({u}pv)
		
		\heuristics(update_apply)//userTaclets1)
	 };
	    
	 applyUpdateParallelToEventOnSkip {
		\schemaVar \term LocSet anonLoc;
		\schemaVar \term int id;
		\schemaVar \update u;
		
		\find({u || \anonEvUp(anonLoc, id)}skip)
		
		\replacewith(skip)
		
		\heuristics(update_elim)//userTaclets1)
	 };

	
//===================================={ update/event/anonEvUp || \anonEvUp} depPred==================================
	 
updateBeforeanonEvUpOnNoRaW{
 	\schemaVar \update u;
	\schemaVar \term LocSet anonLoc, loc;
	\schemaVar \skolemTerm LocSet tempVar;
	\schemaVar \term int id;
	 	
	 \find(==> {u || \anonEvUp(anonLoc,id)} noRaW(loc))
	
	 \varcond(//\new(tempVar, \dependingOn(u)),
	             \new(tempVar, \dependingOn(anonLoc)),
	             \new(tempVar, \dependingOn(loc)))   
				 
	 \replacewith(==> {u}noRaW(tempVar))
	 \add(tempVar = {u || \anonEvUp(anonLoc,id)}loc, 
	          intersect(anonLoc, tempVar) = empty ==> );  
			  
			  
	 \replacewith(==> ({u ||  \anonEvUp(anonLoc,id)} noRaW(intersect(tempVar, anonLoc))) & {u}noRaW(setMinus(tempVar, anonLoc)))
	 \add(tempVar = {u || \anonEvUp(anonLoc,id)}loc, !(intersect(anonLoc, tempVar) = empty) ==> )
};
 
updateBeforeanonEvUpOnNoWaR{
	 	\schemaVar \update u;
		\schemaVar \term LocSet anonLoc, loc;
		\schemaVar \skolemTerm LocSet tempVar;
		\schemaVar \term int id;
		 	
		 \find(==> {u || \anonEvUp(anonLoc,id)} noWaR(loc))
		
		 \varcond(//\new(tempVar, \dependingOn(u)),
             \new(tempVar, \dependingOn(anonLoc)),
             \new(tempVar, \dependingOn(loc)))   
			 
 \replacewith(==> {u}noWaR(tempVar))
 \add(tempVar = {u || \anonEvUp(anonLoc,id)}loc, 
          intersect(anonLoc, tempVar) = empty ==> );  
		  
		  
 \replacewith(==> ({u ||  \anonEvUp(anonLoc,id)} noWaR(intersect(tempVar, anonLoc))) & {u}noWaR(setMinus(tempVar, anonLoc)))
 \add(tempVar = {u || \anonEvUp(anonLoc,id)}loc, !(intersect(anonLoc, tempVar) = empty) ==> )
 };
	 
 updateBeforeanonEvUpOnNoWaW{
	 	\schemaVar \update u;
		\schemaVar \term LocSet anonLoc, loc;
		\schemaVar \skolemTerm LocSet tempVar;
		\schemaVar \term int id;
		 	
		 \find(==> {u || \anonEvUp(anonLoc,id)} noWaW(loc))
		
		 \varcond(//\new(tempVar, \dependingOn(u)),
             \new(tempVar, \dependingOn(anonLoc)),
             \new(tempVar, \dependingOn(loc)))   
			 
 \replacewith(==> {u}noWaW(tempVar))
 \add(tempVar = {u || \anonEvUp(anonLoc,id)}loc, 
          intersect(anonLoc, tempVar) = empty ==> );  
		  
		  
 \replacewith(==> ({u ||  \anonEvUp(anonLoc,id)} noWaW(intersect(tempVar, anonLoc))) & {u}noWaW(setMinus(tempVar, anonLoc)))
 \add(tempVar = {u || \anonEvUp(anonLoc,id)}loc, !(intersect(anonLoc, tempVar) = empty) ==> )
 };

 
 updateBeforeanonEvUpOnNoW{
	 	\schemaVar \update u;
		\schemaVar \term LocSet anonLoc, loc;
		\schemaVar \skolemTerm LocSet tempVar;
		\schemaVar \term int id;
		 	
		 \find(==> {u || \anonEvUp(anonLoc,id)} noW(loc))
		
		 \varcond(//\new(tempVar, \dependingOn(u)),
             \new(tempVar, \dependingOn(anonLoc)),
             \new(tempVar, \dependingOn(loc)))   
			 
 \replacewith(==> {u} noW(tempVar))
 \add(tempVar = {u || \anonEvUp(anonLoc,id)}loc, 
          intersect(anonLoc, tempVar) = empty ==> );  
		  
		  
 \replacewith(==> ({u ||  \anonEvUp(anonLoc,id)} noW(intersect(tempVar, anonLoc))) & {u}noW(setMinus(tempVar, anonLoc)))
 \add(tempVar = {u || \anonEvUp(anonLoc,id)}loc, !(intersect(anonLoc, tempVar) = empty) ==> )
 };

 updateBeforeanonEvUpOnNoR{
	 	\schemaVar \update u;
		\schemaVar \term LocSet anonLoc, loc;
		\schemaVar \skolemTerm LocSet tempVar;
		\schemaVar \term int id;
		 	
		 \find(==> {u || \anonEvUp(anonLoc,id)} noR(loc))
		
		 \varcond(//\new(tempVar, \dependingOn(u)),
             \new(tempVar, \dependingOn(anonLoc)),
             \new(tempVar, \dependingOn(loc)))   
			 
 \replacewith(==> {u}noR(tempVar))
 \add(tempVar = {u || \anonEvUp(anonLoc,id)}loc, 
          intersect(anonLoc, tempVar) = empty ==> );  
		  
 \replacewith(==> ({u ||  \anonEvUp(anonLoc,id)} noR(intersect(tempVar, anonLoc))) & {u}noR(setMinus(tempVar, anonLoc)))
 \add(tempVar = {u || \anonEvUp(anonLoc,id)}loc, !(intersect(anonLoc, tempVar) = empty) ==> )
 };
 
//==================================== Update on anon===================================
 applyUpdateOnAnonEvent {
	 	\schemaVar \update u;
	 	\schemaVar \term LocSet anonLoc;
	 	\schemaVar \term int id;
	 	
	 	\find({u}(\anonEvUp(anonLoc, id)))
	 	
	 	\replacewith(\anonEvUp({u}anonLoc, {u}id))
	 	
	 	\heuristics(update_apply_on_update)
	 	
};
 

}

//-----------------------------------------------------------------------------------------
//									Anon-Event Elimination Rules 
//-----------------------------------------------------------------------------------------
\rules(programRules:Java, runtimeExceptions:ban, dependencies:on){

	elimAnonEventOnRigidTerm1 {
		\schemaVar \term[rigid] any t;
		\schemaVar \update u;

		\find({u} t)

		\replacewith(t)

		\heuristics(update_elim)
	};

	elimAnonEventOnRigidTerm2 {
		\schemaVar \term any t, result;
		\schemaVar \update u;	
		
		\find({u}t)
		\varcond(\applyAnonEventOnRigid(u, t, result))
		
		\replacewith(result)
		
		\heuristics(update_elim)
	};
	
	elimAnonEventOnRigidFormula1 {  
		\schemaVar \formula[rigid] phi;
		\schemaVar \update u;
		
		\find({u}phi)
		
		\replacewith(phi)
		
		\heuristics(update_elim)
	};
	
	elimAnonEventOnRigidFormula2 {
		\schemaVar \formula phi, result;
		\schemaVar \update u;
		
		\find({u}phi)
		\varcond(\applyAnonEventOnRigid(u, phi, result))
		
		\replacewith(result)
		
		\heuristics(update_elim)
	};
	
	applyAnonEventOnElementary {
		\schemaVar \program Variable pv;
		\schemaVar \term any t;
		\schemaVar \term LocSet anonLoc;
	 	\schemaVar \term int id;
		
		\find({\anonEvUp(anonLoc, id)}(pv := t))
		
		\replacewith((pv := {\anonEvUp(anonLoc, id)}t))
		
		\heuristics(update_apply_on_update)
	};
	
	elimAnonEventOnPV {
		\schemaVar \program Variable pv;
		\schemaVar \term LocSet anonLoc;
	 	\schemaVar \term int id;
		
		\find({\anonEvUp(anonLoc, id)}pv)
		
		\replacewith(pv)
		
		\heuristics(update_elim)
	};
	
	elimAnonEventOnSkip {
		\schemaVar \term LocSet anonLoc;
	 	\schemaVar \term int id;
		
		\find({\anonEvUp(anonLoc, id)}skip)
		
		\replacewith(skip)
		
		\heuristics(update_elim)
	};
	
	//-----------------------------------------------------------------------------------------
	//  Event Shifting Rules 
	//-----------------------------------------------------------------------------------------
	
	shiftAnonEventParallelToUpdate {
		\schemaVar \term LocSet anonLoc;
		\schemaVar \term int id;
		\schemaVar \update u;
		
		\find(\anonEvUp(anonLoc, id) || u)
		
//		\varcond(\noEventUpdate(u)) 
		
		\replacewith(u || \anonEvUp(anonLoc, id))
		
		\heuristics(update_apply)
	};
	
	shiftAnonEventParallelToElementry {
		\schemaVar \program Variable pv;
		\schemaVar \term any t;
		\schemaVar \term LocSet anonLoc;
		\schemaVar \term int id;
		
		\find(\anonEvUp(anonLoc, id) || pv:=t)
		
		\replacewith(pv:=t || \anonEvUp(anonLoc, id))
		
		\heuristics(update_apply)
	};
	
	
	
	
	//----------------------------------Shifting rules for only events
	
	shiftOnlyEventParallelToElementry {
	\schemaVar \program Variable pv;
	\schemaVar \term any t;
	\schemaVar \update evUp;
	
	\find(evUp || pv:=t)
	\varcond(\onlyEventUpdates(evUp))
	
	\replacewith(pv:=t || evUp)
	
	\heuristics(update_apply)
	};
	
	shiftOnlyEventWithUpdateAtFirstPlace {
	\schemaVar \update evUp;
	\schemaVar \update u;
	\schemaVar \program Variable pv;
	\schemaVar \term any t;
	\schemaVar \term EventMarker rw;
	\schemaVar \term LocSet loc;
	\schemaVar \term int ts;
	
	\find(u || evUp || pv:=t)
	\varcond(\onlyEventUpdates(evUp))
	
	\replacewith(u || pv:=t || evUp)
	
	\heuristics(update_apply)
	};
	
	shiftOnlyEventWithUpdateAtLastPlace {
	\schemaVar \update evUp;
	\schemaVar \update u;
	\schemaVar \program Variable pv;
	\schemaVar \term any t;
	\schemaVar \term EventMarker rw;
	\schemaVar \term LocSet loc;
	\schemaVar \term int ts;
	
	\find( pv:=t || evUp || u)
	\varcond(\onlyEventUpdates(evUp),\noEventUpdate(u))
	
	\replacewith(pv:=t || u || evUp)
	
	\heuristics(update_apply)
	};
}


//-----------------------------------------------------------------------------------------
//                        Array Assignment Rules 
//-----------------------------------------------------------------------------------------

\rules(programRules:Java, runtimeExceptions:ban, dependencies:on) {
  assignment_read_length { 
		\schemaVar \program Variable #v, #v0;
		\schemaVar \program ArrayLength #length;
		\schemaVar \formula post;
  		
		\find (==> \modality{#allmodal}{.. #v0 = #v.#length; ...}\endmodality(post))
		\varcond(\not\isThisReference(#v))
		"Normal Execution (#v != null)":
		      \replacewith(==> {#v0 := length(#v)}
		      				//To Be Fixed. We need the LocSet here.
		      				/*{\event(read,singleton(length(#v)),timestamp)}
		                    {timestamp:=timestamp + 1}
		                    {\event(write,singleton(#v0),timestamp)}
		                    {timestamp:=timestamp + 1}*/
		      \modality{#allmodal}{.. ...}\endmodality(post))
		      //\add (==>(#v=null))
		      ;
		"Null Reference (#v = null)":
		      \replacewith(==> false)
		      \add (#v=null ==>)	
		      \heuristics(simplify_prog, simplify_prog_subset)
  };  

  assignment_array_read{
		\schemaVar \program Variable #v, #v0;
		\schemaVar \program SimpleExpression #se;
		\schemaVar \formula post;
				
		\find (==> \modality{#allmodal}{.. #v = #v0[#se]; ...}\endmodality(post))
                  \varcond(\hasSort(\elemSort(#v0), G))
		"Normal Execution (#v0 != null)":
		   \replacewith(==> {#v:=G::select(heap, #v0, arr(#se))}
		   					{\event(read,singleton(#v0,arr(#se)),timestamp)}
		                    //{timestamp:=timestamp + 1}
		   \modality{#allmodal}{.. ...}\endmodality(post))
		   //\add (==>(#v0=null) | leq(length(#v0), #se) | lt(#se,0))
        	;
		"Null Reference (#v0 = null)":
		   \replacewith(==> false)
	           \add (#v0=null ==>);	
		"Index Out of Bounds (#v0 != null, but #se Out of Bounds!)":
	  	   \replacewith(==> false)
		   \add (!(#v0=null) & (leq(length(#v0), #se) | lt(#se,0)) ==>)
    	  
    	   \heuristics(simplify_prog, simplify_prog_subset)
  };
  
}

//\rules(programRules:Java, runtimeExceptions:allow, dependencies:off) {
//assignment_to_primitive_array_component {
//               \schemaVar \modalOperator { diamond, box } #normal; 
//               \find (\modality{#normal}{..#v[#se]=#se0;...}\endmodality(post)) \sameUpdateLevel
//		 \varcond(\not \isReferenceArray(#v))
//		 "Normal Execution (#v != null)":
//			\replacewith({heap:=store(heap,#v,arr(#se),#se0)}\modality{#normal}{.. ...}\endmodality(post))
//			\add (!(#v=null) & lt(#se, length(#v)) & geq(#se,0)==>);
//               (permissions:on) {
//                 "Write Permission to #v[#se]":
//                   \replacewith(\modality{#normal}{.. assert false : "Access permission check-point (write)."; ...}\endmodality(post))
//                   \add(==> writePermission(Permission::select(permissions, #v, arr(#se))))
//               };
//		 "Null Reference (#v = null)":
//			\replacewith(\modality{#normal}{..
//			throw new java.lang.NullPointerException(); 
//			...}\endmodality(post))
//			\add (#v=null ==>);
//		 "Index Out of Bounds (#v != null, but #se Out of Bounds!)":
//			\replacewith(\modality{#normal}{.. throw new java.lang.ArrayIndexOutOfBoundsException(); ...}\endmodality(post))
//			\add (!(#v=null) & (leq(length(#v), #se) | lt(#se,0)) ==>)
//	         \heuristics(simplify_prog, simplify_prog_subset)
//};
//}
\rules(programRules:Java, runtimeExceptions:ban, dependencies: on) {	
	assignment_to_primitive_array_component { 
		\schemaVar \program Variable #v;
		\schemaVar \program SimpleExpression #se,#se0;
		\schemaVar \formula post;
		
	    \schemaVar \modalOperator { diamond, box } #normal; 
	           \find (==> \modality{#normal}{..#v[#se]=#se0;...}\endmodality(post))
		 \varcond(\not \isReferenceArray(#v))
		 "Normal Execution (#v != null)":
			\replacewith(==> {heap:=store(heap,#v,arr(#se),#se0)}
								{\event(write,singleton(#v,arr(#se)),timestamp)}\modality{#normal}{.. ...}\endmodality(post))
			//\add (!(#v=null) & lt(#se, length(#v)) & geq(#se,0)==>)
			;
	           (permissions:on) {
	             "Write Permission to #v[#se]":
	               \replacewith(==> writePermission(Permission::select(permissions, #v, arr(#se))))
	           };
		 "Null Reference (#v = null)":
			\replacewith(==> false)
			\add (#v=null ==>);
		 "Index Out of Bounds (#v != null, but #se Out of Bounds!)":
			\replacewith(==> false)
			\add (!(#v=null) & (leq(length(#v), #se) | lt(#se,0)) ==>)
	       \heuristics(simplify_prog, simplify_prog_subset)
	};
}





//-----------------------------------------------------------------------------------------
//                        Some Common Assignment rules 
//-----------------------------------------------------------------------------------------

\rules(programRules:Java, dependencies:on) {
  assignment  { 
     \schemaVar \program Variable #loc;
     \schemaVar \program SimpleExpression #se;
     \schemaVar \formula post;
     
     \find (\modality{#allmodal}{.. #loc = #se; ...}\endmodality(post))
     \replacewith ({#loc:= #se}\modality{#allmodal}{.. ...}\endmodality(post)) 
	
	 \heuristics(simplify_prog, simplify_prog_subset)
  };

}


\rules(programRules:Java, runtimeExceptions:ban, dependencies:on) {
  assignment_read_attribute { 
        \schemaVar \program Variable #v0, #v, #a;
        \schemaVar \formula post;
	
		\find (==> \modality{#allmodal}{.. #v0 = #v.#a; ...}\endmodality(post))
 	        \varcond(\not \static(#a), \not \isArrayLength(#a), \hasSort(#a, G), \not\isThisReference(#v))
		"Normal Execution (#v != null)":
		      \replacewith(==> {#v0 := G::select(heap, #v, #memberPVToField(#a)) ||
		                       \event(read,singleton(#v,#memberPVToField(#a)),timestamp)}
		                       //{timestamp:=timestamp + 1}
		                                      \modality{#allmodal}{.. ...}\endmodality(post))
		      //\add (==>(#v=null))
		      ;
		"Null Reference (#v = null)":
		      \replacewith(==> false)
		      \add (#v=null ==>)	
		      \heuristics(simplify_prog, simplify_prog_subset)
  };

 assignment_read_attribute_this { 
 		\schemaVar \program Variable #v0, #v, #a;
        \schemaVar \formula post;
 	
		\find (==> \modality{#allmodal}{.. #v0 = #v.#a; ...}\endmodality(post))
 	        \varcond(\not \static(#a), \not \isArrayLength(#a), \hasSort(#a, G), \isThisReference(#v))
		"Normal Execution":
		      \replacewith(==> {#v0 := G::select(heap, #v, #memberPVToField(#a)) ||
		      				   \event(read,singleton(#v,#memberPVToField(#a)),timestamp)}
		                       //{timestamp:=timestamp + 1}
		      \modality{#allmodal}{.. ...}\endmodality(post))
                
		      \heuristics(simplify_prog, simplify_prog_subset)
  };
  
 /* assignment_read_length { 
  		\schemaVar \program Variable #v0, #v;
        \schemaVar \formula post;
  
		\find (==> \modality{#allmodal}{.. #v0 = #v.#length; ...}\endmodality(post))
		\varcond(\not\isThisReference(#v))
		"Normal Execution (#v != null)":
		      \replacewith(==> {#v0 := length(#v)}
		      
		      \modality{#allmodal}{.. ...}\endmodality(post))
		      //\add (==>(#v=null))
		      ;
		"Null Reference (#v = null)":
		      \replacewith(==> false)
		      \add (#v=null ==>)	
		      \heuristics(simplify_prog, simplify_prog_subset)
  };*/  
}

\rules(programRules:Java, runtimeExceptions:ban, dependencies:on) {

  assignment_write_attribute { 
  
  		\schemaVar \program Variable #v, #a;
  		\schemaVar \program SimpleExpression #se;
		\schemaVar \formula post;
		
		\find (==> \modality{#allmodal}{.. #v.#a=#se; ...}\endmodality(post))
	        \varcond(\not \static(#a), \not\isThisReference(#v))
		"Normal Execution (#v != null)":
		      \replacewith(==> {heap:=store(heap,#v,#memberPVToField(#a),#se) || 
		      				   \event(write,singleton(#v,#memberPVToField(#a)),timestamp)}
		                       //{timestamp:=timestamp + 1}
		      					\modality{#allmodal}{.. ...}\endmodality(post))
		      
		      //\add (==>(#v=null))
		      ;
                
		"Null Reference (#v = null)":
		      \replacewith(==> false)
		      \add (#v=null ==>)	 
		      \heuristics(simplify_prog, simplify_prog_subset)
		      \displayname "assignment"
  };  

assignment_write_attribute_this { 
		
		\schemaVar \program Variable #v, #a;
  		\schemaVar \program SimpleExpression #se;
		\schemaVar \formula post;

		\find (==> \modality{#allmodal}{.. #v.#a=#se; ...}\endmodality(post))
	        \varcond(\not \static(#a), \isThisReference(#v))
		"Normal Execution":
		      \replacewith(==> {heap:=store(heap,#v,#memberPVToField(#a),#se) ||
		      				   \event(write,singleton(#v,#memberPVToField(#a)),timestamp)}
		                       //{timestamp:=timestamp + 1}
		  				    \modality{#allmodal}{.. ...}\endmodality(post))
                
		      \heuristics(simplify_prog, simplify_prog_subset)
		      \displayname "assignmentThis"
  };  
}
