\schemaVariables{
 \modalOperator { diamond, box, diamond_transaction, box_transaction } #allmodal;
}

\functions{
}

\predicates {
  \nonRigid noRaW(LocSet);
  \nonRigid noWaR(LocSet);
  \nonRigid noWaW(LocSet);
  \nonRigid noR(LocSet);
  \nonRigid noW(LocSet);
}

\programVariables {
	int timestamp;
}


\rules { 
 
 applyUpdateOnEvent {
 	\schemaVar \update u;
 	\schemaVar \term LocSet loc;
 	\schemaVar \term EventMarker rw;
 	\schemaVar \term int ts;
 	
 	\find({u}(\event(rw, loc, ts)))
 	
 	\replacewith(\event({u}rw, {u}loc, {u}ts))
 	
 	\heuristics(update_apply_on_update)//userTaclets1)
 };

//-----------------------------------------------------------------------------------------
//                        Event Elimination Rules 
//-----------------------------------------------------------------------------------------
 
 elimEventOnRigidTerm1 {
    \schemaVar \term[rigid] any t;
	\schemaVar \update u;
	
	\find({u}t)
	
	\replacewith(t)
	
	\heuristics(update_elim)//userTaclets1)
 };
 
 elimEventOnRigidTerm2 {
	\schemaVar \term any t, result;
	\schemaVar \update u;	
	
	\find({u}t)
	\varcond(\applyEventOnRigid(u, t, result))
	
	\replacewith(result)
	
	\heuristics(update_elim)//userTaclets2)
 };

 elimEventOnRigidFormula1 {
    \schemaVar \formula[rigid] phi;
	\schemaVar \update u;
	
	\find({u}phi)
	
	\replacewith(phi)
	
	\heuristics(update_elim)//userTaclets1)
 };
 
 elimEventOnRigidFormula2 {
	\schemaVar \formula phi, result;
	\schemaVar \update u;
	
	\find({u}phi)
	\varcond(\applyEventOnRigid(u, phi, result))
	
	\replacewith(result)
	
	\heuristics(update_elim)//userTaclets2)
 };

 elimEventOnElementary {
	\schemaVar \program Variable pv;
	\schemaVar \term any t;
	\schemaVar \term EventMarker rw;
	\schemaVar \term LocSet loc;	
	\schemaVar \term int ts;
	
	\find({\event(rw, loc, ts)}(pv := t))
	
	\replacewith((pv := {\event(rw, loc, ts)}t))
	
	\heuristics(update_apply_on_update)//userTaclets1)
 };
   
 elimEventOnPV {
	\schemaVar \program Variable pv;
	\schemaVar \term EventMarker rw;
	\schemaVar \term LocSet loc;
	\schemaVar \term int ts;
		
	\find({\event(rw, loc, ts)}pv)
	
	\replacewith(pv)
	
	\heuristics(update_elim)//userTaclets1)
 };
    
 elimEventOnSkip {
	\schemaVar \term EventMarker rw;
	\schemaVar \term LocSet loc;
	\schemaVar \term int ts;
	
	\find({\event(rw, loc, ts)}skip)
	
	\replacewith(skip)
	
	\heuristics(update_elim)//userTaclets1)
 };

//-----------------------------------------------------------------------------------------
//                        Update Parallel to Event Rules 
//-----------------------------------------------------------------------------------------


 applyUpdateParallelToEventOnElementary {
	\schemaVar \program Variable pv;
	\schemaVar \term any t;
	\schemaVar \term EventMarker rw;
	\schemaVar \term LocSet loc;	
	\schemaVar \term int ts;
	\schemaVar \update u;

	\find({u || \event(rw, loc, ts)}(pv := t))
	
	\replacewith((pv := {u || \event(rw, loc, ts)}t))
	
	\heuristics(update_apply_on_update)//userTaclets1)
 };
    
 applyUpdateParallelToEventOnPV {
	\schemaVar \program Variable pv;
	\schemaVar \term EventMarker rw;
	\schemaVar \term LocSet loc;
	\schemaVar \term int ts;
	\schemaVar \update u;
		
	\find({u || \event(rw, loc, ts)}pv)
	
	\replacewith({u}pv)
	
	\heuristics(update_apply)//userTaclets1)
 };
    
 applyUpdateParallelToEventOnSkip {
	\schemaVar \term EventMarker rw;
	\schemaVar \term LocSet loc;
	\schemaVar \term int ts;
	\schemaVar \update u;
	
	\find({u || \event(rw, loc, ts)}skip)
	
	\replacewith(skip)
	
	\heuristics(update_elim)//userTaclets1)
 };
//===================NoRaW=====================
 updateParallelToReadEventOnNoRaW{
 	\schemaVar \update u;
	\schemaVar \term LocSet loc1, loc2;
	\schemaVar \term int ts;
	\schemaVar \skolemTerm LocSet tempVar;
 	
 	\find(==> {u || \event(read, loc1, ts)} noRaW(loc2))
 	//To Be Done: WE HAVE TO CHANGE SKOLEM TERM IN A WAY THAT IT CAN BE DEPENDENT ON UPDATES
 	\varcond(/*\new(tempVar, \dependingOn(u)),*/
             \new(tempVar, \dependingOn(loc1)),
             \new(tempVar, \dependingOn(ts)),
             \new(tempVar, \dependingOn(loc2)))        
     \replacewith(==> {u}noRaW(tempVar))
     \add(tempVar = {u || \event(read, loc1, ts)}loc2, 
          intersect(loc1, tempVar) = empty ==> );  
     \replacewith(==> ((({u}noW(tempVar)) & noW(tempVar)) & {u}noRaW(setMinus(tempVar, loc1))))
     \add(tempVar = {u || \event(read, loc1, ts)}loc2, 
          !(intersect(tempVar, loc1) = empty) ==> )
     \heuristics(userTaclets1)
 };
 
 updateParallelToWriteEventOnNoRaW{
 	\schemaVar \update u;
	\schemaVar \term LocSet loc1, loc2;
	\schemaVar \term int ts;
	\schemaVar \skolemTerm LocSet tempVar;
 	
 	\find(==> {u || \event(write, loc1, ts)} noRaW(loc2))
 	//To Be Done: WE HAVE TO CHANGE SKOLEM TERM IN A WAY THAT IT CAN BE DEPENDENT ON UPDATES
 	\varcond(/*\new(tempVar, \dependingOn(u)),*/
             \new(tempVar, \dependingOn(loc1)),
             \new(tempVar, \dependingOn(ts)),
             \new(tempVar, \dependingOn(loc2)))        
     
     \replacewith(==> {u}noRaW(tempVar))
     \add(tempVar = {u || \event(write, loc1, ts)}loc2 ==> )
     
     \heuristics(userTaclets1)
 };
//To Be Done. Not added to the paper yet. 
 updateToNoRaw{
    \schemaVar \update u;
	\schemaVar \term LocSet loc;
 
 	/*\varcond(To Be Written)*/
    \find(==> {u} noRaW(loc))
    
    \replacewith(==> noRaW({u}loc))
 };

//====================NoWaR====================

 updateParallelToWriteEventOnNoWaR{
 	\schemaVar \update u;
	\schemaVar \term LocSet loc1, loc2;
	\schemaVar \term int ts;
	\schemaVar \skolemTerm LocSet tempVar;
 	
 	\find(==> {u || \event(write, loc1, ts)} noWaR(loc2))
 	//To Be Done: WE HAVE TO CHANGE SKOLEM TERM IN A WAY THAT IT CAN BE DEPENDENT ON UPDATES
 	\varcond(/*\new(tempVar, \dependingOn(u)),*/
             \new(tempVar, \dependingOn(loc1)),
             \new(tempVar, \dependingOn(ts)),
             \new(tempVar, \dependingOn(loc2)))        
     \replacewith(==> {u}noWaR(tempVar))
     \add(tempVar = {u || \event(write, loc1, ts)}loc2,
     	intersect(tempVar, loc1) = empty ==> );
     \replacewith(==> ((({u}noR(tempVar)) & noR(tempVar)) & {u}noWaR(setMinus(tempVar, loc1))))
     \add(tempVar = {u || \event(write, loc1, ts)}loc2,
     	!(intersect(tempVar, loc1) = empty) ==> )
     \heuristics(userTaclets1)
 };
 
 updateParallelToReadEventOnNoWaR{
 	\schemaVar \update u;
	\schemaVar \term LocSet loc1, loc2;
	\schemaVar \term int ts;
	\schemaVar \skolemTerm LocSet tempVar;
 	
 	\find(==> {u || \event(read, loc1, ts)} noWaR(loc2))
 	//To Be Done: WE HAVE TO CHANGE SKOLEM TERM IN A WAY THAT IT CAN BE DEPENDENT ON UPDATES
 	\varcond(/*\new(tempVar, \dependingOn(u)),*/
             \new(tempVar, \dependingOn(loc1)),
             \new(tempVar, \dependingOn(ts)),
             \new(tempVar, \dependingOn(loc2)))        
     
     \replacewith(==> {u}noWaR(tempVar))
     \add(tempVar = {u || \event(read, loc1, ts)}loc2 ==>)
     \heuristics(userTaclets1)
 };
 
 updateToNoWaR{
    \schemaVar \update u;
	\schemaVar \term LocSet loc;
 
 	/*\varcond(To Be Written)*/
    \find(==> {u} noWaR(loc))
    
    \replacewith(==> noWaR({u}loc))
 };

//========================noWaW=======================

 updateParallelToWriteEventOnNoWaW{
 	\schemaVar \update u;
	\schemaVar \term LocSet loc1, loc2;
	\schemaVar \term int ts;
	\schemaVar \skolemTerm LocSet tempVar;
 	
 	\find(==> {u || \event(write, loc1, ts)} noWaW(loc2))
 	//To Be Done: WE HAVE TO CHANGE SKOLEM TERM IN A WAY THAT IT CAN BE DEPENDENT ON UPDATES
 	\varcond(/*\new(tempVar, \dependingOn(u)),*/
             \new(tempVar, \dependingOn(loc1)),
             \new(tempVar, \dependingOn(ts)),
             \new(tempVar, \dependingOn(loc2)))        
     \replacewith(==> {u}noWaW(tempVar))
     \add(tempVar = {u || \event(write, loc1, ts)}loc2,
     	intersect(tempVar, loc1) = empty ==> );
     \replacewith(==> ((({u}noW(tempVar)) & noW(tempVar)) & {u}noWaW(setMinus(tempVar, loc1))))
     \add(tempVar = {u || \event(write, loc1, ts)}loc2,
     	!(intersect(tempVar, loc1) = empty) ==> )
     \heuristics(userTaclets1)
 };
 
 updateParallelToReadEventOnNoWaW{
 	\schemaVar \update u;
	\schemaVar \term LocSet loc1, loc2;
	\schemaVar \term int ts;
	\schemaVar \skolemTerm LocSet tempVar;
 	
 	\find(==> {u || \event(read, loc1, ts)} noWaW(loc2))
 	//To Be Done: WE HAVE TO CHANGE SKOLEM TERM IN A WAY THAT IT CAN BE DEPENDENT ON UPDATES
 	\varcond(/*\new(tempVar, \dependingOn(u)),*/
             \new(tempVar, \dependingOn(loc1)),
             \new(tempVar, \dependingOn(ts)),
             \new(tempVar, \dependingOn(loc2)))        
     
     \replacewith(==> {u}noWaW(tempVar))
     \add(tempVar = {u || \event(write, loc1, ts)}loc2 ==> )
     \heuristics(userTaclets1)
 };
 
 updateToNoWaW{
    \schemaVar \update u;
	\schemaVar \term LocSet loc;
 
 	/*\varcond(To Be Written)*/
    \find(==> {u} noWaW(loc))
    
    \replacewith(==> noWaW({u}loc))
 };

 parallelUpdateAssociative {
    \schemaVar \update u1, u2, u3;
    
    \find (u1 || (u2 || u3))
    \replacewith(u1 || u2 || u3)
    
    \heuristics(simplify)
 };
 
//-----------------------------------------------------------------------------------------
//                        Non-Event Update Propagation Rules 
//-----------------------------------------------------------------------------------------
    
 propagateNonEventUpdateONnoRaW{
	\schemaVar \update u;
	\schemaVar \term LocSet loc;
	
	\find({u}noRaW(loc))
	
	\varcond(\noEventUpdate(u)) 
	
	\replacewith(noRaW({u}loc))
	
	\heuristics(userTaclets1)
 };
 
 propagateNonEventUpdateONnoWaR{
	\schemaVar \update u;
	\schemaVar \term LocSet loc;
	
	\find({u}noWaR(loc))
	
	\varcond(\noEventUpdate(u)) 
	
	\replacewith(noWaR({u}loc))
	
	\heuristics(userTaclets1)
 };
 
 propagateNonEventUpdateONnoWaW{
	\schemaVar \update u;
	\schemaVar \term LocSet loc;
	
	\find({u}noWaW(loc))
	
	\varcond(\noEventUpdate(u)) 
	
	\replacewith(noWaW({u}loc))
	
	\heuristics(userTaclets1)
 };
 
 propagateNonEventUpdateONnoR{
	\schemaVar \update u;
	\schemaVar \term LocSet loc;
	
	\find({u}noR(loc))
	
	\varcond(\noEventUpdate(u)) 
	
	\replacewith(noR({u}loc))
	
	\heuristics(userTaclets1)
 };
 
 propagateNonEventUpdateONnoW{
	\schemaVar \update u;
	\schemaVar \term LocSet loc;
	
	\find({u}noW(loc))
	
	\varcond(\noEventUpdate(u)) 
	
	\replacewith(noW({u}loc))
	
	\heuristics(userTaclets1)
 };

//-----------------------------------------------------------------------------------------
//                        Event Shifting Rules 
//-----------------------------------------------------------------------------------------

 shiftEventParallelToUpdate {
 	\schemaVar \term EventMarker rw;
 	\schemaVar \term LocSet loc;
 	\schemaVar \term int ts;
 	\schemaVar \update u;
 	
 	\find(\event(rw, loc, ts) || u)
 	
 	\replacewith(u || \event(rw, loc, ts))
 	
 	\heuristics(userTaclets1)
 };

 shiftEventParallelToElementry {
 	\schemaVar \program Variable pv;
 	\schemaVar \term any t;
 	\schemaVar \term EventMarker rw;
 	\schemaVar \term LocSet loc;
 	\schemaVar \term int ts;
 	
 	\find(\event(rw, loc, ts) || pv:=t)
 	
 	\replacewith(pv:=t || \event(rw, loc, ts))
 	
 	\heuristics(userTaclets1)
 };

 shiftEventWithUpdateAtFirstPlace {
 	\schemaVar \update u;
 	\schemaVar \program Variable pv;
 	\schemaVar \term any t;
 	\schemaVar \term EventMarker rw;
 	\schemaVar \term LocSet loc;
 	\schemaVar \term int ts;
 	
 	\find(u || \event(rw, loc, ts) || pv:=t)
 	
 	\replacewith(u || pv:=t || \event(rw, loc, ts))
 	
 	\heuristics(userTaclets1)
 };

 shiftEventWithUpdateAtLastPlace {
 	\schemaVar \update u;
 	\schemaVar \program Variable pv;
 	\schemaVar \term any t;
 	\schemaVar \term EventMarker rw;
 	\schemaVar \term LocSet loc;
 	\schemaVar \term int ts;
 	
 	\find(\event(rw, loc, ts) || pv:=t || u)
 	
 	\replacewith(pv:=t || \event(rw, loc, ts) || u)
 	
 	\heuristics(userTaclets1)
 };

//-----------------------------------------------------------------------------------------
//                        Simplification Rules 
//-----------------------------------------------------------------------------------------

 simplifyEventUpdateNoRaW {
	\schemaVar \update u1,u2;
	\schemaVar \term[rigid] LocSet loc;

	
	\find({u1||u2}noRaW(loc))
	
	\varcond(\noEventUpdate(u1))
	
	\replacewith({u2}noRaW(loc))
	
	\heuristics(userTaclets1)
        
   };
   
 simplifyEventUpdateNoWaR {
	\schemaVar \update u1,u2;
	\schemaVar \term[rigid] LocSet loc;

	
	\find({u1||u2}noWaR(loc))
	
	\varcond(\noEventUpdate(u1))
	
	\replacewith({u2}noWaR(loc))
	
	\heuristics(userTaclets1)
        
   };
   
   simplifyEventUpdateNoWaW {
	\schemaVar \update u1,u2;
	\schemaVar \term[rigid] LocSet loc;

	
	\find({u1||u2}noWaW(loc))
	
	\varcond(\noEventUpdate(u1))
	
	\replacewith({u2}noWaW(loc))
	
	\heuristics(userTaclets1)
        
   };
 //TO DO: event should propagate inside the predicate. because the formula inside the predicate might also be a dependency predicate  
 writeEventBeforeNoRaW {
 	\schemaVar \term LocSet loc1, loc2;
 	\schemaVar \term int ts;
 	
 	\find({\event(write, loc1, ts)} noRaW(loc2))
 	
 	\replacewith(noRaW(loc2))
 	
 	\heuristics(userTaclets1)
 };
 //TO DO: event should propagate inside the predicate. because the formula inside the predicate might also be a dependency predicate
 readEventBeforeNoRaW {
 	\schemaVar \term LocSet loc1, loc2;
 	\schemaVar \term int ts;
 	
 	\find({\event(read, loc1, ts)} noRaW(loc2))
 	
 	\replacewith(\if(intersect(loc1, loc2)!=empty) \then (noW(intersect(loc1, loc2)))
 	\else( noRaW(loc2)))
 	
 	/*\replacewith(noRaW(loc2))
 	\add(intersect(loc1, loc2) = empty ==> );
 	
 	\replacewith(noW(intersect(loc1, loc2)))
 	\add(!(intersect(loc1, loc2) = empty) ==> )*/
 	
 	\heuristics(userTaclets1)
 };
//TO DO: event should propagate inside the predicate. because the formula inside the predicate might also be a dependency predicate 
 writeEventBeforeNoWaR {
 	\schemaVar \term LocSet loc1, loc2;
 	\schemaVar \term int ts;
 	
 	\find({\event(write, loc1, ts)} noWaR(loc2))
 	
 	\replacewith(\if(intersect(loc1, loc2)!=empty) \then ( noR(intersect(loc1, loc2)))
 	\else ( noWaR(loc2)))
 	
 	\heuristics(userTaclets1)
 };
 //TO DO: event should propagate inside the predicate. because the formula inside the predicate might also be a dependency predicate
 readEventBeforeNoWaR {
 	\schemaVar \term LocSet loc1, loc2;
 	\schemaVar \term int ts;
 	
 	\find({\event(read, loc1, ts)} noWaR(loc2))
 	
 	\replacewith( noWaR(loc2))
 	
 	\heuristics(userTaclets1)
 };
 //TO DO: event should propagate inside the predicate. because the formula inside the predicate might also be a dependency predicate
 writeEventBeforeNoWaW {
 	\schemaVar \term LocSet loc1, loc2;
 	\schemaVar \term int ts;
 	
 	\find({\event(write, loc1, ts)} noWaW(loc2))
 	
 	\replacewith(\if(intersect(loc1, loc2)!=empty) \then ( noW(intersect(loc1, loc2)))
 	\else ( noWaW(loc2)))
 	
 	\heuristics(userTaclets1)
 };
 //TO DO: event should propagate inside the predicate. because the formula inside the predicate might also be a dependency predicate
 readEventBeforeNoWaW {
 	\schemaVar \term LocSet loc1, loc2;
 	\schemaVar \term int ts;
 	
 	\find({\event(read, loc1, ts)} noWaW(loc2))
 	
 	\replacewith( noWaW(loc2))
 	
 	\heuristics(userTaclets1)
 };
 
 writeEventBeforeNoW {
 	\schemaVar \term LocSet loc1, loc2;
 	\schemaVar \term int ts;
 	\schemaVar \skolemTerm LocSet tempVar;
 	
 	\find(==> {\event(write, loc1, ts)} noW(loc2))
 	\varcond(\new(tempVar, \dependingOn(loc1)),
             \new(tempVar, \dependingOn(ts)),
             \new(tempVar, \dependingOn(loc2)))        
     
     \replacewith(==> noW(tempVar))
     \add(tempVar = {\event(write, loc1, ts)}loc2,
     	intersect(loc1, tempVar) = empty ==> );
     
     \replacewith(==> false & noR(setMinus(tempVar, loc1)))
     \add(tempVar = {\event(write, loc1, ts)}loc2,
     	!(intersect(loc1, tempVar) = empty) ==> )
     
 	\heuristics(userTaclets1)
 };
 
 readEventBeforeNoW {
 	\schemaVar \term LocSet loc1, loc2;
 	\schemaVar \term int ts;
 	
 	\find({\event(read, loc1, ts)} noW(loc2))
 	
 	\replacewith( noW(loc2))
 	
// 	\heuristics(userTaclets1)
 };  
 
 writeEventBeforeNoR {
 	\schemaVar \term LocSet loc1, loc2;
 	\schemaVar \term int ts;
 	
 	
 	\find({\event(write, loc1, ts)} noR(loc2))
 	
 	\replacewith(noR(loc2))
 	
 //	\heuristics(userTaclets1)
 };
 
 readEventBeforeNoR {
 	\schemaVar \term LocSet loc1, loc2;
 	\schemaVar \term int ts;
 	\schemaVar \skolemTerm LocSet tempVar;
 	
 	\find(==> {\event(read, loc1, ts)} noR(loc2))
 	\varcond(\new(tempVar, \dependingOn(loc1)),
             \new(tempVar, \dependingOn(ts)),
             \new(tempVar, \dependingOn(loc2)))        
     
     \replacewith(==> noR(tempVar))
     \add(tempVar = {\event(read, loc1, ts)}loc2,
     	intersect(loc1, tempVar) = empty ==> );
     
     \replacewith(==> false & noR(setMinus(tempVar, loc1)))
     \add(tempVar = {\event(read, loc1, ts)}loc2,
     	!(intersect(loc1, tempVar) = empty) ==> )
     
 	\heuristics(userTaclets1)
 };
 
//-----------------------------------------------------------------------------------------
//                        Proof Closing Rules 
//-----------------------------------------------------------------------------------------

 noRaWOnEmptySet{
 	
 	\find(noRaW(empty))
 	\replacewith(true)
 	
 	\heuristics(userTaclets1)
 };

 noWaROnEmptySet{
 	
 	\find(noWaR(empty))
 	\replacewith(true)
 	
 	\heuristics(userTaclets1)
 };
 
 noWaWOnEmptySet{
 	
 	\find(noWaW(empty))
 	\replacewith(true)
 	
 	\heuristics(userTaclets1)
 };
 
 noWOnEmptySet{
 	
 	\find(noW(empty))
 	\replacewith(true)
 	
 	\heuristics(userTaclets1)
 };
 
 noROnEmptySet{
 	
 	\find(noR(empty))
 	\replacewith(true)
 	
 	\heuristics(userTaclets1)
 };
    
}

//-----------------------------------------------------------------------------------------
//                        Event Star Rules 
//-----------------------------------------------------------------------------------------
\rules {
 
 applyUpdateOnEventStar{
  	\schemaVar \term int ts;
  	\schemaVar \update u;
  	
  	\find({u}(\eventStar(ts)))
  	\replacewith(\eventStar({u}ts))
  	
  	\heuristics(userTaclets1)
  	};
  	
  
 elimEventStarOnRigidTerm1 {
    \schemaVar \term[rigid] any t;
	\schemaVar \term int ts;
	
	\find({\eventStar(ts)}t)
	
	\replacewith(t)
	
	\heuristics(userTaclets1)
 };
 
 elimEventStarOnRigidFormula1 {
    \schemaVar \formula[rigid] phi;
	\schemaVar \term int ts;
	
	\find({\eventStar(ts)}phi)
	
	\replacewith(phi)
	
	\heuristics(userTaclets1)
 };

 elimEventStarOnElementary {
	\schemaVar \program Variable pv;
	\schemaVar \term any t;
	\schemaVar \term int ts;
	
	\find({\eventStar(ts)}(pv := t))
	
	\replacewith((pv := t))
	
	\heuristics(userTaclets1)
 };
   
 elimEventStarOnPV {
	\schemaVar \program Variable pv;
	\schemaVar \term int ts;
		
	\find({\eventStar(ts)}pv)
	
	\replacewith(pv)
	
	\heuristics(userTaclets1)
 };
    
 elimEventStarOnSkip {
	\schemaVar \term int ts;
	
	\find({\eventStar(ts)}skip)
	
	\replacewith(skip)
	
	\heuristics(userTaclets1)
 }; 	
  	
 applyUpdateParallelToEventStarOnElementary {
	\schemaVar \program Variable pv;
	\schemaVar \term any t;
	\schemaVar \term int ts;
	\schemaVar \update u;
	
	\find({u || \eventStar(ts)}(pv := t))
	
	\replacewith({u}(pv := t))
	
	\heuristics(userTaclets1)
 };
    
 applyUpdateParallelToEventStarOnPV {
	\schemaVar \program Variable pv;
	\schemaVar \term int ts;
	\schemaVar \update u;
		
	\find({u || \eventStar(ts)}pv)
	
	\replacewith({u}pv)
	
	\heuristics(userTaclets1)
 };
    
 applyUpdateParallelToEventStarOnSkip {
	\schemaVar \term int ts;
	\schemaVar \update u;
	
	\find({u || \eventStar(ts)}skip)
	
	\replacewith({u}skip)
	
	\heuristics(userTaclets1)
 };
 
  shiftEventStarParallelToUpdate {
 	\schemaVar \term int ts;
 	\schemaVar \update u;
 	
 	\find(\eventStar(ts) || u)
 	
 	\replacewith(u || \eventStar(ts))
 	
 	\heuristics(userTaclets1)
 };

/* shiftEventParallelToElementry {
 	\schemaVar \program Variable pv;
 	\schemaVar \term any t;
 	\schemaVar \term EventMarker rw;
 	\schemaVar \term LocSet loc;
 	\schemaVar \term int ts;
 	
 	\find(\event(rw, loc, ts) || pv:=t)
 	
 	\replacewith(pv:=t || \event(rw, loc, ts))
 	
 	\heuristics(userTaclets1)
 };

 shiftEventWithUpdateAtFirstPlace {
 	\schemaVar \update u;
 	\schemaVar \program Variable pv;
 	\schemaVar \term any t;
 	\schemaVar \term EventMarker rw;
 	\schemaVar \term LocSet loc;
 	\schemaVar \term int ts;
 	
 	\find(u || \event(rw, loc, ts) || pv:=t)
 	
 	\replacewith(u || pv:=t || \event(rw, loc, ts))
 	
 	\heuristics(userTaclets1)
 };

 shiftEventWithUpdateAtLastPlace {
 	\schemaVar \update u;
 	\schemaVar \program Variable pv;
 	\schemaVar \term any t;
 	\schemaVar \term EventMarker rw;
 	\schemaVar \term LocSet loc;
 	\schemaVar \term int ts;
 	
 	\find(\event(rw, loc, ts) || pv:=t || u)
 	
 	\replacewith(pv:=t || \event(rw, loc, ts) || u)
 	
 	\heuristics(userTaclets1)
 };*/
 

}

//-----------------------------------------------------------------------------------------
//                        Array Assignment Rules 
//-----------------------------------------------------------------------------------------

\rules(programRules:Java, runtimeExceptions:ban, dependencies:on) {
  assignment_read_length { 
		\schemaVar \program Variable #v, #v0;
		\schemaVar \program ArrayLength #length;
		\schemaVar \formula post;
  		
		\find (==> \modality{#allmodal}{.. #v0 = #v.#length; ...}\endmodality(post))
		\varcond(\not\isThisReference(#v))
		"Normal Execution (#v != null)":
		      \replacewith(==> {#v0 := length(#v)}
		      				//To Be Fixed. We need the LocSet here.
		      				/*{\event(read,singleton(length(#v)),timestamp)}
		                    {timestamp:=timestamp + 1}
		                    {\event(write,singleton(#v0),timestamp)}
		                    {timestamp:=timestamp + 1}*/
		      \modality{#allmodal}{.. ...}\endmodality(post))
		      //\add (==>(#v=null))
		      ;
		"Null Reference (#v = null)":
		      \replacewith(==> false)
		      \add (#v=null ==>)	
		      \heuristics(simplify_prog, simplify_prog_subset)
  };  

  assignment_array2{
		\schemaVar \program Variable #v, #v0;
		\schemaVar \program SimpleExpression #se;
		\schemaVar \formula post;
				
		\find (==> \modality{#allmodal}{.. #v = #v0[#se]; ...}\endmodality(post))
                  \varcond(\hasSort(\elemSort(#v0), G))
		"Normal Execution (#v0 != null)":
		   \replacewith(==> {#v:=G::select(heap, #v0, arr(#se))}
		   					{\event(read,singleton(#v0,arr(#se)),timestamp)}
		                    {timestamp:=timestamp + 1}
		   \modality{#allmodal}{.. ...}\endmodality(post))
		   //\add (==>(#v0=null) | leq(length(#v0), #se) | lt(#se,0))
        	;
		"Null Reference (#v0 = null)":
		   \replacewith(==> false)
	           \add (#v0=null ==>);	
		"Index Out of Bounds (#v0 != null, but #se Out of Bounds!)":
	  	   \replacewith(==> false)
		   \add (!(#v0=null) & (leq(length(#v0), #se) | lt(#se,0)) ==>)
    	  
    	   \heuristics(simplify_prog, simplify_prog_subset)
  };
  
}

//-----------------------------------------------------------------------------------------
//                        Some Common Assignment rules 
//-----------------------------------------------------------------------------------------

\rules(programRules:Java, dependencies:on) {
  assignment  { 
     \schemaVar \program Variable #loc;
     \schemaVar \program SimpleExpression #se;
     \schemaVar \formula post;
     
     \find (\modality{#allmodal}{.. #loc = #se; ...}\endmodality(post))
     \replacewith ({#loc:= #se}{timestamp:=timestamp +1}\modality{#allmodal}{.. ...}\endmodality(post)) 
	
	 \heuristics(simplify_prog, simplify_prog_subset)
  };

}


\rules(programRules:Java, runtimeExceptions:ban, dependencies:on) {
  assignment_read_attribute { 
        \schemaVar \program Variable #v0, #v, #a;
        \schemaVar \formula post;
	
		\find (==> \modality{#allmodal}{.. #v0 = #v.#a; ...}\endmodality(post))
 	        \varcond(\not \static(#a), \not \isArrayLength(#a), \hasSort(#a, G), \not\isThisReference(#v))
		"Normal Execution (#v != null)":
		      \replacewith(==> {#v0 := G::select(heap, #v, #memberPVToField(#a))}
		                       {\event(read,singleton(#v,#memberPVToField(#a)),timestamp)}
		                       {timestamp:=timestamp + 1}
		                                      \modality{#allmodal}{.. ...}\endmodality(post))
		      //\add (==>(#v=null))
		      ;
		"Null Reference (#v = null)":
		      \replacewith(==> false)
		      \add (#v=null ==>)	
		      \heuristics(simplify_prog, simplify_prog_subset)
  };

 assignment_read_attribute_this { 
 		\schemaVar \program Variable #v0, #v, #a;
        \schemaVar \formula post;
 	
		\find (==> \modality{#allmodal}{.. #v0 = #v.#a; ...}\endmodality(post))
 	        \varcond(\not \static(#a), \not \isArrayLength(#a), \hasSort(#a, G), \isThisReference(#v))
		"Normal Execution":
		      \replacewith(==> {#v0 := G::select(heap, #v, #memberPVToField(#a))}
		      				   {\event(read,singleton(#v,#memberPVToField(#a)),timestamp)}
		                       {timestamp:=timestamp + 1}
		      \modality{#allmodal}{.. ...}\endmodality(post))
                
		      \heuristics(simplify_prog, simplify_prog_subset)
  };
  
 /* assignment_read_length { 
  		\schemaVar \program Variable #v0, #v;
        \schemaVar \formula post;
  
		\find (==> \modality{#allmodal}{.. #v0 = #v.#length; ...}\endmodality(post))
		\varcond(\not\isThisReference(#v))
		"Normal Execution (#v != null)":
		      \replacewith(==> {#v0 := length(#v)}
		      
		      \modality{#allmodal}{.. ...}\endmodality(post))
		      //\add (==>(#v=null))
		      ;
		"Null Reference (#v = null)":
		      \replacewith(==> false)
		      \add (#v=null ==>)	
		      \heuristics(simplify_prog, simplify_prog_subset)
  };*/  
}

\rules(programRules:Java, runtimeExceptions:ban, dependencies:on) {

  assignment_write_attribute { 
  
  		\schemaVar \program Variable #v, #a;
  		\schemaVar \program SimpleExpression #se;
		\schemaVar \formula post;
		
		\find (==> \modality{#allmodal}{.. #v.#a=#se; ...}\endmodality(post))
	        \varcond(\not \static(#a), \not\isThisReference(#v))
		"Normal Execution (#v != null)":
		      \replacewith(==> {heap:=store(heap,#v,#memberPVToField(#a),#se)}
		      				   {\event(write,singleton(#v,#memberPVToField(#a)),timestamp)}
		                       {timestamp:=timestamp + 1}
		      					\modality{#allmodal}{.. ...}\endmodality(post))
		      
		      //\add (==>(#v=null))
		      ;
                
		"Null Reference (#v = null)":
		      \replacewith(==> false)
		      \add (#v=null ==>)	 
		      \heuristics(simplify_prog, simplify_prog_subset)
		      \displayname "assignment"
  };  

assignment_write_attribute_this { 
		
		\schemaVar \program Variable #v, #a;
  		\schemaVar \program SimpleExpression #se;
		\schemaVar \formula post;

		\find (==> \modality{#allmodal}{.. #v.#a=#se; ...}\endmodality(post))
	        \varcond(\not \static(#a), \isThisReference(#v))
		"Normal Execution":
		      \replacewith(==> {heap:=store(heap,#v,#memberPVToField(#a),#se)}
		      				   {\event(write,singleton(#v,#memberPVToField(#a)),timestamp)}
		                       {timestamp:=timestamp + 1}
		  				    \modality{#allmodal}{.. ...}\endmodality(post))
                
		      \heuristics(simplify_prog, simplify_prog_subset)
		      \displayname "assignmentThis"
  };  
   
}
