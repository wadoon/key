\sorts {
	Set;
}

\predicates {
   element(any, Set);
   is_subset(Set, Set);
   finite(Set);


}

\functions {
	// empty Set
	\unique Set SetEmpty;
	// Singleton Set
	\unique Set single(any);

	// union of two Sets
	Set SetUnion(Set, Set);

	// intersection of two Sets
	Set SetIntersection(Set, Set);

	// difference of two Sets
	Set SetDifference(Set, Set);

	// complement of a Set
	//Set compl(Set);

	// cardinality
	int cardinality(Set);
}



\axioms {
	// axioms
	
	finite_terms{
		\schemaVar \variable Set set;
		\schemaVar \variable Set a;
		\schemaVar \variable Set b;
		\schemaVar \variable any el;
		
		\add(
			\forall set;
				(
					finite(set) <->
					(
						set = SetEmpty |
						(\exists el; set = single(el)) |
						(\exists a; \exists b; 
							(
								(finite(a) & finite(b) & set = SetUnion(a, b)) |
								((finite(a) | finite(b)) & set = SetIntersection(a, b)) |
								(finite(a) & set = SetDifference(a, b))
							)
						)
					)
				)		
		==> )
	};
	
	empty{
		\schemaVar \variable any el;
		\add(!\exists el; element(el, SetEmpty) ==> )
	};

	cardin_not_negative{
		\schemaVar \variable Set set;
		
		\add(\forall set; cardinality(set) >= 0 ==>)
	};

	cardin_empty{
		\find (cardinality(SetEmpty))
		\replacewith(0)
		\heuristics(concrete)
	};

	cardin_single{
		\schemaVar \term any el;

		\find (cardinality(single(el)))
		\replacewith (1)
		\heuristics(concrete)
	};
	
	cardin_disjunctive_union{
		\schemaVar \variable Set set, set1;
	
		\add(\forall set; \forall set1; (SetIntersection(set, set1) = SetEmpty -> cardinality(SetUnion(set, set1)) = cardinality(set) + cardinality(set1)) ==> )
	};
	
	cardin_subset{
		\schemaVar \variable Set set, set1;
		
		\add(\forall set; \forall set1; (is_subset(set, set1) -> cardinality(set) <= cardinality(set1)) ==> )	
	};

	element_of_single{
		\schemaVar \term any el;
		\schemaVar \term any el2;

		\find (element(el, single(el2)))
		\replacewith (el = el2)
		\heuristics (simplify)
	};

	union{
		\schemaVar \term Set set;
		\schemaVar \term Set set1;
		\schemaVar \term any e;

        \find (element(e, SetUnion(set, set1))) 
        \replacewith ((element(e, set) | element(e, set1)))
        \heuristics(simplify_enlarging)
    };


	intersect{
		\schemaVar \term Set set, set1;
		\schemaVar \term any e;

        \find (element(e, SetIntersection(set, set1)))
	    \replacewith (element(e, set) & element(e, set1))
        \heuristics(simplify_enlarging)
	};


	difference{
		\schemaVar \term Set set, set1;
		\schemaVar \term any e;

		\find (element(e, SetDifference(set, set1)))
		\replacewith (element(e, set) & ! element(e, set1))
        \heuristics(simplify_enlarging)
	};

	setEquality{
		\schemaVar \variable Set set, set1;
		\schemaVar \variable any el;

		\add (\forall set; \forall set1; (set = set1 <-> \forall el; (element(el, set) <-> element(el, set1))) ==>)
	};

	setCombinations{
		\schemaVar \variable Set set, set1;

		\add (\forall set; \forall set1;
								(set = SetUnion(SetDifference(set, set1), SetIntersection(set, set1)) & 
								SetUnion(set, set1) = SetUnion(SetUnion(SetDifference(set, set1), SetIntersection(set, set1)), SetDifference(set1, set)))
			 ==>)
	};



/*
	complement{
		\schemaVar \term Set set;
		\schemaVar \term any e;

		\find (element(e, compl(set)))
		\replacewith (!element(e, set))
	};
*/

	subset{
		\schemaVar \term Set set, set1;
		\schemaVar \variable any el;

		\find (is_subset(set, set1))
		\varcond(\notFreeIn(el,set), \notFreeIn(el,set1))
		\replacewith (\forall el; (element(el, set) -> element(el, set1)))
	};

	subset_empty{
		\schemaVar \variable Set set;

		\add(\forall set; (is_subset(set, SetEmpty) -> set = SetEmpty) ==> )
	};


}


	// lemmas
\rules{	
	\lemma
	union_commutative{
		\schemaVar \term Set commEqLeft, commEqRight;

		\find (SetUnion(commEqLeft, commEqRight))
		\replacewith(SetUnion(commEqRight, commEqLeft))
		\heuristics(order_terms)
	};

	\lemma
	intersect_commutative{
		\schemaVar \term Set commEqLeft, commEqRight;

		\find (SetIntersection(commEqLeft, commEqRight))
		\replacewith(SetIntersection(commEqRight, commEqLeft))
		\heuristics(order_terms)
	};

	\lemma
	element_of_empty{
		\schemaVar \term any e;

		\find (element(e, SetEmpty))
		\replacewith (false)
		\heuristics(concrete)
	};

	\lemma
	empty_right{
		\schemaVar \term Set set;
		\schemaVar \variable any el;


		\find( ==> set = SetEmpty)
		\varcond(\notFreeIn(el, set))
		\add(\exists el; element(el, set) ==> )

	};

	\lemma
	empty_left{
		\schemaVar \term Set set;
		\schemaVar \variable any el;


		\find(set = SetEmpty ==> )
		\varcond(\notFreeIn(el, set))
		\add( ==> \exists el; element(el, set))

	};

	\lemma
	union_simplify{
		\schemaVar \term Set set, set1;
		\schemaVar \term any el;

		\assumes (==> element(el, set1))
		\find (element(el, SetUnion(set, set1)))
		\sameUpdateLevel
		\replacewith (element(el, set))
		\heuristics(simplify)
	};

	\lemma
	intersect_simplify{
		\schemaVar \term Set set, set1;
		\schemaVar \term any el;

		\assumes (element(el, set1) ==>)
		\find (element(el, SetIntersection(set, set1)))
		\sameUpdateLevel
		\replacewith (element(el, set))
		\heuristics(simplify)
	};

	\lemma
	intersect_disjunctive1{
		\schemaVar \term Set set, set1;

		\find (SetIntersection(SetDifference(set, set1), SetIntersection(set, set1)))
		\replacewith (SetEmpty)
		\heuristics(concrete)
	};

	\lemma
	intersect_disjunctive2{
		\schemaVar \term Set set, set1;

		\find (SetIntersection(SetDifference(set, set1), SetDifference(set1, set)))
		\replacewith (SetEmpty)
		\heuristics(concrete)
	};

	\lemma
	intersect_disjunctive3{
		\schemaVar \term Set set, set1;

		\find (SetIntersection(SetDifference(set, set1), set1))
		\replacewith (SetEmpty)
		\heuristics(concrete)
	};

	\lemma
	cardin_union{
		\schemaVar \term Set set, set1;

		\find(cardinality(SetUnion(set, set1)))
		\sameUpdateLevel
		\add(cardinality(SetUnion(set, set1)) <= cardinality(set) + cardinality(set1) ==> )
		\heuristics(userTaclets1)
	};

	\lemma
	cardin_intersect{
		\schemaVar \term Set set, set1;

		\find(cardinality(SetIntersection(set, set1)))
		\sameUpdateLevel
		\add(cardinality(SetIntersection(set, set1)) <= cardinality(set) , cardinality(SetIntersection(set, set1)) <= cardinality(set1) ==> )
		\heuristics(userTaclets1)
		
	};

	\lemma
	cardin_difference{
		\schemaVar \term Set set, set1;

		\find (cardinality(SetDifference(set, set1)))
		\sameUpdateLevel
		\add (cardinality(SetDifference(set, set1)) <= cardinality(set) ==> )
		\heuristics(userTaclets1)
	};
}