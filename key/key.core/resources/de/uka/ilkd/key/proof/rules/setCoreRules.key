\sorts {
	Set;

	//SetList;
}

\predicates {
   element(any, Set);
   is_subset(Set, Set);
   is_disjoint(Set, Set);
   finite(Set);

   vennProperties(Set, Set);
}

\functions {
// --- SET ---

	// empty Set
	\unique Set SetEmpty;
	
	// Singleton Set
	\unique Set single(any);

	// union of two Sets
	Set SetUnion(Set, Set);

	// intersection of two Sets
	Set SetIntersection(Set, Set);

	// difference of two Sets
	Set SetDifference(Set, Set);

	// complement of a Set
	//Set compl(Set);

	// cardinality
	int cardinality(Set);

// --- SET LIST ---
/*
	// empty set list
	SetList SetListEmpty;

	// set list
	SetList setList(Set, SetList);
//*/

}



\axioms {
	// axioms
	

	//--- SET ---
	/*
	finite_terms{
		\schemaVar \variable Set set;
		\schemaVar \variable Set a;
		\schemaVar \variable Set b;
		\schemaVar \variable any el;
		
		\add(
			\forall set;
				(
					finite(set) <->
					(
						set = SetEmpty |
						(\exists el; set = single(el)) |
						(\exists a; \exists b; 
							(
								(finite(a) & finite(b) & set = SetUnion(a, b)) |
								((finite(a) | finite(b)) & set = SetIntersection(a, b)) |
								(finite(a) & set = SetDifference(a, b))
							)
						)
					)
				)		
		==> )
	};
	//*/
	
	SetInduction{
		\schemaVar \variable any e;
		\schemaVar \variable Set s;
		\schemaVar \formula ih;
		
		
		\varcond (\notFreeIn(e, ih))

		"baseCase: Empty": \add (==> {\subst s; SetEmpty} ih);

		//Not necessary
		//"baseCase: Single": \add (==> \forall e; {\subst s; single(e)} ih); 


		"Ind. Step": \add ( ==> 
								\forall s; (
									ih 
									-> 
									\forall e; {\subst s; SetUnion(s, single(e))} ih
								)
						);

		"Use proven theorem": \add ( \forall s; ih ==> )
	};
	
	empty{
		\schemaVar \variable any el;
		\schemaVar \variable Set set;

		\add(\forall set; (set = SetEmpty <-> !\exists el; element(el, set)) ==> )
	};

	cardin_not_negative{//maybe has to be restricted to finite
		\schemaVar \variable Set set;
		
		\add(\forall set; cardinality(set) >= 0 ==>)
	};
	
	/*
	cardin_finite{ // n has to be restricted to constants
		\schemaVar \variable Set set;
		\schemaVar \variable int n;
		
		
		\add (\forall set; (finite(set) <-> \exists n; cardinality(set) = n) ==>)
	};
	//*/

	cardin_of_empty{
		\schemaVar \variable Set set;
		
		\add(\forall set; (cardinality(set) = 0 <-> set = SetEmpty) ==>)
	};

	cardin_of_single{
		\schemaVar \variable Set set;
		\schemaVar \variable any el;
		
		\add (\forall set; (cardinality(set) = 1 <-> \exists el; set = single(el)) ==>)
	};

/*
	cardin_step{
		\schemaVar \variable Set set, set1;
		\schemaVar \variable any el;
		\schemaVar \variable int n;
		
		\add (
			\forall set; \forall n; \forall el;
				set = SetEmpty | 
				\exists set1; (! element(el, set1) -> (set = SetUnion(set1, single(el)) & (cardinality(set1) = n <-> cardinality(SetUnion(set1, single(el))) = n + 1))) 
		==>)
	};
*/	

	
	build_of_union{
		\schemaVar \variable Set set, set1;
		\schemaVar \variable any el;
		
		\add (\forall set; (set = SetEmpty | \exists set1; \exists el; set = SetUnion(single(el), set1)) ==>)
	};
	
	cardin_union_axiom{
		\schemaVar \variable Set set, set1;
	
		\add(\forall set; \forall set1; cardinality(SetUnion(set, set1)) = cardinality(set) + cardinality(set1) - cardinality(SetIntersection(set, set1)) ==> )
	};
	
	
	
	

	element_of_single{
		\schemaVar \term any el;
		\schemaVar \term any el2;

		\find (element(el, single(el2)))
		\replacewith (el = el2)
		\heuristics (simplify)
	};

	union{
		\schemaVar \term Set set;
		\schemaVar \term Set set1;
		\schemaVar \term any e;

        \find (element(e, SetUnion(set, set1))) 
        \replacewith ((element(e, set) | element(e, set1)))
        \heuristics(simplify_enlarging)
    };


	intersect{
		\schemaVar \term Set set, set1;
		\schemaVar \term any e;

        \find (element(e, SetIntersection(set, set1)))
	    \replacewith (element(e, set) & element(e, set1))
        \heuristics(simplify_enlarging)
	};


	difference{
		\schemaVar \term Set set, set1;
		\schemaVar \term any e;

		\find (element(e, SetDifference(set, set1)))
		\replacewith (element(e, set) & ! element(e, set1))
        \heuristics(simplify_enlarging)
	};

	setEquality{
		\schemaVar \variable Set set, set1;
		\schemaVar \variable any el;

		\add (\forall set; \forall set1; (set = set1 <-> \forall el; (element(el, set) <-> element(el, set1))) ==>)
	};

	setCombinations{ //Venn Diagram for two sets
		\schemaVar \variable Set set, set1;

		\add (\forall set; \forall set1;
								vennProperties(set, set1)
			 ==>)
	};
//*
	vennPropertiesDef{
		\schemaVar \variable Set set, set1;

		\add (\forall set; \forall set1;
								(
									vennProperties(set, set1)
									<->
									(set = SetUnion(
										SetDifference(set, set1),
										SetIntersection(set, set1)) & 
									SetUnion(set, set1) = SetUnion(SetUnion(
										SetDifference(set, set1),
										SetIntersection(set, set1)),
										SetDifference(set1, set)) &
									set1 = SetUnion(
										SetIntersection(set, set1),
										SetDifference(set1, set))
									)
								)
			 ==> )
	};
//*/


/*
	complement{
		\schemaVar \term Set set;
		\schemaVar \term any e;

		\find (element(e, compl(set)))
		\replacewith (!element(e, set))
	};
*/

	//subset

	subsetDef{
		\schemaVar \variable Set set, set1;
		\schemaVar \variable any el;

		\add(
			\forall set; \forall set1; (
				is_subset(set, set1)
				<->
				\forall el; (element(el, set) -> element(el, set1))
			)
		==> )
	};
	
	


	//disjoint

	is_disjoint{
		\schemaVar \variable Set set, set1;
		\schemaVar \variable any el;

		\add( 
			\forall set; \forall set1; 
				(is_disjoint(set, set1) 
				<->
				!\exists el; (element(el, set) & element(el, set1)))
		==> )
	};

}

	// lemmas
\rules{	

/*
	//make \lemma // not necessary
	cardin_subset{
		\schemaVar \variable Set set, set1;
		
		\add(\forall set; \forall set1; (is_subset(set, set1) -> cardinality(set) <= cardinality(set1)) ==> )	
	};
//*/

	\lemma
	cardin_empty{
		\find (cardinality(SetEmpty))
		\replacewith(0)
		\heuristics(concrete)
	};
	
	\lemma
	cardin_single{
		\schemaVar \term any el;

		\find (cardinality(single(el)))
		\replacewith (1)
		\heuristics(concrete)
	};
	
	\lemma
	set_equal{
		\schemaVar \term Set set, set1;
		\schemaVar \variable any el;
		
		\find (set = set1)
		\varcond (\notFreeIn(el,set), \notFreeIn(el,set1))
		\replacewith (\forall el; (element(el, set) <-> element(el, set1)))
		//should be done when neither set nor set1 is a variable symbol.
		
	};

	\lemma //necessary?
	subset{
		\schemaVar \term Set set, set1;
		\schemaVar \variable any el;

		\find (is_subset(set, set1))
		\varcond (\notFreeIn(el,set), \notFreeIn(el,set1))
		\replacewith (\forall el; (element(el, set) -> element(el, set1)))

		//TODO heuristics
	};

	\lemma //simplification
	subset_empty{
		\schemaVar \term Set set;

		\find( is_subset(set, SetEmpty) )
		\replacewith( set = SetEmpty )

		\heuristics(simplify)
	};
	
	\lemma //simplification
	subset_to_intersect{
		\schemaVar \term Set set, set1;
		
		\find (is_subset(set, set1))
		\replacewith (set = SetIntersection(set, set1))
		
		\heuristics(simplify)
	};
	
	
	\lemma //simplification
	element_to_subset{
		\schemaVar \term Set set;
		\schemaVar \term any x;
		
		\find (element(x, set))
		\replacewith (is_subset(single(x), set))
		
		//\heuristics(simplify) //probably not beneficial
	};
	
	
	\lemma
	cardin_disjunctive_union{
		\schemaVar \variable Set set, set1;
	
		\add(\forall set; \forall set1;
									(SetIntersection(set, set1) = SetEmpty 
									->
									 cardinality(SetUnion(set, set1)) = cardinality(set) + cardinality(set1)) ==> )
	};

	\lemma
	union_of_empty{
		\schemaVar \term Set set;
		
		\find (SetUnion(set, SetEmpty))
		\replacewith (set)
		
		\heuristics (simplify)
	};
	
	\lemma
	union_of_empty2{
		\schemaVar \term Set set;
		
		\find (SetUnion(SetEmpty, set))
		\replacewith (set)
		
		\heuristics (simplify)
	};
	
	\lemma
	intersect_of_empty{
		\schemaVar \term Set set;
		
		\find (SetIntersection(set, SetEmpty))
		\replacewith (SetEmpty)
		
		\heuristics (concrete)
	};
	
	\lemma
	intersect_of_empty2{
		\schemaVar \term Set set;
		
		\find (SetIntersection(SetEmpty, set))
		\replacewith (SetEmpty)
		
		\heuristics (concrete)
	};

	//Commutativity, Associativity and Distributativity for union, intersect and disjoint

	\lemma //for normalform
	union_commutative{
		\schemaVar \term Set commEqLeft, commEqRight;

		\find (SetUnion(commEqLeft, commEqRight))
		\replacewith(SetUnion(commEqRight, commEqLeft))
		\heuristics(order_terms)
	};

	\lemma //for normalform
	intersect_commutative{
		\schemaVar \term Set commEqLeft, commEqRight;

		\find (SetIntersection(commEqLeft, commEqRight))
		\replacewith(SetIntersection(commEqRight, commEqLeft))
		\heuristics(order_terms)
	};

	\lemma //for normalform
	disjoint_commutative{
		\schemaVar \term Set commEqLeft, commEqRight;

		\find (is_disjoint(commEqLeft, commEqRight))
		\replacewith(is_disjoint(commEqRight, commEqLeft))
		\heuristics(order_terms)
	};
	
	\lemma //for normalform
	union_commutative2{
		\schemaVar \term Set set, set1, set2;
		
		\find (SetUnion(SetUnion(set, set1), set2))
		\replacewith (SetUnion(SetUnion(set, set2), set1))
	};
	
	\lemma //for normalform
	intersect_commutative2{
		\schemaVar \term Set set, set1, set2;
		
		\find (SetIntersection(SetIntersection(set, set1), set2))
		\replacewith (SetIntersection(SetIntersection(set, set2), set1))
	};
	
	\lemma //for normalform
	union_assoc{
		\schemaVar \term Set set, set1, set2;
		
		\find (SetUnion(set, SetUnion(set1, set2)))
		\replacewith (SetUnion(SetUnion(set, set1), set2))
		
		\heuristics (setUnionAssoc)
	};
	
	\lemma //for normalform
	union_assoc2{
		\schemaVar \term Set set, set1, set2, set3;
		
		\find (SetUnion(SetUnion(set, set1), SetUnion(set2, set3)))
		\replacewith (SetUnion(SetUnion(SetUnion(set, set1), set2), set3))
	};
	
	\lemma //for normalform
	intersect_assoc{
		\schemaVar \term Set set, set1, set2;
		
		\find (SetIntersection(set, SetIntersection(set1, set2)))
		\replacewith (SetIntersection(SetIntersection(set, set1), set2))
	};
	
	\lemma //for normalform
	intersect_assoc2{
		\schemaVar \term Set set, set1, set2, set3;
		
		\find (SetIntersection(SetIntersection(set, set1), SetIntersection(set2, set3)))
		\replacewith (SetIntersection(SetIntersection(SetIntersection(set, set1), set2), set3))
	};
	
	\lemma //for normalform
	union_distrib{//preferred
		\schemaVar \term Set set, set1, set2;
		
		\find (SetUnion(set, SetIntersection(set1, set2)))
		\replacewith (SetIntersection(SetUnion(set, set1), SetUnion(set,set2)))
	};
	
	\lemma //not used
	intersect_distrib{ //should not be automatic
		\schemaVar \term Set set, set1, set2;
		
		\find (SetIntersection(set, SetUnion(set1, set2)))
		\replacewith (SetUnion(SetIntersection(set, set1), SetIntersection(set,set2)))
	};


	//Simplification

	\lemma //simplification
	element_of_empty{
		\schemaVar \term any e;

		\find (element(e, SetEmpty))
		\replacewith (false)
		\heuristics(concrete)
	};

	\lemma
	empty_right{
		\schemaVar \term Set set;
		\schemaVar \variable any el;


		\find( ==> set = SetEmpty)
		\varcond(\notFreeIn(el, set))
		\add(\exists el; element(el, set) ==> )

	};

	\lemma //needed?
	empty_left{
		\schemaVar \term Set set;
		\schemaVar \variable any el;


		\find(set = SetEmpty ==> )
		\varcond(\notFreeIn(el, set))
		\add( ==> \exists el; element(el, set))

	};

	\lemma //simplification
	union_simplify{
		\schemaVar \term Set set, set1;
		\schemaVar \term any el;

		\assumes (==> element(el, set1))
		\find (element(el, SetUnion(set, set1)))
		\sameUpdateLevel
		\replacewith (element(el, set))
		\heuristics(simplify)
	};

	\lemma //simplification
	intersect_simplify{
		\schemaVar \term Set set, set1;
		\schemaVar \term any el;

		\assumes (element(el, set1) ==>)
		\find (element(el, SetIntersection(set, set1)))
		\sameUpdateLevel
		\replacewith (element(el, set))
		\heuristics(simplify)
	};

	\lemma //simplification
	intersection_disjoint{
		\schemaVar \term Set set, set1;


		\assumes ( is_disjoint(set, set1) ==> )
		\find ( SetIntersection(set, set1) )
		\sameUpdateLevel
		\replacewith( SetEmpty )

	};

	\lemma //simplification
	intersect_disjoint1{
		\schemaVar \term Set set, set1;

		\find (SetIntersection(SetDifference(set, set1), SetIntersection(set, set1)))
		\replacewith (SetEmpty)
		\heuristics(concrete)
	};

	\lemma //simplification
	intersect_disjoint2{
		\schemaVar \term Set set, set1;

		\find (SetIntersection(SetDifference(set, set1), SetDifference(set1, set)))
		\replacewith (SetEmpty)
		\heuristics(concrete)
	};

	\lemma //simplification
	intersect_disjoint3{
		\schemaVar \term Set set, set1;

		\find (SetIntersection(SetDifference(set, set1), set1))
		\replacewith (SetEmpty)
		\heuristics(concrete)
	};


	//make \lemma //simplification
	intersect_disjointSingle1{
		\schemaVar \term Set set;
		\schemaVar \term any e;

		\assumes( ==> element(e, set))
		\find (SetIntersection(single(e), set))
		\sameUpdateLevel
		\replacewith (SetEmpty)
		\heuristics(concrete)
	};

	//make \lemma //simplification
	intersect_disjointSingle2{
		\schemaVar \term Set set;
		\schemaVar \term any e;

		\assumes( ==> element(e, set))
		\find (SetIntersection(set, single(e)))
		\sameUpdateLevel
		\replacewith (SetEmpty)
		\heuristics(concrete)
	};

	//make \lemma //simplification
	intersect_disjointSingles1{
		\schemaVar \term any e, e1;

		\assumes( ==> e = e1)
		\find (SetIntersection(single(e), single(e1)))
		\sameUpdateLevel
		\replacewith (SetEmpty)
		\heuristics(concrete)
	};

	//make \lemma //simplification
	intersect_disjointSingles2{
		\schemaVar \term any e, e1;

		\assumes( ==> e = e1)
		\find (SetIntersection(single(e1), single(e)))
		\sameUpdateLevel
		\replacewith (SetEmpty)
		\heuristics(concrete)
	};

	//make \lemma //simplification
	intersect_simplifySingle1{
		\schemaVar \term Set set;
		\schemaVar \term any e;

		\assumes( element(e, set) ==> )
		\find (SetIntersection(single(e), set))
		\sameUpdateLevel
		\replacewith (single(e))
		\heuristics(concrete)
	};

	//make \lemma //simplification
	intersect_simplifySingle2{
		\schemaVar \term Set set;
		\schemaVar \term any e;

		\assumes( element(e, set) ==> )
		\find (SetIntersection(set, single(e)))
		\sameUpdateLevel
		\replacewith (single(e))
		\heuristics(concrete)
	};

	//make \lemma //simplification
	intersect_simplifySingles1{
		\schemaVar \term any e, e1;

		\assumes( e = e1 ==> )
		\find (SetIntersection(single(e), single(e1)))
		\sameUpdateLevel
		\replacewith (single(e))
		\heuristics(concrete)
	};

	//make \lemma //simplification
	intersect_simplifySingles2{
		\schemaVar \term any e, e1;

		\assumes( e = e1 ==> )
		\find (SetIntersection(single(e1), single(e)))
		\sameUpdateLevel
		\replacewith (single(e))
		\heuristics(concrete)
	};

	//Cardinality

	\lemma
	cardin_union{
		\schemaVar \term Set set, set1;

		\find(cardinality(SetUnion(set, set1)))
		\sameUpdateLevel
		\add(
			cardinality(SetUnion(set, set1)) = cardinality(set) + cardinality(set1) - cardinality(SetIntersection(set, set1))
		==> )
		\heuristics(userTaclets1)
	};

	\lemma //not strong enough in general
	cardin_intersect{
		\schemaVar \term Set set, set1;

		\find(cardinality(SetIntersection(set, set1)))
		\sameUpdateLevel
		\add(cardinality(SetIntersection(set, set1)) <= cardinality(set) , cardinality(SetIntersection(set, set1)) <= cardinality(set1) ==> )
		\heuristics(userTaclets1)
		
	};

	\lemma //not strong enough in general
	cardin_difference{
		\schemaVar \term Set set, set1;

		\find (cardinality(SetDifference(set, set1)))
		\sameUpdateLevel
		\add (cardinality(SetDifference(set, set1)) <= cardinality(set) ==> )
		\heuristics(userTaclets1)
	};
	
	\lemma //simplification
	cardin0{
		\schemaVar \term Set set;
		
		\find (cardinality(set) = 0 ==>)
		\add (set = SetEmpty ==>)
		\heuristics (simplify) //?
	};
	
	\lemma //simplification
	cardin1{
		\schemaVar \term Set set;
		\schemaVar \variable any x;
		
		\find (cardinality(set) = 1 ==>)
		\varcond(\notFreeIn(x, set))
		\add (\exists x; (set = single(x)) ==>)
		\heuristics (simplify_enlarging)
	};
	
	//make \lemma
	cardinGeq0{
		\schemaVar \term Set set;

		\find( cardinality(set) )
		\sameUpdateLevel
		\add( cardinality(set) >= 0 ==> )

		// When cardinalities add up to negative value
	};

	\lemma
	equalSetsRight{
		\schemaVar \term Set set, set1;
		\schemaVar \variable any el;
		
		\find (==> set = set1)
		\varcond (\notFreeIn(el, set), \notFreeIn(el, set1))
		\replacewith ( ==> 
			\forall el; (element(el, set) <-> element(el, set1))
		)

		\heuristics (userTaclets2) // Use after most other things!
	};
	
	/*
	//make \lemma
	expandVennProperties{
	\schemaVar \term Set set, set1;

		\find( vennProperties(set, set1) )
		\replacewith (
								(set = SetUnion(
									SetDifference(set, set1),
									SetIntersection(set, set1)) & 
								SetUnion(set, set1) = SetUnion(SetUnion(
									SetDifference(set, set1),
									SetIntersection(set, set1)),
									SetDifference(set1, set)) &
								set1 = SetUnion(
									SetUnion(set, set1),
									SetDifference(set1, set)) &
								is_disjoint(
									SetDifference(set, set1),
									SetUnion(set, set1)) &
								is_disjoint(
									SetDifference(set, set1),
									SetDifference(set1, set)) &
								is_disjoint(
									SetIntersection(set, set1),
									SetDifference(set1, set)) &
								is_subset(
									SetDifference(set, set1),
									set) &
								is_subset(
									SetIntersection(set, set1),
									set) &
								is_subset(
									SetDifference(set, set1),
									SetUnion(set, set1)) &
								is_subset(
									SetIntersection(set, set1),
									SetUnion(set, set1)) &
								is_subset(
									SetDifference(set1, set),
									SetUnion(set, set1)) &
								is_subset(
									SetIntersection(set, set1),
									set1) &
								is_subset(
									SetDifference(set1, set),
									set1) &
								cardinality(set) = 
									cardinality(SetDifference(set, set1)) + 
									cardinality(SetIntersection(set, set1)) &
								cardinality(SetUnion(set, set1)) =
									cardinality(SetDifference(set, set1)) + 
									cardinality(SetIntersection(set, set1)) +
									cardinality(SetDifference(set1, set)) &
								cardinality(set1) = 
									cardinality(SetDifference(set1, set)) + 
									cardinality(SetIntersection(set, set1))
								)
		)

		//TODO heuristics: only if one of the properties needed
	};
	//*/

	\lemma
	getCardinFromVennProperties{
		\schemaVar \term Set set, set1;

		\find( vennProperties(set, set1) ==> )
		\add( 	cardinality(set) = 
					cardinality(SetDifference(set, set1)) + 
					cardinality(SetIntersection(set, set1)) &
				cardinality(SetUnion(set, set1)) =
					cardinality(SetDifference(set, set1)) + 
					cardinality(SetIntersection(set, set1)) +
					cardinality(SetDifference(set1, set)) &
				cardinality(set1) = 
					cardinality(SetDifference(set1, set)) + 
					cardinality(SetIntersection(set, set1))
		==> )

		//TODO heuristics: after everything else (because it blows the sequent up)
	};

	\lemma
	introduceVennPropertiesDiff{
		\schemaVar \term Set set, set1;

		\find( cardinality(SetDifference(set, set1)) )
		\sameUpdateLevel
		\add( vennProperties(set, set1) ==> )

		//TODO heuristics: after everything else (because it blows the sequent up)
		//consider reducing venn properties to the cardinality ones
	};

	\lemma
	introduceVennPropertiesInters{
		\schemaVar \term Set set, set1;

		\find( cardinality(SetIntersection(set, set1)) )
		\sameUpdateLevel
		\add( vennProperties(set, set1) ==> )

		//TODO heuristics: after everything else (because it blows the sequent up)
		//consider reducing venn properties to the cardinality ones
	};


}