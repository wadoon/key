\sorts {
	Set;
	SetGraph;
	SetGraphs;
	SetGraphEdge;
	SetGraphNodes;
	SetGraphEdges;
}

\predicates {
   element(any, Set);
   is_subset(Set, Set);
   finite(Set);


}

\functions {
// --- SET ---

	// empty Set
	\unique Set SetEmpty;
	
	// Singleton Set
	\unique Set single(any);

	// union of two Sets
	Set SetUnion(Set, Set);

	// intersection of two Sets
	Set SetIntersection(Set, Set);

	// difference of two Sets
	Set SetDifference(Set, Set);

	// complement of a Set
	//Set compl(Set);

	// cardinality
	int cardinality(Set);

// --- GRAPH ---
	
// axiomatic graph


	//graph edge
	SetGraphEdge edge(Set, Set);
	
	//graph
	SetGraph graph(SetGraphNodes, SetGraphEdges);

	//Nodes -----
	
	//nodes empty
	\unique SetGraphNodes SetGraphNodesEmpty;
	
	//nodes add
	SetGraphNodes addNode(SetGraphNodes, Set);

	//nodes remove
	SetGraphNodes removeNode(SetGraphNodes, Set);

	//nodes addAll
	SetGraphNodes addAllNodes(SetGraphNodes, SetGraphNodes);

	//nodes removeAll
	SetGraphNodes removeAllNodes(SetGraphNodes, SetGraphNodes);

	//Edges -----
	
	//edges empty
	\unique SetGraphEdges SetGraphEdgesEmpty;
	
	//edges add
	SetGraphEdges addEdge(SetGraphEdges, SetGraphEdge);


// structural

	//graph (number of nodes, content of top node, children)
	SetGraph graph(int, Set, SetGraphs);

	//graphs empty
	SetGraphs SetGraphsEmpty;

	//graphs (number of nodes, first graph, rest)
	SetGraphs graphs(int, SetGraph, SetGraphs);



//Bansal et al. functions -----
	
	//graph add
	SetGraph addToGraph(SetGraph, Set);
	
	//graph merge
	SetGraph mergeGraph(SetGraph, Set, Set);

	//non empty leaves of a set in the graph
	SetGraphNodes nonEmptyLeaves(SetGraph, Set);

	//graph merge with L(s) and L(t)
	SetGraph mergeGraphInternal1(SetGraph, SetGraphNodes, SetGraphNodes);

	//graph merge with L1 and L2
	SetGraph mergeGraphInternal2(SetGraph, SetGraphNodes, SetGraphNodes);

	//graph merge intermediate step with L1 and L2 and the remaining nodes of L2;
	SetGraph mergeGraphInternal3(SetGraph, SetGraphNodes, SetGraphNodes, SetGraphNodes);

	//non empty leaves with only edges and a boolean weather a leave was already found and complete list of edges for recursion
	SetGraphNodes nonEmptyLeavesInternal1(SetGraphEdges, Set, boolean, SetGraphEdges);


}



\axioms {
	// axioms
	
	// --- GRAPH ---

	// axiomatic graph

	/*
	createSetGraph{
		\add(graph(SetGraphNodesEmpty, SetGraphEdgesEmpty) ==>) //put in predicate or constant = this
		
		//should only be possible if all conditions, like no multiple occurrences of constants in set operators, are met.
	};
	//*/

	

	//Rules to simplify GraphNodes

	removeDuplicateNode{
		\schemaVar \term SetGraphNodes nodes;
		\schemaVar \term Set s;

		\find( addNode(addNode(nodes, s), s) )
		\replacewith( addNode(nodes, s) )

		\heuristics(simplify)
	};


	swapNodes{
		\schemaVar \term SetGraphNodes nodes;
		\schemaVar \term Set s, t;

		\find( addNode(addNode(nodes, s), t) )
		\replacewith( addNode(addNode(nodes, t), s) )

		//for sorting
	};

	removeNodeFound{
		\schemaVar \term SetGraphNodes nodes;
		\schemaVar \term Set s;

		\find( removeNode(addNode(nodes, s), s) )
		\replacewith ( removeNode(nodes, s) )

		\heuristics(simplify)
	};

	removeNodePropagate{
		\schemaVar \term SetGraphNodes nodes;
		\schemaVar \term Set s, t;

		\find( removeNode(addNode(nodes, s), t) )
		\replacewith( 
			\if(s = t)
			\then(removeNode(nodes, s))
			\else(addNode(removeNode(nodes, t), s)) )

		\heuristics(simplify)

	};

	removeNodeTerminate{
		\schemaVar \term Set s;

		\find( removeNode(SetGraphNodesEmpty, s) )
		\replacewith( SetGraphNodesEmpty )

		\heuristics(simplify)
	};

	addAllStep{
		\schemaVar \term SetGraphNodes nodes, nodes1;
		\schemaVar \term Set s;

		\find( addAllNodes(nodes, addNode(nodes1, s)) )
		\replacewith( addAllNodes(addNode(nodes, s), nodes1) )

		//apply after sorting and removing of duplicates
		\heuristics(simplify_enlarging)
	};

	addAllTerminate{
		\schemaVar \term SetGraphNodes nodes;

		\find( addAllNodes(nodes, SetGraphNodesEmpty) )
		\replacewith( nodes )

		\heuristics(simplify)
	};

	removeAllStep{
		\schemaVar \term SetGraphNodes nodes, nodes1;
		\schemaVar \term Set s;

		\find( removeAllNodes(nodes, addNode(nodes1, s)) )
		\replacewith( removeAllNodes(removeNode(nodes, s), nodes1) )

		//apply after sorting and removing of duplicates
		\heuristics(simplify_enlarging)
	};


	removeAllTerminate{
		\schemaVar \term SetGraphNodes nodes;

		\find( removeAllNodes(nodes, SetGraphNodesEmpty) )
		\replacewith( nodes )

		\heuristics(simplify)
	};


	//Rules for addToGraph
	
	handleAdd1{
		\schemaVar \term SetGraphNodes nodes;
		\schemaVar \term SetGraphEdges edges;
		\schemaVar \term Set s;
		
		\find( addToGraph(graph(nodes, edges), s) )
		\replacewith (graph(addNode(nodes, s), edges))
		
		// should only be possible for a constant, singleton or empty as s !!!
		// how can I make sure of that
	};
	
	handleAdd2{
		\schemaVar \term SetGraphNodes nodes;
		\schemaVar \term SetGraphEdges edges;
		\schemaVar \term Set s, t;
		
		\find( addToGraph(graph(nodes, edges), SetIntersection(s, t)) )
		\replacewith (graph(
							addNode(addNode(addNode(addNode(addNode(nodes,
								s),
								t),
								SetDifference(s, t)),
								SetIntersection(s, t)),
								SetDifference(t, s)),
							
							addEdge(addEdge(addEdge(addEdge(edges,
								edge(s, SetDifference(s, t))),
								edge(s, SetIntersection(s, t))),
								edge(t, SetIntersection(s, t))),
								edge(t, SetDifference(t, s)))
						)
					)
		\heuristics(simplify_enlarging)
	};
	
	handleAdd3{
		\schemaVar \term SetGraphNodes nodes;
		\schemaVar \term SetGraphEdges edges;
		\schemaVar \term Set s, t;
		
		\find( addToGraph(graph(nodes, edges), SetDifference(s, t)) )
		\replacewith (graph(
							addNode(addNode(addNode(addNode(addNode(nodes,
								s),
								t),
								SetDifference(s, t)),
								SetIntersection(s, t)),
								SetDifference(t, s)),
							
							addEdge(addEdge(addEdge(addEdge(edges,
								edge(s, SetDifference(s, t))),
								edge(s, SetIntersection(s, t))),
								edge(t, SetIntersection(s, t))),
								edge(t, SetDifference(t, s)))
						)
				)
		\heuristics(simplify_enlarging)
	};
	
	handleAdd4{
		\schemaVar \term SetGraphNodes nodes;
		\schemaVar \term SetGraphEdges edges;
		\schemaVar \term Set s, t;
		
		\find( addToGraph(graph(nodes, edges), SetUnion(s, t)) )
		\replacewith (graph(
							addNode(addNode(addNode(addNode(addNode(addNode(nodes,
								s),
								t),
								SetDifference(s, t)),
								SetIntersection(s, t)),
								SetDifference(t, s)),
								SetUnion(s, t)),
							
							addEdge(addEdge(addEdge(addEdge(addEdge(addEdge(addEdge(edges,
								edge(s, SetDifference(s, t))),
								edge(s, SetIntersection(s, t))),
								edge(t, SetIntersection(s, t))),
								edge(t, SetDifference(t, s))),
								edge(SetUnion(s, t), SetDifference(s, t))),
								edge(SetUnion(s, t), SetIntersection(s, t))),
								edge(SetUnion(s, t), SetDifference(t, s)))
						)
				)
		\heuristics(simplify_enlarging)

	};
	
	
	// rules to handle mergeGraph

	handleMerge0{
		\schemaVar \term SetGraph graph;
		\schemaVar \term Set s, t;

		\find( mergeGraph(graph, s, t) )
		\replacewith(
			mergeGraphInternal1(
				graph,
				nonEmptyLeaves(graph, s),
				nonEmptyLeaves(graph, t)
			)
		)

		\heuristics(simplify_enlarging)
	};

	handleMerge1{
		\schemaVar \term SetGraph graph;
		\schemaVar \term SetGraphNodes ls, lt;

		\find( mergeGraphInternal1(graph, ls, lt) )
		\replacewith(
			mergeGraphInternal2(
				graph,
				removeAllNodes(ls, lt),
				removeAllNodes(lt, ls)
			)
		)

		//only apply after nonEmptyLeaves is resolved
		\heuristics(userTaclets3) //TODO write proper heuristic
	};

	handleMerge2{
		\schemaVar \term SetGraph graph;
		\schemaVar \term SetGraphNodes l1, l2;

		\find( mergeGraphInternal2(graph, l1, l2) )
		\replacewith( mergeGraphInternal3(graph, l1, l2, l2) )

		\heuristics(simplify)
	};


	handleMerge3Step{
		\schemaVar \term SetGraphNodes nodes;
		\schemaVar \term SetGraphEdges edges;
		\schemaVar \term Set s, t;
		\schemaVar \term SetGraphNodes l1, l2, rest;

		\find( mergeGraphInternal3(graph(nodes, edges), addNode(l1, s), l2, addNode(rest, t)) )
		\replacewith(
			mergeGraphInternal3(
				graph(
					addNode(nodes, SetIntersection(s, t)),
					addEdge(
						addEdge(
							edges,
							edge(s, SetIntersection(s, t))
						),
						edge(t, SetIntersection(s, t))
					)
				),
				addNode(l1, s),
				l2,
				rest
			) 
		)

		\heuristics(simplify_enlarging)
	};

	handleMerge3Loop{
		\schemaVar \term SetGraph graph;
		\schemaVar \term Set s;
		\schemaVar \term SetGraphNodes l1, l2;

		\find( mergeGraphInternal3(graph, addNode(l1, s), l2, SetGraphNodesEmpty) )
		\replacewith( mergeGraphInternal3(graph, l1, l2, l2) )

		\heuristics(simplify)
	};
	
	handleMerge3Terminate{
		\schemaVar \term SetGraph graph;
		\schemaVar \term SetGraphNodes rest, l2;

		\find( mergeGraphInternal3(graph, SetGraphNodesEmpty, l2, rest) )
		\replacewith( graph )

		\heuristics(simplify)
	};

	// rules to handle nonEmptyLeaves

	handleNonEmptyLeaves1{
		\schemaVar \term SetGraphNodes nodes;
		\schemaVar \term SetGraphEdges edges;
		\schemaVar \term Set set;

		\find( nonEmptyLeaves(graph(nodes, edges), set) )
		\replacewith( 
			nonEmptyLeavesInternal1(edges, set, FALSE, edges)
		)
	};

	handleNonEmptyLeavesRec{
		\schemaVar \term Set from, to;
		\schemaVar \term SetGraphEdges edges, all;
		\schemaVar \term Set set;
		\schemaVar \term boolean foundBefore;

		\find( nonEmptyLeavesInternal1(addEdge(edges, edge(from, to)), set, foundBefore, all) )
		\replacewith( 
			\if(set = from)
			\then(
				addAllNodes(
					nonEmptyLeavesInternal1(all, to, FALSE, all), 
					nonEmptyLeavesInternal1(edges, set, TRUE, all)
				) 
			)
			\else(
				nonEmptyLeavesInternal1(edges, set, foundBefore, all)
			)
		)
		
		\heuristics(simplify_enlarging)
	};


	handleNonEmptyLeavesBaseEmpty{
		\schemaVar \term SetGraphEdges edges, all;
		\schemaVar \term boolean foundBefore;

		\find( nonEmptyLeavesInternal1(edges, SetEmpty, foundBefore, all) )
		\replacewith( 
			SetGraphNodesEmpty
		)

		\heuristics(simplify)
	};

	handleNonEmptyLeavesBaseFalse{
		\schemaVar \term SetGraphEdges all;
		\schemaVar \term Set set;

		\find( nonEmptyLeavesInternal1(SetGraphEdgesEmpty, set, FALSE, all) )
		\replacewith( 
			\if(set = SetEmpty)
			\then(SetGraphNodesEmpty)
			\else(
				addNode(
					SetGraphNodesEmpty, 
					set
				) 
			)
		)

		\heuristics(simplify)
	};

	handleNonEmptyLeavesBaseTrue{
		\schemaVar \term SetGraphEdges all;
		\schemaVar \term Set set;

		\find( nonEmptyLeavesInternal1(SetGraphEdgesEmpty, set, TRUE, all) )
		\replacewith(
			SetGraphNodesEmpty
		)

		\heuristics(simplify)
	};



	//--- SET ---
	
	finite_terms{
		\schemaVar \variable Set set;
		\schemaVar \variable Set a;
		\schemaVar \variable Set b;
		\schemaVar \variable any el;
		
		\add(
			\forall set;
				(
					finite(set) <->
					(
						set = SetEmpty |
						(\exists el; set = single(el)) |
						(\exists a; \exists b; 
							(
								(finite(a) & finite(b) & set = SetUnion(a, b)) |
								((finite(a) | finite(b)) & set = SetIntersection(a, b)) |
								(finite(a) & set = SetDifference(a, b))
							)
						)
					)
				)		
		==> )
	};
	
	
	SetInduction{
		\schemaVar \variable any e;
		\schemaVar \variable Set s, s1, s2;
		\schemaVar \formula ih;
		
		
		\varcond (\notFreeIn(e, ih), \notFreeIn(s1, ih), \notFreeIn(s2, ih))
		"baseCase: Empty": \add (==> {\subst s ; SetEmpty} ih);
		"baseCase: Single": \add (==> \forall e; {\subst s ; single(e)} ih);
		"Ind. Step": \add (==> \forall s1; \forall s2; ({\subst s; s1} ih & {\subst s; s2} ih -> {\subst s; SetUnion(s1, s2)} ih));
		"Use proven theorem": \add (\forall s1; {\subst s; s1} ih ==>)
	};
	
	empty{
		\schemaVar \variable any el;
		\add(!\exists el; element(el, SetEmpty) ==> )
	};

	cardin_not_negative{//maybe has to be restricted to finite
		\schemaVar \variable Set set;
		
		\add(\forall set; cardinality(set) >= 0 ==>)
	};
	
	cardin_finite{ // n has to be restricted to constants
		\schemaVar \variable Set set;
		\schemaVar \variable int n;
		
		
		\add (\forall set; (finite(set) <-> \exists n; cardinality(set) = n) ==>)
	};

	cardin_of_empty{
		\schemaVar \variable Set set;
		
		\add(\forall set; (cardinality(set) = 0 <-> set = SetEmpty) ==>)
	};

	cardin_of_single{
		\schemaVar \variable Set set;
		\schemaVar \variable any el;
		
		\add (\forall set; (cardinality(set) = 1 <-> \exists el; set = single(el)) ==>)
	};

/*
	cardin_step{
		\schemaVar \variable Set set, set1;
		\schemaVar \variable any el;
		\schemaVar \variable int n;
		
		\add (\forall set; \forall n; \forall el; \exists set1; (! element(el, set1) -> (set = SetUnion(set1, single(el)) & (cardinality(set1) = n <-> cardinality(SetUnion(set1, single(el))) = n + 1))) ==>)
	};
*/	

	
	build_of_union{
		\schemaVar \variable Set set, set1;
		\schemaVar \variable any el;
		
		\add (\forall set; (set = SetEmpty | \exists set1; \exists el; set = SetUnion(single(el), set1)) ==>)
	};
	
	cardin_union_axiom{
		\schemaVar \variable Set set, set1;
	
		\add(\forall set; \forall set1; cardinality(SetUnion(set, set1)) = cardinality(set) + cardinality(set1) - cardinality(SetIntersection(set, set1)) ==> )
	};
	
	
	
	

	element_of_single{
		\schemaVar \term any el;
		\schemaVar \term any el2;

		\find (element(el, single(el2)))
		\replacewith (el = el2)
		\heuristics (simplify)
	};

	union{
		\schemaVar \term Set set;
		\schemaVar \term Set set1;
		\schemaVar \term any e;

        \find (element(e, SetUnion(set, set1))) 
        \replacewith ((element(e, set) | element(e, set1)))
        \heuristics(simplify_enlarging)
    };


	intersect{
		\schemaVar \term Set set, set1;
		\schemaVar \term any e;

        \find (element(e, SetIntersection(set, set1)))
	    \replacewith (element(e, set) & element(e, set1))
        \heuristics(simplify_enlarging)
	};


	difference{
		\schemaVar \term Set set, set1;
		\schemaVar \term any e;

		\find (element(e, SetDifference(set, set1)))
		\replacewith (element(e, set) & ! element(e, set1))
        \heuristics(simplify_enlarging)
	};

	setEquality{
		\schemaVar \variable Set set, set1;
		\schemaVar \variable any el;

		\add (\forall set; \forall set1; (set = set1 <-> \forall el; (element(el, set) <-> element(el, set1))) ==>)
	};

	setCombinations{
		\schemaVar \variable Set set, set1;

		\add (\forall set; \forall set1;
								(set = SetUnion(SetDifference(set, set1), SetIntersection(set, set1)) & 
								SetUnion(set, set1) = SetUnion(SetUnion(SetDifference(set, set1), SetIntersection(set, set1)), SetDifference(set1, set)))
			 ==>)
	};



/*
	complement{
		\schemaVar \term Set set;
		\schemaVar \term any e;

		\find (element(e, compl(set)))
		\replacewith (!element(e, set))
	};
*/

	subset{
		\schemaVar \term Set set, set1;
		\schemaVar \variable any el;

		\find (is_subset(set, set1))
		\varcond (\notFreeIn(el,set), \notFreeIn(el,set1))
		\replacewith (\forall el; (element(el, set) -> element(el, set1)))
	};

	subset_empty{
		\schemaVar \variable Set set;

		\add(\forall set; (is_subset(set, SetEmpty) -> set = SetEmpty) ==> )
	};


}


	// lemmas
\rules{	


	cardin_subset{// TODO make a lemma
		\schemaVar \variable Set set, set1;
		
		\add(\forall set; \forall set1; (is_subset(set, set1) -> cardinality(set) <= cardinality(set1)) ==> )	
	};

	\lemma
	cardin_empty{
		\find (cardinality(SetEmpty))
		\replacewith(0)
		\heuristics(concrete)
	};
	
	\lemma
	cardin_single{
		\schemaVar \term any el;

		\find (cardinality(single(el)))
		\replacewith (1)
		\heuristics(concrete)
	};
	
	\lemma
	set_equal{
		\schemaVar \term Set set, set1;
		\schemaVar \variable any el;
		
		\find (set = set1)
		\varcond (\notFreeIn(el,set), \notFreeIn(el,set1))
		\replacewith (\forall el; (element(el, set) <-> element(el, set1)))
		//should be done when neither set nor set1 is a variable symbol.
		
	};
	
	//TODO make a lemma //simplification
	subset_to_intersect{
		\schemaVar \term Set set, set1;
		
		\find (is_subset(set, set1))
		\replacewith (set = SetIntersection(set, set1))
		
		\heuristics(simplify)
	};
	
	
	//TODO make a lemma //simplification
	element_to_subset{
		\schemaVar \term Set set;
		\schemaVar \term any x;
		
		\find (element(x, set))
		\replacewith (is_subset(single(x), set))
		
		//\heuristics(simplify) //probably not beneficial
	};
	
	
	\lemma
	cardin_disjunctive_union{
		\schemaVar \variable Set set, set1;
	
		\add(\forall set; \forall set1;
									(SetIntersection(set, set1) = SetEmpty 
									->
									 cardinality(SetUnion(set, set1)) = cardinality(set) + cardinality(set1)) ==> )
	};

	\lemma
	union_of_empty{
		\schemaVar \term Set set;
		
		\find (SetUnion(set, SetEmpty))
		\replacewith (set)
		
		\heuristics (simplify)
	};
	
	\lemma
	union_of_empty2{
		\schemaVar \term Set set;
		
		\find (SetUnion(SetEmpty, set))
		\replacewith (set)
		
		\heuristics (simplify)
	};
	
	\lemma
	intersect_of_empty{
		\schemaVar \term Set set;
		
		\find (SetIntersection(set, SetEmpty))
		\replacewith (SetEmpty)
		
		\heuristics (concrete)
	};
	
	\lemma
	intersect_of_empty2{
		\schemaVar \term Set set;
		
		\find (SetIntersection(SetEmpty, set))
		\replacewith (SetEmpty)
		
		\heuristics (concrete)
	};

	\lemma //for normalform
	union_commutative{
		\schemaVar \term Set commEqLeft, commEqRight;

		\find (SetUnion(commEqLeft, commEqRight))
		\replacewith(SetUnion(commEqRight, commEqLeft))
		\heuristics(order_terms)
	};

	\lemma //for normalform
	intersect_commutative{
		\schemaVar \term Set commEqLeft, commEqRight;

		\find (SetIntersection(commEqLeft, commEqRight))
		\replacewith(SetIntersection(commEqRight, commEqLeft))
		\heuristics(order_terms)
	};
	
	\lemma //for normalform
	union_commutative2{
		\schemaVar \term Set set, set1, set2;
		
		\find (SetUnion(SetUnion(set, set1), set2))
		\replacewith (SetUnion(SetUnion(set, set2), set1))
	};
	
	\lemma //for normalform
	intersect_commutative2{
		\schemaVar \term Set set, set1, set2;
		
		\find (SetIntersection(SetIntersection(set, set1), set2))
		\replacewith (SetIntersection(SetIntersection(set, set2), set1))
	};
	
	\lemma //for normalform
	union_assoc{
		\schemaVar \term Set set, set1, set2;
		
		\find (SetUnion(set, SetUnion(set1, set2)))
		\replacewith (SetUnion(SetUnion(set, set1), set2))
		
		\heuristics (setUnionAssoc)
	};
	
	\lemma //for normalform
	union_assoc2{
		\schemaVar \term Set set, set1, set2, set3;
		
		\find (SetUnion(SetUnion(set, set1), SetUnion(set2, set3)))
		\replacewith (SetUnion(SetUnion(SetUnion(set, set1), set2), set3))
	};
	
	\lemma //for normalform
	intersect_assoc{
		\schemaVar \term Set set, set1, set2;
		
		\find (SetIntersection(set, SetIntersection(set1, set2)))
		\replacewith (SetIntersection(SetIntersection(set, set1), set2))
	};
	
	\lemma //for normalform
	intersect_assoc2{
		\schemaVar \term Set set, set1, set2, set3;
		
		\find (SetIntersection(SetIntersection(set, set1), SetIntersection(set2, set3)))
		\replacewith (SetIntersection(SetIntersection(SetIntersection(set, set1), set2), set3))
	};
	
	\lemma //for normalform
	union_distrib{//preferred
		\schemaVar \term Set set, set1, set2;
		
		\find (SetUnion(set, SetIntersection(set1, set2)))
		\replacewith (SetIntersection(SetUnion(set, set1), SetUnion(set,set2)))
	};
	
	\lemma //not used
	intersect_distrib{ //should not be automatic
		\schemaVar \term Set set, set1, set2;
		
		\find (SetIntersection(set, SetUnion(set1, set2)))
		\replacewith (SetUnion(SetIntersection(set, set1), SetIntersection(set,set2)))
	};

	\lemma //simplification
	element_of_empty{
		\schemaVar \term any e;

		\find (element(e, SetEmpty))
		\replacewith (false)
		\heuristics(concrete)
	};

	\lemma //needed?
	empty_right{
		\schemaVar \term Set set;
		\schemaVar \variable any el;


		\find( ==> set = SetEmpty)
		\varcond(\notFreeIn(el, set))
		\add(\exists el; element(el, set) ==> )

	};

	\lemma //needed?
	empty_left{
		\schemaVar \term Set set;
		\schemaVar \variable any el;


		\find(set = SetEmpty ==> )
		\varcond(\notFreeIn(el, set))
		\add( ==> \exists el; element(el, set))

	};

	\lemma //simplification
	union_simplify{
		\schemaVar \term Set set, set1;
		\schemaVar \term any el;

		\assumes (==> element(el, set1))
		\find (element(el, SetUnion(set, set1)))
		\sameUpdateLevel
		\replacewith (element(el, set))
		\heuristics(simplify)
	};

	\lemma //simplification
	intersect_simplify{
		\schemaVar \term Set set, set1;
		\schemaVar \term any el;

		\assumes (element(el, set1) ==>)
		\find (element(el, SetIntersection(set, set1)))
		\sameUpdateLevel
		\replacewith (element(el, set))
		\heuristics(simplify)
	};

	\lemma //simplification
	intersect_disjunctive1{
		\schemaVar \term Set set, set1;

		\find (SetIntersection(SetDifference(set, set1), SetIntersection(set, set1)))
		\replacewith (SetEmpty)
		\heuristics(concrete)
	};

	\lemma //simplification
	intersect_disjunctive2{
		\schemaVar \term Set set, set1;

		\find (SetIntersection(SetDifference(set, set1), SetDifference(set1, set)))
		\replacewith (SetEmpty)
		\heuristics(concrete)
	};

	\lemma //simplification
	intersect_disjunctive3{
		\schemaVar \term Set set, set1;

		\find (SetIntersection(SetDifference(set, set1), set1))
		\replacewith (SetEmpty)
		\heuristics(concrete)
	};

	\lemma //not strong enough in general
	cardin_union{
		\schemaVar \term Set set, set1;

		\find(cardinality(SetUnion(set, set1)))
		\sameUpdateLevel
		\add(cardinality(SetUnion(set, set1)) <= cardinality(set) + cardinality(set1) ==> )
		\heuristics(userTaclets1)
	};

	\lemma //not strong enough in general
	cardin_intersect{
		\schemaVar \term Set set, set1;

		\find(cardinality(SetIntersection(set, set1)))
		\sameUpdateLevel
		\add(cardinality(SetIntersection(set, set1)) <= cardinality(set) , cardinality(SetIntersection(set, set1)) <= cardinality(set1) ==> )
		\heuristics(userTaclets1)
		
	};

	\lemma //not strong enough in general
	cardin_difference{
		\schemaVar \term Set set, set1;

		\find (cardinality(SetDifference(set, set1)))
		\sameUpdateLevel
		\add (cardinality(SetDifference(set, set1)) <= cardinality(set) ==> )
		\heuristics(userTaclets1)
	};
	
	\lemma //simplification
	cardin0{
		\schemaVar \term Set set;
		
		\find (cardinality(set) = 0 ==>)
		\add (set = SetEmpty ==>)
		\heuristics (simplify) //?
	};
	
	\lemma //simplification
	cardin1{
		\schemaVar \term Set set;
		\schemaVar \variable any x;
		
		\find (cardinality(set) = 1 ==>)
		\varcond(\notFreeIn(x, set))
		\add (\exists x; (set = single(x)) ==>)
		\heuristics (simplify_enlarging)
	};
	
	//probably not necessary
	equalSetsRight{
		\schemaVar \term Set set, set1;
		\schemaVar \skolemTerm any el;
		
		\find (==> set = set1)
		\varcond (\new(el, \dependingOn(set))) // ? not supported ?
		\replacewith (==> element(el, set) & element(el, set1), !element(el, set) & !element(el, set1))
		\heuristics (userTaclets2)
	};
	
}