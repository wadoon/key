// This file is part of KeY - Integrated Deductive Software Design
//
// Copyright (C) 2001-2011 Universitaet Karlsruhe (TH), Germany
//                         Universitaet Koblenz-Landau, Germany
//                         Chalmers University of Technology, Sweden
// Copyright (C) 2011-2013 Karlsruhe Institute of Technology, Germany
//                         Technical University Darmstadt, Germany
//                         Chalmers University of Technology, Sweden
//
// The KeY system is protected by the GNU General
// Public License. See LICENSE.TXT for details.
//

// This file contains only the RULES for the injection
//   onat
// of natural numbers into Ord.
// The rules come in sections
//  * Definitional Extensions 
//  * Derived  Taclets


\rules{

//--------------------------------------------------------------------------
//  
//  Definitional Extensions 
//  
//--------------------------------------------------------------------------

onatZeroDef{
  \find(onat(0))
  \replacewith(o_0)
 \heuristics(concrete)
};

onatSuccDef{
 \schemaVar \variables int n;
 \add(\forall n;(0<=n -> onat(n+1) = oadd(onat(n),o_1)) ==>)
};

//--------------------------------------------------------------------------
//  
//  Derived  taclets
//  
//--------------------------------------------------------------------------

// proofScript exists
\lemma
onatOne{
  \find(onat(1))
  \replacewith(o_1)
 \heuristics(concrete)
};


//proofScript exists
\lemma
onatoadd{
 \schemaVar \variables int n,m;
 \add(\forall n;\forall m;(
 (0<=n & 0<=m) -> onat(n+m)= oadd(onat(n),onat(m)))==>)
};


// proofScript exists
\lemma
onatInj{
 \schemaVar \variables int n,m;
 \add(\forall n;\forall m;(
 (0<=n & 0<=m) -> (onat(n)=onat(m) -> n = m)) ==>)
};

// proofScript exists
\lemma
onatolt{
 \schemaVar \variables int n,m;
 \add(\forall n;\forall m;(
 (0<=n & 0<=m) -> (olt(onat(n),onat(m)) <-> n<m))==>)
};

// proofScript exists
\lemma
onatoltAut{
 \schemaVar \term int n,m;
 \find(==> olt(onat(n),onat(m)))
 \replacewith(==> n < m);
 \replacewith(==> 0<=n);
 \replacewith(==> 0<=m)
};

// proofScript exists
\lemmma
onatLessOmega{
 \schemaVar \term int n;
 \assumes(0<=n ==>)
 \find(onat(n))
 \inSequentState
 \add(olt(onat(n),omega)==>)
 \heuristics(simplify_enlarging)
};

// unclear why this taclet occurs here!
// proofScript 
oltlexicographicInt{
    \schemaVar \term int i1, i2, j1, j2;
    \find(==> olt(oadd(otimes(omega,onat(i1)),onat(j1)), oadd(otimes(omega,onat(i2)),onat(j2))))
    \replacewith( ==> i1 < i2   |    i1 = i2 & j1 < j2);
    \add(==> 0<= i1);
    \add(==> 0<= i2);
    \add(==> 0<= j1);
    \add(==> 0<= j2)
     \heuristics(simplify_enlarging)
};


}