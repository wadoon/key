\schemaVariables {
  \modalOperator { diamond, box, diamond_transaction, box_transaction } #allmodal;
  \formula post;

  \program Statement #body;
  \program Expression #nse;

  \program Variable #x;
  \formula #inv;
  
  \update #anon_update;
}

//////
// TODO: 	
// 			anonymize heap as well(?)
//////

\rules(programRules:Java) {
  loopScopeInvariantTaclet { 
    /*
      Find expression of form: 
        Gamma ==> {U} [pi while (nse) { body } omega] phi, Delta
      Replace with two cases:
      1. Gamma ==> {U} Inv, Delta
      2. Gamma, {U'} Inv ==> Delta, {U'} [ pi loop-scope(x) {
            if (nse) {
              body
              continue;
			}
          } omega
        ] ((x == TRUE => phi) & (x == FALSE => Inv))
    */
    
    \find (
      (\modality{#allmodal} 
      {..
      while (#nse) #body
      ...
      }\endmodality(post)))
	  
    \varcond(\new(#x, boolean), \getInvariant(#inv, #anon_update))

    // Case 1. Invariant Initially Valid
	"Invariant Initially Valid":
	\replacewith(#inv);

    // Case 2. Invariant Preserved and Used
	"Invariant Preserved and Used":
    \replacewith
      (
		{#anon_update}
		(#inv ->
        (\modality{#allmodal}{
        ..
        boolean #x;
		#x = true;
        loop-scope(#x) {
          if (#nse)
          { #body #x = false; }
        }
        ...
      }\endmodality(
        (((#x = TRUE) -> post) 
		& 
		((#x = FALSE) -> 
			#inv
//			& heap anon
//			& prec(_i, variant)
		))
      ))))
	
    \heuristics(loop_expand)
  };
}