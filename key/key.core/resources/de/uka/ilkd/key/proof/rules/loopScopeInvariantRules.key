\schemaVariables {
    \modalOperator { diamond, box, diamond_transaction, box_transaction } #allmodal;
    \formula #post;
	\formula #ts;
	\formula #isTransactional;
	\formula #inv;
    \program Statement #body;
    \program Expression #nse;
    \program Variable #x, #heapBeforeLoop;
    \program LoopInit #loopInit;
    \program Guard #guard;
    \program ForUpdates #forupdates; 
    \skolemTerm Heap #anonHeap;
}

\rules(programRules:Java) {
    loopScopeInvariantTacletWhile { 
        \find (
            (\modality{#allmodal} {.. while (#nse) #body ...} \endmodality(#post))
        )
          
        \varcond(
		    \new(#x, boolean), 
		    \new(#heapBeforeLoop, Heap), 
			\transactional(#isTransactional, #allmodal),
		    \getInvariant(#inv, #allmodal), 
		    \terminationSensitive(#ts, #allmodal))
    
        "Invariant Initially Valid":
        \replacewith(#inv);
    
        "Invariant Preserved and Used":
        \replacewith
        (
			{#anonUpdateTransformer(#isTransactional, #heapBeforeLoop, #anonHeap, #ts)}
            (#inv & #wellFormedAnonHeap(#anonHeap) ->
                (\modality{#allmodal} { ..
                    boolean #x; #x = true;
                    loop-scope(#x) {
                        if (#nse) 
                        { #body #x = false; }
                    } ... 
				}\endmodality(((	
					(#x = TRUE) -> #post) & 
					((#x = FALSE) -> 
						#inv
                        & #getFrameCondition(#isTransactional, #heapBeforeLoop)
                        & #getVariant(#ts))))
                )
            )
        )
    
        \heuristics(loop_inv_taclets)
    };
    
    loopScopeInvariantTacletFor { 
        \find (
            (\modality{#allmodal} {.. for(; #guard; #forupdates) #body ... }\endmodality(#post))
        )
        
		\varcond(
		    \new(#x, boolean), 
		    \new(#heapBeforeLoop, Heap), 
			\transactional(#isTransactional, #allmodal),
		    \getInvariant(#inv, #allmodal), 
		    \getGuardExpr(#nse, #guard), 
		    \terminationSensitive(#ts, #allmodal))
        
        "Invariant Initially Valid":
        \replacewith(#inv);
        
        "Invariant Preserved and Used":
        \replacewith
        (
            {#anonUpdateTransformer(#isTransactional, #heapBeforeLoop, #anonHeap, #ts)}
            (#inv & #wellFormedAnonHeap(#anonHeap) ->
                (\modality{#allmodal} {.. 
					boolean #x; #x = true;
                    loop-scope(#x) {
                        if (#nse) {
                            #body 
                            #x = false; 
                        }
                        if (!#x) {
                            #x = true;
                            #forUpdateUnfoldTransformer(#forupdates);
                            #x = false;
                        }
                    } ...
                }\endmodality(((
					(#x = TRUE) -> #post) & 
                    ((#x = FALSE) -> 
						#inv
						& #getFrameCondition(#isTransactional, #heapBeforeLoop)
						& #getVariant(#ts))))
                )
            )
        )
    
        \heuristics(loop_inv_taclets) 
    };
}