\schemaVariables {
  \modalOperator { diamond, box, diamond_transaction, box_transaction } #allmodal;
  \formula post;

  \program Statement #body;
  \program Expression #nse;

  \program LeftHandSide #lhs;

  \program Variable #x;
}

\rules(programRules:Java) {
  loopScopeInvariantTaclet { 
    /*
      Find expression of form: 
        Gamma ==> {U} [pi l1 : ... ln : while (nse) { body } omega] phi, Delta
      Replace with two cases:
      1. Gamma ==> {U} Inv, Delta
      2. Gamma, {U} {U_havoc} Inv ==> Delta, {U} {U_havoc} [ pi loop-scope(x) {
            if (nse)
            l1 : ... ln : {
              body
              continue;
            }
          } omega
        ] ((x == true => phi) & (x == false => Inv))
    */

    \schemaVar \update u;
    
    \find ({u}
      (\modality{#allmodal} 
      {..
                                          // Missing Labels
      while (#nse) #body
      ...
      }\endmodality(post)))
    \varcond(\new(#x, boolean))

    // Case 1. Initially preserved
    \replacewith 
      ({u}
        post // Transform into Inv        // Missing Inv
      )
    ;

    // Case 2. Preserved and use case

    
    \replacewith 
      (
      {u}
      {heap := anon(savedHeap, allObjects(java.lang.Object::<transactionConditionallyUpdated>), heap)}
      {#x:=TRUE}
        (\modality{#allmodal}{
        ..
        boolean #x;
        loop-scope(#x) {                           
          if (#nse)
                                          // Missing Labels
          { #body continue; }
        }                               
        ...
      }\endmodality(
        (                                 
          ((#x = TRUE) -> post)
          &
          ((#x = FALSE) -> post)          // (x == false => Inv) TODO: post to Inv
        )                                 
      )))
    //\add({u}{heap := anon(savedHeap, allObjects(java.lang.Object::<transactionConditionallyUpdated>), heap)} ==> )  // ADD ({u} {u_havoc} Inv ==>)

    \heuristics(loop_expand)
  };
}