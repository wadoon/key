\schemaVariables {
    \modalOperator { diamond, box, diamond_transaction, box_transaction } #allmodal;
    \formula post;
    \formula b;

    \program Statement #body;
    \program Expression #nse;

    \program Variable #x, #heapBeforeLoop;
    \formula #inv;
    \term int #variant;
  
    \update #anon_update;
    
    \program LoopInit #loopInit;
    \program Guard #guard;
    \program ForUpdates #forupdates; 

    \skolemTerm Heap anonHeap;
}

\rules(programRules:Java) {
    // while-Loop
    loopScopeInvariantTacletWhile { 
        /*
        Find expression of form: 
            Gamma ==> {U} [pi while (nse) { body } omega] phi, Delta
        Replace with two cases:
            1. Gamma ==> {U} Inv, Delta
            2. Gamma, {U'} Inv ==> Delta, {U'} [ pi loop-scope(x) {
                if (nse) {
                    body
                    continue;
                }
            } omega
            ] ((x == TRUE => phi) & (x == FALSE => Inv))
        */
        
        \find (
            (\modality{#allmodal} 
            {..
            while (#nse) #body
            ...
            }\endmodality(post))
        )
          
        \varcond(\new(#x, boolean), \new(#heapBeforeLoop, Heap), \getInvariant(#inv, #allmodal))
    
        // Case 1. Invariant Initially Valid
        "Invariant Initially Valid":
        \replacewith(#inv & wellFormed(heap));
    
        // Case 2. Invariant Preserved and Used
        "Invariant Preserved and Used":
        \replacewith
        (
            {#anonUpdateTransformer((\modality{#allmodal}{#body}\endmodality(post)), #heapBeforeLoop, anonHeap)}
            (#inv & #wellFormedAnonHeap(\modality{#allmodal}{#body}\endmodality(post), anonHeap) ->
                (\modality{#allmodal} {
                    ..
                    boolean #x;
                    #x = true;
                    loop-scope(#x) {
                        if (#nse)
                        { #body #x = false; }
                    }
                    ...
                }
                    \endmodality(
                        (
                            ((#x = TRUE) -> 
                                post
                            )
                            & 
                            ((#x = FALSE) -> 
                                #inv
                                & #getFrameCondition(\modality{#allmodal}{#body}\endmodality(post), #heapBeforeLoop)
                                & #getVariant(post)
                            )
                        )
                    )
                )
            )
        )
    
        \heuristics(loop_inv_taclets)
    };
  
    // for-Loop
    loopScopeInvariantTacletFor { 
        /*
            Find expression of form: 
                Gamma ==> {U} [pi for(loopInit; guard; forupdates) { body } omega] phi, Delta
            Replace with two cases:
                1. Gamma ==> {U} Inv, Delta
                2. Gamma, {U'} Inv ==> Delta, {U'} [ pi 
                    loopInit;
                    loop-scope(x) {
                        if (guard) {
                            body
                            forupdates;
                            continue;
                        }
                } omega
            ] ((x == TRUE => phi) & (x == FALSE => Inv))
        */
            
        \find (
            (\modality{#allmodal} 
            {..
            for(#loopInit; #guard; #forupdates) #body
            ...
            }\endmodality(post))
        )
        
        \varcond(\new(#x, boolean), \new(#heapBeforeLoop, Heap), \getInvariant(#inv, #allmodal), \getGuardExpr(#nse, #guard))
        
        // Case 1. Invariant Initially Valid
        "Invariant Initially Valid":
        \replacewith(#inv & wellFormed(heap));
        
        // Case 2. Invariant Preserved and Used
        "Invariant Preserved and Used":
        \replacewith
        (
            {#anonUpdateTransformer((\modality{#allmodal}{#body}\endmodality(post)), #heapBeforeLoop, anonHeap)}
            (#inv & #wellFormedAnonHeap(\modality{#allmodal}{#body}\endmodality(post), anonHeap) ->
                (\modality{#allmodal} {
                    ..
                    #forInitUnfoldTransformer(#loopInit);
                    boolean #x;
                    #x = true;
                    loop-scope(#x) {
                        if (#nse) {
                            #body 
                            #x = false; 
                        }
                        if (!#x) {
                            #x = true;
                            #forUpdateUnfoldTransformer(#forupdates);
                            #x = false;
                        }
                    }
                    ...
                }
                    \endmodality(
                        (
                            ((#x = TRUE) -> 
                                post
                            )
                            & 
                            ((#x = FALSE) -> 
                                #inv
                                & #getFrameCondition(\modality{#allmodal}{#body}\endmodality(post), #heapBeforeLoop)
                                & #getVariant(post)
                            )
                        )
                    )
                )
            )
        )
    
        \heuristics(loop_inv_taclets)
    };
}