\schemaVariables {
  \modalOperator { diamond, box, diamond_transaction, box_transaction } #allmodal;
  \formula post;

  \program Statement #body;
  \program Expression #nse;
  \program Expression #lhs;
}

\rules(programRules:Java) {
  loopScopeInvariantTaclet { 
    // Find expression of form: 
    //    Gamma ==> {U} [pi l1 : ... ln : while (nse) { body } omega] phi, Delta
    // Replace with two cases:
    // 1. Gamma ==> {U} Inv, Delta
    // 2. Gamma, {U} {U_havoc} Inv ==> Delta, {U} {U_havoc} [ pi loop-scope(x) {
    //        if (nse)
    //        l1 : ... ln : {
    //          body
    //          continue;
    //        }
    //      } omega
    //    ] ((x == true => phi) AND (x == false => Inv))

    \schemaVar \update u;
    
    \find ({u} (\modality{#allmodal}
      {.. while (#nse) #body ...}
      \endmodality(post)))

    // Case 1. Initially preserved
    \replacewith 
      ({u} 
        post // Transform into Inv
      )
    ;

    // Case 2. Preserved and use case

    \replacewith 
      ({u} (\modality{#allmodal}{
        ..
        boolean x = true;
        loop-scope(x) {
          if (#nse) { #body continue; }
        }
        ...
      }\endmodality(post)))
    //\add({u} ==> ) // ADD ({u} {u_havoc} Inv ==>)

    //\heuristics(loop_expand)
  };
}