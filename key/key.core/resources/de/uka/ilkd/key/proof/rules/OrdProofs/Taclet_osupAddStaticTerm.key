\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Tue Dec 29 23:17:20 CET 2015
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_RESTRICTED
[StrategyProperty]DEP_OPTIONS_KEY=DEP_OFF
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_ON
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=200
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=assertions-assertions\\:safe , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:ban , JavaCard-JavaCard\\:on , Strings-Strings\\:on , modelFields-modelFields\\:showSatisfiability , bigint-bigint\\:on , sequences-sequences\\:on , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , moreSeqRules-moreSeqRules\\:on , permissions-permissions\\:off , joinGenerateIsWeakeningGoal-joinGenerateIsWeakeningGoal\\:off
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\proofObligation "#Proof Obligation Settings
#Tue Dec 29 23:17:20 CET 2015
name=osupAddStaticTerm
class=de.uka.ilkd.key.taclettranslation.lemma.TacletProofObligationInput
";

\proofScript"
macro split-prop;
cut 'oleq(osup{Ord v_lambda;}(f_b, oadd(f_i, f_j(v_lambda))),oadd(f_i, osup{Ord v_lambda;}(f_b, f_j(v_lambda)))) 
     &
     oleq(oadd(f_i, osup{Ord v_lambda;}(f_b, f_j(v_lambda))),osup{Ord v_lambda;}(f_b, oadd(f_i, f_j(v_lambda))))';
tryclose branch;
rule hide_right
  formula=' osup{Ord v_lambda;}(f_b, oadd(f_i, f_j(v_lambda)))
 = oadd(f_i, osup{Ord v_lambda;}(f_b, f_j(v_lambda)))';
rule andRight;
rule osupDef
  formula='oleq(osup{Ord v_lambda;}(f_b, oadd(f_i, f_j(v_lambda))),
      oadd(f_i, osup{Ord v_lambda;}(f_b, f_j(v_lambda))))' occ=0;
rule hide_left
  formula='\forall Ord nv1;
   (   olt(nv1, f_b)
    -> olt(oadd(f_i, f_j(nv1)), osup{Ord v_lambda;}(f_b, oadd(f_i, f_j(v_lambda)))))';
instantiate hide var=nv2 with='oadd(f_i, osup{Ord v_lambda;}(f_b, f_j(v_lambda)))';
rule impLeft;
rule allRight;
rule impRight;
rule osupDef
  formula='olt(oadd(f_i, f_j(nv1_0)), oadd(f_i, osup{Ord v_lambda;}(f_b, f_j(v_lambda))))';
rule hide_left
  formula='\forall Ord nv2;
   (   \forall Ord nv1; (olt(nv1, f_b) -> olt(f_j(nv1), nv2))
    -> oleq(osup{Ord v_lambda;}(f_b, f_j(v_lambda)), nv2))';
instantiate hide var=nv1 with=nv1_0;
rule impLeft;
tryclose branch;
rule oltAddLessLeft
  formula='olt(f_j(nv1_0), osup{Ord v_lambda;}(f_b, f_j(v_lambda)))';
instantiate hide var=k with=f_i;
tryclose branch;
rule olt_total_Axiom;
instantiate hide var=nv  with='oadd(f_i, osup{Ord v_lambda;}(f_b, f_j(v_lambda)))';
instantiate hide var=nv1 with='osup{Ord v_lambda;}(f_b, oadd(f_i, f_j(v_lambda)))' ;
rule orLeft;
tryclose  branch;
cut 'oleq(f_i,osup{Ord v_lambda;}(f_b, oadd(f_i, f_j(v_lambda))))';
rule ordDiff;
rule exLeft; 
cut 'olt(k_0,osup{Ord v_lambda;}(f_b, f_j(v_lambda)))';
rule osupDef
  formula='olt(k_0, osup{Ord v_lambda;}(f_b, f_j(v_lambda)))';
rule hide_left
  formula='\forall Ord nv1; (olt(nv1, f_b) -> olt(f_j(nv1), osup{Ord v_lambda;}(f_b, f_j(v_lambda))))';
instantiate hide var=nv2 with=k_0 ;
rule impLeft;
rule allRight;
rule impRight;
rule olt_total_Axiom;
instantiate hide var=nv  with=k_0 ;
instantiate hide var=nv1 with= 'f_j(nv1_1)';
rule orLeft;
rule orLeft;
rule oltAddLessLeft
  formula='olt(k_0, f_j(nv1_1))';
instantiate hide var=k with=f_i;
rule osupDef
 formula='oleq(f_i, osup{Ord v_lambda;}(f_b, oadd(f_i, f_j(v_lambda))))';
tryclose branch;
cut 'oadd(f_i, k_0)= oadd(f_i,f_j(nv1_1))';
rule osupDef
 formula='oleq(f_i, osup{Ord v_lambda;}(f_b, oadd(f_i, f_j(v_lambda))))';
tryclose branch;
rule osupDef
 formula='oleq(f_i, osup{Ord v_lambda;}(f_b, oadd(f_i, f_j(v_lambda))))';
rule hide_left
formula='\forall Ord nv2;
   (   \forall Ord nv1; (olt(nv1, f_b) -> olt(oadd(f_i, f_j(nv1)), nv2))
    -> oleq(osup{Ord v_lambda;}(f_b, oadd(f_i, f_j(v_lambda))), nv2))';
instantiate hide var=nv1 with=o_0;
rule impLeft;
rule oleq_zeroAxiom;
instantiate hide var=nv with=f_b ;
rule oleq_replace
  formula='oleq(o_0, f_b)';
tryclose branch;
rule oaddMonotone;
instantiate hide var=x with=f_i ;
instantiate hide var=y with='f_j(o_0)' ;
rule oltleq_trans
  formula='olt(oadd(f_i, f_j(o_0)), osup{Ord v_lambda;}(f_b, oadd(f_i, f_j(v_lambda))))'; 
tryclose;
 "
