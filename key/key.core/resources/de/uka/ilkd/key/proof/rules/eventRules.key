
\schemaVariables{
 	\term CallDirection cd;
 	\term EventType et;
 	\term Object p;
	\term Method me;
	\term Seq a;
	\term Heap h;
}

\rules {
	// incoming != outgoing
	ev_directionUnequal1 {
		\find (incoming = outgoing)
		\replacewith (false)
		\heuristics (simplify)
	};
	ev_directionUnequal2 {
		\find (outgoing = incoming)
		\replacewith (false)
		\heuristics (simplify)
	};

	// methodCall != methodTermination
	ev_typeUnequal1 {
		\find (methodCall = methodTermination)
		\replacewith (false)
		\heuristics (simplify)
	};
	ev_typeUnequal2 {
		\find (methodTermination = methodCall)
		\replacewith (false)
		\heuristics (simplify)
	};

	//destructor implementations
	implDirectionFromEvent {
		\find (getDirectionFormEvent(event(cd, et, p, me, a, h)))
		\replacewith (cd)
		\heuristics (simplify)
	};
	implTypeFormEvent {
		\find (getTypeFormEvent(event(cd, et, p, me, a, h)))
		\replacewith (et)
		\heuristics (simplify)
	};
	implPartnerFormEvent {
		\find (getPartnerFormEvent(event(cd, et, p, me, a, h)))
		\replacewith (p)
		\heuristics (simplify)
	};
	implMethodFormEvent {
		\find (getMethodFormEvent(event(cd, et, p, me, a, h)))
		\replacewith (me)
		\heuristics (simplify)
	};
	implArgumentsFormEvent {
		\find (getArgumentsFormEvent(event(cd, et, p, me, a, h)))
		\replacewith (a)
		\heuristics (simplify)
	};
	implHeapFormEvent {
		\find (getHeapFormEvent(event(cd, et, p, me, a, h)))
		\replacewith (h)
		\heuristics (simplify)
	};
}
