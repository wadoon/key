\schemaVariables{
	\term int indexEv1;
	\term int indexEv2;
	\term int indexEv3;
	\term Event e;
	\term Seq histTerm;

 	\term CallDirection cd;
 	\term EventType et;
 	\term Object p;
	\term Method me;
	\term Seq a;
	\term Heap h;
}

\rules(sequences:on) {
	//destructor implementations
	implDirectionFromEvent {
		\find (getDirectionFromEvent(event(cd, et, p, me, a, h)))
		\replacewith (cd)
		\heuristics (simplify)
	};
	implTypeFromEvent {
		\find (getTypeFromEvent(event(cd, et, p, me, a, h)))
		\replacewith (et)
		\heuristics (simplify)
	};
	implPartnerFromEvent {
		\find (getPartnerFromEvent(event(cd, et, p, me, a, h)))
		\replacewith (p)
		\heuristics (simplify)
	};
	implMethodFromEvent {
		\find (getMethodFromEvent(event(cd, et, p, me, a, h)))
		\replacewith (me)
		\heuristics (simplify)
	};
	implArgumentsFromEvent {
		\find (getArgumentsFromEvent(event(cd, et, p, me, a, h)))
		\replacewith (a)
		\heuristics (simplify)
	};
	implHeapFromEvent {
		\find (getHeapFromEvent(event(cd, et, p, me, a, h)))
		\replacewith (h)
		\heuristics (simplify)
	};

	// incoming != outgoing
	ev_directionUnequal1 {
		\find (incoming = outgoing)
		\replacewith (false)
		\heuristics (simplify)
	};
	ev_directionUnequal2 {
		\find (outgoing = incoming)
		\replacewith (false)
		\heuristics (simplify)
	};

	// methodCall != methodTermination
	ev_typeUnequal1 {
		\find (methodCall = methodTermination)
		\replacewith (false)
		\heuristics (simplify)
	};
	ev_typeUnequal2 {
		\find (methodTermination = methodCall)
		\replacewith (false)
		\heuristics (simplify)
	};

	//wellFormedHistRules
	wfHistImpl {
		\find (wfHist(histTerm))
		\replacewith (true) /*(!(\exists indexEv1; (1 <= i && i < seqLen(histTerm)) -> (getDirectionFromEvent(seqGet(histTerm, i)) = incoming & getTypeFromEvent(seqGet(histTerm, i)) = methodCall)) &
				!(\exists indexEv2; (0 <= i && i < seqLen(histTerm) - 1) -> (getDirectionFromEvent(seqGet(histTerm, i)) = outgoing & getTypeFromEvent(seqGet(histTerm, i)) = methodTermination)) &
				(\forall indexEv3; (0 <= i && i < a.length-1) ->
				(getDirectionFromEvent(seqGet(histTerm, i)) = outgoing & getTypeFromEvent(seqGet(histTerm, i)) = methodCall ->
				getDirectionFromEvent(seqGet(histTerm, i + 1)) = incoming & getTypeFromEvent(seqGet(histTerm, i + 1)) = methodTermination &
				getPartnerFromEvent(histTerm, i) = getPartnerFromEvent(seqGet(histTerm, i + 1)) & getMethodFromEvent(seqGet(histTerm, i)) = getMethodFromEvent(seqGet(histTerm, i+1)))))*/
		\heuristics (simplify)
	}; // TODO KD z
}