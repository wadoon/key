\schemaVariables{
	\term Seq histTerm;
	\term Seq histTerm2;
	\term Event event;
	\term Event event2;
	\term Any any1;
	\term Any any2;
	\term Heap heap2;

 	\term EventType type;
 	\term Object caller;
 	\term Object callee;
	\term MethodIdentifier service;
	\term Seq content;
	\term Heap heap;

	\term int i;
	\term int j;
}

\rules(sequences:on) {
	//destructor definitions
	evTypeDef {
		\find (evType(event(type, caller, callee, service, content, heap)))
		\replacewith (type)
		\heuristics (simplify)
	};
	evCallerDef {
		\find (evCaller(event(type, caller, callee, service, content, heap)))
		\replacewith (caller)
		\heuristics (simplify)
	};
	evCalleeDef {
		\find (evCallee(event(type, caller, callee, service, content, heap)))
		\replacewith (callee)
		\heuristics (simplify)
	};
	evServiceDef {
		\find (evService(event(type, caller, callee, service, content, heap)))
		\replacewith (service)
		\heuristics (simplify)
	};
	evContentDef {
		\find (evContent(event(type, caller, callee, service, content, heap)))
		\replacewith (content)
		\heuristics (simplify)
	};
	evHeapDef {
		\find (evHeap(event(type, caller, callee, service, content, heap)))
		\replacewith (heap)
		\heuristics (simplify)
	};

	// serviceCall != serviceTermination
	evTypeInequiv1 {
		\find (serviceCall = serviceTermination)
		\replacewith (false)
		\heuristics (simplify)
	};
	evTypeInequiv2 {
		\find (serviceTermination = serviceCall)
		\replacewith (false)
		\heuristics (simplify)
	};

	//wellFormedHist definition
	wfHistDef {
		\find (wfHist(histTerm))
		\replacewith (true)
		\heuristics (simplify)
	};

	//similarHist definition
	similarHistDef {
		\find (similarHist(histTerm, histTerm2, callee))
		\replacewith (\forall i; (0 <= i && i < histTerm.length && evCallee(seq_get(histTerm, i)) == callee) ->
		             (\exists j; (0 <= j && j < histTerm2.lengt) &&
		                         similarEvent(seq_get(histTerm, i), seqGet(histTerm2, j))))
		\heuristics (simplify)
	};

	//similarEvent definition
	similarEventDef {
		\find (similarEvent(event, event2))
		\replacewith (evType(event) == evType(event2) &&
		              evCaller(event) == evCaller(event2) &&
		              evCallee(event) == evCallee(event2) &&
		              evService(event) == evService(event2) &&
		              evContent(event).length == evContent(event2).length &&
		              (\forall i; (0 <= i && i < evContent(event).length) ->
		                          similar(seq_get(evContent(event), i), seqGet(evContent(event2), i), evHeap(event), evHeap(event2))))
		\heuristics (simplify)
	}

	//similar definition
	similarDef {
		\find (similar(any1, any2, heap, heap2))
		\replacewith (true)
		\heuristics (simlify)
	}
}