\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Sun Nov 15 10:55:02 CET 2015
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_RESTRICTED
[StrategyProperty]DEP_OPTIONS_KEY=DEP_OFF
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_ON
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=200
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=assertions-assertions\\:safe , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:ban , JavaCard-JavaCard\\:on , Strings-Strings\\:on , modelFields-modelFields\\:showSatisfiability , bigint-bigint\\:on , sequences-sequences\\:on , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , moreSeqRules-moreSeqRules\\:on , permissions-permissions\\:off , joinGenerateIsWeakeningGoal-joinGenerateIsWeakeningGoal\\:off
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\proofObligation "#Proof Obligation Settings
#Sun Nov 15 10:55:02 CET 2015
name=oaddLeftAbsorb
class=de.uka.ilkd.key.taclettranslation.lemma.TacletProofObligationInput
";

\proofScript "
macro split-prop;
cut 'f_lambda=omega';
rule hide_left
  formula='oleq(omega, f_lambda)';
cut 'oadd(f_i, omega) = omega';
rule hide_left
  formula='olt(f_i, omega)';
tryclose branch;
tryclose branch;
# start of second case in first cut
# from now on f_lambda != omega
cut '\forall Ord ov; (olt(omega, ov) -> oadd(f_i, ov) = ov)';
instantiate hide var=ov with=f_lambda ;
rule impLeft;
tryclose branch;
rule hide_right
 formula='oadd(f_i, f_lambda) = f_lambda';
rule hide_left
  formula='oleq(omega, f_lambda)';
rule oInd;
# Base case
tryclose branch;
# Successor case
rule hide_right
  formula='\forall Ord ov; (olt(omega, ov) -> oadd(f_i, ov) = ov)';
rule allRight;
rule impRight;
rule impRight;
rule impLeft;
cut 'ov_4=omega';
cut 'oadd(f_i, omega) = omega';
rule oadd_DefSucc
 formula='oadd(f_i, oadd(ov_4, o_1)) = oadd(ov_4, o_1)';
tryclose branch;
rule oadd_DefSucc
 formula='oadd(f_i, oadd(ov_4, o_1)) = oadd(ov_4, o_1)';
rule hide_left
 formula='olt(omega, oadd(ov_4, o_1))';
rule hide_left
  formula='olt(f_i, omega)';
rule hide_right
  formula='f_lambda = omega';
tryclose branch;
# limit case
rule hide_right
  formula='\forall Ord ov; (olt(omega, ov) -> oadd(f_i, ov) = ov)';
rule hide_right
  formula='f_lambda = omega';
rule allRight;
rule impRight;
rule impRight;
rule andLeft;
cut 'nv1_3 = o_0';
rule olimDef;
rule andLeft;
tryclose branch;
rule oadd_DefLim;
cut '!(\forall Ord ov; (olt(ov, nv1_3) -> 
      oadd(f_i, \if (oleq(omega,ov)) \then (ov) \else (omega)) =  
                \if (oleq(omega,ov)) \then (ov) \else (omega)))';
rule notLeft;
tryclose branch;
rule notRight;
cut 'osup{Ord nv;}(nv1_3, oadd(f_i, nv)) =
     osup{Ord nv;}(nv1_3, oadd(f_i, \if (oleq(omega,nv)) \then (nv) \else (omega)))';
rule osupEqualTerms;
cut 'osup{Ord ov;}(nv1_3, \if (oleq(omega, ov))  \then (ov)  \else (omega))=nv1_3';
tryclose branch;
rule hide_right
 formula='osup{Ord nv;}(nv1_3, oadd(f_i, nv)) = nv1_3';
rule hide_left
  formula='\forall Ord ov;
   (   olt(ov, nv1_3)
    ->   oadd(f_i, \if (oleq(omega, ov))  \then (ov)  \else (omega))
       = \if (oleq(omega, ov))  \then (ov)  \else (omega))';
rule hide_left
  formula='\forall Ord ov; (olt(ov, nv1_3) -> olt(omega, ov) -> oadd(f_i, ov) = ov)';
rule hide_left
  formula='  osup{Ord nv;}(nv1_3, oadd(f_i, nv))
 = osup{Ord nv;}(nv1_3, oadd(f_i, \if (oleq(omega, nv))  \then (nv)  \else (omega)))';
rule hide_left
  formula='  osup{Ord ov;}(nv1_3, oadd(f_i, \if (oleq(omega, ov))  \then (ov)  \else (omega)))
 = osup{Ord ov;}(nv1_3, \if (oleq(omega, ov))  \then (ov)  \else (omega))';
rule oselfSup;
instantiate hide var=nv with=nv1_3;
rule impLeft;
tryclose branch;
cut 'osup{Ord lambda;}(nv1_3, lambda)
     =
     osup{Ord ov;}(nv1_3, \if (oleq(omega, ov))  \then (ov)  \else (omega))';
tryclose branch;
rule hide_right
  formula='  osup{Ord ov;}(nv1_3, \if (oleq(omega, ov))  \then (ov)  \else (omega))
 = nv1_3';
rule hide_left
  formula='osup{Ord lambda;}(nv1_3, lambda) = nv1_3';
rule osupMutualCofinal;
rule andRight;
rule allRight;
rule impRight;
instantiate hide var=j with=i_0;
rule andRight;
tryclose branch;
rule ifthenelse_split;
tryclose branch;
rule olt_total_Axiom;
tryclose branch;
rule hide_left
 formula='\forall Ord ov;
   (   olt(ov, nv1_3)
    ->   oadd(f_i, \if (oleq(omega, ov))  \then (ov)  \else (omega))
       = \if (oleq(omega, ov))  \then (ov)  \else (omega))';
rule hide_left
 formula='\forall Ord ov; (olt(ov, nv1_3) -> olt(omega, ov) -> oadd(f_i, ov) = ov)';
rule hide_right
  formula='osup{Ord nv;}(nv1_3, oadd(f_i, nv)) = nv1_3';
rule osupMutualCofinal;
rule andRight;
rule allRight;
rule impRight;
instantiate hide var=j with=i_1 ;
rule andRight;
tryclose branch;
rule ifthenelse_split;
tryclose branch;
rule oaddLeftomega
  formula='oleq(oadd(f_i, i_1), oadd(f_i, omega))';
cut 'olt(i_1,omega)';
rule oaddLessOmegaAxiom;
instantiate hide var=i with=f_i ;
instantiate hide var=j with=i_1 ;
rule impLeft;
tryclose branch;
rule olt_total_Axiom;
tryclose;
"
