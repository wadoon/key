\sorts {
    Entry;
}

\functions {
    \unique any deleted;
    
    any getValue(Entry);
    
    int getKeY(Entry);

    Entry newEntry(int, any);

    Map constructMap(Seq);
}

\predicates {
    isTransactionLog(Seq);    
    isStateOf(Map, Seq);
}

\rules {

        defConstructMap {
		\schemaVar \term Seq s;                
                \find(constructMap(Seq)) \sameUpdateLevel
                \replacewith(\if (seqLen(s) = 0) 
                             \then (mapEmpty)
                             \else (mapUpdate(constructMap(seqSub(s,0,seqLen(s) - 1)),
                                             getKeY(Entry::seqGet(s, seqLen(s) - 1)),
                                             getValue(Entry::seqGet(s, seqLen(s) - 1))
                                             ))
                             )
	};

        keyOfNewEntry {
		\schemaVar \term int i;
                \schemaVar \term any a;
                \find(getValue(newEntry(i,a))) \sameUpdateLevel
                \replacewith(i)        
	};

        valueOfNewEntry {
		\schemaVar \term int i;
                \schemaVar \term any a;
                \find(getValue(newEntry(i,a))) \sameUpdateLevel
                \replacewith(a)        
	};

        equalsEntries {
		\schemaVar \term Entry e1;
                \schemaVar \term Entry e2;
                \find(e1 = e2) \sameUpdateLevel
                \replacewith( getKey(e1) = getKey(e2) & getValue(e1) = getValue(e2))        
	};


}






