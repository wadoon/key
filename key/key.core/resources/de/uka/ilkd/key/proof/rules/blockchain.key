\sorts {
    Entry;
}

\functions {
    \unique any deleted;

    \unique Entry emptyEntry;
    
    any getValue(Entry);
    
    int getKey(Entry);

    Entry newEntry(int, any);

    Entry lastEntry(Seq, int);

//    Map constructMap(Seq);
}

\predicates {
    isTransactionLog(Seq);    
//    isStateOf(Map, Seq);
    equalObj(Heap,java.lang.Object, java.lang.Object);
}

\rules {

//        defConstructMap {
//		\schemaVar \term Seq s;                
//                \find(constructMap(s)) \sameUpdateLevel
//                \replacewith(\if (seqLen(s) = 0) 
//                             \then (mapEmpty)
//                             \else (mapUpdate(constructMap(seqSub(s,0,seqLen(s) - 1)),
//                                             getKey(Entry::seqGet(s, seqLen(s) - 1)),
//                                             getValue(Entry::seqGet(s, seqLen(s) - 1))
//                                             ))
//                            )
//	};

        defLastEntry {
		\schemaVar \term int i;
                \schemaVar \term Seq s;
                \find(lastEntry(s,i)) \sameUpdateLevel
                \replacewith(\if (seqLen(s) = 0)
                             \then (emptyEntry)
                             \else (
                                   \if (i = getKey(Entry::seqGet(s, seqLen(s) - 1)))
                                   \then (Entry::seqGet(s, seqLen(s) - 1))
                                   \else (lastEntry(seqSub(s,0,seqLen(s) - 1),i))
                                   )
                            )        
	};

        defEqualObj {
		\schemaVar \term java.lang.Object o1, o2;
                \schemaVar \term Heap h;
                \schemaVar \variables Field f;
                \find(equalObj(h,o1,o2)) \sameUpdateLevel
                \varcond(\notFreeIn(f,h,o1,o2))
                \replacewith( (\forall f; 
                                 (int::select(h,o1,f) = int::select(h,o2,f) 
                                 & boolean::select(h,o1,f) = boolean::select(h,o2,f)
                                 & array2seq(h,java.lang.Object::select(h,o1,f)) = array2seq(h,java.lang.Object::select(h,o2,f))
                                 & equalObj(h,java.lang.Object::select(h,o1,f),java.lang.Object::select(h,o2,f))
                                 )
                                 
                              )
                            )
	};

        keyOfNewEntry {
		\schemaVar \term int i;
                \schemaVar \term any a;
                \find(getKey(newEntry(i,a))) \sameUpdateLevel
                \replacewith(i) 
                \heuristics(simplify)       
	};

        valueOfNewEntry {
		\schemaVar \term int i;
                \schemaVar \term any a;
                \find(getValue(newEntry(i,a))) \sameUpdateLevel
                \replacewith(a)  
                \heuristics(simplify)      
	};

        equalsEntries {
		\schemaVar \term Entry e1;
                \schemaVar \term Entry e2;
                \find(e1 = e2) \sameUpdateLevel
                \replacewith( getKey(e1) = getKey(e2) & getValue(e1) = getValue(e2))        
	};


}

