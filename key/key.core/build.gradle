plugins {
    id 'ca.coglinc.javacc' version '2.4.0'
    id 'antlr'
}

repositories {
    maven { url "https://jitpack.io" }
}

dependencies {
    compile project(':key.util')
    compile name: 'recoderKey'
    //compile name: 'javacc'
    //compile name: 'antlr'
    compile group: 'net.java.dev.javacc', name:'javacc', version:'4.0'
    compile group: 'org.antlr', name:'antlr-runtime', version:'3.5.2'
    compile group: 'antlr', name: 'antlr', version: '2.7.7'

    javacc  group: 'net.java.dev.javacc', name:'javacc', version:'4.0'
    antlr   group: 'org.antlr', name:'antlr', version:'3.5.2'   // use ANTLR version 3
    
    implementation group: 'javax.xml.bind', name: 'jaxb-api', version: '2.4.0-b180830.0359'
    implementation group: 'org.glassfish.jaxb', name: 'jaxb-runtime', version: '2.4.0-b180830.0438'
}

def javaCCOutputDir = file("${buildDir}/generated-src/javacc")
def javaCCOutputDirMain = file("$javaCCOutputDir/main")
sourceSets.main.java.srcDirs(javaCCOutputDirMain)

generateGrammarSource {
    maxHeapSize = "64m"
    arguments += ["-visitor", "-listener", "-long-messages"]
}

generateTestGrammarSource {
    maxHeapSize = "64m"
    arguments += ["-visitor", "-listener", "-long-messages"]
}

compileJavacc {
    outputDirectory = javaCCOutputDirMain
    inputDirectory = file("src/main/javacc")
    doLast {
        copy {
            from("src/main/javacc/de/uka/ilkd/key/parser/schemajava/Token.java")
            into "$javaCCOutputDirMain/de/uka/ilkd/key/parser/schemajava/"
        }
        copy {
            from("src/main/javacc/de/uka/ilkd/key/parser/proofjava/Token.java")
            into "$javaCCOutputDirMain/de/uka/ilkd/key/parser/proofjava/"
        }
    }
}

test {
    /*filter {
        // use testProofRules or testRunAllProofs, avoid double execution on jenkins
        excludeTestsMatching "ProveRulesTest"
        excludeTestsMatching "RunAllProofsTestSuite"
        excludeTestsMatching "RunAllProofsAbstractExecution"
        excludeTestsMatching "RunAllProofsInfFlow"
        excludeTestsMatching "RunAllProofsTestWithComputeCostProfiling"
        excludeTestsMatching "RunAllProofsFunctional"
        excludeTestsMatching "TestParallelParsing"
        excludeTestsMatching "TestCvc4"
    }*/
    filter {
        // To make test cases deterministic there is only one class per
        // project called "Tests" that programmatically collects
        // all test cases.
        // See these classes for configuring the test runs!
        // CAUTION! "excludeCategories" more filters are to be defined in the class!
        includeTestsMatching "de.uka.ilkd.key.Tests"
    }
    // pass debug flag from command line:
    systemProperty "key.test.autosuite.debug", System.getProperty("key.test.autosuite.debug")

    // TODO. That is already in key/build.gradle. Here or there?
    // useJUnit {
    //         excludeCategories 'org.key_project.util.testcategories.Performance'
    //         excludeCategories 'org.key_project.util.testcategories.Interactive'
    // }
}

testFast {
    filter {
        // To make test cases deterministic there is only one class per
        // project called "Tests" that programmatically collects
        // all test cases.
        // See these classes for configuring the test runs!
        // CAUTION! "excludeCategories" more filters are to be defined in the class!
        includeTestsMatching "de.uka.ilkd.key.FastTests"
    }
}

// Should actually be named "testProveRules" ... as rules are proved, and not ProofRules tested
task testProveRules(type: Test) {
    description 'Proves KeY taclet rules tagged as lemma'
    group "verification"
    filter { includeTestsMatching "ProveRulesTest" }
}

task testRunAllProofs(type: Test) {
    description 'Proof/reload all keyfiles tagged for regression testing'
    group "verification"
    filter { 
        includeTestsMatching "RunAllProofsInfFlow"
        includeTestsMatching "RunAllProofsAbstractExecution"
        includeTestsMatching "RunAllProofsFunctional"
    }
}

task generateVersionFiles() {
    def outputFolder = file("build/resources/main/de/uka/ilkd/key/util")
    def sha1 = new File(outputFolder, "sha1")
    def branch = new File(outputFolder, "branch")
    def versionf = new File(outputFolder, "version")

    outputs.files sha1, branch, versionf

    def gitRevision = gitRevParse('--short HEAD')
    def gitBranch = gitRevParse('--abbrev-ref HEAD')

    doLast {
        sha1.text = gitRevision
        branch.text = gitBranch
        versionf.text = rootProject.version
    }
}
processResources.dependsOn generateVersionFiles

//check.dependsOn << testProofRules << testRunAllProofs
