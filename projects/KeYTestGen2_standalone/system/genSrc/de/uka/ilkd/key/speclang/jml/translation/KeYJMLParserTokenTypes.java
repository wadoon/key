// $ANTLR 2.7.7 (2006-11-01): "jmlparser.g" -> "KeYJMLParser.java"$

    package de.uka.ilkd.key.speclang.jml.translation;

    import java.io.StringReader;

    import de.uka.ilkd.key.collection.*;
    import de.uka.ilkd.key.java.JavaInfo;
    import de.uka.ilkd.key.java.Position;
    import de.uka.ilkd.key.java.Services;
    import de.uka.ilkd.key.java.abstraction.*;
    import de.uka.ilkd.key.java.expression.literal.StringLiteral;
    import de.uka.ilkd.key.java.recoderext.ImplicitFieldAdder;
    import de.uka.ilkd.key.ldt.*;
    import de.uka.ilkd.key.logic.*;
    import de.uka.ilkd.key.logic.op.*;
    import de.uka.ilkd.key.logic.sort.*;
    import de.uka.ilkd.key.parser.ParserException;
    import de.uka.ilkd.key.proof.OpReplacer;
    import de.uka.ilkd.key.speclang.PositionedString;
    import de.uka.ilkd.key.speclang.translation.*;
    import de.uka.ilkd.key.util.Pair;
    import de.uka.ilkd.key.util.Triple; 

    import java.math.BigInteger;
    import java.util.List;
    import java.util.Map;
    import java.util.LinkedHashMap;

public interface KeYJMLParserTokenTypes {
	int EOF = 1;
	int NULL_TREE_LOOKAHEAD = 3;
	int BOOLEAN = 4;
	int BYTE = 5;
	int FALSE = 6;
	int INSTANCEOF = 7;
	int INT = 8;
	int LONG = 9;
	int NEW = 10;
	int NULL = 11;
	int SHORT = 12;
	int SUPER = 13;
	int THIS = 14;
	int TRUE = 15;
	int VOID = 16;
	int ACCESSIBLE = 17;
	int ASSIGNABLE = 18;
	int ENSURES = 19;
	int DECLASSIFY = 20;
	int DEPENDS = 21;
	int REPRESENTS = 22;
	int REQUIRES = 23;
	int RESPECTS = 24;
	int SECURE_FOR = 25;
	int SIGNALS = 26;
	int SIGNALS_ONLY = 27;
	int NULLABLE = 28;
	int NON_NULL = 29;
	int BREAKS = 30;
	int CONTINUES = 31;
	int RETURNS = 32;
	int AND = 33;
	int BACKUP = 34;
	int BIGINT = 35;
	int BITWISENOT = 36;
	int BSUM = 37;
	int COLON = 38;
	int COMMA = 39;
	int CREATED = 40;
	int CURRENT_MEMORY_AREA = 41;
	int DIV = 42;
	int DOT = 43;
	int DOTDOT = 44;
	int DURATION = 45;
	int ELEMTYPE = 46;
	int EQUAL_SINGLE = 47;
	int EVERYTHING = 48;
	int FRESH = 49;
	int FREE = 50;
	int GEQ = 51;
	int GT = 52;
	int IMPLIES = 53;
	int IMPLIESBACKWARD = 54;
	int IN_IMMORTAL_MEMORY = 55;
	int IN_OUTER_SCOPE = 56;
	int INCLUSIVEOR = 57;
	int INDEX = 58;
	int INTO = 59;
	int INV = 60;
	int INVARIANT_FOR = 61;
	int IS_INITIALIZED = 62;
	int LARROW = 63;
	int LBLNEG = 64;
	int LBLPOS = 65;
	int LBRACE = 66;
	int LEQ = 67;
	int LOCKSET = 68;
	int LOGICALAND = 69;
	int LOGICALOR = 70;
	int MAX_SPACE = 71;
	int MEMORY_AREA = 72;
	int MINUS = 73;
	int MOD = 74;
	int MULT = 75;
	int NONNULLELEMENTS = 76;
	int NOT = 77;
	int NOT_MODIFIED = 78;
	int NOT_SPECIFIED = 79;
	int NOTHING = 80;
	int LESS_THAN_NOTHING = 81;
	int STRICTLY_NOTHING = 82;
	int OLD = 83;
	int OTHER = 84;
	int OUTER_SCOPE = 85;
	int PLUS = 86;
	int PRE = 87;
	int PRIVATEDATA = 88;
	int QUESTIONMARK = 89;
	int RBRACE = 90;
	int REACH = 91;
	int REACHLOCS = 92;
	int REAL = 93;
	int REENTRANT_SCOPE = 94;
	int RESULT = 95;
	int RIGIDWORKINGSPACE = 96;
	int SAME = 97;
	int SEMI = 98;
	int SHIFTLEFT = 99;
	int SHIFTRIGHT = 100;
	int SPACE = 101;
	int STRING_EQUAL = 102;
	int TRANSACTIONUPDATED = 103;
	int TYPEOF = 104;
	int TYPE_SMALL = 105;
	int TYPE = 106;
	int ST = 107;
	int SUCH_THAT = 108;
	int UNSIGNEDSHIFTRIGHT = 109;
	int VALUES = 110;
	int WORKINGSPACE = 111;
	int XOR = 112;
	int LOCSET = 113;
	int EMPTYSET = 114;
	int SINGLETON = 115;
	int UNION = 116;
	int INTERSECT = 117;
	int SETMINUS = 118;
	int ALLFIELDS = 119;
	int ALLOBJECTS = 120;
	int UNIONINF = 121;
	int DISJOINT = 122;
	int SUBSET = 123;
	int NEWELEMSFRESH = 124;
	int SEQ = 125;
	int SEQGET = 126;
	int SEQEMPTY = 127;
	int SEQSINGLETON = 128;
	int SEQCONCAT = 129;
	int SEQSUB = 130;
	int SEQREVERSE = 131;
	int SEQREPLACE = 132;
	int INDEXOF = 133;
	int SEQDEF = 134;
	int MEASURED_BY = 135;
	int FROM = 136;
	int TO = 137;
	int IF = 138;
	int DL_ESCAPE = 139;
	int EQV_ANTIV = 140;
	int EQ_NEQ = 141;
	int LT_DISPATCH = 142;
	int LT = 143;
	int IMPLICIT_IDENT = 144;
	int LPAREN = 145;
	int RPAREN = 146;
	int LBRACKET = 147;
	int RBRACKET = 148;
	int QUANTIFIER = 149;
	int LETTER = 150;
	int DIGIT = 151;
	int HEXDIGIT = 152;
	int LETTERORDIGIT = 153;
	int IDENT = 154;
	int HEXNUMERAL = 155;
	int DIGITS = 156;
	int CHAR_LITERAL = 157;
	int STRING_LITERAL = 158;
	int ESC = 159;
	int WS = 160;
	int INFORMAL_DESCRIPTION = 161;
	int SL_COMMENT = 162;
	int DOC_COMMENT = 163;
	int PRAGMA = 164;
	int UNION_2 = 165;
}
