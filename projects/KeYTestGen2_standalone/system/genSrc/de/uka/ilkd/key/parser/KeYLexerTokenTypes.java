// $ANTLR 2.7.7 (2006-11-01): "lexer.g" -> "KeYLexer.java"$

    package de.uka.ilkd.key.parser;

    import java.io.InputStream;
    import de.uka.ilkd.key.util.*;
    import java.util.HashMap;
    import antlr.TokenStreamSelector;
    import java.util.NoSuchElementException;
    import java.io.*;

public interface KeYLexerTokenTypes {
	int EOF = 1;
	int NULL_TREE_LOOKAHEAD = 3;
	int SORTS = 4;
	int GENERIC = 5;
	int EXTENDS = 6;
	int ONEOF = 7;
	int ABSTRACT = 8;
	int SCHEMAVARIABLES = 9;
	int SCHEMAVAR = 10;
	int MODALOPERATOR = 11;
	int PROGRAM = 12;
	int FORMULA = 13;
	int TERM = 14;
	int UPDATE = 15;
	int VARIABLES = 16;
	int SKOLEMTERM = 17;
	int SKOLEMFORMULA = 18;
	int MODIFIES = 19;
	int PROGRAMVARIABLES = 20;
	int VARCOND = 21;
	int APPLY_UPDATE_ON_RIGID = 22;
	int DEPENDINGON = 23;
	int DISJOINTMODULONULL = 24;
	int DROP_EFFECTLESS_ELEMENTARIES = 25;
	int DROP_EFFECTLESS_STORES = 26;
	int SIMPLIFY_IF_THEN_ELSE_UPDATE = 27;
	int ENUM_CONST = 28;
	int FREELABELIN = 29;
	int HASSORT = 30;
	int FIELDTYPE = 31;
	int ELEMSORT = 32;
	int ISARRAY = 33;
	int ISARRAYLENGTH = 34;
	int ISENUMTYPE = 35;
	int ISINDUCTVAR = 36;
	int ISLOCALVARIABLE = 37;
	int ISOBSERVER = 38;
	int DIFFERENT = 39;
	int METADISJOINT = 40;
	int ISREFERENCE = 41;
	int ISREFERENCEARRAY = 42;
	int ISSUBTYPE = 43;
	int EQUAL_UNIQUE = 44;
	int NEW = 45;
	int NEWLABEL = 46;
	int NOT = 47;
	int NOTFREEIN = 48;
	int SAME = 49;
	int STATIC = 50;
	int STATICMETHODREFERENCE = 51;
	int STRICT = 52;
	int TYPEOF = 53;
	int INSTANTIATE_GENERIC = 54;
	int FORALL = 55;
	int EXISTS = 56;
	int SUBST = 57;
	int IF = 58;
	int IFEX = 59;
	int THEN = 60;
	int ELSE = 61;
	int INCLUDE = 62;
	int INCLUDELDTS = 63;
	int CLASSPATH = 64;
	int BOOTCLASSPATH = 65;
	int NODEFAULTCLASSES = 66;
	int JAVASOURCE = 67;
	int WITHOPTIONS = 68;
	int OPTIONSDECL = 69;
	int KEYSETTINGS = 70;
	int TRUE = 71;
	int FALSE = 72;
	int SAMEUPDATELEVEL = 73;
	int INSEQUENTSTATE = 74;
	int ANTECEDENTPOLARITY = 75;
	int SUCCEDENTPOLARITY = 76;
	int CLOSEGOAL = 77;
	int HEURISTICSDECL = 78;
	int NONINTERACTIVE = 79;
	int DISPLAYNAME = 80;
	int HELPTEXT = 81;
	int REPLACEWITH = 82;
	int ADDRULES = 83;
	int ADDPROGVARS = 84;
	int HEURISTICS = 85;
	int FIND = 86;
	int ADD = 87;
	int ASSUMES = 88;
	int PREDICATES = 89;
	int FUNCTIONS = 90;
	int UNIQUE = 91;
	int RULES = 92;
	int PROBLEM = 93;
	int CHOOSECONTRACT = 94;
	int PROOFOBLIGATION = 95;
	int PROOF = 96;
	int CONTRACTS = 97;
	int INVARIANTS = 98;
	int IN_TYPE = 99;
	int IS_ABSTRACT_OR_INTERFACE = 100;
	int CONTAINERTYPE = 101;
	int LIMITED = 102;
	int LOCSET = 103;
	int SEQ = 104;
	int BIGINT = 105;
	int VOCAB = 106;
	int SEMI = 107;
	int SLASH = 108;
	int COLON = 109;
	int DOUBLECOLON = 110;
	int ASSIGN = 111;
	int DOT = 112;
	int DOTRANGE = 113;
	int COMMA = 114;
	int LPAREN = 115;
	int RPAREN = 116;
	int LBRACE = 117;
	int RBRACE = 118;
	int LBRACKET = 119;
	int RBRACKET = 120;
	int EMPTYBRACKETS = 121;
	int AT = 122;
	int PARALLEL = 123;
	int OR = 124;
	int AND = 125;
	int IMP = 126;
	int EQUALS = 127;
	int NOT_EQUALS = 128;
	int SEQARROW = 129;
	int EXP = 130;
	int TILDE = 131;
	int PERCENT = 132;
	int STAR = 133;
	int MINUS = 134;
	int PLUS = 135;
	int GREATER = 136;
	int GREATEREQUAL = 137;
	int RGUILLEMETS = 138;
	int WS = 139;
	int STRING_LITERAL = 140;
	int LESS_DISPATCH = 141;
	int LESS = 142;
	int LESSEQUAL = 143;
	int LGUILLEMETS = 144;
	int IMPLICIT_IDENT = 145;
	int EQV = 146;
	int PRIMES_OR_CHARLITERAL = 147;
	int PRIMES = 148;
	int CHAR_LITERAL = 149;
	int ESC = 150;
	int QUOTED_STRING_LITERAL = 151;
	int SL_COMMENT = 152;
	int ML_COMMENT = 153;
	int DIGIT_DISPATCH = 154;
	int HEX_LITERAL = 155;
	int DIGIT = 156;
	int HEX = 157;
	int LETTER = 158;
	int IDCHAR = 159;
	int IDENT = 160;
	int NUM_LITERAL = 161;
	int MODALITY = 162;
	int MODALITYEND = 163;
	int JAVABLOCK = 164;
}
