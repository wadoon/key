// $ANTLR 2.7.7 (2006-11-01): "jmlprelexer.g" -> "KeYJMLPreLexer.java"$

    package de.uka.ilkd.key.speclang.jml.pretranslation;

public interface KeYJMLPreLexerTokenTypes {
	int EOF = 1;
	int NULL_TREE_LOOKAHEAD = 3;
	int ABSTRACT = 4;
	int ACCESSIBLE = 5;
	int ACCESSIBLE_REDUNDANTLY = 6;
	int ALSO = 7;
	int ASSERT = 8;
	int ASSERT_REDUNDANTLY = 9;
	int ASSUME = 10;
	int ASSUME_REDUNDANTLY = 11;
	int ASSIGNABLE = 12;
	int ASSIGNABLE_RED = 13;
	int AXIOM = 14;
	int BEHAVIOR = 15;
	int BEHAVIOUR = 16;
	int BREAKS = 17;
	int BREAK_BEHAVIOR = 18;
	int BREAK_BEHAVIOUR = 19;
	int CAPTURES = 20;
	int CAPTURES_RED = 21;
	int CODE = 22;
	int CODE_BIGINT_MATH = 23;
	int CODE_JAVA_MATH = 24;
	int CODE_SAFE_MATH = 25;
	int CONST = 26;
	int CONSTRAINT = 27;
	int CONSTRAINT_RED = 28;
	int CONTINUES = 29;
	int CONTINUE_BEHAVIOR = 30;
	int CONTINUE_BEHAVIOUR = 31;
	int DECREASES = 32;
	int DECREASES_REDUNDANTLY = 33;
	int DECREASING = 34;
	int DECREASING_REDUNDANTLY = 35;
	int DIVERGES = 36;
	int DIVERGES_RED = 37;
	int DURATION = 38;
	int DURATION_RED = 39;
	int ENSURES = 40;
	int ENSURES_RED = 41;
	int EXCEPTIONAL_BEHAVIOR = 42;
	int EXCEPTIONAL_BEHAVIOUR = 43;
	int EXTRACT = 44;
	int FINAL = 45;
	int FOR_EXAMPLE = 46;
	int FORALL = 47;
	int GHOST = 48;
	int HELPER = 49;
	int IMPLIES_THAT = 50;
	int IN = 51;
	int IN_RED = 52;
	int INITIALLY = 53;
	int INSTANCE = 54;
	int INVARIANT = 55;
	int INVARIANT_RED = 56;
	int LOOP_INVARIANT = 57;
	int LOOP_INVARIANT_RED = 58;
	int MAINTAINING = 59;
	int MAINTAINING_REDUNDANTLY = 60;
	int MAPS = 61;
	int MAPS_RED = 62;
	int MEASURED_BY = 63;
	int MEASURED_BY_REDUNDANTLY = 64;
	int MODEL = 65;
	int MODIFIABLE = 66;
	int MODIFIABLE_RED = 67;
	int MODIFIES = 68;
	int MODIFIES_RED = 69;
	int MONITORED = 70;
	int MONITORS_FOR = 71;
	int NATIVE = 72;
	int NON_NULL = 73;
	int NORMAL_BEHAVIOR = 74;
	int NORMAL_BEHAVIOUR = 75;
	int NOWARN = 76;
	int NULLABLE = 77;
	int NULLABLE_BY_DEFAULT = 78;
	int OLD = 79;
	int PRIVATE = 80;
	int PROTECTED = 81;
	int PUBLIC = 82;
	int PURE = 83;
	int STRICTLY_PURE = 84;
	int READABLE = 85;
	int REPRESENTS = 86;
	int REPRESENTS_RED = 87;
	int REQUIRES = 88;
	int REQUIRES_RED = 89;
	int RETURNS = 90;
	int RETURN_BEHAVIOR = 91;
	int RETURN_BEHAVIOUR = 92;
	int SCOPE_SAFE = 93;
	int ARBITRARY_SCOPE = 94;
	int ARBITRARY_SCOPE_THIS = 95;
	int SET = 96;
	int SIGNALS = 97;
	int SIGNALS_ONLY = 98;
	int SIGNALS_ONLY_RED = 99;
	int SIGNALS_RED = 100;
	int SPEC_BIGINT_MATH = 101;
	int SPEC_JAVA_MATH = 102;
	int SPEC_PROTECTED = 103;
	int SPEC_PUBLIC = 104;
	int SPEC_NAME = 105;
	int SPEC_SAFE_MATH = 106;
	int STATIC = 107;
	int STRICTFP = 108;
	int SYNCHRONIZED = 109;
	int TRANSIENT = 110;
	int UNINITIALIZED = 111;
	int VOLATILE = 112;
	int WHEN = 113;
	int WHEN_RED = 114;
	int WORKING_SPACE = 115;
	int WORKING_SPACE_RED = 116;
	int WORKING_SPACE_SINGLE_ITERATION = 117;
	int WORKING_SPACE_SINGLE_ITERATION_PARAM = 118;
	int WORKING_SPACE_SINGLE_ITERATION_LOCAL = 119;
	int WORKING_SPACE_SINGLE_ITERATION_CONSTRUCTED = 120;
	int WORKING_SPACE_SINGLE_ITERATION_REENTRANT = 121;
	int WORKING_SPACE_CONSTRUCTED = 122;
	int WORKING_SPACE_LOCAL = 123;
	int WORKING_SPACE_CALLER = 124;
	int WORKING_SPACE_REENTRANT = 125;
	int WRITABLE = 126;
	int SL_COMMENT = 127;
	int ML_COMMENT = 128;
	int PARAM_DECL = 129;
	int LETTER = 130;
	int DIGIT = 131;
	int WS = 132;
	int IDENT = 133;
	int PARAM_LIST = 134;
	int NEST_START = 135;
	int NEST_END = 136;
	int BODY = 137;
	int INITIALISER = 138;
	int SEMICOLON = 139;
	int STRING_LITERAL = 140;
	int ESC = 141;
	int EXPRESSION = 142;
	int AXIOM_NAME_BEGIN = 143;
	int AXIOM_NAME_END = 144;
}
