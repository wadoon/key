package evoting;

public class Server2 {
	//public int[] votesForCandidates;
		public Result result;
		public int numberOfCandidates;
		private Voter[] voters;
		private boolean[] ballotCast;
		private int numberOfVoters;
		/*! result | voters ; !*/
		
		public void onCollectBallot(Message message){
			int vote = message.getBallot();
			if((vote>=0) && (vote<numberOfCandidates))
				result.bulletin[vote]++;
		}
		
		
		public Server2(int numberOfCandidates, int numberOfVoters){
			this.numberOfCandidates= numberOfCandidates;
			this.result = new Result(numberOfCandidates);
			this.numberOfVoters = numberOfVoters;
			ballotCast = new boolean[numberOfVoters];
		}
		
		/*@normal_behavior
		 @requires numberOfCandidates>0 && numberOfVoters>0;
		 @requires (\forall int j; 0 <= j && j < numberOfVoters;
                         !ballotCast[j]);	
         	@escapes (\seq_def int i; 0; numberOfCandidates;
	 	(\num_of int j; 0 <= j && j < voters.length; i==voters[j].vote));
         @diverges true;        	 
		@*/
		public void election(){
			result = new Result(numberOfCandidates);
			boolean resultReady = false;
			/*@loop_invariant (\forall int i; 0 <= i && i < numberOfCandidates;
                result.bulletin[i] ==
                (\num_of int j; 0 <= j && j < numberOfVoters;
                          ballotCast[j]
                       && voters[j].vote == i));
             @loop_invariant     resultReady
             	== (\forall int j; 0 <= j && j < numberOfVoters;
                    ballotCast[j]);
             @assignable result.bulletin[*],
        		ballotCast[*], resultReady;
	      @*/
			while(!resultReady){
				int k = Environment.untrustedInput(numberOfCandidates);
				if(0<=k && k<numberOfCandidates && !ballotCast[k]){
					final Voter v = voters[k];
					v.onSendBallot(this);
					ballotCast[k]=true;
				}
				resultReady = checkReady();
			}
		}
		
		private boolean checkReady(){
			for(int i=0;i<numberOfVoters;i++)
				if(!ballotCast[i])
					return false;
			return true;
		}
		public Result publishResult(){
			return result;
		}
}
