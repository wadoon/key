package evoting;

public class Server3 {
	//public int[] votesForCandidates;
		public Result result;
		public int numberOfCandidates;
		private Voter[] voters;
		private int[] voteOrder;
		/*! result | voters  voteOrder; !*/
		
		private void onCollectBallot(Message message){
			int vote = message.getBallot();
			if((vote>=0) && (vote<numberOfCandidates))
				result.bulletin[vote]++;
		}
		
		
		public Server3(int numberOfCandidates){
			this.numberOfCandidates= numberOfCandidates;
			this.result = new Result(numberOfCandidates);
		}
		
		/*@normal_behavior
		 @requires numberOfCandidates>0 && voters.length==voteOrder.length &&
		 (\forall int i; i>=0 && i<voteOrder.length;voteOrder[i]>=0 && voteOrder[i]<voteOrder.length) &&
		 (\forall int i; i>=0 && i<voteOrder.length- 1;(\forall int j; j>i && j<voteOrder.length;voteOrder[i]!=voteOrder[j]));
		@*/
		public void election(){
			result = new Result(numberOfCandidates);
			
			/*@loop_invariant 
	       i>=0 && 
	       i<= voteOrder.length && 
	       (\forall int k; k>=0 && k< numberOfCandidates; 
	         result.bulletin[k] == (\sum int j; 0 <= j && j < i; (k==voters[voteOrder[j]].vote ? 1 : 0)))  ; 
	      @assignable result.bulletin[*],i;
	      @decreases voteOrder.length-i;
	      @*/
			for(int i=0; i < voteOrder.length; i++)
				onCollectBallot(voters[voteOrder[i]].onSendBallot());				
		}
		
		public Result publishResult(){
			return result;
		}
}
