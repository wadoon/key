package evoting;

public class Server {
	//public int[] votesForCandidates;
	public Result result;
	public int numberOfCandidates;
	private Voter[] voters;
	/*! result voters numberOfCandidates | voters ; !*/

	public void onCollectBallot(Message message){
		int vote = message.getBallot();
		if((vote>=0) && (vote<numberOfCandidates))
			result.bulletin[vote]++;
	}
	
	
	public Server(int numberOfCandidates){
		this.numberOfCandidates= numberOfCandidates;
		this.result = new Result(numberOfCandidates);
	}
	
	/*@normal_behavior
	 @requires numberOfCandidates>0;
	 	@escapes (\seq_def int i; 0; numberOfCandidates;
	 	(\num_of int j; 0 <= j && j < voters.length; i==voters[j].vote));
	 	@*/
	public void election(){
		result = new Result(numberOfCandidates);
		
		/*@loop_invariant 
       i>=0 && 
       i<= voters.length && 
       (\forall int k; k>=0 && k< numberOfCandidates; 
         result.bulletin[k] == (\sum int j; 0 <= j && j < i; (k==voters[j].vote ? 1 : 0)))  ; 
      @assignable result.bulletin[*],i;
      @decreases voters.length-i;
      @*/
		for(int i=0; i < voters.length; i++)
			voters[i].onSendBallot(this);		
		clearInfo();
	}
	
	public Result publishResult(){
		return result;
	}
	
	/*@requires true;@*/
	public void clearInfo(){
		voters = null;	
	}
}
