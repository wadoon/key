package pin_integerity;

public class PINIntegrityChecker4Num {
	int m, p1,p2,p3,p4;
	/*! m | p1 p2 p3 p4 ; !*/
	/*@requires 0<=p1 && p1<16 && 0<=p2 && p2<16 && 0<=p3 && p3<16 && 0<=p4 && p4<16 ;@*/
	public void check(){
		if((m>15)|(m<0))
			m=-1;
		else{
			p1=p1%10;
			p2=p2%10;
			p3=p3%10;
			p4=p4%10;
			
			if(((p1 ^ m)<10) & ((p2 ^ m)<10) & ((p3 ^ m)<10) & ((p4 ^ m)<10))
				m=0;
			else if(((p1 ^ m)<10) & ((p2 ^ m)<10) & ((p3 ^ m)<10) & ((p4 ^ m)>10))
				m=1;
			else if(((p1 ^ m)<10) & ((p2 ^ m)<10) & ((p3 ^ m)>10) & ((p4 ^ m)<10))
				m=2;
			else if(((p1 ^ m)<10) & ((p2 ^ m)<10) & ((p3 ^ m)>10) & ((p4 ^ m)>10))
				m=3;
			else if(((p1 ^ m)<10) & ((p2 ^ m)>10) & ((p3 ^ m)<10) & ((p4 ^ m)<10))
				m=4;
			else if(((p1 ^ m)<10) & ((p2 ^ m)>10) & ((p3 ^ m)<10) & ((p4 ^ m)>10))
				m=5;
			else if(((p1 ^ m)<10) & ((p2 ^ m)>10) & ((p3 ^ m)>10) & ((p4 ^ m)<10))
				m=6;
			else if(((p1 ^ m)<10) & ((p2 ^ m)>10) & ((p3 ^ m)>10) & ((p4 ^ m)>10))
				m=7;
			else if(((p1 ^ m)>10) & ((p2 ^ m)<10) & ((p3 ^ m)<10) & ((p4 ^ m)<10))
				m=8;
			else if(((p1 ^ m)>10) & ((p2 ^ m)<10) & ((p3 ^ m)<10) & ((p4 ^ m)>10))
				m=9;
			else if(((p1 ^ m)>10) & ((p2 ^ m)<10) & ((p3 ^ m)>10) & ((p4 ^ m)<10))
				m=10;
			else if(((p1 ^ m)>10) & ((p2 ^ m)<10) & ((p3 ^ m)>10) & ((p4 ^ m)>10))
				m=11;
			else if(((p1 ^ m)>10) & ((p2 ^ m)>10) & ((p3 ^ m)<10) & ((p4 ^ m)<10))
				m=12;
			else if(((p1 ^ m)>10) & ((p2 ^ m)>10) & ((p3 ^ m)<10) & ((p4 ^ m)>10))
				m=13;
			else if(((p1 ^ m)>10) & ((p2 ^ m)>10) & ((p3 ^ m)>10) & ((p4 ^ m)<10))
				m=14;
			else //if(((p1 ^ m)>10) & ((p2 ^ m)>10) & ((p3 ^ m)>10) & ((p4 ^ m)>10))
				m=15;
			
		}
	}
	
}
