package se.gu.svanefalk.testgeneration.core.concurrency.capsules;

import se.gu.svanefalk.testgeneration.core.concurrency.monitor.CaughtException;
import se.gu.svanefalk.testgeneration.core.model.ModelGeneratorException;
import se.gu.svanefalk.testgeneration.core.model.implementation.Model;
import se.gu.svanefalk.testgeneration.core.model.implementation.ModelGenerator;
import se.gu.svanefalk.testgeneration.core.testsuiteabstraction.TestCase;
import de.uka.ilkd.key.symbolic_execution.model.IExecutionNode;

/**
 * Instances of this class are used in order to enable concurrent model
 * generation for several nodes simultaneously.
 * 
 * @author christopher
 * 
 */
public class ModelGenerationCapsule extends AbstractCapsule {

    /**
     * The model generated by the session owned by this capsule.
     */
    Model model = null;

    /**
     * An instance of {@link ModelGenerator} for the purpose of generating
     * concrete fixtures for test cases. Default implementation based on SMT
     * solvers is available, but the user can choose to use her own.
     */
    protected final ModelGenerator modelGenerator = ModelGenerator.getInstance();

    /**
     * The {@link IExecutionNode} instance associated with this capsule.
     */
    private final IExecutionNode node;

    public ModelGenerationCapsule(final IExecutionNode node) {

        this.node = node;
    }

    /**
     * Generates a model for the node in this capsule, and creates a final
     * {@link TestCase} instance to encapsulate it.
     */
    @Override
    public void doWork() {

        /*
         * Attempt to generate a Model. Any exception thrown indicates permanent
         * failure of the ModelGenerator for this particular node, and we hence
         * just kill the AbstractCapsule.
         */
        try {
            model = modelGenerator.generateModel(node);
        } catch (final ModelGeneratorException e) {
            notifyMonitors(new CaughtException(e));
            setThrownException(e);
            return;
        }

        /*
         * ModelGeneration succeeded.
         */
        setSucceeded();
    }

    /**
     * Return the resulting Model created by this AbstractCapsule, if
     * successful.
     * 
     * @return
     */
    public Model getResult() {
        return model;
    }
}
