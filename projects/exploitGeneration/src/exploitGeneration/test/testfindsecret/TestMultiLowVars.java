package testfindsecret;

import org.junit.*;
import junit.framework.TestCase;
import java.lang.reflect.*;
import java.util.*;
import findsecret.MultiLowVars;

public  class TestMultiLowVars extends TestCase {
    
    /**
     * check method magic with noninterference specification: l1 l2
     * | h
     */
    
    @Test
    public void test_magic_self_l1_0 ()
        throws NoSuchFieldException, SecurityException, IllegalArgumentException, IllegalAccessException {
        
        /*
         * Prepare for execution 1
         */
        MultiLowVars self_1 = new MultiLowVars();        
        int self_l2_1 = -1;        
        int self_l1_1 = 0;        
        int self_h_1 = -2;        
        
        /*
         * Configure variable: self_1
         */
        setFieldValue(self_1,"l2",self_l2_1);        
        setFieldValue(self_1,"l1",self_l1_1);        
        setFieldValue(self_1,"h",self_h_1);        
        
        /*
         * Perform execution 1
         */
        self_1.magic();        
        
        /*
         * Get the value of low variable self_l1 after execution 1
         */
        int self_l1_out_1 = ((Integer)getFieldValue(self_1,"l1")).intValue();
        
        /*
         * Prepare for execution 2
         */
        MultiLowVars self_2 = new MultiLowVars();        
        int self_l2_2 = -1;        
        int self_l1_2 = 0;        
        int self_h_2 = -1;        
        
        /*
         * Configure variable: self_2
         */
        setFieldValue(self_2,"l2",self_l2_2);        
        setFieldValue(self_2,"l1",self_l1_2);        
        setFieldValue(self_2,"h",self_h_2);        
        
        /*
         * Perform execution 2
         */
        self_2.magic();        
        
        /*
         * Get the value of low variable self_l1 after execution 2
         */
        int self_l1_out_2 = ((Integer)getFieldValue(self_2,"l1")).intValue();
        
        assertNotNull(self_l1_out_1);        
        assertNotNull(self_l1_out_2);        
        /*
         * assert that the value of low variable self_l1 is not changed after
         * performing two executions
         */
        assertTrue(self_l1_out_1 == self_l1_out_2);        
    }
    
    @Test
    public void test_magic_self_l2_1 ()
        throws NoSuchFieldException, SecurityException, IllegalArgumentException, IllegalAccessException {
        
        /*
         * Prepare for execution 1
         */
        MultiLowVars self_1 = new MultiLowVars();        
        int self_l2_1 = -1;        
        int self_l1_1 = 0;        
        int self_h_1 = -2;        
        
        /*
         * Configure variable: self_1
         */
        setFieldValue(self_1,"l2",self_l2_1);        
        setFieldValue(self_1,"l1",self_l1_1);        
        setFieldValue(self_1,"h",self_h_1);        
        
        /*
         * Perform execution 1
         */
        self_1.magic();        
        
        /*
         * Get the value of low variable self_l2 after execution 1
         */
        int self_l2_out_1 = ((Integer)getFieldValue(self_1,"l2")).intValue();
        
        /*
         * Prepare for execution 2
         */
        MultiLowVars self_2 = new MultiLowVars();        
        int self_l2_2 = -1;        
        int self_l1_2 = 0;        
        int self_h_2 = -1;        
        
        /*
         * Configure variable: self_2
         */
        setFieldValue(self_2,"l2",self_l2_2);        
        setFieldValue(self_2,"l1",self_l1_2);        
        setFieldValue(self_2,"h",self_h_2);        
        
        /*
         * Perform execution 2
         */
        self_2.magic();        
        
        /*
         * Get the value of low variable self_l2 after execution 2
         */
        int self_l2_out_2 = ((Integer)getFieldValue(self_2,"l2")).intValue();
        
        assertNotNull(self_l2_out_1);        
        assertNotNull(self_l2_out_2);        
        /*
         * assert that the value of low variable self_l2 is not changed after
         * performing two executions
         */
        assertTrue(self_l2_out_1 == self_l2_out_2);        
    }
    
    @Test
    public void test_magic_self_l1_2 ()
        throws NoSuchFieldException, SecurityException, IllegalArgumentException, IllegalAccessException {
        
        /*
         * Prepare for execution 1
         */
        MultiLowVars self_1 = new MultiLowVars();        
        int self_l2_1 = -1;        
        int self_l1_1 = 0;        
        int self_h_1 = -2;        
        
        /*
         * Configure variable: self_1
         */
        setFieldValue(self_1,"l2",self_l2_1);        
        setFieldValue(self_1,"l1",self_l1_1);        
        setFieldValue(self_1,"h",self_h_1);        
        
        /*
         * Perform execution 1
         */
        self_1.magic();        
        
        /*
         * Get the value of low variable self_l1 after execution 1
         */
        int self_l1_out_1 = ((Integer)getFieldValue(self_1,"l1")).intValue();
        
        /*
         * Prepare for execution 2
         */
        MultiLowVars self_2 = new MultiLowVars();        
        int self_l2_2 = -1;        
        int self_l1_2 = 0;        
        int self_h_2 = 0;        
        
        /*
         * Configure variable: self_2
         */
        setFieldValue(self_2,"l2",self_l2_2);        
        setFieldValue(self_2,"l1",self_l1_2);        
        setFieldValue(self_2,"h",self_h_2);        
        
        /*
         * Perform execution 2
         */
        self_2.magic();        
        
        /*
         * Get the value of low variable self_l1 after execution 2
         */
        int self_l1_out_2 = ((Integer)getFieldValue(self_2,"l1")).intValue();
        
        assertNotNull(self_l1_out_1);        
        assertNotNull(self_l1_out_2);        
        /*
         * assert that the value of low variable self_l1 is not changed after
         * performing two executions
         */
        assertTrue(self_l1_out_1 == self_l1_out_2);        
    }
    
    @Test
    public void test_magic_self_l2_3 ()
        throws NoSuchFieldException, SecurityException, IllegalArgumentException, IllegalAccessException {
        
        /*
         * Prepare for execution 1
         */
        MultiLowVars self_1 = new MultiLowVars();        
        int self_l2_1 = -1;        
        int self_l1_1 = 0;        
        int self_h_1 = -2;        
        
        /*
         * Configure variable: self_1
         */
        setFieldValue(self_1,"l2",self_l2_1);        
        setFieldValue(self_1,"l1",self_l1_1);        
        setFieldValue(self_1,"h",self_h_1);        
        
        /*
         * Perform execution 1
         */
        self_1.magic();        
        
        /*
         * Get the value of low variable self_l2 after execution 1
         */
        int self_l2_out_1 = ((Integer)getFieldValue(self_1,"l2")).intValue();
        
        /*
         * Prepare for execution 2
         */
        MultiLowVars self_2 = new MultiLowVars();        
        int self_l2_2 = -1;        
        int self_l1_2 = 0;        
        int self_h_2 = 0;        
        
        /*
         * Configure variable: self_2
         */
        setFieldValue(self_2,"l2",self_l2_2);        
        setFieldValue(self_2,"l1",self_l1_2);        
        setFieldValue(self_2,"h",self_h_2);        
        
        /*
         * Perform execution 2
         */
        self_2.magic();        
        
        /*
         * Get the value of low variable self_l2 after execution 2
         */
        int self_l2_out_2 = ((Integer)getFieldValue(self_2,"l2")).intValue();
        
        assertNotNull(self_l2_out_1);        
        assertNotNull(self_l2_out_2);        
        /*
         * assert that the value of low variable self_l2 is not changed after
         * performing two executions
         */
        assertTrue(self_l2_out_1 == self_l2_out_2);        
    }
    
    @Test
    public void test_magic_self_l2_4 ()
        throws NoSuchFieldException, SecurityException, IllegalArgumentException, IllegalAccessException {
        
        /*
         * Prepare for execution 1
         */
        MultiLowVars self_1 = new MultiLowVars();        
        int self_l2_1 = -1;        
        int self_l1_1 = 0;        
        int self_h_1 = -1;        
        
        /*
         * Configure variable: self_1
         */
        setFieldValue(self_1,"l2",self_l2_1);        
        setFieldValue(self_1,"l1",self_l1_1);        
        setFieldValue(self_1,"h",self_h_1);        
        
        /*
         * Perform execution 1
         */
        self_1.magic();        
        
        /*
         * Get the value of low variable self_l2 after execution 1
         */
        int self_l2_out_1 = ((Integer)getFieldValue(self_1,"l2")).intValue();
        
        /*
         * Prepare for execution 2
         */
        MultiLowVars self_2 = new MultiLowVars();        
        int self_l2_2 = -1;        
        int self_l1_2 = 0;        
        int self_h_2 = 0;        
        
        /*
         * Configure variable: self_2
         */
        setFieldValue(self_2,"l2",self_l2_2);        
        setFieldValue(self_2,"l1",self_l1_2);        
        setFieldValue(self_2,"h",self_h_2);        
        
        /*
         * Perform execution 2
         */
        self_2.magic();        
        
        /*
         * Get the value of low variable self_l2 after execution 2
         */
        int self_l2_out_2 = ((Integer)getFieldValue(self_2,"l2")).intValue();
        
        assertNotNull(self_l2_out_1);        
        assertNotNull(self_l2_out_2);        
        /*
         * assert that the value of low variable self_l2 is not changed after
         * performing two executions
         */
        assertTrue(self_l2_out_1 == self_l2_out_2);        
    }
    
    @Test
    public void test_magic_self_l1_5 ()
        throws NoSuchFieldException, SecurityException, IllegalArgumentException, IllegalAccessException {
        
        /*
         * Prepare for execution 1
         */
        MultiLowVars self_1 = new MultiLowVars();        
        int self_l2_1 = -1;        
        int self_l1_1 = 0;        
        int self_h_1 = -1;        
        
        /*
         * Configure variable: self_1
         */
        setFieldValue(self_1,"l2",self_l2_1);        
        setFieldValue(self_1,"l1",self_l1_1);        
        setFieldValue(self_1,"h",self_h_1);        
        
        /*
         * Perform execution 1
         */
        self_1.magic();        
        
        /*
         * Get the value of low variable self_l1 after execution 1
         */
        int self_l1_out_1 = ((Integer)getFieldValue(self_1,"l1")).intValue();
        
        /*
         * Prepare for execution 2
         */
        MultiLowVars self_2 = new MultiLowVars();        
        int self_l2_2 = -1;        
        int self_l1_2 = 0;        
        int self_h_2 = 0;        
        
        /*
         * Configure variable: self_2
         */
        setFieldValue(self_2,"l2",self_l2_2);        
        setFieldValue(self_2,"l1",self_l1_2);        
        setFieldValue(self_2,"h",self_h_2);        
        
        /*
         * Perform execution 2
         */
        self_2.magic();        
        
        /*
         * Get the value of low variable self_l1 after execution 2
         */
        int self_l1_out_2 = ((Integer)getFieldValue(self_2,"l1")).intValue();
        
        assertNotNull(self_l1_out_1);        
        assertNotNull(self_l1_out_2);        
        /*
         * assert that the value of low variable self_l1 is not changed after
         * performing two executions
         */
        assertTrue(self_l1_out_1 == self_l1_out_2);        
    }
    
    /**
     * Sets a field of some object to a given value
     */
    private void setFieldValue (Object instance, String fieldName, Object value)
        throws NoSuchFieldException, SecurityException, IllegalArgumentException, IllegalAccessException {
        Field field = instance.getClass().getDeclaredField(fieldName);        
        field.setAccessible(true);        
        field.set(instance, value );        
    }
    
    /**
     * Gets the field of a given object
     */
    private <T> T getFieldValue (Object instance, String fieldName)
        throws NoSuchFieldException, SecurityException, IllegalArgumentException, IllegalAccessException {
        Field field = instance.getClass().getDeclaredField(fieldName);        
        field.setAccessible(true);        
        return (T)field.get(instance);        
    }
}
