package hackexperiment_esorics16;
import java.io.*;
import java.lang.reflect.*;
import java.util.*;
import experiment_esorics16.EWallet;

public  class EWallet_check_SecretInferSimulator {
    public static void main (String[] args)
        throws NoSuchFieldException, SecurityException, IllegalArgumentException, IllegalAccessException, NumberFormatException, IOException {
        EWallet self = new EWallet();        
        Long self_l = new Long(0);        
        Long self_h = new Long(0);        
        Long result = new Long(0);        
        
        Map<String, Object> mapObj = new HashMap<String,Object>();        
        mapObj.put("self", self);        
        mapObj.put("self_l", self_l);        
        mapObj.put("self_h", self_h);        
        mapObj.put("result", result);        
        
        String highInputFile = "/Users/huydo/Working/key/projects/exploitGeneration/src/exploitGeneration/test/hackexperiment_esorics16/EWallet_check_HighInput.in";        
        String lowInputFile = "/Users/huydo/Working/key/projects/exploitGeneration/src/exploitGeneration/test/hackexperiment_esorics16/EWallet_check_LowInput.in";        
        readInputValuesFromFile(highInputFile,mapObj);        
        readInputValuesFromFile(lowInputFile,mapObj);        
        
        
        /*
         * Configure variable: self
         */
        setFieldValue(self,"l",((Long)mapObj.get("self_l")).longValue());        
        setFieldValue(self,"h",((Long)mapObj.get("self_h")).longValue());        
        
        /*
         * Perform execution
         */
        self.check();        
        
        System.out.println("1");        
        
        /*
         * Get the value of low variable self_l after execution
         */
        long self_l_out = ((Long)getFieldValue(self,"l")).longValue();
        
        System.out.println("self_l:" + self_l_out);        
    }
    
    /**
     * Gets the field of a given object
     */
    private static <T> T getFieldValue (Object instance, String fieldName)
        throws NoSuchFieldException, SecurityException, IllegalArgumentException, IllegalAccessException {
        Field field = instance.getClass().getDeclaredField(fieldName);        
        field.setAccessible(true);        
        return (T)field.get(instance);        
    }
    
    /**
     * Sets a field of some object to a given value
     */
    private static void setFieldValue (Object instance, String fieldName, Object value)
        throws NoSuchFieldException, SecurityException, IllegalArgumentException, IllegalAccessException {
        Field field = instance.getClass().getDeclaredField(fieldName);        
        field.setAccessible(true);        
        field.set(instance, value );        
    }
    private static void readInputValuesFromFile (String fileName, Map<String, Object> mapObj)
        throws NumberFormatException, IOException {
        BufferedReader br = new BufferedReader(new FileReader(new File(fileName)));        
        int n = Integer.parseInt(br.readLine());        
        for(int i=0;i<n;i++){        
            String assignment = br.readLine();            
            String valueString[] = assignment.split(":");            
            String varName = valueString[0].trim();            
            Object var = mapObj.get(varName);            
            if(var instanceof Long)            
                var = Long.valueOf(valueString[1].trim());                
            else            
                var = Integer.valueOf(valueString[1].trim());                
            mapObj.put(varName, var);            
        }        
        br.close();        
    }
}
