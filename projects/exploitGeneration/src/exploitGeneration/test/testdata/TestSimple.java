package testdata;

import org.junit.*;
import junit.framework.TestCase;
import java.lang.reflect.*;
import java.util.*;
import data.Simple;

public  class TestSimple extends TestCase {
    
    /**
     * checking method magic via specification: z t | x y
     */
    
    @Test
    public void testmagic0 ()
        throws NoSuchFieldException, SecurityException, IllegalArgumentException, IllegalAccessException {
        
        /*
         * Preparing for running 1
         */
        Simple self_1 = new Simple();        
        int self_x_1 = 1;        
        int self_y_1 = 1;        
        int self_z_1 = 0;        
        int self_t_1 = 0;        
        int k_1 = 51;        
        int q_1 = 51;        
        
        /*
         * Configuring variable: self_1
         */
        setFieldValue(self_1,"x",self_x_1);        
        setFieldValue(self_1,"y",self_y_1);        
        setFieldValue(self_1,"z",self_z_1);        
        setFieldValue(self_1,"t",self_t_1);        
        
        /*
         * Preparing for running 2
         */
        Simple self_2 = new Simple();        
        int self_x_2 = 2;        
        int self_y_2 = 2;        
        int self_z_2 = 0;        
        int self_t_2 = 0;        
        int k_2 = 51;        
        int q_2 = 51;        
        
        /*
         * Configuring variable: self_2
         */
        setFieldValue(self_2,"x",self_x_2);        
        setFieldValue(self_2,"y",self_y_2);        
        setFieldValue(self_2,"z",self_z_2);        
        setFieldValue(self_2,"t",self_t_2);        
        
        /*
         * Execute running 1
         */
        self_1.magic(k_1,q_1);        
        
        /*
         * Execute running 2
         */
        self_2.magic(k_2,q_2);        
        
        /*
         * Assert the difference in the value of low variable's [z, t] after performing
         * two executions
         */
        assertFalse((getFieldValue(self_1, "z") == getFieldValue(self_2, "z")) && (getFieldValue(self_1, "t") == getFieldValue(self_2, "t")));        
    }
    
    /**
     * checking method magic via specification: x | y
     */
    
    @Test
    public void testmagic1 ()
        throws NoSuchFieldException, SecurityException, IllegalArgumentException, IllegalAccessException {
        
        /*
         * Preparing for running 1
         */
        Simple self_1 = new Simple();        
        int self_x_1 = 1;        
        int self_y_1 = 1;        
        int self_z_1 = 0;        
        int self_t_1 = 0;        
        int k_1 = 51;        
        int q_1 = 51;        
        
        /*
         * Configuring variable: self_1
         */
        setFieldValue(self_1,"x",self_x_1);        
        setFieldValue(self_1,"y",self_y_1);        
        setFieldValue(self_1,"z",self_z_1);        
        setFieldValue(self_1,"t",self_t_1);        
        
        /*
         * Preparing for running 2
         */
        Simple self_2 = new Simple();        
        int self_x_2 = 1;        
        int self_y_2 = 2;        
        int self_z_2 = 0;        
        int self_t_2 = 0;        
        int k_2 = 51;        
        int q_2 = 51;        
        
        /*
         * Configuring variable: self_2
         */
        setFieldValue(self_2,"x",self_x_2);        
        setFieldValue(self_2,"y",self_y_2);        
        setFieldValue(self_2,"z",self_z_2);        
        setFieldValue(self_2,"t",self_t_2);        
        
        /*
         * Execute running 1
         */
        self_1.magic(k_1,q_1);        
        
        /*
         * Execute running 2
         */
        self_2.magic(k_2,q_2);        
        
        /*
         * Assert the difference in the value of low variable's [x] after performing
         * two executions
         */
        assertFalse((getFieldValue(self_1, "x") == getFieldValue(self_2, "x")));        
    }
    
    /**
     * Sets a field of some object to a given value
     */
    private void setFieldValue (Object instance, String fieldName, Object value)
        throws NoSuchFieldException, SecurityException, IllegalArgumentException, IllegalAccessException {
        Field field = instance.getClass().getDeclaredField(fieldName);        
        field.setAccessible(true);        
        field.set(instance, value );        
    }
    
    /**
     * Gets the field of a given object
     */
    private <T> T getFieldValue (Object instance, String fieldName)
        throws NoSuchFieldException, SecurityException, IllegalArgumentException, IllegalAccessException {
        Field field = instance.getClass().getDeclaredField(fieldName);        
        field.setAccessible(true);        
        return (T)field.get(instance);        
    }
}
