package testdata;

import org.junit.*;
import junit.framework.TestCase;
import java.lang.reflect.*;
import java.util.*;
import data.IntegerNI;

public  class TestIntegerNI extends TestCase {
    
    /**
     * checking method magic via specification: l1 l2 | m h1 h2
     */
    
    @Test
    public void testmagic0 ()
        throws NoSuchFieldException, SecurityException, IllegalArgumentException, IllegalAccessException {
        
        /*
         * Preparing for running 1
         */
        IntegerNI self_1 = new IntegerNI();        
        int self_h1_1 = 0;        
        int self_h2_1 = 1;        
        int self_m_1 = 1;        
        int self_l1_1 = 0;        
        int self_l2_1 = 0;        
        int k_1 = 0;        
        
        /*
         * Configuring variable: self_1
         */
        setFieldValue(self_1,"h1",self_h1_1);        
        setFieldValue(self_1,"h2",self_h2_1);        
        setFieldValue(self_1,"m",self_m_1);        
        setFieldValue(self_1,"l1",self_l1_1);        
        setFieldValue(self_1,"l2",self_l2_1);        
        
        /*
         * Preparing for running 2
         */
        IntegerNI self_2 = new IntegerNI();        
        int self_h1_2 = 0;        
        int self_h2_2 = 0;        
        int self_m_2 = 2;        
        int self_l1_2 = 0;        
        int self_l2_2 = 0;        
        int k_2 = 0;        
        
        /*
         * Configuring variable: self_2
         */
        setFieldValue(self_2,"h1",self_h1_2);        
        setFieldValue(self_2,"h2",self_h2_2);        
        setFieldValue(self_2,"m",self_m_2);        
        setFieldValue(self_2,"l1",self_l1_2);        
        setFieldValue(self_2,"l2",self_l2_2);        
        
        /*
         * Execute running 1
         */
        self_1.magic(k_1);        
        
        /*
         * Execute running 2
         */
        self_2.magic(k_2);        
        
        /*
         * Assert the difference in the value of low variable's [l1, l2] after
         * performing two executions
         */
        assertFalse((getFieldValue(self_1, "l1") == getFieldValue(self_2, "l1")) && (getFieldValue(self_1, "l2") == getFieldValue(self_2, "l2")));        
    }
    
    @Test
    public void testmagic1 ()
        throws NoSuchFieldException, SecurityException, IllegalArgumentException, IllegalAccessException {
        
        /*
         * Preparing for running 1
         */
        IntegerNI self_1 = new IntegerNI();        
        int self_h1_1 = -3;        
        int self_h2_1 = -1;        
        int self_m_1 = 1;        
        int self_l1_1 = 0;        
        int self_l2_1 = 0;        
        int k_1 = 0;        
        
        /*
         * Configuring variable: self_1
         */
        setFieldValue(self_1,"h1",self_h1_1);        
        setFieldValue(self_1,"h2",self_h2_1);        
        setFieldValue(self_1,"m",self_m_1);        
        setFieldValue(self_1,"l1",self_l1_1);        
        setFieldValue(self_1,"l2",self_l2_1);        
        
        /*
         * Preparing for running 2
         */
        IntegerNI self_2 = new IntegerNI();        
        int self_h1_2 = -2;        
        int self_h2_2 = 0;        
        int self_m_2 = 0;        
        int self_l1_2 = 0;        
        int self_l2_2 = 0;        
        int k_2 = 0;        
        
        /*
         * Configuring variable: self_2
         */
        setFieldValue(self_2,"h1",self_h1_2);        
        setFieldValue(self_2,"h2",self_h2_2);        
        setFieldValue(self_2,"m",self_m_2);        
        setFieldValue(self_2,"l1",self_l1_2);        
        setFieldValue(self_2,"l2",self_l2_2);        
        
        /*
         * Execute running 1
         */
        self_1.magic(k_1);        
        
        /*
         * Execute running 2
         */
        self_2.magic(k_2);        
        
        /*
         * Assert the difference in the value of low variable's [l1, l2] after
         * performing two executions
         */
        assertFalse((getFieldValue(self_1, "l1") == getFieldValue(self_2, "l1")) && (getFieldValue(self_1, "l2") == getFieldValue(self_2, "l2")));        
    }
    
    @Test
    public void testmagic2 ()
        throws NoSuchFieldException, SecurityException, IllegalArgumentException, IllegalAccessException {
        
        /*
         * Preparing for running 1
         */
        IntegerNI self_1 = new IntegerNI();        
        int self_h1_1 = 0;        
        int self_h2_1 = 1;        
        int self_m_1 = 0;        
        int self_l1_1 = 0;        
        int self_l2_1 = 0;        
        int k_1 = 1;        
        
        /*
         * Configuring variable: self_1
         */
        setFieldValue(self_1,"h1",self_h1_1);        
        setFieldValue(self_1,"h2",self_h2_1);        
        setFieldValue(self_1,"m",self_m_1);        
        setFieldValue(self_1,"l1",self_l1_1);        
        setFieldValue(self_1,"l2",self_l2_1);        
        
        /*
         * Preparing for running 2
         */
        IntegerNI self_2 = new IntegerNI();        
        int self_h1_2 = 0;        
        int self_h2_2 = 0;        
        int self_m_2 = 1;        
        int self_l1_2 = 0;        
        int self_l2_2 = 0;        
        int k_2 = 1;        
        
        /*
         * Configuring variable: self_2
         */
        setFieldValue(self_2,"h1",self_h1_2);        
        setFieldValue(self_2,"h2",self_h2_2);        
        setFieldValue(self_2,"m",self_m_2);        
        setFieldValue(self_2,"l1",self_l1_2);        
        setFieldValue(self_2,"l2",self_l2_2);        
        
        /*
         * Execute running 1
         */
        self_1.magic(k_1);        
        
        /*
         * Execute running 2
         */
        self_2.magic(k_2);        
        
        /*
         * Assert the difference in the value of low variable's [l1, l2] after
         * performing two executions
         */
        assertFalse((getFieldValue(self_1, "l1") == getFieldValue(self_2, "l1")) && (getFieldValue(self_1, "l2") == getFieldValue(self_2, "l2")));        
    }
    
    /**
     * checking method magic via specification: m | h1 h2
     */
    
    @Test
    public void testmagic3 ()
        throws NoSuchFieldException, SecurityException, IllegalArgumentException, IllegalAccessException {
        
        /*
         * Preparing for running 1
         */
        IntegerNI self_1 = new IntegerNI();        
        int self_h1_1 = -1;        
        int self_h2_1 = -1;        
        int self_m_1 = 1;        
        int self_l1_1 = 0;        
        int self_l2_1 = 0;        
        int k_1 = 0;        
        
        /*
         * Configuring variable: self_1
         */
        setFieldValue(self_1,"h1",self_h1_1);        
        setFieldValue(self_1,"h2",self_h2_1);        
        setFieldValue(self_1,"m",self_m_1);        
        setFieldValue(self_1,"l1",self_l1_1);        
        setFieldValue(self_1,"l2",self_l2_1);        
        
        /*
         * Preparing for running 2
         */
        IntegerNI self_2 = new IntegerNI();        
        int self_h1_2 = 0;        
        int self_h2_2 = 0;        
        int self_m_2 = 1;        
        int self_l1_2 = 0;        
        int self_l2_2 = 0;        
        int k_2 = 0;        
        
        /*
         * Configuring variable: self_2
         */
        setFieldValue(self_2,"h1",self_h1_2);        
        setFieldValue(self_2,"h2",self_h2_2);        
        setFieldValue(self_2,"m",self_m_2);        
        setFieldValue(self_2,"l1",self_l1_2);        
        setFieldValue(self_2,"l2",self_l2_2);        
        
        /*
         * Execute running 1
         */
        self_1.magic(k_1);        
        
        /*
         * Execute running 2
         */
        self_2.magic(k_2);        
        
        /*
         * Assert the difference in the value of low variable's [m] after performing
         * two executions
         */
        assertFalse((getFieldValue(self_1, "m") == getFieldValue(self_2, "m")));        
    }
    
    @Test
    public void testmagic4 ()
        throws NoSuchFieldException, SecurityException, IllegalArgumentException, IllegalAccessException {
        
        /*
         * Preparing for running 1
         */
        IntegerNI self_1 = new IntegerNI();        
        int self_h1_1 = -2;        
        int self_h2_1 = -1;        
        int self_m_1 = 0;        
        int self_l1_1 = 0;        
        int self_l2_1 = 0;        
        int k_1 = 0;        
        
        /*
         * Configuring variable: self_1
         */
        setFieldValue(self_1,"h1",self_h1_1);        
        setFieldValue(self_1,"h2",self_h2_1);        
        setFieldValue(self_1,"m",self_m_1);        
        setFieldValue(self_1,"l1",self_l1_1);        
        setFieldValue(self_1,"l2",self_l2_1);        
        
        /*
         * Preparing for running 2
         */
        IntegerNI self_2 = new IntegerNI();        
        int self_h1_2 = 0;        
        int self_h2_2 = 0;        
        int self_m_2 = 0;        
        int self_l1_2 = 0;        
        int self_l2_2 = 0;        
        int k_2 = 0;        
        
        /*
         * Configuring variable: self_2
         */
        setFieldValue(self_2,"h1",self_h1_2);        
        setFieldValue(self_2,"h2",self_h2_2);        
        setFieldValue(self_2,"m",self_m_2);        
        setFieldValue(self_2,"l1",self_l1_2);        
        setFieldValue(self_2,"l2",self_l2_2);        
        
        /*
         * Execute running 1
         */
        self_1.magic(k_1);        
        
        /*
         * Execute running 2
         */
        self_2.magic(k_2);        
        
        /*
         * Assert the difference in the value of low variable's [m] after performing
         * two executions
         */
        assertFalse((getFieldValue(self_1, "m") == getFieldValue(self_2, "m")));        
    }
    
    /**
     * checking method miracle via specification: l1 l2 | m h1 h2
     */
    
    @Test
    public void testmiracle5 ()
        throws NoSuchFieldException, SecurityException, IllegalArgumentException, IllegalAccessException {
        
        /*
         * Preparing for running 1
         */
        IntegerNI self_0_1 = new IntegerNI();        
        int self_0_h1_1 = -1;        
        int self_0_h2_1 = 0;        
        int self_0_m_1 = 0;        
        int self_0_l1_1 = 0;        
        int self_0_l2_1 = 0;        
        int p_1 = 1;        
        int q_1 = 1;        
        
        /*
         * Configuring variable: self_0_1
         */
        setFieldValue(self_0_1,"h1",self_0_h1_1);        
        setFieldValue(self_0_1,"h2",self_0_h2_1);        
        setFieldValue(self_0_1,"m",self_0_m_1);        
        setFieldValue(self_0_1,"l1",self_0_l1_1);        
        setFieldValue(self_0_1,"l2",self_0_l2_1);        
        
        /*
         * Preparing for running 2
         */
        IntegerNI self_0_2 = new IntegerNI();        
        int self_0_h1_2 = 0;        
        int self_0_h2_2 = 1;        
        int self_0_m_2 = 0;        
        int self_0_l1_2 = 0;        
        int self_0_l2_2 = 0;        
        int p_2 = 1;        
        int q_2 = 1;        
        
        /*
         * Configuring variable: self_0_2
         */
        setFieldValue(self_0_2,"h1",self_0_h1_2);        
        setFieldValue(self_0_2,"h2",self_0_h2_2);        
        setFieldValue(self_0_2,"m",self_0_m_2);        
        setFieldValue(self_0_2,"l1",self_0_l1_2);        
        setFieldValue(self_0_2,"l2",self_0_l2_2);        
        
        /*
         * Execute running 1
         */
        self_0_1.miracle(p_1,q_1);        
        
        /*
         * Execute running 2
         */
        self_0_2.miracle(p_2,q_2);        
        
        /*
         * Assert the difference in the value of low variable's [l1, l2] after
         * performing two executions
         */
        assertFalse((getFieldValue(self_0_1, "l1") == getFieldValue(self_0_2, "l1")) && (getFieldValue(self_0_1, "l2") == getFieldValue(self_0_2, "l2")));        
    }
    
    @Test
    public void testmiracle6 ()
        throws NoSuchFieldException, SecurityException, IllegalArgumentException, IllegalAccessException {
        
        /*
         * Preparing for running 1
         */
        IntegerNI self_0_1 = new IntegerNI();        
        int self_0_h1_1 = -1;        
        int self_0_h2_1 = -2;        
        int self_0_m_1 = 0;        
        int self_0_l1_1 = 0;        
        int self_0_l2_1 = 0;        
        int p_1 = 0;        
        int q_1 = 0;        
        
        /*
         * Configuring variable: self_0_1
         */
        setFieldValue(self_0_1,"h1",self_0_h1_1);        
        setFieldValue(self_0_1,"h2",self_0_h2_1);        
        setFieldValue(self_0_1,"m",self_0_m_1);        
        setFieldValue(self_0_1,"l1",self_0_l1_1);        
        setFieldValue(self_0_1,"l2",self_0_l2_1);        
        
        /*
         * Preparing for running 2
         */
        IntegerNI self_0_2 = new IntegerNI();        
        int self_0_h1_2 = 1;        
        int self_0_h2_2 = -1;        
        int self_0_m_2 = 0;        
        int self_0_l1_2 = 0;        
        int self_0_l2_2 = 0;        
        int p_2 = 0;        
        int q_2 = 0;        
        
        /*
         * Configuring variable: self_0_2
         */
        setFieldValue(self_0_2,"h1",self_0_h1_2);        
        setFieldValue(self_0_2,"h2",self_0_h2_2);        
        setFieldValue(self_0_2,"m",self_0_m_2);        
        setFieldValue(self_0_2,"l1",self_0_l1_2);        
        setFieldValue(self_0_2,"l2",self_0_l2_2);        
        
        /*
         * Execute running 1
         */
        self_0_1.miracle(p_1,q_1);        
        
        /*
         * Execute running 2
         */
        self_0_2.miracle(p_2,q_2);        
        
        /*
         * Assert the difference in the value of low variable's [l1, l2] after
         * performing two executions
         */
        assertFalse((getFieldValue(self_0_1, "l1") == getFieldValue(self_0_2, "l1")) && (getFieldValue(self_0_1, "l2") == getFieldValue(self_0_2, "l2")));        
    }
    
    @Test
    public void testmiracle7 ()
        throws NoSuchFieldException, SecurityException, IllegalArgumentException, IllegalAccessException {
        
        /*
         * Preparing for running 1
         */
        IntegerNI self_0_1 = new IntegerNI();        
        int self_0_h1_1 = 0;        
        int self_0_h2_1 = 0;        
        int self_0_m_1 = 0;        
        int self_0_l1_1 = 0;        
        int self_0_l2_1 = 0;        
        int p_1 = 0;        
        int q_1 = -1;        
        
        /*
         * Configuring variable: self_0_1
         */
        setFieldValue(self_0_1,"h1",self_0_h1_1);        
        setFieldValue(self_0_1,"h2",self_0_h2_1);        
        setFieldValue(self_0_1,"m",self_0_m_1);        
        setFieldValue(self_0_1,"l1",self_0_l1_1);        
        setFieldValue(self_0_1,"l2",self_0_l2_1);        
        
        /*
         * Preparing for running 2
         */
        IntegerNI self_0_2 = new IntegerNI();        
        int self_0_h1_2 = 1;        
        int self_0_h2_2 = -1;        
        int self_0_m_2 = 0;        
        int self_0_l1_2 = 0;        
        int self_0_l2_2 = 0;        
        int p_2 = 0;        
        int q_2 = -1;        
        
        /*
         * Configuring variable: self_0_2
         */
        setFieldValue(self_0_2,"h1",self_0_h1_2);        
        setFieldValue(self_0_2,"h2",self_0_h2_2);        
        setFieldValue(self_0_2,"m",self_0_m_2);        
        setFieldValue(self_0_2,"l1",self_0_l1_2);        
        setFieldValue(self_0_2,"l2",self_0_l2_2);        
        
        /*
         * Execute running 1
         */
        self_0_1.miracle(p_1,q_1);        
        
        /*
         * Execute running 2
         */
        self_0_2.miracle(p_2,q_2);        
        
        /*
         * Assert the difference in the value of low variable's [l1, l2] after
         * performing two executions
         */
        assertFalse((getFieldValue(self_0_1, "l1") == getFieldValue(self_0_2, "l1")) && (getFieldValue(self_0_1, "l2") == getFieldValue(self_0_2, "l2")));        
    }
    
    /**
     * checking method miracle via specification: m | h1 h2
     */
    
    @Test
    public void testmiracle8 ()
        throws NoSuchFieldException, SecurityException, IllegalArgumentException, IllegalAccessException {
        
        /*
         * Preparing for running 1
         */
        IntegerNI self_0_1 = new IntegerNI();        
        int self_0_h1_1 = -1;        
        int self_0_h2_1 = -1;        
        int self_0_m_1 = 0;        
        int self_0_l1_1 = 0;        
        int self_0_l2_1 = 0;        
        int p_1 = 2;        
        int q_1 = 1;        
        
        /*
         * Configuring variable: self_0_1
         */
        setFieldValue(self_0_1,"h1",self_0_h1_1);        
        setFieldValue(self_0_1,"h2",self_0_h2_1);        
        setFieldValue(self_0_1,"m",self_0_m_1);        
        setFieldValue(self_0_1,"l1",self_0_l1_1);        
        setFieldValue(self_0_1,"l2",self_0_l2_1);        
        
        /*
         * Preparing for running 2
         */
        IntegerNI self_0_2 = new IntegerNI();        
        int self_0_h1_2 = 1;        
        int self_0_h2_2 = 2;        
        int self_0_m_2 = 0;        
        int self_0_l1_2 = 0;        
        int self_0_l2_2 = 0;        
        int p_2 = 2;        
        int q_2 = 1;        
        
        /*
         * Configuring variable: self_0_2
         */
        setFieldValue(self_0_2,"h1",self_0_h1_2);        
        setFieldValue(self_0_2,"h2",self_0_h2_2);        
        setFieldValue(self_0_2,"m",self_0_m_2);        
        setFieldValue(self_0_2,"l1",self_0_l1_2);        
        setFieldValue(self_0_2,"l2",self_0_l2_2);        
        
        /*
         * Execute running 1
         */
        self_0_1.miracle(p_1,q_1);        
        
        /*
         * Execute running 2
         */
        self_0_2.miracle(p_2,q_2);        
        
        /*
         * Assert the difference in the value of low variable's [m] after performing
         * two executions
         */
        assertFalse((getFieldValue(self_0_1, "m") == getFieldValue(self_0_2, "m")));        
    }
    
    @Test
    public void testmiracle9 ()
        throws NoSuchFieldException, SecurityException, IllegalArgumentException, IllegalAccessException {
        
        /*
         * Preparing for running 1
         */
        IntegerNI self_0_1 = new IntegerNI();        
        int self_0_h1_1 = 0;        
        int self_0_h2_1 = -1;        
        int self_0_m_1 = 0;        
        int self_0_l1_1 = 0;        
        int self_0_l2_1 = 0;        
        int p_1 = 1;        
        int q_1 = 1;        
        
        /*
         * Configuring variable: self_0_1
         */
        setFieldValue(self_0_1,"h1",self_0_h1_1);        
        setFieldValue(self_0_1,"h2",self_0_h2_1);        
        setFieldValue(self_0_1,"m",self_0_m_1);        
        setFieldValue(self_0_1,"l1",self_0_l1_1);        
        setFieldValue(self_0_1,"l2",self_0_l2_1);        
        
        /*
         * Preparing for running 2
         */
        IntegerNI self_0_2 = new IntegerNI();        
        int self_0_h1_2 = -5;        
        int self_0_h2_2 = 5;        
        int self_0_m_2 = 1;        
        int self_0_l1_2 = 7;        
        int self_0_l2_2 = 8;        
        int p_2 = 0;        
        int q_2 = 0;        
        
        /*
         * Configuring variable: self_0_2
         */
        setFieldValue(self_0_2,"h1",self_0_h1_2);        
        setFieldValue(self_0_2,"h2",self_0_h2_2);        
        setFieldValue(self_0_2,"m",self_0_m_2);        
        setFieldValue(self_0_2,"l1",self_0_l1_2);        
        setFieldValue(self_0_2,"l2",self_0_l2_2);        
        
        /*
         * Execute running 1
         */
        self_0_1.miracle(p_1,q_1);        
        
        /*
         * Execute running 2
         */
        self_0_2.miracle(p_2,q_2);        
        
        /*
         * Assert the difference in the value of low variable's [m] after performing
         * two executions
         */
        assertFalse((getFieldValue(self_0_1, "m") == getFieldValue(self_0_2, "m")));        
    }
    
    @Test
    public void testmiracle10 ()
        throws NoSuchFieldException, SecurityException, IllegalArgumentException, IllegalAccessException {
        
        /*
         * Preparing for running 1
         */
        IntegerNI self_0_1 = new IntegerNI();        
        int self_0_h1_1 = 0;        
        int self_0_h2_1 = 0;        
        int self_0_m_1 = 0;        
        int self_0_l1_1 = 0;        
        int self_0_l2_1 = 0;        
        int p_1 = 0;        
        int q_1 = 1;        
        
        /*
         * Configuring variable: self_0_1
         */
        setFieldValue(self_0_1,"h1",self_0_h1_1);        
        setFieldValue(self_0_1,"h2",self_0_h2_1);        
        setFieldValue(self_0_1,"m",self_0_m_1);        
        setFieldValue(self_0_1,"l1",self_0_l1_1);        
        setFieldValue(self_0_1,"l2",self_0_l2_1);        
        
        /*
         * Preparing for running 2
         */
        IntegerNI self_0_2 = new IntegerNI();        
        int self_0_h1_2 = 2;        
        int self_0_h2_2 = 1;        
        int self_0_m_2 = 0;        
        int self_0_l1_2 = 0;        
        int self_0_l2_2 = 0;        
        int p_2 = 0;        
        int q_2 = 1;        
        
        /*
         * Configuring variable: self_0_2
         */
        setFieldValue(self_0_2,"h1",self_0_h1_2);        
        setFieldValue(self_0_2,"h2",self_0_h2_2);        
        setFieldValue(self_0_2,"m",self_0_m_2);        
        setFieldValue(self_0_2,"l1",self_0_l1_2);        
        setFieldValue(self_0_2,"l2",self_0_l2_2);        
        
        /*
         * Execute running 1
         */
        self_0_1.miracle(p_1,q_1);        
        
        /*
         * Execute running 2
         */
        self_0_2.miracle(p_2,q_2);        
        
        /*
         * Assert the difference in the value of low variable's [m] after performing
         * two executions
         */
        assertFalse((getFieldValue(self_0_1, "m") == getFieldValue(self_0_2, "m")));        
    }
    
    /**
     * checking method test via specification: l1 l2 | m h1 h2
     */
    
    @Test
    public void testtest11 ()
        throws NoSuchFieldException, SecurityException, IllegalArgumentException, IllegalAccessException {
        
        /*
         * Preparing for running 1
         */
        IntegerNI self_1_1 = new IntegerNI();        
        int self_1_h1_1 = 1;        
        int self_1_h2_1 = 0;        
        int self_1_m_1 = 0;        
        int self_1_l1_1 = 0;        
        int self_1_l2_1 = 0;        
        
        /*
         * Configuring variable: self_1_1
         */
        setFieldValue(self_1_1,"h1",self_1_h1_1);        
        setFieldValue(self_1_1,"h2",self_1_h2_1);        
        setFieldValue(self_1_1,"m",self_1_m_1);        
        setFieldValue(self_1_1,"l1",self_1_l1_1);        
        setFieldValue(self_1_1,"l2",self_1_l2_1);        
        
        /*
         * Preparing for running 2
         */
        IntegerNI self_1_2 = new IntegerNI();        
        int self_1_h1_2 = 2;        
        int self_1_h2_2 = 1;        
        int self_1_m_2 = 0;        
        int self_1_l1_2 = 0;        
        int self_1_l2_2 = 0;        
        
        /*
         * Configuring variable: self_1_2
         */
        setFieldValue(self_1_2,"h1",self_1_h1_2);        
        setFieldValue(self_1_2,"h2",self_1_h2_2);        
        setFieldValue(self_1_2,"m",self_1_m_2);        
        setFieldValue(self_1_2,"l1",self_1_l1_2);        
        setFieldValue(self_1_2,"l2",self_1_l2_2);        
        
        /*
         * Execute running 1
         */
        self_1_1.test();        
        
        /*
         * Execute running 2
         */
        self_1_2.test();        
        
        /*
         * Assert the difference in the value of low variable's [l1, l2] after
         * performing two executions
         */
        assertFalse((getFieldValue(self_1_1, "l1") == getFieldValue(self_1_2, "l1")) && (getFieldValue(self_1_1, "l2") == getFieldValue(self_1_2, "l2")));        
    }
    
    @Test
    public void testtest12 ()
        throws NoSuchFieldException, SecurityException, IllegalArgumentException, IllegalAccessException {
        
        /*
         * Preparing for running 1
         */
        IntegerNI self_1_1 = new IntegerNI();        
        int self_1_h1_1 = 1;        
        int self_1_h2_1 = -1;        
        int self_1_m_1 = 0;        
        int self_1_l1_1 = 0;        
        int self_1_l2_1 = 0;        
        
        /*
         * Configuring variable: self_1_1
         */
        setFieldValue(self_1_1,"h1",self_1_h1_1);        
        setFieldValue(self_1_1,"h2",self_1_h2_1);        
        setFieldValue(self_1_1,"m",self_1_m_1);        
        setFieldValue(self_1_1,"l1",self_1_l1_1);        
        setFieldValue(self_1_1,"l2",self_1_l2_1);        
        
        /*
         * Preparing for running 2
         */
        IntegerNI self_1_2 = new IntegerNI();        
        int self_1_h1_2 = 2;        
        int self_1_h2_2 = 2;        
        int self_1_m_2 = 0;        
        int self_1_l1_2 = 0;        
        int self_1_l2_2 = 0;        
        
        /*
         * Configuring variable: self_1_2
         */
        setFieldValue(self_1_2,"h1",self_1_h1_2);        
        setFieldValue(self_1_2,"h2",self_1_h2_2);        
        setFieldValue(self_1_2,"m",self_1_m_2);        
        setFieldValue(self_1_2,"l1",self_1_l1_2);        
        setFieldValue(self_1_2,"l2",self_1_l2_2);        
        
        /*
         * Execute running 1
         */
        self_1_1.test();        
        
        /*
         * Execute running 2
         */
        self_1_2.test();        
        
        /*
         * Assert the difference in the value of low variable's [l1, l2] after
         * performing two executions
         */
        assertFalse((getFieldValue(self_1_1, "l1") == getFieldValue(self_1_2, "l1")) && (getFieldValue(self_1_1, "l2") == getFieldValue(self_1_2, "l2")));        
    }
    
    /**
     * checking method test via specification: m | h1 h2
     */
    
    @Test
    public void testtest13 ()
        throws NoSuchFieldException, SecurityException, IllegalArgumentException, IllegalAccessException {
        
        /*
         * Preparing for running 1
         */
        IntegerNI self_1_1 = new IntegerNI();        
        int self_1_h1_1 = 2;        
        int self_1_h2_1 = -2;        
        int self_1_m_1 = 0;        
        int self_1_l1_1 = 0;        
        int self_1_l2_1 = 0;        
        
        /*
         * Configuring variable: self_1_1
         */
        setFieldValue(self_1_1,"h1",self_1_h1_1);        
        setFieldValue(self_1_1,"h2",self_1_h2_1);        
        setFieldValue(self_1_1,"m",self_1_m_1);        
        setFieldValue(self_1_1,"l1",self_1_l1_1);        
        setFieldValue(self_1_1,"l2",self_1_l2_1);        
        
        /*
         * Preparing for running 2
         */
        IntegerNI self_1_2 = new IntegerNI();        
        int self_1_h1_2 = 3;        
        int self_1_h2_2 = -1;        
        int self_1_m_2 = 0;        
        int self_1_l1_2 = 0;        
        int self_1_l2_2 = 0;        
        
        /*
         * Configuring variable: self_1_2
         */
        setFieldValue(self_1_2,"h1",self_1_h1_2);        
        setFieldValue(self_1_2,"h2",self_1_h2_2);        
        setFieldValue(self_1_2,"m",self_1_m_2);        
        setFieldValue(self_1_2,"l1",self_1_l1_2);        
        setFieldValue(self_1_2,"l2",self_1_l2_2);        
        
        /*
         * Execute running 1
         */
        self_1_1.test();        
        
        /*
         * Execute running 2
         */
        self_1_2.test();        
        
        /*
         * Assert the difference in the value of low variable's [m] after performing
         * two executions
         */
        assertFalse((getFieldValue(self_1_1, "m") == getFieldValue(self_1_2, "m")));        
    }
    
    @Test
    public void testtest14 ()
        throws NoSuchFieldException, SecurityException, IllegalArgumentException, IllegalAccessException {
        
        /*
         * Preparing for running 1
         */
        IntegerNI self_1_1 = new IntegerNI();        
        int self_1_h1_1 = -1;        
        int self_1_h2_1 = -9;        
        int self_1_m_1 = 0;        
        int self_1_l1_1 = 0;        
        int self_1_l2_1 = 0;        
        
        /*
         * Configuring variable: self_1_1
         */
        setFieldValue(self_1_1,"h1",self_1_h1_1);        
        setFieldValue(self_1_1,"h2",self_1_h2_1);        
        setFieldValue(self_1_1,"m",self_1_m_1);        
        setFieldValue(self_1_1,"l1",self_1_l1_1);        
        setFieldValue(self_1_1,"l2",self_1_l2_1);        
        
        /*
         * Preparing for running 2
         */
        IntegerNI self_1_2 = new IntegerNI();        
        int self_1_h1_2 = 0;        
        int self_1_h2_2 = 0;        
        int self_1_m_2 = 0;        
        int self_1_l1_2 = 0;        
        int self_1_l2_2 = 0;        
        
        /*
         * Configuring variable: self_1_2
         */
        setFieldValue(self_1_2,"h1",self_1_h1_2);        
        setFieldValue(self_1_2,"h2",self_1_h2_2);        
        setFieldValue(self_1_2,"m",self_1_m_2);        
        setFieldValue(self_1_2,"l1",self_1_l1_2);        
        setFieldValue(self_1_2,"l2",self_1_l2_2);        
        
        /*
         * Execute running 1
         */
        self_1_1.test();        
        
        /*
         * Execute running 2
         */
        self_1_2.test();        
        
        /*
         * Assert the difference in the value of low variable's [m] after performing
         * two executions
         */
        assertFalse((getFieldValue(self_1_1, "m") == getFieldValue(self_1_2, "m")));        
    }
    
    /**
     * Sets a field of some object to a given value
     */
    private void setFieldValue (Object instance, String fieldName, Object value)
        throws NoSuchFieldException, SecurityException, IllegalArgumentException, IllegalAccessException {
        Field field = instance.getClass().getDeclaredField(fieldName);        
        field.setAccessible(true);        
        field.set(instance, value );        
    }
    
    /**
     * Gets the field of a given object
     */
    private <T> T getFieldValue (Object instance, String fieldName)
        throws NoSuchFieldException, SecurityException, IllegalArgumentException, IllegalAccessException {
        Field field = instance.getClass().getDeclaredField(fieldName);        
        field.setAccessible(true);        
        return (T)field.get(instance);        
    }
}
