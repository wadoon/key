package hackfindsecret;
import java.io.*;
import java.lang.reflect.*;
import java.util.*;
import findsecret.PasswordChecker3;

public  class PasswordChecker3_magic_SecretInferSimulator {
    public static void main (String[] args)
        throws NoSuchFieldException, SecurityException, IllegalArgumentException, IllegalAccessException, NumberFormatException, IOException {
        PasswordChecker3 obj = new PasswordChecker3();        
        String[] observableVars = new String[]{"l"};        
        String highInputFile = "/home/huy/Working/GIT/key/projects/exploitGeneration/src/exploitGeneration/test/hackfindsecret/PasswordChecker3_magic_HighInput.in";        
        String lowInputFile = "/home/huy/Working/GIT/key/projects/exploitGeneration/src/exploitGeneration/test/hackfindsecret/PasswordChecker3_magic_LowInput.in";        
        setInputs(obj, readInputValuesFromFile(highInputFile));        
        setInputs(obj, readInputValuesFromFile(lowInputFile));        
        
        /*
         * Perform execution
         */
        obj.magic();        
        printObserveOutputValue(obj, observableVars);        
    }
    
    /**
     * Gets the field of a given object
     */
    private static <T> T getFieldValue (Object instance, String fieldName)
        throws NoSuchFieldException, SecurityException, IllegalArgumentException, IllegalAccessException {
        Field field = instance.getClass().getDeclaredField(fieldName);        
        field.setAccessible(true);        
        return (T)field.get(instance);        
    }
    
    /**
     * Sets a field of some object to a given value
     */
    private static void setFieldValue (Object instance, String fieldName, Object value)
        throws NoSuchFieldException, SecurityException, IllegalArgumentException, IllegalAccessException {
        Field field = instance.getClass().getDeclaredField(fieldName);        
        field.setAccessible(true);        
        field.set(instance, value );        
    }
    private static void setInputs (Object instance, Map<String, Integer> inputs)
        throws NoSuchFieldException, SecurityException, IllegalArgumentException, IllegalAccessException {
        for(String var: inputs.keySet())        
            setFieldValue(instance, var, inputs.get(var));    }
    private static Map<String, Integer> readInputValuesFromFile (String fileName)
        throws NumberFormatException, IOException {
        BufferedReader br = new BufferedReader(new FileReader(new File(fileName)));        
        Map<String, Integer> result = new HashMap<String, Integer>();        
        int n = Integer.parseInt(br.readLine());        
        for(int i=0;i<n;i++){        
            String assignment = br.readLine();            
            String valueString[] = assignment.split(":");            
            String var = valueString[0].trim();            
            Integer value = Integer.valueOf(valueString[1].trim());            
            result.put(var, value);            
        }        
        br.close();        
        return result;        
    }
    private static void printObserveOutputValue (Object instance, String[] observableVars)
        throws NoSuchFieldException, SecurityException, IllegalArgumentException, IllegalAccessException {
        System.out.println(observableVars.length);        
        for(String varName: observableVars){        
            Integer value = (Integer)getFieldValue(instance, varName);            
            System.out.println(varName + ":" + value);            
        }        
    }
}
