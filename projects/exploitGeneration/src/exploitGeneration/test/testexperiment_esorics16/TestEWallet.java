package testexperiment_esorics16;

import org.junit.*;
import junit.framework.TestCase;
import java.lang.reflect.*;
import java.util.*;
import experiment_esorics16.EWallet;

public  class TestEWallet extends TestCase {
    
    /**
     * check method check with noninterference specification: l |
     * h
     */
    
    @Test
    public void test_check_self_l_0 ()
        throws NoSuchFieldException, SecurityException, IllegalArgumentException, IllegalAccessException {
        
        /*
         * Prepare for execution 1
         */
        EWallet self_1 = new EWallet();        
        long self_l_1 = 201;        
        long self_h_1 = -1;        
        long result_1 = -1;        
        
        /*
         * Configure variable: self_1
         */
        setFieldValue(self_1,"l",self_l_1);        
        setFieldValue(self_1,"h",self_h_1);        
        
        /*
         * Perform execution 1
         */
        self_1.check();        
        
        /*
         * Get the value of low variable self_l after execution 1
         */
        int self_l_out_1 = ((Integer)getFieldValue(self_1,"l")).intValue();
        
        /*
         * Prepare for execution 2
         */
        EWallet self_2 = new EWallet();        
        long self_l_2 = 201;        
        long self_h_2 = 0;        
        long result_2 = 0;        
        
        /*
         * Configure variable: self_2
         */
        setFieldValue(self_2,"l",self_l_2);        
        setFieldValue(self_2,"h",self_h_2);        
        
        /*
         * Perform execution 2
         */
        self_2.check();        
        
        /*
         * Get the value of low variable self_l after execution 2
         */
        int self_l_out_2 = ((Integer)getFieldValue(self_2,"l")).intValue();
        
        assertNotNull(self_l_out_1);        
        assertNotNull(self_l_out_2);        
        /*
         * assert that the value of low variable self_l is not changed after performing
         * two executions
         */
        assertTrue(self_l_out_1 == self_l_out_2);        
    }
    
    @Test
    public void test_check_self_l_1 ()
        throws NoSuchFieldException, SecurityException, IllegalArgumentException, IllegalAccessException {
        
        /*
         * Prepare for execution 1
         */
        EWallet self_1 = new EWallet();        
        long self_l_1 = 201;        
        long self_h_1 = 1000000;        
        long result_1 = 0;        
        
        /*
         * Configure variable: self_1
         */
        setFieldValue(self_1,"l",self_l_1);        
        setFieldValue(self_1,"h",self_h_1);        
        
        /*
         * Perform execution 1
         */
        self_1.check();        
        
        /*
         * Get the value of low variable self_l after execution 1
         */
        int self_l_out_1 = ((Integer)getFieldValue(self_1,"l")).intValue();
        
        /*
         * Prepare for execution 2
         */
        EWallet self_2 = new EWallet();        
        long self_l_2 = 201;        
        long self_h_2 = 1;        
        long result_2 = 1;        
        
        /*
         * Configure variable: self_2
         */
        setFieldValue(self_2,"l",self_l_2);        
        setFieldValue(self_2,"h",self_h_2);        
        
        /*
         * Perform execution 2
         */
        self_2.check();        
        
        /*
         * Get the value of low variable self_l after execution 2
         */
        int self_l_out_2 = ((Integer)getFieldValue(self_2,"l")).intValue();
        
        assertNotNull(self_l_out_1);        
        assertNotNull(self_l_out_2);        
        /*
         * assert that the value of low variable self_l is not changed after performing
         * two executions
         */
        assertTrue(self_l_out_1 == self_l_out_2);        
    }
    
    @Test
    public void test_check_self_l_2 ()
        throws NoSuchFieldException, SecurityException, IllegalArgumentException, IllegalAccessException {
        
        /*
         * Prepare for execution 1
         */
        EWallet self_1 = new EWallet();        
        long self_l_1 = 201;        
        long self_h_1 = 1000000;        
        long result_1 = 0;        
        
        /*
         * Configure variable: self_1
         */
        setFieldValue(self_1,"l",self_l_1);        
        setFieldValue(self_1,"h",self_h_1);        
        
        /*
         * Perform execution 1
         */
        self_1.check();        
        
        /*
         * Get the value of low variable self_l after execution 1
         */
        int self_l_out_1 = ((Integer)getFieldValue(self_1,"l")).intValue();
        
        /*
         * Prepare for execution 2
         */
        EWallet self_2 = new EWallet();        
        long self_l_2 = 201;        
        long self_h_2 = 1000001;        
        long result_2 = 1;        
        
        /*
         * Configure variable: self_2
         */
        setFieldValue(self_2,"l",self_l_2);        
        setFieldValue(self_2,"h",self_h_2);        
        
        /*
         * Perform execution 2
         */
        self_2.check();        
        
        /*
         * Get the value of low variable self_l after execution 2
         */
        int self_l_out_2 = ((Integer)getFieldValue(self_2,"l")).intValue();
        
        assertNotNull(self_l_out_1);        
        assertNotNull(self_l_out_2);        
        /*
         * assert that the value of low variable self_l is not changed after performing
         * two executions
         */
        assertTrue(self_l_out_1 == self_l_out_2);        
    }
    
    /**
     * Sets a field of some object to a given value
     */
    private void setFieldValue (Object instance, String fieldName, Object value)
        throws NoSuchFieldException, SecurityException, IllegalArgumentException, IllegalAccessException {
        Field field = instance.getClass().getDeclaredField(fieldName);        
        field.setAccessible(true);        
        field.set(instance, value );        
    }
    
    /**
     * Gets the field of a given object
     */
    private <T> T getFieldValue (Object instance, String fieldName)
        throws NoSuchFieldException, SecurityException, IllegalArgumentException, IllegalAccessException {
        Field field = instance.getClass().getDeclaredField(fieldName);        
        field.setAccessible(true);        
        return (T)field.get(instance);        
    }
}
