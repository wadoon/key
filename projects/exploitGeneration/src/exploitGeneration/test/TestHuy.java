/**
 * 
 */
import java.io.File;
import java.util.HashMap;
import junit.framework.TestCase;

import org.junit.Test;
import de.uka.ilkd.key.symbolic_execution.AbstractSymbolicExecutionTestCase;
import de.uka.ilkd.key.symbolic_execution.ExecutionNodePreorderIterator;
import de.uka.ilkd.key.symbolic_execution.model.IExecutionNode;
import de.uka.ilkd.key.symbolic_execution.model.IExecutionStateNode;
import de.uka.ilkd.key.symbolic_execution.model.IExecutionValue;
import de.uka.ilkd.key.symbolic_execution.model.IExecutionVariable;
import de.uka.ilkd.key.symbolic_execution.strategy.ExecutedSymbolicExecutionTreeNodesStopCondition;
import de.uka.ilkd.key.symbolic_execution.util.SymbolicExecutionEnvironment;
import de.uka.ilkd.key.ui.CustomUserInterface;
/**
 * @author Huy Do
 *
 */

   public class TestHuy extends AbstractSymbolicExecutionTestCase {
      @Test
      public void testExample() throws Exception {
         File baseDir = new File("C:\\Implementation\\Development\\KeY\\eclipse_workspace\\exploitGenExperiment\\src\\examplesKEG\\");
         String javaPathInBaseDir = "ReferenceType.java";
         String baseContractName = "examplesKEG.ReferenceType[examplesKEG.ReferenceType::magic(int)].JML normal_behavior operation contract.0";
         
         HashMap<String, String> originalTacletOptions = null;
         SymbolicExecutionEnvironment<CustomUserInterface> env = null;
         try {
            // Make sure that the correct taclet options are defined.
            env = createSymbolicExecutionEnvironment(baseDir, javaPathInBaseDir, false, false, false, false, false, false, false);
            env.dispose();
            originalTacletOptions = setDefaultTacletOptions();
            // Resume symbolic execution
            env = createSymbolicExecutionEnvironment(baseDir, javaPathInBaseDir, false, false, false, false, false, false, false);
            ExecutedSymbolicExecutionTreeNodesStopCondition stopCondition = new ExecutedSymbolicExecutionTreeNodesStopCondition(1000);
            env.getProof().getSettings().getStrategySettings().setCustomApplyStrategyStopCondition(stopCondition);
            env.getUi().startAndWaitForAutoMode(env.getProof());
            env.getBuilder().analyse();
            // Print tree
            ExecutionNodePreorderIterator iter = new ExecutionNodePreorderIterator(env.getBuilder().getStartNode());
            while (iter.hasNext()) {
               IExecutionNode next = iter.next();
               System.out.println(next);
               if (next instanceof IExecutionStateNode) {
                  print(((IExecutionStateNode<?>) next).getVariables(), 1);
               }
            }
         }
         finally {
            // Restore taclet options
            restoreTacletOptions(originalTacletOptions);
            if (env != null) {
               env.dispose();
            }
         }
      }

      private void print(IExecutionVariable[] variables, int level) throws Exception {
         for (IExecutionVariable var : variables) {
            for (int i = 0; i < level; i++) {
               System.out.print('\t');
            }
            System.out.println(var.getName());
            IExecutionValue[] values = var.getValues();
            for (IExecutionValue value : values) {
               print(value.getChildVariables(), level + 1);
            }
         }
      }
   }

