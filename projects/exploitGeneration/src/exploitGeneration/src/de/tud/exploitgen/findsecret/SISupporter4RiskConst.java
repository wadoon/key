package de.tud.exploitgen.findsecret;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import de.tud.exploitgen.findsecret.barvinokinterface.Iscc2TermTransformer;
import de.tud.exploitgen.findsecret.barvinokinterface.ParametricPolytope;
import de.tud.exploitgen.findsecret.barvinokinterface.Term2IsccTransformer;
import de.tud.exploitgen.findsecret.optimizelowinput.BestLowInputProducer;
import de.tud.exploitgen.findsecret.optimizelowinput.PPCountingResult;
import de.uka.ilkd.key.logic.Term;
import de.uka.ilkd.key.logic.TermBuilder;

public class SISupporter4RiskConst extends SISupporter {

	public SISupporter4RiskConst(BadMethod badMethod) {
		super(badMethod);
		// TODO Auto-generated constructor stub
	}
	
	public Map<String, Long> findBestLowInput() throws IOException{
		List<ParametricPolytope> listPP = new LinkedList<ParametricPolytope>();
		TermBuilder termBuilder = badMethod.getMethod().getServices().getTermBuilder();
		for(RiskyPath rn: badMethod.getListRiskyPaths()){			
			/*
			 * parameters: list of low variables.
			 * vars: list of high variables
			 * */			
			Term constraint = termBuilder.and(currentKnowledge, /*rn.getModelNode().getConstraint()*/rn.getPathCondition());
			listPP.add(new ParametricPolytope(constraint, rn.getVc().getListLowVars(), rn.getVc().getListHighVars()));	
			
		}
		List<PPCountingResult> listCountingResults = new LinkedList<PPCountingResult>();
		for(ParametricPolytope pp: listPP){
			//TODO: do not bind with a specific path for file
			PrintStream outFile = new PrintStream(new FileOutputStream("/home/huy/formula.txt"));
			String paraPolytope = Term2IsccTransformer.transformParaPolytope2Iscc(pp);
			System.out.println("parametric polytope: " + paraPolytope);
			outFile.print("card " + paraPolytope );
			outFile.close();
			
			List<String> command = new ArrayList<String>();
		    command.add("iscc");
		    
		    ProcessBuilder builder = new ProcessBuilder(command);
		    //Map<String, String> environ = builder.environment();
		    builder.redirectInput(ProcessBuilder.Redirect.from(new File("/home/huy/formula.txt")));		    
		    final Process process = builder.start();
		 /*   InputStream is = process.getInputStream();
		    InputStreamReader isr = new InputStreamReader(is);*/
		    BufferedReader br = new BufferedReader(new InputStreamReader(process.getInputStream()));
		    String line = br.readLine();
		    System.out.println("iscc result returned: " + line);
	    	Iscc2TermTransformer transformer = new Iscc2TermTransformer(line, badMethod.getMethod().getServices());
	    	transformer.translateIsccResult2MapTerm();			   
			listCountingResults.add(new PPCountingResult(transformer.getListCountingResult()));				
		}
		
		//find "best" low input
		BestLowInputProducer inputProducer = new BestLowInputProducer(listCountingResults, 
				badMethod.getMethod().getServices(), findNumberOfPossibleHighValue(currentKnowledge),
				badMethod.getListRiskyPaths().get(0).getVc().getListLowVars());
		return inputProducer.findBestLowInputsUsingConvexSolver();		
	}
}
