// Generated from /home/huy/Working/GIT/key/projects/exploitGeneration/src/exploitGeneration/deployment/../src/de/tud/exploitgen/findsecret/barvinokinterface/gensrc/CountingResult.g4 by ANTLR 4.5.1

package de.tud.exploitgen.findsecret.barvinokinterface.gensrc;

import de.uka.ilkd.key.logic.Term;

import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class CountingResultLexer extends Lexer {
	static { RuntimeMetaData.checkVersion("4.5.1", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, Neg_num=12, Pos_num=13, FLOOR=14, OR=15, AND=16, INFINITY=17, 
		EXISTS=18, ZERO=19, POWER=20, NONZERODIGIT=21, Param=22, LETTER=23, WS=24, 
		GE=25, GT=26, LE=27, LT=28, EQ=29, MULT=30, DIV=31, PLUS=32, MINUS=33;
	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	public static final String[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "Neg_num", "Pos_num", "FLOOR", "OR", "AND", "INFINITY", 
		"EXISTS", "ZERO", "POWER", "NONZERODIGIT", "Param", "LETTER", "WS", "GE", 
		"GT", "LE", "LT", "EQ", "MULT", "DIV", "PLUS", "MINUS"
	};

	private static final String[] _LITERAL_NAMES = {
		null, "'->'", "'[]'", "'['", "','", "']'", "'{'", "'}'", "';'", "':'", 
		"'('", "')'", null, null, "'floor'", "'or'", "'and'", "'infty'", "'exists'", 
		"'0'", "'^'", null, null, null, null, "'>='", "'>'", "'<='", "'<'", "'='", 
		"'*'", "'/'", "'+'", "'-'"
	};
	private static final String[] _SYMBOLIC_NAMES = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		"Neg_num", "Pos_num", "FLOOR", "OR", "AND", "INFINITY", "EXISTS", "ZERO", 
		"POWER", "NONZERODIGIT", "Param", "LETTER", "WS", "GE", "GT", "LE", "LT", 
		"EQ", "MULT", "DIV", "PLUS", "MINUS"
	};
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}


	public CountingResultLexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "CountingResult.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	public static final String _serializedATN =
		"\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\2#\u00ac\b\1\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\3\2\3\2\3\2\3\3\3\3\3\3\3\4\3\4\3\5\3\5\3\6\3\6\3\7\3\7\3"+
		"\b\3\b\3\t\3\t\3\n\3\n\3\13\3\13\3\f\3\f\3\r\3\r\3\r\3\16\3\16\3\16\7"+
		"\16d\n\16\f\16\16\16g\13\16\3\17\3\17\3\17\3\17\3\17\3\17\3\20\3\20\3"+
		"\20\3\21\3\21\3\21\3\21\3\22\3\22\3\22\3\22\3\22\3\22\3\23\3\23\3\23\3"+
		"\23\3\23\3\23\3\23\3\24\3\24\3\25\3\25\3\26\3\26\3\27\3\27\3\27\3\27\7"+
		"\27\u008d\n\27\f\27\16\27\u0090\13\27\3\30\3\30\3\31\6\31\u0095\n\31\r"+
		"\31\16\31\u0096\3\32\3\32\3\32\3\33\3\33\3\34\3\34\3\34\3\35\3\35\3\36"+
		"\3\36\3\37\3\37\3 \3 \3!\3!\3\"\3\"\2\2#\3\3\5\4\7\5\t\6\13\7\r\b\17\t"+
		"\21\n\23\13\25\f\27\r\31\16\33\17\35\20\37\21!\22#\23%\24\'\25)\26+\27"+
		"-\30/\31\61\32\63\33\65\34\67\359\36;\37= ?!A\"C#\3\2\4\5\2C\\aac|\4\2"+
		"\13\13\"\"\u00b1\2\3\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13"+
		"\3\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2\25\3\2\2"+
		"\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2\35\3\2\2\2\2\37\3\2\2\2\2"+
		"!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3"+
		"\2\2\2\2/\3\2\2\2\2\61\3\2\2\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67\3\2\2\2"+
		"\29\3\2\2\2\2;\3\2\2\2\2=\3\2\2\2\2?\3\2\2\2\2A\3\2\2\2\2C\3\2\2\2\3E"+
		"\3\2\2\2\5H\3\2\2\2\7K\3\2\2\2\tM\3\2\2\2\13O\3\2\2\2\rQ\3\2\2\2\17S\3"+
		"\2\2\2\21U\3\2\2\2\23W\3\2\2\2\25Y\3\2\2\2\27[\3\2\2\2\31]\3\2\2\2\33"+
		"`\3\2\2\2\35h\3\2\2\2\37n\3\2\2\2!q\3\2\2\2#u\3\2\2\2%{\3\2\2\2\'\u0082"+
		"\3\2\2\2)\u0084\3\2\2\2+\u0086\3\2\2\2-\u0088\3\2\2\2/\u0091\3\2\2\2\61"+
		"\u0094\3\2\2\2\63\u0098\3\2\2\2\65\u009b\3\2\2\2\67\u009d\3\2\2\29\u00a0"+
		"\3\2\2\2;\u00a2\3\2\2\2=\u00a4\3\2\2\2?\u00a6\3\2\2\2A\u00a8\3\2\2\2C"+
		"\u00aa\3\2\2\2EF\7/\2\2FG\7@\2\2G\4\3\2\2\2HI\7]\2\2IJ\7_\2\2J\6\3\2\2"+
		"\2KL\7]\2\2L\b\3\2\2\2MN\7.\2\2N\n\3\2\2\2OP\7_\2\2P\f\3\2\2\2QR\7}\2"+
		"\2R\16\3\2\2\2ST\7\177\2\2T\20\3\2\2\2UV\7=\2\2V\22\3\2\2\2WX\7<\2\2X"+
		"\24\3\2\2\2YZ\7*\2\2Z\26\3\2\2\2[\\\7+\2\2\\\30\3\2\2\2]^\5C\"\2^_\5\33"+
		"\16\2_\32\3\2\2\2`e\5+\26\2ad\5\'\24\2bd\5+\26\2ca\3\2\2\2cb\3\2\2\2d"+
		"g\3\2\2\2ec\3\2\2\2ef\3\2\2\2f\34\3\2\2\2ge\3\2\2\2hi\7h\2\2ij\7n\2\2"+
		"jk\7q\2\2kl\7q\2\2lm\7t\2\2m\36\3\2\2\2no\7q\2\2op\7t\2\2p \3\2\2\2qr"+
		"\7c\2\2rs\7p\2\2st\7f\2\2t\"\3\2\2\2uv\7k\2\2vw\7p\2\2wx\7h\2\2xy\7v\2"+
		"\2yz\7{\2\2z$\3\2\2\2{|\7g\2\2|}\7z\2\2}~\7k\2\2~\177\7u\2\2\177\u0080"+
		"\7v\2\2\u0080\u0081\7u\2\2\u0081&\3\2\2\2\u0082\u0083\7\62\2\2\u0083("+
		"\3\2\2\2\u0084\u0085\7`\2\2\u0085*\3\2\2\2\u0086\u0087\4\63;\2\u0087,"+
		"\3\2\2\2\u0088\u008e\5/\30\2\u0089\u008d\5+\26\2\u008a\u008d\5\'\24\2"+
		"\u008b\u008d\5/\30\2\u008c\u0089\3\2\2\2\u008c\u008a\3\2\2\2\u008c\u008b"+
		"\3\2\2\2\u008d\u0090\3\2\2\2\u008e\u008c\3\2\2\2\u008e\u008f\3\2\2\2\u008f"+
		".\3\2\2\2\u0090\u008e\3\2\2\2\u0091\u0092\t\2\2\2\u0092\60\3\2\2\2\u0093"+
		"\u0095\t\3\2\2\u0094\u0093\3\2\2\2\u0095\u0096\3\2\2\2\u0096\u0094\3\2"+
		"\2\2\u0096\u0097\3\2\2\2\u0097\62\3\2\2\2\u0098\u0099\7@\2\2\u0099\u009a"+
		"\7?\2\2\u009a\64\3\2\2\2\u009b\u009c\7@\2\2\u009c\66\3\2\2\2\u009d\u009e"+
		"\7>\2\2\u009e\u009f\7?\2\2\u009f8\3\2\2\2\u00a0\u00a1\7>\2\2\u00a1:\3"+
		"\2\2\2\u00a2\u00a3\7?\2\2\u00a3<\3\2\2\2\u00a4\u00a5\7,\2\2\u00a5>\3\2"+
		"\2\2\u00a6\u00a7\7\61\2\2\u00a7@\3\2\2\2\u00a8\u00a9\7-\2\2\u00a9B\3\2"+
		"\2\2\u00aa\u00ab\7/\2\2\u00abD\3\2\2\2\b\2ce\u008c\u008e\u0096\2";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}