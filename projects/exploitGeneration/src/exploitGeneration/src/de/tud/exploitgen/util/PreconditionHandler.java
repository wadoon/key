/**
 * 
 */
package de.tud.exploitgen.util;

import de.uka.ilkd.key.collection.ImmutableArray;
import de.uka.ilkd.key.logic.Term;
import de.uka.ilkd.key.logic.TermFactory;
import de.uka.ilkd.key.logic.op.Junctor;

/**
 * this class supplies several necessary methods to resolve precondition term
 * @author Huy Do
 *
 */
public class PreconditionHandler {
   /*
    * this class is used to remove default precondition: java.lang.Object::<inv>(heap,self)
    * */
   private static final TermFactory tf = TermFactory.DEFAULT;
   private static final Term tt = TermFactory.DEFAULT.createTerm(Junctor.TRUE);
   
   public Term removeDefaultPrecondition(Term precond){
      //if found default precondition, just remove it (replace it by null)
      if(!precond.toString().contains("java.lang.Object::<inv>(heap,self)"))
         return precond;
      else if(precond.toString().equals("java.lang.Object::<inv>(heap,self)"))
         return tt;
      else{       
         return tf.createTerm(precond.op(),removeDefaultPreconditionInSubTerm(precond.subs()));
      }
   }
   public Term[] removeDefaultPreconditionInSubTerm(final ImmutableArray<Term> subs ){
      Term[] result =new Term[subs.size()];
      for(int i=0;i<subs.size();i++)
         result[i]=removeDefaultPrecondition(subs.get(i));    
      return (result);
   }
}
