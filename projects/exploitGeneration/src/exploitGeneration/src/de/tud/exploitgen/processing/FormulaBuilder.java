package de.tud.exploitgen.processing;

import java.util.HashMap;
import java.util.List;
import java.util.Map;



import com.csvanefalk.keytestgen.core.model.implementation.Model;
import com.csvanefalk.keytestgen.core.model.implementation.variable.ModelVariable;


import de.tud.exploitgen.infrastructure.KeYJavaMethod;
import de.tud.exploitgen.processing.exploit.ExploitModel;

import de.tud.exploitgen.processing.specification.DelimitedReleaseExtractor;
import de.tud.exploitgen.processing.specification.VariableClassifier;
import de.tud.exploitgen.util.HeapHandler;
import de.tud.exploitgen.util.KEGConfig;

import de.uka.ilkd.key.collection.ImmutableList;
import de.uka.ilkd.key.java.Services;
import de.uka.ilkd.key.logic.ProgramElementName;
import de.uka.ilkd.key.logic.Term;
import de.uka.ilkd.key.logic.TermBuilder;
import de.uka.ilkd.key.logic.TermFactory;
import de.uka.ilkd.key.logic.op.LocationVariable;
import de.uka.ilkd.key.proof.init.ProofInputException;
import de.uka.ilkd.key.util.DelimitedRelease;

public class FormulaBuilder {
   private final ExploitModel eModel; //two detail nodes representing two branches.   
   private final List<Term> listArtificialVars;
   private final Term nodeConstraint1, nodeConstraint2;  
   
   private KeYJavaMethod method;
   private Services services;
   private VariableClassifier vc;
   private HeapHandler heapHandler;  
   
   private final TermBuilder termBuilder;
      
   
   
   //map<heapLowVar, field>: mapping from low variable name to its corresponding field name
   Map<String,ModelVariable> mapLowVars;
   
   //list of various kind of variables
   PairTermCollection pairInputHighVars;
   PairTermCollection pairInputNotHighVars;   
   PairTermCollection pairOutputLowPairs; //list of pair output low variables (name low_out_...)
   PairTermCollection pairOutputLowValues1; //list of output value of low variables at node 1
   PairTermCollection pairOutputLowValues2; //list of output value of low variables at node 2   
   PairTermCollection pairArtificalVars; //collection of pairs of artificial variables (met with loop)
   //List<Term> listVarConstraints1; //list of variable's constraints at node 1 represented as a term 
   //List<Term> listVarConstraints2; //list of variable's constraints at node 2 represented as a term
   PairTermCollection pairAllVars ; //list of all variables, including high variables, non-high variables and artificial variables
   
   public FormulaBuilder(ExploitModel eModel,KeYJavaMethod method,VariableClassifier vc,
         List<Term> listArtificialVars, Term nodeConstraint1, Term nodeConstraint2) throws ProofInputException {
      super();
      this.eModel = eModel;
      
      eModel.printModelInfo();
      
      this.method=method;
      this.vc=vc;
      vc.buildListIdentifiers(eModel);
      this.listArtificialVars = listArtificialVars;
      this.nodeConstraint1 = nodeConstraint1;
      this.nodeConstraint2 = nodeConstraint2;
      
      services=method.getServices();
      heapHandler = new HeapHandler(services);
      termBuilder=new TermBuilder(new TermFactory(), services);
      
      mapLowVars=new HashMap<String,ModelVariable>();     
            
      pairInputHighVars = new PairTermCollection(services);
      pairInputNotHighVars = new PairTermCollection(services);
      pairOutputLowPairs = new PairTermCollection(services);      
      pairOutputLowValues1 = new PairTermCollection(services);      
      pairOutputLowValues2 = new PairTermCollection(services);    
      pairArtificalVars = new PairTermCollection(services);    
      
      //constructLists(1);
      //constructLists(2);
      constructListsObj(1);
      constructListsObj(2);
      constructListArtificalVars();      
      //construct listAllVars
      pairAllVars = new PairTermCollection(services);
      pairAllVars.combine(pairInputHighVars);
      pairAllVars.combine(pairInputNotHighVars);
      pairAllVars.combine(pairArtificalVars);
      
      resolveOutputLowPairs();
      
      System.out.println("check listInputHighVars:");
      pairInputHighVars.printListPairTerm();      
      System.out.println("check listInputNotHighVars:");
      pairInputNotHighVars.printListPairTerm();  
      
     
      
      System.out.println("check listAllVars:");
      pairAllVars.printListPairTerm();  
      
   }
   
   
   /*
    * construct list of inputs (high, not high and low) from exploit model, use Object variables (except self object)
    * */
   private void constructListsObj(int branch) throws ProofInputException{      
      Model model = eModel.getModel(branch);
      for(ModelVariable mv : model.getVariables()){
         if(!mv.getIdentifier().equals("self")){
            //We check all variables except self object (object-sensitive analysis)
            //System.out.println("variable name: " + mv.getIdentifier());
            if (vc.isHigh(mv.getIdentifier())){
               //System.out.println("high variable detected: " + mv.getIdentifier());
               add2ListInputHighVars(mv);
            }else{
               //System.out.println("non-high variable detected: " + mv.getIdentifier());
               add2ListInputNotHighVars(mv);
            }
            if(vc.isLow(mv.getIdentifier())){
               add2MapLowVars(mv);
               add2ListOutputLowValues(mv,branch);
            }
            //add all constraints of mv to corresponding list of constraints
            //add2ListVarConstraints(mv, branch);
         }
      }
      //System.out.println(" $$$$$$$$ end construct list variable of branch " + branch);
   }
   
   
   //construct collection of pair of artificial vars
   private void constructListArtificalVars(){        
      for(Term var: listArtificialVars){
         String varName = var.op().name().toString();
         LocationVariable lv1=new LocationVariable(new ProgramElementName(varName + "_1"),var.sort());
         LocationVariable lv2=new LocationVariable(new ProgramElementName(varName + "_2"),var.sort());         
         PairTerm pair=new PairTerm(termBuilder.var(lv1),termBuilder.var(lv2),services);
         pairArtificalVars.add(varName, pair);
      }
   }
   
   /*
    * add to list of input high variables 
    * */
   private void add2ListInputHighVars(ModelVariable mv) throws ProofInputException{
      String varName=mv.getIdentifier();
           
      //if the list of high variable does not contains the variable, add it into the list
      if(!pairInputHighVars.contains(varName)){
         /*
          * create two variables which have the same type with this variable and have two different name 
          * (by adding prefix "self_" and suffixes _1 and _2)
         */
         
         LocationVariable lv1=new LocationVariable(new ProgramElementName(varName + "_1"),mv.getType());
         LocationVariable lv2=new LocationVariable(new ProgramElementName(varName + "_2"),mv.getType());
         
         PairTerm pair=new PairTerm(termBuilder.var(lv1),termBuilder.var(lv2),services);
         pairInputHighVars.add(varName, pair);         
         
      }           
   }
   
   /*
    * add to list of input not high variables 
    * */
   private void add2ListInputNotHighVars(ModelVariable mv) throws ProofInputException{
      String varName=mv.getIdentifier();
           
      //if the list of high variable does not contains the variable, add it into the list
      if(!pairInputNotHighVars.contains(varName)){
                  
         LocationVariable lv1=new LocationVariable(new ProgramElementName(varName + "_1"),mv.getType());
         LocationVariable lv2=new LocationVariable(new ProgramElementName(varName + "_2"),mv.getType());
         
         PairTerm pair=new PairTerm(termBuilder.var(lv1),termBuilder.var(lv2),services);
         pairInputNotHighVars.add(varName, pair);
      }           
   }
   
   /*
    * add to list of input low variables 
    * */
   private void add2MapLowVars(ModelVariable mv) throws ProofInputException{
      String varName=mv.getIdentifier();      //key is the variable name     
      //if the list of high variable does not contains the variable, add it into the list
      if(!mapLowVars.containsKey(varName)){                  
        mapLowVars.put(varName, mv);        //data is the resolved name
      }           
   }
   
   /*
    * add to list of input low variables via branch
    * */
   private void add2ListOutputLowValues(ModelVariable mv, int branch){
      String varName=mv.getIdentifier();      
      Term value = mv.getSymbolicValue();
      value = refineTerm(value);
      if(value==null){
         value = termBuilder.NULL();
      }
      if(branch==1){
         if(!pairOutputLowValues1.contains(varName)){
            LocationVariable lvo=new LocationVariable(new ProgramElementName(varName + "_out_1"),mv.getType());
            //Term value = new HeapHandler(services).replaceSelectFunctionByItsField(mv.getSymbolicValue());
            
            PairTerm pair=new PairTerm(termBuilder.var(lvo),value,services);
            pairOutputLowValues1.add(varName, pair);
         }
      }else{
         if(!pairOutputLowValues2.contains(varName)){
            LocationVariable lvo=new LocationVariable(new ProgramElementName(varName + "_out_2"),mv.getType());
            //Term value = new HeapHandler(services).replaceSelectFunctionByItsField(mv.getSymbolicValue());           
            PairTerm pair=new PairTerm(termBuilder.var(lvo),value,services);
            pairOutputLowValues2.add(varName, pair);
         }
      }    
      
   }
   
   /*add to list of variable's constraints via branch*/
   /*private void add2ListVarConstraints(ModelVariable var, int branch){
      List<Term> constraints = var.getConstraints();
      if(branch == 1){
         listVarConstraints1.addAll(constraints);
      }else{
         listVarConstraints2.addAll(constraints);
      }
   }*/
      
   /*
    * synthesis listOutputLowPairs from listOutputLowValues1 and listOutputLowValues2
    * as well as replacing the value term by listInputHighVars and listInputNotHighVars 
    * */
   private void resolveOutputLowPairs(){
      for(String name: pairOutputLowValues1.getNameSet()){
         //make pair term of "_out_1" and "_out_2"
         PairTerm pt1=pairOutputLowValues1.getPairTerm(name);
         PairTerm pt2=pairOutputLowValues2.getPairTerm(name);         
         
         //create pair term of pt1.T1 and pt2.T1 and add it into listOutputLowPairs        
        /* PairTerm pt=new PairTerm(pt1.getT1(),pt2.getT1(),services);
         listOutputLowPairs.add(name, pt);*/
         
         //resolve the value term T2
         Term value1=pt1.getT2();
        /* value1=listInputHighVars.replacePVByNameAndBranch(value1, 1);
         value1=listInputNotHighVars.replacePVByNameAndBranch(value1, 1);
         value1=listArtificalVars.replacePVByNameAndBranch(value1, 1);*/
         value1 = pairAllVars.replacePVByNameAndBranch(value1, 1);
         pt1.setT2(value1);
         
         Term value2=pt2.getT2();
         /*value2=listInputHighVars.replacePVByNameAndBranch(value2, 2);
         value2=listInputNotHighVars.replacePVByNameAndBranch(value2, 2);
         value2=listArtificalVars.replacePVByNameAndBranch(value2, 2);*/
         value2 = pairAllVars.replacePVByNameAndBranch(value2, 2);         
         pt2.setT2(value2);
         
         //create pair term of pt1.T2 and pt2.T2 and add it into listOutputLowPairs        
         PairTerm pt=new PairTerm(value1,value2,services);
         pairOutputLowPairs.add(name, pt);
      }
   }
    
      
   /**
    * create formula to check non-interference property by checking the output value of low variable lowVar
    * the formula will be created from two paths and the collection of high variables and low variables
    * it is based on the idea that one program is non-interference if the output of low variables are different
    * if the input of high variables are changed.
    * 
    * We do it by checking two paths (may be different branches, may be the same)
    * the formula looks like below:
    * (Leak(P,i,j,low) && (!(EscCond(i) && EscCond(j)) || EscExprEqual(i,j)) 
    * We based on assumption that escape conditions must be hold in both two paths, then escape expression is allowed to leak
    * 
    * where:
    *    Leak(P,i,j,low) is the formula checking if information from secret part can be leaked to variable "low" or not 
    *       by comparing the output value of low at the final state of path i and path j. Leak(P,i,j,low) is following formula: 
    *    Leak(P,i,j,low) = PreCond(h_i,l_i) && PreCond(h_j,l_j) && PC_i(h_i,l_i) && PC_j(h_j,l_j) 
    *                      && h_i!=h_j && l_i=l_j && low_out_i!=low_out_j
    *       in which: 
                * PreCond is precondition of the method
                * PC_i and PC2_j are path conditions of two paths i and j, respectively
                * h_i, l_i, h_j, l_j: the collection of the input of high and low variables for two paths i and j, respectively         
                * l1_outs, l2_outs: the collection of the output of low variables for two corresponding paths
                * low_out_i, low_out_j: two output values of low at the final state of two path i and j, respectively
                
    *    EscapeCond: condition of escape
    *   
    */
  

   public Map<ModelVariable,Term> getAllInterferenceFormula() throws ProofInputException{
      Map<ModelVariable,Term> result=new HashMap<ModelVariable,Term>();
      Term notEqualHighInput = pairInputHighVars.partialNotEqualTerm();
      Term equalNotHighInput = pairInputNotHighVars.totalEqualTerm();
      //System.out.println("********************************************");
      //System.out.println("equalNotHighInput: " + equalNotHighInput);      
      //Term preCond1=getResolvedPrecondition(1); //precondition interpreted in path 1
            
      /*
       * the constraint collection of each nodes already contains precondition and path condition
       * so we don't have to work with them separately 
       * */
      Term nodeConstraints_1 = refineTerm(nodeConstraint1);
      Term nodeConstraints_2 = refineTerm(nodeConstraint2);
        
      nodeConstraints_1 = pairAllVars.replacePVByNameAndBranch(nodeConstraints_1, 1);//constraints of path 1
      nodeConstraints_2 = pairAllVars.replacePVByNameAndBranch(nodeConstraints_2, 2);//constraints of path 2
      Term synthesisValueCond_1 = refineTerm(synthesizeValueCondition(1));      
      Term synthesisValueCond_2 = refineTerm(synthesizeValueCondition(2));
      
      System.out.println("synthesisValueCond_1 : " + synthesisValueCond_1);
      System.out.println("synthesisValueCond_2 : " + synthesisValueCond_2);
      
      synthesisValueCond_1 = pairAllVars.replacePVByNameAndBranch(synthesisValueCond_1, 1);
      synthesisValueCond_2 = pairAllVars.replacePVByNameAndBranch(synthesisValueCond_2, 2);
      //System.out.println("nodeConstraint1: " + nodeConstraints1);
      //System.out.println("nodeConstraint2: " + nodeConstraints2);
      
      
      //generate interference formula to check if secret infor can be leaked throw lowVar or not
      //System.out.println("mapLowVars: " + mapLowVars);
      String heapName = eModel.getHEAP_NAME();
      //method.printEscapeHatches();
      for(String lowVar: mapLowVars.keySet()){
         //Term valueLowOutput1 = listOutputLowValues1.getPairTerm(lowVar).equalTerm();
         //System.out.println("valueLowOutput1: " + valueLowOutput1);
         //Term valueLowOutput2 = listOutputLowValues2.getPairTerm(lowVar).equalTerm();
         //System.out.println("valueLowOutput2: " + valueLowOutput2);
         
         PairTerm lowOutput = pairOutputLowPairs.getPairTerm(lowVar);
         System.out.println("\nlow locations: " + lowVar + " ; output values = " + lowOutput.toString());
         Term notEqualLowOutput = lowOutput.notEqualTerm();               
         System.out.println("notEqualLowOutput: " + notEqualLowOutput);         
         Term interferenceTerm = termBuilder.and(
               //preCond1, preCond2, 
               //pathCond1,pathCond2,
               nodeConstraints_1, nodeConstraints_2,
               notEqualHighInput, equalNotHighInput,
               //synthesisValueCond_1, synthesisValueCond_2,
               /*valueLowOutput1,valueLowOutput2,*/notEqualLowOutput);
                  
         /* get all EelimitedRelease objects and synthesize to make interference formula*/         
         
         ImmutableList<DelimitedRelease> declassifies = method.getEscapeHatches();
         if(declassifies.size()>0){
            for(DelimitedRelease decl: declassifies){   
               DelimitedReleaseExtractor drExtractor = new DelimitedReleaseExtractor(decl, method.getServices());    
               //System.out.println("getEscDestination : " + drExtractor.getEscDestination(heapName));
               if(drExtractor.affect2Var(heapName, lowVar)){
                  //integrate interference term with conditional delimited release
                  interferenceTerm = termBuilder.and(interferenceTerm, 
                                                     drExtractor.getConditionalEscTerm(pairAllVars, heapName)
                                                    );
               }
            }            
         }
         
         result.put(mapLowVars.get(lowVar), interferenceTerm);
         
            
         //System.out.println("leakTerm:^^^: \n" + leakTerm);        
            
      }
      
      return result;
   }  
   
   
   /*synthesize all value condition of all model variable by using conjunction (AND)*/
   private Term synthesizeValueCondition(int branch){
      Term result = termBuilder.tt();
      for(ModelVariable mv: eModel.getModel(branch).getVariables()){
         if(!mv.getIdentifier().equals("self"))
            result = termBuilder.and(result, mv.getValueCondition());
      }     
      
      return result;
   }
   
   private Term refineTerm(final Term t){
      //Term result = KeYResourceHandler.removeUnnecessaryTerm(t);
      Term result = heapHandler.replaceLengthFunctionByVar(t, KEGConfig.SEPARATOR);
      result = heapHandler.replaceSelectFunctionByItsField(result, KEGConfig.SEPARATOR);
      return result;
   }
}
