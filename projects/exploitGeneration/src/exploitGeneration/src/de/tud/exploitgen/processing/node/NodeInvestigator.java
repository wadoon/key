/**
 * 
 */
package de.tud.exploitgen.processing.node;

import java.util.LinkedList;
import java.util.List;
import java.util.Stack;


import com.csvanefalk.keytestgen.core.model.implementation.Model;
import com.csvanefalk.keytestgen.core.model.implementation.ModelBuilderVisitor;
import com.csvanefalk.keytestgen.core.model.implementation.instance.ModelInstance;
import com.csvanefalk.keytestgen.core.model.implementation.instance.ModelInstanceFactory;
import com.csvanefalk.keytestgen.core.model.implementation.variable.ModelVariable;
import com.csvanefalk.keytestgen.core.model.implementation.variable.ModelArrayVariable;
import com.csvanefalk.keytestgen.core.model.implementation.variable.ModelVariableFactory;

//import de.tud.exploitgen.solver.SMTWorker;
import de.tud.exploitgen.util.HeapHandler;
import de.tud.exploitgen.util.KeYResourceHandler;
import de.tud.exploitgen.util.ModelVariableGenerator;

import de.uka.ilkd.key.collection.ImmutableArray;
import de.uka.ilkd.key.java.Services;
import de.uka.ilkd.key.java.abstraction.KeYJavaType;
import de.uka.ilkd.key.logic.Term;
import de.uka.ilkd.key.logic.TermBuilder;
import de.uka.ilkd.key.logic.TermFactory;
import de.uka.ilkd.key.logic.op.IProgramVariable;
import de.uka.ilkd.key.logic.op.Junctor;

//import de.uka.ilkd.key.logic.op.QuantifiableVariable;
import de.uka.ilkd.key.proof.init.ProofInputException;
//import de.uka.ilkd.key.smt.AbstractSMTTranslator.Configuration;
import de.uka.ilkd.key.smt.IllegalFormulaException;



import de.uka.ilkd.key.symbolic_execution.model.IExecutionConstraint;
import de.uka.ilkd.key.symbolic_execution.model.IExecutionNode;
import de.uka.ilkd.key.symbolic_execution.model.IExecutionValue;
import de.uka.ilkd.key.symbolic_execution.model.IExecutionVariable;

/**
 * supply methods investigating node to get information of:
 *    - node contract
 *    - model variables (used in checking noninterference and building exploit model)
 *    - artificial variable (just used in checking noninterference)
 * @author Huy Do
 *
 */
public class NodeInvestigator {   
   private final IExecutionNode<?> node;
   private final Services services;
   private final TermBuilder termBuilder;
   private final HeapHandler heapHandler;
   private final Term tt = new TermFactory().createTerm(Junctor.TRUE);
   
   private Model model; //contains all of ModelVariable and relations between them
   private List<Term> artificialVars; //contains  artificial variable detected while investigate node
   
   private String HEAP_NAME=""; //contain HEAP_NAME (mostly it is self)
   private Stack<String> sHeapName; //contains name of object in heap, served for creating name of heap variables during recursively investigating heap
   private int depth; //depth of sub-field's sequence being investigated
   //private int counter; //use to count the layer of investigating relevant to sub-field sequence
   /**
    * @param services
    */
   public NodeInvestigator(IExecutionNode<?> node, int depth) {      
      super();
      this.node = node;
      this.services = node.getServices();
      heapHandler = new HeapHandler(services);
      termBuilder=new TermBuilder(new TermFactory(), services);
      model = Model.constructModel();
      sHeapName=new Stack<String>();
      artificialVars = new LinkedList<Term>();
      this.depth = depth; //default
      System.out.println("depth of analysis (NodeInvestigator) = " + depth);
   }  
   
  
   
   private Term getUsefulConstraint() {
      IExecutionConstraint[] constraints = node.getConstraints();  
      Term result = tt;
      //System.out.println(" -- node constraint: -- ");
      for(IExecutionConstraint ec: constraints){ 
         Term t = ec.getTerm();   
         System.out.println(t);
         if(!KeYResourceHandler.containUselessConstraint(t)){            
            /*if(TermParser.isForAllQuantifier(t)){
               SMTWorker st = new SMTWorker(services, new Configuration(false,false));
               StringBuffer sb = st.translateTerm(t, new Vector<QuantifiableVariable>(), services);
               System.out.println("forall quantifier:  " + sb.toString());               
            }*/
              
           
            t = KeYResourceHandler.removeUnnecessaryTerm(t);
            t = heapHandler.replaceSelectFunctionByItsField(t);
            t = heapHandler.replaceLengthFunctionByVar(t);     
            System.out.println(t);
            result = termBuilder.and(result,t);                
         }            
      }
      //System.out.println("---------");
      return result;      
   }
   
   private void constructModel() throws ProofInputException{
      /*
       * Create the initial Model, without any concrete values assigned to
       * primitive integer values in it.
       */
            
       //investigate heap to add all fields, static variables and method parameters into model     
       IExecutionVariable[] vars = node.getVariables(); 
       
       /*recursively investigate program variable. 
        * Because the sub-field sequence might be infinite, we have to set up the depth on investigating*/
       
       for(IExecutionVariable var: vars){
          //System.out.println("variables: " + var.getName());          
          if(HeapHandler.isSelf(var)){     
             //counter=0; //counter cannot be greater than depth
             HEAP_NAME=var.getName();   
             addSelfToModel(var);                                           
             investigateProgramVariable(var,0);
             
          }else if(HeapHandler.isStatic(var) || HeapHandler.isParameter(var)){ //solve static variables and method's parameters
             //counter=0;
             investigateProgramVariable(var,0);     
          }             
       }       
       
       //manipulate exploit model to indicate the container for static variables
       maniputlateModel2SolveStaticVar();
       
       List<Term> listValue = new LinkedList<Term>();
       for(ModelVariable mv: model.getVariables()){          
          Term sv = mv.getSymbolicValue();
          //System.out.println("value of " + mv.getIdentifier() + " : ---> "  + sv + " : " + HeapHandler.isLengthFunction(sv));
          
          listValue.add(sv);
          mv.setSymbolicValue(refineTerm(sv));
          //System.out.println("refined value: ---> " + mv.getSymbolicValue());
       }       
       
       //System.out.println("--- generated model -----\n" + model.toString() + "\n----------");       
       
       for(Term t: listValue){
          System.out.println("investigate following term to detect artificial variable: " + t) ;
          investigateArtificialVars(t);
       }
       
       //find artificial variables from node constraint
       //node constraint usually contains path condition
       for(IExecutionConstraint ec: node.getConstraints()){ 
          Term t = ec.getTerm();
          if(!KeYResourceHandler.containUselessConstraint(t)){       
            System.out.println("investigate following term to detect artificial variable: " + t) ;
            investigateArtificialVars(t);            
          }            
       }
       
       //investigate path condition to find out artificial variables
       //Term pathCond = node.getPathCondition();       
       //investigateArtificialVars(pathCond);
   }
   
   /**
    * called if var is heap (started by "self")
    * @throws ProofInputException 
    * */
   private void addSelfToModel(IExecutionVariable var) throws ProofInputException{
      KeYJavaType container = var.getProgramVariable().getKeYJavaType();
      final ModelInstance selfInstance = ModelInstanceFactory.constructModelInstance(container);      
      final ModelVariable self = ModelVariableFactory.constructModelVariable(var.getProgramVariable(), var.getName());
      self.setParentIdentifier(null);
      model.add(self, selfInstance);      
   }
   
   /**
    * investigate self object to retrieve information of all fields and add it into exploit model
    * counter represents precisely the depth of investigating
    * */
   private void investigateProgramVariable(IExecutionVariable var, int counter) throws ProofInputException{
      System.out.println("detected var: " + var.getName()+ " array index: " + var.getArrayIndex() + 
            " program variable: " + var.getProgramVariable() + " type: " + var.getValues()[0].getValue().sort());   
      //if (var.getProgramVariable() instanceof IProgramVariable){   
         
          
         String identifier = KeYResourceHandler.getVarName(var);
         if(!HeapHandler.isParameter(var)){
            if(!sHeapName.isEmpty())
               identifier=getReferenceName()+"_"+identifier;
         }
         //System.out.println("detected var: " + identifier);
         
         if(!model.inModel(identifier)){            
            addVarToModel(var);
         } 
         System.out.println("added " + identifier);
         if(counter<depth){ 
            sHeapName.push(KeYResourceHandler.getVarName(var));
            //recursively work with child variable of this variable
            IExecutionValue[] values =var.getValues();
            
            for(IExecutionValue value:values){                  
               IExecutionVariable[] vchilds=value.getChildVariables();   
               System.out.println("number of children of " + identifier + ": " + vchilds.length);
               for(IExecutionVariable vchild:vchilds){               
                  investigateProgramVariable(vchild, counter++) ;              
               }
            }
            sHeapName.pop();      
         }
      //}
   }
   
   /**
    * adds a field of the class to model, links to container object
    * */
   private void addVarToModel(IExecutionVariable var) throws ProofInputException{     
      String identifier = KeYResourceHandler.getVarName(var);
      
      if(!HeapHandler.isParameter(var)){
         if(!sHeapName.isEmpty())
            identifier=getReferenceName()+"_"+identifier;
      }
      
      ModelVariable variable;
      if(var.getProgramVariable() instanceof IProgramVariable){ //normal program variable
         if(HeapHandler.isArray(var)){
            //System.out.println(var + " is array!");
            variable = new ModelArrayVariable(var.getProgramVariable(),identifier);
         }else{
            variable=new ModelVariable(var.getProgramVariable(),identifier);
         }     
      }else{ //array's element is not treated as program variable, so we have to solve it separately
         variable = new ModelVariable(ModelVariableGenerator.createProgramVariable(var),identifier);
      }
   
      System.out.println("adding "+ identifier);
      //resolve symbolic value
      IExecutionValue[] values =var.getValues();
      Term symbolicValue = values[0].getValue();
      System.out.println("value of " + variable.getIdentifier() + " : " + symbolicValue + " ; type: " + variable.getType());      
      
      //symbolicValue = refineTerm(symbolicValue);
      variable.setSymbolicValue(symbolicValue);
      variable.setArrayIdx(var.getArrayIndex());
      
      //resolve all constraints of var, the constraints is retrieved from value
      /*List<Term> constraints = new LinkedList<Term>();
      for(IExecutionValue value:values){  
         for(IExecutionConstraint ec: value.getConstraints()){
            //System.out.println(ec.getTerm());
            Term constraint = ec.getTerm();
            if(KeYResourceHandler.isUsefulConstraint(constraint)){
               //System.out.println("useful constraint: " + constraint);               
               symbolicValue = KeYResourceHandler.removeUnnecessaryTerm(symbolicValue);
               constraint = heapHandler.replaceSelectFunctionByItsField(constraint);
               constraint = heapHandler.replaceLengthFunctionByVar(constraint);
               constraints.add(constraint);
               //investigateArtificialVars(constraint); //investigate all artificial variables
            }
         }        
      }
      variable.setConstraints(constraints);*/
      
      if(HeapHandler.isParameter(var))  //assign true flag for method's parameter
         variable.setParameter(true);
      
      if(HeapHandler.isStatic(var)){
         variable.setStatic(true);
         variable.setDeclareClassName(KeYResourceHandler.getAccessClassNameOfStaticVar(var));
      }else
         variable.setStatic(false);         
      
      Object instance;
      if (HeapHandler.isPrimitive(var)) {
          //The term is a static variable. Identify and connect it with its parent class.
          instance = ModelBuilderVisitor.resolvePrimitiveType(variable.getProgramVariable());
      } else {
          instance = ModelInstanceFactory.constructModelInstance(variable.getProgramVariable().getKeYJavaType());
      }
      /*
       * Add the variable and its instance to the Model. This might seem
       * premature, but must be done to preserve referential integrity and
       * avoiding extra work.
       */
      model.add(variable, instance);
      if(!sHeapName.isEmpty()){
         String referenceName = getReferenceName();
         variable.setParentIdentifier(referenceName);
         model.assignField(variable, model.getVariable(referenceName));
      }
        
   }  
   
   /*
    * when resolving loop by using loop invariant, SED (Symbolic Execution Debugger) may create fake variables
    * to represent the value of fields, we have to detect them and add them into model
    * */
   private void investigateArtificialVars(final Term t){
      if(t!=null){       
         if(HeapHandler.isHeapSelectFunction(t) && !HeapHandler.isAnonHeapSelectFunction(t)){
            processSelectFunction(t);            
         }else if(HeapHandler.isLengthFunction(t)){
            processLengthFunction(t);          
            
         }else if(KeYResourceHandler.isArtificialVariable(t) ){
            //System.out.println("artificial detected!::: " + term);
            //we have to check if term has been added into model or not
            //if true, it is parameter and we do not add it into list of artificial variables       
            Term addTerm = refineTerm(t);
            if(!model.inModel(addTerm.toString())){                  
               add2ArtificialVars(addTerm);
            }            
         }else{ //recursively call to subterms.
            ImmutableArray<Term> subterms=t.subs();
            for(Term st:subterms){
               investigateArtificialVars(st);
            }
         }         
      }      
   }
   
   private void add2ArtificialVars(Term t){          
      if(!HeapHandler.inListTerm(t, artificialVars)){         
         artificialVars.add(t);
      }
   }
   
   
   /*
    * constructs reference name from stack, if object obj is a field of heap self, then the heap name is self_obj
    * */
   private String getReferenceName() {  
      String heapName="";
      if(sHeapName.size()>0){
         heapName=sHeapName.get(0);
         for(int i=1;i<sHeapName.size();i++){
            heapName +="_" + sHeapName.get(i);
         }
      }
      return heapName;
   }
   
   
   /*
    * basically, all static variable are listed when we look into the array of program variables, not in heap
    * however, we would like to match static variable with some specific variables that their class is the real container of it.
    * so we have to manipulate the model
    * */
   
   private void maniputlateModel2SolveStaticVar(){     
      List<ModelVariable> lMV = model.getVariables();
          
      /*
       * now we resolve lMV in the following way:
       * take all ModelVariable mv in lMV
       * if mv is static then
       * find a ModelVariable container in lMV that its type is same with the type of container class of mv
       * set mv as a field of container
       * */
      //System.out.println("+++ BEGIN static resolving");
      for(ModelVariable mv: lMV){ 
         
         if(mv.isStatic()){
          //System.out.println(mv.getIdentifier() + " : " + mv.getVariableName());
            String containerName = mv.getDeclareClassName();
            for(ModelVariable mvc: lMV){
               if(containerName.equals(mvc.getTypeName())){
                  model.assignField(mv, mvc);                  
               }
            }
         }        
      }
      //System.out.println("+++ END static resolving");
   }
  
   /*
    * process length function to detect and add unknown model variable into model
    * */   
   private void processLengthFunction(final Term t){
      String rootName = heapHandler.getRootNameOfSelectAndLength(t);
      if(model.inModel(rootName)){ //this is legal model variable, add it into model 
         ModelVariable length = ModelVariableGenerator.createModelVariable(t);      
         //if length is not in model, we process it
         if(!model.inModel(length.getIdentifier())){
            model.add(length,ModelVariableGenerator.createInstance(length));
            Term sub0 = t.sub(0);
            if(HeapHandler.isHeapSelectFunction(sub0) && !HeapHandler.isAnonHeapSelectFunction(sub0)){
               processSelectFunction(sub0);
            }else{
               ModelVariable array = ModelVariableGenerator.createModelVariable(sub0);
               if(!model.inModel(array.getIdentifier())){
                  model.add(array, ModelVariableGenerator.createInstance(array));                  
               }   
            }
            ModelVariable array = ModelVariableGenerator.createModelVariable(sub0);
            length.setParentIdentifier(array.getIdentifier());
            model.assignField(length, model.getVariable(array.getIdentifier()));
         }
      }else{
         add2ArtificialVars(refineTerm(t));
         investigateArtificialVars(t.sub(0));         
      }
   }
   
   /*
    * process select function to detect and add unknown model variable into model
    * */   
   private void processSelectFunction(final Term t){  
      String rootName = heapHandler.getRootNameOfSelectAndLength(t);
      if(model.inModel(rootName)){  //this is legal model variable, add it into model   
         ModelVariable mv = ModelVariableGenerator.createModelVariable(t); //create Model variable
         if(!model.inModel(mv.getIdentifier())){ 
            //if mv is not in model, add it and resolve it
             model.add(mv,ModelVariableGenerator.createInstance(mv));
             Term sub2 = t.sub(2);
             if(HeapHandler.isArrayIdxFunction(sub2)){ //if mv is an element of array 
                if(HeapHandler.isArrayElementNumber(sub2)){ 
                   //if the index is number, then assign the index number
                   mv.setArrayIdx(HeapHandler.getArrayIndex(sub2));
                   //if the index is length function, then call process length function                   
                }else if(HeapHandler.isLengthFunction(sub2)){                                      
                   processLengthFunction(sub2);
                   /*after processing length function, length variable is added to the model
                   assign index object as length function */
                   ModelVariable length = ModelVariableGenerator.createModelVariable(sub2);
                   mv.setArrayIdxValue(model.getVariable(length.getIdentifier()));                   
                } else{
                   //if the index is variable or select function, then assign array index object
                   ModelVariable idxMv = ModelVariableGenerator.createModelVariable(sub2.sub(0));
                   if(!model.inModel(idxMv.getIdentifier())){
                      //if index object is not in the model, add it into model
                      if(HeapHandler.isHeapSelectFunction(sub2.sub(0)) && !HeapHandler.isAnonHeapSelectFunction(sub2.sub(0)))
                         processSelectFunction(sub2.sub(0));
                      else                         
                         model.add(idxMv, ModelVariableGenerator.createInstance(idxMv));
                   }
                   //assign index object
                   mv.setArrayIdxValue(model.getVariable(idxMv.getIdentifier()));
                }
             }else {
                //if sub2 is an variable, basically do nothing
             }             
             //check if mv has been assigned as a field of referee object
             Term sub1 = t.sub(1);
             ModelVariable referMv = ModelVariableGenerator.createModelVariable(sub1);
             if(!model.inModel(referMv.getIdentifier())){
                //if refer object has not been added into model, add it and process it
                if(HeapHandler.isHeapSelectFunction(t) && !HeapHandler.isAnonHeapSelectFunction(t))
                   processSelectFunction(sub1);
                else
                   model.add(referMv, ModelVariableGenerator.createInstance(referMv));
                
             }
             //assign field: mv is a field of referMv
             mv.setParentIdentifier(referMv.getIdentifier());
             model.assignField(mv, model.getVariable(referMv.getIdentifier()));
             
         }else{
            /*if mv is already in the model, we do nothing because basically
             * Term t is resolved already        
             */
         }       
      }else{//add this select function to artificial variables collection
         add2ArtificialVars(refineTerm(t));
         investigateArtificialVars(t.sub(1));
         investigateArtificialVars(t.sub(2));
      }
   }
   
  
   private Term refineTerm(final Term t){
      //Term result = KeYResourceHandler.removeUnnecessaryTerm(t);
      Term result = heapHandler.replaceLengthFunctionByVar(t);
      result = heapHandler.replaceSelectFunctionByItsField(result);
      return result;
   }
   
   
   
   public NodeDetail extractNodeDetail() throws ProofInputException{
      Term constraint = getUsefulConstraint();
      constructModel(); //construct Model of ModelVariable and artificial variables    
      return new NodeDetail(node, model, artificialVars, constraint, HEAP_NAME);      
   }
   
}
