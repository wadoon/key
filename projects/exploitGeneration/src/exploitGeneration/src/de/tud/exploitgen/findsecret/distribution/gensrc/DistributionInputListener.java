// Generated from /Users/huydo/Working/KEG_Refactoring/key/projects/exploitGeneration/src/exploitGeneration/deployment/../src/de/tud/exploitgen/findsecret/distribution/gensrc/DistributionInput.g4 by ANTLR 4.5.1

package de.tud.exploitgen.findsecret.distribution.gensrc;

import de.uka.ilkd.key.logic.Term;

import org.antlr.v4.runtime.tree.ParseTreeListener;

/**
 * This interface defines a complete listener for a parse tree produced by
 * {@link DistributionInputParser}.
 */
public interface DistributionInputListener extends ParseTreeListener {
	/**
	 * Enter a parse tree produced by {@link DistributionInputParser#distribution}.
	 * @param ctx the parse tree
	 */
	void enterDistribution(DistributionInputParser.DistributionContext ctx);
	/**
	 * Exit a parse tree produced by {@link DistributionInputParser#distribution}.
	 * @param ctx the parse tree
	 */
	void exitDistribution(DistributionInputParser.DistributionContext ctx);
	/**
	 * Enter a parse tree produced by {@link DistributionInputParser#partition}.
	 * @param ctx the parse tree
	 */
	void enterPartition(DistributionInputParser.PartitionContext ctx);
	/**
	 * Exit a parse tree produced by {@link DistributionInputParser#partition}.
	 * @param ctx the parse tree
	 */
	void exitPartition(DistributionInputParser.PartitionContext ctx);
	/**
	 * Enter a parse tree produced by {@link DistributionInputParser#formula}.
	 * @param ctx the parse tree
	 */
	void enterFormula(DistributionInputParser.FormulaContext ctx);
	/**
	 * Exit a parse tree produced by {@link DistributionInputParser#formula}.
	 * @param ctx the parse tree
	 */
	void exitFormula(DistributionInputParser.FormulaContext ctx);
	/**
	 * Enter a parse tree produced by the {@code frequency_postNum}
	 * labeled alternative in {@link DistributionInputParser#frequency}.
	 * @param ctx the parse tree
	 */
	void enterFrequency_postNum(DistributionInputParser.Frequency_postNumContext ctx);
	/**
	 * Exit a parse tree produced by the {@code frequency_postNum}
	 * labeled alternative in {@link DistributionInputParser#frequency}.
	 * @param ctx the parse tree
	 */
	void exitFrequency_postNum(DistributionInputParser.Frequency_postNumContext ctx);
	/**
	 * Enter a parse tree produced by the {@code frequency_ZERO}
	 * labeled alternative in {@link DistributionInputParser#frequency}.
	 * @param ctx the parse tree
	 */
	void enterFrequency_ZERO(DistributionInputParser.Frequency_ZEROContext ctx);
	/**
	 * Exit a parse tree produced by the {@code frequency_ZERO}
	 * labeled alternative in {@link DistributionInputParser#frequency}.
	 * @param ctx the parse tree
	 */
	void exitFrequency_ZERO(DistributionInputParser.Frequency_ZEROContext ctx);
	/**
	 * Enter a parse tree produced by the {@code Arith_expr_Arith_term}
	 * labeled alternative in {@link DistributionInputParser#arith_expr}.
	 * @param ctx the parse tree
	 */
	void enterArith_expr_Arith_term(DistributionInputParser.Arith_expr_Arith_termContext ctx);
	/**
	 * Exit a parse tree produced by the {@code Arith_expr_Arith_term}
	 * labeled alternative in {@link DistributionInputParser#arith_expr}.
	 * @param ctx the parse tree
	 */
	void exitArith_expr_Arith_term(DistributionInputParser.Arith_expr_Arith_termContext ctx);
	/**
	 * Enter a parse tree produced by the {@code Arith_expr_Minus}
	 * labeled alternative in {@link DistributionInputParser#arith_expr}.
	 * @param ctx the parse tree
	 */
	void enterArith_expr_Minus(DistributionInputParser.Arith_expr_MinusContext ctx);
	/**
	 * Exit a parse tree produced by the {@code Arith_expr_Minus}
	 * labeled alternative in {@link DistributionInputParser#arith_expr}.
	 * @param ctx the parse tree
	 */
	void exitArith_expr_Minus(DistributionInputParser.Arith_expr_MinusContext ctx);
	/**
	 * Enter a parse tree produced by the {@code Arith_expr_Plus}
	 * labeled alternative in {@link DistributionInputParser#arith_expr}.
	 * @param ctx the parse tree
	 */
	void enterArith_expr_Plus(DistributionInputParser.Arith_expr_PlusContext ctx);
	/**
	 * Exit a parse tree produced by the {@code Arith_expr_Plus}
	 * labeled alternative in {@link DistributionInputParser#arith_expr}.
	 * @param ctx the parse tree
	 */
	void exitArith_expr_Plus(DistributionInputParser.Arith_expr_PlusContext ctx);
	/**
	 * Enter a parse tree produced by the {@code Minus_Arith_expr}
	 * labeled alternative in {@link DistributionInputParser#arith_expr}.
	 * @param ctx the parse tree
	 */
	void enterMinus_Arith_expr(DistributionInputParser.Minus_Arith_exprContext ctx);
	/**
	 * Exit a parse tree produced by the {@code Minus_Arith_expr}
	 * labeled alternative in {@link DistributionInputParser#arith_expr}.
	 * @param ctx the parse tree
	 */
	void exitMinus_Arith_expr(DistributionInputParser.Minus_Arith_exprContext ctx);
	/**
	 * Enter a parse tree produced by the {@code Arith_term_Div}
	 * labeled alternative in {@link DistributionInputParser#arith_term}.
	 * @param ctx the parse tree
	 */
	void enterArith_term_Div(DistributionInputParser.Arith_term_DivContext ctx);
	/**
	 * Exit a parse tree produced by the {@code Arith_term_Div}
	 * labeled alternative in {@link DistributionInputParser#arith_term}.
	 * @param ctx the parse tree
	 */
	void exitArith_term_Div(DistributionInputParser.Arith_term_DivContext ctx);
	/**
	 * Enter a parse tree produced by the {@code Arith_term_factor}
	 * labeled alternative in {@link DistributionInputParser#arith_term}.
	 * @param ctx the parse tree
	 */
	void enterArith_term_factor(DistributionInputParser.Arith_term_factorContext ctx);
	/**
	 * Exit a parse tree produced by the {@code Arith_term_factor}
	 * labeled alternative in {@link DistributionInputParser#arith_term}.
	 * @param ctx the parse tree
	 */
	void exitArith_term_factor(DistributionInputParser.Arith_term_factorContext ctx);
	/**
	 * Enter a parse tree produced by the {@code Arith_term_Mult}
	 * labeled alternative in {@link DistributionInputParser#arith_term}.
	 * @param ctx the parse tree
	 */
	void enterArith_term_Mult(DistributionInputParser.Arith_term_MultContext ctx);
	/**
	 * Exit a parse tree produced by the {@code Arith_term_Mult}
	 * labeled alternative in {@link DistributionInputParser#arith_term}.
	 * @param ctx the parse tree
	 */
	void exitArith_term_Mult(DistributionInputParser.Arith_term_MultContext ctx);
	/**
	 * Enter a parse tree produced by the {@code Factor_Power}
	 * labeled alternative in {@link DistributionInputParser#factor}.
	 * @param ctx the parse tree
	 */
	void enterFactor_Power(DistributionInputParser.Factor_PowerContext ctx);
	/**
	 * Exit a parse tree produced by the {@code Factor_Power}
	 * labeled alternative in {@link DistributionInputParser#factor}.
	 * @param ctx the parse tree
	 */
	void exitFactor_Power(DistributionInputParser.Factor_PowerContext ctx);
	/**
	 * Enter a parse tree produced by the {@code Factor_Parentheses_Arith_Expr}
	 * labeled alternative in {@link DistributionInputParser#factor}.
	 * @param ctx the parse tree
	 */
	void enterFactor_Parentheses_Arith_Expr(DistributionInputParser.Factor_Parentheses_Arith_ExprContext ctx);
	/**
	 * Exit a parse tree produced by the {@code Factor_Parentheses_Arith_Expr}
	 * labeled alternative in {@link DistributionInputParser#factor}.
	 * @param ctx the parse tree
	 */
	void exitFactor_Parentheses_Arith_Expr(DistributionInputParser.Factor_Parentheses_Arith_ExprContext ctx);
	/**
	 * Enter a parse tree produced by the {@code Factor_floor}
	 * labeled alternative in {@link DistributionInputParser#factor}.
	 * @param ctx the parse tree
	 */
	void enterFactor_floor(DistributionInputParser.Factor_floorContext ctx);
	/**
	 * Exit a parse tree produced by the {@code Factor_floor}
	 * labeled alternative in {@link DistributionInputParser#factor}.
	 * @param ctx the parse tree
	 */
	void exitFactor_floor(DistributionInputParser.Factor_floorContext ctx);
	/**
	 * Enter a parse tree produced by the {@code Factor_param}
	 * labeled alternative in {@link DistributionInputParser#factor}.
	 * @param ctx the parse tree
	 */
	void enterFactor_param(DistributionInputParser.Factor_paramContext ctx);
	/**
	 * Exit a parse tree produced by the {@code Factor_param}
	 * labeled alternative in {@link DistributionInputParser#factor}.
	 * @param ctx the parse tree
	 */
	void exitFactor_param(DistributionInputParser.Factor_paramContext ctx);
	/**
	 * Enter a parse tree produced by the {@code Factor_num_mul_param}
	 * labeled alternative in {@link DistributionInputParser#factor}.
	 * @param ctx the parse tree
	 */
	void enterFactor_num_mul_param(DistributionInputParser.Factor_num_mul_paramContext ctx);
	/**
	 * Exit a parse tree produced by the {@code Factor_num_mul_param}
	 * labeled alternative in {@link DistributionInputParser#factor}.
	 * @param ctx the parse tree
	 */
	void exitFactor_num_mul_param(DistributionInputParser.Factor_num_mul_paramContext ctx);
	/**
	 * Enter a parse tree produced by the {@code Factor_Fraction}
	 * labeled alternative in {@link DistributionInputParser#factor}.
	 * @param ctx the parse tree
	 */
	void enterFactor_Fraction(DistributionInputParser.Factor_FractionContext ctx);
	/**
	 * Exit a parse tree produced by the {@code Factor_Fraction}
	 * labeled alternative in {@link DistributionInputParser#factor}.
	 * @param ctx the parse tree
	 */
	void exitFactor_Fraction(DistributionInputParser.Factor_FractionContext ctx);
	/**
	 * Enter a parse tree produced by the {@code INT}
	 * labeled alternative in {@link DistributionInputParser#factor}.
	 * @param ctx the parse tree
	 */
	void enterINT(DistributionInputParser.INTContext ctx);
	/**
	 * Exit a parse tree produced by the {@code INT}
	 * labeled alternative in {@link DistributionInputParser#factor}.
	 * @param ctx the parse tree
	 */
	void exitINT(DistributionInputParser.INTContext ctx);
	/**
	 * Enter a parse tree produced by the {@code Factor_Round}
	 * labeled alternative in {@link DistributionInputParser#factor}.
	 * @param ctx the parse tree
	 */
	void enterFactor_Round(DistributionInputParser.Factor_RoundContext ctx);
	/**
	 * Exit a parse tree produced by the {@code Factor_Round}
	 * labeled alternative in {@link DistributionInputParser#factor}.
	 * @param ctx the parse tree
	 */
	void exitFactor_Round(DistributionInputParser.Factor_RoundContext ctx);
	/**
	 * Enter a parse tree produced by {@link DistributionInputParser#int_num}.
	 * @param ctx the parse tree
	 */
	void enterInt_num(DistributionInputParser.Int_numContext ctx);
	/**
	 * Exit a parse tree produced by {@link DistributionInputParser#int_num}.
	 * @param ctx the parse tree
	 */
	void exitInt_num(DistributionInputParser.Int_numContext ctx);
	/**
	 * Enter a parse tree produced by the {@code Logic_expr_logic_term}
	 * labeled alternative in {@link DistributionInputParser#logic_expr}.
	 * @param ctx the parse tree
	 */
	void enterLogic_expr_logic_term(DistributionInputParser.Logic_expr_logic_termContext ctx);
	/**
	 * Exit a parse tree produced by the {@code Logic_expr_logic_term}
	 * labeled alternative in {@link DistributionInputParser#logic_expr}.
	 * @param ctx the parse tree
	 */
	void exitLogic_expr_logic_term(DistributionInputParser.Logic_expr_logic_termContext ctx);
	/**
	 * Enter a parse tree produced by the {@code Logic_expr_Exist}
	 * labeled alternative in {@link DistributionInputParser#logic_expr}.
	 * @param ctx the parse tree
	 */
	void enterLogic_expr_Exist(DistributionInputParser.Logic_expr_ExistContext ctx);
	/**
	 * Exit a parse tree produced by the {@code Logic_expr_Exist}
	 * labeled alternative in {@link DistributionInputParser#logic_expr}.
	 * @param ctx the parse tree
	 */
	void exitLogic_expr_Exist(DistributionInputParser.Logic_expr_ExistContext ctx);
	/**
	 * Enter a parse tree produced by the {@code Logic_expr_OR}
	 * labeled alternative in {@link DistributionInputParser#logic_expr}.
	 * @param ctx the parse tree
	 */
	void enterLogic_expr_OR(DistributionInputParser.Logic_expr_ORContext ctx);
	/**
	 * Exit a parse tree produced by the {@code Logic_expr_OR}
	 * labeled alternative in {@link DistributionInputParser#logic_expr}.
	 * @param ctx the parse tree
	 */
	void exitLogic_expr_OR(DistributionInputParser.Logic_expr_ORContext ctx);
	/**
	 * Enter a parse tree produced by {@link DistributionInputParser#exists_expr}.
	 * @param ctx the parse tree
	 */
	void enterExists_expr(DistributionInputParser.Exists_exprContext ctx);
	/**
	 * Exit a parse tree produced by {@link DistributionInputParser#exists_expr}.
	 * @param ctx the parse tree
	 */
	void exitExists_expr(DistributionInputParser.Exists_exprContext ctx);
	/**
	 * Enter a parse tree produced by the {@code Qvar_expr_param}
	 * labeled alternative in {@link DistributionInputParser#qvar_expr}.
	 * @param ctx the parse tree
	 */
	void enterQvar_expr_param(DistributionInputParser.Qvar_expr_paramContext ctx);
	/**
	 * Exit a parse tree produced by the {@code Qvar_expr_param}
	 * labeled alternative in {@link DistributionInputParser#qvar_expr}.
	 * @param ctx the parse tree
	 */
	void exitQvar_expr_param(DistributionInputParser.Qvar_expr_paramContext ctx);
	/**
	 * Enter a parse tree produced by the {@code Qvar_expr_param_equals_expr}
	 * labeled alternative in {@link DistributionInputParser#qvar_expr}.
	 * @param ctx the parse tree
	 */
	void enterQvar_expr_param_equals_expr(DistributionInputParser.Qvar_expr_param_equals_exprContext ctx);
	/**
	 * Exit a parse tree produced by the {@code Qvar_expr_param_equals_expr}
	 * labeled alternative in {@link DistributionInputParser#qvar_expr}.
	 * @param ctx the parse tree
	 */
	void exitQvar_expr_param_equals_expr(DistributionInputParser.Qvar_expr_param_equals_exprContext ctx);
	/**
	 * Enter a parse tree produced by the {@code Logic_term_logic_factor}
	 * labeled alternative in {@link DistributionInputParser#logic_term}.
	 * @param ctx the parse tree
	 */
	void enterLogic_term_logic_factor(DistributionInputParser.Logic_term_logic_factorContext ctx);
	/**
	 * Exit a parse tree produced by the {@code Logic_term_logic_factor}
	 * labeled alternative in {@link DistributionInputParser#logic_term}.
	 * @param ctx the parse tree
	 */
	void exitLogic_term_logic_factor(DistributionInputParser.Logic_term_logic_factorContext ctx);
	/**
	 * Enter a parse tree produced by the {@code Logic_term_AND}
	 * labeled alternative in {@link DistributionInputParser#logic_term}.
	 * @param ctx the parse tree
	 */
	void enterLogic_term_AND(DistributionInputParser.Logic_term_ANDContext ctx);
	/**
	 * Exit a parse tree produced by the {@code Logic_term_AND}
	 * labeled alternative in {@link DistributionInputParser#logic_term}.
	 * @param ctx the parse tree
	 */
	void exitLogic_term_AND(DistributionInputParser.Logic_term_ANDContext ctx);
	/**
	 * Enter a parse tree produced by the {@code Logic_factor_compare}
	 * labeled alternative in {@link DistributionInputParser#logic_factor}.
	 * @param ctx the parse tree
	 */
	void enterLogic_factor_compare(DistributionInputParser.Logic_factor_compareContext ctx);
	/**
	 * Exit a parse tree produced by the {@code Logic_factor_compare}
	 * labeled alternative in {@link DistributionInputParser#logic_factor}.
	 * @param ctx the parse tree
	 */
	void exitLogic_factor_compare(DistributionInputParser.Logic_factor_compareContext ctx);
	/**
	 * Enter a parse tree produced by the {@code Logic_factor_Parentheses_Logic_Expr}
	 * labeled alternative in {@link DistributionInputParser#logic_factor}.
	 * @param ctx the parse tree
	 */
	void enterLogic_factor_Parentheses_Logic_Expr(DistributionInputParser.Logic_factor_Parentheses_Logic_ExprContext ctx);
	/**
	 * Exit a parse tree produced by the {@code Logic_factor_Parentheses_Logic_Expr}
	 * labeled alternative in {@link DistributionInputParser#logic_factor}.
	 * @param ctx the parse tree
	 */
	void exitLogic_factor_Parentheses_Logic_Expr(DistributionInputParser.Logic_factor_Parentheses_Logic_ExprContext ctx);
	/**
	 * Enter a parse tree produced by the {@code Greater_or_equal}
	 * labeled alternative in {@link DistributionInputParser#compare_operator}.
	 * @param ctx the parse tree
	 */
	void enterGreater_or_equal(DistributionInputParser.Greater_or_equalContext ctx);
	/**
	 * Exit a parse tree produced by the {@code Greater_or_equal}
	 * labeled alternative in {@link DistributionInputParser#compare_operator}.
	 * @param ctx the parse tree
	 */
	void exitGreater_or_equal(DistributionInputParser.Greater_or_equalContext ctx);
	/**
	 * Enter a parse tree produced by the {@code Greater}
	 * labeled alternative in {@link DistributionInputParser#compare_operator}.
	 * @param ctx the parse tree
	 */
	void enterGreater(DistributionInputParser.GreaterContext ctx);
	/**
	 * Exit a parse tree produced by the {@code Greater}
	 * labeled alternative in {@link DistributionInputParser#compare_operator}.
	 * @param ctx the parse tree
	 */
	void exitGreater(DistributionInputParser.GreaterContext ctx);
	/**
	 * Enter a parse tree produced by the {@code Less_or_equal}
	 * labeled alternative in {@link DistributionInputParser#compare_operator}.
	 * @param ctx the parse tree
	 */
	void enterLess_or_equal(DistributionInputParser.Less_or_equalContext ctx);
	/**
	 * Exit a parse tree produced by the {@code Less_or_equal}
	 * labeled alternative in {@link DistributionInputParser#compare_operator}.
	 * @param ctx the parse tree
	 */
	void exitLess_or_equal(DistributionInputParser.Less_or_equalContext ctx);
	/**
	 * Enter a parse tree produced by the {@code Less}
	 * labeled alternative in {@link DistributionInputParser#compare_operator}.
	 * @param ctx the parse tree
	 */
	void enterLess(DistributionInputParser.LessContext ctx);
	/**
	 * Exit a parse tree produced by the {@code Less}
	 * labeled alternative in {@link DistributionInputParser#compare_operator}.
	 * @param ctx the parse tree
	 */
	void exitLess(DistributionInputParser.LessContext ctx);
	/**
	 * Enter a parse tree produced by the {@code Equal}
	 * labeled alternative in {@link DistributionInputParser#compare_operator}.
	 * @param ctx the parse tree
	 */
	void enterEqual(DistributionInputParser.EqualContext ctx);
	/**
	 * Exit a parse tree produced by the {@code Equal}
	 * labeled alternative in {@link DistributionInputParser#compare_operator}.
	 * @param ctx the parse tree
	 */
	void exitEqual(DistributionInputParser.EqualContext ctx);
	/**
	 * Enter a parse tree produced by the {@code compare_term_trio}
	 * labeled alternative in {@link DistributionInputParser#compare_term}.
	 * @param ctx the parse tree
	 */
	void enterCompare_term_trio(DistributionInputParser.Compare_term_trioContext ctx);
	/**
	 * Exit a parse tree produced by the {@code compare_term_trio}
	 * labeled alternative in {@link DistributionInputParser#compare_term}.
	 * @param ctx the parse tree
	 */
	void exitCompare_term_trio(DistributionInputParser.Compare_term_trioContext ctx);
	/**
	 * Enter a parse tree produced by the {@code Compare_term_Greater}
	 * labeled alternative in {@link DistributionInputParser#compare_term}.
	 * @param ctx the parse tree
	 */
	void enterCompare_term_Greater(DistributionInputParser.Compare_term_GreaterContext ctx);
	/**
	 * Exit a parse tree produced by the {@code Compare_term_Greater}
	 * labeled alternative in {@link DistributionInputParser#compare_term}.
	 * @param ctx the parse tree
	 */
	void exitCompare_term_Greater(DistributionInputParser.Compare_term_GreaterContext ctx);
	/**
	 * Enter a parse tree produced by the {@code Compare_term_Greater_or_equal}
	 * labeled alternative in {@link DistributionInputParser#compare_term}.
	 * @param ctx the parse tree
	 */
	void enterCompare_term_Greater_or_equal(DistributionInputParser.Compare_term_Greater_or_equalContext ctx);
	/**
	 * Exit a parse tree produced by the {@code Compare_term_Greater_or_equal}
	 * labeled alternative in {@link DistributionInputParser#compare_term}.
	 * @param ctx the parse tree
	 */
	void exitCompare_term_Greater_or_equal(DistributionInputParser.Compare_term_Greater_or_equalContext ctx);
	/**
	 * Enter a parse tree produced by the {@code Compare_term_Less}
	 * labeled alternative in {@link DistributionInputParser#compare_term}.
	 * @param ctx the parse tree
	 */
	void enterCompare_term_Less(DistributionInputParser.Compare_term_LessContext ctx);
	/**
	 * Exit a parse tree produced by the {@code Compare_term_Less}
	 * labeled alternative in {@link DistributionInputParser#compare_term}.
	 * @param ctx the parse tree
	 */
	void exitCompare_term_Less(DistributionInputParser.Compare_term_LessContext ctx);
	/**
	 * Enter a parse tree produced by the {@code Compare_term_Less_or_equal}
	 * labeled alternative in {@link DistributionInputParser#compare_term}.
	 * @param ctx the parse tree
	 */
	void enterCompare_term_Less_or_equal(DistributionInputParser.Compare_term_Less_or_equalContext ctx);
	/**
	 * Exit a parse tree produced by the {@code Compare_term_Less_or_equal}
	 * labeled alternative in {@link DistributionInputParser#compare_term}.
	 * @param ctx the parse tree
	 */
	void exitCompare_term_Less_or_equal(DistributionInputParser.Compare_term_Less_or_equalContext ctx);
	/**
	 * Enter a parse tree produced by the {@code Compare_term_Equal}
	 * labeled alternative in {@link DistributionInputParser#compare_term}.
	 * @param ctx the parse tree
	 */
	void enterCompare_term_Equal(DistributionInputParser.Compare_term_EqualContext ctx);
	/**
	 * Exit a parse tree produced by the {@code Compare_term_Equal}
	 * labeled alternative in {@link DistributionInputParser#compare_term}.
	 * @param ctx the parse tree
	 */
	void exitCompare_term_Equal(DistributionInputParser.Compare_term_EqualContext ctx);
}