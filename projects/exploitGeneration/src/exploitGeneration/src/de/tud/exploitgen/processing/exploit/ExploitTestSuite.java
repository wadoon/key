/**
 * 
 */
package de.tud.exploitgen.processing.exploit;

import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import de.tud.exploitgen.infrastructure.KeYJavaClass;

/**
 * this class represents an exploit test suite for a java class, it includes:
 *   A list of ExploitTestCase
 *   class which is being resolved
 * @author Huy Do
 *
 */
public class ExploitTestSuite {
   private List<ExploitTestCases> listETC;
   KeYJavaClass javaClass;
   /**
    * @return the listETC
    */
   public List<ExploitTestCases> getListETC() {
      return listETC;
   }
   /**
    * @param listETC the listETC to set
    */
   public void setListETC(List<ExploitTestCases> listETC) {
      this.listETC = listETC;
   }
   /**
    * @return the keYJavaClass
    */
   public KeYJavaClass getKeYJavaClass() {
      return javaClass;
   }
   /**
    * @param keYJavaClass the keYJavaClass to set
    */
   public void setKeYJavaClass(KeYJavaClass keYJavaClass) {
      this.javaClass = keYJavaClass;
   }
   /**
    * @param keYJavaClass
    */
   public ExploitTestSuite(KeYJavaClass keYJavaClass) {
      super();
      this.javaClass = keYJavaClass;
      //create an empty list of exploit test case
      this.listETC=new LinkedList<ExploitTestCases>();
   }   
   
   //add an exploit test case into this test suite
   public void addExploitTestCase(ExploitTestCases etc){
      if(etc!=null)
         this.listETC.add(etc);
   }
   
 //add a list of exploit test cases into this test suite
   public void addListExploitTestCase(List<ExploitTestCases> listETCs){
      if(listETCs.size()>0){
         /*for(ExploitTestCases etc: listETCs)
            addExploitTestCase(etc);*/
         this.listETC.addAll(listETCs);
      }
         
   }
   
   //check if there is no exploit test case
   public boolean isEmpty(){
      return listETC.isEmpty()?true:false;
   }  
 
  //get the amount of exploits
   public int getAmouttOfExploits(){
      int count=0;
      for(ExploitTestCases etcs: listETC){
         count+=etcs.getExploitModel().size();
      }
      return count;
   }
   
   public void printStatistics(){
      //calculate number of exploits through lowVar
      Map<String,Integer> numExploitLowVar =  new HashMap<String,Integer>();
      for(ExploitTestCases etcs: listETC){
         for(ExploitModel em : etcs.getExploitModel()){
            String lowVar = em.getLowVar().getVariableName();
            if(numExploitLowVar.containsKey(lowVar)){
               int num = numExploitLowVar.get(lowVar);
               num+=1;
               numExploitLowVar.put(lowVar, num);
            }else{
               numExploitLowVar.put(lowVar, 1);
            }
         }
      }
      
      //print statistics
      System.out.println("Statistics of exploit:");
      for(String lowVar: numExploitLowVar.keySet()){
         System.out.println(lowVar + " : " + numExploitLowVar.get(lowVar));
      }
      
      System.out.println("************exploit details:**********");
      for(ExploitTestCases etc: listETC){
         etc.printStatistics();
      }
      System.out.println("************end of exploit details:**********");
      
      
   }
   
}
