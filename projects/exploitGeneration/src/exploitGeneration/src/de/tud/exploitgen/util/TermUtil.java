/**
 * this class contains utilized methods for working with Term
 */
package de.tud.exploitgen.util;

import java.util.LinkedList;
import java.util.List;

import de.uka.ilkd.key.collection.ImmutableArray;
import de.uka.ilkd.key.logic.Term;
import de.uka.ilkd.key.logic.op.QuantifiableVariable;

/**
 * @author Huy Do
 */
public class TermUtil {
   /**
    * return true if Term t already exists in list lt (lt contains a Term that has the same name with t)
    * otherwise return false
    * */
   public static boolean inListTerm(Term t, List<Term> lt){
      if(!lt.isEmpty()){
         for(Term te: lt){
            if(t.toString().equals(te.toString()))
               return true;
         }
      }
      return false;
   }
   
   /**
    * return true if Term t already exists in array lt (lt contains a Term that has the same name with t)
    * otherwise return false
    * */
   public static boolean inListTerm(Term t, ImmutableArray<Term> lt){
      if(!lt.isEmpty()){
         for(Term te: lt){
            if(t.toString().equals(te.toString()))
               return true;
         }
      }
      return false;
   }
   
   /**
    * return true if String identifier already exists in list lt (lt contains a Term that has the same name with t)
    * otherwise return false
    * */
   public static boolean inListTerm(String identifier, List<Term> lt){
      if(!lt.isEmpty()){
         for(Term te: lt){
            if(identifier.equals(te.toString()))
               return true;
         }
      }
      return false;
   } /**
    * return true if String identifier already exists in array lt (lt contains a Term that has the same name with t)
    * otherwise return false
    * */
   public static boolean inListTerm(String identifier, ImmutableArray<Term> lt){
      if(!lt.isEmpty()){
         for(Term te: lt){
            if(identifier.equals(te.toString()))
               return true;
         }
      }
      return false;
   }
   
   
   
   /**
    * return true if t1 and t2 has the same String representation
    * */
   public static boolean sameToString(Term t1, Term t2){
      return (t1.toString().equals(t2.toString()));
   }
   
   /**
    * @param sub
    * @param root 
    * return true if @Term sub is a descendant of root
    * we compare two term based on its String representation 
    * */   
   public static boolean isDescendant(final Term sub, final Term root){
      if(root!=null){
         if(sameToString(sub, root)){
            return true;
         }else if(root.subs()==null){
            return false;
         }else if(root.subs().size()==0){
            return false;
         }else if(inListTerm(sub,root.subs())){
            return true;
         }else{
            boolean result = false;
            for(Term st: root.subs()){
               result = result || isDescendant(sub, st);
            }
            return result;   
         }
      }else{
         return false;
      }
   }
   
   public static List<Term> mergeListTerm(List<Term> lt1, List<Term> lt2){
      List<Term> result = new LinkedList<Term>();
      result.addAll(lt1);
      for(Term t: lt2){
         if(!inListTerm(t, result))
            result.add(t);
      }
      return result;
   }
}
