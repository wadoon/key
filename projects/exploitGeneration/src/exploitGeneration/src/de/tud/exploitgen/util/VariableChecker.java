/**
 * 
 */
package de.tud.exploitgen.util;



import java.io.IOException;
import java.util.LinkedList;
import java.util.List;

import de.tud.exploitgen.infrastructure.KeYJavaMethod;
import de.tud.exploitgen.processing.IFBarrier;
import de.uka.ilkd.key.proof.init.ProofInputException;
import de.uka.ilkd.key.symbolic_execution.model.IExecutionVariable;

/**
 * this class check properties of a variable represented by a IExecutionVaribale object
 * @author Huy Do
 *
 */
public class VariableChecker {
   /*
    * check if a variable is a high variable or not
    * first simple implementation: just check via its name (start by "h")
    * todo: improve it by using metadata supplied by JML specifications
    * */
   private KeYJavaMethod method;// contains meta data including JML specifications
   private IFSpecParser parser;  //contains parsing information of information flow security specifications
   private List<String> listLowVars; //list of Low Values, get from list barriers
   private List<String> listHighVars; //list of High Values, get from list barriers
   
   /*
    * solve parser to get listLowVars, listHighVars and listBarriers
    * */
   private void solveParser() throws IOException{
      List<IFBarrier> listBarriers=parser.parseSpecification2GetListBarrier();
      
      listLowVars=new LinkedList<String>();
      listHighVars=new LinkedList<String>();
      
      for(IFBarrier barrier:listBarriers){
         List<String> destination=barrier.getDestination();
         List<String> source=barrier.getSource();
         
         for(String var:destination){
            if(!listLowVars.contains(var)) //if destination variables is not in the listLowVars, add it
               listLowVars.add(var);
         }
         
         for(String var:source){
            if(!listHighVars.contains(var))  //if source variables is not in the listHighVars, add it
               listHighVars.add(var);            
         }
      }
   }      
   
     
   /**
    * @param method
    * @param parser
    * @throws IOException 
    */
   public VariableChecker(KeYJavaMethod method, IFSpecParser parser) throws IOException {
      super();
      this.method = method;
      this.parser = parser;
      solveParser();
   }
   
   
   
   
   /**
    * @param method
    * @param listLowVars
    * @param listHighVars
    */
   public VariableChecker(KeYJavaMethod method, List<String> listLowVars,
         List<String> listHighVars) {
      super();
      this.method = method;
      this.listLowVars = listLowVars;
      this.listHighVars = listHighVars;
   }


   /*
   * now: check if variable's name is in the listHighVars or not
   */
   public boolean isHigh(IExecutionVariable var) throws ProofInputException{        
      String varName=new KeYResourceHandler().getVarName(var);        
      if(listHighVars.contains(varName))
         return true;
      else return false;
     
   }
   
   public boolean isHigh(String varName) throws ProofInputException{
      if(listHighVars.contains(varName))
         return true;
      else return false;
   }
   /*
    * check if a variable is a high variable or not
    * first simple implementation: just check via its name (start by "l")
    * todo: improve it by using metadata supplied by JML specifications
    * now: check if variable's name is in the listLowVars or not
    * */
   public boolean isLow(IExecutionVariable var)throws ProofInputException{
     
      String varName=new KeYResourceHandler().getVarName(var);
      if(listLowVars.contains(varName))
         return true;
      else return false;
   }
   public boolean isLow(String varName) throws ProofInputException{
      if(listLowVars.contains(varName))
         return true;
      else return false;
   }
   /*
   
   /*
    * check if variables is heap (name = "self")
    * */
   public boolean isHeap(IExecutionVariable var)throws ProofInputException{     
         if(var.getName().startsWith("self"))
            return true;
         else return false;      
   }
}
