package de.tud.exploitgen.findsecret;


import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import com.csvanefalk.keytestgen.core.model.implementation.variable.ModelVariable;

import de.tud.exploitgen.detectleak.specification.noninterference.VariableClassifier;
import de.tud.exploitgen.findsecret.barvinokinterface.Iscc2TermTransformer;
import de.tud.exploitgen.findsecret.barvinokinterface.ParametricPolytope;
import de.tud.exploitgen.findsecret.barvinokinterface.Term2IsccTransformer;
import de.tud.exploitgen.findsecret.optimizelowinput.BestLowInputProducer;
import de.tud.exploitgen.findsecret.optimizelowinput.PPCountingResult;
import de.tud.exploitgen.solver.Z3Solver;
import de.tud.exploitgen.util.TermParser;
import de.uka.ilkd.key.logic.Term;
import de.uka.ilkd.key.logic.TermBuilder;

public class SISupporter4General extends SISupporter{	
	private HybridDomain hybridOutDomain; //hybrid domain of observable output values
	
	public SISupporter4General(BadMethod badMethod) {
		super(badMethod);	
		constructHybridDomain();
		hybridOutDomain.printInformation();
	}
	
	@Override
	public Map<String, Long> findBestLowInput() throws IOException {
		List<ParametricPolytope> listPP = new LinkedList<ParametricPolytope>();
		TermBuilder termBuilder = badMethod.getMethod().getServices().getTermBuilder();
		
		VariableClassifier vc = badMethod.getRiskyPath(0, 0).getVc();
		List<String> listParameters = new LinkedList<String>();
		listParameters.addAll(vc.getListLowVars());

		List<String> listVariables = vc.getListHighVars();

		listParameters.addAll(hybridOutDomain.getListSymbols());
		

		for(Map<String,Term> mapValues: hybridOutDomain.getListMapValues()){
			Term constraint = termBuilder.ff();
			for(RiskyPath rp: badMethod.getListRiskyPaths()){
				Term pathMatchTerm = rp.getCondition4MatchHybridOutput(mapValues);
				if(!TermParser.isBooleanFalse(pathMatchTerm))
					constraint = termBuilder.or(constraint, pathMatchTerm);
			}
			constraint = termBuilder.and(constraint, hybridOutDomain.getDomainCondition()); 
			constraint = termBuilder.and(constraint, currentKnowledge);
			listPP.add(new ParametricPolytope(constraint, listParameters, listVariables));
		}		
		
		List<PPCountingResult> listCountingResults = new LinkedList<PPCountingResult>();
		for(ParametricPolytope pp: listPP){
			//TODO: do not bind with a specific path for file
			PrintStream outFile = new PrintStream(new FileOutputStream("/home/huy/formula.txt"));
			String paraPolytope = Term2IsccTransformer.transformParaPolytope2Iscc(pp);
			System.out.println("parametric polytope: " + paraPolytope);
			outFile.print("card " + paraPolytope );
			outFile.close();
			
			List<String> command = new ArrayList<String>();
		    command.add("iscc");
		    
		    ProcessBuilder builder = new ProcessBuilder(command);
		    //Map<String, String> environ = builder.environment();
		    builder.redirectInput(ProcessBuilder.Redirect.from(new File("/home/huy/formula.txt")));		    
		    final Process process = builder.start();
		    /*   InputStream is = process.getInputStream();
		    InputStreamReader isr = new InputStreamReader(is);*/
		    BufferedReader br = new BufferedReader(new InputStreamReader(process.getInputStream()));
		    String line = br.readLine();
		    System.out.println("iscc result returned: " + line);
	    	Iscc2TermTransformer transformer = new Iscc2TermTransformer(line, badMethod.getMethod().getServices());
	    	transformer.translateIsccResult2MapTerm();			   
			listCountingResults.add(new PPCountingResult(transformer.getListCountingResult()));				
		}		
		//find "best" low input
		BestLowInputProducer inputProducer = new BestLowInputProducer(listCountingResults, 
				badMethod.getMethod().getServices(), findNumberOfPossibleHighValue(currentKnowledge),
				badMethod.getRiskyPath(0, 0).getVc().getListLowVars());
		return inputProducer.findBestLowInputsUsingConvexSolver();
	}	
	
	private void constructHybridDomain(){		
		hybridOutDomain = new HybridDomain();
		for(RiskyPath rp: badMethod.getListRiskyPaths()){
			//System.out.println("path condition of resolving path: " + rp.getPathCondition());
			ObservableOutput outputs = rp.getObservaleOutputs();
			outputs.constructElement4HybridDomain();
			System.out.println("list map values: " + outputs.getListMapHybridValues());
			hybridOutDomain.addMapValues(outputs.getListMapHybridValues());
			hybridOutDomain.addSymbol(outputs.getListSymbols());
		}
		hybridOutDomain.builDomainCondition(badMethod.getMethod().getServices());
	}	
	
	
	
}
