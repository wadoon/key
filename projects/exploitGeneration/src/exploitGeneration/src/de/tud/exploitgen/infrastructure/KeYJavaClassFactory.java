/**
 * 
 */
package de.tud.exploitgen.infrastructure;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;

import de.uka.ilkd.key.gui.configuration.ChoiceSettings;
import de.uka.ilkd.key.gui.configuration.ProofSettings;
import de.uka.ilkd.key.java.JavaInfo;
import de.uka.ilkd.key.java.Services;
import de.uka.ilkd.key.java.abstraction.KeYJavaType;
import de.uka.ilkd.key.logic.op.IProgramMethod;
import de.uka.ilkd.key.proof.io.ProblemLoaderException;
import de.uka.ilkd.key.proof.mgt.SpecificationRepository;
import de.uka.ilkd.key.speclang.FunctionalOperationContract;
import de.uka.ilkd.key.symbolic_execution.profile.SymbolicExecutionJavaProfile;
import de.uka.ilkd.key.symbolic_execution.util.JavaUtil;
import de.uka.ilkd.key.symbolic_execution.util.KeYEnvironment;
import de.uka.ilkd.key.symbolic_execution.util.SymbolicExecutionUtil;
import de.uka.ilkd.key.ui.CustomUserInterface;

/**
 * @author christopher
 *
 */
public class KeYJavaClassFactory {  
   
   /*
    * ----- uses code of Christopher Svanefalk in keytestgen project------------------------- 
    * */
   
   /**
    * Strips the file extension from a file name
    *
    * @param file the file to process
    * @return the name of the file
    */
   private String getFileName(final File file) {
       final String name = file.getName();
       final int delimiter = name.indexOf('.');
       return name.substring(0, delimiter);
   }

   /**
    * @param javaFile a valid java source
    * @return the package of the source
    */
   private String getPackage(final File javaFile) throws IOException {
       BufferedReader reader = new BufferedReader(new FileReader(javaFile));
       String next = "";
       while ((next = reader.readLine()) != null) {
           next = next.trim();
           if (next.startsWith("package")) {
               String[] partition = next.split(" ");
               String packageName = partition[partition.length - 1];
               return packageName.substring(0, packageName.indexOf(";"));
           }
       }
       return next;
   }
   
   
   /**
    * Manufactures an instance of {@link KeYJavaClass}.
    *
    * @param javaFile path to the corresponding .java file on the local file system
    * @return the {@link KeYJavaClass} instance
    * @throws IOException           if the file could not be found or read
    * @throws ProblemLoaderException 
    * @throws KeYInterfaceException
    */
   public KeYJavaClass createKeYJavaClass(final File javaFile) throws IOException, ProblemLoaderException{
       // Set default Taclet options for symbolic execution
       if(!SymbolicExecutionUtil.isChoiceSettingInitialised()){
          final KeYEnvironment<CustomUserInterface> environment = KeYEnvironment.load(SymbolicExecutionJavaProfile.getDefaultInstance(), javaFile, null, null,true);
          //final KeYEnvironment<CustomUserInterface> environment = KeYEnvironment.load(javaFile, null, null);
          environment.dispose();
       }
       ChoiceSettings choiceSettings = ProofSettings.DEFAULT_SETTINGS.getChoiceSettings();
       HashMap<String, String> oldSettings = choiceSettings.getDefaultChoices();
       HashMap<String, String> newSettings = new HashMap<String, String>(oldSettings);
       newSettings.putAll(SymbolicExecutionUtil.getDefaultTacletOptions());
       choiceSettings.setDefaultChoices(newSettings);
       /*
        * Load the file into KeY and get the InitConfig instance for it.
        */
       
       final KeYEnvironment<CustomUserInterface> environment = KeYEnvironment.load(SymbolicExecutionJavaProfile.getDefaultInstance(), javaFile, null, null, true);
       //final KeYEnvironment<CustomUserInterface> environment = KeYEnvironment.load(javaFile, null, null);
       final JavaInfo javaInfo = environment.getServices().getJavaInfo();

       /*
        * Retrieve the KeYJavaType for the top level class declaration in this
        * file
        */

       final String fileName = getFileName(javaFile);
       final String packageName = getPackage(javaFile);
       final String qualifiedName = JavaUtil.isTrimmedEmpty(packageName) ? fileName : packageName + "." + fileName;
       final KeYJavaType mainType = javaInfo.getKeYJavaType(qualifiedName);       

       return constructClass(mainType, environment);
   }
   
   private KeYJavaClass constructClass(final KeYJavaType parent,
         final KeYEnvironment<CustomUserInterface> environment) {

      final Services services = environment.getServices();
      final JavaInfo javaInfo = services.getJavaInfo();
      
      final KeYJavaClass keYJavaClass = new KeYJavaClass(parent, environment);
      
      for (final IProgramMethod memberMethod : javaInfo.getAllProgramMethods(parent)) {
        //edited by Huy: just check native public method (memberMethod.getContainerType()==parent && memberMethod.isPublic()==true)
      if (!memberMethod.getFullName().startsWith("<") && (memberMethod.getContainerType()==parent) && (memberMethod.isPublic())) {
      
         /*
         * Extract the operational contracts of the method, and create a
         * separate abstraction of the method for each one of them
         * (since each one will effectively represent a unique set of
         * restrictions on the invocation of the method).
         */
         final List<FunctionalOperationContract> contracts = getFunctionalOperationContracts(memberMethod, services);
         
         //extract information flow contracts
         //final List<InformationFlowContract> infFlowContracts = getInformationFlowContracts(memberMethod, services);
            /*
            * If the user has not specified a postcondition, simply let it
            * be null and delegate to the Oracle Generator.
            */
            if (contracts.isEmpty()) {
               //if(infFlowContracts.isEmpty()){
                  
                  final KeYJavaMethod keYJavaMethod = new KeYJavaMethod(keYJavaClass,
                                                             memberMethod,
                                                             environment,
                                                             null);
                  
                  keYJavaClass.addMethodMapping(memberMethod.getFullName(), keYJavaMethod);
               //}else{
                  
                  /*for(final InformationFlowContract infFlowContract: infFlowContracts){
                     final KeYJavaMethod keYJavaMethod = new KeYJavaMethod(keYJavaClass,
                           null,
                           infFlowContract,
                           memberMethod,
                           environment.getServices()
                           );

                      keYJavaClass.addMethodMapping(memberMethod.getFullName(), keYJavaMethod);
                  }
               }*/
               
            } else {  
               final KeYJavaMethod keYJavaMethod = new KeYJavaMethod(keYJavaClass,
                     memberMethod,
                     environment,
                     contracts);
               keYJavaClass.addMethodMapping(memberMethod.getFullName(), keYJavaMethod);
            }
               /*for (final FunctionalOperationContract contract : contracts) {
               
                  //if(infFlowContracts.isEmpty()){
                     
                     final KeYJavaMethod keYJavaMethod = new KeYJavaMethod(keYJavaClass,
                                                                memberMethod,
                                                                environment,
                                                                contract);
                     
                     keYJavaClass.addMethodMapping(memberMethod.getFullName(), keYJavaMethod);*/
                  /*}else{
                     System.out.println("Declassification is not empty!");
                     for(final InformationFlowContract infFlowContract: infFlowContracts){
                        final KeYJavaMethod keYJavaMethod = new KeYJavaMethod(keYJavaClass,
                              contract,
                              infFlowContract,
                              memberMethod,
                              environment.getServices()
                              );

                         keYJavaClass.addMethodMapping(memberMethod.getFullName(), keYJavaMethod);
                     }
                  }*/
               }
            }
      return keYJavaClass;
   }
   

   /**
    * Extracts the {@link FunctionalOperationContract} instances for a specific
    * method. Such contracts represent the concrete specifications for the
    * method, i.e. a mapping between a precondition (initial heapstate) and
    * postcondition (postcondition).
    *
    * @param method   the symbolic execution node corresponding to the method call
    * @param services KeY service class
    * @return the contract for the method   
    */
   private List<FunctionalOperationContract> getFunctionalOperationContracts(final IProgramMethod method, final Services services) {

       final SpecificationRepository specificationRepository = services.getSpecificationRepository();
       
       /*
        * Extract the abstract representation of the method itself, as well as
        * the type of the class which contains it. Use this information in
        * order to retrieve the specification contracts which exist for the
        * method.
        */
       final KeYJavaType containerClass = method.getContainerType();
       final List<FunctionalOperationContract> contracts = new LinkedList<FunctionalOperationContract>();
       for (final FunctionalOperationContract contract : specificationRepository.getOperationContracts(containerClass,
                                                                                                       method)) {
           contracts.add(contract);
                      
       }
       return contracts;
   }
   /**
    * get information flow contract
    *added by Huy 
    * */
   /*private List<InformationFlowContract> getInformationFlowContracts(final IProgramMethod method, final Services services) {

      final SpecificationRepository specificationRepository = services.getSpecificationRepository();

      
       * Extract the abstract representation of the method itself, as well as
       * the type of the class which contains it. Use this information in
       * order to retrieve the information contracts which exist for the
       * method.
       
      final KeYJavaType containerClass = method.getContainerType();
      final List<InformationFlowContract> contracts = new LinkedList<InformationFlowContract>();
      for (final InformationFlowContract contract : specificationRepository.getInformationFlowContracts(containerClass,
                                                                                                      method)) {
          contracts.add(contract);
      }
      //System.out.println("number of information flow contracts: " + contracts.size());
      return contracts;
  }*/
      
   }
