/**
 * 
 */
package de.tud.exploitgen.processing;

import java.io.File;
import java.io.IOException;
import java.util.Set;

import com.csvanefalk.keytestgen.util.transformers.TermTransformerException;

import de.tud.exploitgen.infrastructure.*;

import de.uka.ilkd.key.proof.Proof;
import de.uka.ilkd.key.proof.init.FunctionalOperationContractPO;
import de.uka.ilkd.key.proof.init.ProofInputException;
import de.uka.ilkd.key.proof.init.ProofOblInput;
import de.uka.ilkd.key.speclang.Contract;
import de.uka.ilkd.key.speclang.FunctionalOperationContract;

import de.uka.ilkd.key.symbolic_execution.SymbolicExecutionTreeBuilder;
import de.uka.ilkd.key.symbolic_execution.model.IExecutionStart;
import de.uka.ilkd.key.symbolic_execution.po.ProgramMethodPO;
import de.uka.ilkd.key.symbolic_execution.util.KeYEnvironment;
import de.uka.ilkd.key.symbolic_execution.util.SymbolicExecutionEnvironment;
import de.uka.ilkd.key.ui.CustomConsoleUserInterface;

/**
 * @author Huy Do
 *
 */
public class ProcessManager {
   private File javaFile; //Java file that will be checked
   private KeYJavaClass javaClass;  //contains all necessary information for checking non-interference property
   /**
    * @param javaFile
    * @throws IOException 
    */
   public ProcessManager(File javaFile) throws IOException {
      super();
      this.javaFile = javaFile;
      //get necessary information into javaClass
      javaClass=new KeYJavaClassFactory().createKeYJavaClass(this.javaFile);
   }
   
   //process a method in the Java file
   public void checkMethod(String methodName) throws ProofInputException, TermTransformerException{
      
      KeYEnvironment<CustomConsoleUserInterface> env=javaClass.getEnvironment();
      KeYJavaMethod method=javaClass.getMethod(methodName);
      
      Contract contract = method.getFunctionalContract();
      //print out precondition
      System.out.println("Precondition: " + method.getPreconditions());
      
      ProofOblInput input = new ProgramMethodPO(env.getInitConfig(),
            method.getProgramMethod().getFullName(),
            method.getProgramMethod(),
            null,
            true,
            true);
      
      //ProofOblInput input = new FunctionalOperationContractPO(env.getInitConfig(), (FunctionalOperationContract)contract, true, true);
      // Create proof
      Proof proof = env.createProof(input);     
      
      /// Configure proof for symbolic execution
      SymbolicExecutionEnvironment.configureProofForSymbolicExecution(proof,
                                                                      1000,
                                                                      false,
                                                                      false,
                                                                      false,
                                                                      false);

      // Create symbolic execution tree which contains only the start node at beginning
      SymbolicExecutionTreeBuilder builder = new SymbolicExecutionTreeBuilder(env.getMediator(),
                                                                              proof,
                                                                              false,
                                                                              false);
      // Run proof
      env.getUi().startAndWaitForAutoMode(proof);
      // Update symbolic execution tree
      builder.analyse();
      //get start node
      IExecutionStart root=builder.getStartNode();
      
      //create NonInterferenceChecker object to check the method
      NonInterferenceChecker nic=new NonInterferenceChecker(root, method);
      //check the method
      nic.checkMethod();
      
   }
   
   //check all methods of java file
   public void checkProgram() throws TermTransformerException, ProofInputException{
      Set<String> methodNames=javaClass.getMethods();
      for(String methodName:methodNames){
         System.out.println("check method " + methodName);
         checkMethod(methodName);
         System.out.println("//////////////////////////////////////////");
      }
   }
   
}
