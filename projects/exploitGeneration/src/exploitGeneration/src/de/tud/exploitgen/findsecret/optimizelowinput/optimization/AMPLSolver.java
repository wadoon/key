package de.tud.exploitgen.findsecret.optimizelowinput.optimization;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.io.input.ReversedLinesFileReader;

import de.tud.exploitgen.findsecret.distribution.SecretDistribution;
import de.tud.exploitgen.findsecret.optimizelowinput.MatchableCountingSolution;
import de.tud.exploitgen.findsecret.optimizelowinput.OptimalSolution;
import de.tud.exploitgen.findsecret.optimizelowinput.optimization.ampltranslation.AMPLTranslator;
import de.tud.exploitgen.util.KEGConstant;
import de.uka.ilkd.key.java.Services;

public class AMPLSolver extends OptimizationSolver{
	private String optSolver;
	public AMPLSolver(MatchableCountingSolution matchCountSolutions,
			Services services, int metric, String optSolver) {
		super(matchCountSolutions, services, metric);
		this.optSolver = optSolver;
	}
	
	

	public AMPLSolver(MatchableCountingSolution countSolution,
			Services services, int metric, String optSolver, SecretDistribution sDistribution) {
		super(countSolution, services, metric, sDistribution);
		this.optSolver = optSolver;
	}



	@Override
	public OptimalSolution findOptimalSolution() {		
		AMPLTranslator amplTranslator = new AMPLTranslator(countSolution, optSolver, services, metric, sDistribution);
		PrintStream outFile;
		try {			
			outFile = new PrintStream(new FileOutputStream("op.mod"));
		} catch (FileNotFoundException e) {
			e.printStackTrace();
			return null;
		}
		//create ampl content by AMPLTranslator
		String amplContent = amplTranslator.translate2AMPL();
		outFile.print(amplContent );
		outFile.close();
		
		//call solver from ampl command to solve optimization problem
		List<String> command = new ArrayList<String>();
	    command.add("ampl");
	    command.add("op.mod");
	    ProcessBuilder builder = new ProcessBuilder(command);
	    //redirect the optimization result to op.out
	    builder.redirectOutput(new File("op.out"));	    
	    Process process;
		try {
			process = builder.start();
			process.waitFor();
			process.destroy();			
			return readResultFromOutFile("op.out", amplTranslator.getMapVariables().size());
		} catch (IOException e) {
			e.printStackTrace();
			return null;
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return null;
		}
		
	}
	
	
	private OptimalSolution readResultFromOutFile(String fileName, int numOfVar) throws IOException{
		//ReversedLinesFileReader rFile = new ReversedLinesFileReader(new File(fileName), 4, Charset.defaultCharset());
		ReversedLinesFileReader rReader = new ReversedLinesFileReader(new File(fileName));
	
		try{
			Map<String, Long> mapValues = new HashMap<String,Long>();		
			for(int i=0;i<numOfVar;i++){		
				rReader.readLine();			
				String varValue = rReader.readLine();			
				//separate variable and value
				System.out.println("varValue: " + varValue);
				String[] valuePharse = varValue.split("=");
				try{
				
					//mapValues.put(valuePharse[0].trim(), Double.valueOf(valuePharse[1].trim()).longValue());
					mapValues.put(valuePharse[0].trim(), Double.valueOf(valuePharse[1].trim()).longValue());
				}catch(Exception e){
					rReader.close();
					//in this case may be the number is printed out in form of floating point
					return null;
				}
				
			}
			rReader.readLine();
			String optValue = rReader.readLine();
			System.out.println("optValue: "+ optValue);
			//double optimalValue = Double.parseDouble(optValue.split("=")[1].trim());
			/*double optimalValue = computeOptimizeValue(mapValues);
			System.out.println("actually optValue: "+ optimalValue);*/
			rReader.close();
			return new OptimalSolution(mapValues, 0); //don't worry, the actual optimal value will be recomputed using mapValues
		}catch(Exception e){
			rReader.close();
			return null;
		}
		
	}	
		
}
