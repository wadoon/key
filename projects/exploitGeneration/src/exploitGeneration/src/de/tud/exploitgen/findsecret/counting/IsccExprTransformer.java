package de.tud.exploitgen.findsecret.counting;

import de.tud.exploitgen.util.AbstractExprTransformer;
import de.tud.exploitgen.util.TermParser;
import de.uka.ilkd.key.collection.ImmutableArray;
import de.uka.ilkd.key.logic.Term;
import de.uka.ilkd.key.logic.op.QuantifiableVariable;

public class IsccExprTransformer extends AbstractExprTransformer{

	@Override
	public String getBinaryOperatorString(Term expression) {
		  //arithmetic operators
	      if(TermParser.isAddition(expression))
	         return " + ";
	      else if(TermParser.isSubtraction(expression))
	         return " - ";
	      else if(TermParser.isMultiplication(expression))
	         return " * ";
	      else if(TermParser.isDivision(expression))
	         return " / ";
	      
	      //Comparison operators
	      else if(TermParser.isGreaterThan(expression))
	         return " > ";
	      else if(TermParser.isGreaterOrEquals(expression))
	         return " >= " ;
	      else if(TermParser.isLessThan(expression))
	         return " < ";
	      else if(TermParser.isLessOrEquals(expression))
	         return " <= ";
	      else if(TermParser.isEquals(expression))
	         return " = ";
	     
	      //binary logical operators
	      if(TermParser.isAnd(expression))
	         return " && ";
	      else if(TermParser.isOr(expression))
	         return " || ";      
	      else   
	         return "";
	}

	@Override
	public String getUnaryOperatorString(Term expression) {
		if(TermParser.isIntegerNegation(expression))
	         return "-";
	      else if(TermParser.isUnaryMinusFunction(expression))
	         return "-";
	      else if (TermParser.isNot(expression))
	         return "!";
	      else
	         return "";
	}

	@Override
	public String getExistsExpression(Term expression) {
		ImmutableArray<QuantifiableVariable> listQVars = expression.boundVars();
		String result = "exists ";
		for(QuantifiableVariable qVar: listQVars){
			result += qVar.name().toString() + ",";
		}
		result = result.substring(0, result.length()-1) + " : ";
		result += transformExpression2String(expression.sub(0));
		return result;
	}
	
	
}
