package de.tud.exploitgen.findsecret.counting;

import org.key_project.util.collection.ImmutableArray;

import de.tud.exploitgen.util.AbstractExprTransformer;
import de.tud.exploitgen.util.TermParser;
//import de.uka.ilkd.key.collection.ImmutableArray;
import de.uka.ilkd.key.java.Services;
import de.uka.ilkd.key.logic.Term;
import de.uka.ilkd.key.logic.TermBuilder;
import de.uka.ilkd.key.logic.op.QuantifiableVariable;

public class IsccExprTransformer extends AbstractExprTransformer{
	public Services services;
	
	
	public IsccExprTransformer(Services services) {
		super();
		this.services = services;
	}

	@Override
	public String getBinaryOperatorString(Term expression, Services services) {
		  //arithmetic operators
	      if(TermParser.isAddition(expression))
	         return " + ";
	      else if(TermParser.isSubtraction(expression))
	         return " - ";
	      else if(TermParser.isMultiplication(expression))
	         return " * ";
	      else if(TermParser.isDivision(expression))
	         return " / ";
	      
	      //Comparison operators
	      else if(TermParser.isGreaterThan(expression, services))
	         return " > ";
	      else if(TermParser.isGreaterOrEquals(expression, services))
	         return " >= " ;
	      else if(TermParser.isLessThan(expression, services))
	         return " < ";
	      else if(TermParser.isLessOrEquals(expression, services))
	         return " <= ";
	      else if(TermParser.isEquals(expression))
	         return " = ";
	     
	      //binary logical operators
	      if(TermParser.isAnd(expression))
	         return " && ";
	      else if(TermParser.isOr(expression))
	         return " || ";      
	      else   
	         return "";
	}

	@Override
	public String getUnaryOperatorString(Term expression, Services services) {
		if(TermParser.isIntegerNegation(expression, services))
	         return "-";
	      else if(TermParser.isUnaryMinusFunction(expression, services))
	         return "-";
	      else if (TermParser.isNot(expression))
	         return "!";
	      else
	         return "";
	}

	@Override
	public String getExistsExpression(Term expression, Services services) {
		ImmutableArray<QuantifiableVariable> listQVars = expression.boundVars();
		String result = "exists ";
		for(QuantifiableVariable qVar: listQVars){
			result += qVar.name().toString() + ",";
		}
		result = result.substring(0, result.length()-1) + " : ";
		result += transformExpression2String(expression.sub(0), services);
		return result;
	}

	/*
	 * we first transform a->b to (!a or b) then work with transformed version
	 * */
	@Override	
	public String getImplicationExpression(Term expression, Services services) {
		TermBuilder tb = services.getTermBuilder();
		Term transformedTerm = tb.or(tb.not(expression.sub(0)), expression.sub(1));
		return transformExpression2String(transformedTerm, services);
	}
	
	
}
