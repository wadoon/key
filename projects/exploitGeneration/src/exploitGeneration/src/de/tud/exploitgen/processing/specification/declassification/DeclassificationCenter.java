package de.tud.exploitgen.processing.specification.declassification;

import java.util.LinkedList;
import java.util.List;

import de.tud.exploitgen.processing.PairTermCollection;
import de.tud.exploitgen.util.TermUtil;
import de.uka.ilkd.key.collection.ImmutableList;
import de.uka.ilkd.key.java.Services;
import de.uka.ilkd.key.logic.Term;
import de.uka.ilkd.key.util.DelimitedRelease;
/*
 * store and pre-processing declassification (conditional delimited release)
 * */
public class DeclassificationCenter {
   private final List<CDRExtractor> listCDRExtractors;
   private Services services;
   
   public DeclassificationCenter(ImmutableList<DelimitedRelease> declassifies, Services services){
      this.services = services;
      listCDRExtractors = new LinkedList<CDRExtractor>();      
      if(declassifies.size()>0){
         int id = 0; //assign as id of each CDRExtractor instance
         for(DelimitedRelease decl: declassifies){
            listCDRExtractors.add(new CDRExtractor(decl,services,Integer.toString(id)));
            id++;
         }
      }
   }

   public List<CDRExtractor> getListCDRExtractors() {
      return listCDRExtractors;
   }

   public Services getServices() {
      return services;
   }
   
   //get all ptcResults collected from all CDRExtractors
   public PairTermCollection getALLPtcResults(){
      PairTermCollection ptcResults = new PairTermCollection(services);
      for(CDRExtractor cdrExtractor: listCDRExtractors){
         ptcResults.combine(cdrExtractor.getPairResults());
      }
      return ptcResults;
   }
   
   //get all quantified array terms from all CDRExtractor
   public List<Term> getAllQuanArrTerms(){
      List<Term> result = new LinkedList<Term>();
      for(CDRExtractor cdrExtractor: listCDRExtractors){
         List<Term> quanArrTerms = cdrExtractor.getListQuantifiedArrayTerm();
         result = TermUtil.mergeListTerm(result, quanArrTerms);
      }
      return result;
   }
   
   public List<Term> getAllQuantifiableVars(){
      List<Term> result = new LinkedList<Term>();
      for(CDRExtractor cdrExtractor: listCDRExtractors){
         List<Term> quantifiableVars = cdrExtractor.getListQuantifiableVars();
         result = TermUtil.mergeListTerm(result, quantifiableVars);
      }
      return result;
   }
}
