package de.tud.exploitgen.util;

import java.util.LinkedList;
import java.util.List;

import com.csvanefalk.keytestgen.core.model.implementation.Model;

/**
 * @author: Do Huy
 * this class represents a tree of Model used to store Models created by investigating a node
 * */
public class ModelTree {
   private Model model;
   private List<ModelTree> children;
   
   
   /*default constructor*/
   public ModelTree(){
      this.model = Model.constructModel();
      this.children = new LinkedList<ModelTree>();   
   }
   
   public ModelTree(Model model){
      this.model = model;
      this.children = new LinkedList<ModelTree>();    
   }
   
   public void addChild(ModelTree mtree){
      children.add(mtree);
   }

   public Model getModel() {
      return model;
   }

   public void setModel(Model model) {
      this.model = model;
   }

   public List<ModelTree> getChildren() {
      return children;
   }

   public void setChilds(List<ModelTree> childs) {
      this.children = childs;
   }
   
   /*get all model of leaf nodes (ModelTree) of this ModelTree instance*/
   public List<Model> getAllLeafModels(){      
      //performing tree traversal to get all leaf nodes      
      if(isLeaf()){
         List<Model> result = new LinkedList<Model>();
         result.add(model);
         return result;
      }else{
         List<Model> result = new LinkedList<Model>();
         for(ModelTree mt: children)
            result.addAll(mt.getAllLeafModels());
         return result;
      }               
   }
   
   public List<ModelTree> getAllLeafModelTrees(){
    //performing tree traversal to get all leaf nodes      
      if(isLeaf()){
         List<ModelTree> result = new LinkedList<ModelTree>();
         result.add(this);
         return result;
      }else{
         List<ModelTree> result = new LinkedList<ModelTree>();
         for(ModelTree mt: children)
            result.addAll(mt.getAllLeafModelTrees());
         return result;
      }    
   }
 
   public boolean isLeaf(){
      return (children.size()==0);         
   }

    
   
   public ModelTree getSmallestChild(){
      if(children.size()>0)
         return children.get(children.size()-1);
      else
         return null;
   }
   
}
