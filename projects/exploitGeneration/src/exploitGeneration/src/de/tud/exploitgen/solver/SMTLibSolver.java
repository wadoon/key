/**
 * 
 */
package de.tud.exploitgen.solver;

import java.util.List;
import java.util.Map;
import java.util.Vector;

import com.csvanefalk.keytestgen.core.model.implementation.variable.ModelVariable;

import de.uka.ilkd.key.gui.smt.ProofDependentSMTSettings;
import de.uka.ilkd.key.gui.smt.ProofIndependentSMTSettings;
import de.uka.ilkd.key.java.Services;
import de.uka.ilkd.key.logic.Sequent;
import de.uka.ilkd.key.logic.Term;
import de.uka.ilkd.key.logic.op.QuantifiableVariable;
import de.uka.ilkd.key.smt.IllegalFormulaException;
import de.uka.ilkd.key.gui.smt.SMTSettings;
import de.uka.ilkd.key.smt.SMTProblem;
import de.uka.ilkd.key.smt.SMTSolverResult;
import de.uka.ilkd.key.smt.SmtLib2Translator;
import de.uka.ilkd.key.smt.SolverLauncher;
import de.uka.ilkd.key.smt.SolverType;
import de.uka.ilkd.key.smt.AbstractSMTTranslator.Configuration;
import de.uka.ilkd.key.smt.SmtLibTranslator;
import de.uka.ilkd.key.smt.SMTSolver;
/**
 * @author Huy Do
 *
 */
public class SMTLibSolver extends AbstractFormulaSolver{   
   public SMTLibSolver(final Term formula){
      super(formula);
   }

   @Override
   public Map<String, Integer> solveFormulaInt() {
      // TODO Auto-generated method stub
      return null;
   }

   @Override
   public List<ModelVariable> solveFormula() {
      // TODO Auto-generated method stub
      
      return null;
   }
   
   private StringBuffer translate2SMTLib2(Services services) throws IllegalFormulaException{   
      SmtLib2Translator smt = new SmtLib2Translator(services,new Configuration(false,false));
      Vector<QuantifiableVariable> boundVars = new Vector<QuantifiableVariable>();
      SMTSettings settings = new SMTSettings(ProofDependentSMTSettings.getDefaultSettingsData(),
            ProofIndependentSMTSettings.getDefaultSettingsData(),services.getProof());
      
      return smt.translateProblem(formula, services, settings);                  
   }
   
   private StringBuffer translate2SMTLib(Services services) throws IllegalFormulaException{
      SmtLibTranslator smt = new SmtLibTranslator(services,new Configuration(false,false));
      Vector<QuantifiableVariable> boundVars = new Vector<QuantifiableVariable>();
      SMTSettings settings = new SMTSettings(ProofDependentSMTSettings.getDefaultSettingsData(),
            ProofIndependentSMTSettings.getDefaultSettingsData(),services.getProof());
      
      return smt.translateProblem(formula, services, settings);     
   }
   
   private SMTSolverResult getFinalResult(Services services){
      SMTSettings settings = new SMTSettings(ProofDependentSMTSettings.getDefaultSettingsData(),
            ProofIndependentSMTSettings.getDefaultSettingsData(),services.getProof());
      SMTSolver ss = SolverType.Z3_SOLVER.createSolver(new SMTProblem(formula), new SolverLauncher(settings), services);
      return ss.getFinalResult();
   }
}
