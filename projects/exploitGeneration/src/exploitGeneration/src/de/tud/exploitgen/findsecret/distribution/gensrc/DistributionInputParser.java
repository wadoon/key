// Generated from /Users/huydo/Working/KEG_Refactoring/key/projects/exploitGeneration/src/exploitGeneration/deployment/../src/de/tud/exploitgen/findsecret/distribution/gensrc/DistributionInput.g4 by ANTLR 4.5.1

package de.tud.exploitgen.findsecret.distribution.gensrc;

import de.uka.ilkd.key.logic.Term;

import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class DistributionInputParser extends Parser {
	static { RuntimeMetaData.checkVersion("4.5.1", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, WS=7, Neg_num=8, Pos_num=9, 
		FLOOR=10, OR=11, AND=12, INFINITY=13, EXISTS=14, TRUE=15, ZERO=16, POWER=17, 
		NONZERODIGIT=18, Param=19, LETTER=20, GE=21, GT=22, LE=23, LT=24, EQ=25, 
		MULT=26, DIV=27, PLUS=28, MINUS=29;
	public static final int
		RULE_distribution = 0, RULE_partition = 1, RULE_formula = 2, RULE_frequency = 3, 
		RULE_arith_expr = 4, RULE_arith_term = 5, RULE_factor = 6, RULE_int_num = 7, 
		RULE_logic_expr = 8, RULE_exists_expr = 9, RULE_qvar_expr = 10, RULE_logic_term = 11, 
		RULE_logic_factor = 12, RULE_compare_operator = 13, RULE_compare_term = 14;
	public static final String[] ruleNames = {
		"distribution", "partition", "formula", "frequency", "arith_expr", "arith_term", 
		"factor", "int_num", "logic_expr", "exists_expr", "qvar_expr", "logic_term", 
		"logic_factor", "compare_operator", "compare_term"
	};

	private static final String[] _LITERAL_NAMES = {
		null, "';'", "':'", "'['", "']'", "'('", "')'", null, null, null, "'floor'", 
		"'or'", "'and'", "'infty'", "'exists'", null, "'0'", "'^'", null, null, 
		null, "'>='", "'>'", "'<='", "'<'", "'='", "'*'", "'/'", "'+'", "'-'"
	};
	private static final String[] _SYMBOLIC_NAMES = {
		null, null, null, null, null, null, null, "WS", "Neg_num", "Pos_num", 
		"FLOOR", "OR", "AND", "INFINITY", "EXISTS", "TRUE", "ZERO", "POWER", "NONZERODIGIT", 
		"Param", "LETTER", "GE", "GT", "LE", "LT", "EQ", "MULT", "DIV", "PLUS", 
		"MINUS"
	};
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}

	@Override
	public String getGrammarFileName() { return "DistributionInput.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }

	public DistributionInputParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}
	public static class DistributionContext extends ParserRuleContext {
		public PartitionContext partition() {
			return getRuleContext(PartitionContext.class,0);
		}
		public List<DistributionContext> distribution() {
			return getRuleContexts(DistributionContext.class);
		}
		public DistributionContext distribution(int i) {
			return getRuleContext(DistributionContext.class,i);
		}
		public List<TerminalNode> WS() { return getTokens(DistributionInputParser.WS); }
		public TerminalNode WS(int i) {
			return getToken(DistributionInputParser.WS, i);
		}
		public DistributionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_distribution; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DistributionInputListener ) ((DistributionInputListener)listener).enterDistribution(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DistributionInputListener ) ((DistributionInputListener)listener).exitDistribution(this);
		}
	}

	public final DistributionContext distribution() throws RecognitionException {
		DistributionContext _localctx = new DistributionContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_distribution);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(30);
			partition();
			setState(47);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,2,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(34);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==WS) {
						{
						{
						setState(31);
						match(WS);
						}
						}
						setState(36);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(37);
					match(T__0);
					setState(41);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==WS) {
						{
						{
						setState(38);
						match(WS);
						}
						}
						setState(43);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(44);
					distribution();
					}
					} 
				}
				setState(49);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,2,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionContext extends ParserRuleContext {
		public FormulaContext formula() {
			return getRuleContext(FormulaContext.class,0);
		}
		public FrequencyContext frequency() {
			return getRuleContext(FrequencyContext.class,0);
		}
		public List<TerminalNode> WS() { return getTokens(DistributionInputParser.WS); }
		public TerminalNode WS(int i) {
			return getToken(DistributionInputParser.WS, i);
		}
		public PartitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DistributionInputListener ) ((DistributionInputListener)listener).enterPartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DistributionInputListener ) ((DistributionInputListener)listener).exitPartition(this);
		}
	}

	public final PartitionContext partition() throws RecognitionException {
		PartitionContext _localctx = new PartitionContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_partition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(50);
			formula();
			setState(54);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==WS) {
				{
				{
				setState(51);
				match(WS);
				}
				}
				setState(56);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(57);
			match(T__1);
			setState(61);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==WS) {
				{
				{
				setState(58);
				match(WS);
				}
				}
				setState(63);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(64);
			frequency();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FormulaContext extends ParserRuleContext {
		public Logic_exprContext logic_expr() {
			return getRuleContext(Logic_exprContext.class,0);
		}
		public TerminalNode TRUE() { return getToken(DistributionInputParser.TRUE, 0); }
		public FormulaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_formula; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DistributionInputListener ) ((DistributionInputListener)listener).enterFormula(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DistributionInputListener ) ((DistributionInputListener)listener).exitFormula(this);
		}
	}

	public final FormulaContext formula() throws RecognitionException {
		FormulaContext _localctx = new FormulaContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_formula);
		try {
			setState(68);
			switch (_input.LA(1)) {
			case T__2:
			case T__4:
			case Neg_num:
			case Pos_num:
			case FLOOR:
			case EXISTS:
			case ZERO:
			case Param:
			case MINUS:
				enterOuterAlt(_localctx, 1);
				{
				setState(66);
				logic_expr(0);
				}
				break;
			case TRUE:
				enterOuterAlt(_localctx, 2);
				{
				setState(67);
				match(TRUE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FrequencyContext extends ParserRuleContext {
		public FrequencyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_frequency; }
	 
		public FrequencyContext() { }
		public void copyFrom(FrequencyContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class Frequency_ZEROContext extends FrequencyContext {
		public TerminalNode ZERO() { return getToken(DistributionInputParser.ZERO, 0); }
		public Frequency_ZEROContext(FrequencyContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DistributionInputListener ) ((DistributionInputListener)listener).enterFrequency_ZERO(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DistributionInputListener ) ((DistributionInputListener)listener).exitFrequency_ZERO(this);
		}
	}
	public static class Frequency_postNumContext extends FrequencyContext {
		public TerminalNode Pos_num() { return getToken(DistributionInputParser.Pos_num, 0); }
		public Frequency_postNumContext(FrequencyContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DistributionInputListener ) ((DistributionInputListener)listener).enterFrequency_postNum(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DistributionInputListener ) ((DistributionInputListener)listener).exitFrequency_postNum(this);
		}
	}

	public final FrequencyContext frequency() throws RecognitionException {
		FrequencyContext _localctx = new FrequencyContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_frequency);
		try {
			setState(72);
			switch (_input.LA(1)) {
			case Pos_num:
				_localctx = new Frequency_postNumContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(70);
				match(Pos_num);
				}
				break;
			case ZERO:
				_localctx = new Frequency_ZEROContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(71);
				match(ZERO);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Arith_exprContext extends ParserRuleContext {
		public Arith_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_arith_expr; }
	 
		public Arith_exprContext() { }
		public void copyFrom(Arith_exprContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class Arith_expr_Arith_termContext extends Arith_exprContext {
		public Arith_termContext arith_term() {
			return getRuleContext(Arith_termContext.class,0);
		}
		public Arith_expr_Arith_termContext(Arith_exprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DistributionInputListener ) ((DistributionInputListener)listener).enterArith_expr_Arith_term(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DistributionInputListener ) ((DistributionInputListener)listener).exitArith_expr_Arith_term(this);
		}
	}
	public static class Arith_expr_MinusContext extends Arith_exprContext {
		public List<Arith_exprContext> arith_expr() {
			return getRuleContexts(Arith_exprContext.class);
		}
		public Arith_exprContext arith_expr(int i) {
			return getRuleContext(Arith_exprContext.class,i);
		}
		public List<TerminalNode> WS() { return getTokens(DistributionInputParser.WS); }
		public TerminalNode WS(int i) {
			return getToken(DistributionInputParser.WS, i);
		}
		public TerminalNode MINUS() { return getToken(DistributionInputParser.MINUS, 0); }
		public Arith_expr_MinusContext(Arith_exprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DistributionInputListener ) ((DistributionInputListener)listener).enterArith_expr_Minus(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DistributionInputListener ) ((DistributionInputListener)listener).exitArith_expr_Minus(this);
		}
	}
	public static class Arith_expr_PlusContext extends Arith_exprContext {
		public List<Arith_exprContext> arith_expr() {
			return getRuleContexts(Arith_exprContext.class);
		}
		public Arith_exprContext arith_expr(int i) {
			return getRuleContext(Arith_exprContext.class,i);
		}
		public List<TerminalNode> WS() { return getTokens(DistributionInputParser.WS); }
		public TerminalNode WS(int i) {
			return getToken(DistributionInputParser.WS, i);
		}
		public TerminalNode PLUS() { return getToken(DistributionInputParser.PLUS, 0); }
		public Arith_expr_PlusContext(Arith_exprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DistributionInputListener ) ((DistributionInputListener)listener).enterArith_expr_Plus(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DistributionInputListener ) ((DistributionInputListener)listener).exitArith_expr_Plus(this);
		}
	}
	public static class Minus_Arith_exprContext extends Arith_exprContext {
		public TerminalNode MINUS() { return getToken(DistributionInputParser.MINUS, 0); }
		public Arith_exprContext arith_expr() {
			return getRuleContext(Arith_exprContext.class,0);
		}
		public Minus_Arith_exprContext(Arith_exprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DistributionInputListener ) ((DistributionInputListener)listener).enterMinus_Arith_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DistributionInputListener ) ((DistributionInputListener)listener).exitMinus_Arith_expr(this);
		}
	}

	public final Arith_exprContext arith_expr() throws RecognitionException {
		return arith_expr(0);
	}

	private Arith_exprContext arith_expr(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Arith_exprContext _localctx = new Arith_exprContext(_ctx, _parentState);
		Arith_exprContext _prevctx = _localctx;
		int _startState = 8;
		enterRecursionRule(_localctx, 8, RULE_arith_expr, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(78);
			switch (_input.LA(1)) {
			case MINUS:
				{
				_localctx = new Minus_Arith_exprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				setState(75);
				match(MINUS);
				setState(76);
				arith_expr(1);
				}
				break;
			case T__2:
			case T__4:
			case Neg_num:
			case Pos_num:
			case FLOOR:
			case ZERO:
			case Param:
				{
				_localctx = new Arith_expr_Arith_termContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(77);
				arith_term(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			_ctx.stop = _input.LT(-1);
			setState(92);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,9,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(90);
					switch ( getInterpreter().adaptivePredict(_input,8,_ctx) ) {
					case 1:
						{
						_localctx = new Arith_expr_MinusContext(new Arith_exprContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_arith_expr);
						setState(80);
						if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
						setState(81);
						match(WS);
						setState(82);
						match(MINUS);
						setState(83);
						match(WS);
						setState(84);
						arith_expr(5);
						}
						break;
					case 2:
						{
						_localctx = new Arith_expr_PlusContext(new Arith_exprContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_arith_expr);
						setState(85);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(86);
						match(WS);
						setState(87);
						match(PLUS);
						setState(88);
						match(WS);
						setState(89);
						arith_expr(4);
						}
						break;
					}
					} 
				}
				setState(94);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,9,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Arith_termContext extends ParserRuleContext {
		public Arith_termContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_arith_term; }
	 
		public Arith_termContext() { }
		public void copyFrom(Arith_termContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class Arith_term_DivContext extends Arith_termContext {
		public List<Arith_termContext> arith_term() {
			return getRuleContexts(Arith_termContext.class);
		}
		public Arith_termContext arith_term(int i) {
			return getRuleContext(Arith_termContext.class,i);
		}
		public List<TerminalNode> WS() { return getTokens(DistributionInputParser.WS); }
		public TerminalNode WS(int i) {
			return getToken(DistributionInputParser.WS, i);
		}
		public TerminalNode DIV() { return getToken(DistributionInputParser.DIV, 0); }
		public Arith_term_DivContext(Arith_termContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DistributionInputListener ) ((DistributionInputListener)listener).enterArith_term_Div(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DistributionInputListener ) ((DistributionInputListener)listener).exitArith_term_Div(this);
		}
	}
	public static class Arith_term_factorContext extends Arith_termContext {
		public FactorContext factor() {
			return getRuleContext(FactorContext.class,0);
		}
		public Arith_term_factorContext(Arith_termContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DistributionInputListener ) ((DistributionInputListener)listener).enterArith_term_factor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DistributionInputListener ) ((DistributionInputListener)listener).exitArith_term_factor(this);
		}
	}
	public static class Arith_term_MultContext extends Arith_termContext {
		public List<Arith_termContext> arith_term() {
			return getRuleContexts(Arith_termContext.class);
		}
		public Arith_termContext arith_term(int i) {
			return getRuleContext(Arith_termContext.class,i);
		}
		public List<TerminalNode> WS() { return getTokens(DistributionInputParser.WS); }
		public TerminalNode WS(int i) {
			return getToken(DistributionInputParser.WS, i);
		}
		public TerminalNode MULT() { return getToken(DistributionInputParser.MULT, 0); }
		public Arith_term_MultContext(Arith_termContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DistributionInputListener ) ((DistributionInputListener)listener).enterArith_term_Mult(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DistributionInputListener ) ((DistributionInputListener)listener).exitArith_term_Mult(this);
		}
	}

	public final Arith_termContext arith_term() throws RecognitionException {
		return arith_term(0);
	}

	private Arith_termContext arith_term(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Arith_termContext _localctx = new Arith_termContext(_ctx, _parentState);
		Arith_termContext _prevctx = _localctx;
		int _startState = 10;
		enterRecursionRule(_localctx, 10, RULE_arith_term, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new Arith_term_factorContext(_localctx);
			_ctx = _localctx;
			_prevctx = _localctx;

			setState(96);
			factor(0);
			}
			_ctx.stop = _input.LT(-1);
			setState(110);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,11,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(108);
					switch ( getInterpreter().adaptivePredict(_input,10,_ctx) ) {
					case 1:
						{
						_localctx = new Arith_term_MultContext(new Arith_termContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_arith_term);
						setState(98);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(99);
						match(WS);
						setState(100);
						match(MULT);
						setState(101);
						match(WS);
						setState(102);
						arith_term(4);
						}
						break;
					case 2:
						{
						_localctx = new Arith_term_DivContext(new Arith_termContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_arith_term);
						setState(103);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(104);
						match(WS);
						setState(105);
						match(DIV);
						setState(106);
						match(WS);
						setState(107);
						arith_term(3);
						}
						break;
					}
					} 
				}
				setState(112);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,11,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class FactorContext extends ParserRuleContext {
		public FactorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_factor; }
	 
		public FactorContext() { }
		public void copyFrom(FactorContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class Factor_PowerContext extends FactorContext {
		public List<FactorContext> factor() {
			return getRuleContexts(FactorContext.class);
		}
		public FactorContext factor(int i) {
			return getRuleContext(FactorContext.class,i);
		}
		public TerminalNode POWER() { return getToken(DistributionInputParser.POWER, 0); }
		public Factor_PowerContext(FactorContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DistributionInputListener ) ((DistributionInputListener)listener).enterFactor_Power(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DistributionInputListener ) ((DistributionInputListener)listener).exitFactor_Power(this);
		}
	}
	public static class Factor_Parentheses_Arith_ExprContext extends FactorContext {
		public Arith_exprContext arith_expr() {
			return getRuleContext(Arith_exprContext.class,0);
		}
		public Factor_Parentheses_Arith_ExprContext(FactorContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DistributionInputListener ) ((DistributionInputListener)listener).enterFactor_Parentheses_Arith_Expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DistributionInputListener ) ((DistributionInputListener)listener).exitFactor_Parentheses_Arith_Expr(this);
		}
	}
	public static class Factor_floorContext extends FactorContext {
		public TerminalNode FLOOR() { return getToken(DistributionInputParser.FLOOR, 0); }
		public FactorContext factor() {
			return getRuleContext(FactorContext.class,0);
		}
		public Factor_floorContext(FactorContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DistributionInputListener ) ((DistributionInputListener)listener).enterFactor_floor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DistributionInputListener ) ((DistributionInputListener)listener).exitFactor_floor(this);
		}
	}
	public static class Factor_paramContext extends FactorContext {
		public TerminalNode Param() { return getToken(DistributionInputParser.Param, 0); }
		public Factor_paramContext(FactorContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DistributionInputListener ) ((DistributionInputListener)listener).enterFactor_param(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DistributionInputListener ) ((DistributionInputListener)listener).exitFactor_param(this);
		}
	}
	public static class Factor_num_mul_paramContext extends FactorContext {
		public Int_numContext int_num() {
			return getRuleContext(Int_numContext.class,0);
		}
		public TerminalNode Param() { return getToken(DistributionInputParser.Param, 0); }
		public Factor_num_mul_paramContext(FactorContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DistributionInputListener ) ((DistributionInputListener)listener).enterFactor_num_mul_param(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DistributionInputListener ) ((DistributionInputListener)listener).exitFactor_num_mul_param(this);
		}
	}
	public static class Factor_FractionContext extends FactorContext {
		public List<FactorContext> factor() {
			return getRuleContexts(FactorContext.class);
		}
		public FactorContext factor(int i) {
			return getRuleContext(FactorContext.class,i);
		}
		public TerminalNode DIV() { return getToken(DistributionInputParser.DIV, 0); }
		public Factor_FractionContext(FactorContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DistributionInputListener ) ((DistributionInputListener)listener).enterFactor_Fraction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DistributionInputListener ) ((DistributionInputListener)listener).exitFactor_Fraction(this);
		}
	}
	public static class INTContext extends FactorContext {
		public Int_numContext int_num() {
			return getRuleContext(Int_numContext.class,0);
		}
		public INTContext(FactorContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DistributionInputListener ) ((DistributionInputListener)listener).enterINT(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DistributionInputListener ) ((DistributionInputListener)listener).exitINT(this);
		}
	}
	public static class Factor_RoundContext extends FactorContext {
		public FactorContext factor() {
			return getRuleContext(FactorContext.class,0);
		}
		public Factor_RoundContext(FactorContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DistributionInputListener ) ((DistributionInputListener)listener).enterFactor_Round(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DistributionInputListener ) ((DistributionInputListener)listener).exitFactor_Round(this);
		}
	}

	public final FactorContext factor() throws RecognitionException {
		return factor(0);
	}

	private FactorContext factor(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		FactorContext _localctx = new FactorContext(_ctx, _parentState);
		FactorContext _prevctx = _localctx;
		int _startState = 12;
		enterRecursionRule(_localctx, 12, RULE_factor, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(132);
			switch ( getInterpreter().adaptivePredict(_input,12,_ctx) ) {
			case 1:
				{
				_localctx = new INTContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				setState(114);
				int_num();
				}
				break;
			case 2:
				{
				_localctx = new Factor_RoundContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(115);
				match(T__2);
				setState(116);
				factor(0);
				setState(117);
				match(T__3);
				}
				break;
			case 3:
				{
				_localctx = new Factor_paramContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(119);
				match(Param);
				}
				break;
			case 4:
				{
				_localctx = new Factor_num_mul_paramContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(120);
				int_num();
				setState(121);
				match(Param);
				}
				break;
			case 5:
				{
				_localctx = new Factor_Parentheses_Arith_ExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(123);
				match(T__4);
				setState(124);
				arith_expr(0);
				setState(125);
				match(T__5);
				}
				break;
			case 6:
				{
				_localctx = new Factor_floorContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(127);
				match(FLOOR);
				setState(128);
				match(T__4);
				setState(129);
				factor(0);
				setState(130);
				match(T__5);
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(142);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,14,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(140);
					switch ( getInterpreter().adaptivePredict(_input,13,_ctx) ) {
					case 1:
						{
						_localctx = new Factor_FractionContext(new FactorContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_factor);
						setState(134);
						if (!(precpred(_ctx, 7))) throw new FailedPredicateException(this, "precpred(_ctx, 7)");
						setState(135);
						match(DIV);
						setState(136);
						factor(8);
						}
						break;
					case 2:
						{
						_localctx = new Factor_PowerContext(new FactorContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_factor);
						setState(137);
						if (!(precpred(_ctx, 5))) throw new FailedPredicateException(this, "precpred(_ctx, 5)");
						setState(138);
						match(POWER);
						setState(139);
						factor(6);
						}
						break;
					}
					} 
				}
				setState(144);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,14,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Int_numContext extends ParserRuleContext {
		public TerminalNode Pos_num() { return getToken(DistributionInputParser.Pos_num, 0); }
		public TerminalNode Neg_num() { return getToken(DistributionInputParser.Neg_num, 0); }
		public TerminalNode ZERO() { return getToken(DistributionInputParser.ZERO, 0); }
		public Int_numContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_int_num; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DistributionInputListener ) ((DistributionInputListener)listener).enterInt_num(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DistributionInputListener ) ((DistributionInputListener)listener).exitInt_num(this);
		}
	}

	public final Int_numContext int_num() throws RecognitionException {
		Int_numContext _localctx = new Int_numContext(_ctx, getState());
		enterRule(_localctx, 14, RULE_int_num);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(145);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Neg_num) | (1L << Pos_num) | (1L << ZERO))) != 0)) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Logic_exprContext extends ParserRuleContext {
		public Logic_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_logic_expr; }
	 
		public Logic_exprContext() { }
		public void copyFrom(Logic_exprContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class Logic_expr_logic_termContext extends Logic_exprContext {
		public Logic_termContext logic_term() {
			return getRuleContext(Logic_termContext.class,0);
		}
		public Logic_expr_logic_termContext(Logic_exprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DistributionInputListener ) ((DistributionInputListener)listener).enterLogic_expr_logic_term(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DistributionInputListener ) ((DistributionInputListener)listener).exitLogic_expr_logic_term(this);
		}
	}
	public static class Logic_expr_ExistContext extends Logic_exprContext {
		public Exists_exprContext exists_expr() {
			return getRuleContext(Exists_exprContext.class,0);
		}
		public Logic_expr_ExistContext(Logic_exprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DistributionInputListener ) ((DistributionInputListener)listener).enterLogic_expr_Exist(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DistributionInputListener ) ((DistributionInputListener)listener).exitLogic_expr_Exist(this);
		}
	}
	public static class Logic_expr_ORContext extends Logic_exprContext {
		public List<Logic_exprContext> logic_expr() {
			return getRuleContexts(Logic_exprContext.class);
		}
		public Logic_exprContext logic_expr(int i) {
			return getRuleContext(Logic_exprContext.class,i);
		}
		public TerminalNode OR() { return getToken(DistributionInputParser.OR, 0); }
		public List<TerminalNode> WS() { return getTokens(DistributionInputParser.WS); }
		public TerminalNode WS(int i) {
			return getToken(DistributionInputParser.WS, i);
		}
		public Logic_expr_ORContext(Logic_exprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DistributionInputListener ) ((DistributionInputListener)listener).enterLogic_expr_OR(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DistributionInputListener ) ((DistributionInputListener)listener).exitLogic_expr_OR(this);
		}
	}

	public final Logic_exprContext logic_expr() throws RecognitionException {
		return logic_expr(0);
	}

	private Logic_exprContext logic_expr(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Logic_exprContext _localctx = new Logic_exprContext(_ctx, _parentState);
		Logic_exprContext _prevctx = _localctx;
		int _startState = 16;
		enterRecursionRule(_localctx, 16, RULE_logic_expr, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(150);
			switch (_input.LA(1)) {
			case EXISTS:
				{
				_localctx = new Logic_expr_ExistContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				setState(148);
				exists_expr();
				}
				break;
			case T__2:
			case T__4:
			case Neg_num:
			case Pos_num:
			case FLOOR:
			case ZERO:
			case Param:
			case MINUS:
				{
				_localctx = new Logic_expr_logic_termContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(149);
				logic_term(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			_ctx.stop = _input.LT(-1);
			setState(169);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,18,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Logic_expr_ORContext(new Logic_exprContext(_parentctx, _parentState));
					pushNewRecursionContext(_localctx, _startState, RULE_logic_expr);
					setState(152);
					if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
					setState(156);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==WS) {
						{
						{
						setState(153);
						match(WS);
						}
						}
						setState(158);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(159);
					match(OR);
					setState(163);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==WS) {
						{
						{
						setState(160);
						match(WS);
						}
						}
						setState(165);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(166);
					logic_expr(4);
					}
					} 
				}
				setState(171);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,18,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Exists_exprContext extends ParserRuleContext {
		public TerminalNode EXISTS() { return getToken(DistributionInputParser.EXISTS, 0); }
		public Qvar_exprContext qvar_expr() {
			return getRuleContext(Qvar_exprContext.class,0);
		}
		public Logic_exprContext logic_expr() {
			return getRuleContext(Logic_exprContext.class,0);
		}
		public List<TerminalNode> WS() { return getTokens(DistributionInputParser.WS); }
		public TerminalNode WS(int i) {
			return getToken(DistributionInputParser.WS, i);
		}
		public Exists_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exists_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DistributionInputListener ) ((DistributionInputListener)listener).enterExists_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DistributionInputListener ) ((DistributionInputListener)listener).exitExists_expr(this);
		}
	}

	public final Exists_exprContext exists_expr() throws RecognitionException {
		Exists_exprContext _localctx = new Exists_exprContext(_ctx, getState());
		enterRule(_localctx, 18, RULE_exists_expr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(172);
			match(EXISTS);
			setState(176);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==WS) {
				{
				{
				setState(173);
				match(WS);
				}
				}
				setState(178);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(179);
			match(T__4);
			setState(180);
			qvar_expr();
			setState(181);
			match(T__1);
			setState(185);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==WS) {
				{
				{
				setState(182);
				match(WS);
				}
				}
				setState(187);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(188);
			logic_expr(0);
			setState(189);
			match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Qvar_exprContext extends ParserRuleContext {
		public Qvar_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_qvar_expr; }
	 
		public Qvar_exprContext() { }
		public void copyFrom(Qvar_exprContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class Qvar_expr_param_equals_exprContext extends Qvar_exprContext {
		public TerminalNode Param() { return getToken(DistributionInputParser.Param, 0); }
		public Arith_exprContext arith_expr() {
			return getRuleContext(Arith_exprContext.class,0);
		}
		public List<TerminalNode> WS() { return getTokens(DistributionInputParser.WS); }
		public TerminalNode WS(int i) {
			return getToken(DistributionInputParser.WS, i);
		}
		public Qvar_expr_param_equals_exprContext(Qvar_exprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DistributionInputListener ) ((DistributionInputListener)listener).enterQvar_expr_param_equals_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DistributionInputListener ) ((DistributionInputListener)listener).exitQvar_expr_param_equals_expr(this);
		}
	}
	public static class Qvar_expr_paramContext extends Qvar_exprContext {
		public TerminalNode Param() { return getToken(DistributionInputParser.Param, 0); }
		public Qvar_expr_paramContext(Qvar_exprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DistributionInputListener ) ((DistributionInputListener)listener).enterQvar_expr_param(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DistributionInputListener ) ((DistributionInputListener)listener).exitQvar_expr_param(this);
		}
	}

	public final Qvar_exprContext qvar_expr() throws RecognitionException {
		Qvar_exprContext _localctx = new Qvar_exprContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_qvar_expr);
		int _la;
		try {
			setState(207);
			switch ( getInterpreter().adaptivePredict(_input,23,_ctx) ) {
			case 1:
				_localctx = new Qvar_expr_paramContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(191);
				match(Param);
				}
				break;
			case 2:
				_localctx = new Qvar_expr_param_equals_exprContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(192);
				match(Param);
				setState(196);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==WS) {
					{
					{
					setState(193);
					match(WS);
					}
					}
					setState(198);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(199);
				match(EQ);
				setState(203);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==WS) {
					{
					{
					setState(200);
					match(WS);
					}
					}
					setState(205);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(206);
				arith_expr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Logic_termContext extends ParserRuleContext {
		public Logic_termContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_logic_term; }
	 
		public Logic_termContext() { }
		public void copyFrom(Logic_termContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class Logic_term_logic_factorContext extends Logic_termContext {
		public Logic_factorContext logic_factor() {
			return getRuleContext(Logic_factorContext.class,0);
		}
		public Logic_term_logic_factorContext(Logic_termContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DistributionInputListener ) ((DistributionInputListener)listener).enterLogic_term_logic_factor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DistributionInputListener ) ((DistributionInputListener)listener).exitLogic_term_logic_factor(this);
		}
	}
	public static class Logic_term_ANDContext extends Logic_termContext {
		public List<Logic_termContext> logic_term() {
			return getRuleContexts(Logic_termContext.class);
		}
		public Logic_termContext logic_term(int i) {
			return getRuleContext(Logic_termContext.class,i);
		}
		public List<TerminalNode> WS() { return getTokens(DistributionInputParser.WS); }
		public TerminalNode WS(int i) {
			return getToken(DistributionInputParser.WS, i);
		}
		public TerminalNode AND() { return getToken(DistributionInputParser.AND, 0); }
		public Logic_term_ANDContext(Logic_termContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DistributionInputListener ) ((DistributionInputListener)listener).enterLogic_term_AND(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DistributionInputListener ) ((DistributionInputListener)listener).exitLogic_term_AND(this);
		}
	}

	public final Logic_termContext logic_term() throws RecognitionException {
		return logic_term(0);
	}

	private Logic_termContext logic_term(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Logic_termContext _localctx = new Logic_termContext(_ctx, _parentState);
		Logic_termContext _prevctx = _localctx;
		int _startState = 22;
		enterRecursionRule(_localctx, 22, RULE_logic_term, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new Logic_term_logic_factorContext(_localctx);
			_ctx = _localctx;
			_prevctx = _localctx;

			setState(210);
			logic_factor();
			}
			_ctx.stop = _input.LT(-1);
			setState(219);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,24,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Logic_term_ANDContext(new Logic_termContext(_parentctx, _parentState));
					pushNewRecursionContext(_localctx, _startState, RULE_logic_term);
					setState(212);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(213);
					match(WS);
					setState(214);
					match(AND);
					setState(215);
					match(WS);
					setState(216);
					logic_term(3);
					}
					} 
				}
				setState(221);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,24,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Logic_factorContext extends ParserRuleContext {
		public Logic_factorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_logic_factor; }
	 
		public Logic_factorContext() { }
		public void copyFrom(Logic_factorContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class Logic_factor_compareContext extends Logic_factorContext {
		public Compare_termContext compare_term() {
			return getRuleContext(Compare_termContext.class,0);
		}
		public Logic_factor_compareContext(Logic_factorContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DistributionInputListener ) ((DistributionInputListener)listener).enterLogic_factor_compare(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DistributionInputListener ) ((DistributionInputListener)listener).exitLogic_factor_compare(this);
		}
	}
	public static class Logic_factor_Parentheses_Logic_ExprContext extends Logic_factorContext {
		public Logic_exprContext logic_expr() {
			return getRuleContext(Logic_exprContext.class,0);
		}
		public List<TerminalNode> WS() { return getTokens(DistributionInputParser.WS); }
		public TerminalNode WS(int i) {
			return getToken(DistributionInputParser.WS, i);
		}
		public Logic_factor_Parentheses_Logic_ExprContext(Logic_factorContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DistributionInputListener ) ((DistributionInputListener)listener).enterLogic_factor_Parentheses_Logic_Expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DistributionInputListener ) ((DistributionInputListener)listener).exitLogic_factor_Parentheses_Logic_Expr(this);
		}
	}

	public final Logic_factorContext logic_factor() throws RecognitionException {
		Logic_factorContext _localctx = new Logic_factorContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_logic_factor);
		int _la;
		try {
			setState(239);
			switch ( getInterpreter().adaptivePredict(_input,27,_ctx) ) {
			case 1:
				_localctx = new Logic_factor_compareContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(222);
				compare_term();
				}
				break;
			case 2:
				_localctx = new Logic_factor_Parentheses_Logic_ExprContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(223);
				match(T__4);
				setState(227);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==WS) {
					{
					{
					setState(224);
					match(WS);
					}
					}
					setState(229);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(230);
				logic_expr(0);
				setState(234);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==WS) {
					{
					{
					setState(231);
					match(WS);
					}
					}
					setState(236);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(237);
				match(T__5);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Compare_operatorContext extends ParserRuleContext {
		public Compare_operatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compare_operator; }
	 
		public Compare_operatorContext() { }
		public void copyFrom(Compare_operatorContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class Greater_or_equalContext extends Compare_operatorContext {
		public TerminalNode GE() { return getToken(DistributionInputParser.GE, 0); }
		public Greater_or_equalContext(Compare_operatorContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DistributionInputListener ) ((DistributionInputListener)listener).enterGreater_or_equal(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DistributionInputListener ) ((DistributionInputListener)listener).exitGreater_or_equal(this);
		}
	}
	public static class EqualContext extends Compare_operatorContext {
		public TerminalNode EQ() { return getToken(DistributionInputParser.EQ, 0); }
		public EqualContext(Compare_operatorContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DistributionInputListener ) ((DistributionInputListener)listener).enterEqual(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DistributionInputListener ) ((DistributionInputListener)listener).exitEqual(this);
		}
	}
	public static class GreaterContext extends Compare_operatorContext {
		public TerminalNode GT() { return getToken(DistributionInputParser.GT, 0); }
		public GreaterContext(Compare_operatorContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DistributionInputListener ) ((DistributionInputListener)listener).enterGreater(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DistributionInputListener ) ((DistributionInputListener)listener).exitGreater(this);
		}
	}
	public static class Less_or_equalContext extends Compare_operatorContext {
		public TerminalNode LE() { return getToken(DistributionInputParser.LE, 0); }
		public Less_or_equalContext(Compare_operatorContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DistributionInputListener ) ((DistributionInputListener)listener).enterLess_or_equal(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DistributionInputListener ) ((DistributionInputListener)listener).exitLess_or_equal(this);
		}
	}
	public static class LessContext extends Compare_operatorContext {
		public TerminalNode LT() { return getToken(DistributionInputParser.LT, 0); }
		public LessContext(Compare_operatorContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DistributionInputListener ) ((DistributionInputListener)listener).enterLess(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DistributionInputListener ) ((DistributionInputListener)listener).exitLess(this);
		}
	}

	public final Compare_operatorContext compare_operator() throws RecognitionException {
		Compare_operatorContext _localctx = new Compare_operatorContext(_ctx, getState());
		enterRule(_localctx, 26, RULE_compare_operator);
		try {
			setState(246);
			switch (_input.LA(1)) {
			case GE:
				_localctx = new Greater_or_equalContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(241);
				match(GE);
				}
				break;
			case GT:
				_localctx = new GreaterContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(242);
				match(GT);
				}
				break;
			case LE:
				_localctx = new Less_or_equalContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(243);
				match(LE);
				}
				break;
			case LT:
				_localctx = new LessContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(244);
				match(LT);
				}
				break;
			case EQ:
				_localctx = new EqualContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(245);
				match(EQ);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Compare_termContext extends ParserRuleContext {
		public Compare_termContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compare_term; }
	 
		public Compare_termContext() { }
		public void copyFrom(Compare_termContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class Compare_term_LessContext extends Compare_termContext {
		public List<Arith_exprContext> arith_expr() {
			return getRuleContexts(Arith_exprContext.class);
		}
		public Arith_exprContext arith_expr(int i) {
			return getRuleContext(Arith_exprContext.class,i);
		}
		public TerminalNode LT() { return getToken(DistributionInputParser.LT, 0); }
		public List<TerminalNode> WS() { return getTokens(DistributionInputParser.WS); }
		public TerminalNode WS(int i) {
			return getToken(DistributionInputParser.WS, i);
		}
		public Compare_term_LessContext(Compare_termContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DistributionInputListener ) ((DistributionInputListener)listener).enterCompare_term_Less(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DistributionInputListener ) ((DistributionInputListener)listener).exitCompare_term_Less(this);
		}
	}
	public static class Compare_term_EqualContext extends Compare_termContext {
		public List<Arith_exprContext> arith_expr() {
			return getRuleContexts(Arith_exprContext.class);
		}
		public Arith_exprContext arith_expr(int i) {
			return getRuleContext(Arith_exprContext.class,i);
		}
		public TerminalNode EQ() { return getToken(DistributionInputParser.EQ, 0); }
		public List<TerminalNode> WS() { return getTokens(DistributionInputParser.WS); }
		public TerminalNode WS(int i) {
			return getToken(DistributionInputParser.WS, i);
		}
		public Compare_term_EqualContext(Compare_termContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DistributionInputListener ) ((DistributionInputListener)listener).enterCompare_term_Equal(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DistributionInputListener ) ((DistributionInputListener)listener).exitCompare_term_Equal(this);
		}
	}
	public static class Compare_term_GreaterContext extends Compare_termContext {
		public List<Arith_exprContext> arith_expr() {
			return getRuleContexts(Arith_exprContext.class);
		}
		public Arith_exprContext arith_expr(int i) {
			return getRuleContext(Arith_exprContext.class,i);
		}
		public TerminalNode GT() { return getToken(DistributionInputParser.GT, 0); }
		public List<TerminalNode> WS() { return getTokens(DistributionInputParser.WS); }
		public TerminalNode WS(int i) {
			return getToken(DistributionInputParser.WS, i);
		}
		public Compare_term_GreaterContext(Compare_termContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DistributionInputListener ) ((DistributionInputListener)listener).enterCompare_term_Greater(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DistributionInputListener ) ((DistributionInputListener)listener).exitCompare_term_Greater(this);
		}
	}
	public static class Compare_term_Greater_or_equalContext extends Compare_termContext {
		public List<Arith_exprContext> arith_expr() {
			return getRuleContexts(Arith_exprContext.class);
		}
		public Arith_exprContext arith_expr(int i) {
			return getRuleContext(Arith_exprContext.class,i);
		}
		public TerminalNode GE() { return getToken(DistributionInputParser.GE, 0); }
		public List<TerminalNode> WS() { return getTokens(DistributionInputParser.WS); }
		public TerminalNode WS(int i) {
			return getToken(DistributionInputParser.WS, i);
		}
		public Compare_term_Greater_or_equalContext(Compare_termContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DistributionInputListener ) ((DistributionInputListener)listener).enterCompare_term_Greater_or_equal(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DistributionInputListener ) ((DistributionInputListener)listener).exitCompare_term_Greater_or_equal(this);
		}
	}
	public static class Compare_term_Less_or_equalContext extends Compare_termContext {
		public List<Arith_exprContext> arith_expr() {
			return getRuleContexts(Arith_exprContext.class);
		}
		public Arith_exprContext arith_expr(int i) {
			return getRuleContext(Arith_exprContext.class,i);
		}
		public TerminalNode LE() { return getToken(DistributionInputParser.LE, 0); }
		public List<TerminalNode> WS() { return getTokens(DistributionInputParser.WS); }
		public TerminalNode WS(int i) {
			return getToken(DistributionInputParser.WS, i);
		}
		public Compare_term_Less_or_equalContext(Compare_termContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DistributionInputListener ) ((DistributionInputListener)listener).enterCompare_term_Less_or_equal(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DistributionInputListener ) ((DistributionInputListener)listener).exitCompare_term_Less_or_equal(this);
		}
	}
	public static class Compare_term_trioContext extends Compare_termContext {
		public List<Arith_exprContext> arith_expr() {
			return getRuleContexts(Arith_exprContext.class);
		}
		public Arith_exprContext arith_expr(int i) {
			return getRuleContext(Arith_exprContext.class,i);
		}
		public List<Compare_operatorContext> compare_operator() {
			return getRuleContexts(Compare_operatorContext.class);
		}
		public Compare_operatorContext compare_operator(int i) {
			return getRuleContext(Compare_operatorContext.class,i);
		}
		public List<TerminalNode> WS() { return getTokens(DistributionInputParser.WS); }
		public TerminalNode WS(int i) {
			return getToken(DistributionInputParser.WS, i);
		}
		public Compare_term_trioContext(Compare_termContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DistributionInputListener ) ((DistributionInputListener)listener).enterCompare_term_trio(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DistributionInputListener ) ((DistributionInputListener)listener).exitCompare_term_trio(this);
		}
	}

	public final Compare_termContext compare_term() throws RecognitionException {
		Compare_termContext _localctx = new Compare_termContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_compare_term);
		int _la;
		try {
			setState(358);
			switch ( getInterpreter().adaptivePredict(_input,43,_ctx) ) {
			case 1:
				_localctx = new Compare_term_trioContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(248);
				arith_expr(0);
				setState(252);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==WS) {
					{
					{
					setState(249);
					match(WS);
					}
					}
					setState(254);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(255);
				compare_operator();
				setState(259);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==WS) {
					{
					{
					setState(256);
					match(WS);
					}
					}
					setState(261);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(262);
				arith_expr(0);
				setState(266);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==WS) {
					{
					{
					setState(263);
					match(WS);
					}
					}
					setState(268);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(269);
				compare_operator();
				setState(273);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==WS) {
					{
					{
					setState(270);
					match(WS);
					}
					}
					setState(275);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(276);
				arith_expr(0);
				}
				break;
			case 2:
				_localctx = new Compare_term_GreaterContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(278);
				arith_expr(0);
				setState(282);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==WS) {
					{
					{
					setState(279);
					match(WS);
					}
					}
					setState(284);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(285);
				match(GT);
				setState(289);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==WS) {
					{
					{
					setState(286);
					match(WS);
					}
					}
					setState(291);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(292);
				arith_expr(0);
				}
				break;
			case 3:
				_localctx = new Compare_term_Greater_or_equalContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(294);
				arith_expr(0);
				setState(298);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==WS) {
					{
					{
					setState(295);
					match(WS);
					}
					}
					setState(300);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(301);
				match(GE);
				setState(305);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==WS) {
					{
					{
					setState(302);
					match(WS);
					}
					}
					setState(307);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(308);
				arith_expr(0);
				}
				break;
			case 4:
				_localctx = new Compare_term_LessContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(310);
				arith_expr(0);
				setState(314);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==WS) {
					{
					{
					setState(311);
					match(WS);
					}
					}
					setState(316);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(317);
				match(LT);
				setState(321);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==WS) {
					{
					{
					setState(318);
					match(WS);
					}
					}
					setState(323);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(324);
				arith_expr(0);
				}
				break;
			case 5:
				_localctx = new Compare_term_Less_or_equalContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(326);
				arith_expr(0);
				setState(330);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==WS) {
					{
					{
					setState(327);
					match(WS);
					}
					}
					setState(332);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(333);
				match(LE);
				setState(337);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==WS) {
					{
					{
					setState(334);
					match(WS);
					}
					}
					setState(339);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(340);
				arith_expr(0);
				}
				break;
			case 6:
				_localctx = new Compare_term_EqualContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(342);
				arith_expr(0);
				setState(346);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==WS) {
					{
					{
					setState(343);
					match(WS);
					}
					}
					setState(348);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(349);
				match(EQ);
				setState(353);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==WS) {
					{
					{
					setState(350);
					match(WS);
					}
					}
					setState(355);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(356);
				arith_expr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public boolean sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 4:
			return arith_expr_sempred((Arith_exprContext)_localctx, predIndex);
		case 5:
			return arith_term_sempred((Arith_termContext)_localctx, predIndex);
		case 6:
			return factor_sempred((FactorContext)_localctx, predIndex);
		case 8:
			return logic_expr_sempred((Logic_exprContext)_localctx, predIndex);
		case 11:
			return logic_term_sempred((Logic_termContext)_localctx, predIndex);
		}
		return true;
	}
	private boolean arith_expr_sempred(Arith_exprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0:
			return precpred(_ctx, 4);
		case 1:
			return precpred(_ctx, 3);
		}
		return true;
	}
	private boolean arith_term_sempred(Arith_termContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2:
			return precpred(_ctx, 3);
		case 3:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean factor_sempred(FactorContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4:
			return precpred(_ctx, 7);
		case 5:
			return precpred(_ctx, 5);
		}
		return true;
	}
	private boolean logic_expr_sempred(Logic_exprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 6:
			return precpred(_ctx, 3);
		}
		return true;
	}
	private boolean logic_term_sempred(Logic_termContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7:
			return precpred(_ctx, 2);
		}
		return true;
	}

	public static final String _serializedATN =
		"\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\3\37\u016b\4\2\t\2"+
		"\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\3\2\3\2\7\2#\n\2\f"+
		"\2\16\2&\13\2\3\2\3\2\7\2*\n\2\f\2\16\2-\13\2\3\2\7\2\60\n\2\f\2\16\2"+
		"\63\13\2\3\3\3\3\7\3\67\n\3\f\3\16\3:\13\3\3\3\3\3\7\3>\n\3\f\3\16\3A"+
		"\13\3\3\3\3\3\3\4\3\4\5\4G\n\4\3\5\3\5\5\5K\n\5\3\6\3\6\3\6\3\6\5\6Q\n"+
		"\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\7\6]\n\6\f\6\16\6`\13\6\3\7"+
		"\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\7\7o\n\7\f\7\16\7r\13"+
		"\7\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b"+
		"\3\b\3\b\5\b\u0087\n\b\3\b\3\b\3\b\3\b\3\b\3\b\7\b\u008f\n\b\f\b\16\b"+
		"\u0092\13\b\3\t\3\t\3\n\3\n\3\n\5\n\u0099\n\n\3\n\3\n\7\n\u009d\n\n\f"+
		"\n\16\n\u00a0\13\n\3\n\3\n\7\n\u00a4\n\n\f\n\16\n\u00a7\13\n\3\n\7\n\u00aa"+
		"\n\n\f\n\16\n\u00ad\13\n\3\13\3\13\7\13\u00b1\n\13\f\13\16\13\u00b4\13"+
		"\13\3\13\3\13\3\13\3\13\7\13\u00ba\n\13\f\13\16\13\u00bd\13\13\3\13\3"+
		"\13\3\13\3\f\3\f\3\f\7\f\u00c5\n\f\f\f\16\f\u00c8\13\f\3\f\3\f\7\f\u00cc"+
		"\n\f\f\f\16\f\u00cf\13\f\3\f\5\f\u00d2\n\f\3\r\3\r\3\r\3\r\3\r\3\r\3\r"+
		"\3\r\7\r\u00dc\n\r\f\r\16\r\u00df\13\r\3\16\3\16\3\16\7\16\u00e4\n\16"+
		"\f\16\16\16\u00e7\13\16\3\16\3\16\7\16\u00eb\n\16\f\16\16\16\u00ee\13"+
		"\16\3\16\3\16\5\16\u00f2\n\16\3\17\3\17\3\17\3\17\3\17\5\17\u00f9\n\17"+
		"\3\20\3\20\7\20\u00fd\n\20\f\20\16\20\u0100\13\20\3\20\3\20\7\20\u0104"+
		"\n\20\f\20\16\20\u0107\13\20\3\20\3\20\7\20\u010b\n\20\f\20\16\20\u010e"+
		"\13\20\3\20\3\20\7\20\u0112\n\20\f\20\16\20\u0115\13\20\3\20\3\20\3\20"+
		"\3\20\7\20\u011b\n\20\f\20\16\20\u011e\13\20\3\20\3\20\7\20\u0122\n\20"+
		"\f\20\16\20\u0125\13\20\3\20\3\20\3\20\3\20\7\20\u012b\n\20\f\20\16\20"+
		"\u012e\13\20\3\20\3\20\7\20\u0132\n\20\f\20\16\20\u0135\13\20\3\20\3\20"+
		"\3\20\3\20\7\20\u013b\n\20\f\20\16\20\u013e\13\20\3\20\3\20\7\20\u0142"+
		"\n\20\f\20\16\20\u0145\13\20\3\20\3\20\3\20\3\20\7\20\u014b\n\20\f\20"+
		"\16\20\u014e\13\20\3\20\3\20\7\20\u0152\n\20\f\20\16\20\u0155\13\20\3"+
		"\20\3\20\3\20\3\20\7\20\u015b\n\20\f\20\16\20\u015e\13\20\3\20\3\20\7"+
		"\20\u0162\n\20\f\20\16\20\u0165\13\20\3\20\3\20\5\20\u0169\n\20\3\20\2"+
		"\7\n\f\16\22\30\21\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36\2\3\4\2\n\13"+
		"\22\22\u0192\2 \3\2\2\2\4\64\3\2\2\2\6F\3\2\2\2\bJ\3\2\2\2\nP\3\2\2\2"+
		"\fa\3\2\2\2\16\u0086\3\2\2\2\20\u0093\3\2\2\2\22\u0098\3\2\2\2\24\u00ae"+
		"\3\2\2\2\26\u00d1\3\2\2\2\30\u00d3\3\2\2\2\32\u00f1\3\2\2\2\34\u00f8\3"+
		"\2\2\2\36\u0168\3\2\2\2 \61\5\4\3\2!#\7\t\2\2\"!\3\2\2\2#&\3\2\2\2$\""+
		"\3\2\2\2$%\3\2\2\2%\'\3\2\2\2&$\3\2\2\2\'+\7\3\2\2(*\7\t\2\2)(\3\2\2\2"+
		"*-\3\2\2\2+)\3\2\2\2+,\3\2\2\2,.\3\2\2\2-+\3\2\2\2.\60\5\2\2\2/$\3\2\2"+
		"\2\60\63\3\2\2\2\61/\3\2\2\2\61\62\3\2\2\2\62\3\3\2\2\2\63\61\3\2\2\2"+
		"\648\5\6\4\2\65\67\7\t\2\2\66\65\3\2\2\2\67:\3\2\2\28\66\3\2\2\289\3\2"+
		"\2\29;\3\2\2\2:8\3\2\2\2;?\7\4\2\2<>\7\t\2\2=<\3\2\2\2>A\3\2\2\2?=\3\2"+
		"\2\2?@\3\2\2\2@B\3\2\2\2A?\3\2\2\2BC\5\b\5\2C\5\3\2\2\2DG\5\22\n\2EG\7"+
		"\21\2\2FD\3\2\2\2FE\3\2\2\2G\7\3\2\2\2HK\7\13\2\2IK\7\22\2\2JH\3\2\2\2"+
		"JI\3\2\2\2K\t\3\2\2\2LM\b\6\1\2MN\7\37\2\2NQ\5\n\6\3OQ\5\f\7\2PL\3\2\2"+
		"\2PO\3\2\2\2Q^\3\2\2\2RS\f\6\2\2ST\7\t\2\2TU\7\37\2\2UV\7\t\2\2V]\5\n"+
		"\6\7WX\f\5\2\2XY\7\t\2\2YZ\7\36\2\2Z[\7\t\2\2[]\5\n\6\6\\R\3\2\2\2\\W"+
		"\3\2\2\2]`\3\2\2\2^\\\3\2\2\2^_\3\2\2\2_\13\3\2\2\2`^\3\2\2\2ab\b\7\1"+
		"\2bc\5\16\b\2cp\3\2\2\2de\f\5\2\2ef\7\t\2\2fg\7\34\2\2gh\7\t\2\2ho\5\f"+
		"\7\6ij\f\4\2\2jk\7\t\2\2kl\7\35\2\2lm\7\t\2\2mo\5\f\7\5nd\3\2\2\2ni\3"+
		"\2\2\2or\3\2\2\2pn\3\2\2\2pq\3\2\2\2q\r\3\2\2\2rp\3\2\2\2st\b\b\1\2t\u0087"+
		"\5\20\t\2uv\7\5\2\2vw\5\16\b\2wx\7\6\2\2x\u0087\3\2\2\2y\u0087\7\25\2"+
		"\2z{\5\20\t\2{|\7\25\2\2|\u0087\3\2\2\2}~\7\7\2\2~\177\5\n\6\2\177\u0080"+
		"\7\b\2\2\u0080\u0087\3\2\2\2\u0081\u0082\7\f\2\2\u0082\u0083\7\7\2\2\u0083"+
		"\u0084\5\16\b\2\u0084\u0085\7\b\2\2\u0085\u0087\3\2\2\2\u0086s\3\2\2\2"+
		"\u0086u\3\2\2\2\u0086y\3\2\2\2\u0086z\3\2\2\2\u0086}\3\2\2\2\u0086\u0081"+
		"\3\2\2\2\u0087\u0090\3\2\2\2\u0088\u0089\f\t\2\2\u0089\u008a\7\35\2\2"+
		"\u008a\u008f\5\16\b\n\u008b\u008c\f\7\2\2\u008c\u008d\7\23\2\2\u008d\u008f"+
		"\5\16\b\b\u008e\u0088\3\2\2\2\u008e\u008b\3\2\2\2\u008f\u0092\3\2\2\2"+
		"\u0090\u008e\3\2\2\2\u0090\u0091\3\2\2\2\u0091\17\3\2\2\2\u0092\u0090"+
		"\3\2\2\2\u0093\u0094\t\2\2\2\u0094\21\3\2\2\2\u0095\u0096\b\n\1\2\u0096"+
		"\u0099\5\24\13\2\u0097\u0099\5\30\r\2\u0098\u0095\3\2\2\2\u0098\u0097"+
		"\3\2\2\2\u0099\u00ab\3\2\2\2\u009a\u009e\f\5\2\2\u009b\u009d\7\t\2\2\u009c"+
		"\u009b\3\2\2\2\u009d\u00a0\3\2\2\2\u009e\u009c\3\2\2\2\u009e\u009f\3\2"+
		"\2\2\u009f\u00a1\3\2\2\2\u00a0\u009e\3\2\2\2\u00a1\u00a5\7\r\2\2\u00a2"+
		"\u00a4\7\t\2\2\u00a3\u00a2\3\2\2\2\u00a4\u00a7\3\2\2\2\u00a5\u00a3\3\2"+
		"\2\2\u00a5\u00a6\3\2\2\2\u00a6\u00a8\3\2\2\2\u00a7\u00a5\3\2\2\2\u00a8"+
		"\u00aa\5\22\n\6\u00a9\u009a\3\2\2\2\u00aa\u00ad\3\2\2\2\u00ab\u00a9\3"+
		"\2\2\2\u00ab\u00ac\3\2\2\2\u00ac\23\3\2\2\2\u00ad\u00ab\3\2\2\2\u00ae"+
		"\u00b2\7\20\2\2\u00af\u00b1\7\t\2\2\u00b0\u00af\3\2\2\2\u00b1\u00b4\3"+
		"\2\2\2\u00b2\u00b0\3\2\2\2\u00b2\u00b3\3\2\2\2\u00b3\u00b5\3\2\2\2\u00b4"+
		"\u00b2\3\2\2\2\u00b5\u00b6\7\7\2\2\u00b6\u00b7\5\26\f\2\u00b7\u00bb\7"+
		"\4\2\2\u00b8\u00ba\7\t\2\2\u00b9\u00b8\3\2\2\2\u00ba\u00bd\3\2\2\2\u00bb"+
		"\u00b9\3\2\2\2\u00bb\u00bc\3\2\2\2\u00bc\u00be\3\2\2\2\u00bd\u00bb\3\2"+
		"\2\2\u00be\u00bf\5\22\n\2\u00bf\u00c0\7\b\2\2\u00c0\25\3\2\2\2\u00c1\u00d2"+
		"\7\25\2\2\u00c2\u00c6\7\25\2\2\u00c3\u00c5\7\t\2\2\u00c4\u00c3\3\2\2\2"+
		"\u00c5\u00c8\3\2\2\2\u00c6\u00c4\3\2\2\2\u00c6\u00c7\3\2\2\2\u00c7\u00c9"+
		"\3\2\2\2\u00c8\u00c6\3\2\2\2\u00c9\u00cd\7\33\2\2\u00ca\u00cc\7\t\2\2"+
		"\u00cb\u00ca\3\2\2\2\u00cc\u00cf\3\2\2\2\u00cd\u00cb\3\2\2\2\u00cd\u00ce"+
		"\3\2\2\2\u00ce\u00d0\3\2\2\2\u00cf\u00cd\3\2\2\2\u00d0\u00d2\5\n\6\2\u00d1"+
		"\u00c1\3\2\2\2\u00d1\u00c2\3\2\2\2\u00d2\27\3\2\2\2\u00d3\u00d4\b\r\1"+
		"\2\u00d4\u00d5\5\32\16\2\u00d5\u00dd\3\2\2\2\u00d6\u00d7\f\4\2\2\u00d7"+
		"\u00d8\7\t\2\2\u00d8\u00d9\7\16\2\2\u00d9\u00da\7\t\2\2\u00da\u00dc\5"+
		"\30\r\5\u00db\u00d6\3\2\2\2\u00dc\u00df\3\2\2\2\u00dd\u00db\3\2\2\2\u00dd"+
		"\u00de\3\2\2\2\u00de\31\3\2\2\2\u00df\u00dd\3\2\2\2\u00e0\u00f2\5\36\20"+
		"\2\u00e1\u00e5\7\7\2\2\u00e2\u00e4\7\t\2\2\u00e3\u00e2\3\2\2\2\u00e4\u00e7"+
		"\3\2\2\2\u00e5\u00e3\3\2\2\2\u00e5\u00e6\3\2\2\2\u00e6\u00e8\3\2\2\2\u00e7"+
		"\u00e5\3\2\2\2\u00e8\u00ec\5\22\n\2\u00e9\u00eb\7\t\2\2\u00ea\u00e9\3"+
		"\2\2\2\u00eb\u00ee\3\2\2\2\u00ec\u00ea\3\2\2\2\u00ec\u00ed\3\2\2\2\u00ed"+
		"\u00ef\3\2\2\2\u00ee\u00ec\3\2\2\2\u00ef\u00f0\7\b\2\2\u00f0\u00f2\3\2"+
		"\2\2\u00f1\u00e0\3\2\2\2\u00f1\u00e1\3\2\2\2\u00f2\33\3\2\2\2\u00f3\u00f9"+
		"\7\27\2\2\u00f4\u00f9\7\30\2\2\u00f5\u00f9\7\31\2\2\u00f6\u00f9\7\32\2"+
		"\2\u00f7\u00f9\7\33\2\2\u00f8\u00f3\3\2\2\2\u00f8\u00f4\3\2\2\2\u00f8"+
		"\u00f5\3\2\2\2\u00f8\u00f6\3\2\2\2\u00f8\u00f7\3\2\2\2\u00f9\35\3\2\2"+
		"\2\u00fa\u00fe\5\n\6\2\u00fb\u00fd\7\t\2\2\u00fc\u00fb\3\2\2\2\u00fd\u0100"+
		"\3\2\2\2\u00fe\u00fc\3\2\2\2\u00fe\u00ff\3\2\2\2\u00ff\u0101\3\2\2\2\u0100"+
		"\u00fe\3\2\2\2\u0101\u0105\5\34\17\2\u0102\u0104\7\t\2\2\u0103\u0102\3"+
		"\2\2\2\u0104\u0107\3\2\2\2\u0105\u0103\3\2\2\2\u0105\u0106\3\2\2\2\u0106"+
		"\u0108\3\2\2\2\u0107\u0105\3\2\2\2\u0108\u010c\5\n\6\2\u0109\u010b\7\t"+
		"\2\2\u010a\u0109\3\2\2\2\u010b\u010e\3\2\2\2\u010c\u010a\3\2\2\2\u010c"+
		"\u010d\3\2\2\2\u010d\u010f\3\2\2\2\u010e\u010c\3\2\2\2\u010f\u0113\5\34"+
		"\17\2\u0110\u0112\7\t\2\2\u0111\u0110\3\2\2\2\u0112\u0115\3\2\2\2\u0113"+
		"\u0111\3\2\2\2\u0113\u0114\3\2\2\2\u0114\u0116\3\2\2\2\u0115\u0113\3\2"+
		"\2\2\u0116\u0117\5\n\6\2\u0117\u0169\3\2\2\2\u0118\u011c\5\n\6\2\u0119"+
		"\u011b\7\t\2\2\u011a\u0119\3\2\2\2\u011b\u011e\3\2\2\2\u011c\u011a\3\2"+
		"\2\2\u011c\u011d\3\2\2\2\u011d\u011f\3\2\2\2\u011e\u011c\3\2\2\2\u011f"+
		"\u0123\7\30\2\2\u0120\u0122\7\t\2\2\u0121\u0120\3\2\2\2\u0122\u0125\3"+
		"\2\2\2\u0123\u0121\3\2\2\2\u0123\u0124\3\2\2\2\u0124\u0126\3\2\2\2\u0125"+
		"\u0123\3\2\2\2\u0126\u0127\5\n\6\2\u0127\u0169\3\2\2\2\u0128\u012c\5\n"+
		"\6\2\u0129\u012b\7\t\2\2\u012a\u0129\3\2\2\2\u012b\u012e\3\2\2\2\u012c"+
		"\u012a\3\2\2\2\u012c\u012d\3\2\2\2\u012d\u012f\3\2\2\2\u012e\u012c\3\2"+
		"\2\2\u012f\u0133\7\27\2\2\u0130\u0132\7\t\2\2\u0131\u0130\3\2\2\2\u0132"+
		"\u0135\3\2\2\2\u0133\u0131\3\2\2\2\u0133\u0134\3\2\2\2\u0134\u0136\3\2"+
		"\2\2\u0135\u0133\3\2\2\2\u0136\u0137\5\n\6\2\u0137\u0169\3\2\2\2\u0138"+
		"\u013c\5\n\6\2\u0139\u013b\7\t\2\2\u013a\u0139\3\2\2\2\u013b\u013e\3\2"+
		"\2\2\u013c\u013a\3\2\2\2\u013c\u013d\3\2\2\2\u013d\u013f\3\2\2\2\u013e"+
		"\u013c\3\2\2\2\u013f\u0143\7\32\2\2\u0140\u0142\7\t\2\2\u0141\u0140\3"+
		"\2\2\2\u0142\u0145\3\2\2\2\u0143\u0141\3\2\2\2\u0143\u0144\3\2\2\2\u0144"+
		"\u0146\3\2\2\2\u0145\u0143\3\2\2\2\u0146\u0147\5\n\6\2\u0147\u0169\3\2"+
		"\2\2\u0148\u014c\5\n\6\2\u0149\u014b\7\t\2\2\u014a\u0149\3\2\2\2\u014b"+
		"\u014e\3\2\2\2\u014c\u014a\3\2\2\2\u014c\u014d\3\2\2\2\u014d\u014f\3\2"+
		"\2\2\u014e\u014c\3\2\2\2\u014f\u0153\7\31\2\2\u0150\u0152\7\t\2\2\u0151"+
		"\u0150\3\2\2\2\u0152\u0155\3\2\2\2\u0153\u0151\3\2\2\2\u0153\u0154\3\2"+
		"\2\2\u0154\u0156\3\2\2\2\u0155\u0153\3\2\2\2\u0156\u0157\5\n\6\2\u0157"+
		"\u0169\3\2\2\2\u0158\u015c\5\n\6\2\u0159\u015b\7\t\2\2\u015a\u0159\3\2"+
		"\2\2\u015b\u015e\3\2\2\2\u015c\u015a\3\2\2\2\u015c\u015d\3\2\2\2\u015d"+
		"\u015f\3\2\2\2\u015e\u015c\3\2\2\2\u015f\u0163\7\33\2\2\u0160\u0162\7"+
		"\t\2\2\u0161\u0160\3\2\2\2\u0162\u0165\3\2\2\2\u0163\u0161\3\2\2\2\u0163"+
		"\u0164\3\2\2\2\u0164\u0166\3\2\2\2\u0165\u0163\3\2\2\2\u0166\u0167\5\n"+
		"\6\2\u0167\u0169\3\2\2\2\u0168\u00fa\3\2\2\2\u0168\u0118\3\2\2\2\u0168"+
		"\u0128\3\2\2\2\u0168\u0138\3\2\2\2\u0168\u0148\3\2\2\2\u0168\u0158\3\2"+
		"\2\2\u0169\37\3\2\2\2.$+\618?FJP\\^np\u0086\u008e\u0090\u0098\u009e\u00a5"+
		"\u00ab\u00b2\u00bb\u00c6\u00cd\u00d1\u00dd\u00e5\u00ec\u00f1\u00f8\u00fe"+
		"\u0105\u010c\u0113\u011c\u0123\u012c\u0133\u013c\u0143\u014c\u0153\u015c"+
		"\u0163\u0168";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}