package de.tud.exploitgen.util;

import de.uka.ilkd.key.java.Services;
import de.uka.ilkd.key.logic.Term;

public abstract class AbstractExprTransformer {
	public String transformExpression2String(Term expression, Services services){ 	      
	      if(TermParser.isIntegerConst(expression, services)){
	         return TermParser.getBigIntegerValue(expression, services).toString();
	      }
	      else if(TermParser.isLocationVariable(expression)){
	         return expression.toString();
	      }
	      else if(TermParser.isBooleanTrue(expression)){
	         return "true";
	      }
	      else if(TermParser.isBooleanFalse(expression)){
	         return "false";
	      }
	      else if(HeapHandler.isHeapSelectFunction(expression)){
	         return HeapHandler.getFieldNameOfSelect(expression, KEGConstant.SEPARATOR, services);                     
	      }  
	      else if(HeapHandler.isLengthFunction(expression, services)){
	         return HeapHandler.getVarName4LengthFunction(expression,KEGConstant.SEPARATOR, services);
	      }            
	      else if(TermParser.isBinaryFunction(expression)){
	         return "(" + 
	               transformExpression2String(expression.sub(0), services) +
	               getBinaryOperatorString(expression, services) +
	               transformExpression2String(expression.sub(1), services) +
	               ")";         
	      }
	      else if(TermParser.isUnaryFunction(expression)){
	         return "(" + 
	               getUnaryOperatorString(expression, services) +
	               transformExpression2String(expression.sub(0), services) + 
	               ")";
	         
	      }
	      else if(KeYResourceHandler.isArtificialVariable(expression, services)){
	    	  return expression.toString();
	      }
	      
	      else if(TermParser.isExistsQuantifier(expression)){
	    	  return getExistsExpression(expression, services);
	      }
	      
	      else if (TermParser.isImplication(expression)){
	    	  return getImplicationExpression(expression, services);
	      }
	      
	      else if(TermParser.isFunction(expression)){
	         return "(" +
	               
	               ")";
	      }else
	         return "";
	   }  
	
	public abstract String getBinaryOperatorString(Term expression, Services services);
	public abstract String getUnaryOperatorString(Term expression, Services services);
	public abstract String getExistsExpression(Term expression, Services services);
	public abstract String getImplicationExpression(Term expression, Services services);
}
