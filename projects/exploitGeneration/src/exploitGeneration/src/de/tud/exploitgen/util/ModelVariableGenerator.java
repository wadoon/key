/**
 * 
 */
package de.tud.exploitgen.util;

import com.csvanefalk.keytestgen.core.model.implementation.ModelBuilderVisitor;
import com.csvanefalk.keytestgen.core.model.implementation.instance.ModelInstanceFactory;
import com.csvanefalk.keytestgen.core.model.implementation.variable.ModelArrayVariable;
import com.csvanefalk.keytestgen.core.model.implementation.variable.ModelVariable;

import de.uka.ilkd.key.logic.ProgramElementName;
import de.uka.ilkd.key.logic.Term;
import de.uka.ilkd.key.logic.op.LocationVariable;
import de.uka.ilkd.key.logic.op.ProgramVariable;

/**
 * @author Huy Do
 *
 */
public class ModelVariableGenerator {
   /*
    * create a model variable from term t
    * t must be array, object or primitive
    * */
   public static ModelVariable createModelVariable(Term t){  
      if(HeapHandler.isHeapSelectFunction(t)){
         String identifier = HeapHandler.getSynthesisNameOfHeapSelectFunction(t);         
         String varName = HeapHandler.getFieldNameOfSelect(t);               
         ProgramVariable pv = new LocationVariable(new ProgramElementName(varName), KeYResourceHandler.createType(t));
         if(TermParser.isArray(t))
            return new ModelArrayVariable(pv, identifier);
         else
            return new ModelVariable(pv, identifier);
      }else if(HeapHandler.isLengthFunction(t)){
         String identifier = HeapHandler.getVarName4LengthFunction(t);
         String varName = "length";
         ProgramVariable pv = new LocationVariable(new ProgramElementName(varName), KeYResourceHandler.createType(t));
         return new ModelVariable(pv, identifier);
      }else{
         String identifier = t.toString();         
         String varName = t.toString();               
         ProgramVariable pv = new LocationVariable(new ProgramElementName(varName), KeYResourceHandler.createType(t));
         if(TermParser.isArray(t))
            return new ModelArrayVariable(pv, identifier);
         else
            return new ModelVariable(pv, identifier);
      }      
   }
   
   /*
    * create ModelInstance for ModelVariable object
    * */
   public static Object createInstance(ModelVariable mv){
      Object instance;
      if (TermParser.isPrimitiveType(mv.getSort().name().toString())) {               
          instance = ModelBuilderVisitor.resolvePrimitiveType(mv.getProgramVariable());
      } else {
          instance = ModelInstanceFactory.constructModelInstance(mv.getProgramVariable().getKeYJavaType());
      }
      return instance;
   } 
}
