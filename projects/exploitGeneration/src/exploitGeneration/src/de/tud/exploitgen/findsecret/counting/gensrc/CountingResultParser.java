// Generated from /Users/huydo/Working/KEG_Refactoring/key/projects/exploitGeneration/src/exploitGeneration/deployment/../src/de/tud/exploitgen/findsecret/counting/gensrc/CountingResult.g4 by ANTLR 4.5.1

package de.tud.exploitgen.findsecret.counting.gensrc;

import de.uka.ilkd.key.logic.Term;

import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class CountingResultParser extends Parser {
	static { RuntimeMetaData.checkVersion("4.5.1", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, Neg_num=12, Pos_num=13, FLOOR=14, OR=15, AND=16, INFINITY=17, 
		EXISTS=18, ZERO=19, POWER=20, NONZERODIGIT=21, Param=22, LETTER=23, WS=24, 
		GE=25, GT=26, LE=27, LT=28, EQ=29, MULT=30, DIV=31, PLUS=32, MINUS=33;
	public static final int
		RULE_result = 0, RULE_param_set = 1, RULE_result_pharse = 2, RULE_result_options = 3, 
		RULE_result_case = 4, RULE_result_value = 5, RULE_result_condition = 6, 
		RULE_arith_expr = 7, RULE_arith_term = 8, RULE_factor = 9, RULE_int_num = 10, 
		RULE_logic_expr = 11, RULE_exists_expr = 12, RULE_qvar_expr = 13, RULE_logic_term = 14, 
		RULE_logic_factor = 15, RULE_compare_operator = 16, RULE_compare_term = 17;
	public static final String[] ruleNames = {
		"result", "param_set", "result_pharse", "result_options", "result_case", 
		"result_value", "result_condition", "arith_expr", "arith_term", "factor", 
		"int_num", "logic_expr", "exists_expr", "qvar_expr", "logic_term", "logic_factor", 
		"compare_operator", "compare_term"
	};

	private static final String[] _LITERAL_NAMES = {
		null, "'->'", "'[]'", "'['", "','", "']'", "'{'", "'}'", "';'", "':'", 
		"'('", "')'", null, null, "'floor'", "'or'", "'and'", "'infty'", "'exists'", 
		"'0'", "'^'", null, null, null, null, "'>='", "'>'", "'<='", "'<'", "'='", 
		"'*'", "'/'", "'+'", "'-'"
	};
	private static final String[] _SYMBOLIC_NAMES = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		"Neg_num", "Pos_num", "FLOOR", "OR", "AND", "INFINITY", "EXISTS", "ZERO", 
		"POWER", "NONZERODIGIT", "Param", "LETTER", "WS", "GE", "GT", "LE", "LT", 
		"EQ", "MULT", "DIV", "PLUS", "MINUS"
	};
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}

	@Override
	public String getGrammarFileName() { return "CountingResult.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }

	public CountingResultParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}
	public static class ResultContext extends ParserRuleContext {
		public Param_setContext param_set() {
			return getRuleContext(Param_setContext.class,0);
		}
		public Result_pharseContext result_pharse() {
			return getRuleContext(Result_pharseContext.class,0);
		}
		public List<TerminalNode> WS() { return getTokens(CountingResultParser.WS); }
		public TerminalNode WS(int i) {
			return getToken(CountingResultParser.WS, i);
		}
		public ResultContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_result; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).enterResult(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).exitResult(this);
		}
	}

	public final ResultContext result() throws RecognitionException {
		ResultContext _localctx = new ResultContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_result);
		int _la;
		try {
			setState(53);
			switch (_input.LA(1)) {
			case T__1:
			case T__2:
				enterOuterAlt(_localctx, 1);
				{
				setState(36);
				param_set();
				setState(40);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==WS) {
					{
					{
					setState(37);
					match(WS);
					}
					}
					setState(42);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(43);
				match(T__0);
				setState(47);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==WS) {
					{
					{
					setState(44);
					match(WS);
					}
					}
					setState(49);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(50);
				result_pharse();
				}
				break;
			case T__5:
				enterOuterAlt(_localctx, 2);
				{
				setState(52);
				result_pharse();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Param_setContext extends ParserRuleContext {
		public Param_setContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_param_set; }
	 
		public Param_setContext() { }
		public void copyFrom(Param_setContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class Param_set_EmptyContext extends Param_setContext {
		public Param_set_EmptyContext(Param_setContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).enterParam_set_Empty(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).exitParam_set_Empty(this);
		}
	}
	public static class Param_set_non_emptyContext extends Param_setContext {
		public List<TerminalNode> Param() { return getTokens(CountingResultParser.Param); }
		public TerminalNode Param(int i) {
			return getToken(CountingResultParser.Param, i);
		}
		public List<TerminalNode> WS() { return getTokens(CountingResultParser.WS); }
		public TerminalNode WS(int i) {
			return getToken(CountingResultParser.WS, i);
		}
		public Param_set_non_emptyContext(Param_setContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).enterParam_set_non_empty(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).exitParam_set_non_empty(this);
		}
	}

	public final Param_setContext param_set() throws RecognitionException {
		Param_setContext _localctx = new Param_setContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_param_set);
		int _la;
		try {
			setState(72);
			switch (_input.LA(1)) {
			case T__1:
				_localctx = new Param_set_EmptyContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(55);
				match(T__1);
				}
				break;
			case T__2:
				_localctx = new Param_set_non_emptyContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(56);
				match(T__2);
				setState(57);
				match(Param);
				setState(68);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==T__3) {
					{
					{
					setState(58);
					match(T__3);
					setState(62);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==WS) {
						{
						{
						setState(59);
						match(WS);
						}
						}
						setState(64);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(65);
					match(Param);
					}
					}
					setState(70);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(71);
				match(T__4);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Result_pharseContext extends ParserRuleContext {
		public Result_pharseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_result_pharse; }
	 
		public Result_pharseContext() { }
		public void copyFrom(Result_pharseContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class Result_pharse_non_emptyContext extends Result_pharseContext {
		public Result_optionsContext result_options() {
			return getRuleContext(Result_optionsContext.class,0);
		}
		public List<TerminalNode> WS() { return getTokens(CountingResultParser.WS); }
		public TerminalNode WS(int i) {
			return getToken(CountingResultParser.WS, i);
		}
		public Result_pharse_non_emptyContext(Result_pharseContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).enterResult_pharse_non_empty(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).exitResult_pharse_non_empty(this);
		}
	}
	public static class Result_pharse_emptyContext extends Result_pharseContext {
		public List<TerminalNode> WS() { return getTokens(CountingResultParser.WS); }
		public TerminalNode WS(int i) {
			return getToken(CountingResultParser.WS, i);
		}
		public Result_pharse_emptyContext(Result_pharseContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).enterResult_pharse_empty(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).exitResult_pharse_empty(this);
		}
	}

	public final Result_pharseContext result_pharse() throws RecognitionException {
		Result_pharseContext _localctx = new Result_pharseContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_result_pharse);
		int _la;
		try {
			setState(98);
			switch ( getInterpreter().adaptivePredict(_input,9,_ctx) ) {
			case 1:
				_localctx = new Result_pharse_non_emptyContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(74);
				match(T__5);
				setState(78);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==WS) {
					{
					{
					setState(75);
					match(WS);
					}
					}
					setState(80);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(81);
				result_options();
				setState(85);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==WS) {
					{
					{
					setState(82);
					match(WS);
					}
					}
					setState(87);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(88);
				match(T__6);
				}
				break;
			case 2:
				_localctx = new Result_pharse_emptyContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(90);
				match(T__5);
				setState(94);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==WS) {
					{
					{
					setState(91);
					match(WS);
					}
					}
					setState(96);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(97);
				match(T__6);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Result_optionsContext extends ParserRuleContext {
		public List<Result_caseContext> result_case() {
			return getRuleContexts(Result_caseContext.class);
		}
		public Result_caseContext result_case(int i) {
			return getRuleContext(Result_caseContext.class,i);
		}
		public List<TerminalNode> WS() { return getTokens(CountingResultParser.WS); }
		public TerminalNode WS(int i) {
			return getToken(CountingResultParser.WS, i);
		}
		public Result_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_result_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).enterResult_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).exitResult_options(this);
		}
	}

	public final Result_optionsContext result_options() throws RecognitionException {
		Result_optionsContext _localctx = new Result_optionsContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_result_options);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(100);
			result_case();
			setState(111);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==T__7) {
				{
				{
				setState(101);
				match(T__7);
				setState(105);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==WS) {
					{
					{
					setState(102);
					match(WS);
					}
					}
					setState(107);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(108);
				result_case();
				}
				}
				setState(113);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Result_caseContext extends ParserRuleContext {
		public Result_caseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_result_case; }
	 
		public Result_caseContext() { }
		public void copyFrom(Result_caseContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class Result_case_with_conditionContext extends Result_caseContext {
		public Result_valueContext result_value() {
			return getRuleContext(Result_valueContext.class,0);
		}
		public Result_conditionContext result_condition() {
			return getRuleContext(Result_conditionContext.class,0);
		}
		public List<TerminalNode> WS() { return getTokens(CountingResultParser.WS); }
		public TerminalNode WS(int i) {
			return getToken(CountingResultParser.WS, i);
		}
		public Result_case_with_conditionContext(Result_caseContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).enterResult_case_with_condition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).exitResult_case_with_condition(this);
		}
	}
	public static class Result_case_no_conditionContext extends Result_caseContext {
		public Result_valueContext result_value() {
			return getRuleContext(Result_valueContext.class,0);
		}
		public Result_case_no_conditionContext(Result_caseContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).enterResult_case_no_condition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).exitResult_case_no_condition(this);
		}
	}

	public final Result_caseContext result_case() throws RecognitionException {
		Result_caseContext _localctx = new Result_caseContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_result_case);
		int _la;
		try {
			setState(131);
			switch ( getInterpreter().adaptivePredict(_input,14,_ctx) ) {
			case 1:
				_localctx = new Result_case_with_conditionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(114);
				result_value();
				setState(118);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==WS) {
					{
					{
					setState(115);
					match(WS);
					}
					}
					setState(120);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(121);
				match(T__8);
				setState(125);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==WS) {
					{
					{
					setState(122);
					match(WS);
					}
					}
					setState(127);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(128);
				result_condition();
				}
				break;
			case 2:
				_localctx = new Result_case_no_conditionContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(130);
				result_value();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Result_valueContext extends ParserRuleContext {
		public Result_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_result_value; }
	 
		public Result_valueContext() { }
		public void copyFrom(Result_valueContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class Result_value_arith_exprContext extends Result_valueContext {
		public Arith_exprContext arith_expr() {
			return getRuleContext(Arith_exprContext.class,0);
		}
		public Result_value_arith_exprContext(Result_valueContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).enterResult_value_arith_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).exitResult_value_arith_expr(this);
		}
	}
	public static class Result_value_inftyContext extends Result_valueContext {
		public TerminalNode INFINITY() { return getToken(CountingResultParser.INFINITY, 0); }
		public Result_value_inftyContext(Result_valueContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).enterResult_value_infty(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).exitResult_value_infty(this);
		}
	}

	public final Result_valueContext result_value() throws RecognitionException {
		Result_valueContext _localctx = new Result_valueContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_result_value);
		try {
			setState(135);
			switch (_input.LA(1)) {
			case T__2:
			case T__9:
			case Neg_num:
			case Pos_num:
			case FLOOR:
			case ZERO:
			case Param:
			case MINUS:
				_localctx = new Result_value_arith_exprContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(133);
				arith_expr(0);
				}
				break;
			case INFINITY:
				_localctx = new Result_value_inftyContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(134);
				match(INFINITY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Result_conditionContext extends ParserRuleContext {
		public Logic_exprContext logic_expr() {
			return getRuleContext(Logic_exprContext.class,0);
		}
		public Result_conditionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_result_condition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).enterResult_condition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).exitResult_condition(this);
		}
	}

	public final Result_conditionContext result_condition() throws RecognitionException {
		Result_conditionContext _localctx = new Result_conditionContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_result_condition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(137);
			logic_expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Arith_exprContext extends ParserRuleContext {
		public Arith_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_arith_expr; }
	 
		public Arith_exprContext() { }
		public void copyFrom(Arith_exprContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class Arith_expr_Arith_termContext extends Arith_exprContext {
		public Arith_termContext arith_term() {
			return getRuleContext(Arith_termContext.class,0);
		}
		public Arith_expr_Arith_termContext(Arith_exprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).enterArith_expr_Arith_term(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).exitArith_expr_Arith_term(this);
		}
	}
	public static class Arith_expr_MinusContext extends Arith_exprContext {
		public List<Arith_exprContext> arith_expr() {
			return getRuleContexts(Arith_exprContext.class);
		}
		public Arith_exprContext arith_expr(int i) {
			return getRuleContext(Arith_exprContext.class,i);
		}
		public TerminalNode MINUS() { return getToken(CountingResultParser.MINUS, 0); }
		public List<TerminalNode> WS() { return getTokens(CountingResultParser.WS); }
		public TerminalNode WS(int i) {
			return getToken(CountingResultParser.WS, i);
		}
		public Arith_expr_MinusContext(Arith_exprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).enterArith_expr_Minus(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).exitArith_expr_Minus(this);
		}
	}
	public static class Arith_expr_PlusContext extends Arith_exprContext {
		public List<Arith_exprContext> arith_expr() {
			return getRuleContexts(Arith_exprContext.class);
		}
		public Arith_exprContext arith_expr(int i) {
			return getRuleContext(Arith_exprContext.class,i);
		}
		public TerminalNode PLUS() { return getToken(CountingResultParser.PLUS, 0); }
		public List<TerminalNode> WS() { return getTokens(CountingResultParser.WS); }
		public TerminalNode WS(int i) {
			return getToken(CountingResultParser.WS, i);
		}
		public Arith_expr_PlusContext(Arith_exprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).enterArith_expr_Plus(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).exitArith_expr_Plus(this);
		}
	}
	public static class Minus_Arith_exprContext extends Arith_exprContext {
		public TerminalNode MINUS() { return getToken(CountingResultParser.MINUS, 0); }
		public Arith_exprContext arith_expr() {
			return getRuleContext(Arith_exprContext.class,0);
		}
		public Minus_Arith_exprContext(Arith_exprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).enterMinus_Arith_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).exitMinus_Arith_expr(this);
		}
	}

	public final Arith_exprContext arith_expr() throws RecognitionException {
		return arith_expr(0);
	}

	private Arith_exprContext arith_expr(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Arith_exprContext _localctx = new Arith_exprContext(_ctx, _parentState);
		Arith_exprContext _prevctx = _localctx;
		int _startState = 14;
		enterRecursionRule(_localctx, 14, RULE_arith_expr, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(143);
			switch (_input.LA(1)) {
			case MINUS:
				{
				_localctx = new Minus_Arith_exprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				setState(140);
				match(MINUS);
				setState(141);
				arith_expr(1);
				}
				break;
			case T__2:
			case T__9:
			case Neg_num:
			case Pos_num:
			case FLOOR:
			case ZERO:
			case Param:
				{
				_localctx = new Arith_expr_Arith_termContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(142);
				arith_term(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			_ctx.stop = _input.LT(-1);
			setState(177);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,22,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(175);
					switch ( getInterpreter().adaptivePredict(_input,21,_ctx) ) {
					case 1:
						{
						_localctx = new Arith_expr_MinusContext(new Arith_exprContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_arith_expr);
						setState(145);
						if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
						setState(149);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==WS) {
							{
							{
							setState(146);
							match(WS);
							}
							}
							setState(151);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						setState(152);
						match(MINUS);
						setState(156);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==WS) {
							{
							{
							setState(153);
							match(WS);
							}
							}
							setState(158);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						setState(159);
						arith_expr(5);
						}
						break;
					case 2:
						{
						_localctx = new Arith_expr_PlusContext(new Arith_exprContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_arith_expr);
						setState(160);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(164);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==WS) {
							{
							{
							setState(161);
							match(WS);
							}
							}
							setState(166);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						setState(167);
						match(PLUS);
						setState(171);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==WS) {
							{
							{
							setState(168);
							match(WS);
							}
							}
							setState(173);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						setState(174);
						arith_expr(4);
						}
						break;
					}
					} 
				}
				setState(179);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,22,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Arith_termContext extends ParserRuleContext {
		public Arith_termContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_arith_term; }
	 
		public Arith_termContext() { }
		public void copyFrom(Arith_termContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class Arith_term_DivContext extends Arith_termContext {
		public List<Arith_termContext> arith_term() {
			return getRuleContexts(Arith_termContext.class);
		}
		public Arith_termContext arith_term(int i) {
			return getRuleContext(Arith_termContext.class,i);
		}
		public TerminalNode DIV() { return getToken(CountingResultParser.DIV, 0); }
		public List<TerminalNode> WS() { return getTokens(CountingResultParser.WS); }
		public TerminalNode WS(int i) {
			return getToken(CountingResultParser.WS, i);
		}
		public Arith_term_DivContext(Arith_termContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).enterArith_term_Div(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).exitArith_term_Div(this);
		}
	}
	public static class Arith_term_factorContext extends Arith_termContext {
		public FactorContext factor() {
			return getRuleContext(FactorContext.class,0);
		}
		public Arith_term_factorContext(Arith_termContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).enterArith_term_factor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).exitArith_term_factor(this);
		}
	}
	public static class Arith_term_MultContext extends Arith_termContext {
		public List<Arith_termContext> arith_term() {
			return getRuleContexts(Arith_termContext.class);
		}
		public Arith_termContext arith_term(int i) {
			return getRuleContext(Arith_termContext.class,i);
		}
		public TerminalNode MULT() { return getToken(CountingResultParser.MULT, 0); }
		public List<TerminalNode> WS() { return getTokens(CountingResultParser.WS); }
		public TerminalNode WS(int i) {
			return getToken(CountingResultParser.WS, i);
		}
		public Arith_term_MultContext(Arith_termContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).enterArith_term_Mult(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).exitArith_term_Mult(this);
		}
	}

	public final Arith_termContext arith_term() throws RecognitionException {
		return arith_term(0);
	}

	private Arith_termContext arith_term(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Arith_termContext _localctx = new Arith_termContext(_ctx, _parentState);
		Arith_termContext _prevctx = _localctx;
		int _startState = 16;
		enterRecursionRule(_localctx, 16, RULE_arith_term, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new Arith_term_factorContext(_localctx);
			_ctx = _localctx;
			_prevctx = _localctx;

			setState(181);
			factor(0);
			}
			_ctx.stop = _input.LT(-1);
			setState(215);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,28,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(213);
					switch ( getInterpreter().adaptivePredict(_input,27,_ctx) ) {
					case 1:
						{
						_localctx = new Arith_term_MultContext(new Arith_termContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_arith_term);
						setState(183);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(187);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==WS) {
							{
							{
							setState(184);
							match(WS);
							}
							}
							setState(189);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						setState(190);
						match(MULT);
						setState(194);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==WS) {
							{
							{
							setState(191);
							match(WS);
							}
							}
							setState(196);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						setState(197);
						arith_term(4);
						}
						break;
					case 2:
						{
						_localctx = new Arith_term_DivContext(new Arith_termContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_arith_term);
						setState(198);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(202);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==WS) {
							{
							{
							setState(199);
							match(WS);
							}
							}
							setState(204);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						setState(205);
						match(DIV);
						setState(209);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==WS) {
							{
							{
							setState(206);
							match(WS);
							}
							}
							setState(211);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						setState(212);
						arith_term(3);
						}
						break;
					}
					} 
				}
				setState(217);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,28,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class FactorContext extends ParserRuleContext {
		public FactorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_factor; }
	 
		public FactorContext() { }
		public void copyFrom(FactorContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class Factor_PowerContext extends FactorContext {
		public List<FactorContext> factor() {
			return getRuleContexts(FactorContext.class);
		}
		public FactorContext factor(int i) {
			return getRuleContext(FactorContext.class,i);
		}
		public TerminalNode POWER() { return getToken(CountingResultParser.POWER, 0); }
		public Factor_PowerContext(FactorContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).enterFactor_Power(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).exitFactor_Power(this);
		}
	}
	public static class Factor_Parentheses_Arith_ExprContext extends FactorContext {
		public Arith_exprContext arith_expr() {
			return getRuleContext(Arith_exprContext.class,0);
		}
		public Factor_Parentheses_Arith_ExprContext(FactorContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).enterFactor_Parentheses_Arith_Expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).exitFactor_Parentheses_Arith_Expr(this);
		}
	}
	public static class Factor_floorContext extends FactorContext {
		public TerminalNode FLOOR() { return getToken(CountingResultParser.FLOOR, 0); }
		public FactorContext factor() {
			return getRuleContext(FactorContext.class,0);
		}
		public Factor_floorContext(FactorContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).enterFactor_floor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).exitFactor_floor(this);
		}
	}
	public static class Factor_paramContext extends FactorContext {
		public TerminalNode Param() { return getToken(CountingResultParser.Param, 0); }
		public Factor_paramContext(FactorContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).enterFactor_param(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).exitFactor_param(this);
		}
	}
	public static class Factor_num_mul_paramContext extends FactorContext {
		public Int_numContext int_num() {
			return getRuleContext(Int_numContext.class,0);
		}
		public TerminalNode Param() { return getToken(CountingResultParser.Param, 0); }
		public Factor_num_mul_paramContext(FactorContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).enterFactor_num_mul_param(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).exitFactor_num_mul_param(this);
		}
	}
	public static class Factor_FractionContext extends FactorContext {
		public List<FactorContext> factor() {
			return getRuleContexts(FactorContext.class);
		}
		public FactorContext factor(int i) {
			return getRuleContext(FactorContext.class,i);
		}
		public TerminalNode DIV() { return getToken(CountingResultParser.DIV, 0); }
		public Factor_FractionContext(FactorContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).enterFactor_Fraction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).exitFactor_Fraction(this);
		}
	}
	public static class INTContext extends FactorContext {
		public Int_numContext int_num() {
			return getRuleContext(Int_numContext.class,0);
		}
		public INTContext(FactorContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).enterINT(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).exitINT(this);
		}
	}
	public static class Factor_RoundContext extends FactorContext {
		public FactorContext factor() {
			return getRuleContext(FactorContext.class,0);
		}
		public Factor_RoundContext(FactorContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).enterFactor_Round(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).exitFactor_Round(this);
		}
	}

	public final FactorContext factor() throws RecognitionException {
		return factor(0);
	}

	private FactorContext factor(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		FactorContext _localctx = new FactorContext(_ctx, _parentState);
		FactorContext _prevctx = _localctx;
		int _startState = 18;
		enterRecursionRule(_localctx, 18, RULE_factor, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(237);
			switch ( getInterpreter().adaptivePredict(_input,29,_ctx) ) {
			case 1:
				{
				_localctx = new INTContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				setState(219);
				int_num();
				}
				break;
			case 2:
				{
				_localctx = new Factor_RoundContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(220);
				match(T__2);
				setState(221);
				factor(0);
				setState(222);
				match(T__4);
				}
				break;
			case 3:
				{
				_localctx = new Factor_paramContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(224);
				match(Param);
				}
				break;
			case 4:
				{
				_localctx = new Factor_num_mul_paramContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(225);
				int_num();
				setState(226);
				match(Param);
				}
				break;
			case 5:
				{
				_localctx = new Factor_Parentheses_Arith_ExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(228);
				match(T__9);
				setState(229);
				arith_expr(0);
				setState(230);
				match(T__10);
				}
				break;
			case 6:
				{
				_localctx = new Factor_floorContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(232);
				match(FLOOR);
				setState(233);
				match(T__9);
				setState(234);
				factor(0);
				setState(235);
				match(T__10);
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(247);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,31,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(245);
					switch ( getInterpreter().adaptivePredict(_input,30,_ctx) ) {
					case 1:
						{
						_localctx = new Factor_FractionContext(new FactorContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_factor);
						setState(239);
						if (!(precpred(_ctx, 7))) throw new FailedPredicateException(this, "precpred(_ctx, 7)");
						setState(240);
						match(DIV);
						setState(241);
						factor(8);
						}
						break;
					case 2:
						{
						_localctx = new Factor_PowerContext(new FactorContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_factor);
						setState(242);
						if (!(precpred(_ctx, 5))) throw new FailedPredicateException(this, "precpred(_ctx, 5)");
						setState(243);
						match(POWER);
						setState(244);
						factor(6);
						}
						break;
					}
					} 
				}
				setState(249);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,31,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Int_numContext extends ParserRuleContext {
		public TerminalNode Pos_num() { return getToken(CountingResultParser.Pos_num, 0); }
		public TerminalNode Neg_num() { return getToken(CountingResultParser.Neg_num, 0); }
		public TerminalNode ZERO() { return getToken(CountingResultParser.ZERO, 0); }
		public Int_numContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_int_num; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).enterInt_num(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).exitInt_num(this);
		}
	}

	public final Int_numContext int_num() throws RecognitionException {
		Int_numContext _localctx = new Int_numContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_int_num);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(250);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Neg_num) | (1L << Pos_num) | (1L << ZERO))) != 0)) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Logic_exprContext extends ParserRuleContext {
		public Logic_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_logic_expr; }
	 
		public Logic_exprContext() { }
		public void copyFrom(Logic_exprContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class Logic_expr_logic_termContext extends Logic_exprContext {
		public Logic_termContext logic_term() {
			return getRuleContext(Logic_termContext.class,0);
		}
		public Logic_expr_logic_termContext(Logic_exprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).enterLogic_expr_logic_term(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).exitLogic_expr_logic_term(this);
		}
	}
	public static class Logic_expr_ExistContext extends Logic_exprContext {
		public Exists_exprContext exists_expr() {
			return getRuleContext(Exists_exprContext.class,0);
		}
		public Logic_expr_ExistContext(Logic_exprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).enterLogic_expr_Exist(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).exitLogic_expr_Exist(this);
		}
	}
	public static class Logic_expr_ORContext extends Logic_exprContext {
		public List<Logic_exprContext> logic_expr() {
			return getRuleContexts(Logic_exprContext.class);
		}
		public Logic_exprContext logic_expr(int i) {
			return getRuleContext(Logic_exprContext.class,i);
		}
		public List<TerminalNode> WS() { return getTokens(CountingResultParser.WS); }
		public TerminalNode WS(int i) {
			return getToken(CountingResultParser.WS, i);
		}
		public TerminalNode OR() { return getToken(CountingResultParser.OR, 0); }
		public Logic_expr_ORContext(Logic_exprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).enterLogic_expr_OR(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).exitLogic_expr_OR(this);
		}
	}

	public final Logic_exprContext logic_expr() throws RecognitionException {
		return logic_expr(0);
	}

	private Logic_exprContext logic_expr(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Logic_exprContext _localctx = new Logic_exprContext(_ctx, _parentState);
		Logic_exprContext _prevctx = _localctx;
		int _startState = 22;
		enterRecursionRule(_localctx, 22, RULE_logic_expr, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(255);
			switch (_input.LA(1)) {
			case EXISTS:
				{
				_localctx = new Logic_expr_ExistContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				setState(253);
				exists_expr();
				}
				break;
			case T__2:
			case T__9:
			case Neg_num:
			case Pos_num:
			case FLOOR:
			case ZERO:
			case Param:
			case MINUS:
				{
				_localctx = new Logic_expr_logic_termContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(254);
				logic_term(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			_ctx.stop = _input.LT(-1);
			setState(264);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,33,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Logic_expr_ORContext(new Logic_exprContext(_parentctx, _parentState));
					pushNewRecursionContext(_localctx, _startState, RULE_logic_expr);
					setState(257);
					if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
					setState(258);
					match(WS);
					setState(259);
					match(OR);
					setState(260);
					match(WS);
					setState(261);
					logic_expr(4);
					}
					} 
				}
				setState(266);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,33,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Exists_exprContext extends ParserRuleContext {
		public TerminalNode EXISTS() { return getToken(CountingResultParser.EXISTS, 0); }
		public Qvar_exprContext qvar_expr() {
			return getRuleContext(Qvar_exprContext.class,0);
		}
		public List<TerminalNode> WS() { return getTokens(CountingResultParser.WS); }
		public TerminalNode WS(int i) {
			return getToken(CountingResultParser.WS, i);
		}
		public Logic_exprContext logic_expr() {
			return getRuleContext(Logic_exprContext.class,0);
		}
		public Exists_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exists_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).enterExists_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).exitExists_expr(this);
		}
	}

	public final Exists_exprContext exists_expr() throws RecognitionException {
		Exists_exprContext _localctx = new Exists_exprContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_exists_expr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(267);
			match(EXISTS);
			setState(271);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==WS) {
				{
				{
				setState(268);
				match(WS);
				}
				}
				setState(273);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(274);
			match(T__9);
			setState(275);
			qvar_expr();
			setState(276);
			match(T__8);
			setState(277);
			match(WS);
			setState(278);
			logic_expr(0);
			setState(279);
			match(T__10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Qvar_exprContext extends ParserRuleContext {
		public Qvar_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_qvar_expr; }
	 
		public Qvar_exprContext() { }
		public void copyFrom(Qvar_exprContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class Qvar_expr_param_equals_exprContext extends Qvar_exprContext {
		public TerminalNode Param() { return getToken(CountingResultParser.Param, 0); }
		public Arith_exprContext arith_expr() {
			return getRuleContext(Arith_exprContext.class,0);
		}
		public List<TerminalNode> WS() { return getTokens(CountingResultParser.WS); }
		public TerminalNode WS(int i) {
			return getToken(CountingResultParser.WS, i);
		}
		public Qvar_expr_param_equals_exprContext(Qvar_exprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).enterQvar_expr_param_equals_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).exitQvar_expr_param_equals_expr(this);
		}
	}
	public static class Qvar_expr_paramContext extends Qvar_exprContext {
		public TerminalNode Param() { return getToken(CountingResultParser.Param, 0); }
		public Qvar_expr_paramContext(Qvar_exprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).enterQvar_expr_param(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).exitQvar_expr_param(this);
		}
	}

	public final Qvar_exprContext qvar_expr() throws RecognitionException {
		Qvar_exprContext _localctx = new Qvar_exprContext(_ctx, getState());
		enterRule(_localctx, 26, RULE_qvar_expr);
		int _la;
		try {
			setState(297);
			switch ( getInterpreter().adaptivePredict(_input,37,_ctx) ) {
			case 1:
				_localctx = new Qvar_expr_paramContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(281);
				match(Param);
				}
				break;
			case 2:
				_localctx = new Qvar_expr_param_equals_exprContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(282);
				match(Param);
				setState(286);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==WS) {
					{
					{
					setState(283);
					match(WS);
					}
					}
					setState(288);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(289);
				match(EQ);
				setState(293);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==WS) {
					{
					{
					setState(290);
					match(WS);
					}
					}
					setState(295);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(296);
				arith_expr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Logic_termContext extends ParserRuleContext {
		public Logic_termContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_logic_term; }
	 
		public Logic_termContext() { }
		public void copyFrom(Logic_termContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class Logic_term_logic_factorContext extends Logic_termContext {
		public Logic_factorContext logic_factor() {
			return getRuleContext(Logic_factorContext.class,0);
		}
		public Logic_term_logic_factorContext(Logic_termContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).enterLogic_term_logic_factor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).exitLogic_term_logic_factor(this);
		}
	}
	public static class Logic_term_ANDContext extends Logic_termContext {
		public List<Logic_termContext> logic_term() {
			return getRuleContexts(Logic_termContext.class);
		}
		public Logic_termContext logic_term(int i) {
			return getRuleContext(Logic_termContext.class,i);
		}
		public List<TerminalNode> WS() { return getTokens(CountingResultParser.WS); }
		public TerminalNode WS(int i) {
			return getToken(CountingResultParser.WS, i);
		}
		public TerminalNode AND() { return getToken(CountingResultParser.AND, 0); }
		public Logic_term_ANDContext(Logic_termContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).enterLogic_term_AND(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).exitLogic_term_AND(this);
		}
	}

	public final Logic_termContext logic_term() throws RecognitionException {
		return logic_term(0);
	}

	private Logic_termContext logic_term(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Logic_termContext _localctx = new Logic_termContext(_ctx, _parentState);
		Logic_termContext _prevctx = _localctx;
		int _startState = 28;
		enterRecursionRule(_localctx, 28, RULE_logic_term, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new Logic_term_logic_factorContext(_localctx);
			_ctx = _localctx;
			_prevctx = _localctx;

			setState(300);
			logic_factor();
			}
			_ctx.stop = _input.LT(-1);
			setState(309);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,38,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Logic_term_ANDContext(new Logic_termContext(_parentctx, _parentState));
					pushNewRecursionContext(_localctx, _startState, RULE_logic_term);
					setState(302);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(303);
					match(WS);
					setState(304);
					match(AND);
					setState(305);
					match(WS);
					setState(306);
					logic_term(3);
					}
					} 
				}
				setState(311);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,38,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Logic_factorContext extends ParserRuleContext {
		public Logic_factorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_logic_factor; }
	 
		public Logic_factorContext() { }
		public void copyFrom(Logic_factorContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class Logic_factor_compareContext extends Logic_factorContext {
		public Compare_termContext compare_term() {
			return getRuleContext(Compare_termContext.class,0);
		}
		public Logic_factor_compareContext(Logic_factorContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).enterLogic_factor_compare(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).exitLogic_factor_compare(this);
		}
	}
	public static class Logic_factor_Parentheses_Logic_ExprContext extends Logic_factorContext {
		public Logic_exprContext logic_expr() {
			return getRuleContext(Logic_exprContext.class,0);
		}
		public Logic_factor_Parentheses_Logic_ExprContext(Logic_factorContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).enterLogic_factor_Parentheses_Logic_Expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).exitLogic_factor_Parentheses_Logic_Expr(this);
		}
	}

	public final Logic_factorContext logic_factor() throws RecognitionException {
		Logic_factorContext _localctx = new Logic_factorContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_logic_factor);
		try {
			setState(317);
			switch ( getInterpreter().adaptivePredict(_input,39,_ctx) ) {
			case 1:
				_localctx = new Logic_factor_compareContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(312);
				compare_term();
				}
				break;
			case 2:
				_localctx = new Logic_factor_Parentheses_Logic_ExprContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(313);
				match(T__9);
				setState(314);
				logic_expr(0);
				setState(315);
				match(T__10);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Compare_operatorContext extends ParserRuleContext {
		public Compare_operatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compare_operator; }
	 
		public Compare_operatorContext() { }
		public void copyFrom(Compare_operatorContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class Greater_or_equalContext extends Compare_operatorContext {
		public TerminalNode GE() { return getToken(CountingResultParser.GE, 0); }
		public Greater_or_equalContext(Compare_operatorContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).enterGreater_or_equal(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).exitGreater_or_equal(this);
		}
	}
	public static class EqualContext extends Compare_operatorContext {
		public TerminalNode EQ() { return getToken(CountingResultParser.EQ, 0); }
		public EqualContext(Compare_operatorContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).enterEqual(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).exitEqual(this);
		}
	}
	public static class GreaterContext extends Compare_operatorContext {
		public TerminalNode GT() { return getToken(CountingResultParser.GT, 0); }
		public GreaterContext(Compare_operatorContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).enterGreater(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).exitGreater(this);
		}
	}
	public static class Less_or_equalContext extends Compare_operatorContext {
		public TerminalNode LE() { return getToken(CountingResultParser.LE, 0); }
		public Less_or_equalContext(Compare_operatorContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).enterLess_or_equal(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).exitLess_or_equal(this);
		}
	}
	public static class LessContext extends Compare_operatorContext {
		public TerminalNode LT() { return getToken(CountingResultParser.LT, 0); }
		public LessContext(Compare_operatorContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).enterLess(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).exitLess(this);
		}
	}

	public final Compare_operatorContext compare_operator() throws RecognitionException {
		Compare_operatorContext _localctx = new Compare_operatorContext(_ctx, getState());
		enterRule(_localctx, 32, RULE_compare_operator);
		try {
			setState(324);
			switch (_input.LA(1)) {
			case GE:
				_localctx = new Greater_or_equalContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(319);
				match(GE);
				}
				break;
			case GT:
				_localctx = new GreaterContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(320);
				match(GT);
				}
				break;
			case LE:
				_localctx = new Less_or_equalContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(321);
				match(LE);
				}
				break;
			case LT:
				_localctx = new LessContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(322);
				match(LT);
				}
				break;
			case EQ:
				_localctx = new EqualContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(323);
				match(EQ);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Compare_termContext extends ParserRuleContext {
		public Compare_termContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compare_term; }
	 
		public Compare_termContext() { }
		public void copyFrom(Compare_termContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class Compare_term_LessContext extends Compare_termContext {
		public List<Arith_exprContext> arith_expr() {
			return getRuleContexts(Arith_exprContext.class);
		}
		public Arith_exprContext arith_expr(int i) {
			return getRuleContext(Arith_exprContext.class,i);
		}
		public TerminalNode LT() { return getToken(CountingResultParser.LT, 0); }
		public List<TerminalNode> WS() { return getTokens(CountingResultParser.WS); }
		public TerminalNode WS(int i) {
			return getToken(CountingResultParser.WS, i);
		}
		public Compare_term_LessContext(Compare_termContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).enterCompare_term_Less(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).exitCompare_term_Less(this);
		}
	}
	public static class Compare_term_EqualContext extends Compare_termContext {
		public List<Arith_exprContext> arith_expr() {
			return getRuleContexts(Arith_exprContext.class);
		}
		public Arith_exprContext arith_expr(int i) {
			return getRuleContext(Arith_exprContext.class,i);
		}
		public TerminalNode EQ() { return getToken(CountingResultParser.EQ, 0); }
		public List<TerminalNode> WS() { return getTokens(CountingResultParser.WS); }
		public TerminalNode WS(int i) {
			return getToken(CountingResultParser.WS, i);
		}
		public Compare_term_EqualContext(Compare_termContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).enterCompare_term_Equal(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).exitCompare_term_Equal(this);
		}
	}
	public static class Compare_term_GreaterContext extends Compare_termContext {
		public List<Arith_exprContext> arith_expr() {
			return getRuleContexts(Arith_exprContext.class);
		}
		public Arith_exprContext arith_expr(int i) {
			return getRuleContext(Arith_exprContext.class,i);
		}
		public TerminalNode GT() { return getToken(CountingResultParser.GT, 0); }
		public List<TerminalNode> WS() { return getTokens(CountingResultParser.WS); }
		public TerminalNode WS(int i) {
			return getToken(CountingResultParser.WS, i);
		}
		public Compare_term_GreaterContext(Compare_termContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).enterCompare_term_Greater(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).exitCompare_term_Greater(this);
		}
	}
	public static class Compare_term_Greater_or_equalContext extends Compare_termContext {
		public List<Arith_exprContext> arith_expr() {
			return getRuleContexts(Arith_exprContext.class);
		}
		public Arith_exprContext arith_expr(int i) {
			return getRuleContext(Arith_exprContext.class,i);
		}
		public TerminalNode GE() { return getToken(CountingResultParser.GE, 0); }
		public List<TerminalNode> WS() { return getTokens(CountingResultParser.WS); }
		public TerminalNode WS(int i) {
			return getToken(CountingResultParser.WS, i);
		}
		public Compare_term_Greater_or_equalContext(Compare_termContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).enterCompare_term_Greater_or_equal(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).exitCompare_term_Greater_or_equal(this);
		}
	}
	public static class Compare_term_Less_or_equalContext extends Compare_termContext {
		public List<Arith_exprContext> arith_expr() {
			return getRuleContexts(Arith_exprContext.class);
		}
		public Arith_exprContext arith_expr(int i) {
			return getRuleContext(Arith_exprContext.class,i);
		}
		public TerminalNode LE() { return getToken(CountingResultParser.LE, 0); }
		public List<TerminalNode> WS() { return getTokens(CountingResultParser.WS); }
		public TerminalNode WS(int i) {
			return getToken(CountingResultParser.WS, i);
		}
		public Compare_term_Less_or_equalContext(Compare_termContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).enterCompare_term_Less_or_equal(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).exitCompare_term_Less_or_equal(this);
		}
	}
	public static class Compare_term_trioContext extends Compare_termContext {
		public List<Arith_exprContext> arith_expr() {
			return getRuleContexts(Arith_exprContext.class);
		}
		public Arith_exprContext arith_expr(int i) {
			return getRuleContext(Arith_exprContext.class,i);
		}
		public List<Compare_operatorContext> compare_operator() {
			return getRuleContexts(Compare_operatorContext.class);
		}
		public Compare_operatorContext compare_operator(int i) {
			return getRuleContext(Compare_operatorContext.class,i);
		}
		public List<TerminalNode> WS() { return getTokens(CountingResultParser.WS); }
		public TerminalNode WS(int i) {
			return getToken(CountingResultParser.WS, i);
		}
		public Compare_term_trioContext(Compare_termContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).enterCompare_term_trio(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).exitCompare_term_trio(this);
		}
	}

	public final Compare_termContext compare_term() throws RecognitionException {
		Compare_termContext _localctx = new Compare_termContext(_ctx, getState());
		enterRule(_localctx, 34, RULE_compare_term);
		int _la;
		try {
			setState(436);
			switch ( getInterpreter().adaptivePredict(_input,55,_ctx) ) {
			case 1:
				_localctx = new Compare_term_trioContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(326);
				arith_expr(0);
				setState(330);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==WS) {
					{
					{
					setState(327);
					match(WS);
					}
					}
					setState(332);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(333);
				compare_operator();
				setState(337);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==WS) {
					{
					{
					setState(334);
					match(WS);
					}
					}
					setState(339);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(340);
				arith_expr(0);
				setState(344);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==WS) {
					{
					{
					setState(341);
					match(WS);
					}
					}
					setState(346);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(347);
				compare_operator();
				setState(351);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==WS) {
					{
					{
					setState(348);
					match(WS);
					}
					}
					setState(353);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(354);
				arith_expr(0);
				}
				break;
			case 2:
				_localctx = new Compare_term_GreaterContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(356);
				arith_expr(0);
				setState(360);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==WS) {
					{
					{
					setState(357);
					match(WS);
					}
					}
					setState(362);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(363);
				match(GT);
				setState(367);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==WS) {
					{
					{
					setState(364);
					match(WS);
					}
					}
					setState(369);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(370);
				arith_expr(0);
				}
				break;
			case 3:
				_localctx = new Compare_term_Greater_or_equalContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(372);
				arith_expr(0);
				setState(376);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==WS) {
					{
					{
					setState(373);
					match(WS);
					}
					}
					setState(378);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(379);
				match(GE);
				setState(383);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==WS) {
					{
					{
					setState(380);
					match(WS);
					}
					}
					setState(385);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(386);
				arith_expr(0);
				}
				break;
			case 4:
				_localctx = new Compare_term_LessContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(388);
				arith_expr(0);
				setState(392);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==WS) {
					{
					{
					setState(389);
					match(WS);
					}
					}
					setState(394);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(395);
				match(LT);
				setState(399);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==WS) {
					{
					{
					setState(396);
					match(WS);
					}
					}
					setState(401);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(402);
				arith_expr(0);
				}
				break;
			case 5:
				_localctx = new Compare_term_Less_or_equalContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(404);
				arith_expr(0);
				setState(408);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==WS) {
					{
					{
					setState(405);
					match(WS);
					}
					}
					setState(410);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(411);
				match(LE);
				setState(415);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==WS) {
					{
					{
					setState(412);
					match(WS);
					}
					}
					setState(417);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(418);
				arith_expr(0);
				}
				break;
			case 6:
				_localctx = new Compare_term_EqualContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(420);
				arith_expr(0);
				setState(424);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==WS) {
					{
					{
					setState(421);
					match(WS);
					}
					}
					setState(426);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(427);
				match(EQ);
				setState(431);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==WS) {
					{
					{
					setState(428);
					match(WS);
					}
					}
					setState(433);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(434);
				arith_expr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public boolean sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 7:
			return arith_expr_sempred((Arith_exprContext)_localctx, predIndex);
		case 8:
			return arith_term_sempred((Arith_termContext)_localctx, predIndex);
		case 9:
			return factor_sempred((FactorContext)_localctx, predIndex);
		case 11:
			return logic_expr_sempred((Logic_exprContext)_localctx, predIndex);
		case 14:
			return logic_term_sempred((Logic_termContext)_localctx, predIndex);
		}
		return true;
	}
	private boolean arith_expr_sempred(Arith_exprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0:
			return precpred(_ctx, 4);
		case 1:
			return precpred(_ctx, 3);
		}
		return true;
	}
	private boolean arith_term_sempred(Arith_termContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2:
			return precpred(_ctx, 3);
		case 3:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean factor_sempred(FactorContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4:
			return precpred(_ctx, 7);
		case 5:
			return precpred(_ctx, 5);
		}
		return true;
	}
	private boolean logic_expr_sempred(Logic_exprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 6:
			return precpred(_ctx, 3);
		}
		return true;
	}
	private boolean logic_term_sempred(Logic_termContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7:
			return precpred(_ctx, 2);
		}
		return true;
	}

	public static final String _serializedATN =
		"\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\3#\u01b9\4\2\t\2\4"+
		"\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t"+
		"\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\3\2\3\2\7\2)\n\2\f\2\16\2,\13\2\3\2\3\2\7\2\60\n\2\f\2\16\2"+
		"\63\13\2\3\2\3\2\3\2\5\28\n\2\3\3\3\3\3\3\3\3\3\3\7\3?\n\3\f\3\16\3B\13"+
		"\3\3\3\7\3E\n\3\f\3\16\3H\13\3\3\3\5\3K\n\3\3\4\3\4\7\4O\n\4\f\4\16\4"+
		"R\13\4\3\4\3\4\7\4V\n\4\f\4\16\4Y\13\4\3\4\3\4\3\4\3\4\7\4_\n\4\f\4\16"+
		"\4b\13\4\3\4\5\4e\n\4\3\5\3\5\3\5\7\5j\n\5\f\5\16\5m\13\5\3\5\7\5p\n\5"+
		"\f\5\16\5s\13\5\3\6\3\6\7\6w\n\6\f\6\16\6z\13\6\3\6\3\6\7\6~\n\6\f\6\16"+
		"\6\u0081\13\6\3\6\3\6\3\6\5\6\u0086\n\6\3\7\3\7\5\7\u008a\n\7\3\b\3\b"+
		"\3\t\3\t\3\t\3\t\5\t\u0092\n\t\3\t\3\t\7\t\u0096\n\t\f\t\16\t\u0099\13"+
		"\t\3\t\3\t\7\t\u009d\n\t\f\t\16\t\u00a0\13\t\3\t\3\t\3\t\7\t\u00a5\n\t"+
		"\f\t\16\t\u00a8\13\t\3\t\3\t\7\t\u00ac\n\t\f\t\16\t\u00af\13\t\3\t\7\t"+
		"\u00b2\n\t\f\t\16\t\u00b5\13\t\3\n\3\n\3\n\3\n\3\n\7\n\u00bc\n\n\f\n\16"+
		"\n\u00bf\13\n\3\n\3\n\7\n\u00c3\n\n\f\n\16\n\u00c6\13\n\3\n\3\n\3\n\7"+
		"\n\u00cb\n\n\f\n\16\n\u00ce\13\n\3\n\3\n\7\n\u00d2\n\n\f\n\16\n\u00d5"+
		"\13\n\3\n\7\n\u00d8\n\n\f\n\16\n\u00db\13\n\3\13\3\13\3\13\3\13\3\13\3"+
		"\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\5"+
		"\13\u00f0\n\13\3\13\3\13\3\13\3\13\3\13\3\13\7\13\u00f8\n\13\f\13\16\13"+
		"\u00fb\13\13\3\f\3\f\3\r\3\r\3\r\5\r\u0102\n\r\3\r\3\r\3\r\3\r\3\r\7\r"+
		"\u0109\n\r\f\r\16\r\u010c\13\r\3\16\3\16\7\16\u0110\n\16\f\16\16\16\u0113"+
		"\13\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\17\3\17\3\17\7\17\u011f\n"+
		"\17\f\17\16\17\u0122\13\17\3\17\3\17\7\17\u0126\n\17\f\17\16\17\u0129"+
		"\13\17\3\17\5\17\u012c\n\17\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\7"+
		"\20\u0136\n\20\f\20\16\20\u0139\13\20\3\21\3\21\3\21\3\21\3\21\5\21\u0140"+
		"\n\21\3\22\3\22\3\22\3\22\3\22\5\22\u0147\n\22\3\23\3\23\7\23\u014b\n"+
		"\23\f\23\16\23\u014e\13\23\3\23\3\23\7\23\u0152\n\23\f\23\16\23\u0155"+
		"\13\23\3\23\3\23\7\23\u0159\n\23\f\23\16\23\u015c\13\23\3\23\3\23\7\23"+
		"\u0160\n\23\f\23\16\23\u0163\13\23\3\23\3\23\3\23\3\23\7\23\u0169\n\23"+
		"\f\23\16\23\u016c\13\23\3\23\3\23\7\23\u0170\n\23\f\23\16\23\u0173\13"+
		"\23\3\23\3\23\3\23\3\23\7\23\u0179\n\23\f\23\16\23\u017c\13\23\3\23\3"+
		"\23\7\23\u0180\n\23\f\23\16\23\u0183\13\23\3\23\3\23\3\23\3\23\7\23\u0189"+
		"\n\23\f\23\16\23\u018c\13\23\3\23\3\23\7\23\u0190\n\23\f\23\16\23\u0193"+
		"\13\23\3\23\3\23\3\23\3\23\7\23\u0199\n\23\f\23\16\23\u019c\13\23\3\23"+
		"\3\23\7\23\u01a0\n\23\f\23\16\23\u01a3\13\23\3\23\3\23\3\23\3\23\7\23"+
		"\u01a9\n\23\f\23\16\23\u01ac\13\23\3\23\3\23\7\23\u01b0\n\23\f\23\16\23"+
		"\u01b3\13\23\3\23\3\23\5\23\u01b7\n\23\3\23\2\7\20\22\24\30\36\24\2\4"+
		"\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$\2\3\4\2\16\17\25\25\u01e9\2\67"+
		"\3\2\2\2\4J\3\2\2\2\6d\3\2\2\2\bf\3\2\2\2\n\u0085\3\2\2\2\f\u0089\3\2"+
		"\2\2\16\u008b\3\2\2\2\20\u0091\3\2\2\2\22\u00b6\3\2\2\2\24\u00ef\3\2\2"+
		"\2\26\u00fc\3\2\2\2\30\u0101\3\2\2\2\32\u010d\3\2\2\2\34\u012b\3\2\2\2"+
		"\36\u012d\3\2\2\2 \u013f\3\2\2\2\"\u0146\3\2\2\2$\u01b6\3\2\2\2&*\5\4"+
		"\3\2\')\7\32\2\2(\'\3\2\2\2),\3\2\2\2*(\3\2\2\2*+\3\2\2\2+-\3\2\2\2,*"+
		"\3\2\2\2-\61\7\3\2\2.\60\7\32\2\2/.\3\2\2\2\60\63\3\2\2\2\61/\3\2\2\2"+
		"\61\62\3\2\2\2\62\64\3\2\2\2\63\61\3\2\2\2\64\65\5\6\4\2\658\3\2\2\2\66"+
		"8\5\6\4\2\67&\3\2\2\2\67\66\3\2\2\28\3\3\2\2\29K\7\4\2\2:;\7\5\2\2;F\7"+
		"\30\2\2<@\7\6\2\2=?\7\32\2\2>=\3\2\2\2?B\3\2\2\2@>\3\2\2\2@A\3\2\2\2A"+
		"C\3\2\2\2B@\3\2\2\2CE\7\30\2\2D<\3\2\2\2EH\3\2\2\2FD\3\2\2\2FG\3\2\2\2"+
		"GI\3\2\2\2HF\3\2\2\2IK\7\7\2\2J9\3\2\2\2J:\3\2\2\2K\5\3\2\2\2LP\7\b\2"+
		"\2MO\7\32\2\2NM\3\2\2\2OR\3\2\2\2PN\3\2\2\2PQ\3\2\2\2QS\3\2\2\2RP\3\2"+
		"\2\2SW\5\b\5\2TV\7\32\2\2UT\3\2\2\2VY\3\2\2\2WU\3\2\2\2WX\3\2\2\2XZ\3"+
		"\2\2\2YW\3\2\2\2Z[\7\t\2\2[e\3\2\2\2\\`\7\b\2\2]_\7\32\2\2^]\3\2\2\2_"+
		"b\3\2\2\2`^\3\2\2\2`a\3\2\2\2ac\3\2\2\2b`\3\2\2\2ce\7\t\2\2dL\3\2\2\2"+
		"d\\\3\2\2\2e\7\3\2\2\2fq\5\n\6\2gk\7\n\2\2hj\7\32\2\2ih\3\2\2\2jm\3\2"+
		"\2\2ki\3\2\2\2kl\3\2\2\2ln\3\2\2\2mk\3\2\2\2np\5\n\6\2og\3\2\2\2ps\3\2"+
		"\2\2qo\3\2\2\2qr\3\2\2\2r\t\3\2\2\2sq\3\2\2\2tx\5\f\7\2uw\7\32\2\2vu\3"+
		"\2\2\2wz\3\2\2\2xv\3\2\2\2xy\3\2\2\2y{\3\2\2\2zx\3\2\2\2{\177\7\13\2\2"+
		"|~\7\32\2\2}|\3\2\2\2~\u0081\3\2\2\2\177}\3\2\2\2\177\u0080\3\2\2\2\u0080"+
		"\u0082\3\2\2\2\u0081\177\3\2\2\2\u0082\u0083\5\16\b\2\u0083\u0086\3\2"+
		"\2\2\u0084\u0086\5\f\7\2\u0085t\3\2\2\2\u0085\u0084\3\2\2\2\u0086\13\3"+
		"\2\2\2\u0087\u008a\5\20\t\2\u0088\u008a\7\23\2\2\u0089\u0087\3\2\2\2\u0089"+
		"\u0088\3\2\2\2\u008a\r\3\2\2\2\u008b\u008c\5\30\r\2\u008c\17\3\2\2\2\u008d"+
		"\u008e\b\t\1\2\u008e\u008f\7#\2\2\u008f\u0092\5\20\t\3\u0090\u0092\5\22"+
		"\n\2\u0091\u008d\3\2\2\2\u0091\u0090\3\2\2\2\u0092\u00b3\3\2\2\2\u0093"+
		"\u0097\f\6\2\2\u0094\u0096\7\32\2\2\u0095\u0094\3\2\2\2\u0096\u0099\3"+
		"\2\2\2\u0097\u0095\3\2\2\2\u0097\u0098\3\2\2\2\u0098\u009a\3\2\2\2\u0099"+
		"\u0097\3\2\2\2\u009a\u009e\7#\2\2\u009b\u009d\7\32\2\2\u009c\u009b\3\2"+
		"\2\2\u009d\u00a0\3\2\2\2\u009e\u009c\3\2\2\2\u009e\u009f\3\2\2\2\u009f"+
		"\u00a1\3\2\2\2\u00a0\u009e\3\2\2\2\u00a1\u00b2\5\20\t\7\u00a2\u00a6\f"+
		"\5\2\2\u00a3\u00a5\7\32\2\2\u00a4\u00a3\3\2\2\2\u00a5\u00a8\3\2\2\2\u00a6"+
		"\u00a4\3\2\2\2\u00a6\u00a7\3\2\2\2\u00a7\u00a9\3\2\2\2\u00a8\u00a6\3\2"+
		"\2\2\u00a9\u00ad\7\"\2\2\u00aa\u00ac\7\32\2\2\u00ab\u00aa\3\2\2\2\u00ac"+
		"\u00af\3\2\2\2\u00ad\u00ab\3\2\2\2\u00ad\u00ae\3\2\2\2\u00ae\u00b0\3\2"+
		"\2\2\u00af\u00ad\3\2\2\2\u00b0\u00b2\5\20\t\6\u00b1\u0093\3\2\2\2\u00b1"+
		"\u00a2\3\2\2\2\u00b2\u00b5\3\2\2\2\u00b3\u00b1\3\2\2\2\u00b3\u00b4\3\2"+
		"\2\2\u00b4\21\3\2\2\2\u00b5\u00b3\3\2\2\2\u00b6\u00b7\b\n\1\2\u00b7\u00b8"+
		"\5\24\13\2\u00b8\u00d9\3\2\2\2\u00b9\u00bd\f\5\2\2\u00ba\u00bc\7\32\2"+
		"\2\u00bb\u00ba\3\2\2\2\u00bc\u00bf\3\2\2\2\u00bd\u00bb\3\2\2\2\u00bd\u00be"+
		"\3\2\2\2\u00be\u00c0\3\2\2\2\u00bf\u00bd\3\2\2\2\u00c0\u00c4\7 \2\2\u00c1"+
		"\u00c3\7\32\2\2\u00c2\u00c1\3\2\2\2\u00c3\u00c6\3\2\2\2\u00c4\u00c2\3"+
		"\2\2\2\u00c4\u00c5\3\2\2\2\u00c5\u00c7\3\2\2\2\u00c6\u00c4\3\2\2\2\u00c7"+
		"\u00d8\5\22\n\6\u00c8\u00cc\f\4\2\2\u00c9\u00cb\7\32\2\2\u00ca\u00c9\3"+
		"\2\2\2\u00cb\u00ce\3\2\2\2\u00cc\u00ca\3\2\2\2\u00cc\u00cd\3\2\2\2\u00cd"+
		"\u00cf\3\2\2\2\u00ce\u00cc\3\2\2\2\u00cf\u00d3\7!\2\2\u00d0\u00d2\7\32"+
		"\2\2\u00d1\u00d0\3\2\2\2\u00d2\u00d5\3\2\2\2\u00d3\u00d1\3\2\2\2\u00d3"+
		"\u00d4\3\2\2\2\u00d4\u00d6\3\2\2\2\u00d5\u00d3\3\2\2\2\u00d6\u00d8\5\22"+
		"\n\5\u00d7\u00b9\3\2\2\2\u00d7\u00c8\3\2\2\2\u00d8\u00db\3\2\2\2\u00d9"+
		"\u00d7\3\2\2\2\u00d9\u00da\3\2\2\2\u00da\23\3\2\2\2\u00db\u00d9\3\2\2"+
		"\2\u00dc\u00dd\b\13\1\2\u00dd\u00f0\5\26\f\2\u00de\u00df\7\5\2\2\u00df"+
		"\u00e0\5\24\13\2\u00e0\u00e1\7\7\2\2\u00e1\u00f0\3\2\2\2\u00e2\u00f0\7"+
		"\30\2\2\u00e3\u00e4\5\26\f\2\u00e4\u00e5\7\30\2\2\u00e5\u00f0\3\2\2\2"+
		"\u00e6\u00e7\7\f\2\2\u00e7\u00e8\5\20\t\2\u00e8\u00e9\7\r\2\2\u00e9\u00f0"+
		"\3\2\2\2\u00ea\u00eb\7\20\2\2\u00eb\u00ec\7\f\2\2\u00ec\u00ed\5\24\13"+
		"\2\u00ed\u00ee\7\r\2\2\u00ee\u00f0\3\2\2\2\u00ef\u00dc\3\2\2\2\u00ef\u00de"+
		"\3\2\2\2\u00ef\u00e2\3\2\2\2\u00ef\u00e3\3\2\2\2\u00ef\u00e6\3\2\2\2\u00ef"+
		"\u00ea\3\2\2\2\u00f0\u00f9\3\2\2\2\u00f1\u00f2\f\t\2\2\u00f2\u00f3\7!"+
		"\2\2\u00f3\u00f8\5\24\13\n\u00f4\u00f5\f\7\2\2\u00f5\u00f6\7\26\2\2\u00f6"+
		"\u00f8\5\24\13\b\u00f7\u00f1\3\2\2\2\u00f7\u00f4\3\2\2\2\u00f8\u00fb\3"+
		"\2\2\2\u00f9\u00f7\3\2\2\2\u00f9\u00fa\3\2\2\2\u00fa\25\3\2\2\2\u00fb"+
		"\u00f9\3\2\2\2\u00fc\u00fd\t\2\2\2\u00fd\27\3\2\2\2\u00fe\u00ff\b\r\1"+
		"\2\u00ff\u0102\5\32\16\2\u0100\u0102\5\36\20\2\u0101\u00fe\3\2\2\2\u0101"+
		"\u0100\3\2\2\2\u0102\u010a\3\2\2\2\u0103\u0104\f\5\2\2\u0104\u0105\7\32"+
		"\2\2\u0105\u0106\7\21\2\2\u0106\u0107\7\32\2\2\u0107\u0109\5\30\r\6\u0108"+
		"\u0103\3\2\2\2\u0109\u010c\3\2\2\2\u010a\u0108\3\2\2\2\u010a\u010b\3\2"+
		"\2\2\u010b\31\3\2\2\2\u010c\u010a\3\2\2\2\u010d\u0111\7\24\2\2\u010e\u0110"+
		"\7\32\2\2\u010f\u010e\3\2\2\2\u0110\u0113\3\2\2\2\u0111\u010f\3\2\2\2"+
		"\u0111\u0112\3\2\2\2\u0112\u0114\3\2\2\2\u0113\u0111\3\2\2\2\u0114\u0115"+
		"\7\f\2\2\u0115\u0116\5\34\17\2\u0116\u0117\7\13\2\2\u0117\u0118\7\32\2"+
		"\2\u0118\u0119\5\30\r\2\u0119\u011a\7\r\2\2\u011a\33\3\2\2\2\u011b\u012c"+
		"\7\30\2\2\u011c\u0120\7\30\2\2\u011d\u011f\7\32\2\2\u011e\u011d\3\2\2"+
		"\2\u011f\u0122\3\2\2\2\u0120\u011e\3\2\2\2\u0120\u0121\3\2\2\2\u0121\u0123"+
		"\3\2\2\2\u0122\u0120\3\2\2\2\u0123\u0127\7\37\2\2\u0124\u0126\7\32\2\2"+
		"\u0125\u0124\3\2\2\2\u0126\u0129\3\2\2\2\u0127\u0125\3\2\2\2\u0127\u0128"+
		"\3\2\2\2\u0128\u012a\3\2\2\2\u0129\u0127\3\2\2\2\u012a\u012c\5\20\t\2"+
		"\u012b\u011b\3\2\2\2\u012b\u011c\3\2\2\2\u012c\35\3\2\2\2\u012d\u012e"+
		"\b\20\1\2\u012e\u012f\5 \21\2\u012f\u0137\3\2\2\2\u0130\u0131\f\4\2\2"+
		"\u0131\u0132\7\32\2\2\u0132\u0133\7\22\2\2\u0133\u0134\7\32\2\2\u0134"+
		"\u0136\5\36\20\5\u0135\u0130\3\2\2\2\u0136\u0139\3\2\2\2\u0137\u0135\3"+
		"\2\2\2\u0137\u0138\3\2\2\2\u0138\37\3\2\2\2\u0139\u0137\3\2\2\2\u013a"+
		"\u0140\5$\23\2\u013b\u013c\7\f\2\2\u013c\u013d\5\30\r\2\u013d\u013e\7"+
		"\r\2\2\u013e\u0140\3\2\2\2\u013f\u013a\3\2\2\2\u013f\u013b\3\2\2\2\u0140"+
		"!\3\2\2\2\u0141\u0147\7\33\2\2\u0142\u0147\7\34\2\2\u0143\u0147\7\35\2"+
		"\2\u0144\u0147\7\36\2\2\u0145\u0147\7\37\2\2\u0146\u0141\3\2\2\2\u0146"+
		"\u0142\3\2\2\2\u0146\u0143\3\2\2\2\u0146\u0144\3\2\2\2\u0146\u0145\3\2"+
		"\2\2\u0147#\3\2\2\2\u0148\u014c\5\20\t\2\u0149\u014b\7\32\2\2\u014a\u0149"+
		"\3\2\2\2\u014b\u014e\3\2\2\2\u014c\u014a\3\2\2\2\u014c\u014d\3\2\2\2\u014d"+
		"\u014f\3\2\2\2\u014e\u014c\3\2\2\2\u014f\u0153\5\"\22\2\u0150\u0152\7"+
		"\32\2\2\u0151\u0150\3\2\2\2\u0152\u0155\3\2\2\2\u0153\u0151\3\2\2\2\u0153"+
		"\u0154\3\2\2\2\u0154\u0156\3\2\2\2\u0155\u0153\3\2\2\2\u0156\u015a\5\20"+
		"\t\2\u0157\u0159\7\32\2\2\u0158\u0157\3\2\2\2\u0159\u015c\3\2\2\2\u015a"+
		"\u0158\3\2\2\2\u015a\u015b\3\2\2\2\u015b\u015d\3\2\2\2\u015c\u015a\3\2"+
		"\2\2\u015d\u0161\5\"\22\2\u015e\u0160\7\32\2\2\u015f\u015e\3\2\2\2\u0160"+
		"\u0163\3\2\2\2\u0161\u015f\3\2\2\2\u0161\u0162\3\2\2\2\u0162\u0164\3\2"+
		"\2\2\u0163\u0161\3\2\2\2\u0164\u0165\5\20\t\2\u0165\u01b7\3\2\2\2\u0166"+
		"\u016a\5\20\t\2\u0167\u0169\7\32\2\2\u0168\u0167\3\2\2\2\u0169\u016c\3"+
		"\2\2\2\u016a\u0168\3\2\2\2\u016a\u016b\3\2\2\2\u016b\u016d\3\2\2\2\u016c"+
		"\u016a\3\2\2\2\u016d\u0171\7\34\2\2\u016e\u0170\7\32\2\2\u016f\u016e\3"+
		"\2\2\2\u0170\u0173\3\2\2\2\u0171\u016f\3\2\2\2\u0171\u0172\3\2\2\2\u0172"+
		"\u0174\3\2\2\2\u0173\u0171\3\2\2\2\u0174\u0175\5\20\t\2\u0175\u01b7\3"+
		"\2\2\2\u0176\u017a\5\20\t\2\u0177\u0179\7\32\2\2\u0178\u0177\3\2\2\2\u0179"+
		"\u017c\3\2\2\2\u017a\u0178\3\2\2\2\u017a\u017b\3\2\2\2\u017b\u017d\3\2"+
		"\2\2\u017c\u017a\3\2\2\2\u017d\u0181\7\33\2\2\u017e\u0180\7\32\2\2\u017f"+
		"\u017e\3\2\2\2\u0180\u0183\3\2\2\2\u0181\u017f\3\2\2\2\u0181\u0182\3\2"+
		"\2\2\u0182\u0184\3\2\2\2\u0183\u0181\3\2\2\2\u0184\u0185\5\20\t\2\u0185"+
		"\u01b7\3\2\2\2\u0186\u018a\5\20\t\2\u0187\u0189\7\32\2\2\u0188\u0187\3"+
		"\2\2\2\u0189\u018c\3\2\2\2\u018a\u0188\3\2\2\2\u018a\u018b\3\2\2\2\u018b"+
		"\u018d\3\2\2\2\u018c\u018a\3\2\2\2\u018d\u0191\7\36\2\2\u018e\u0190\7"+
		"\32\2\2\u018f\u018e\3\2\2\2\u0190\u0193\3\2\2\2\u0191\u018f\3\2\2\2\u0191"+
		"\u0192\3\2\2\2\u0192\u0194\3\2\2\2\u0193\u0191\3\2\2\2\u0194\u0195\5\20"+
		"\t\2\u0195\u01b7\3\2\2\2\u0196\u019a\5\20\t\2\u0197\u0199\7\32\2\2\u0198"+
		"\u0197\3\2\2\2\u0199\u019c\3\2\2\2\u019a\u0198\3\2\2\2\u019a\u019b\3\2"+
		"\2\2\u019b\u019d\3\2\2\2\u019c\u019a\3\2\2\2\u019d\u01a1\7\35\2\2\u019e"+
		"\u01a0\7\32\2\2\u019f\u019e\3\2\2\2\u01a0\u01a3\3\2\2\2\u01a1\u019f\3"+
		"\2\2\2\u01a1\u01a2\3\2\2\2\u01a2\u01a4\3\2\2\2\u01a3\u01a1\3\2\2\2\u01a4"+
		"\u01a5\5\20\t\2\u01a5\u01b7\3\2\2\2\u01a6\u01aa\5\20\t\2\u01a7\u01a9\7"+
		"\32\2\2\u01a8\u01a7\3\2\2\2\u01a9\u01ac\3\2\2\2\u01aa\u01a8\3\2\2\2\u01aa"+
		"\u01ab\3\2\2\2\u01ab\u01ad\3\2\2\2\u01ac\u01aa\3\2\2\2\u01ad\u01b1\7\37"+
		"\2\2\u01ae\u01b0\7\32\2\2\u01af\u01ae\3\2\2\2\u01b0\u01b3\3\2\2\2\u01b1"+
		"\u01af\3\2\2\2\u01b1\u01b2\3\2\2\2\u01b2\u01b4\3\2\2\2\u01b3\u01b1\3\2"+
		"\2\2\u01b4\u01b5\5\20\t\2\u01b5\u01b7\3\2\2\2\u01b6\u0148\3\2\2\2\u01b6"+
		"\u0166\3\2\2\2\u01b6\u0176\3\2\2\2\u01b6\u0186\3\2\2\2\u01b6\u0196\3\2"+
		"\2\2\u01b6\u01a6\3\2\2\2\u01b7%\3\2\2\2:*\61\67@FJPW`dkqx\177\u0085\u0089"+
		"\u0091\u0097\u009e\u00a6\u00ad\u00b1\u00b3\u00bd\u00c4\u00cc\u00d3\u00d7"+
		"\u00d9\u00ef\u00f7\u00f9\u0101\u010a\u0111\u0120\u0127\u012b\u0137\u013f"+
		"\u0146\u014c\u0153\u015a\u0161\u016a\u0171\u017a\u0181\u018a\u0191\u019a"+
		"\u01a1\u01aa\u01b1\u01b6";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}