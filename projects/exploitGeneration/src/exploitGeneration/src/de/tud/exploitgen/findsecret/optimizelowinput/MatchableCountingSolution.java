package de.tud.exploitgen.findsecret.optimizelowinput;

import java.util.List;
import java.util.Map;

import de.tud.exploitgen.util.TermParser;
import de.uka.ilkd.key.logic.Term;

public class MatchableCountingSolution {
	private final List<Term> listCountTerms;
	private final Term conditionTerm;
	private final Map<String,Long> uniqueSolution;
	public MatchableCountingSolution(List<Term> listCountTerms,
			Term conditionTerm, Map<String,Long> uniqueSolution) {
		super();
		this.listCountTerms = listCountTerms;
		this.conditionTerm = conditionTerm;
		this.uniqueSolution = uniqueSolution;
	}
	public List<Term> getListCountTerms() {
		return listCountTerms;
	}
	public Term getConditionTerm() {
		return conditionTerm;
	}
	
		
	public Map<String, Long> getUniqueSolution() {
		return uniqueSolution;
	}
	
	public boolean allCountTermsIsConstant(){
		for(Term countTerm: listCountTerms)
			if(!TermParser.isIntegerConst(countTerm))
				return false;
		
		return true;			
	}
	public void printInfo(){
		System.out.println("+++++");
		System.out.println("listCountTerms: " + listCountTerms);
		System.out.println("conditionTerm: " + conditionTerm);
		System.out.println("+++++");
	}
}
