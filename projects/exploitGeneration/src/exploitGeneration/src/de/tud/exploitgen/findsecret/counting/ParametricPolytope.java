package de.tud.exploitgen.findsecret.counting;
/**
 * this class represent a Parametric polytope that can be translated into iscc format (barvinok tool)
 * the constraint, variables and parameters are represented as @Term
 * @author Huy Do
 * */
import java.util.LinkedList;
import java.util.List;

import de.tud.exploitgen.util.KeYResourceHandler;
import de.tud.exploitgen.util.TermParser;
import de.tud.exploitgen.util.TermUtil;
import de.uka.ilkd.key.logic.Term;

public class ParametricPolytope {
	private Term constraint;
	private List<String> parameters;
	private List<String> vars;
	
	public ParametricPolytope(Term constraint, List<String> parameters,
			List<String> vars) {
		super();
		this.constraint = constraint;
		this.parameters = parameters;
		this.vars = new LinkedList<String>();
		for(String varName: vars)
			this.vars.add(varName);
		//printInfo();
		
		//detectNaddNewVars(constraint);
	}

	public Term getConstraint() {
		return constraint;
	}

	public void setConstraint(Term constraint) {
		this.constraint = constraint;
	}

	public List<String> getParameters() {
		return parameters;
	}

	public void setParameters(List<String> parameters) {
		this.parameters = parameters;
	}

	public List<String> getVars() {
		return vars;
	}

	public void setVars(List<String> vars) {
		this.vars = vars;
	}
	public void printInfo(){
		System.out.println("constrant of parametric polytope: " + constraint);
		System.out.println("list parameters: " + parameters);
		System.out.println("list variables: " + vars);
	}
	
	/*
	 * the constraint might have program variables or artificial variables that are not low variables (parameters)
	 * this method detecs and add them to list of parameters
	 * FIX: we consider them as variables
	 * */
	private void detectNaddNewVars(Term constraint){
		if(TermParser.isProgramVariable(constraint)|| KeYResourceHandler.isArtificialVariable(constraint)){
			if (!(parameters.contains(constraint.toString())|| vars.contains(constraint.toString())))
				vars.add(constraint.toString());
		}else if (TermParser.hasChildren(constraint)){
			for(Term t: constraint.subs())
				detectNaddNewVars(t);			
		}
			
	}
}
