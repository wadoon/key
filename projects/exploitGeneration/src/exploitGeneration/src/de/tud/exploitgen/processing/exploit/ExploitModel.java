/**
 * 
 */
package de.tud.exploitgen.processing.exploit;



import com.csvanefalk.keytestgen.core.model.implementation.Model;

import com.csvanefalk.keytestgen.core.model.implementation.instance.ModelInstance;
import com.csvanefalk.keytestgen.core.model.implementation.variable.ModelVariable;

/**
 * this class wraps the model of an exploit. It includes 
 *    two {@link com.csvanefalk.keytestgen.core.model.implementation.Model} variables
 *    methods to parse the output model of solver into exploit model
 *    methods to parse variables in term into exploit model   
 * @author Huy Do
 *
 */
public class ExploitModel {
   private Model model1, model2; //two model for two leaking information
   private ModelVariable lowVar; //low variable that secret information could be leaked through
   
   private String HEAP_NAME;
   /**
    * @param model1
    * @param model2
    * @param hEAP_NAME
    */
   public ExploitModel(Model model1, Model model2, String hEAP_NAME) {
      super();
      this.model1 = model1;
      this.model2 = model2;
      HEAP_NAME = hEAP_NAME;
      lowVar=null; //default, the value of lowVar could be assigned later
   }

   /**
    * @return the hEAP_NAME
    */
   public String getHEAP_NAME() {
      return HEAP_NAME;
   }

   /**
    * @param hEAP_NAME the hEAP_NAME to set
    */
   public void setHEAP_NAME(String hEAP_NAME) {
      HEAP_NAME = hEAP_NAME;
   }

   /**
    * @return the model1
    */
   public Model getModel1() {
      return model1;
   }

   /**
    * @param model1 the model1 to set
    */
   public void setModel1(Model model1) {
      this.model1 = model1;
   }

   /**
    * @return the model2
    */
   public Model getModel2() {
      return model2;
   }

   /**
    * @param model2 the model2 to set
    */
   public void setModel2(Model model2) {
      this.model2 = model2;
   }

   /**
    * @param model1
    * @param model2
    */
   public ExploitModel(Model model1, Model model2) {
      super();
      this.model1 = model1;
      this.model2 = model2;
   }
   
   
   
   
   public Model getModel(int branch){
      if(branch==1)
         return model1;
      else
         return model2;
   }
   
   
      
    
   /**
    * @return the lowVar
    */
   public ModelVariable getLowVar() {
      return lowVar;
   }

   /**
    * @param lowVar the lowVar to set
    */
   public void setLowVar(ModelVariable lowVar) {
      this.lowVar = lowVar;
   }

   /**
    * print out exploit model, just for checking purpose
    * */
   public void printExploitModel(int branch){
      Model model;
      if(branch==1){
         model=model1;
      }else{
         model=model2;
      }
      System.out.println("model " + branch + " : ");
      for(ModelVariable mv : model.getVariables()){
         if(mv.isPrimitive())
            System.out.println(mv.getIdentifier()+": " + mv.getValue());
      }
      
      for(ModelVariable mv : model.getVariables()){
         System.out.println(mv.getIdentifier()+": " + mv.getSymbolicValue());
         if(mv.isPrimitive())
            System.out.println(mv.getValue());
         else{
            ModelInstance mi=(ModelInstance)mv.getValue();
            System.out.println(mi.toString() + " ; " + mi.getReferees().get(0) + " includes: ");
            for(ModelVariable mvv : mi.getFields()){
               System.out.println(mvv.getIdentifier()+" : " + mvv.getVariableName()+" : " + mvv.getValue());
            }
            System.out.println("-----");
         }
      }
      
      System.out.println();      
   }
   
   public void printModelInfo(){
      System.out.println("-----");
      printExploitModel(1);
      printExploitModel(2);
      System.out.println("secret information is leaked through variable: " + lowVar);
      
   }
}

