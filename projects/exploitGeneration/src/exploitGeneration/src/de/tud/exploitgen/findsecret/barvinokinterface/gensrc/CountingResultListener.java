// Generated from /home/huy/Working/GIT/key/projects/exploitGeneration/src/exploitGeneration/deployment/../src/de/tud/exploitgen/findsecret/barvinokinterface/gensrc/CountingResult.g4 by ANTLR 4.5.1

package de.tud.exploitgen.findsecret.barvinokinterface.gensrc;

import de.uka.ilkd.key.logic.Term;

import org.antlr.v4.runtime.tree.ParseTreeListener;

/**
 * This interface defines a complete listener for a parse tree produced by
 * {@link CountingResultParser}.
 */
public interface CountingResultListener extends ParseTreeListener {
	/**
	 * Enter a parse tree produced by {@link CountingResultParser#result}.
	 * @param ctx the parse tree
	 */
	void enterResult(CountingResultParser.ResultContext ctx);
	/**
	 * Exit a parse tree produced by {@link CountingResultParser#result}.
	 * @param ctx the parse tree
	 */
	void exitResult(CountingResultParser.ResultContext ctx);
	/**
	 * Enter a parse tree produced by the {@code Param_set_Empty}
	 * labeled alternative in {@link CountingResultParser#param_set}.
	 * @param ctx the parse tree
	 */
	void enterParam_set_Empty(CountingResultParser.Param_set_EmptyContext ctx);
	/**
	 * Exit a parse tree produced by the {@code Param_set_Empty}
	 * labeled alternative in {@link CountingResultParser#param_set}.
	 * @param ctx the parse tree
	 */
	void exitParam_set_Empty(CountingResultParser.Param_set_EmptyContext ctx);
	/**
	 * Enter a parse tree produced by the {@code Param_set_non_empty}
	 * labeled alternative in {@link CountingResultParser#param_set}.
	 * @param ctx the parse tree
	 */
	void enterParam_set_non_empty(CountingResultParser.Param_set_non_emptyContext ctx);
	/**
	 * Exit a parse tree produced by the {@code Param_set_non_empty}
	 * labeled alternative in {@link CountingResultParser#param_set}.
	 * @param ctx the parse tree
	 */
	void exitParam_set_non_empty(CountingResultParser.Param_set_non_emptyContext ctx);
	/**
	 * Enter a parse tree produced by the {@code Result_pharse_non_empty}
	 * labeled alternative in {@link CountingResultParser#result_pharse}.
	 * @param ctx the parse tree
	 */
	void enterResult_pharse_non_empty(CountingResultParser.Result_pharse_non_emptyContext ctx);
	/**
	 * Exit a parse tree produced by the {@code Result_pharse_non_empty}
	 * labeled alternative in {@link CountingResultParser#result_pharse}.
	 * @param ctx the parse tree
	 */
	void exitResult_pharse_non_empty(CountingResultParser.Result_pharse_non_emptyContext ctx);
	/**
	 * Enter a parse tree produced by the {@code Result_pharse_empty}
	 * labeled alternative in {@link CountingResultParser#result_pharse}.
	 * @param ctx the parse tree
	 */
	void enterResult_pharse_empty(CountingResultParser.Result_pharse_emptyContext ctx);
	/**
	 * Exit a parse tree produced by the {@code Result_pharse_empty}
	 * labeled alternative in {@link CountingResultParser#result_pharse}.
	 * @param ctx the parse tree
	 */
	void exitResult_pharse_empty(CountingResultParser.Result_pharse_emptyContext ctx);
	/**
	 * Enter a parse tree produced by {@link CountingResultParser#result_options}.
	 * @param ctx the parse tree
	 */
	void enterResult_options(CountingResultParser.Result_optionsContext ctx);
	/**
	 * Exit a parse tree produced by {@link CountingResultParser#result_options}.
	 * @param ctx the parse tree
	 */
	void exitResult_options(CountingResultParser.Result_optionsContext ctx);
	/**
	 * Enter a parse tree produced by the {@code Result_case_with_condition}
	 * labeled alternative in {@link CountingResultParser#result_case}.
	 * @param ctx the parse tree
	 */
	void enterResult_case_with_condition(CountingResultParser.Result_case_with_conditionContext ctx);
	/**
	 * Exit a parse tree produced by the {@code Result_case_with_condition}
	 * labeled alternative in {@link CountingResultParser#result_case}.
	 * @param ctx the parse tree
	 */
	void exitResult_case_with_condition(CountingResultParser.Result_case_with_conditionContext ctx);
	/**
	 * Enter a parse tree produced by the {@code Result_case_no_condition}
	 * labeled alternative in {@link CountingResultParser#result_case}.
	 * @param ctx the parse tree
	 */
	void enterResult_case_no_condition(CountingResultParser.Result_case_no_conditionContext ctx);
	/**
	 * Exit a parse tree produced by the {@code Result_case_no_condition}
	 * labeled alternative in {@link CountingResultParser#result_case}.
	 * @param ctx the parse tree
	 */
	void exitResult_case_no_condition(CountingResultParser.Result_case_no_conditionContext ctx);
	/**
	 * Enter a parse tree produced by {@link CountingResultParser#result_value}.
	 * @param ctx the parse tree
	 */
	void enterResult_value(CountingResultParser.Result_valueContext ctx);
	/**
	 * Exit a parse tree produced by {@link CountingResultParser#result_value}.
	 * @param ctx the parse tree
	 */
	void exitResult_value(CountingResultParser.Result_valueContext ctx);
	/**
	 * Enter a parse tree produced by {@link CountingResultParser#result_condition}.
	 * @param ctx the parse tree
	 */
	void enterResult_condition(CountingResultParser.Result_conditionContext ctx);
	/**
	 * Exit a parse tree produced by {@link CountingResultParser#result_condition}.
	 * @param ctx the parse tree
	 */
	void exitResult_condition(CountingResultParser.Result_conditionContext ctx);
	/**
	 * Enter a parse tree produced by the {@code Arith_expr_Minus}
	 * labeled alternative in {@link CountingResultParser#arith_expr}.
	 * @param ctx the parse tree
	 */
	void enterArith_expr_Minus(CountingResultParser.Arith_expr_MinusContext ctx);
	/**
	 * Exit a parse tree produced by the {@code Arith_expr_Minus}
	 * labeled alternative in {@link CountingResultParser#arith_expr}.
	 * @param ctx the parse tree
	 */
	void exitArith_expr_Minus(CountingResultParser.Arith_expr_MinusContext ctx);
	/**
	 * Enter a parse tree produced by the {@code Arith_expr_Arith_term}
	 * labeled alternative in {@link CountingResultParser#arith_expr}.
	 * @param ctx the parse tree
	 */
	void enterArith_expr_Arith_term(CountingResultParser.Arith_expr_Arith_termContext ctx);
	/**
	 * Exit a parse tree produced by the {@code Arith_expr_Arith_term}
	 * labeled alternative in {@link CountingResultParser#arith_expr}.
	 * @param ctx the parse tree
	 */
	void exitArith_expr_Arith_term(CountingResultParser.Arith_expr_Arith_termContext ctx);
	/**
	 * Enter a parse tree produced by the {@code Arith_expr_Plus}
	 * labeled alternative in {@link CountingResultParser#arith_expr}.
	 * @param ctx the parse tree
	 */
	void enterArith_expr_Plus(CountingResultParser.Arith_expr_PlusContext ctx);
	/**
	 * Exit a parse tree produced by the {@code Arith_expr_Plus}
	 * labeled alternative in {@link CountingResultParser#arith_expr}.
	 * @param ctx the parse tree
	 */
	void exitArith_expr_Plus(CountingResultParser.Arith_expr_PlusContext ctx);
	/**
	 * Enter a parse tree produced by the {@code Minus_Arith_expr}
	 * labeled alternative in {@link CountingResultParser#arith_expr}.
	 * @param ctx the parse tree
	 */
	void enterMinus_Arith_expr(CountingResultParser.Minus_Arith_exprContext ctx);
	/**
	 * Exit a parse tree produced by the {@code Minus_Arith_expr}
	 * labeled alternative in {@link CountingResultParser#arith_expr}.
	 * @param ctx the parse tree
	 */
	void exitMinus_Arith_expr(CountingResultParser.Minus_Arith_exprContext ctx);
	/**
	 * Enter a parse tree produced by the {@code Arith_term_factor}
	 * labeled alternative in {@link CountingResultParser#arith_term}.
	 * @param ctx the parse tree
	 */
	void enterArith_term_factor(CountingResultParser.Arith_term_factorContext ctx);
	/**
	 * Exit a parse tree produced by the {@code Arith_term_factor}
	 * labeled alternative in {@link CountingResultParser#arith_term}.
	 * @param ctx the parse tree
	 */
	void exitArith_term_factor(CountingResultParser.Arith_term_factorContext ctx);
	/**
	 * Enter a parse tree produced by the {@code Arith_term_Div}
	 * labeled alternative in {@link CountingResultParser#arith_term}.
	 * @param ctx the parse tree
	 */
	void enterArith_term_Div(CountingResultParser.Arith_term_DivContext ctx);
	/**
	 * Exit a parse tree produced by the {@code Arith_term_Div}
	 * labeled alternative in {@link CountingResultParser#arith_term}.
	 * @param ctx the parse tree
	 */
	void exitArith_term_Div(CountingResultParser.Arith_term_DivContext ctx);
	/**
	 * Enter a parse tree produced by the {@code Arith_term_Mult}
	 * labeled alternative in {@link CountingResultParser#arith_term}.
	 * @param ctx the parse tree
	 */
	void enterArith_term_Mult(CountingResultParser.Arith_term_MultContext ctx);
	/**
	 * Exit a parse tree produced by the {@code Arith_term_Mult}
	 * labeled alternative in {@link CountingResultParser#arith_term}.
	 * @param ctx the parse tree
	 */
	void exitArith_term_Mult(CountingResultParser.Arith_term_MultContext ctx);
	/**
	 * Enter a parse tree produced by the {@code Factor_Power}
	 * labeled alternative in {@link CountingResultParser#factor}.
	 * @param ctx the parse tree
	 */
	void enterFactor_Power(CountingResultParser.Factor_PowerContext ctx);
	/**
	 * Exit a parse tree produced by the {@code Factor_Power}
	 * labeled alternative in {@link CountingResultParser#factor}.
	 * @param ctx the parse tree
	 */
	void exitFactor_Power(CountingResultParser.Factor_PowerContext ctx);
	/**
	 * Enter a parse tree produced by the {@code Factor_Round}
	 * labeled alternative in {@link CountingResultParser#factor}.
	 * @param ctx the parse tree
	 */
	void enterFactor_Round(CountingResultParser.Factor_RoundContext ctx);
	/**
	 * Exit a parse tree produced by the {@code Factor_Round}
	 * labeled alternative in {@link CountingResultParser#factor}.
	 * @param ctx the parse tree
	 */
	void exitFactor_Round(CountingResultParser.Factor_RoundContext ctx);
	/**
	 * Enter a parse tree produced by the {@code INT}
	 * labeled alternative in {@link CountingResultParser#factor}.
	 * @param ctx the parse tree
	 */
	void enterINT(CountingResultParser.INTContext ctx);
	/**
	 * Exit a parse tree produced by the {@code INT}
	 * labeled alternative in {@link CountingResultParser#factor}.
	 * @param ctx the parse tree
	 */
	void exitINT(CountingResultParser.INTContext ctx);
	/**
	 * Enter a parse tree produced by the {@code Factor_floor}
	 * labeled alternative in {@link CountingResultParser#factor}.
	 * @param ctx the parse tree
	 */
	void enterFactor_floor(CountingResultParser.Factor_floorContext ctx);
	/**
	 * Exit a parse tree produced by the {@code Factor_floor}
	 * labeled alternative in {@link CountingResultParser#factor}.
	 * @param ctx the parse tree
	 */
	void exitFactor_floor(CountingResultParser.Factor_floorContext ctx);
	/**
	 * Enter a parse tree produced by the {@code Factor_Fraction}
	 * labeled alternative in {@link CountingResultParser#factor}.
	 * @param ctx the parse tree
	 */
	void enterFactor_Fraction(CountingResultParser.Factor_FractionContext ctx);
	/**
	 * Exit a parse tree produced by the {@code Factor_Fraction}
	 * labeled alternative in {@link CountingResultParser#factor}.
	 * @param ctx the parse tree
	 */
	void exitFactor_Fraction(CountingResultParser.Factor_FractionContext ctx);
	/**
	 * Enter a parse tree produced by the {@code Factor_Parentheses_Arith_Expr}
	 * labeled alternative in {@link CountingResultParser#factor}.
	 * @param ctx the parse tree
	 */
	void enterFactor_Parentheses_Arith_Expr(CountingResultParser.Factor_Parentheses_Arith_ExprContext ctx);
	/**
	 * Exit a parse tree produced by the {@code Factor_Parentheses_Arith_Expr}
	 * labeled alternative in {@link CountingResultParser#factor}.
	 * @param ctx the parse tree
	 */
	void exitFactor_Parentheses_Arith_Expr(CountingResultParser.Factor_Parentheses_Arith_ExprContext ctx);
	/**
	 * Enter a parse tree produced by the {@code Factor_num_mul_param}
	 * labeled alternative in {@link CountingResultParser#factor}.
	 * @param ctx the parse tree
	 */
	void enterFactor_num_mul_param(CountingResultParser.Factor_num_mul_paramContext ctx);
	/**
	 * Exit a parse tree produced by the {@code Factor_num_mul_param}
	 * labeled alternative in {@link CountingResultParser#factor}.
	 * @param ctx the parse tree
	 */
	void exitFactor_num_mul_param(CountingResultParser.Factor_num_mul_paramContext ctx);
	/**
	 * Enter a parse tree produced by the {@code Factor_param}
	 * labeled alternative in {@link CountingResultParser#factor}.
	 * @param ctx the parse tree
	 */
	void enterFactor_param(CountingResultParser.Factor_paramContext ctx);
	/**
	 * Exit a parse tree produced by the {@code Factor_param}
	 * labeled alternative in {@link CountingResultParser#factor}.
	 * @param ctx the parse tree
	 */
	void exitFactor_param(CountingResultParser.Factor_paramContext ctx);
	/**
	 * Enter a parse tree produced by {@link CountingResultParser#int_num}.
	 * @param ctx the parse tree
	 */
	void enterInt_num(CountingResultParser.Int_numContext ctx);
	/**
	 * Exit a parse tree produced by {@link CountingResultParser#int_num}.
	 * @param ctx the parse tree
	 */
	void exitInt_num(CountingResultParser.Int_numContext ctx);
	/**
	 * Enter a parse tree produced by the {@code Logic_expr_OR}
	 * labeled alternative in {@link CountingResultParser#logic_expr}.
	 * @param ctx the parse tree
	 */
	void enterLogic_expr_OR(CountingResultParser.Logic_expr_ORContext ctx);
	/**
	 * Exit a parse tree produced by the {@code Logic_expr_OR}
	 * labeled alternative in {@link CountingResultParser#logic_expr}.
	 * @param ctx the parse tree
	 */
	void exitLogic_expr_OR(CountingResultParser.Logic_expr_ORContext ctx);
	/**
	 * Enter a parse tree produced by the {@code Logic_expr_Exist}
	 * labeled alternative in {@link CountingResultParser#logic_expr}.
	 * @param ctx the parse tree
	 */
	void enterLogic_expr_Exist(CountingResultParser.Logic_expr_ExistContext ctx);
	/**
	 * Exit a parse tree produced by the {@code Logic_expr_Exist}
	 * labeled alternative in {@link CountingResultParser#logic_expr}.
	 * @param ctx the parse tree
	 */
	void exitLogic_expr_Exist(CountingResultParser.Logic_expr_ExistContext ctx);
	/**
	 * Enter a parse tree produced by the {@code Logic_expr_logic_term}
	 * labeled alternative in {@link CountingResultParser#logic_expr}.
	 * @param ctx the parse tree
	 */
	void enterLogic_expr_logic_term(CountingResultParser.Logic_expr_logic_termContext ctx);
	/**
	 * Exit a parse tree produced by the {@code Logic_expr_logic_term}
	 * labeled alternative in {@link CountingResultParser#logic_expr}.
	 * @param ctx the parse tree
	 */
	void exitLogic_expr_logic_term(CountingResultParser.Logic_expr_logic_termContext ctx);
	/**
	 * Enter a parse tree produced by {@link CountingResultParser#exists_expr}.
	 * @param ctx the parse tree
	 */
	void enterExists_expr(CountingResultParser.Exists_exprContext ctx);
	/**
	 * Exit a parse tree produced by {@link CountingResultParser#exists_expr}.
	 * @param ctx the parse tree
	 */
	void exitExists_expr(CountingResultParser.Exists_exprContext ctx);
	/**
	 * Enter a parse tree produced by the {@code Qvar_expr_param}
	 * labeled alternative in {@link CountingResultParser#qvar_expr}.
	 * @param ctx the parse tree
	 */
	void enterQvar_expr_param(CountingResultParser.Qvar_expr_paramContext ctx);
	/**
	 * Exit a parse tree produced by the {@code Qvar_expr_param}
	 * labeled alternative in {@link CountingResultParser#qvar_expr}.
	 * @param ctx the parse tree
	 */
	void exitQvar_expr_param(CountingResultParser.Qvar_expr_paramContext ctx);
	/**
	 * Enter a parse tree produced by the {@code Qvar_expr_param_equals_expr}
	 * labeled alternative in {@link CountingResultParser#qvar_expr}.
	 * @param ctx the parse tree
	 */
	void enterQvar_expr_param_equals_expr(CountingResultParser.Qvar_expr_param_equals_exprContext ctx);
	/**
	 * Exit a parse tree produced by the {@code Qvar_expr_param_equals_expr}
	 * labeled alternative in {@link CountingResultParser#qvar_expr}.
	 * @param ctx the parse tree
	 */
	void exitQvar_expr_param_equals_expr(CountingResultParser.Qvar_expr_param_equals_exprContext ctx);
	/**
	 * Enter a parse tree produced by the {@code Logic_term_logic_factor}
	 * labeled alternative in {@link CountingResultParser#logic_term}.
	 * @param ctx the parse tree
	 */
	void enterLogic_term_logic_factor(CountingResultParser.Logic_term_logic_factorContext ctx);
	/**
	 * Exit a parse tree produced by the {@code Logic_term_logic_factor}
	 * labeled alternative in {@link CountingResultParser#logic_term}.
	 * @param ctx the parse tree
	 */
	void exitLogic_term_logic_factor(CountingResultParser.Logic_term_logic_factorContext ctx);
	/**
	 * Enter a parse tree produced by the {@code Logic_term_AND}
	 * labeled alternative in {@link CountingResultParser#logic_term}.
	 * @param ctx the parse tree
	 */
	void enterLogic_term_AND(CountingResultParser.Logic_term_ANDContext ctx);
	/**
	 * Exit a parse tree produced by the {@code Logic_term_AND}
	 * labeled alternative in {@link CountingResultParser#logic_term}.
	 * @param ctx the parse tree
	 */
	void exitLogic_term_AND(CountingResultParser.Logic_term_ANDContext ctx);
	/**
	 * Enter a parse tree produced by the {@code Logic_factor_compare}
	 * labeled alternative in {@link CountingResultParser#logic_factor}.
	 * @param ctx the parse tree
	 */
	void enterLogic_factor_compare(CountingResultParser.Logic_factor_compareContext ctx);
	/**
	 * Exit a parse tree produced by the {@code Logic_factor_compare}
	 * labeled alternative in {@link CountingResultParser#logic_factor}.
	 * @param ctx the parse tree
	 */
	void exitLogic_factor_compare(CountingResultParser.Logic_factor_compareContext ctx);
	/**
	 * Enter a parse tree produced by the {@code Logic_factor_Parentheses_Logic_Expr}
	 * labeled alternative in {@link CountingResultParser#logic_factor}.
	 * @param ctx the parse tree
	 */
	void enterLogic_factor_Parentheses_Logic_Expr(CountingResultParser.Logic_factor_Parentheses_Logic_ExprContext ctx);
	/**
	 * Exit a parse tree produced by the {@code Logic_factor_Parentheses_Logic_Expr}
	 * labeled alternative in {@link CountingResultParser#logic_factor}.
	 * @param ctx the parse tree
	 */
	void exitLogic_factor_Parentheses_Logic_Expr(CountingResultParser.Logic_factor_Parentheses_Logic_ExprContext ctx);
	/**
	 * Enter a parse tree produced by the {@code Compare_term_Greater}
	 * labeled alternative in {@link CountingResultParser#compare_term}.
	 * @param ctx the parse tree
	 */
	void enterCompare_term_Greater(CountingResultParser.Compare_term_GreaterContext ctx);
	/**
	 * Exit a parse tree produced by the {@code Compare_term_Greater}
	 * labeled alternative in {@link CountingResultParser#compare_term}.
	 * @param ctx the parse tree
	 */
	void exitCompare_term_Greater(CountingResultParser.Compare_term_GreaterContext ctx);
	/**
	 * Enter a parse tree produced by the {@code Compare_term_Greater_or_equal}
	 * labeled alternative in {@link CountingResultParser#compare_term}.
	 * @param ctx the parse tree
	 */
	void enterCompare_term_Greater_or_equal(CountingResultParser.Compare_term_Greater_or_equalContext ctx);
	/**
	 * Exit a parse tree produced by the {@code Compare_term_Greater_or_equal}
	 * labeled alternative in {@link CountingResultParser#compare_term}.
	 * @param ctx the parse tree
	 */
	void exitCompare_term_Greater_or_equal(CountingResultParser.Compare_term_Greater_or_equalContext ctx);
	/**
	 * Enter a parse tree produced by the {@code Compare_term_Less}
	 * labeled alternative in {@link CountingResultParser#compare_term}.
	 * @param ctx the parse tree
	 */
	void enterCompare_term_Less(CountingResultParser.Compare_term_LessContext ctx);
	/**
	 * Exit a parse tree produced by the {@code Compare_term_Less}
	 * labeled alternative in {@link CountingResultParser#compare_term}.
	 * @param ctx the parse tree
	 */
	void exitCompare_term_Less(CountingResultParser.Compare_term_LessContext ctx);
	/**
	 * Enter a parse tree produced by the {@code Compare_term_Less_or_equal}
	 * labeled alternative in {@link CountingResultParser#compare_term}.
	 * @param ctx the parse tree
	 */
	void enterCompare_term_Less_or_equal(CountingResultParser.Compare_term_Less_or_equalContext ctx);
	/**
	 * Exit a parse tree produced by the {@code Compare_term_Less_or_equal}
	 * labeled alternative in {@link CountingResultParser#compare_term}.
	 * @param ctx the parse tree
	 */
	void exitCompare_term_Less_or_equal(CountingResultParser.Compare_term_Less_or_equalContext ctx);
	/**
	 * Enter a parse tree produced by the {@code Compare_term_Equal}
	 * labeled alternative in {@link CountingResultParser#compare_term}.
	 * @param ctx the parse tree
	 */
	void enterCompare_term_Equal(CountingResultParser.Compare_term_EqualContext ctx);
	/**
	 * Exit a parse tree produced by the {@code Compare_term_Equal}
	 * labeled alternative in {@link CountingResultParser#compare_term}.
	 * @param ctx the parse tree
	 */
	void exitCompare_term_Equal(CountingResultParser.Compare_term_EqualContext ctx);
}