// Generated from /home/huy/Working/GIT/key/projects/exploitGeneration/src/exploitGeneration/deployment/../src/de/tud/exploitgen/findsecret/libinterface/gensrc/CountingResult.g4 by ANTLR 4.5.1

package de.tud.exploitgen.findsecret.libinterface.gensrc;

import de.uka.ilkd.key.logic.Term;

import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class CountingResultParser extends Parser {
	static { RuntimeMetaData.checkVersion("4.5.1", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, Neg_num=12, Pos_num=13, FLOOR=14, OR=15, AND=16, INFINITY=17, 
		EXISTS=18, ZERO=19, POWER=20, NONZERODIGIT=21, Param=22, LETTER=23, WS=24, 
		GT=25, GE=26, LT=27, LE=28, EQ=29, MULT=30, DIV=31, PLUS=32, MINUS=33;
	public static final int
		RULE_result = 0, RULE_param_set = 1, RULE_result_pharse = 2, RULE_result_options = 3, 
		RULE_result_case = 4, RULE_result_value = 5, RULE_result_condition = 6, 
		RULE_arith_expr = 7, RULE_arith_term = 8, RULE_factor = 9, RULE_int_num = 10, 
		RULE_logic_expr = 11, RULE_exists_expr = 12, RULE_qvar_expr = 13, RULE_logic_term = 14, 
		RULE_logic_factor = 15, RULE_compare_term = 16;
	public static final String[] ruleNames = {
		"result", "param_set", "result_pharse", "result_options", "result_case", 
		"result_value", "result_condition", "arith_expr", "arith_term", "factor", 
		"int_num", "logic_expr", "exists_expr", "qvar_expr", "logic_term", "logic_factor", 
		"compare_term"
	};

	private static final String[] _LITERAL_NAMES = {
		null, "'->'", "'[]'", "'['", "','", "']'", "'{'", "'}'", "';'", "':'", 
		"'('", "')'", null, null, "'floor'", "'or'", "'and'", "'infty'", "'exists'", 
		"'0'", "'^'", null, null, null, null, "'>'", "'>='", "'<'", "'<='", "'='", 
		"'*'", "'/'", "'+'", "'-'"
	};
	private static final String[] _SYMBOLIC_NAMES = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		"Neg_num", "Pos_num", "FLOOR", "OR", "AND", "INFINITY", "EXISTS", "ZERO", 
		"POWER", "NONZERODIGIT", "Param", "LETTER", "WS", "GT", "GE", "LT", "LE", 
		"EQ", "MULT", "DIV", "PLUS", "MINUS"
	};
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}

	@Override
	public String getGrammarFileName() { return "CountingResult.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }

	public CountingResultParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}
	public static class ResultContext extends ParserRuleContext {
		public Param_setContext param_set() {
			return getRuleContext(Param_setContext.class,0);
		}
		public List<TerminalNode> WS() { return getTokens(CountingResultParser.WS); }
		public TerminalNode WS(int i) {
			return getToken(CountingResultParser.WS, i);
		}
		public Result_pharseContext result_pharse() {
			return getRuleContext(Result_pharseContext.class,0);
		}
		public ResultContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_result; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).enterResult(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).exitResult(this);
		}
	}

	public final ResultContext result() throws RecognitionException {
		ResultContext _localctx = new ResultContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_result);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(34);
			param_set();
			setState(35);
			match(WS);
			setState(36);
			match(T__0);
			setState(37);
			match(WS);
			setState(38);
			result_pharse();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Param_setContext extends ParserRuleContext {
		public Param_setContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_param_set; }
	 
		public Param_setContext() { }
		public void copyFrom(Param_setContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class Param_set_non_emptyContext extends Param_setContext {
		public List<TerminalNode> Param() { return getTokens(CountingResultParser.Param); }
		public TerminalNode Param(int i) {
			return getToken(CountingResultParser.Param, i);
		}
		public List<TerminalNode> WS() { return getTokens(CountingResultParser.WS); }
		public TerminalNode WS(int i) {
			return getToken(CountingResultParser.WS, i);
		}
		public Param_set_non_emptyContext(Param_setContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).enterParam_set_non_empty(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).exitParam_set_non_empty(this);
		}
	}
	public static class Param_set_EmptyContext extends Param_setContext {
		public Param_set_EmptyContext(Param_setContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).enterParam_set_Empty(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).exitParam_set_Empty(this);
		}
	}

	public final Param_setContext param_set() throws RecognitionException {
		Param_setContext _localctx = new Param_setContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_param_set);
		int _la;
		try {
			setState(52);
			switch (_input.LA(1)) {
			case T__1:
				_localctx = new Param_set_EmptyContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(40);
				match(T__1);
				}
				break;
			case T__2:
				_localctx = new Param_set_non_emptyContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(41);
				match(T__2);
				setState(42);
				match(Param);
				setState(48);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==T__3) {
					{
					{
					setState(43);
					match(T__3);
					setState(44);
					match(WS);
					setState(45);
					match(Param);
					}
					}
					setState(50);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(51);
				match(T__4);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Result_pharseContext extends ParserRuleContext {
		public List<TerminalNode> WS() { return getTokens(CountingResultParser.WS); }
		public TerminalNode WS(int i) {
			return getToken(CountingResultParser.WS, i);
		}
		public Result_optionsContext result_options() {
			return getRuleContext(Result_optionsContext.class,0);
		}
		public Result_pharseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_result_pharse; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).enterResult_pharse(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).exitResult_pharse(this);
		}
	}

	public final Result_pharseContext result_pharse() throws RecognitionException {
		Result_pharseContext _localctx = new Result_pharseContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_result_pharse);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(54);
			match(T__5);
			setState(55);
			match(WS);
			setState(56);
			result_options();
			setState(57);
			match(WS);
			setState(58);
			match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Result_optionsContext extends ParserRuleContext {
		public List<Result_caseContext> result_case() {
			return getRuleContexts(Result_caseContext.class);
		}
		public Result_caseContext result_case(int i) {
			return getRuleContext(Result_caseContext.class,i);
		}
		public List<TerminalNode> WS() { return getTokens(CountingResultParser.WS); }
		public TerminalNode WS(int i) {
			return getToken(CountingResultParser.WS, i);
		}
		public Result_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_result_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).enterResult_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).exitResult_options(this);
		}
	}

	public final Result_optionsContext result_options() throws RecognitionException {
		Result_optionsContext _localctx = new Result_optionsContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_result_options);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(60);
			result_case();
			setState(66);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==T__7) {
				{
				{
				setState(61);
				match(T__7);
				setState(62);
				match(WS);
				setState(63);
				result_case();
				}
				}
				setState(68);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Result_caseContext extends ParserRuleContext {
		public Result_caseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_result_case; }
	 
		public Result_caseContext() { }
		public void copyFrom(Result_caseContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class Result_case_with_conditionContext extends Result_caseContext {
		public Result_valueContext result_value() {
			return getRuleContext(Result_valueContext.class,0);
		}
		public List<TerminalNode> WS() { return getTokens(CountingResultParser.WS); }
		public TerminalNode WS(int i) {
			return getToken(CountingResultParser.WS, i);
		}
		public Result_conditionContext result_condition() {
			return getRuleContext(Result_conditionContext.class,0);
		}
		public Result_case_with_conditionContext(Result_caseContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).enterResult_case_with_condition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).exitResult_case_with_condition(this);
		}
	}
	public static class Result_case_no_conditionContext extends Result_caseContext {
		public Result_valueContext result_value() {
			return getRuleContext(Result_valueContext.class,0);
		}
		public Result_case_no_conditionContext(Result_caseContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).enterResult_case_no_condition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).exitResult_case_no_condition(this);
		}
	}

	public final Result_caseContext result_case() throws RecognitionException {
		Result_caseContext _localctx = new Result_caseContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_result_case);
		try {
			setState(76);
			switch ( getInterpreter().adaptivePredict(_input,3,_ctx) ) {
			case 1:
				_localctx = new Result_case_with_conditionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(69);
				result_value();
				setState(70);
				match(WS);
				setState(71);
				match(T__8);
				setState(72);
				match(WS);
				setState(73);
				result_condition();
				}
				break;
			case 2:
				_localctx = new Result_case_no_conditionContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(75);
				result_value();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Result_valueContext extends ParserRuleContext {
		public Arith_exprContext arith_expr() {
			return getRuleContext(Arith_exprContext.class,0);
		}
		public TerminalNode INFINITY() { return getToken(CountingResultParser.INFINITY, 0); }
		public Result_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_result_value; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).enterResult_value(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).exitResult_value(this);
		}
	}

	public final Result_valueContext result_value() throws RecognitionException {
		Result_valueContext _localctx = new Result_valueContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_result_value);
		try {
			setState(80);
			switch (_input.LA(1)) {
			case T__2:
			case T__9:
			case Neg_num:
			case Pos_num:
			case FLOOR:
			case ZERO:
			case Param:
				enterOuterAlt(_localctx, 1);
				{
				setState(78);
				arith_expr(0);
				}
				break;
			case INFINITY:
				enterOuterAlt(_localctx, 2);
				{
				setState(79);
				match(INFINITY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Result_conditionContext extends ParserRuleContext {
		public Logic_exprContext logic_expr() {
			return getRuleContext(Logic_exprContext.class,0);
		}
		public Result_conditionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_result_condition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).enterResult_condition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).exitResult_condition(this);
		}
	}

	public final Result_conditionContext result_condition() throws RecognitionException {
		Result_conditionContext _localctx = new Result_conditionContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_result_condition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(82);
			logic_expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Arith_exprContext extends ParserRuleContext {
		public Arith_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_arith_expr; }
	 
		public Arith_exprContext() { }
		public void copyFrom(Arith_exprContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class Arith_expr_MinusContext extends Arith_exprContext {
		public List<Arith_exprContext> arith_expr() {
			return getRuleContexts(Arith_exprContext.class);
		}
		public Arith_exprContext arith_expr(int i) {
			return getRuleContext(Arith_exprContext.class,i);
		}
		public List<TerminalNode> WS() { return getTokens(CountingResultParser.WS); }
		public TerminalNode WS(int i) {
			return getToken(CountingResultParser.WS, i);
		}
		public TerminalNode MINUS() { return getToken(CountingResultParser.MINUS, 0); }
		public Arith_expr_MinusContext(Arith_exprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).enterArith_expr_Minus(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).exitArith_expr_Minus(this);
		}
	}
	public static class Arith_expr_Arith_termContext extends Arith_exprContext {
		public Arith_termContext arith_term() {
			return getRuleContext(Arith_termContext.class,0);
		}
		public Arith_expr_Arith_termContext(Arith_exprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).enterArith_expr_Arith_term(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).exitArith_expr_Arith_term(this);
		}
	}
	public static class Arith_expr_PlusContext extends Arith_exprContext {
		public List<Arith_exprContext> arith_expr() {
			return getRuleContexts(Arith_exprContext.class);
		}
		public Arith_exprContext arith_expr(int i) {
			return getRuleContext(Arith_exprContext.class,i);
		}
		public List<TerminalNode> WS() { return getTokens(CountingResultParser.WS); }
		public TerminalNode WS(int i) {
			return getToken(CountingResultParser.WS, i);
		}
		public TerminalNode PLUS() { return getToken(CountingResultParser.PLUS, 0); }
		public Arith_expr_PlusContext(Arith_exprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).enterArith_expr_Plus(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).exitArith_expr_Plus(this);
		}
	}

	public final Arith_exprContext arith_expr() throws RecognitionException {
		return arith_expr(0);
	}

	private Arith_exprContext arith_expr(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Arith_exprContext _localctx = new Arith_exprContext(_ctx, _parentState);
		Arith_exprContext _prevctx = _localctx;
		int _startState = 14;
		enterRecursionRule(_localctx, 14, RULE_arith_expr, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new Arith_expr_Arith_termContext(_localctx);
			_ctx = _localctx;
			_prevctx = _localctx;

			setState(85);
			arith_term(0);
			}
			_ctx.stop = _input.LT(-1);
			setState(99);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,6,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(97);
					switch ( getInterpreter().adaptivePredict(_input,5,_ctx) ) {
					case 1:
						{
						_localctx = new Arith_expr_PlusContext(new Arith_exprContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_arith_expr);
						setState(87);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(88);
						match(WS);
						setState(89);
						match(PLUS);
						setState(90);
						match(WS);
						setState(91);
						arith_expr(4);
						}
						break;
					case 2:
						{
						_localctx = new Arith_expr_MinusContext(new Arith_exprContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_arith_expr);
						setState(92);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(93);
						match(WS);
						setState(94);
						match(MINUS);
						setState(95);
						match(WS);
						setState(96);
						arith_expr(3);
						}
						break;
					}
					} 
				}
				setState(101);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,6,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Arith_termContext extends ParserRuleContext {
		public Arith_termContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_arith_term; }
	 
		public Arith_termContext() { }
		public void copyFrom(Arith_termContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class Arith_term_factorContext extends Arith_termContext {
		public FactorContext factor() {
			return getRuleContext(FactorContext.class,0);
		}
		public Arith_term_factorContext(Arith_termContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).enterArith_term_factor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).exitArith_term_factor(this);
		}
	}
	public static class Arith_term_DivContext extends Arith_termContext {
		public List<Arith_termContext> arith_term() {
			return getRuleContexts(Arith_termContext.class);
		}
		public Arith_termContext arith_term(int i) {
			return getRuleContext(Arith_termContext.class,i);
		}
		public List<TerminalNode> WS() { return getTokens(CountingResultParser.WS); }
		public TerminalNode WS(int i) {
			return getToken(CountingResultParser.WS, i);
		}
		public TerminalNode DIV() { return getToken(CountingResultParser.DIV, 0); }
		public Arith_term_DivContext(Arith_termContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).enterArith_term_Div(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).exitArith_term_Div(this);
		}
	}
	public static class Arith_term_MultContext extends Arith_termContext {
		public List<Arith_termContext> arith_term() {
			return getRuleContexts(Arith_termContext.class);
		}
		public Arith_termContext arith_term(int i) {
			return getRuleContext(Arith_termContext.class,i);
		}
		public List<TerminalNode> WS() { return getTokens(CountingResultParser.WS); }
		public TerminalNode WS(int i) {
			return getToken(CountingResultParser.WS, i);
		}
		public TerminalNode MULT() { return getToken(CountingResultParser.MULT, 0); }
		public Arith_term_MultContext(Arith_termContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).enterArith_term_Mult(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).exitArith_term_Mult(this);
		}
	}

	public final Arith_termContext arith_term() throws RecognitionException {
		return arith_term(0);
	}

	private Arith_termContext arith_term(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Arith_termContext _localctx = new Arith_termContext(_ctx, _parentState);
		Arith_termContext _prevctx = _localctx;
		int _startState = 16;
		enterRecursionRule(_localctx, 16, RULE_arith_term, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new Arith_term_factorContext(_localctx);
			_ctx = _localctx;
			_prevctx = _localctx;

			setState(103);
			factor(0);
			}
			_ctx.stop = _input.LT(-1);
			setState(117);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,8,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(115);
					switch ( getInterpreter().adaptivePredict(_input,7,_ctx) ) {
					case 1:
						{
						_localctx = new Arith_term_MultContext(new Arith_termContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_arith_term);
						setState(105);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(106);
						match(WS);
						setState(107);
						match(MULT);
						setState(108);
						match(WS);
						setState(109);
						arith_term(4);
						}
						break;
					case 2:
						{
						_localctx = new Arith_term_DivContext(new Arith_termContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_arith_term);
						setState(110);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(111);
						match(WS);
						setState(112);
						match(DIV);
						setState(113);
						match(WS);
						setState(114);
						arith_term(3);
						}
						break;
					}
					} 
				}
				setState(119);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,8,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class FactorContext extends ParserRuleContext {
		public FactorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_factor; }
	 
		public FactorContext() { }
		public void copyFrom(FactorContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class Factor_PowerContext extends FactorContext {
		public List<FactorContext> factor() {
			return getRuleContexts(FactorContext.class);
		}
		public FactorContext factor(int i) {
			return getRuleContext(FactorContext.class,i);
		}
		public TerminalNode POWER() { return getToken(CountingResultParser.POWER, 0); }
		public Factor_PowerContext(FactorContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).enterFactor_Power(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).exitFactor_Power(this);
		}
	}
	public static class Factor_RoundContext extends FactorContext {
		public FactorContext factor() {
			return getRuleContext(FactorContext.class,0);
		}
		public Factor_RoundContext(FactorContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).enterFactor_Round(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).exitFactor_Round(this);
		}
	}
	public static class INTContext extends FactorContext {
		public Int_numContext int_num() {
			return getRuleContext(Int_numContext.class,0);
		}
		public INTContext(FactorContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).enterINT(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).exitINT(this);
		}
	}
	public static class Factor_floorContext extends FactorContext {
		public TerminalNode FLOOR() { return getToken(CountingResultParser.FLOOR, 0); }
		public FactorContext factor() {
			return getRuleContext(FactorContext.class,0);
		}
		public Factor_floorContext(FactorContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).enterFactor_floor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).exitFactor_floor(this);
		}
	}
	public static class Factor_FractionContext extends FactorContext {
		public List<FactorContext> factor() {
			return getRuleContexts(FactorContext.class);
		}
		public FactorContext factor(int i) {
			return getRuleContext(FactorContext.class,i);
		}
		public TerminalNode DIV() { return getToken(CountingResultParser.DIV, 0); }
		public Factor_FractionContext(FactorContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).enterFactor_Fraction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).exitFactor_Fraction(this);
		}
	}
	public static class Factor_Parentheses_Arith_ExprContext extends FactorContext {
		public Arith_exprContext arith_expr() {
			return getRuleContext(Arith_exprContext.class,0);
		}
		public Factor_Parentheses_Arith_ExprContext(FactorContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).enterFactor_Parentheses_Arith_Expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).exitFactor_Parentheses_Arith_Expr(this);
		}
	}
	public static class Factor_num_mul_paramContext extends FactorContext {
		public Int_numContext int_num() {
			return getRuleContext(Int_numContext.class,0);
		}
		public TerminalNode Param() { return getToken(CountingResultParser.Param, 0); }
		public Factor_num_mul_paramContext(FactorContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).enterFactor_num_mul_param(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).exitFactor_num_mul_param(this);
		}
	}
	public static class Factor_paramContext extends FactorContext {
		public TerminalNode Param() { return getToken(CountingResultParser.Param, 0); }
		public Factor_paramContext(FactorContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).enterFactor_param(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).exitFactor_param(this);
		}
	}

	public final FactorContext factor() throws RecognitionException {
		return factor(0);
	}

	private FactorContext factor(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		FactorContext _localctx = new FactorContext(_ctx, _parentState);
		FactorContext _prevctx = _localctx;
		int _startState = 18;
		enterRecursionRule(_localctx, 18, RULE_factor, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(139);
			switch ( getInterpreter().adaptivePredict(_input,9,_ctx) ) {
			case 1:
				{
				_localctx = new INTContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				setState(121);
				int_num();
				}
				break;
			case 2:
				{
				_localctx = new Factor_RoundContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(122);
				match(T__2);
				setState(123);
				factor(0);
				setState(124);
				match(T__4);
				}
				break;
			case 3:
				{
				_localctx = new Factor_paramContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(126);
				match(Param);
				}
				break;
			case 4:
				{
				_localctx = new Factor_num_mul_paramContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(127);
				int_num();
				setState(128);
				match(Param);
				}
				break;
			case 5:
				{
				_localctx = new Factor_Parentheses_Arith_ExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(130);
				match(T__9);
				setState(131);
				arith_expr(0);
				setState(132);
				match(T__10);
				}
				break;
			case 6:
				{
				_localctx = new Factor_floorContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(134);
				match(FLOOR);
				setState(135);
				match(T__9);
				setState(136);
				factor(0);
				setState(137);
				match(T__10);
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(149);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,11,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(147);
					switch ( getInterpreter().adaptivePredict(_input,10,_ctx) ) {
					case 1:
						{
						_localctx = new Factor_FractionContext(new FactorContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_factor);
						setState(141);
						if (!(precpred(_ctx, 7))) throw new FailedPredicateException(this, "precpred(_ctx, 7)");
						setState(142);
						match(DIV);
						setState(143);
						factor(8);
						}
						break;
					case 2:
						{
						_localctx = new Factor_PowerContext(new FactorContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_factor);
						setState(144);
						if (!(precpred(_ctx, 5))) throw new FailedPredicateException(this, "precpred(_ctx, 5)");
						setState(145);
						match(POWER);
						setState(146);
						factor(6);
						}
						break;
					}
					} 
				}
				setState(151);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,11,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Int_numContext extends ParserRuleContext {
		public TerminalNode Pos_num() { return getToken(CountingResultParser.Pos_num, 0); }
		public TerminalNode Neg_num() { return getToken(CountingResultParser.Neg_num, 0); }
		public TerminalNode ZERO() { return getToken(CountingResultParser.ZERO, 0); }
		public Int_numContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_int_num; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).enterInt_num(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).exitInt_num(this);
		}
	}

	public final Int_numContext int_num() throws RecognitionException {
		Int_numContext _localctx = new Int_numContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_int_num);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(152);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Neg_num) | (1L << Pos_num) | (1L << ZERO))) != 0)) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Logic_exprContext extends ParserRuleContext {
		public Logic_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_logic_expr; }
	 
		public Logic_exprContext() { }
		public void copyFrom(Logic_exprContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class Logic_expr_ORContext extends Logic_exprContext {
		public List<Logic_exprContext> logic_expr() {
			return getRuleContexts(Logic_exprContext.class);
		}
		public Logic_exprContext logic_expr(int i) {
			return getRuleContext(Logic_exprContext.class,i);
		}
		public List<TerminalNode> WS() { return getTokens(CountingResultParser.WS); }
		public TerminalNode WS(int i) {
			return getToken(CountingResultParser.WS, i);
		}
		public TerminalNode OR() { return getToken(CountingResultParser.OR, 0); }
		public Logic_expr_ORContext(Logic_exprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).enterLogic_expr_OR(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).exitLogic_expr_OR(this);
		}
	}
	public static class Logic_expr_ExistContext extends Logic_exprContext {
		public Exists_exprContext exists_expr() {
			return getRuleContext(Exists_exprContext.class,0);
		}
		public Logic_expr_ExistContext(Logic_exprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).enterLogic_expr_Exist(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).exitLogic_expr_Exist(this);
		}
	}
	public static class Logic_expr_logic_termContext extends Logic_exprContext {
		public Logic_termContext logic_term() {
			return getRuleContext(Logic_termContext.class,0);
		}
		public Logic_expr_logic_termContext(Logic_exprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).enterLogic_expr_logic_term(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).exitLogic_expr_logic_term(this);
		}
	}

	public final Logic_exprContext logic_expr() throws RecognitionException {
		return logic_expr(0);
	}

	private Logic_exprContext logic_expr(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Logic_exprContext _localctx = new Logic_exprContext(_ctx, _parentState);
		Logic_exprContext _prevctx = _localctx;
		int _startState = 22;
		enterRecursionRule(_localctx, 22, RULE_logic_expr, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(157);
			switch (_input.LA(1)) {
			case EXISTS:
				{
				_localctx = new Logic_expr_ExistContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				setState(155);
				exists_expr();
				}
				break;
			case T__2:
			case T__9:
			case Neg_num:
			case Pos_num:
			case FLOOR:
			case ZERO:
			case Param:
				{
				_localctx = new Logic_expr_logic_termContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(156);
				logic_term(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			_ctx.stop = _input.LT(-1);
			setState(166);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,13,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Logic_expr_ORContext(new Logic_exprContext(_parentctx, _parentState));
					pushNewRecursionContext(_localctx, _startState, RULE_logic_expr);
					setState(159);
					if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
					setState(160);
					match(WS);
					setState(161);
					match(OR);
					setState(162);
					match(WS);
					setState(163);
					logic_expr(4);
					}
					} 
				}
				setState(168);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,13,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Exists_exprContext extends ParserRuleContext {
		public TerminalNode EXISTS() { return getToken(CountingResultParser.EXISTS, 0); }
		public List<TerminalNode> WS() { return getTokens(CountingResultParser.WS); }
		public TerminalNode WS(int i) {
			return getToken(CountingResultParser.WS, i);
		}
		public Qvar_exprContext qvar_expr() {
			return getRuleContext(Qvar_exprContext.class,0);
		}
		public Logic_exprContext logic_expr() {
			return getRuleContext(Logic_exprContext.class,0);
		}
		public Exists_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exists_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).enterExists_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).exitExists_expr(this);
		}
	}

	public final Exists_exprContext exists_expr() throws RecognitionException {
		Exists_exprContext _localctx = new Exists_exprContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_exists_expr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(169);
			match(EXISTS);
			setState(170);
			match(WS);
			setState(171);
			match(T__9);
			setState(172);
			qvar_expr();
			setState(173);
			match(T__8);
			setState(174);
			match(WS);
			setState(175);
			logic_expr(0);
			setState(176);
			match(T__10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Qvar_exprContext extends ParserRuleContext {
		public Qvar_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_qvar_expr; }
	 
		public Qvar_exprContext() { }
		public void copyFrom(Qvar_exprContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class Qvar_expr_paramContext extends Qvar_exprContext {
		public TerminalNode Param() { return getToken(CountingResultParser.Param, 0); }
		public Qvar_expr_paramContext(Qvar_exprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).enterQvar_expr_param(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).exitQvar_expr_param(this);
		}
	}
	public static class Qvar_expr_param_equals_exprContext extends Qvar_exprContext {
		public TerminalNode Param() { return getToken(CountingResultParser.Param, 0); }
		public List<TerminalNode> WS() { return getTokens(CountingResultParser.WS); }
		public TerminalNode WS(int i) {
			return getToken(CountingResultParser.WS, i);
		}
		public Arith_exprContext arith_expr() {
			return getRuleContext(Arith_exprContext.class,0);
		}
		public Qvar_expr_param_equals_exprContext(Qvar_exprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).enterQvar_expr_param_equals_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).exitQvar_expr_param_equals_expr(this);
		}
	}

	public final Qvar_exprContext qvar_expr() throws RecognitionException {
		Qvar_exprContext _localctx = new Qvar_exprContext(_ctx, getState());
		enterRule(_localctx, 26, RULE_qvar_expr);
		try {
			setState(184);
			switch ( getInterpreter().adaptivePredict(_input,14,_ctx) ) {
			case 1:
				_localctx = new Qvar_expr_paramContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(178);
				match(Param);
				}
				break;
			case 2:
				_localctx = new Qvar_expr_param_equals_exprContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(179);
				match(Param);
				setState(180);
				match(WS);
				setState(181);
				match(EQ);
				setState(182);
				match(WS);
				setState(183);
				arith_expr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Logic_termContext extends ParserRuleContext {
		public Logic_termContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_logic_term; }
	 
		public Logic_termContext() { }
		public void copyFrom(Logic_termContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class Logic_term_logic_factorContext extends Logic_termContext {
		public Logic_factorContext logic_factor() {
			return getRuleContext(Logic_factorContext.class,0);
		}
		public Logic_term_logic_factorContext(Logic_termContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).enterLogic_term_logic_factor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).exitLogic_term_logic_factor(this);
		}
	}
	public static class Logic_term_ANDContext extends Logic_termContext {
		public List<Logic_termContext> logic_term() {
			return getRuleContexts(Logic_termContext.class);
		}
		public Logic_termContext logic_term(int i) {
			return getRuleContext(Logic_termContext.class,i);
		}
		public List<TerminalNode> WS() { return getTokens(CountingResultParser.WS); }
		public TerminalNode WS(int i) {
			return getToken(CountingResultParser.WS, i);
		}
		public TerminalNode AND() { return getToken(CountingResultParser.AND, 0); }
		public Logic_term_ANDContext(Logic_termContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).enterLogic_term_AND(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).exitLogic_term_AND(this);
		}
	}

	public final Logic_termContext logic_term() throws RecognitionException {
		return logic_term(0);
	}

	private Logic_termContext logic_term(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Logic_termContext _localctx = new Logic_termContext(_ctx, _parentState);
		Logic_termContext _prevctx = _localctx;
		int _startState = 28;
		enterRecursionRule(_localctx, 28, RULE_logic_term, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new Logic_term_logic_factorContext(_localctx);
			_ctx = _localctx;
			_prevctx = _localctx;

			setState(187);
			logic_factor();
			}
			_ctx.stop = _input.LT(-1);
			setState(196);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,15,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Logic_term_ANDContext(new Logic_termContext(_parentctx, _parentState));
					pushNewRecursionContext(_localctx, _startState, RULE_logic_term);
					setState(189);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(190);
					match(WS);
					setState(191);
					match(AND);
					setState(192);
					match(WS);
					setState(193);
					logic_term(3);
					}
					} 
				}
				setState(198);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,15,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Logic_factorContext extends ParserRuleContext {
		public Logic_factorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_logic_factor; }
	 
		public Logic_factorContext() { }
		public void copyFrom(Logic_factorContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class Logic_factor_Parentheses_Logic_ExprContext extends Logic_factorContext {
		public Logic_exprContext logic_expr() {
			return getRuleContext(Logic_exprContext.class,0);
		}
		public Logic_factor_Parentheses_Logic_ExprContext(Logic_factorContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).enterLogic_factor_Parentheses_Logic_Expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).exitLogic_factor_Parentheses_Logic_Expr(this);
		}
	}
	public static class Logic_factor_compareContext extends Logic_factorContext {
		public Compare_termContext compare_term() {
			return getRuleContext(Compare_termContext.class,0);
		}
		public Logic_factor_compareContext(Logic_factorContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).enterLogic_factor_compare(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).exitLogic_factor_compare(this);
		}
	}

	public final Logic_factorContext logic_factor() throws RecognitionException {
		Logic_factorContext _localctx = new Logic_factorContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_logic_factor);
		try {
			setState(204);
			switch ( getInterpreter().adaptivePredict(_input,16,_ctx) ) {
			case 1:
				_localctx = new Logic_factor_compareContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(199);
				compare_term();
				}
				break;
			case 2:
				_localctx = new Logic_factor_Parentheses_Logic_ExprContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(200);
				match(T__9);
				setState(201);
				logic_expr(0);
				setState(202);
				match(T__10);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Compare_termContext extends ParserRuleContext {
		public Compare_termContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compare_term; }
	 
		public Compare_termContext() { }
		public void copyFrom(Compare_termContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class Compare_term_EqualContext extends Compare_termContext {
		public List<Arith_exprContext> arith_expr() {
			return getRuleContexts(Arith_exprContext.class);
		}
		public Arith_exprContext arith_expr(int i) {
			return getRuleContext(Arith_exprContext.class,i);
		}
		public List<TerminalNode> WS() { return getTokens(CountingResultParser.WS); }
		public TerminalNode WS(int i) {
			return getToken(CountingResultParser.WS, i);
		}
		public TerminalNode EQ() { return getToken(CountingResultParser.EQ, 0); }
		public Compare_term_EqualContext(Compare_termContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).enterCompare_term_Equal(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).exitCompare_term_Equal(this);
		}
	}
	public static class Compare_term_GreaterContext extends Compare_termContext {
		public List<Arith_exprContext> arith_expr() {
			return getRuleContexts(Arith_exprContext.class);
		}
		public Arith_exprContext arith_expr(int i) {
			return getRuleContext(Arith_exprContext.class,i);
		}
		public List<TerminalNode> WS() { return getTokens(CountingResultParser.WS); }
		public TerminalNode WS(int i) {
			return getToken(CountingResultParser.WS, i);
		}
		public TerminalNode GT() { return getToken(CountingResultParser.GT, 0); }
		public Compare_term_GreaterContext(Compare_termContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).enterCompare_term_Greater(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).exitCompare_term_Greater(this);
		}
	}
	public static class Compare_term_LessContext extends Compare_termContext {
		public List<Arith_exprContext> arith_expr() {
			return getRuleContexts(Arith_exprContext.class);
		}
		public Arith_exprContext arith_expr(int i) {
			return getRuleContext(Arith_exprContext.class,i);
		}
		public List<TerminalNode> WS() { return getTokens(CountingResultParser.WS); }
		public TerminalNode WS(int i) {
			return getToken(CountingResultParser.WS, i);
		}
		public TerminalNode LE() { return getToken(CountingResultParser.LE, 0); }
		public Compare_term_LessContext(Compare_termContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).enterCompare_term_Less(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).exitCompare_term_Less(this);
		}
	}
	public static class Compare_term_Less_or_equalContext extends Compare_termContext {
		public List<Arith_exprContext> arith_expr() {
			return getRuleContexts(Arith_exprContext.class);
		}
		public Arith_exprContext arith_expr(int i) {
			return getRuleContext(Arith_exprContext.class,i);
		}
		public List<TerminalNode> WS() { return getTokens(CountingResultParser.WS); }
		public TerminalNode WS(int i) {
			return getToken(CountingResultParser.WS, i);
		}
		public TerminalNode LT() { return getToken(CountingResultParser.LT, 0); }
		public Compare_term_Less_or_equalContext(Compare_termContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).enterCompare_term_Less_or_equal(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).exitCompare_term_Less_or_equal(this);
		}
	}
	public static class Compare_term_Greater_or_equalContext extends Compare_termContext {
		public List<Arith_exprContext> arith_expr() {
			return getRuleContexts(Arith_exprContext.class);
		}
		public Arith_exprContext arith_expr(int i) {
			return getRuleContext(Arith_exprContext.class,i);
		}
		public List<TerminalNode> WS() { return getTokens(CountingResultParser.WS); }
		public TerminalNode WS(int i) {
			return getToken(CountingResultParser.WS, i);
		}
		public TerminalNode GE() { return getToken(CountingResultParser.GE, 0); }
		public Compare_term_Greater_or_equalContext(Compare_termContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).enterCompare_term_Greater_or_equal(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof CountingResultListener ) ((CountingResultListener)listener).exitCompare_term_Greater_or_equal(this);
		}
	}

	public final Compare_termContext compare_term() throws RecognitionException {
		Compare_termContext _localctx = new Compare_termContext(_ctx, getState());
		enterRule(_localctx, 32, RULE_compare_term);
		try {
			setState(236);
			switch ( getInterpreter().adaptivePredict(_input,17,_ctx) ) {
			case 1:
				_localctx = new Compare_term_GreaterContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(206);
				arith_expr(0);
				setState(207);
				match(WS);
				setState(208);
				match(GT);
				setState(209);
				match(WS);
				setState(210);
				arith_expr(0);
				}
				break;
			case 2:
				_localctx = new Compare_term_Greater_or_equalContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(212);
				arith_expr(0);
				setState(213);
				match(WS);
				setState(214);
				match(GE);
				setState(215);
				match(WS);
				setState(216);
				arith_expr(0);
				}
				break;
			case 3:
				_localctx = new Compare_term_LessContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(218);
				arith_expr(0);
				setState(219);
				match(WS);
				setState(220);
				match(LE);
				setState(221);
				match(WS);
				setState(222);
				arith_expr(0);
				}
				break;
			case 4:
				_localctx = new Compare_term_Less_or_equalContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(224);
				arith_expr(0);
				setState(225);
				match(WS);
				setState(226);
				match(LT);
				setState(227);
				match(WS);
				setState(228);
				arith_expr(0);
				}
				break;
			case 5:
				_localctx = new Compare_term_EqualContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(230);
				arith_expr(0);
				setState(231);
				match(WS);
				setState(232);
				match(EQ);
				setState(233);
				match(WS);
				setState(234);
				arith_expr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public boolean sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 7:
			return arith_expr_sempred((Arith_exprContext)_localctx, predIndex);
		case 8:
			return arith_term_sempred((Arith_termContext)_localctx, predIndex);
		case 9:
			return factor_sempred((FactorContext)_localctx, predIndex);
		case 11:
			return logic_expr_sempred((Logic_exprContext)_localctx, predIndex);
		case 14:
			return logic_term_sempred((Logic_termContext)_localctx, predIndex);
		}
		return true;
	}
	private boolean arith_expr_sempred(Arith_exprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0:
			return precpred(_ctx, 3);
		case 1:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean arith_term_sempred(Arith_termContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2:
			return precpred(_ctx, 3);
		case 3:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean factor_sempred(FactorContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4:
			return precpred(_ctx, 7);
		case 5:
			return precpred(_ctx, 5);
		}
		return true;
	}
	private boolean logic_expr_sempred(Logic_exprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 6:
			return precpred(_ctx, 3);
		}
		return true;
	}
	private boolean logic_term_sempred(Logic_termContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7:
			return precpred(_ctx, 2);
		}
		return true;
	}

	public static final String _serializedATN =
		"\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\3#\u00f1\4\2\t\2\4"+
		"\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t"+
		"\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\3\2\3\2\3\2\3\2\3\2\3\2\3\3\3\3\3\3\3\3\3\3\3\3\7\3\61\n\3\f\3\16\3\64"+
		"\13\3\3\3\5\3\67\n\3\3\4\3\4\3\4\3\4\3\4\3\4\3\5\3\5\3\5\3\5\7\5C\n\5"+
		"\f\5\16\5F\13\5\3\6\3\6\3\6\3\6\3\6\3\6\3\6\5\6O\n\6\3\7\3\7\5\7S\n\7"+
		"\3\b\3\b\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\7\td\n\t"+
		"\f\t\16\tg\13\t\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\7"+
		"\nv\n\n\f\n\16\ny\13\n\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3"+
		"\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\5\13\u008e\n\13\3\13"+
		"\3\13\3\13\3\13\3\13\3\13\7\13\u0096\n\13\f\13\16\13\u0099\13\13\3\f\3"+
		"\f\3\r\3\r\3\r\5\r\u00a0\n\r\3\r\3\r\3\r\3\r\3\r\7\r\u00a7\n\r\f\r\16"+
		"\r\u00aa\13\r\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\17\3\17\3"+
		"\17\3\17\3\17\3\17\5\17\u00bb\n\17\3\20\3\20\3\20\3\20\3\20\3\20\3\20"+
		"\3\20\7\20\u00c5\n\20\f\20\16\20\u00c8\13\20\3\21\3\21\3\21\3\21\3\21"+
		"\5\21\u00cf\n\21\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22"+
		"\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22"+
		"\3\22\3\22\3\22\3\22\3\22\5\22\u00ef\n\22\3\22\2\7\20\22\24\30\36\23\2"+
		"\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"\2\3\4\2\16\17\25\25\u00f8\2$"+
		"\3\2\2\2\4\66\3\2\2\2\68\3\2\2\2\b>\3\2\2\2\nN\3\2\2\2\fR\3\2\2\2\16T"+
		"\3\2\2\2\20V\3\2\2\2\22h\3\2\2\2\24\u008d\3\2\2\2\26\u009a\3\2\2\2\30"+
		"\u009f\3\2\2\2\32\u00ab\3\2\2\2\34\u00ba\3\2\2\2\36\u00bc\3\2\2\2 \u00ce"+
		"\3\2\2\2\"\u00ee\3\2\2\2$%\5\4\3\2%&\7\32\2\2&\'\7\3\2\2\'(\7\32\2\2("+
		")\5\6\4\2)\3\3\2\2\2*\67\7\4\2\2+,\7\5\2\2,\62\7\30\2\2-.\7\6\2\2./\7"+
		"\32\2\2/\61\7\30\2\2\60-\3\2\2\2\61\64\3\2\2\2\62\60\3\2\2\2\62\63\3\2"+
		"\2\2\63\65\3\2\2\2\64\62\3\2\2\2\65\67\7\7\2\2\66*\3\2\2\2\66+\3\2\2\2"+
		"\67\5\3\2\2\289\7\b\2\29:\7\32\2\2:;\5\b\5\2;<\7\32\2\2<=\7\t\2\2=\7\3"+
		"\2\2\2>D\5\n\6\2?@\7\n\2\2@A\7\32\2\2AC\5\n\6\2B?\3\2\2\2CF\3\2\2\2DB"+
		"\3\2\2\2DE\3\2\2\2E\t\3\2\2\2FD\3\2\2\2GH\5\f\7\2HI\7\32\2\2IJ\7\13\2"+
		"\2JK\7\32\2\2KL\5\16\b\2LO\3\2\2\2MO\5\f\7\2NG\3\2\2\2NM\3\2\2\2O\13\3"+
		"\2\2\2PS\5\20\t\2QS\7\23\2\2RP\3\2\2\2RQ\3\2\2\2S\r\3\2\2\2TU\5\30\r\2"+
		"U\17\3\2\2\2VW\b\t\1\2WX\5\22\n\2Xe\3\2\2\2YZ\f\5\2\2Z[\7\32\2\2[\\\7"+
		"\"\2\2\\]\7\32\2\2]d\5\20\t\6^_\f\4\2\2_`\7\32\2\2`a\7#\2\2ab\7\32\2\2"+
		"bd\5\20\t\5cY\3\2\2\2c^\3\2\2\2dg\3\2\2\2ec\3\2\2\2ef\3\2\2\2f\21\3\2"+
		"\2\2ge\3\2\2\2hi\b\n\1\2ij\5\24\13\2jw\3\2\2\2kl\f\5\2\2lm\7\32\2\2mn"+
		"\7 \2\2no\7\32\2\2ov\5\22\n\6pq\f\4\2\2qr\7\32\2\2rs\7!\2\2st\7\32\2\2"+
		"tv\5\22\n\5uk\3\2\2\2up\3\2\2\2vy\3\2\2\2wu\3\2\2\2wx\3\2\2\2x\23\3\2"+
		"\2\2yw\3\2\2\2z{\b\13\1\2{\u008e\5\26\f\2|}\7\5\2\2}~\5\24\13\2~\177\7"+
		"\7\2\2\177\u008e\3\2\2\2\u0080\u008e\7\30\2\2\u0081\u0082\5\26\f\2\u0082"+
		"\u0083\7\30\2\2\u0083\u008e\3\2\2\2\u0084\u0085\7\f\2\2\u0085\u0086\5"+
		"\20\t\2\u0086\u0087\7\r\2\2\u0087\u008e\3\2\2\2\u0088\u0089\7\20\2\2\u0089"+
		"\u008a\7\f\2\2\u008a\u008b\5\24\13\2\u008b\u008c\7\r\2\2\u008c\u008e\3"+
		"\2\2\2\u008dz\3\2\2\2\u008d|\3\2\2\2\u008d\u0080\3\2\2\2\u008d\u0081\3"+
		"\2\2\2\u008d\u0084\3\2\2\2\u008d\u0088\3\2\2\2\u008e\u0097\3\2\2\2\u008f"+
		"\u0090\f\t\2\2\u0090\u0091\7!\2\2\u0091\u0096\5\24\13\n\u0092\u0093\f"+
		"\7\2\2\u0093\u0094\7\26\2\2\u0094\u0096\5\24\13\b\u0095\u008f\3\2\2\2"+
		"\u0095\u0092\3\2\2\2\u0096\u0099\3\2\2\2\u0097\u0095\3\2\2\2\u0097\u0098"+
		"\3\2\2\2\u0098\25\3\2\2\2\u0099\u0097\3\2\2\2\u009a\u009b\t\2\2\2\u009b"+
		"\27\3\2\2\2\u009c\u009d\b\r\1\2\u009d\u00a0\5\32\16\2\u009e\u00a0\5\36"+
		"\20\2\u009f\u009c\3\2\2\2\u009f\u009e\3\2\2\2\u00a0\u00a8\3\2\2\2\u00a1"+
		"\u00a2\f\5\2\2\u00a2\u00a3\7\32\2\2\u00a3\u00a4\7\21\2\2\u00a4\u00a5\7"+
		"\32\2\2\u00a5\u00a7\5\30\r\6\u00a6\u00a1\3\2\2\2\u00a7\u00aa\3\2\2\2\u00a8"+
		"\u00a6\3\2\2\2\u00a8\u00a9\3\2\2\2\u00a9\31\3\2\2\2\u00aa\u00a8\3\2\2"+
		"\2\u00ab\u00ac\7\24\2\2\u00ac\u00ad\7\32\2\2\u00ad\u00ae\7\f\2\2\u00ae"+
		"\u00af\5\34\17\2\u00af\u00b0\7\13\2\2\u00b0\u00b1\7\32\2\2\u00b1\u00b2"+
		"\5\30\r\2\u00b2\u00b3\7\r\2\2\u00b3\33\3\2\2\2\u00b4\u00bb\7\30\2\2\u00b5"+
		"\u00b6\7\30\2\2\u00b6\u00b7\7\32\2\2\u00b7\u00b8\7\37\2\2\u00b8\u00b9"+
		"\7\32\2\2\u00b9\u00bb\5\20\t\2\u00ba\u00b4\3\2\2\2\u00ba\u00b5\3\2\2\2"+
		"\u00bb\35\3\2\2\2\u00bc\u00bd\b\20\1\2\u00bd\u00be\5 \21\2\u00be\u00c6"+
		"\3\2\2\2\u00bf\u00c0\f\4\2\2\u00c0\u00c1\7\32\2\2\u00c1\u00c2\7\22\2\2"+
		"\u00c2\u00c3\7\32\2\2\u00c3\u00c5\5\36\20\5\u00c4\u00bf\3\2\2\2\u00c5"+
		"\u00c8\3\2\2\2\u00c6\u00c4\3\2\2\2\u00c6\u00c7\3\2\2\2\u00c7\37\3\2\2"+
		"\2\u00c8\u00c6\3\2\2\2\u00c9\u00cf\5\"\22\2\u00ca\u00cb\7\f\2\2\u00cb"+
		"\u00cc\5\30\r\2\u00cc\u00cd\7\r\2\2\u00cd\u00cf\3\2\2\2\u00ce\u00c9\3"+
		"\2\2\2\u00ce\u00ca\3\2\2\2\u00cf!\3\2\2\2\u00d0\u00d1\5\20\t\2\u00d1\u00d2"+
		"\7\32\2\2\u00d2\u00d3\7\33\2\2\u00d3\u00d4\7\32\2\2\u00d4\u00d5\5\20\t"+
		"\2\u00d5\u00ef\3\2\2\2\u00d6\u00d7\5\20\t\2\u00d7\u00d8\7\32\2\2\u00d8"+
		"\u00d9\7\34\2\2\u00d9\u00da\7\32\2\2\u00da\u00db\5\20\t\2\u00db\u00ef"+
		"\3\2\2\2\u00dc\u00dd\5\20\t\2\u00dd\u00de\7\32\2\2\u00de\u00df\7\36\2"+
		"\2\u00df\u00e0\7\32\2\2\u00e0\u00e1\5\20\t\2\u00e1\u00ef\3\2\2\2\u00e2"+
		"\u00e3\5\20\t\2\u00e3\u00e4\7\32\2\2\u00e4\u00e5\7\35\2\2\u00e5\u00e6"+
		"\7\32\2\2\u00e6\u00e7\5\20\t\2\u00e7\u00ef\3\2\2\2\u00e8\u00e9\5\20\t"+
		"\2\u00e9\u00ea\7\32\2\2\u00ea\u00eb\7\37\2\2\u00eb\u00ec\7\32\2\2\u00ec"+
		"\u00ed\5\20\t\2\u00ed\u00ef\3\2\2\2\u00ee\u00d0\3\2\2\2\u00ee\u00d6\3"+
		"\2\2\2\u00ee\u00dc\3\2\2\2\u00ee\u00e2\3\2\2\2\u00ee\u00e8\3\2\2\2\u00ef"+
		"#\3\2\2\2\24\62\66DNRceuw\u008d\u0095\u0097\u009f\u00a8\u00ba\u00c6\u00ce"+
		"\u00ee";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}