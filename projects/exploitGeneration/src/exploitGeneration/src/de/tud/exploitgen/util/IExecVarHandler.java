package de.tud.exploitgen.util;

import de.uka.ilkd.key.java.Services;
import de.uka.ilkd.key.logic.Term;
import de.uka.ilkd.key.logic.op.LocationVariable;
import de.uka.ilkd.key.logic.sort.ArraySort;
import de.uka.ilkd.key.proof.init.ProofInputException;
import de.uka.ilkd.key.symbolic_execution.model.IExecutionVariable;

/**
 * author: Huy
 * this class contains static methods resolvig IExecutionVariable object
 * 
 * */
public class IExecVarHandler {
   /*
    * check if variables is heap (name = "self")
    * */
   public static boolean isSelf(IExecutionVariable var)throws ProofInputException{     
         if(var.getName().startsWith("self"))
            return true;
         else return false;      
   }
   
   public static boolean isExc(IExecutionVariable var)throws ProofInputException{
      if(var.getName().startsWith("exc") && var.getProgramVariable().getKeYJavaType().getName().equals("Throwable"))
         return true;
      else return false;     
   }
   
   /*return true if var is a parameter of the method, otherwise return false
    * TODO: should be revised because maybe some variable can be started by "_"*/
   public static boolean isParameter(IExecutionVariable var) throws ProofInputException{
      if(!isSelf(var) && !isStatic(var) && !isExc(var)){
      //if(var.getParentValue()==null  && var.getName().startsWith("_"))
         return true;
      //else
         //return false;
      }
      return false;
   }
   
   /**
    * return true if var is static, otherwise return false
    * */
   public static boolean isStatic(IExecutionVariable var){
      if(var.getProgramVariable() instanceof LocationVariable){
         LocationVariable lv = (LocationVariable)var.getProgramVariable();
         return (lv.isStatic());
      }  
      return false;
   }
   
   public static boolean isPrimitive(IExecutionVariable var) throws ProofInputException{
      if(var.getProgramVariable()!=null)
         return TermParser.isPrimitiveType(var.getProgramVariable().sort().name().toString());
      else
         return TermParser.isPrimitiveType(var.getValues()[0].getValue().sort().name().toString());
   }
   
   public static boolean isHeap(IExecutionVariable var) throws ProofInputException{
      return var.getName().equals("heap");
        
   }
   
   //check if var is an array ot not
   public static boolean isArray(IExecutionVariable var) throws ProofInputException{ 
      if(var.createSelectTerm()!=null)
         return TermParser.isArray(var.createSelectTerm());
      else if(var.getProgramVariable()!=null){
         return (var.getProgramVariable().getKeYJavaType().getSort() instanceof ArraySort);         
      }else{         
         return (var.getValues()[0].getValue().sort() instanceof ArraySort);
      }
   }
   
  
   /**********************************************************************************************
    * @param services TODO
 * @param var: {@link IExecutionVariable}
    * get name of variable. 
    * The name will be resolved in case it is parameter of method (prefix "_" is added to the name)
    * or
    * if variable is static, it will remove prefix "<class name>::"
    * */
   public static String getVarName(IExecutionVariable var, Services services) throws ProofInputException{
      String varName;
      if(var.getArrayIndex()!=null){
         //TODO: revise for better print
         varName = "I"+HeapHandler.resolve2GetIdentifier(var.getArrayIndex(),KEGConstant.SEPARATOR, services);
      }else{
         varName=var.getName();      
         
          /* check if var is method parameter. In this case, name of var is added by prefix "_" that should be eliminated before checking
          */ 
         /*if(isParameter(var) && (varName.startsWith("_"))){ //is method parameter        
            varName=varName.substring(1); //eliminate prefix "_"
         }else*/ 
         if(isStatic(var)){
            int idx = varName.indexOf("::");
            varName = varName.substring(idx+2);
            varName = "null" + KEGConstant.SEPARATOR + varName;
         }
      }
      
      return varName;
   }   
   
   public static String getIdentifier(IExecutionVariable var, Services services) throws ProofInputException{
      String varName;
      Term selectTerm = var.createSelectTerm();
      if(selectTerm!=null ){
         if(HeapHandler.isHeapSelectFunction(selectTerm))
            varName = HeapHandler.getSynthesisNameOfHeapSelectFunction(selectTerm, KEGConstant.SEPARATOR, services);
         else if(HeapHandler.isLengthFunction(selectTerm, services))
            varName = HeapHandler.getVarName4LengthFunction(selectTerm, KEGConstant.SEPARATOR, services);
         else
            varName = var.getName();
      }else{
         varName = var.getName();
      }
      return varName;
   }
   
   /***
    * get name of class containing static variable
    * the name is stated between "." and "::"
    * */
   public static String getAccessClassNameOfStaticVar(IExecutionVariable var)throws ProofInputException{     
      if(isStatic(var)){
         String varName=var.getName();
         int idx = varName.indexOf("::");
         varName =  varName.substring(0, idx);
         idx = varName.indexOf(".");
         varName = varName.substring(idx+1);
         return varName;
      }else
         return "";
   }
   
}
