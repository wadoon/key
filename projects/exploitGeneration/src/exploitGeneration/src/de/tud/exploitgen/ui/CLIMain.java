/**
 * 
 */
package de.tud.exploitgen.ui;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.List;

import com.beust.jcommander.JCommander;
import com.beust.jcommander.ParameterDescription;

import com.csvanefalk.keytestgen.util.transformers.TermTransformerException;

import de.tud.exploitgen.processing.SingleFileChecker;
import de.uka.ilkd.key.proof.init.ProofInputException;
import de.uka.ilkd.key.proof.io.ProblemLoaderException;

/**
 * Command Line Interface Main class  
 * @author Huy Do
 *
 */
public class CLIMain {
   public static void main(String args[]){
      //time consuming observe
      long startTime = System.nanoTime();
      
      CommandParser parser = new CommandParser();
      JCommander processor = new JCommander(parser);
      if (args.length==0){
         printUsage(processor);         
      }else{
                           
         //File javaFile=new File(args[0]);
         try {
            /*
             * Parse and validate the input
             */
            processor.parse(args);
            /*
             * Create the root folder in which we will put all the generated
             * test cases.
             */
            final File rootFolder = new File(parser.getOutputDirectory());
            if (!rootFolder.exists()) {
                rootFolder.mkdirs();
            }
         
            List<String> Files = parser.getFiles();
            boolean loopInv=parser.isLoopInvariant();
            for(String file: Files){
               File javaFile=new File(args[0]);
               System.out.println("Checking program "+ javaFile.getName());           
               
               SingleFileChecker pm=new SingleFileChecker(javaFile,loopInv);
               try {                  
                  pm.checkProgram();
               }
               catch (TermTransformerException e) {
                  System.out.println("Error in term transforming!");
                  //e.printStackTrace();
               }
               catch (ProofInputException e) {
                  System.out.println("Error in loading Java file into KeY, please check your source code and specifications!");
                  //e.printStackTrace();
               }
               catch(FileNotFoundException e){
                  System.out.println("Error in loading Java file into KeY, please check your source code and specifications!");
               }
            }
            
         }
         catch (IOException e) {
            System.out.println("Error in loading Java file, please check the URL again!");
            //e.printStackTrace();
         }      
      }
      long endTime = System.nanoTime();
      System.out.println("Time consuming: "+(endTime - startTime)/1000000000 + " seconds"); 
      
   }
   /**
    * Prints usage information.
    *
    * @param processor
    */
   private static void printUsage(final JCommander processor) {

       System.out.println("Usage: ktg [options] [Java source file]");
       System.out.println("\nOptions:");

       for (final ParameterDescription parameter : processor.getParameters()) {
           System.out.println("\t" + parameter.getNames() + "\t" + parameter.getDescription() + "\n");
       }
   }
}
