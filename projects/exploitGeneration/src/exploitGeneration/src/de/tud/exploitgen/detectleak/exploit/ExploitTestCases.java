/**
 * 
 */
package de.tud.exploitgen.detectleak.exploit;

import java.util.LinkedList;
import java.util.List;

import de.tud.exploitgen.detectleak.specification.declassification.DeclassificationCenter;
import de.tud.exploitgen.detectleak.specification.noninterference.IFBarrier;
import de.tud.exploitgen.infrastructure.KeYJavaMethod;
import de.uka.ilkd.key.java.Services;

/**
 * this class wrap an exploit test case. It includes:
 * experimental method
 * information flow security  specification
 * list of exploit model generated concerning method and specification 
 * @author Huy Do
 *
 */
public class ExploitTestCases {
   private KeYJavaMethod javaMethod;
   private IFBarrier spec;
   private DeclassificationCenter declCenter;
   private List<ExploitModel> exploitModels;
   
   /**
    * @param method
    * @param spec
    * @param listExploitModel
    */
   public ExploitTestCases(KeYJavaMethod method, IFBarrier spec, DeclassificationCenter declCenter,
         List<ExploitModel> listExploitModel) {
      super();
      this.javaMethod = method;
      this.spec = spec;
      this.declCenter = declCenter;
      //this.exploitModels = listExploitModel;
      this.exploitModels = new LinkedList<ExploitModel>();
      for(ExploitModel em : listExploitModel){
         exploitModels.add(em);
      }
   }
   /**
    * @return the method
    */
   public KeYJavaMethod getMethod() {
      return javaMethod;
   }
   /**
    * @param method the method to set
    */
   public void setMethod(KeYJavaMethod method) {
      this.javaMethod = method;
   }
   /**
    * @return the spec
    */
   public IFBarrier getSpec() {
      return spec;
   }
   /**
    * @param spec the spec to set
    */
   public void setSpec(IFBarrier spec) {
      this.spec = spec;
   }
   /**
    * @return the exploitModel
    */
   public List<ExploitModel> getExploitModel() {
      return exploitModels;
   }
   /**
    * @param exploitModels the exploitModel to set
    */
   public void setExploitModel(List<ExploitModel> exploitModels) {
      this.exploitModels = exploitModels;
   }
   
   public Services getServices(){
	   return javaMethod.getServices();
   }
   
   public boolean isEmpty(){
      return exploitModels.isEmpty();
   }

   
   public DeclassificationCenter getDeclCenter() {
      return declCenter;
   }
   public void printStatistics(){
      System.out.println("---------------------");
      System.out.println("noninterference specification: " + spec.getDeclaration());
      System.out.println("number of Exploit Model:" + exploitModels.size());
      for(ExploitModel em: exploitModels){
         em.printModelInfo();
      }
      
   }
   
}
