package de.tud.exploitgen.findsecret;

import java.util.LinkedList;
import java.util.List;
import java.util.Map;


import de.tud.exploitgen.util.TermUtil;
import de.uka.ilkd.key.java.Services;
import de.uka.ilkd.key.logic.Term;
import de.uka.ilkd.key.logic.TermBuilder;

/*
 * contain all possible output values, 
 * each output values is a vector, represented by a map (map from variable name to value).
 * Each vector can contain both concrete and symbolic values
 * */
public class HybridDomain {
	private List<Map<String, Term>> listMapValues;
	private Term domainCondition; //domain condition states that there are no two identical elements 
	private List<String> listSymbols; //list of all symbolic value extracted from listMapValues
	
	
	public HybridDomain(){
		this.listMapValues = new LinkedList<Map<String,Term>>();
		this.listSymbols = new LinkedList<String>();
	}
	
	public void addMapValues(Map<String,Term> mapValues){
		listMapValues.add(mapValues);
	}

	public void addMapValues(List<Map<String,Term>> listMapValues2Add){
		listMapValues.addAll(listMapValues2Add);
	}
	
	public List<Map<String, Term>> getListMapValues() {
		return listMapValues;
	}
	
	public void builDomainCondition(Services services){
		TermBuilder tb = services.getTermBuilder();
		domainCondition = tb.tt();
		for(int i=0;i<listMapValues.size()-1;i++)
			for(int j=i+1; j<listMapValues.size();j++){
				Map<String,Term> mapValuei = listMapValues.get(i);
				Map<String, Term> mapValuej = listMapValues.get(j);
				domainCondition = tb.and(domainCondition, TermUtil.notIdenticalCondition(mapValuei, mapValuej, services));
			}		
	}
	
	

	public Term getDomainCondition() {
		return domainCondition;
	}


	
	public List<String> getListSymbols() {
		return listSymbols;
	}

	public void addSymbol(String sValue){
		listSymbols.add(sValue);
	}
	
	public void addSymbol(List<String> sValues){
		listSymbols.addAll(sValues);
	}
	
	public void printInformation(){
		System.out.println("^^^^^^^^^^^^^\n list of values in hybrid domain: \n");		
		for(Map<String,Term> mapValues: listMapValues){
			System.out.println(mapValues);
		}
		System.out.println("----\n list symbols: " + listSymbols);
		System.out.println("+++++ \n domain condition: \n" + domainCondition + "\n +++++");
	}
}
