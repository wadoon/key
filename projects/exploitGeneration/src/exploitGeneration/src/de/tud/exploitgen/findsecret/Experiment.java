package de.tud.exploitgen.findsecret;

import java.util.Map;

import de.tud.exploitgen.detectleak.PairTerm;
import de.tud.exploitgen.detectleak.PairTermCollection;
import de.uka.ilkd.key.java.Services;
import de.uka.ilkd.key.logic.Term;
import de.uka.ilkd.key.logic.TermBuilder;

/**
 * this class wraps an experiment conducted to guess a secret
 * */
public class Experiment {
	private final Map<String, Long> lowInputs;
	private final Map<String, Long> observableOutputs;
	public Experiment(Map<String, Long> lowInputs,
			Map<String, Long> observableOutputs) {
		super();
		this.lowInputs = lowInputs;
		this.observableOutputs = observableOutputs;
	}
	public Map<String, Long> getLowInputs() {
		return lowInputs;
	}
	public Map<String, Long> getObservableOutputs() {
		return observableOutputs;
	}
	
	public void printInfo(){
		System.out.println("______experiment info:_______");
		System.out.println("lowInputs: " + lowInputs);
		System.out.println("observableOutputs: " + observableOutputs);
		System.out.println("_____________________________");
	}
	
	/*
	 * create a pair term collection from low inputs, thus we can easily replace low variables by corresponding concrete values
	 * */
	public PairTermCollection getLowInputPTCfromExperiment(Services services){
		TermBuilder termBuilder = services.getTermBuilder();		
		PairTermCollection result = new PairTermCollection(services);		
		for(String varName: lowInputs.keySet()){
			//TODO: work with other types not only integer
			Term lowInValueTerm = termBuilder.zTerm(lowInputs.get(varName).intValue());
			PairTerm pt = new PairTerm(lowInValueTerm, lowInValueTerm, services);
			result.add(varName, pt);
		}
		return result;
	}
	
	
	

}
	
