package de.tud.exploitgen.util;

import de.uka.ilkd.key.java.Services;
import de.uka.ilkd.key.logic.Term;
import de.uka.ilkd.key.logic.TermBuilder;

public class TermSimplifier {
	public static Term simplifyITE(Term t, TermBuilder termBuilder){
		  if(TermParser.isIfThenElse(t)){
			  if(KeYResourceHandler.isAlwaysTrue(t.sub(0)))
				  return simplifyITE(t.sub(1), termBuilder);
			  else if(KeYResourceHandler.isAlwaysFalse(t.sub(0)))
				  return simplifyITE(t.sub(2), termBuilder);
			  else
				  return termBuilder.ife(simplifyITE(t.sub(0), termBuilder), simplifyITE(t.sub(1), termBuilder), simplifyITE(t.sub(2), termBuilder));
		  }else if(t.subs().size()>0){
	         int size =t.subs().size();
	         Term[] subs = new Term[size];
	         for(int i=0;i<size;i++){
	            subs[i] = simplifyITE(t.sub(i), termBuilder);
	         }
	         return termBuilder.tf().createTerm(t.op(), subs, t.boundVars(),t.javaBlock());
	      }else
	         return t;
	   }
	
	
	public static Term simplifyConstant(Term t, Services services) throws KEGTermException{
		if(TermUtil.isBoolConstOperationTerm(t, services)){
			//System.out.println("found bool constant:: " + t);
			if(TermUtil.computeBoolConstOperationTerm(t, services))
				return services.getTermBuilder().tt();
			else
				return services.getTermBuilder().ff();
		}else if(TermUtil.isNumberConstOperationTerm(t, services)){
			//System.out.println("found number constant:: " + t);
			return services.getTermBuilder().zTerm(TermUtil.computeNumberConstantOperation(t, services));
		}else if(t.subs().size()>0){
			int size = t.subs().size();
			Term[] subTerms = new Term[size];
			for(int i= 0;i<size;i++){
				subTerms[i] = simplifyConstant(t.sub(i), services);
			}
			return services.getTermBuilder().tf().createTerm(t.op(), subTerms , t.boundVars(), t.javaBlock());
		}else
			return t;
	}
	
	
	public static Term removeExists(Term t, Services services){
		if(TermParser.isExistsQuantifier(t))
			return removeExists(t.sub(0), services);
		else if(TermUtil.containExistsQuantifier(t)){
			int size = t.subs().size();
			Term[] subTerms = new Term[size];
			for(int i= 0;i<size;i++){
				subTerms[i] = removeExists(t.sub(i), services);
			}
			return services.getTermBuilder().tf().createTerm(t.op(), subTerms , t.boundVars(), t.javaBlock());
		}else{
			return t;
		}
	}
	
	
}


