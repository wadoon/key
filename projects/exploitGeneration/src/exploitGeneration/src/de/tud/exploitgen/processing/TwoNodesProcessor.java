/**
 * 
 */
package de.tud.exploitgen.processing;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.csvanefalk.keytestgen.core.model.implementation.Model;
import com.csvanefalk.keytestgen.core.model.implementation.variable.ModelVariable;
import com.csvanefalk.keytestgen.util.transformers.TermTransformerException;

import de.tud.exploitgen.infrastructure.KeYJavaMethod;
import de.tud.exploitgen.processing.exploit.ExploitModelCreator;
import de.tud.exploitgen.processing.node.NodeDetail;
import de.tud.exploitgen.processing.specification.DelimitedReleaseExtractor;
import de.tud.exploitgen.processing.specification.VariableClassifier;
import de.tud.exploitgen.util.HeapHandler;
import de.tud.exploitgen.util.KeYResourceHandler;
import de.uka.ilkd.key.collection.ImmutableList;
import de.uka.ilkd.key.java.Services;
import de.uka.ilkd.key.logic.ProgramElementName;
import de.uka.ilkd.key.logic.Term;
import de.uka.ilkd.key.logic.TermBuilder;
import de.uka.ilkd.key.logic.TermFactory;
import de.uka.ilkd.key.logic.op.Junctor;
import de.uka.ilkd.key.logic.op.LocationVariable;
import de.uka.ilkd.key.proof.init.ProofInputException;
import de.uka.ilkd.key.util.DelimitedRelease;

/**
 * @author Huy Do
 *
 */
public class TwoNodesProcessor {

   private final NodeDetail nodeD1,nodeD2; //two detail nodes representing two branches.   
   
   private KeYJavaMethod method;
   private Services services;
   private VariableClassifier vc;
   private HeapHandler heapHandler;
   
   //private String HEAP_NAME=""; //contains name of heap object (started by "self")
   private final TermBuilder termBuilder;
   private final Term tt = new TermFactory().createTerm(Junctor.TRUE);   
   
   
   //map<heapLowVar, field>: mapping from low variable name to its corresponding field name
   Map<String,ModelVariable> mapLowVars;
   
   //list of various kind of variables
   PairTermCollection listInputHighVars;
   PairTermCollection listInputNotHighVars;   
   PairTermCollection listOutputLowPairs; //list of pair output low variables (name low_out_...)
   PairTermCollection listOutputLowValues1; //list of output value of low variables at node 1
   PairTermCollection listOutputLowValues2; //list of output value of low variables at node 2   
   PairTermCollection listArtificalVars; //collection of pairs of artificial variables (met with loop)
   //List<Term> listVarConstraints1; //list of variable's constraints at node 1 represented as a term 
   //List<Term> listVarConstraints2; //list of variable's constraints at node 2 represented as a term
   
   public TwoNodesProcessor(NodeDetail node1, NodeDetail node2,KeYJavaMethod method,VariableClassifier vc) throws TermTransformerException, ProofInputException {
      super();
      this.nodeD1 = node1;
      this.nodeD2 = node2;
      this.method=method;
      this.vc=vc;
      services=method.getServices();
      heapHandler = new HeapHandler(services);
      termBuilder=new TermBuilder(new TermFactory(), services);
      mapLowVars=new HashMap<String,ModelVariable>();     
            
      listInputHighVars = new PairTermCollection(services);
      listInputNotHighVars = new PairTermCollection(services);
      listOutputLowPairs = new PairTermCollection(services);      
      listOutputLowValues1 = new PairTermCollection(services);      
      listOutputLowValues2 = new PairTermCollection(services);    
      listArtificalVars = new PairTermCollection(services);
      //prepare materials for generating interference formulas
      System.out.println("list High variables of classifier: " + vc.getListHighVars());
      
      constructLists(1);
      constructLists(2);
      constructListArtificalVars();      
      
      resolveOutputLowPairs();
      
      System.out.println("check listInputHighVars:");
      listInputHighVars.printListPairTerm();      
      System.out.println("check listInputNotHighVars:");
      listInputNotHighVars.printListPairTerm();      
      
   }
   
   /*
    * construct list of inputs (high, not high and low) from the model created by eModelCreator
    * */
   private void constructLists(int branch) throws ProofInputException{      
      Model model = new ExploitModelCreator(nodeD1,nodeD2).getExploitModel().getModel(branch);
      for(ModelVariable mv : model.getVariables()){
         if(mv.isPrimitive()){ //just check primitive variables, object variables are constructed from primitive variables
            //System.out.println("variable name: " + mv.getVariableName());
            if (vc.isHigh(mv.getIdentifier())){
               //System.out.println("high variable detected: " + mv.getIdentifier());
               add2ListInputHighVars(mv);
            }else{
               //System.out.println("non-high variable detected: " + mv.getIdentifier());
               add2ListInputNotHighVars(mv);
            }
            if(vc.isLow(mv.getIdentifier())){
               add2MapLowVars(mv);
               add2ListOutputLowValues(mv,branch);
            }
            //add all constraints of mv to corresponding list of constraints
            //add2ListVarConstraints(mv, branch);
         }
      }
      //System.out.println(" $$$$$$$$ end construct list variable of branch " + branch);
   }
   
   //construct collection of pair of artificial vars
   private void constructListArtificalVars(){
      List<Term> artVars = new ExploitModelCreator(nodeD1,nodeD2).getSynthesisArtificialVar();   
      System.out.println("artificial variables:" + artVars);      
     
      for(Term var: artVars){
         String varName = var.op().name().toString();
         LocationVariable lv1=new LocationVariable(new ProgramElementName(varName + "_1"),var.sort());
         LocationVariable lv2=new LocationVariable(new ProgramElementName(varName + "_2"),var.sort());         
         PairTerm pair=new PairTerm(termBuilder.var(lv1),termBuilder.var(lv2),services);
         listArtificalVars.add(varName, pair);
      }
   }
   
   /*
    * add to list of input high variables 
    * */
   private void add2ListInputHighVars(ModelVariable mv) throws ProofInputException{
      String varName=mv.getIdentifier();
           
      //if the list of high variable does not contains the variable, add it into the list
      if(!listInputHighVars.contains(varName)){
         /*
          * create two variables which have the same type with this variable and have two different name 
          * (by adding prefix "self_" and suffixes _1 and _2)
         */
         
         LocationVariable lv1=new LocationVariable(new ProgramElementName(varName + "_1"),mv.getType());
         LocationVariable lv2=new LocationVariable(new ProgramElementName(varName + "_2"),mv.getType());
         
         PairTerm pair=new PairTerm(termBuilder.var(lv1),termBuilder.var(lv2),services);
         listInputHighVars.add(varName, pair);         
         
      }           
   }
   
   /*
    * add to list of input not high variables 
    * */
   private void add2ListInputNotHighVars(ModelVariable mv) throws ProofInputException{
      String varName=mv.getIdentifier();
           
      //if the list of high variable does not contains the variable, add it into the list
      if(!listInputNotHighVars.contains(varName)){
                  
         LocationVariable lv1=new LocationVariable(new ProgramElementName(varName + "_1"),mv.getType());
         LocationVariable lv2=new LocationVariable(new ProgramElementName(varName + "_2"),mv.getType());
         
         PairTerm pair=new PairTerm(termBuilder.var(lv1),termBuilder.var(lv2),services);
         listInputNotHighVars.add(varName, pair);
      }           
   }
   
   /*
    * add to list of input low variables 
    * */
   private void add2MapLowVars(ModelVariable mv) throws ProofInputException{
      String varName=mv.getIdentifier();      //key is the variable name     
      //if the list of high variable does not contains the variable, add it into the list
      if(!mapLowVars.containsKey(varName)){                  
        mapLowVars.put(varName, mv);        //data is the resolved name
      }           
   }
   
   /*
    * add to list of input low variables via branch
    * */
   private void add2ListOutputLowValues(ModelVariable mv, int branch){
      String varName=mv.getIdentifier();
      Term value = mv.getSymbolicValue();
      if(branch==1){
         if(!listOutputLowValues1.contains(varName)){
            LocationVariable lvo=new LocationVariable(new ProgramElementName(varName + "_out_1"),mv.getType());
            //Term value = new HeapHandler(services).replaceSelectFunctionByItsField(mv.getSymbolicValue());
            
            PairTerm pair=new PairTerm(termBuilder.var(lvo),value,services);
            listOutputLowValues1.add(varName, pair);
         }
      }else{
         if(!listOutputLowValues2.contains(varName)){
            LocationVariable lvo=new LocationVariable(new ProgramElementName(varName + "_out_2"),mv.getType());
            //Term value = new HeapHandler(services).replaceSelectFunctionByItsField(mv.getSymbolicValue());           
            PairTerm pair=new PairTerm(termBuilder.var(lvo),value,services);
            listOutputLowValues2.add(varName, pair);
         }
      }    
      
   }
   
   /*add to list of variable's constraints via branch*/
   /*private void add2ListVarConstraints(ModelVariable var, int branch){
      List<Term> constraints = var.getConstraints();
      if(branch == 1){
         listVarConstraints1.addAll(constraints);
      }else{
         listVarConstraints2.addAll(constraints);
      }
   }*/
      
   /*
    * synthesis listOutputLowPairs from listOutputLowValues1 and listOutputLowValues2
    * as well as replacing the value term by listInputHighVars and listInputNotHighVars 
    * */
   private void resolveOutputLowPairs(){
      for(String name: listOutputLowValues1.getNameSet()){
         //make pair term of "_out_1" and "_out_2"
         PairTerm pt1=listOutputLowValues1.getPairTerm(name);
         PairTerm pt2=listOutputLowValues2.getPairTerm(name);         
         
         //create pair term of pt1.T1 and pt2.T1 and add it into listOutputLowPairs        
         PairTerm pt=new PairTerm(pt1.getT1(),pt2.getT1(),services);
         listOutputLowPairs.add(name, pt);
         
         //resolve the value term T2
         Term value1=pt1.getT2();
         value1=listInputHighVars.replacePVByNameAndBranch(value1, 1);
         value1=listInputNotHighVars.replacePVByNameAndBranch(value1, 1);
         value1=listArtificalVars.replacePVByNameAndBranch(value1, 1);
         pt1.setT2(value1);
         
         Term value2=pt2.getT2();
         value2=listInputHighVars.replacePVByNameAndBranch(value2, 2);
         value2=listInputNotHighVars.replacePVByNameAndBranch(value2, 2);
         value2=listArtificalVars.replacePVByNameAndBranch(value2, 2);
         pt2.setT2(value2);
      }
   }
   
   /*
    * get path condition based on branch, after that resolve it
    * if branch is 1 then return path condition of node1, otherwise return path condition of  node2.
    * */
   private Term getResolvedPathCondition(int branch) throws ProofInputException {
      Term pc;
      if(branch==1)
         pc = nodeD1.getPathCondition();
      else
         pc = nodeD2.getPathCondition();
      //replace all select function in path condition (heap value) by the field
      
      System.out.println("original path condition: " + pc);
      pc = KeYResourceHandler.removeUnnecessaryTerm(pc);      
      
      pc = heapHandler.replaceSelectFunctionByItsField(pc);
      pc = heapHandler.replaceLengthFunctionByVar(pc);
      
      //System.out.println("resolved path condition: " + pc);
      
      
      
      pc = listInputHighVars.replacePVByNameAndBranch(pc, branch);
      pc = listInputNotHighVars.replacePVByNameAndBranch(pc, branch);
      
      pc=listArtificalVars.replacePVByNameAndBranch(pc, branch);
      pc = heapHandler.replaceImpByAnd(pc);
     
      return pc;
   }
   
   /**
    * get all preconditions of the method, except default precondition: java.lang.Object::<inv>(heap,self)
    * replace all low and high values in each precondition by corresponding low and high values of the branch
    * return = and(all preconditions)
    * */
   private Term getResolvedPrecondition(int branch){
      //get all preconditions of the method
      Term result = tt;
      List<Term> preconditions = method.getPreconditions();
      //System.out.println("HEAP_NAME: " + eModelBuilder.getHEAP_NAME());
      for(Term precond: preconditions){         
         //System.out.println("original precondition " + branch + " : " + precond);
         precond= KeYResourceHandler.removeDefaultPrecondition(precond);
         precond = KeYResourceHandler.removeUnnecessaryTerm(precond);
         //System.out.println("after remove default and notnull, precond " + branch + " is : \n" + precond);
         /*
          * with precondition, the heap name is always "self", 
          * but if a class contains more than one method, 
          * the heap object of each method could have another name: "self_0", "self_1",...
          * so we have to use the heap name of the method in resolving precondition
          * * */        
         //precond=new HeapHandler(services).replaceSelectFunctionByItsField(precond,eModelCreator.getHEAP_NAME());        
         precond = heapHandler.replaceSelectFunctionByItsField(precond, nodeD1.getHeapName());
         precond = heapHandler.replaceLengthFunctionByVar(precond);
      
         precond=listInputHighVars.replacePVByNameAndBranch(precond, branch);
         precond=listInputNotHighVars.replacePVByNameAndBranch(precond, branch);
         precond=listArtificalVars.replacePVByNameAndBranch(precond, branch);
         result = termBuilder.and(result,precond);        
      }     
      return result;
   }
   
   /*
    * get all constraints of variable of branch, resolve them and use conjunction to join them
    * */
  /* private Term getResolvedVarConstraints(int branch){
      Term result = tt;
      List<Term> listConstraints;
      if(branch==1)
         listConstraints = listVarConstraints1;
      else
         listConstraints = listVarConstraints2;
      for(Term constraint: listConstraints){
         constraint=listInputHighVars.replacePVByNameAndBranch(constraint, branch);
         constraint=listInputNotHighVars.replacePVByNameAndBranch(constraint, branch);
         constraint=listArtificalVars.replacePVByNameAndBranch(constraint, branch);
         result = termBuilder.and(result,constraint);         
      }
      return result;
   }   */
   
  /*  
   *//**
    * get leak condition of a Declassifier specification (declassify E \if C), based on branch
    * output format: c1(hi,li) or c2(hi,li) or ... (ci \in C)
    * *//*
   private Term getLeakCondition(Declassifier decl, int branch){
      ImmutableList<Term> conditions = decl.conditions;       
      if(conditions.size()>0){
         Term conditionTerm=termBuilder.tt();     
         Term[] arrayCond = new Term[conditions.size()];
         conditions.toArray(arrayCond);
         conditionTerm = arrayCond[0];    
         
          * solve conditions, if there are more than one conditions, then we use conjunction "or"
          * 
         for(int i=1; i< arrayCond.length; i++ ){
            conditionTerm = termBuilder.or(conditionTerm,arrayCond[i]);                  
         }
         conditionTerm = new HeapHandler(services).replaceSelectFunctionByItsField(conditionTerm, eModelCreator.getHEAP_NAME());
         if(branch==1){          
            conditionTerm = listInputHighVars.replacePVByNameAndBranch(conditionTerm, 1);
            conditionTerm = listInputNotHighVars.replacePVByNameAndBranch(conditionTerm, 1);
         }else{
            conditionTerm = listInputHighVars.replacePVByNameAndBranch(conditionTerm, 2);
            conditionTerm = listInputNotHighVars.replacePVByNameAndBranch(conditionTerm, 2);
         }
         
         return conditionTerm;
      }
      return termBuilder.tt();
   }
   
   private Term getLeakEqualTerm(Declassifier decl){
      ImmutableList<Term> leaks = decl.leaks;
      
       * solve leakable expression, because we have to build equation \forall e \in E: e(h1,l1)=e(h2,l2),
       * we will use PairTermCollection
       * 
      if(leaks.size()>0){
         PairTermCollection pairLeakTerms = new PairTermCollection(services);
         for(Term leakTerm: leaks){
            Term declass1=leakTerm;
            Term declass2=leakTerm;
                           
              with declassification, the heap name is always "self", 
             * but if a class contains more than one method,
             * the heap object of each method could have another name: "self_0", "self_1",...
             * so we have to use the heap name of the method in resolving declassification
             *       
            declass1=new HeapHandler(services).replaceSelectFunctionByItsField(declass1,eModelCreator.getHEAP_NAME());
            declass2=new HeapHandler(services).replaceSelectFunctionByItsField(declass2,eModelCreator.getHEAP_NAME());
            
            declass1=listInputHighVars.replacePVByNameAndBranch(declass1, 1);
            declass1=listInputNotHighVars.replacePVByNameAndBranch(declass1, 1);
            
            declass2=listInputHighVars.replacePVByNameAndBranch(declass2, 2);
            declass2=listInputNotHighVars.replacePVByNameAndBranch(declass2, 2);
            
            //create new PairTerm (declass1, declass2) and add it into pcd1
            pairLeakTerms.add(leakTerm.toString(), new PairTerm(declass1,declass2,services));
         }
         return pairLeakTerms.totalEqualTerm();
      }
      
      return termBuilder.tt();
   }*/
   
   /**
    * create formula to check non-interference property by checking the output value of low variable lowVar
    * the formula will be created from two paths and the collection of high variables and low variables
    * it is based on the idea that one program is non-interference if the output of low variables are different
    * if the input of high variables are changed.
    * 
    * We do it by checking two paths (may be different branches, may be the same)
    * the formula looks like below:
    * (Leak(P,i,j,low) && (!(EscCond(i) && EscCond(j)) || EscExprEqual(i,j)) 
    * We based on assumption that escape conditions must be hold in both two paths, then escape expression is allowed to leak
    * 
    * where:
    *    Leak(P,i,j,low) is the formula checking if information from secret part can be leaked to variable "low" or not 
    *       by comparing the output value of low at the final state of path i and path j. Leak(P,i,j,low) is following formula: 
    *    Leak(P,i,j,low) = PreCond(h_i,l_i) && PreCond(h_j,l_j) && PC_i(h_i,l_i) && PC_j(h_j,l_j) 
    *                      && h_i!=h_j && l_i=l_j && low_out_i!=low_out_j
    *       in which: 
                * PreCond is precondition of the method
                * PC_i and PC2_j are path conditions of two paths i and j, respectively
                * h_i, l_i, h_j, l_j: the collection of the input of high and low variables for two paths i and j, respectively         
                * l1_outs, l2_outs: the collection of the output of low variables for two corresponding paths
                * low_out_i, low_out_j: two output values of low at the final state of two path i and j, respectively
                
    *    EscapeCond: condition of escape
    *   
    */
  

   public Map<ModelVariable,Term> getAllInterferenceFormula() throws ProofInputException{
      Map<ModelVariable,Term> result=new HashMap<ModelVariable,Term>();
      Term notEqualHighInput = listInputHighVars.partialNotEqualTerm();
      Term equalNotHighInput = listInputNotHighVars.totalEqualTerm();
      //System.out.println("********************************************");
      //System.out.println("equalNotHighInput: " + equalNotHighInput);      
      Term preCond1=getResolvedPrecondition(1); //precondition interpreted in path 1
      //System.out.println("preCond1: " + preCond1);
      Term preCond2=getResolvedPrecondition(2);//precondition interpreted in path 2
      //System.out.println("preCond2: " + preCond2);
      Term pathCond1=getResolvedPathCondition(1); ////path condition of path 1
      //System.out.println("pathCond1: " + pathCond1);
      Term pathCond2=getResolvedPathCondition(2); ////path condition of path 1
      //System.out.println("pathCond2: " + pathCond2);
      
      /*
       * the constraint collection of each nodes already contains precondition and path condition
       * so we don't have to work with them separately 
       * */
      Term nodeConstraints1 = getResolvedNodeConstraints(1);//var constraints of path 1
      Term nodeConstraints2 = getResolvedNodeConstraints(2);//var constraints of path 2
      System.out.println("nodeConstraint1: " + nodeConstraints1);
      System.out.println("nodeConstraint2: " + nodeConstraints2);
      
      
      //generate interference formula to check if secret infor can be leaked throw lowVar or not
      //System.out.println("mapLowVars: " + mapLowVars);
      String heapName = nodeD1.getHeapName();
      
      for(String lowVar: mapLowVars.keySet()){
         Term valueLowOutput1 = listOutputLowValues1.getPairTerm(lowVar).equalTerm();
         //System.out.println("valueLowOutput1: " + valueLowOutput1);
         Term valueLowOutput2 = listOutputLowValues2.getPairTerm(lowVar).equalTerm();
         //System.out.println("valueLowOutput2: " + valueLowOutput2);
         Term notEqualLowOutput = listOutputLowPairs.getPairTerm(lowVar).notEqualTerm();        
         //System.out.println("notEqualLowOutput: " + notEqualLowOutput);
         
         Term interferenceTerm = termBuilder.and(
               preCond1, preCond2, 
               pathCond1,pathCond2,
               //nodeConstraints1, nodeConstraints2,
               notEqualHighInput, equalNotHighInput,
               valueLowOutput1,valueLowOutput2,notEqualLowOutput);
                  
         /* get all EelimitedRelease objects and synthesize to make interference formula*/         
         ImmutableList<DelimitedRelease> declassifies = method.getEscapeHatches();
         if(declassifies.size()>0){
            for(DelimitedRelease decl: declassifies){   
               DelimitedReleaseExtractor drExtractor = new DelimitedReleaseExtractor(decl, method.getServices());
               
               if(drExtractor.affect2Var(heapName, lowVar)){
                  //integrate interference term with conditional delimited release
                  interferenceTerm = termBuilder.and(interferenceTerm, 
                                                     drExtractor.getConditionalEscTerm(listInputHighVars, 
                                                                                        listInputNotHighVars, 
                                                                                        heapName)
                                                    );
               }
            }            
         }
         
         result.put(mapLowVars.get(lowVar), interferenceTerm);
         
            
         //System.out.println("leakTerm:^^^: \n" + leakTerm);        
            
      }
      
      return result;
   }  
   
    
  
   /*
    * get all constraints of node that can be used in interference formula
    * it is very useful in case of using method contract
    * where information of method contract need be processed
    * the collection of constraints contains:
    *    - precondition
    *    - path condition
    * so we don't have to resolve them separately
    * it could speed up the process 
    * */
   private Term getResolvedNodeConstraints(int branch){
      Term constraints;    
     
      if(branch ==1){
         constraints = nodeD1.getConstraint();         
      }else{
         constraints = nodeD2.getConstraint();
      }         
            
      constraints = listInputHighVars.replacePVByNameAndBranch(constraints, branch);
      constraints = listInputNotHighVars.replacePVByNameAndBranch(constraints, branch);
      constraints = listArtificalVars.replacePVByNameAndBranch(constraints, branch);
           
      return constraints;      
   }

}
