package de.tud.exploitgen.detectleak.node;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.csvanefalk.keytestgen.core.model.implementation.Model;
import com.csvanefalk.keytestgen.core.model.implementation.variable.ModelVariable;

import de.tud.exploitgen.util.HeapHandler;
import de.uka.ilkd.key.logic.Term;
import de.uka.ilkd.key.logic.TermBuilder;

/*
 * containing a specific model of a node
 * */
public class ModelNode {
	private final Model model;
	private final NodeDetail nodeDetail;
	private final int idx;
	private Term constraint; //synthesized constraint of node constraint and value Condition of Model
	private Term valueCondition; 
	public ModelNode(Model model, NodeDetail node, int idx) {
		super();
		this.model = model;
		this.nodeDetail = node;
		this.idx = idx;
		synthesizeConstraint();
	}	
	
	/*
	 * synthesized constraint = node.constraint && synthesized value conditions
	 * */
	private void synthesizeConstraint(){
		TermBuilder termBuilder = nodeDetail.getNode().getServices().getTermBuilder();
		Term modelValueCondition = termBuilder.tt();				
		for(ModelVariable mv: model.getVariables()){
			 if(!mv.isFresh()){
	            if(!mv.getIdentifier().equals("self"))
	               modelValueCondition = termBuilder.and(modelValueCondition, mv.getValueCondition());
	         }					 
		}
		
		List<Term> listArrays = nodeDetail.getListArrays();		
		HeapHandler heapHandler = new HeapHandler(nodeDetail.getNode().getServices());
		valueCondition = heapHandler.refineTerm(modelValueCondition, listArrays);
		
		constraint = termBuilder.and(nodeDetail.getConstraint(), valueCondition);		
		constraint = heapHandler.refineTerm(constraint, listArrays);
		
		
	}

	public Model getModel() {
		return model;
	}

	public NodeDetail getNodeDetail() {
		return nodeDetail;
	}

	public Term getConstraint() {
		return constraint;
	}

	public int getIdx() {
		return idx;
	}
	
	public boolean sameIdxNumber(ModelNode anotherNode){
		if(this.idx==anotherNode.idx && this.getNodeDetail().getIndex()==anotherNode.getNodeDetail().getIndex())
			return true;
		else
			return false;
	}

	public Term getValueCondition() {
		return valueCondition;
	}
	
	
}
