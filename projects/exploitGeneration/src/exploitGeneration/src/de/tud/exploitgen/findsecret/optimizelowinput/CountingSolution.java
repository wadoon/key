package de.tud.exploitgen.findsecret.optimizelowinput;

import de.tud.exploitgen.util.TermParser;
import de.uka.ilkd.key.java.Services;
import de.uka.ilkd.key.logic.Term;
import de.uka.ilkd.key.util.Pair;

public class CountingSolution {
	private Term value, condition;

	public CountingSolution(Term value, Term condition) {
		super();
		this.value = value;		
		this.condition = condition;		
	}

	public Term getValue() {
		return value;
	}

	public void setValue(Term result) {
		this.value = result;
	}

	public Term getCondition() {
		return condition;
	}

	public void setCondition(Term condition) {
		this.condition = condition;
	}
	
	
	public boolean isConstValue(Services services){
		return TermParser.isIntegerConst(value, services);
	}
	
	public boolean noCondition(){
		return (condition==null) ||TermParser.isBooleanTrue(condition);
	}	
	
	public Pair<CountingSolution, CountingSolution> getTwoSolutionsViaOrCondition(){
		if(TermParser.isOr(condition)){
			CountingSolution s1 = new CountingSolution(value,condition.sub(0));
			CountingSolution s2 = new CountingSolution(value,condition.sub(1));
			return new Pair<CountingSolution, CountingSolution>(s1,s2);
		}else
			return null;
	}
	
	
	
}
