/**
 * 
 */
package de.tud.exploitgen.processing.specification;



import java.io.IOException;
import java.util.LinkedList;
import java.util.List;

import com.csvanefalk.keytestgen.core.model.implementation.Model;
import com.csvanefalk.keytestgen.core.model.implementation.variable.ModelVariable;

import de.tud.exploitgen.infrastructure.KeYJavaMethod;
import de.tud.exploitgen.processing.exploit.ExploitModel;
import de.tud.exploitgen.util.KeYResourceHandler;
import de.uka.ilkd.key.proof.init.ProofInputException;
import de.uka.ilkd.key.symbolic_execution.model.IExecutionVariable;

/**
 * this class check properties of a variable represented by a IExecutionVaribale object
 * @author Huy Do
 *
 */
public class VariableClassifier {
   /*
    * check if a variable is a high variable or not
    * first simple implementation: just check via its name (start by "h")
    * todo: improve it by using metadata supplied by JML specifications
    * */
   private KeYJavaMethod method;// contains meta data including JML specifications
   private IFSpecParser parser;  //contains parsing information of information flow security specifications
   private List<String> listLowVars; //list of Low Values, get from list barriers
   private List<String> listHighVars; //list of High Values, get from list barriers
   
   /*
    * extended for object-sensitive information flow security
    * when we define an object (or array) is a low variable, all observable sequence field of it (sub-field, element and length of array)
    * are considered as low variables too and are contained in listLowIdentifiers
    * The same with high variable specification (contained in listHighIdentifiers)
    * */
   private List<String> listLowIdentifiers; //list of low identifiers, get from list barriers combining with the model
   private List<String> listHighIdentifiers;
   /*
    * solve parser to get listLowVars, listHighVars and listBarriers
    * */
   private void solveParser() throws IOException{
      List<IFBarrier> listBarriers=parser.parseSpecification2GetListBarrier();
      
      listLowVars=new LinkedList<String>();
      listHighVars=new LinkedList<String>();
      
      for(IFBarrier barrier:listBarriers){
         List<String> destination=barrier.getDestination();
         List<String> source=barrier.getSource();
         
         for(String var:destination){
            
            if(!listLowVars.contains(var)) //if destination variables is not in the listLowVars, add it
               listLowVars.add(var);
         }
         
         for(String var:source){
            
            if(!listHighVars.contains(var))  //if source variables is not in the listHighVars, add it
               listHighVars.add(var);            
         }
      }      
   }      
   
   
   
   
   /**
    * @param method
    * @param listLowVars
    * @param listHighVars
    */
   public VariableClassifier(KeYJavaMethod method, List<String> listLowVars,
         List<String> listHighVars) {
      super();
      this.method = method;
      this.listLowVars = new LinkedList<String>();
      this.listHighVars = new LinkedList<String>();
      
      //add to listLowVars
      for(String var: listLowVars){         
         var = var.replace(".", "_");
         //System.out.println(var);
         var = "self_" + var;
         this.listLowVars.add(var);
         
      }
     //add to listHighVars
      for(String var: listHighVars){
         var = var.replace(".", "_");
         //System.out.println(var);
         var = "self_" + var;
         this.listHighVars.add(var);
         
      }    
 
   }

   
   /*initiate and instantiate listLowIdentifiers and listHighIdentifiers using listLowVars, ListHighVars and ExploitModel
    * serve for object-sensitive analysis
    * Method: analyze all ModelVariable objects (mv) containing in ExploitMode and compare it with specified low and high variables
    * if mv a is low/high variable and mv is Object or Array type, then all children of mv (sequence sub-fields, array's length and elements)
    * are assigned as low/high variables too. 
    * */
   public void buildListIdentifiers(ExploitModel eModel) throws ProofInputException{     
      /*initiate for listLowIdentifiers and listHighIdentifiers*/
      this.listLowIdentifiers = new LinkedList<String>();
      this.listHighIdentifiers = new LinkedList<String>();
      for(String var: listLowVars){       
         this.listLowIdentifiers.add(var);
      }
      for(String var: listHighVars){       
         this.listHighIdentifiers.add(var);
      }
      
      /*find and add sequence children of low and high variable into lists*/
      Model model = eModel.getModel1();
      for(ModelVariable mv: model.getVariables()){
         if(needAdd2List(listLowIdentifiers, model, mv)){
            //if(!belongTo(listLowIdentifiers, mv.getIdentifier()))
               listLowIdentifiers.add(mv.getIdentifier());
         }else if(needAdd2List(listHighIdentifiers, model, mv)){
            //if(!belongTo(listHighIdentifiers, mv.getIdentifier()))
               listHighIdentifiers.add(mv.getIdentifier());
         }
      }
   }

   /*check whether an identifier of a ModelVariable object can be added into listIdentifiers or not*/
   private boolean needAdd2List(List<String> listIds, Model model, ModelVariable mv){
      if(belongTo(listIds, mv.getIdentifier())){
         return false;
      }else{
         while(mv.getParentIdentifier()!=null){
            mv = model.getVariable(mv.getParentIdentifier());
            if(belongTo(listIds, mv.getIdentifier()))
               return true;
         }
         return false;
      }
      
   }
   
   /*
   * now: check if variable's name is in the listHighVars or not
   */
   public boolean isHigh(IExecutionVariable var) throws ProofInputException{    
      return isHigh(KeYResourceHandler.getVarName(var));
     
   }
   
   public boolean isHigh(String varName) throws ProofInputException{
      //if(listHighVars.contains(varName))
      if(belongTo(listHighIdentifiers,varName))
         return true;
      else return false;
   }
   
   public boolean isHigh(ModelVariable mv) throws ProofInputException{
      return isHigh(mv.getIdentifier());
   }
   
   /*
    * check if a variable is a high variable or not
    * first simple implementation: just check via its name (start by "l")
    * todo: improve it by using metadata supplied by JML specifications
    * now: check if variable's name is in the listLowVars or not
    * */
   public boolean isLow(IExecutionVariable var)throws ProofInputException{  
      return isLow(KeYResourceHandler.getVarName(var));
   }
   
   public boolean isLow(String varName) throws ProofInputException{
      //if(listLowVars.contains(varName))
      if(belongTo(listLowIdentifiers,varName))
         return true;
      else return false;
   }

   public boolean isLow(ModelVariable mv) throws ProofInputException{
      return isLow(mv.getIdentifier());
   }
   /*
    * check if variables is self object (name = "self")
    * */
   public boolean isSelfObject(IExecutionVariable var)throws ProofInputException{     
         if(var.getName().startsWith("self"))
            return true;
         else return false;      
   }
   
   //check if varName is in listVars or not (varName can contains prefix "self_"
   private boolean belongTo(List<String> listVars, String varName){
      for(String listVar: listVars){
         if(varName.equals(listVar))
            return true;
      }
      return false;
   }


   /**
    * @return the listLowVars
    */
   public List<String> getListLowVars() {
      return listLowVars;
   }


   /**
    * @param listLowVars the listLowVars to set
    */
   public void setListLowVars(List<String> listLowVars) {
      this.listLowVars = listLowVars;
   }


   /**
    * @return the listHighVars
    */
   public List<String> getListHighVars() {
      return listHighVars;
   }


   /**
    * @param listHighVars the listHighVars to set
    */
   public void setListHighVars(List<String> listHighVars) {
      this.listHighVars = listHighVars;
   }
   
   
}
