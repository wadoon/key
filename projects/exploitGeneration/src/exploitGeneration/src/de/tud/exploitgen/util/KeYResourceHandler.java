/**
 * 
 */
package de.tud.exploitgen.util;



import de.uka.ilkd.key.collection.ImmutableArray;
import de.uka.ilkd.key.logic.Term;
import de.uka.ilkd.key.logic.TermFactory;
import de.uka.ilkd.key.logic.op.Junctor;
import de.uka.ilkd.key.proof.init.ProofInputException;
import de.uka.ilkd.key.symbolic_execution.model.IExecutionVariable;

/**
 * this class supplies several necessary methods to resolve resource relevant to KeY (precondition, program variable etc)
 * @author Huy Do
 *
 */
public class KeYResourceHandler {
   
   private static final TermFactory tf = TermFactory.DEFAULT;
   private static final Term tt = TermFactory.DEFAULT.createTerm(Junctor.TRUE);
   /* **************************************************************
    * resolve precondition
    * **************************************************************/
      
   /*********************************************************
    * @param precond
    * @return precond without default item java.lang.Object::<inv>(heap,self)
    */   
   public Term removeDefaultPrecondition(Term precond){
      if(precond!=null){
         //if found default precondition, just remove it (replace it by null)
         if(!precond.toString().contains("java.lang.Object::<inv>(heap,self)"))
            return precond;
         else if(precond.toString().equals("java.lang.Object::<inv>(heap,self)"))
            return tt;
         else{       
            return tf.createTerm(precond.op(),removeDefaultPreconditionInSubTerm(precond.subs()));
         }
      }else return null;
   }
   private Term[] removeDefaultPreconditionInSubTerm(final ImmutableArray<Term> subs ){
      Term[] result =new Term[subs.size()];
      for(int i=0;i<subs.size();i++)
         result[i]=removeDefaultPrecondition(subs.get(i));    
      return (result);
   }
   
   
   
   
   /* *********************************************************************
    * resolve IProgramVaribale
    * *********************************************************************/
   
   /**********************************************************************************************
    * @param var: {@link IExecutionVariable}
    * get name of variable. The name will be resolved in case it is parameter of method (prefix "_" is added to the name)
    * */
   public String getVarName(IExecutionVariable var) throws ProofInputException{      
      String varName=var.getName();
      /*
       * check if var is method parameter. In this case, name of var is added by prefix "_" that should be eliminated before checking
       * */
      if(var.getParentValue()==null){ //is method parameter        
         varName=varName.substring(1); //eliminate prefix "_"
      }      
      return varName;
   }   
   
      
}
