/**
 * 
 */
package de.tud.exploitgen.detectleak.node;

import de.uka.ilkd.key.symbolic_execution.model.IExecutionLoopInvariant;
import de.uka.ilkd.key.symbolic_execution.model.IExecutionNode;
import de.uka.ilkd.key.symbolic_execution.model.IExecutionOperationContract;
import de.uka.ilkd.key.symbolic_execution.model.IExecutionTermination;
import de.uka.ilkd.key.symbolic_execution.model.IExecutionTermination.TerminationKind;



/**
 * @author Huy Do
 *
 */
public class NodeParser {
   /**
    * check if the node is a terminating node
    * */
   public static boolean isTerminationNode(final IExecutionNode<?> node) {
      return node instanceof IExecutionTermination;
   }
   
   public static boolean isNormalTerminationNode(final IExecutionNode<?> node) {
      if(isTerminationNode(node)){
         if(((IExecutionTermination)node).getTerminationKind()==TerminationKind.NORMAL)
            return true;
     }
     return false;
   }
   
   public static boolean isLoopBodyTerminationNode(final IExecutionNode<?> node){
      if(isTerminationNode(node)){
          if(((IExecutionTermination)node).getTerminationKind()==TerminationKind.LOOP_BODY)
             return true;
      }
      return false;
   }
   
   public static boolean isExceptionalTerminationNode(final IExecutionNode<?> node){
      if(isTerminationNode(node)){
         if(((IExecutionTermination)node).getTerminationKind()==TerminationKind.EXCEPTIONAL)
            return true;
     }
     return false;
   }
   
   public static boolean isMethodContract(final IExecutionNode<?> node){
      return node instanceof IExecutionOperationContract;  
   }
   
   public static boolean isLoopInvariant(final IExecutionNode<?> node){
      return node instanceof IExecutionLoopInvariant;
   }
   
   public static boolean isDescendantOfMethodContract(final IExecutionNode<?> node){
      if(node==null)
         return false;
      else if(isMethodContract(node))
         return true;
      else
         return(isDescendantOfMethodContract(node.getParent()));
   }
   
   public static boolean isDescendantOfLoopInvariant(final IExecutionNode<?> node){
      if(node==null)
         return false;
      else if(isLoopInvariant(node))
         return true;
      else
         return(isDescendantOfLoopInvariant(node.getParent()));
   }
   
   public static boolean isLoopInvariantTermination(final IExecutionNode<?> node){
	   return true;
   }
   
   public static IExecutionLoopInvariant getLoopInvariantAncestor(final IExecutionNode<?> node){
      IExecutionNode<?> nod = node;
      while(nod!=null){
         if(isLoopInvariant(nod))
            return (IExecutionLoopInvariant)nod;
         else
            nod = nod.getParent();
      }
      return null;         
   }
   
}
