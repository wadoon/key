package de.tud.exploitgen.findsecret.counting;
/**
 * transform a ParametricPolytope object into iscc format.
 * for example: P := [n,m] -> { [i,j] : 0 <= i <= n && i <= j <= m };
				card P;
 * */
import java.util.List;

import de.tud.exploitgen.detectleak.simplifier.QuantifiableVarUnifier;
import de.tud.exploitgen.util.HeapHandler;
import de.tud.exploitgen.util.KEGConstant;
import de.tud.exploitgen.util.KeYResourceHandler;
import de.tud.exploitgen.util.TermParser;
import de.uka.ilkd.key.java.Services;
import de.uka.ilkd.key.logic.Term;

public class Term2IsccTransformer {
	public Services services;
	
	public Term2IsccTransformer(Services services) {
		super();
		this.services = services;
	}

	public String transformParaPolytope2Iscc(ParametricPolytope pp){
		String result = "";
		QVarPreprocessing qvUnifier = new QVarPreprocessing(pp.getConstraint(), services);		
		result += getParameters(pp)+ " -> {" + getVariables(pp) + ":" 
					+ new IsccExprTransformer(services).transformExpression2String(qvUnifier.preprocess()) + "};";
		return result;
	}
	
	/*
	 * set of parameters are bounded by []
	 * */
	private String getParameters(ParametricPolytope pp){
		String result = "[";
		List<String> parameters = pp.getParameters();
		if(!parameters.isEmpty()){
			for(int i=0; i<parameters.size()-1;i++)
				result += parameters.get(i)+",";
			result += parameters.get(parameters.size()-1).toString();
		}
		result +="]";
		return result;
	}
	
	/*
	 * set of variables are bounded by []
	 * */
	private String getVariables(ParametricPolytope pp){
		String result = "[";
		List<String> vars = pp.getVars();
		if(!vars.isEmpty()){
			for(int i=0; i<vars.size()-1;i++)
				result += vars.get(i)+",";
			result += vars.get(vars.size()-1).toString();
		}
		result +="]";
		return result;
	}
		
   
}
