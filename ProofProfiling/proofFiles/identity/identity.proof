\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Fri Feb 08 13:13:50 CET 2019
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_EXPAND
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_ON
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=10000
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=initialisation-initialisation\\:disableStaticInitialisation , wdChecks-wdChecks\\:off , reach-reach\\:on , moreSeqRules-moreSeqRules\\:off , sequences-sequences\\:on , Strings-Strings\\:on , runtimeExceptions-runtimeExceptions\\:allow , wdOperator-wdOperator\\:L , JavaCard-JavaCard\\:off , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , modelFields-modelFields\\:showSatisfiability , assertions-assertions\\:on , intRules-intRules\\:arithmeticSemanticsIgnoringOF , bigint-bigint\\:on , programRules-programRules\\:Java , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_NORMAL
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
"
}

\javaSource "src";

\proofObligation "#Proof Obligation Settings
#Fri Feb 08 13:13:50 CET 2019
name=Identity[Identity\\:\\:identity(int)].JML normal_behavior operation contract.0
contract=Identity[Identity\\:\\:identity(int)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "jakob" ) (keyVersion "90bb886cd7b78027c8f6703803461f09e5699bb9"))

(autoModeTime "255")

(branch "dummy ID"
(builtin "One Step Simplification" (formula "1") (newnames "n,self,result,exc,heapAtPre,o,f"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "inEqSimp_commuteLeq" (formula "5"))
(rule "assignment" (formula "8") (term "1"))
(builtin "One Step Simplification" (formula "8"))
(rule "Class_invariant_axiom_for_Identity" (formula "6") (inst "sk=sk_0") (ifseqformula "3"))
(branch "Use Axiom"
   (rule "true_left" (formula "6"))
   (rule "methodBodyExpand" (formula "7") (term "1") (newnames "heapBefore_identity,savedHeapBefore_identity,_nBefore_identity"))
   (builtin "One Step Simplification" (formula "7"))
   (rule "variableDeclarationAssign" (formula "7") (term "1"))
   (rule "variableDeclaration" (formula "7") (term "1") (newnames "i"))
   (rule "assignment" (formula "7") (term "1"))
   (builtin "One Step Simplification" (formula "7"))
   (builtin "Loop Invariant" (formula "7") (newnames "variant,b,heapBefore_LOOP,iBefore_LOOP,i_0,heap_After_LOOP,anon_heap_LOOP,o,f"))
   (branch "Invariant Initially Valid"
      (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "1")))
      (rule "leq_literals" (formula "7") (term "0"))
      (builtin "One Step Simplification" (formula "7"))
      (rule "inEqSimp_leqRight" (formula "7"))
      (rule "add_zero_right" (formula "1") (term "0"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
      (rule "inEqSimp_sepNegMonomial1" (formula "1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "0"))
      (rule "polySimp_elimOne" (formula "1") (term "0"))
      (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "6"))
      (rule "qeq_literals" (formula "1") (term "0"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "closeFalse" (formula "1"))
   )
   (branch "Body Preserves Invariant"
      (builtin "One Step Simplification" (formula "7"))
      (builtin "One Step Simplification" (formula "9"))
      (rule "andLeft" (formula "7"))
      (rule "impRight" (formula "10"))
      (rule "eqSymm" (formula "11") (term "1,0,0,1,1,1,0,1"))
      (rule "inEqSimp_commuteLeq" (formula "8"))
      (rule "inEqSimp_commuteLeq" (formula "9"))
      (rule "inEqSimp_commuteLeq" (formula "11") (term "0,0,1,1,0,1"))
      (rule "variableDeclarationAssign" (formula "1") (term "1"))
      (rule "variableDeclarationAssign" (formula "11") (term "1"))
      (rule "variableDeclaration" (formula "1") (term "1") (newnames "b_1"))
      (rule "variableDeclaration" (formula "11") (term "1") (newnames "exc_1"))
      (rule "assignment" (formula "11") (term "1"))
      (builtin "One Step Simplification" (formula "11"))
      (rule "variableDeclaration" (formula "11") (term "1") (newnames "thrownExc"))
      (rule "blockThrow" (formula "11") (term "1,0,0,1"))
      (rule "boxToDiamond" (formula "1") (term "1"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "notLeft" (formula "1"))
      (rule "less_than_comparison_simple" (formula "9") (term "1"))
      (builtin "One Step Simplification" (formula "9"))
      (rule "inEqSimp_ltToLeq" (formula "9") (term "0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,1,0"))
      (rule "polySimp_addComm1" (formula "9") (term "0,0,0,1,0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "9") (term "0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "9") (term "0,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "9") (term "0,0,0,1,0"))
      (rule "methodCallEmpty" (formula "9") (term "1"))
      (builtin "One Step Simplification" (formula "9"))
      (rule "emptyModality" (formula "9") (term "1"))
      (builtin "One Step Simplification" (formula "9"))
      (rule "notRight" (formula "9"))
      (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "1"))
      (rule "inEqSimp_homoInEq0" (formula "9") (term "0"))
      (rule "polySimp_pullOutFactor1b" (formula "9") (term "0,0"))
      (rule "add_literals" (formula "9") (term "1,1,0,0"))
      (rule "times_zero_1" (formula "9") (term "1,0,0"))
      (rule "add_zero_right" (formula "9") (term "0,0"))
      (rule "qeq_literals" (formula "9") (term "0"))
      (builtin "One Step Simplification" (formula "9"))
      (rule "true_left" (formula "9"))
      (rule "ifUnfold" (formula "10") (term "1") (inst "#boolv=x"))
      (rule "variableDeclaration" (formula "10") (term "1") (newnames "x"))
      (rule "less_than_comparison_simple" (formula "10") (term "1"))
      (builtin "One Step Simplification" (formula "10"))
      (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,1,0"))
      (rule "polySimp_addComm1" (formula "10") (term "0,0,0,1,0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "10") (term "0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "10") (term "0,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "10") (term "0,0,0,1,0"))
      (rule "replace_known_left" (formula "10") (term "0,0,1,0") (ifseqformula "1"))
      (builtin "One Step Simplification" (formula "10"))
      (rule "ifSplit" (formula "10"))
      (branch "if x true"
         (builtin "One Step Simplification" (formula "11"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "true_left" (formula "1"))
         (rule "assignmentAdditionInt" (formula "10") (term "1"))
         (builtin "One Step Simplification" (formula "10"))
         (rule "translateJavaAddInt" (formula "10") (term "0,1,0"))
         (rule "polySimp_addComm0" (formula "10") (term "0,1,0"))
         (rule "tryEmpty" (formula "10") (term "1"))
         (rule "methodCallEmpty" (formula "10") (term "1"))
         (rule "emptyModality" (formula "10") (term "1"))
         (builtin "One Step Simplification" (formula "10"))
         (rule "eqSymm" (formula "10") (term "1,0,0,1"))
         (rule "inEqSimp_commuteLeq" (formula "10") (term "1,0"))
         (rule "replace_known_left" (formula "10") (term "1,0") (ifseqformula "1"))
         (builtin "One Step Simplification" (formula "10"))
         (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "0"))
         (rule "mul_literals" (formula "10") (term "1,0"))
         (rule "inEqSimp_subsumption1" (formula "10") (term "0") (ifseqformula "8"))
         (rule "leq_literals" (formula "10") (term "0,0"))
         (builtin "One Step Simplification" (formula "10"))
         (rule "allRight" (formula "10") (inst "sk=f_0"))
         (rule "allRight" (formula "10") (inst "sk=o_0"))
         (rule "orRight" (formula "10"))
         (rule "pullOutSelect" (formula "11") (term "0") (inst "selectSK=f_0_0"))
         (rule "simplifySelectOfAnon" (formula "1"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "11")))
         (rule "applyEqReverse" (formula "12") (term "0") (ifseqformula "1"))
         (builtin "One Step Simplification" (formula "12"))
         (rule "closeTrue" (formula "12"))
      )
      (branch "if x false"
         (builtin "One Step Simplification" (formula "11"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "closeFalse" (formula "1"))
      )
   )
   (branch "Use Case"
      (builtin "One Step Simplification" (formula "9"))
      (builtin "One Step Simplification" (formula "7"))
      (rule "andLeft" (formula "7"))
      (rule "inEqSimp_commuteLeq" (formula "7"))
      (rule "inEqSimp_commuteLeq" (formula "8"))
      (rule "variableDeclarationAssign" (formula "10") (term "1"))
      (rule "variableDeclaration" (formula "10") (term "1") (newnames "b_1"))
      (rule "less_than_comparison_simple" (formula "10") (term "1"))
      (builtin "One Step Simplification" (formula "10"))
      (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,1,0"))
      (rule "polySimp_addComm1" (formula "10") (term "0,0,0,1,0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "10") (term "0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "10") (term "0,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "10") (term "0,0,0,1,0"))
      (rule "methodCallEmpty" (formula "10") (term "1"))
      (rule "emptyModality" (formula "10") (term "1"))
      (builtin "One Step Simplification" (formula "10"))
      (rule "impRight" (formula "10"))
      (rule "notLeft" (formula "1"))
      (rule "inEqSimp_geqRight" (formula "9"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
      (rule "mul_literals" (formula "1") (term "0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
      (rule "add_literals" (formula "1") (term "0,0,0"))
      (rule "add_zero_left" (formula "1") (term "0,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1"))
      (rule "polySimp_elimOne" (formula "1") (term "1"))
      (rule "inEqSimp_antiSymm" (formula "9") (ifseqformula "1"))
      (rule "applyEq" (formula "6") (term "0") (ifseqformula "9"))
      (rule "applyEq" (formula "9") (term "0") (ifseqformula "8"))
      (rule "inEqSimp_homoInEq1" (formula "9"))
      (rule "polySimp_pullOutFactor1" (formula "9") (term "0"))
      (rule "add_literals" (formula "9") (term "1,0"))
      (rule "times_zero_1" (formula "9") (term "0"))
      (rule "leq_literals" (formula "9"))
      (rule "true_left" (formula "9"))
      (rule "applyEq" (formula "1") (term "0") (ifseqformula "8"))
      (rule "inEqSimp_homoInEq0" (formula "1"))
      (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
      (rule "add_literals" (formula "1") (term "1,0"))
      (rule "times_zero_1" (formula "1") (term "0"))
      (rule "qeq_literals" (formula "1"))
      (rule "true_left" (formula "1"))
      (rule "methodCallReturn" (formula "9") (term "1"))
      (rule "assignment" (formula "9") (term "1"))
      (builtin "One Step Simplification" (formula "9"))
      (rule "methodCallEmpty" (formula "9") (term "1"))
      (rule "tryEmpty" (formula "9") (term "1"))
      (rule "emptyModality" (formula "9") (term "1"))
      (builtin "One Step Simplification" (formula "9"))
      (rule "eqSymm" (formula "9") (term "0"))
      (rule "replace_known_left" (formula "9") (term "0") (ifseqformula "7"))
      (builtin "One Step Simplification" (formula "9"))
      (rule "Class_invariant_axiom_for_Identity" (formula "9") (inst "sk=sk_1") (ifseqformula "3"))
      (branch "Use Axiom"
         (rule "closeTrue" (formula "9"))
      )
      (branch "Show Axiom Satisfiability"
         (builtin "One Step Simplification" (formula "9"))
         (rule "closeTrue" (formula "9"))
      )
   )
)
(branch "Show Axiom Satisfiability"
   (builtin "One Step Simplification" (formula "7"))
   (rule "closeTrue" (formula "7"))
)
)
}
