\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Thu Jan 17 11:51:33 CET 2019
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_EXPAND
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_ON
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=10000
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=initialisation-initialisation\\:disableStaticInitialisation , wdChecks-wdChecks\\:off , reach-reach\\:on , moreSeqRules-moreSeqRules\\:off , sequences-sequences\\:on , Strings-Strings\\:on , mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off , runtimeExceptions-runtimeExceptions\\:allow , wdOperator-wdOperator\\:L , JavaCard-JavaCard\\:off , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , modelFields-modelFields\\:showSatisfiability , assertions-assertions\\:on , intRules-intRules\\:arithmeticSemanticsIgnoringOF , bigint-bigint\\:on , programRules-programRules\\:Java
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
"
}

\javaSource "arrayMax_java";

\proofObligation "#Proof Obligation Settings
#Thu Jan 17 11:51:33 CET 2019
name=ArrayMax[ArrayMax\\:\\:max([I)].JML normal_behavior operation contract.0
contract=ArrayMax[ArrayMax\\:\\:max([I)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "jakob" ) (keyVersion "90bb886cd7b78027c8f6703803461f09e5699bb9"))
(keyLog "1" (keyUser "jakob" ) (keyVersion "90bb886cd7b78027c8f6703803461f09e5699bb9"))

(autoModeTime "1716")

(branch "dummy ID"
(builtin "One Step Simplification" (formula "1") (newnames "a,result,exc,heapAtPre,o,f"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "eqSymm" (formula "5") (term "1,0,0,1,0,1"))
(rule "eqSymm" (formula "5") (term "1,0,1,1,0,0,0,1"))
(rule "replace_known_right" (formula "2") (term "0") (ifseqformula "4"))
(builtin "One Step Simplification" (formula "2"))
(rule "inEqSimp_ltToLeq" (formula "5") (term "1,0,0,0,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1,0,0,0,0,0,0,1"))
(rule "inEqSimp_gtToGeq" (formula "5") (term "0,1,0,0,0,1"))
(rule "times_zero_1" (formula "5") (term "1,0,0,0,1,0,0,0,1"))
(rule "add_zero_right" (formula "5") (term "0,0,0,1,0,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "5") (term "1,0,0,1,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1,0,0,1,1,0,0,0,1"))
(rule "inEqSimp_commuteGeq" (formula "5") (term "1,0,0,0,0,0,1"))
(rule "assignment" (formula "5") (term "1"))
(builtin "One Step Simplification" (formula "5"))
(rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,0,0,1,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "5") (term "1,1,0,0,1,1,0,0,0,1"))
(rule "polySimp_rightDist" (formula "5") (term "1,1,0,0,1,1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,0,0,1,1,0,0,0,1"))
(rule "mul_literals" (formula "5") (term "0,1,1,0,0,1,1,0,0,0,1"))
(rule "polySimp_elimOne" (formula "5") (term "1,1,1,0,0,1,1,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial1" (formula "5") (term "0,1,0,0,0,1"))
(rule "mul_literals" (formula "5") (term "1,0,1,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,0,0,0,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "5") (term "1,1,0,0,0,0,0,0,1"))
(rule "polySimp_rightDist" (formula "5") (term "1,1,0,0,0,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,0,0,0,0,0,0,1"))
(rule "mul_literals" (formula "5") (term "0,1,1,0,0,0,0,0,0,1"))
(rule "polySimp_elimOne" (formula "5") (term "1,1,1,0,0,0,0,0,0,1"))
(rule "nnf_imp2or" (formula "5") (term "0,0,0,0,0,1"))
(rule "nnf_notAnd" (formula "5") (term "0,0,0,0,0,0,1"))
(rule "inEqSimp_notLeq" (formula "5") (term "1,0,0,0,0,0,0,1"))
(rule "polySimp_rightDist" (formula "5") (term "1,0,0,1,0,0,0,0,0,0,1"))
(rule "mul_literals" (formula "5") (term "0,1,0,0,1,0,0,0,0,0,0,1"))
(rule "polySimp_addAssoc" (formula "5") (term "0,0,1,0,0,0,0,0,0,1"))
(rule "add_literals" (formula "5") (term "0,0,0,1,0,0,0,0,0,0,1"))
(rule "add_zero_left" (formula "5") (term "0,0,1,0,0,0,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial1" (formula "5") (term "1,0,0,0,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0,0,0,0,0,1"))
(rule "polySimp_elimOne" (formula "5") (term "1,1,0,0,0,0,0,0,1"))
(rule "inEqSimp_notGeq" (formula "5") (term "0,0,0,0,0,0,0,1"))
(rule "times_zero_1" (formula "5") (term "1,0,0,0,0,0,0,0,0,0,1"))
(rule "add_zero_right" (formula "5") (term "0,0,0,0,0,0,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0,0,0,0,0,0,1"))
(rule "mul_literals" (formula "5") (term "1,0,0,0,0,0,0,0,1"))
(rule "methodBodyExpand" (formula "5") (term "1") (newnames "heapBefore_max,savedHeapBefore_max,_aBefore_max"))
(builtin "One Step Simplification" (formula "5"))
(rule "ifUnfold" (formula "5") (term "1") (inst "#boolv=x"))
(rule "variableDeclaration" (formula "5") (term "1") (newnames "x"))
(rule "compound_equality_comparison_1" (formula "5") (term "1") (inst "#v0=x_1"))
(rule "variableDeclarationAssign" (formula "5") (term "1"))
(rule "variableDeclaration" (formula "5") (term "1") (newnames "x_1"))
(rule "assignment_read_length" (formula "5") (term "1"))
(branch "Normal Execution (_a != null)"
   (builtin "One Step Simplification" (formula "6"))
   (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "4")))
   (rule "false_right" (formula "5"))
   (rule "equality_comparison_simple" (formula "5") (term "1"))
   (builtin "One Step Simplification" (formula "5"))
   (rule "ifSplit" (formula "5"))
   (branch "if x true"
      (builtin "One Step Simplification" (formula "6"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "methodCallReturn" (formula "6") (term "1"))
      (builtin "One Step Simplification" (formula "6"))
      (rule "assignment" (formula "6") (term "1"))
      (builtin "One Step Simplification" (formula "6"))
      (rule "methodCallEmpty" (formula "6") (term "1"))
      (rule "tryEmpty" (formula "6") (term "1"))
      (rule "emptyModality" (formula "6") (term "1"))
      (builtin "One Step Simplification" (formula "6"))
      (rule "applyEq" (formula "6") (term "0,0,1") (ifseqformula "1"))
      (rule "qeq_literals" (formula "6") (term "0,1"))
      (builtin "One Step Simplification" (formula "6"))
      (rule "allRight" (formula "6") (inst "sk=j_0"))
      (rule "orRight" (formula "6"))
      (rule "orRight" (formula "6"))
      (rule "inEqSimp_leqRight" (formula "8"))
      (rule "times_zero_1" (formula "1") (term "1,0,0"))
      (rule "add_zero_right" (formula "1") (term "0,0"))
      (rule "inEqSimp_geqRight" (formula "8"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
      (rule "polySimp_addComm1" (formula "1") (term "0"))
      (rule "inEqSimp_leqRight" (formula "8"))
      (rule "mul_literals" (formula "1") (term "1,0,0"))
      (rule "add_literals" (formula "1") (term "0,0"))
      (rule "add_zero_left" (formula "1") (term "0"))
      (rule "applyEq" (formula "2") (term "0,1,0") (ifseqformula "4"))
      (rule "times_zero_2" (formula "2") (term "1,0"))
      (rule "add_zero_right" (formula "2") (term "0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "3"))
      (rule "mul_literals" (formula "3") (term "1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "2"))
      (rule "mul_literals" (formula "2") (term "1"))
      (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "1"))
      (rule "qeq_literals" (formula "2") (term "0"))
      (builtin "One Step Simplification" (formula "2"))
      (rule "closeFalse" (formula "2"))
   )
   (branch "if x false"
      (builtin "One Step Simplification" (formula "6"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "notLeft" (formula "1"))
      (rule "variableDeclarationMult" (formula "6") (term "1"))
      (rule "variableDeclarationAssign" (formula "6") (term "1"))
      (rule "variableDeclaration" (formula "6") (term "1") (newnames "max_1"))
      (rule "assignment_array2" (formula "6") (term "1"))
      (branch "Normal Execution (_a != null)"
         (builtin "One Step Simplification" (formula "7"))
         (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "5")))
         (rule "less_literals" (formula "6") (term "1"))
         (builtin "One Step Simplification" (formula "6"))
         (rule "inEqSimp_leqRight" (formula "6"))
         (rule "times_zero_1" (formula "1") (term "1,0,0"))
         (rule "add_zero_right" (formula "1") (term "0,0"))
         (rule "variableDeclarationAssign" (formula "7") (term "1"))
         (rule "variableDeclaration" (formula "7") (term "1") (newnames "i"))
         (rule "assignment" (formula "7") (term "1"))
         (builtin "One Step Simplification" (formula "7"))
         (rule "blockEmpty" (formula "7") (term "1"))
         (rule "inEqSimp_sepPosMonomial1" (formula "1"))
         (rule "mul_literals" (formula "1") (term "1"))
         (rule "inEqSimp_contradEq7" (formula "5") (ifseqformula "1"))
         (rule "times_zero_1" (formula "5") (term "1,0,0"))
         (rule "add_zero_right" (formula "5") (term "0,0"))
         (rule "leq_literals" (formula "5") (term "0"))
         (builtin "One Step Simplification" (formula "5"))
         (rule "false_right" (formula "5"))
         (builtin "Loop Invariant" (formula "6") (newnames "variant,b,heapBefore_LOOP,iBefore_LOOP,max_1Before_LOOP,i_0,max_1_0,heap_After_LOOP,anon_heap_LOOP,o,f"))
         (branch "Invariant Initially Valid"
            (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "2")))
            (rule "eqSymm" (formula "6") (term "1,0,1"))
            (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0,1,0"))
            (rule "mul_literals" (formula "6") (term "1,0,0,1,0,0,1,0"))
            (rule "add_literals" (formula "6") (term "0,0,1,0,0,1,0"))
            (rule "add_zero_left" (formula "6") (term "0,1,0,0,1,0"))
            (rule "inEqSimp_ltToLeq" (formula "6") (term "1,0,0,1"))
            (rule "mul_literals" (formula "6") (term "1,0,0,1,0,0,1"))
            (rule "add_literals" (formula "6") (term "0,0,1,0,0,1"))
            (rule "add_zero_left" (formula "6") (term "0,1,0,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0"))
            (rule "replace_known_left" (formula "6") (term "0,0") (ifseqformula "1"))
            (builtin "One Step Simplification" (formula "6"))
            (rule "inEqSimp_commuteGeq" (formula "6") (term "1,0,0"))
            (rule "nnf_imp2or" (formula "6") (term "0,0"))
            (rule "nnf_notAnd" (formula "6") (term "0,0,0"))
            (rule "inEqSimp_notLeq" (formula "6") (term "1,0,0,0"))
            (rule "times_zero_1" (formula "6") (term "1,0,0,1,0,0,0"))
            (rule "add_zero_right" (formula "6") (term "0,0,1,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "6") (term "1,0,0,0"))
            (rule "mul_literals" (formula "6") (term "1,1,0,0,0"))
            (rule "inEqSimp_notGeq" (formula "6") (term "0,0,0,0"))
            (rule "times_zero_1" (formula "6") (term "1,0,0,0,0,0,0"))
            (rule "add_zero_right" (formula "6") (term "0,0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,0,0"))
            (rule "mul_literals" (formula "6") (term "1,0,0,0,0"))
            (rule "inEqSimp_or_antiSymm0" (formula "6") (term "0,0,0"))
            (rule "add_literals" (formula "6") (term "0,0,0,0,0"))
            (builtin "One Step Simplification" (formula "6"))
            (rule "add_literals" (formula "6") (term "1,0,0,0,0"))
            (rule "andRight" (formula "6"))
            (branch "Case 1"
               (rule "allRight" (formula "6") (inst "sk=j_0"))
               (rule "orRight" (formula "6"))
               (rule "notRight" (formula "6"))
               (rule "inEqSimp_leqRight" (formula "7"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
               (rule "applyEq" (formula "1") (term "0,2,1,0") (ifseqformula "2"))
               (rule "polySimp_pullOutFactor2b" (formula "1") (term "0"))
               (rule "add_literals" (formula "1") (term "1,1,0"))
               (rule "times_zero_1" (formula "1") (term "1,0"))
               (rule "add_zero_right" (formula "1") (term "0"))
               (rule "qeq_literals" (formula "1"))
               (rule "closeFalse" (formula "1"))
            )
            (branch "Case 2"
               (rule "nnf_ex2all" (formula "6"))
               (rule "nnf_notAnd" (formula "1") (term "0"))
               (rule "nnf_notAnd" (formula "1") (term "0,0"))
               (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
               (rule "times_zero_1" (formula "1") (term "1,0,0,1,0,0"))
               (rule "add_zero_right" (formula "1") (term "0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
               (rule "mul_literals" (formula "1") (term "1,1,0,0"))
               (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
               (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0"))
               (rule "add_zero_right" (formula "1") (term "0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
               (rule "mul_literals" (formula "1") (term "1,0,0,0"))
               (rule "inEqSimp_or_antiSymm0" (formula "1") (term "0,0"))
               (rule "add_literals" (formula "1") (term "1,0,1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0,0,0"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "commute_or" (formula "1") (term "0"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "closeFalse" (formula "1"))
            )
         )
         (branch "Body Preserves Invariant"
            (builtin "One Step Simplification" (formula "6"))
            (builtin "One Step Simplification" (formula "8"))
            (rule "translateJavaSubInt" (formula "8") (term "0,1,1,1,0,1,1"))
            (rule "translateJavaSubInt" (formula "8") (term "0,1,1,1,0,1"))
            (rule "andLeft" (formula "6"))
            (rule "impRight" (formula "9"))
            (rule "andLeft" (formula "7"))
            (rule "exLeft" (formula "9") (inst "sk=j_0"))
            (rule "andLeft" (formula "9"))
            (rule "andLeft" (formula "9"))
            (rule "eqSymm" (formula "13") (term "1,0,0,1,0,1,1,0,1"))
            (rule "eqSymm" (formula "13") (term "1,0,1,0,0,1,1,0,1"))
            (rule "eqSymm" (formula "11"))
            (rule "polySimp_elimSub" (formula "13") (term "0,1,1,1,0"))
            (rule "polySimp_elimSub" (formula "13") (term "0,1,1,1,0,1"))
            (rule "polySimp_addComm0" (formula "13") (term "0,1,1,1,0"))
            (rule "polySimp_addComm0" (formula "13") (term "0,1,1,1,0,1"))
            (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0,1,0,0,1,1,0,1"))
            (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0,1,0,0,1,1,0,1"))
            (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0,1,0,0,0,1,1,0,1"))
            (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0,1,0,0,0,1,1,0,1"))
            (rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "10"))
            (rule "polySimp_mulComm0" (formula "10") (term "1,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0,0,1,1,0,1"))
            (rule "inEqSimp_commuteGeq" (formula "13") (term "1,0,1,0,0,0,1,1,0,1"))
            (rule "inEqSimp_commuteGeq" (formula "8") (term "1,0"))
            (rule "inEqSimp_commuteLeq" (formula "7"))
            (rule "variableDeclarationAssign" (formula "1") (term "1"))
            (rule "variableDeclarationAssign" (formula "13") (term "1"))
            (rule "variableDeclaration" (formula "1") (term "1") (newnames "b_1"))
            (rule "variableDeclaration" (formula "13") (term "1") (newnames "exc_1"))
            (rule "assignment" (formula "13") (term "1"))
            (builtin "One Step Simplification" (formula "13"))
            (rule "variableDeclaration" (formula "13") (term "1") (newnames "thrownExc"))
            (rule "blockThrow" (formula "13") (term "1,0,0,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "8") (term "1,1,0,0"))
            (rule "mul_literals" (formula "8") (term "0,1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "10"))
            (rule "polySimp_mulComm0" (formula "10") (term "1"))
            (rule "polySimp_rightDist" (formula "10") (term "1"))
            (rule "mul_literals" (formula "10") (term "0,1"))
            (rule "polySimp_mulLiterals" (formula "10") (term "1,1"))
            (rule "polySimp_elimOne" (formula "10") (term "1,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,1,0,0,0,1,1,0,1"))
            (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0,1,0,0,0,1,1,0,1"))
            (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0,1,0,0,0,1,1,0,1"))
            (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0,1,0,0,0,1,1,0,1"))
            (rule "mul_literals" (formula "13") (term "0,1,1,0,0,1,0,0,0,1,1,0,1"))
            (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0,1,0,0,0,1,1,0,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,1,0,0,1,1,0,1"))
            (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0,1,0,0,1,1,0,1"))
            (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0,1,0,0,1,1,0,1"))
            (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0,1,0,0,1,1,0,1"))
            (rule "mul_literals" (formula "13") (term "0,1,1,0,0,1,0,0,1,1,0,1"))
            (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0,1,0,0,1,1,0,1"))
            (rule "pullOutSelect" (formula "11") (term "0") (inst "selectSK=arr_0"))
            (rule "simplifySelectOfAnon" (formula "11"))
            (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "13")) (ifInst ""  (formula "4")))
            (rule "applyEqReverse" (formula "12") (term "0") (ifseqformula "11"))
            (rule "hideAuxiliaryEq" (formula "11"))
            (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "10"))
            (rule "times_zero_1" (formula "9") (term "0,0"))
            (rule "add_zero_left" (formula "9") (term "0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "9"))
            (rule "mul_literals" (formula "9") (term "1"))
            (rule "boxToDiamond" (formula "1") (term "1"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "notLeft" (formula "1"))
            (rule "nnf_imp2or" (formula "7") (term "0"))
            (rule "nnf_notAnd" (formula "7") (term "0,0"))
            (rule "inEqSimp_notGeq" (formula "7") (term "0,0,0"))
            (rule "times_zero_1" (formula "7") (term "1,0,0,0,0,0"))
            (rule "add_zero_right" (formula "7") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0"))
            (rule "mul_literals" (formula "7") (term "1,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "7") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "7") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "7") (term "0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "7") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "7") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0"))
            (rule "polySimp_elimOne" (formula "7") (term "1,1,0,0"))
            (rule "nnf_imp2or" (formula "14") (term "0,1,0,0,0,1,1,0,1"))
            (rule "nnf_notAnd" (formula "14") (term "0,0,1,0,0,0,1,1,0,1"))
            (rule "inEqSimp_notLeq" (formula "14") (term "1,0,0,1,0,0,0,1,1,0,1"))
            (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,0,1,0,0,0,1,1,0,1"))
            (rule "mul_literals" (formula "14") (term "0,1,0,0,1,0,0,1,0,0,0,1,1,0,1"))
            (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0,1,0,0,0,1,1,0,1"))
            (rule "add_literals" (formula "14") (term "0,0,0,1,0,0,1,0,0,0,1,1,0,1"))
            (rule "add_zero_left" (formula "14") (term "0,0,1,0,0,1,0,0,0,1,1,0,1"))
            (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0,1,0,0,0,1,1,0,1"))
            (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,1,0,0,0,1,1,0,1"))
            (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,1,0,0,0,1,1,0,1"))
            (rule "inEqSimp_notGeq" (formula "14") (term "0,0,0,1,0,0,0,1,1,0,1"))
            (rule "times_zero_1" (formula "14") (term "1,0,0,0,0,0,1,0,0,0,1,1,0,1"))
            (rule "add_zero_right" (formula "14") (term "0,0,0,0,0,1,0,0,0,1,1,0,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0,1,0,0,0,1,1,0,1"))
            (rule "mul_literals" (formula "14") (term "1,0,0,0,1,0,0,0,1,1,0,1"))
            (rule "compound_less_than_comparison_2" (formula "12") (term "1") (inst "#v0=x") (inst "#v1=x_1"))
            (rule "variableDeclarationAssign" (formula "12") (term "1"))
            (rule "variableDeclaration" (formula "12") (term "1") (newnames "x_2"))
            (rule "assignment" (formula "12") (term "1"))
            (builtin "One Step Simplification" (formula "12"))
            (rule "variableDeclarationAssign" (formula "12") (term "1"))
            (rule "variableDeclaration" (formula "12") (term "1") (newnames "x_3"))
            (rule "assignment_read_length" (formula "12") (term "1"))
            (branch "Normal Execution (_a != null)"
               (builtin "One Step Simplification" (formula "13"))
               (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "14")))
               (rule "false_right" (formula "12"))
               (rule "less_than_comparison_simple" (formula "12") (term "1"))
               (builtin "One Step Simplification" (formula "12"))
               (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,1,0"))
               (rule "polySimp_addComm1" (formula "12") (term "0,0,0,1,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "12") (term "0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "12") (term "0,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "12") (term "0,0,0,1,0"))
               (rule "methodCallEmpty" (formula "12") (term "1"))
               (builtin "One Step Simplification" (formula "12"))
               (rule "emptyModality" (formula "12") (term "1"))
               (builtin "One Step Simplification" (formula "12"))
               (rule "notRight" (formula "12"))
               (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "1"))
               (rule "inEqSimp_homoInEq0" (formula "7") (term "0"))
               (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0"))
               (rule "add_literals" (formula "7") (term "1,1,0,0"))
               (rule "times_zero_1" (formula "7") (term "1,0,0"))
               (rule "add_zero_right" (formula "7") (term "0,0"))
               (rule "qeq_literals" (formula "7") (term "0"))
               (builtin "One Step Simplification" (formula "7"))
               (rule "true_left" (formula "7"))
               (rule "arrayLengthNotNegative" (formula "2") (term "0"))
               (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "3"))
               (rule "leq_literals" (formula "2") (term "0"))
               (builtin "One Step Simplification" (formula "2"))
               (rule "true_left" (formula "2"))
               (rule "arrayLengthIsAnInt" (formula "2") (term "0"))
               (builtin "One Step Simplification" (formula "2"))
               (rule "true_left" (formula "2"))
               (rule "ifUnfold" (formula "13") (term "1") (inst "#boolv=x"))
               (rule "variableDeclaration" (formula "13") (term "1") (newnames "x_4"))
               (rule "compound_less_than_comparison_2" (formula "13") (term "1") (inst "#v0=x_5") (inst "#v1=x_6"))
               (rule "variableDeclarationAssign" (formula "13") (term "1"))
               (rule "variableDeclaration" (formula "13") (term "1") (newnames "x_5"))
               (rule "assignment" (formula "13") (term "1"))
               (builtin "One Step Simplification" (formula "13"))
               (rule "variableDeclarationAssign" (formula "13") (term "1"))
               (rule "variableDeclaration" (formula "13") (term "1") (newnames "x_6"))
               (rule "assignment_read_length" (formula "13") (term "1"))
               (branch "Normal Execution (_a != null)"
                  (builtin "One Step Simplification" (formula "14"))
                  (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "12")))
                  (rule "false_right" (formula "13"))
                  (rule "less_than_comparison_simple" (formula "13") (term "1"))
                  (builtin "One Step Simplification" (formula "13"))
                  (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,1,0"))
                  (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,1,0"))
                  (rule "polySimp_addComm1" (formula "13") (term "0,0,0,1,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "0,0,1,0"))
                  (rule "polySimp_mulLiterals" (formula "13") (term "0,0,0,1,0"))
                  (rule "polySimp_elimOne" (formula "13") (term "0,0,0,1,0"))
                  (rule "replace_known_left" (formula "13") (term "0,0,1,0") (ifseqformula "1"))
                  (builtin "One Step Simplification" (formula "13"))
                  (rule "allLeft" (formula "7") (inst "t=j_0"))
                  (rule "replaceKnownSelect_taclet1010_0" (formula "7") (term "0,1"))
                  (rule "replaceKnownAuxiliaryConstant_taclet1010_1" (formula "7") (term "0,1"))
                  (rule "applyEq" (formula "7") (term "0,1") (ifseqformula "12"))
                  (rule "inEqSimp_homoInEq0" (formula "7") (term "1"))
                  (rule "polySimp_pullOutFactor1" (formula "7") (term "0,1"))
                  (rule "add_literals" (formula "7") (term "1,0,1"))
                  (rule "times_zero_1" (formula "7") (term "0,1"))
                  (rule "qeq_literals" (formula "7") (term "1"))
                  (builtin "One Step Simplification" (formula "7"))
                  (rule "true_left" (formula "7"))
                  (rule "ifSplit" (formula "13"))
                  (branch "if x_4 true"
                     (builtin "One Step Simplification" (formula "14"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "true_left" (formula "1"))
                     (rule "ifUnfold" (formula "13") (term "1") (inst "#boolv=x"))
                     (rule "variableDeclaration" (formula "13") (term "1") (newnames "x_7"))
                     (rule "compound_greater_than_comparison_1" (formula "13") (term "1") (inst "#v0=x_8"))
                     (rule "variableDeclarationAssign" (formula "13") (term "1"))
                     (rule "variableDeclaration" (formula "13") (term "1") (newnames "x_8"))
                     (rule "assignment_array2" (formula "13") (term "1"))
                     (branch "Normal Execution (_a != null)"
                        (builtin "One Step Simplification" (formula "14"))
                        (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "12")))
                        (rule "orRight" (formula "13"))
                        (rule "inEqSimp_ltRight" (formula "14"))
                        (rule "times_zero_1" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "inEqSimp_leqRight" (formula "14"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                        (rule "pullOutSelect" (formula "15") (term "0,1,0") (inst "selectSK=arr_1"))
                        (rule "simplifySelectOfAnon" (formula "1"))
                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "15")) (ifInst ""  (formula "7")))
                        (rule "applyEqReverse" (formula "16") (term "0,1,0") (ifseqformula "1"))
                        (rule "hideAuxiliaryEq" (formula "1"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1"))
                        (rule "polySimp_rightDist" (formula "1") (term "1"))
                        (rule "mul_literals" (formula "1") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                        (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "9"))
                        (rule "leq_literals" (formula "1") (term "0"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "greater_than_comparison_simple" (formula "13") (term "1"))
                        (builtin "One Step Simplification" (formula "13"))
                        (rule "inEqSimp_gtToGeq" (formula "13") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,1,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "0,0,1,0"))
                        (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,1,0"))
                        (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0"))
                        (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,1,0"))
                        (rule "ifSplit" (formula "13"))
                        (branch "if x_7 true"
                           (builtin "One Step Simplification" (formula "14"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "assignment_array2" (formula "14") (term "1"))
                           (branch "Normal Execution (_a != null)"
                              (builtin "One Step Simplification" (formula "15"))
                              (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "13")))
                              (rule "replaceKnownSelect_taclet00001010_2" (formula "15") (term "0,1,0"))
                              (rule "replaceKnownAuxiliaryConstant_taclet00001010_3" (formula "15") (term "0,1,0"))
                              (rule "orRight" (formula "14"))
                              (rule "inEqSimp_ltRight" (formula "15"))
                              (rule "times_zero_1" (formula "1") (term "0,0"))
                              (rule "add_zero_left" (formula "1") (term "0"))
                              (rule "inEqSimp_leqRight" (formula "15"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1"))
                              (rule "polySimp_rightDist" (formula "1") (term "1"))
                              (rule "mul_literals" (formula "1") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                              (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                              (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "10"))
                              (rule "leq_literals" (formula "1") (term "0"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "true_left" (formula "1"))
                              (rule "preincrement" (formula "14") (term "1"))
                              (rule "compound_int_cast_expression" (formula "14") (term "1") (inst "#v=x"))
                              (rule "variableDeclarationAssign" (formula "14") (term "1"))
                              (rule "variableDeclaration" (formula "14") (term "1") (newnames "x_9"))
                              (rule "remove_parentheses_right" (formula "14") (term "1"))
                              (rule "assignmentAdditionInt" (formula "14") (term "1"))
                              (builtin "One Step Simplification" (formula "14"))
                              (rule "translateJavaAddInt" (formula "14") (term "0,1,0"))
                              (rule "polySimp_addComm0" (formula "14") (term "0,1,0"))
                              (rule "widening_identity_cast_5" (formula "14") (term "1"))
                              (rule "assignment" (formula "14") (term "1"))
                              (builtin "One Step Simplification" (formula "14"))
                              (rule "tryEmpty" (formula "14") (term "1"))
                              (rule "methodCallEmpty" (formula "14") (term "1"))
                              (rule "emptyModality" (formula "14") (term "1"))
                              (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "2")))
                              (rule "eqSymm" (formula "14") (term "1,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "14") (term "0,0,1"))
                              (rule "polySimp_rightDist" (formula "14") (term "0,0,1"))
                              (rule "mul_literals" (formula "14") (term "0,0,0,1"))
                              (rule "polySimp_addAssoc" (formula "14") (term "1,1,0,0,1,0,0"))
                              (rule "add_literals" (formula "14") (term "0,1,1,0,0,1,0,0"))
                              (rule "add_zero_left" (formula "14") (term "1,1,0,0,1,0,0"))
                              (rule "precOfInt" (formula "14") (term "1"))
                              (rule "inEqSimp_ltToLeq" (formula "14") (term "1,1"))
                              (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,1"))
                              (rule "polySimp_mulAssoc" (formula "14") (term "0,1,0,0,1,1"))
                              (rule "polySimp_mulComm0" (formula "14") (term "0,0,1,0,0,1,1"))
                              (rule "polySimp_mulLiterals" (formula "14") (term "0,1,0,0,1,1"))
                              (rule "polySimp_elimOne" (formula "14") (term "0,1,0,0,1,1"))
                              (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,1"))
                              (rule "polySimp_addAssoc" (formula "14") (term "0,1,1"))
                              (rule "polySimp_addComm1" (formula "14") (term "0,0,1,1"))
                              (rule "polySimp_pullOutFactor2b" (formula "14") (term "0,1,1"))
                              (rule "add_literals" (formula "14") (term "1,1,0,1,1"))
                              (rule "times_zero_1" (formula "14") (term "1,0,1,1"))
                              (rule "add_zero_right" (formula "14") (term "0,1,1"))
                              (rule "polySimp_addAssoc" (formula "14") (term "0,1,1"))
                              (rule "polySimp_addComm1" (formula "14") (term "0,0,1,1"))
                              (rule "add_literals" (formula "14") (term "0,0,0,1,1"))
                              (rule "add_zero_left" (formula "14") (term "0,0,1,1"))
                              (rule "polySimp_pullOutFactor1" (formula "14") (term "0,1,1"))
                              (rule "add_literals" (formula "14") (term "1,0,1,1"))
                              (rule "times_zero_1" (formula "14") (term "0,1,1"))
                              (rule "leq_literals" (formula "14") (term "1,1"))
                              (builtin "One Step Simplification" (formula "14"))
                              (rule "inEqSimp_homoInEq0" (formula "14") (term "1"))
                              (rule "mul_literals" (formula "14") (term "1,0,1"))
                              (rule "add_zero_right" (formula "14") (term "0,1"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1"))
                              (rule "polySimp_mulComm0" (formula "14") (term "1,1"))
                              (rule "polySimp_rightDist" (formula "14") (term "1,1"))
                              (rule "mul_literals" (formula "14") (term "0,1,1"))
                              (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1"))
                              (rule "polySimp_elimOne" (formula "14") (term "1,1,1"))
                              (rule "replace_known_left" (formula "14") (term "1") (ifseqformula "2"))
                              (builtin "One Step Simplification" (formula "14"))
                              (rule "andRight" (formula "14"))
                              (branch "Case 1"
                                 (rule "andRight" (formula "14"))
                                 (branch "Case 1"
                                    (rule "allRight" (formula "14") (inst "sk=j_1"))
                                    (rule "orRight" (formula "14"))
                                    (rule "orRight" (formula "14"))
                                    (rule "inEqSimp_leqRight" (formula "16"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                    (rule "inEqSimp_leqRight" (formula "15"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0"))
                                    (rule "inEqSimp_geqRight" (formula "16"))
                                    (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                    (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                    (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0,0"))
                                    (rule "add_zero_left" (formula "1") (term "0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                                    (rule "polySimp_mulComm0" (formula "3") (term "1"))
                                    (rule "polySimp_rightDist" (formula "3") (term "1"))
                                    (rule "mul_literals" (formula "3") (term "0,1"))
                                    (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                                    (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                    (rule "polySimp_elimOne" (formula "1") (term "1"))
                                    (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_2"))
                                    (rule "simplifySelectOfAnon" (formula "3"))
                                    (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "17")) (ifInst ""  (formula "9")))
                                    (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                                    (rule "hideAuxiliaryEq" (formula "3"))
                                    (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "1"))
                                    (rule "times_zero_1" (formula "2") (term "0,0"))
                                    (rule "add_zero_left" (formula "2") (term "0"))
                                    (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "13"))
                                    (rule "leq_literals" (formula "2") (term "0"))
                                    (builtin "One Step Simplification" (formula "2"))
                                    (rule "true_left" (formula "2"))
                                    (rule "allLeft" (formula "11") (inst "t=j_1"))
                                    (rule "replaceKnownSelect_taclet000000001010_4" (formula "11") (term "0,1"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet000000001010_5" (formula "11") (term "0,1"))
                                    (rule "inEqSimp_contradInEq1" (formula "11") (term "0,0") (ifseqformula "2"))
                                    (rule "qeq_literals" (formula "11") (term "0,0,0"))
                                    (builtin "One Step Simplification" (formula "11"))
                                    (rule "cut_direct" (formula "11") (term "0"))
                                    (branch "CUT: j_1 >= i_0 TRUE"
                                       (builtin "One Step Simplification" (formula "12"))
                                       (rule "true_left" (formula "12"))
                                       (rule "inEqSimp_antiSymm" (formula "11") (ifseqformula "1"))
                                       (rule "applyEq" (formula "12") (term "0") (ifseqformula "11"))
                                       (rule "inEqSimp_homoInEq1" (formula "12"))
                                       (rule "polySimp_pullOutFactor1" (formula "12") (term "0"))
                                       (rule "add_literals" (formula "12") (term "1,0"))
                                       (rule "times_zero_1" (formula "12") (term "0"))
                                       (rule "leq_literals" (formula "12"))
                                       (rule "true_left" (formula "12"))
                                       (rule "applyEqRigid" (formula "2") (term "0") (ifseqformula "11"))
                                       (rule "applyEq" (formula "1") (term "0") (ifseqformula "11"))
                                       (rule "inEqSimp_homoInEq0" (formula "1"))
                                       (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
                                       (rule "add_literals" (formula "1") (term "1,0"))
                                       (rule "times_zero_1" (formula "1") (term "0"))
                                       (rule "qeq_literals" (formula "1"))
                                       (rule "true_left" (formula "1"))
                                       (rule "applyEq" (formula "2") (term "0,2,0") (ifseqformula "10"))
                                       (rule "inEqSimp_homoInEq1" (formula "2"))
                                       (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                                       (rule "add_literals" (formula "2") (term "1,1,0"))
                                       (rule "times_zero_1" (formula "2") (term "1,0"))
                                       (rule "add_zero_right" (formula "2") (term "0"))
                                       (rule "leq_literals" (formula "2"))
                                       (rule "closeFalse" (formula "2"))
                                    )
                                    (branch "CUT: j_1 >= i_0 FALSE"
                                       (builtin "One Step Simplification" (formula "11"))
                                       (rule "inEqSimp_geqRight" (formula "17"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                       (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                       (rule "polySimp_rightDist" (formula "1") (term "1"))
                                       (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                       (rule "mul_literals" (formula "1") (term "0,1"))
                                       (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                       (rule "inEqSimp_subsumption0" (formula "2") (ifseqformula "1"))
                                       (rule "inEqSimp_homoInEq0" (formula "2") (term "0"))
                                       (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                                       (rule "polySimp_rightDist" (formula "2") (term "1,0,0"))
                                       (rule "mul_literals" (formula "2") (term "0,1,0,0"))
                                       (rule "polySimp_addAssoc" (formula "2") (term "0,0"))
                                       (rule "polySimp_addComm0" (formula "2") (term "0,0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "2") (term "0,0"))
                                       (rule "add_literals" (formula "2") (term "1,1,0,0"))
                                       (rule "times_zero_1" (formula "2") (term "1,0,0"))
                                       (rule "add_zero_right" (formula "2") (term "0,0"))
                                       (rule "qeq_literals" (formula "2") (term "0"))
                                       (builtin "One Step Simplification" (formula "2"))
                                       (rule "true_left" (formula "2"))
                                       (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "1"))
                                       (rule "times_zero_1" (formula "2") (term "0,0"))
                                       (rule "add_zero_left" (formula "2") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                       (rule "mul_literals" (formula "2") (term "1"))
                                       (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "11"))
                                       (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                                       (rule "mul_literals" (formula "3") (term "0,0,0"))
                                       (rule "polySimp_addComm1" (formula "3") (term "0"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "3"))
                                       (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                                       (rule "polySimp_elimOne" (formula "3") (term "0"))
                                       (rule "inEqSimp_contradInEq1" (formula "3") (ifseqformula "5"))
                                       (rule "andLeft" (formula "3"))
                                       (rule "inEqSimp_homoInEq1" (formula "3"))
                                       (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                                       (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                                       (rule "mul_literals" (formula "3") (term "0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "3") (term "0"))
                                       (rule "polySimp_addComm1" (formula "3") (term "0,0"))
                                       (rule "add_literals" (formula "3") (term "0,0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
                                       (rule "add_literals" (formula "3") (term "1,1,0"))
                                       (rule "times_zero_1" (formula "3") (term "1,0"))
                                       (rule "add_zero_right" (formula "3") (term "0"))
                                       (rule "leq_literals" (formula "3"))
                                       (rule "closeFalse" (formula "3"))
                                    )
                                 )
                                 (branch "Case 2"
                                    (rule "nnf_ex2all" (formula "14"))
                                    (rule "nnf_notAnd" (formula "1") (term "0"))
                                    (rule "nnf_notAnd" (formula "1") (term "0,0"))
                                    (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0"))
                                    (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0"))
                                    (rule "mul_literals" (formula "1") (term "0,1,1,0,0"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0"))
                                    (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0"))
                                    (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
                                    (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0"))
                                    (rule "add_zero_right" (formula "1") (term "0,0,0,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0,0"))
                                    (rule "allLeft" (formula "1") (inst "t=i_0"))
                                    (rule "replaceKnownSelect_taclet00001010_2" (formula "1") (term "0,0,1"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet00001010_3" (formula "1") (term "0,0,1"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "inEqSimp_homoInEq1" (formula "1") (term "1"))
                                    (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,1"))
                                    (rule "add_literals" (formula "1") (term "1,1,0,1"))
                                    (rule "times_zero_1" (formula "1") (term "1,0,1"))
                                    (rule "add_zero_right" (formula "1") (term "0,1"))
                                    (rule "leq_literals" (formula "1") (term "1"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "inEqSimp_contradInEq0" (formula "11") (ifseqformula "1"))
                                    (rule "qeq_literals" (formula "11") (term "0"))
                                    (builtin "One Step Simplification" (formula "11"))
                                    (rule "closeFalse" (formula "11"))
                                 )
                              )
                              (branch "Case 2"
                                 (rule "allRight" (formula "14") (inst "sk=f_0"))
                                 (rule "allRight" (formula "14") (inst "sk=o_0"))
                                 (rule "orRight" (formula "14"))
                                 (rule "pullOutSelect" (formula "15") (term "0") (inst "selectSK=f_0_0"))
                                 (rule "simplifySelectOfAnon" (formula "1"))
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "15")))
                                 (rule "applyEqReverse" (formula "16") (term "0") (ifseqformula "1"))
                                 (builtin "One Step Simplification" (formula "16"))
                                 (rule "closeTrue" (formula "16"))
                              )
                           )
                           (branch "Null Reference (_a = null)"
                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "14")))
                              (rule "closeFalse" (formula "1"))
                           )
                           (branch "Index Out of Bounds (_a != null, but i Out of Bounds!)"
                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "14")))
                              (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
                              (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "1") (term "0,0,1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
                              (rule "mul_literals" (formula "1") (term "1,1"))
                              (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "3"))
                              (rule "inEqSimp_homoInEq1" (formula "1") (term "0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0"))
                              (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
                              (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
                              (rule "add_zero_right" (formula "1") (term "0,0,0"))
                              (rule "leq_literals" (formula "1") (term "0,0"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "10"))
                              (rule "qeq_literals" (formula "1") (term "0"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "closeFalse" (formula "1"))
                           )
                        )
                        (branch "if x_7 false"
                           (builtin "One Step Simplification" (formula "14"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "notLeft" (formula "1"))
                           (rule "inEqSimp_geqRight" (formula "12"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                           (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                           (rule "add_literals" (formula "1") (term "0,0,0"))
                           (rule "add_zero_left" (formula "1") (term "0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                           (rule "polySimp_elimOne" (formula "1") (term "1"))
                           (rule "preincrement" (formula "14") (term "1"))
                           (rule "compound_int_cast_expression" (formula "14") (term "1") (inst "#v=x"))
                           (rule "variableDeclarationAssign" (formula "14") (term "1"))
                           (rule "variableDeclaration" (formula "14") (term "1") (newnames "x_9"))
                           (rule "remove_parentheses_right" (formula "14") (term "1"))
                           (rule "assignmentAdditionInt" (formula "14") (term "1"))
                           (builtin "One Step Simplification" (formula "14"))
                           (rule "translateJavaAddInt" (formula "14") (term "0,1,0"))
                           (rule "polySimp_addComm0" (formula "14") (term "0,1,0"))
                           (rule "widening_identity_cast_5" (formula "14") (term "1"))
                           (rule "assignment" (formula "14") (term "1"))
                           (builtin "One Step Simplification" (formula "14"))
                           (rule "tryEmpty" (formula "14") (term "1"))
                           (rule "methodCallEmpty" (formula "14") (term "1"))
                           (rule "emptyModality" (formula "14") (term "1"))
                           (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "2")))
                           (rule "eqSymm" (formula "14") (term "1,0,0,1,0"))
                           (rule "polySimp_mulComm0" (formula "14") (term "0,0,1"))
                           (rule "polySimp_rightDist" (formula "14") (term "0,0,1"))
                           (rule "mul_literals" (formula "14") (term "0,0,0,1"))
                           (rule "polySimp_addAssoc" (formula "14") (term "1,1,0,0,1,0,0"))
                           (rule "add_literals" (formula "14") (term "0,1,1,0,0,1,0,0"))
                           (rule "add_zero_left" (formula "14") (term "1,1,0,0,1,0,0"))
                           (rule "precOfInt" (formula "14") (term "1"))
                           (rule "inEqSimp_ltToLeq" (formula "14") (term "1,1"))
                           (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,1"))
                           (rule "polySimp_mulAssoc" (formula "14") (term "0,1,0,0,1,1"))
                           (rule "polySimp_mulComm0" (formula "14") (term "0,0,1,0,0,1,1"))
                           (rule "polySimp_mulLiterals" (formula "14") (term "0,1,0,0,1,1"))
                           (rule "polySimp_elimOne" (formula "14") (term "0,1,0,0,1,1"))
                           (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,1"))
                           (rule "polySimp_addAssoc" (formula "14") (term "0,1,1"))
                           (rule "polySimp_addComm1" (formula "14") (term "0,0,1,1"))
                           (rule "polySimp_pullOutFactor2b" (formula "14") (term "0,1,1"))
                           (rule "add_literals" (formula "14") (term "1,1,0,1,1"))
                           (rule "times_zero_1" (formula "14") (term "1,0,1,1"))
                           (rule "add_zero_right" (formula "14") (term "0,1,1"))
                           (rule "polySimp_addAssoc" (formula "14") (term "0,1,1"))
                           (rule "polySimp_addComm1" (formula "14") (term "0,0,1,1"))
                           (rule "add_literals" (formula "14") (term "0,0,0,1,1"))
                           (rule "add_zero_left" (formula "14") (term "0,0,1,1"))
                           (rule "polySimp_pullOutFactor1" (formula "14") (term "0,1,1"))
                           (rule "add_literals" (formula "14") (term "1,0,1,1"))
                           (rule "times_zero_1" (formula "14") (term "0,1,1"))
                           (rule "leq_literals" (formula "14") (term "1,1"))
                           (builtin "One Step Simplification" (formula "14"))
                           (rule "inEqSimp_homoInEq0" (formula "14") (term "1"))
                           (rule "times_zero_2" (formula "14") (term "1,0,1"))
                           (rule "add_zero_right" (formula "14") (term "0,1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1"))
                           (rule "polySimp_mulComm0" (formula "14") (term "1,1"))
                           (rule "polySimp_rightDist" (formula "14") (term "1,1"))
                           (rule "mul_literals" (formula "14") (term "0,1,1"))
                           (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1"))
                           (rule "polySimp_elimOne" (formula "14") (term "1,1,1"))
                           (rule "replace_known_left" (formula "14") (term "1") (ifseqformula "2"))
                           (builtin "One Step Simplification" (formula "14"))
                           (rule "andRight" (formula "14"))
                           (branch "Case 1"
                              (rule "andRight" (formula "14"))
                              (branch "Case 1"
                                 (rule "allRight" (formula "14") (inst "sk=j_1"))
                                 (rule "orRight" (formula "14"))
                                 (rule "orRight" (formula "14"))
                                 (rule "inEqSimp_leqRight" (formula "16"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                 (rule "inEqSimp_leqRight" (formula "15"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0"))
                                 (rule "inEqSimp_geqRight" (formula "16"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                                 (rule "polySimp_mulComm0" (formula "3") (term "1"))
                                 (rule "polySimp_rightDist" (formula "3") (term "1"))
                                 (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                                 (rule "mul_literals" (formula "3") (term "0,1"))
                                 (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1"))
                                 (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_2"))
                                 (rule "simplifySelectOfAnon" (formula "3"))
                                 (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "17")) (ifInst ""  (formula "9")))
                                 (rule "applyEqReverse" (formula "4") (term "0") (ifseqformula "3"))
                                 (rule "hideAuxiliaryEq" (formula "3"))
                                 (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "1"))
                                 (rule "times_zero_1" (formula "2") (term "0,0"))
                                 (rule "add_zero_left" (formula "2") (term "0"))
                                 (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "13"))
                                 (rule "leq_literals" (formula "2") (term "0"))
                                 (builtin "One Step Simplification" (formula "2"))
                                 (rule "true_left" (formula "2"))
                                 (rule "allLeft" (formula "11") (inst "t=j_1"))
                                 (rule "replaceKnownSelect_taclet00100001010_4" (formula "11") (term "0,1"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet00100001010_5" (formula "11") (term "0,1"))
                                 (rule "inEqSimp_contradInEq1" (formula "11") (term "0,0") (ifseqformula "2"))
                                 (rule "qeq_literals" (formula "11") (term "0,0,0"))
                                 (builtin "One Step Simplification" (formula "11"))
                                 (rule "inEqSimp_contradInEq1" (formula "11") (term "1") (ifseqformula "3"))
                                 (rule "inEqSimp_homoInEq1" (formula "11") (term "0,1"))
                                 (rule "polySimp_pullOutFactor1b" (formula "11") (term "0,0,1"))
                                 (rule "add_literals" (formula "11") (term "1,1,0,0,1"))
                                 (rule "times_zero_1" (formula "11") (term "1,0,0,1"))
                                 (rule "add_zero_right" (formula "11") (term "0,0,1"))
                                 (rule "leq_literals" (formula "11") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "11"))
                                 (rule "inEqSimp_antiSymm" (formula "11") (ifseqformula "1"))
                                 (rule "applyEq" (formula "1") (term "0") (ifseqformula "11"))
                                 (rule "inEqSimp_homoInEq0" (formula "1"))
                                 (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
                                 (rule "add_literals" (formula "1") (term "1,0"))
                                 (rule "times_zero_1" (formula "1") (term "0"))
                                 (rule "qeq_literals" (formula "1"))
                                 (rule "true_left" (formula "1"))
                                 (rule "applyEqRigid" (formula "1") (term "0") (ifseqformula "10"))
                                 (rule "applyEqRigid" (formula "2") (term "0,2,0") (ifseqformula "10"))
                                 (rule "applyEqRigid" (formula "11") (term "0") (ifseqformula "10"))
                                 (rule "inEqSimp_homoInEq1" (formula "11"))
                                 (rule "polySimp_pullOutFactor1" (formula "11") (term "0"))
                                 (rule "add_literals" (formula "11") (term "1,0"))
                                 (rule "times_zero_1" (formula "11") (term "0"))
                                 (rule "leq_literals" (formula "11"))
                                 (rule "true_left" (formula "11"))
                                 (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "12"))
                                 (rule "leq_literals" (formula "1") (term "0"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "true_left" (formula "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "1"))
                                 (rule "andLeft" (formula "2"))
                                 (rule "inEqSimp_homoInEq1" (formula "2"))
                                 (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
                                 (rule "add_literals" (formula "2") (term "1,1,0"))
                                 (rule "times_zero_1" (formula "2") (term "1,0"))
                                 (rule "add_zero_right" (formula "2") (term "0"))
                                 (rule "leq_literals" (formula "2"))
                                 (rule "closeFalse" (formula "2"))
                              )
                              (branch "Case 2"
                                 (rule "nnf_ex2all" (formula "14"))
                                 (rule "nnf_notAnd" (formula "1") (term "0"))
                                 (rule "nnf_notAnd" (formula "1") (term "0,0"))
                                 (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
                                 (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0"))
                                 (rule "add_zero_right" (formula "1") (term "0,0,0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0,0"))
                                 (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,1,0,0"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,1,0,0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0"))
                                 (rule "allLeft" (formula "1") (inst "t=i_0"))
                                 (rule "replaceKnownSelect_taclet00001010_2" (formula "1") (term "0,0,1"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet00001010_3" (formula "1") (term "0,0,1"))
                                 (rule "inEqSimp_homoInEq1" (formula "1") (term "1,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,1,0"))
                                 (rule "add_literals" (formula "1") (term "1,1,0,1,0"))
                                 (rule "times_zero_1" (formula "1") (term "1,0,1,0"))
                                 (rule "add_zero_right" (formula "1") (term "0,1,0"))
                                 (rule "leq_literals" (formula "1") (term "1,0"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "11"))
                                 (rule "qeq_literals" (formula "1") (term "0,0"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "notLeft" (formula "1"))
                                 (rule "inEqSimp_strengthen0" (formula "2") (ifseqformula "14"))
                                 (rule "inEqSimp_contradEq3" (formula "14") (ifseqformula "2"))
                                 (rule "polySimp_mulComm0" (formula "14") (term "1,0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "14") (term "0,0"))
                                 (rule "add_literals" (formula "14") (term "1,1,0,0"))
                                 (rule "times_zero_1" (formula "14") (term "1,0,0"))
                                 (rule "add_zero_right" (formula "14") (term "0,0"))
                                 (rule "qeq_literals" (formula "14") (term "0"))
                                 (builtin "One Step Simplification" (formula "14"))
                                 (rule "false_right" (formula "14"))
                                 (rule "allLeft" (formula "1") (inst "t=j_0"))
                                 (rule "replaceKnownSelect_taclet1010_0" (formula "1") (term "0,0,1"))
                                 (rule "replaceKnownAuxiliaryConstant_taclet1010_1" (formula "1") (term "0,0,1"))
                                 (rule "replace_known_left" (formula "1") (term "0,1") (ifseqformula "14"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "inEqSimp_contradInEq0" (formula "1") (term "1") (ifseqformula "13"))
                                 (rule "inEqSimp_homoInEq1" (formula "1") (term "0,1"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1"))
                                 (rule "mul_literals" (formula "1") (term "0,1,0,0,1"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0,0,1"))
                                 (rule "polySimp_addComm1" (formula "1") (term "0,0,0,1"))
                                 (rule "add_literals" (formula "1") (term "0,0,0,0,1"))
                                 (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,1"))
                                 (rule "add_literals" (formula "1") (term "1,1,0,0,1"))
                                 (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                                 (rule "add_zero_right" (formula "1") (term "0,0,1"))
                                 (rule "leq_literals" (formula "1") (term "0,1"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "inEqSimp_contradInEq0" (formula "12") (ifseqformula "1"))
                                 (rule "qeq_literals" (formula "12") (term "0"))
                                 (builtin "One Step Simplification" (formula "12"))
                                 (rule "closeFalse" (formula "12"))
                              )
                           )
                           (branch "Case 2"
                              (rule "allRight" (formula "14") (inst "sk=f_0"))
                              (rule "allRight" (formula "14") (inst "sk=o_0"))
                              (rule "orRight" (formula "14"))
                              (rule "pullOutSelect" (formula "15") (term "0") (inst "selectSK=f_0_0"))
                              (rule "simplifySelectOfAnon" (formula "1"))
                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "15")))
                              (rule "applyEqReverse" (formula "16") (term "0") (ifseqformula "1"))
                              (builtin "One Step Simplification" (formula "16"))
                              (rule "closeTrue" (formula "16"))
                           )
                        )
                     )
                     (branch "Null Reference (_a = null)"
                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "13")))
                        (rule "closeFalse" (formula "1"))
                     )
                     (branch "Index Out of Bounds (_a != null, but i Out of Bounds!)"
                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "13")))
                        (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
                        (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                        (rule "add_zero_right" (formula "1") (term "0,0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
                        (rule "mul_literals" (formula "1") (term "1,1"))
                        (rule "inEqSimp_contradInEq1" (formula "1") (term "1") (ifseqformula "9"))
                        (rule "qeq_literals" (formula "1") (term "0,1"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "2"))
                        (rule "andLeft" (formula "1"))
                        (rule "inEqSimp_homoInEq1" (formula "1"))
                        (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                        (rule "add_literals" (formula "1") (term "1,1,0"))
                        (rule "times_zero_1" (formula "1") (term "1,0"))
                        (rule "add_zero_right" (formula "1") (term "0"))
                        (rule "leq_literals" (formula "1"))
                        (rule "closeFalse" (formula "1"))
                     )
                  )
                  (branch "if x_4 false"
                     (builtin "One Step Simplification" (formula "14"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "closeFalse" (formula "1"))
                  )
               )
               (branch "Null Reference (_a = null)"
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "13")))
                  (rule "closeFalse" (formula "1"))
               )
            )
            (branch "Null Reference (_a = null)"
               (builtin "One Step Simplification" (formula "13"))
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "14")))
               (rule "closeFalse" (formula "1"))
            )
         )
         (branch "Use Case"
            (builtin "One Step Simplification" (formula "6"))
            (builtin "One Step Simplification" (formula "8"))
            (rule "andLeft" (formula "6"))
            (rule "andLeft" (formula "6"))
            (rule "exLeft" (formula "8") (inst "sk=j_0"))
            (rule "andLeft" (formula "8"))
            (rule "andLeft" (formula "8"))
            (rule "eqSymm" (formula "10"))
            (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "9"))
            (rule "polySimp_mulComm0" (formula "9") (term "1,0,0"))
            (rule "inEqSimp_commuteGeq" (formula "7") (term "1,0"))
            (rule "inEqSimp_commuteLeq" (formula "6"))
            (rule "variableDeclarationAssign" (formula "12") (term "1"))
            (rule "variableDeclaration" (formula "12") (term "1") (newnames "b_1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "7") (term "1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0"))
            (rule "mul_literals" (formula "7") (term "0,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "9"))
            (rule "polySimp_mulComm0" (formula "9") (term "1"))
            (rule "polySimp_rightDist" (formula "9") (term "1"))
            (rule "polySimp_mulLiterals" (formula "9") (term "1,1"))
            (rule "mul_literals" (formula "9") (term "0,1"))
            (rule "polySimp_elimOne" (formula "9") (term "1,1"))
            (rule "pullOutSelect" (formula "10") (term "0") (inst "selectSK=arr_0"))
            (rule "simplifySelectOfAnon" (formula "10"))
            (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "12")) (ifInst ""  (formula "3")))
            (rule "applyEqReverse" (formula "11") (term "0") (ifseqformula "10"))
            (rule "hideAuxiliaryEq" (formula "10"))
            (rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "9"))
            (rule "times_zero_1" (formula "8") (term "0,0"))
            (rule "add_zero_left" (formula "8") (term "0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "8"))
            (rule "mul_literals" (formula "8") (term "1"))
            (rule "nnf_imp2or" (formula "7") (term "0"))
            (rule "nnf_notAnd" (formula "7") (term "0,0"))
            (rule "inEqSimp_notGeq" (formula "7") (term "0,0,0"))
            (rule "times_zero_1" (formula "7") (term "1,0,0,0,0,0"))
            (rule "add_zero_right" (formula "7") (term "0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0"))
            (rule "mul_literals" (formula "7") (term "1,0,0,0"))
            (rule "inEqSimp_notLeq" (formula "7") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "7") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "7") (term "0,0,0,1,0,0"))
            (rule "add_zero_left" (formula "7") (term "0,0,1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "7") (term "1,0,0"))
            (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0"))
            (rule "polySimp_elimOne" (formula "7") (term "1,1,0,0"))
            (rule "compound_less_than_comparison_2" (formula "13") (term "1") (inst "#v0=x") (inst "#v1=x_1"))
            (rule "variableDeclarationAssign" (formula "13") (term "1"))
            (rule "variableDeclaration" (formula "13") (term "1") (newnames "x_2"))
            (rule "assignment" (formula "13") (term "1"))
            (builtin "One Step Simplification" (formula "13"))
            (rule "variableDeclarationAssign" (formula "13") (term "1"))
            (rule "variableDeclaration" (formula "13") (term "1") (newnames "x_3"))
            (rule "assignment_read_length" (formula "13") (term "1"))
            (branch "Normal Execution (_a != null)"
               (builtin "One Step Simplification" (formula "14"))
               (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "12")))
               (rule "false_right" (formula "13"))
               (rule "less_than_comparison_simple" (formula "13") (term "1"))
               (builtin "One Step Simplification" (formula "13"))
               (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,1,0"))
               (rule "polySimp_addComm1" (formula "13") (term "0,0,0,1,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "13") (term "0,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "13") (term "0,0,0,1,0"))
               (rule "methodCallEmpty" (formula "13") (term "1"))
               (rule "emptyModality" (formula "13") (term "1"))
               (builtin "One Step Simplification" (formula "13"))
               (rule "impRight" (formula "13"))
               (rule "notLeft" (formula "1"))
               (rule "inEqSimp_geqRight" (formula "12"))
               (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
               (rule "mul_literals" (formula "1") (term "0,1,0,0"))
               (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
               (rule "add_literals" (formula "1") (term "0,0,0"))
               (rule "add_zero_left" (formula "1") (term "0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1"))
               (rule "polySimp_elimOne" (formula "1") (term "1"))
               (rule "inEqSimp_antiSymm" (formula "7") (ifseqformula "1"))
               (rule "applyEq" (formula "1") (term "0") (ifseqformula "7"))
               (rule "inEqSimp_homoInEq0" (formula "1"))
               (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
               (rule "add_literals" (formula "1") (term "1,0"))
               (rule "times_zero_1" (formula "1") (term "0"))
               (rule "qeq_literals" (formula "1"))
               (rule "true_left" (formula "1"))
               (rule "applyEq" (formula "7") (term "0") (ifseqformula "6"))
               (rule "inEqSimp_homoInEq1" (formula "7"))
               (rule "polySimp_pullOutFactor1" (formula "7") (term "0"))
               (rule "add_literals" (formula "7") (term "1,0"))
               (rule "times_zero_1" (formula "7") (term "0"))
               (rule "leq_literals" (formula "7"))
               (rule "true_left" (formula "7"))
               (rule "applyEq" (formula "1") (term "0") (ifseqformula "6"))
               (rule "methodCallReturn" (formula "12") (term "1"))
               (rule "assignment" (formula "12") (term "1"))
               (builtin "One Step Simplification" (formula "12"))
               (rule "methodCallEmpty" (formula "12") (term "1"))
               (rule "tryEmpty" (formula "12") (term "1"))
               (rule "emptyModality" (formula "12") (term "1"))
               (builtin "One Step Simplification" (formula "12"))
               (rule "eqSymm" (formula "12") (term "1,0,0,1"))
               (rule "applyEq" (formula "12") (term "1,1,0,0,0,0") (ifseqformula "5"))
               (rule "replace_known_left" (formula "12") (term "0,0") (ifseqformula "6"))
               (builtin "One Step Simplification" (formula "12"))
               (rule "applyEq" (formula "12") (term "0,0,0") (ifseqformula "5"))
               (rule "replace_known_left" (formula "12") (term "0,0") (ifseqformula "7"))
               (builtin "One Step Simplification" (formula "12"))
               (rule "applyEq" (formula "12") (term "1,1,1,0,0,0") (ifseqformula "5"))
               (rule "andRight" (formula "12"))
               (branch "Case 1"
                  (rule "nnf_ex2all" (formula "12"))
                  (rule "nnf_notAnd" (formula "1") (term "0"))
                  (rule "nnf_notAnd" (formula "1") (term "0,0"))
                  (rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
                  (rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0"))
                  (rule "add_zero_right" (formula "1") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
                  (rule "mul_literals" (formula "1") (term "1,0,0,0"))
                  (rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
                  (rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0,0,1,0,0"))
                  (rule "add_zero_left" (formula "1") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
                  (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
                  (rule "allLeft" (formula "1") (inst "t=j_0"))
                  (rule "replaceKnownSelect_taclet2010_0" (formula "1") (term "0,0,1"))
                  (rule "replaceKnownAuxiliaryConstant_taclet2010_1" (formula "1") (term "0,0,1"))
                  (rule "replace_known_left" (formula "1") (term "0,1") (ifseqformula "12"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "inEqSimp_contradInEq0" (formula "1") (term "1") (ifseqformula "11"))
                  (rule "inEqSimp_homoInEq1" (formula "1") (term "0,1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0,0,1"))
                  (rule "mul_literals" (formula "1") (term "0,1,0,0,1"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0,1"))
                  (rule "polySimp_addComm0" (formula "1") (term "0,0,0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,1"))
                  (rule "add_literals" (formula "1") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                  (rule "add_zero_right" (formula "1") (term "0,0,1"))
                  (rule "leq_literals" (formula "1") (term "0,1"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "10"))
                  (rule "qeq_literals" (formula "1") (term "0"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "closeFalse" (formula "1"))
               )
               (branch "Case 2"
                  (rule "allRight" (formula "12") (inst "sk=f_0"))
                  (rule "allRight" (formula "12") (inst "sk=o_0"))
                  (rule "orRight" (formula "12"))
                  (rule "pullOutSelect" (formula "13") (term "0") (inst "selectSK=f_0_0"))
                  (rule "simplifySelectOfAnon" (formula "1"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "13")))
                  (rule "applyEqReverse" (formula "14") (term "0") (ifseqformula "1"))
                  (builtin "One Step Simplification" (formula "14"))
                  (rule "closeTrue" (formula "14"))
               )
            )
            (branch "Null Reference (_a = null)"
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "13")))
               (rule "closeFalse" (formula "1"))
            )
         )
      )
      (branch "Null Reference (_a = null)"
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "6")))
         (rule "closeFalse" (formula "1"))
      )
      (branch "Index Out of Bounds (_a != null, but 0 Out of Bounds!)"
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "6")))
         (rule "less_literals" (formula "1") (term "1"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "blockThrow" (formula "7") (term "1"))
         (rule "inEqSimp_strengthen0" (formula "1") (ifseqformula "5"))
         (rule "add_zero_right" (formula "1") (term "1"))
         (rule "inEqSimp_contradEq3" (formula "5") (ifseqformula "1"))
         (rule "times_zero_1" (formula "5") (term "1,0,0"))
         (rule "add_zero_right" (formula "5") (term "0,0"))
         (rule "qeq_literals" (formula "5") (term "0"))
         (builtin "One Step Simplification" (formula "5"))
         (rule "false_right" (formula "5"))
         (rule "arrayLengthIsAnInt" (formula "1") (term "0"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "true_left" (formula "1"))
         (rule "arrayLengthNotNegative" (formula "1") (term "0"))
         (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "2"))
         (rule "qeq_literals" (formula "1") (term "0"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "closeFalse" (formula "1"))
      )
   )
)
(branch "Null Reference (_a = null)"
   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "5")))
   (rule "closeFalse" (formula "1"))
)
)
}
