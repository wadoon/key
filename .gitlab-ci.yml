image: wadoon/key-test-docker:jdk11

cache: &globalcache
  policy: pull
  paths:
    - .gradle/    
    - violations.jar
  # untracked: true
  key: $CI_COMMIT_REF_NAME


variables:
  GRADLE_OPTS:  "-Dorg.gradle.daemon=false -Dorg.gradle.parallel=true -Dorg.gradle.workers.max=2 -Dorg.gradle.configureondemand=true"
  GIT_DEPTH: 0
  SONAR_SCANNER_OPTS: -Xmx8G

before_script:
  #  - echo "$CI_BUILD_NAME, $CI_BUILD_REF_NAME $CI_BUILD_STAGE" # debug
  - export GRADLE_USER_HOME=`pwd`/.gradle
  - export SONAR_SCANNER_OPTS="-Xmx8G"

stages:
  - build 
  - test 
  - report     
  - deploy


# Use prepare to setup the pipeline, e.g., downloading libraries or tools. 
# Gitlab docs say: Artifacts for material that is created during the pipeline. 
#                  Caching for other material like gradle files, etc...

  
assemble:  
  stage: build
  script:
    - javac -version
    - gradle --build-cache assemble testClasses
  cache:
    <<: *globalcache
    # override the policy
    policy: pull-push

  artifacts:
    paths:
      # excluding reports on tests, ...
      - "*/build/{classes,generated,generated-src,libs,resources,tmp}"
    # only short lived, as required by other pipeline steps. Nobody wants to download them!
    expire_in: 12 hours
  only:
    - merge_requests
    - master
  

test:
  stage: test
  needs: ["assemble"]
  dependencies: ["assemble"]
  script:
    - ./scripts/tools/sonarqube_hint.py
    - >
      gradle --build-cache --continue -DjacocoEnabled=true -Dsonar.qualitygate.wait=true \
       -x key.core.proof_references:test \ 
       -x key.core.symbolic_execution:test \
       testAggregateTestReport \
       jacocoTestReport testCodeCoverageReport sonarqube
  artifacts:
    paths:
      - "key.ui/build/reports/tests/unit-test/"
      - "*/build/reports/jacoco/test/html"
      - "**/**/jacocoTestReport.*"
      - "**/**/test.exec"
    reports:
      junit:
        - "**/**/build/test-results/test/TEST-*.xml"
    expire_in: 1 month
  only:
    - merge_requests
    - master

coverage-jdk11:
  stage: report
  needs: ["test"]
  dependencies: ["test"]  
  image: registry.gitlab.com/haynes/jacoco2cobertura:1.0.7
  script:
    # convert report from jacoco to cobertura, using relative project path
    - ls -l 
    - ls -lR key.ui/build/ 
    - python /opt/cover2cover.py key.ui/build/jacoco/jacoco.xml $CI_PROJECT_DIR/*/src/main/java/ | tee cobertura.xml
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: cobertura.xml
    paths: 
      - "**/**/jacoco.xml"
      - cobertura.xml
  only:
    - merge_requests
    - master

testProveRules:
  needs: ["assemble"]
  dependencies: ["assemble"]
  script:
    - gradle --build-cache --continue testProveRules 
  artifacts:
    when: always
    #paths:
    #  - key.ui/build/reports/tests/unit-test/
    expire_in: 1 month
    reports:
      junit:
        - "*/build/test-results/test/TEST-*.xml"
  only:
    - merge_requests
    - master

testRunAllFunProofs:
  needs: ["assemble"]
  dependencies: ["assemble"]
  script:
      - gradle --build-cache --continue testRunAllFunProofs 
  artifacts:
    when: always
    paths:
      - key.ui/build/reports/tests/unit-test/
    expire_in: 1 week
    reports:
      junit:
        - "*/build/test-results/test/TEST-*.xml"
  only:
    - merge_requests
    - master

testRunAllInfProofs:
  needs: ["assemble"]
  dependencies: ["assemble"]
  script:
    - gradle --build-cache --continue testRunAllInfProofs 
  artifacts:
    when: always
#    paths:
#      - key.ui/build/reports/tests/unit-test/
    expire_in: 1 month
    reports:
      junit:
        - "*/build/test-results/test/TEST-*.xml"                
  only:
    - merge_requests
    - master

optionalTest:
  allow_failure: true
  needs: ["assemble"]
  dependencies: ["assemble"]
  script:
    - gradle --build-cache --continue key.core.proof_references:test -x key.core.symbolic_execution:test
  artifacts:
    when: always
#    paths:
#      - key.ui/build/reports/tests/unit-test/
    expire_in: 1 month
    reports:
      junit:
        - "**/**/build/test-results/test/TEST-*.xml"
  only:
    - merge_requests
    - master

pmd:
  needs: ["assemble"]
  dependencies: ["assemble"]
  script:
    # @TODO weigl: embedd violations jar into the docker file. 
    - |
      if [ ! -f violations.jar ]; then 
         curl https://repo1.maven.org/maven2/se/bjurr/violations/violations-command-line/1.22.3/violations-command-line-1.22.3.jar \
              -o violations.jar
      fi 
    - gradle --build-cache --continue pmdMain
    - java -jar violations.jar -cc code-climate-report.json -v PMD . ".*/pmd/main\.xml$" "PMD" | wc -l
    - ls -lh 
  artifacts:
    reports:
      codequality: code-climate-report.json
    expire_in: 1 week
    # -v "CHECKSTYLE" "." ".*checkstyle/main\.xml$" "Checkstyle"

  only:
    - merge_requests
    - master


checkstyle:
  needs: ["assemble"]
  dependencies: ["assemble"]
  script:
    - gradle --build-cache --continue checkstyleMain
#    - java -jar violations.jar -cc code-climate-report.json -v PMD . ".*/pmd/main\.xml$" "PMD" | wc -l
  artifacts:
#    reports:
#      codequality: code-climate-report.json
    expire_in: 1 week
    paths:
      - "*/build/reports/checkstyle/*"
  only:
    - merge_requests
    - master


javadoc:
  stage: report
  needs: ["assemble"]
  dependencies: ["assemble"]
  script:
    - gradle alldoc
    - zip -r javadoc.zip build/docs/javadoc
  artifacts:
    untracked: false
    when: on_success
    expire_in: "1 hour"
    paths:
      - javadoc.zip
  rules:  # on main-branch only
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH

javadoc-trigger:
  stage: .post # execute at the 
  needs: ["javadoc"]  
  trigger: 
    project: keyproject/key-javadoc
  rules:  # on main-branch only
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH && $CI_SERVER_HOST == "gitlab.com"
  

  # script:
  #  - curl --request POST --form "token=$CI_JOB_TOKEN" --form ref=main "https://gitlab.com/api/v4/projects/41370495/trigger/pipeline"
  # rules:    
    # on master only      - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
  # environment: production


deploy-nightly:
  stage: deploy
  environment: production
  needs: ["assemble"]
  dependencies: ["assemble"]
  script:
    - BUILD_NUMBER=SNAPSHOT gradle publish
  rules:
    - if: $CI_SERVER_HOST == "gitlab.com" && $CI_COMMIT_REF_NAME == "stable" # only available on public instance 

deploy-release:
  stage: deploy
  environment: production
  needs: ["assemble"]
  dependencies: ["assemble"]
  script:
    - gradle publish
  only:
    - /^KeY-.*$/
