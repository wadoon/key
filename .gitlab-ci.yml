#
# This files describes the workflow of the continous integration
# checker for KeY run within gitlab.
#
# Jenkins runs are triggered from somewhere else.
#

image: wadoon/key-test-docker:jdk11

cache:
  policy: pull-push
  paths:
    - .gradle/wrapper
    - .gradle/caches
  untracked: true
  key: ${CI_COMMIT_REF_SLUG}

variables:
  GRADLE_OPTS:  "-Dorg.gradle.daemon=false -Dorg.gradle.parallel=true -Dorg.gradle.workers.max=2 -Dorg.gradle.configureondemand=true"
  GIT_DEPTH: 0
  SONAR_SCANNER_OPTS: -Xmx8G
  TIMEOUT_SECONDS: 36000


before_script:
  #  - echo `pwd` # debug
  #  - echo "$CI_BUILD_NAME, $CI_BUILD_REF_NAME $CI_BUILD_STAGE" # debug
  - export GRADLE_USER_HOME=`pwd`/.gradle
  - export SONAR_SCANNER_OPTS="-Xmx8G"

stages:
    - primary
    - secondary
    - ternary
    - deploy
    - test

compile:classes:
  stage: primary
  image: wadoon/key-test-docker:jdk11
  script:
    - javac -version
    - cd key
    - gradle --build-cache classes
  cache:
    key: "$CI_COMMIT_REF_NAME"
    policy: push
    paths:
      - build
      - .gradle

compile:testClasses:
  dependencies: [ "compile:classes" ]
  stage: secondary
  image: wadoon/key-test-docker:jdk11
  script:
    - javac -version
    - cd key
    - gradle --build-cache --parallel testClasses
  cache:
    key: "$CI_COMMIT_REF_NAME"
    policy: pull-push
    paths:
      - build
      - .gradle


test:
  stage: ternary
  script:
    - cd key
    - gradle --build-cache --continue testAggregateTestReport -x key.core.proof_references:test -x key.core.symbolic_execution:test
  cache:
    key: "$CI_COMMIT_REF_NAME"
    policy: pull
    paths:
      - build
      - .gradle
  artifacts:
    when: always
    paths:
      - key/key.ui/build/reports/tests/unit-test/
    expire_in: 1 month
    reports:
      junit:
        - "**/**/build/test-results/test/TEST-*.xml"

code_intelligence_java:
  stage: primary
  needs: []
  allow_failure: true
  rules:
    - if: $CODE_INTELLIGENCE_DISABLED
      when: never
#    - if: $CI_COMMIT_BRANCH
#      exists:
#        - '**/*.java'
  script:
    - cd key
    - curl -fLo coursier https://git.io/coursier-cli
    - chmod +x coursier
    - ./coursier launch com.sourcegraph:scip-java_2.13:0.8.8 -- index
    - ls
    - cat index.scip
  artifacts:
    reports:
      lsif: index.scip

include:
  - template: Security/License-Scanning.gitlab-ci.yml

license_scanning:
  variables:
    CI_DEBUG_TRACE: "true"



#include:
#  - template: Code-Quality.gitlab-ci.yml

#code_quality:
#  services:            # Shut off Docker-in-Docker
#  tags:
#    - dind     # Set this job to only run on our new specialized runner

my_code_quality:
  script:
    - cd key
    - gradle --build-cache pmdMain
    - wget https://search.maven.org/remotecontent?filepath=se/bjurr/violations/violations-command-line/1.22.3/violations-command-line-1.22.3.jar
    - |
      java -jar violations-command-line-1.22.3.jar -cc code-climate-report.json 
      -v PMD . ".*/pmd/main\.xml$" "PMD"
    # -v "CHECKSTYLE" "." ".*checkstyle/main\.xml$" "Checkstyle"
  artifacts:
    paths: [gl-code-quality-report.html]
    reports:
      codequality: code-climate-report.json
    expire_in: 1 week
  cache:
    policy: pull
    paths:
      - .gradle/wrapper
      - .gradle/caches
    untracked: true
    key: ${CI_COMMIT_REF_SLUG}




deploy-nightly:
  stage: deploy
  script:
    - cd key
    - BUILD_NUMBER=SNAPSHOT gradle publish
  only:
    - stable

deploy-release:
  when: manual
  stage: deploy
  script:
    - cd key
    - gradle publish
  only:
    - /^KeY-.*$/
