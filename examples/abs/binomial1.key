// This file is part of KeY - Integrated Deductive Software Design
// Copyright (C) 2001-2009 Universitaet Karlsruhe, Germany
//                         Universitaet Koblenz-Landau, Germany
//                         Chalmers University of Technology, Sweden
//
// The KeY system is protected by the GNU General Public License. 
// See LICENSE.TXT for details.
// Input file for KeY standalone prover version 0.497

\absSource ".";


\programVariables {
	ABS.StdLib.Int myInt;
	History history;
	PingPong.Pong o;
	ABS.StdLib.List<ABS.StdLib.Int> myVar;
}

\rules {

  variableDeclarationWithInitializer {
      \schemaVar \program ABSTypeRef TypeRef;
      \schemaVar \program Variable lhs;
      \schemaVar \program PureExp exp1;

      \schemaVar \formula post;
      
      \find (\[{.. TypeRef lhs = exp1; ...}\]post)
      \replacewith (\[{.. lhs = exp1; ...}\]post)
      \addprogvars(lhs)

      \heuristics(simplify_prog) 
  };


  assignment {
      \schemaVar \program Variable lhs;
      \schemaVar \program PureExp exp1;

      \schemaVar \formula post;
      
      \find (\[{.. lhs = exp1; ...}\]post) 
      \replacewith ({lhs:=exp1}\[{.. ...}\]post)

      \heuristics(simplify_prog)
  };

  ifThenElseAntec {
      \schemaVar \program PureExp cond;

      \schemaVar \program Statement thenB;
      \schemaVar \program Statement elseB;

      \schemaVar \formula post;
  	     
     \find (\[{.. if ( cond ) thenB; else elseB; ...}\]post ==> )
     \replacewith(\[{.. thenB; ...}\]post ==>) \add(cond = TRUE ==>);
     \replacewith(\[{.. elseB; ...}\]post ==>) \add(cond = FALSE ==>)
     \heuristics(split_if) 

  };

  ifThenElseSucc {
      \schemaVar \program PureExp cond;

      \schemaVar \program Statement thenB;
      \schemaVar \program Statement elseB;

      \schemaVar \program[list] Statement rest;
      \schemaVar \formula post;
  	     
     \find (==> \[{ if ( cond ) thenB; else elseB; rest; }\]post)
     \replacewith(==> \[{ thenB; rest; }\]post) \add(cond = TRUE ==>);
     \replacewith(==> \[{ elseB; rest; }\]post) \add(cond = FALSE ==>)
     \heuristics(split_if) 

  };

  emptyBlock {
      \schemaVar \formula post;
      
      \find (\[{.. {} ...}\]post) 
      \replacewith (\[{.. ...}\]  post)
      \heuristics(simplify_prog)
  };

  emptyBox {
      \schemaVar \formula post;
      
      \find (\[{ }\]post) 
      \replacewith (post)
      \heuristics(simplify_prog)
  };


  boxTrue {      
      \schemaVar \program[list] Statement s;

      \find (\[{ s; }\]true) 
      \replacewith (true)
      \heuristics(concrete)
  };

  ABSTrueToTRUE {      
      \find (ABS.StdLib.Bool::True) 
      \replacewith (TRUE)
      \heuristics(concrete)
  };

 ABSFalseToFALSE {      
      \find (ABS.StdLib.Bool::False) 
      \replacewith (FALSE)
      \heuristics(concrete)
  };

 BoolEncoding2Fml {      
      \schemaVar \formula phi;
      \find (\if (phi) \then (TRUE) \else (FALSE) = TRUE) 
      \replacewith (phi)
      \heuristics(concrete)
  };


}

//0151 614 725 48

\problem {
//   wfHist(history) & myInt > 0 ->
//	\[{ ABS.StdLib.Int j = myInt;  myInt = myInt * myInt; myInt = myInt + myInt;  }\] myInt > 0	
   wfHist(history) & myInt > 0 ->	\[{ List<Int> e = Nil;  Fut<Unit> fu2 = o!nothing(); PingPong.Pong u = null; Fut<Unit> fu = u!nothing(6); }\] myInt > 0
//   wfHist(history) & myInt > 0 -> \[{ ABS.StdLib.List<ABS.StdLib.Int> e = Cons(2, Nil); myVar = e; }\] myVar = ABS.StdLib.List::Cons(2, ABS.StdLib.List::Nil)	
  // wfHist(history) & myInt > 0 -> \[{ ABS.StdLib.Bool b = 1 == 0 && False; }\] myInt > 0
 // \[{if (1 == 0 && False) myInt = 2; else { myInt = 3;} }\] myInt > 0	
}


