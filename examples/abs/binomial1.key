// This file is part of KeY - Integrated Deductive Software Design
// Copyright (C) 2001-2009 Universitaet Karlsruhe, Germany
//                         Universitaet Koblenz-Landau, Germany
//                         Chalmers University of Technology, Sweden
//
// The KeY system is protected by the GNU General Public License. 
// See LICENSE.TXT for details.
// Input file for KeY standalone prover version 0.497

\absSource ".";


\programVariables {
	ABS.StdLib.Int myInt;
	PingPong.Pong o;
	PingPong.Pong this;
	ABS.StdLib.List<ABS.StdLib.Int> myVar;
}

\rules {

  asyncCall {
        \schemaVar \program MethodName m;
        \schemaVar \program[list] PureExp args;
      	\schemaVar \program ABSTypeRef TypeRef;
        \schemaVar \program Variable callee;
        \schemaVar \program Variable fut;
        \schemaVar \formula phi;
        
  	\find (\[{.. TypeRef fut = callee!m(args); ...}\]phi)
  	\replacewith ({history:=append(history, outMsg(this, callee, fut, #methodArgsToSeq(args)))}\[{.. ...}\]phi)
  	\addprogvars(fut)

  };


}

\problem {
//   wfHist(history) & myInt > 0 ->
//	\[{ ABS.StdLib.Int j = myInt;  myInt = myInt * myInt; myInt = myInt + myInt;  }\] myInt > 0	
//   wfHist(history) & myInt > 0 ->	\[{ List<Int> e = Nil;  Fut<Unit> fu2 = o!nothing(); PingPong.Pong u = null; Fut<Unit> fu = u!nothing(6); }\] myInt > 0
    	\[{ Fut<Unit> fu2 = o!nothing(5); }\] myInt > 0
//   wfHist(history) & myInt > 0 -> \[{ ABS.StdLib.List<ABS.StdLib.Int> e = Cons(2, Nil); myVar = e; }\] myVar = ABS.StdLib.List::Cons(2, ABS.StdLib.List::Nil)	
  // wfHist(history) & myInt > 0 -> \[{ ABS.StdLib.Bool b = 1 == 0 && False; }\] myInt > 0
//  \[{ PingPong.Pong u; if (1 == 0 && False) myInt = -2; else { myInt = 3;} }\] myInt > 0	
}


