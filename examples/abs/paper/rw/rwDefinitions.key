\rules {

   \schemaVar \term Seq history;
   \schemaVar \term any self, writer;
   \schemaVar \variables HistoryLabel ev, laterEv;
   \schemaVar \variables int i;

   \find (getWriters(history))
   \varcond(\notFreeIn(laterEv, history, self, writer), 
            \notFreeIn(ev, history, self, writer),
            \notFreeIn(i, history, self, writer))
   \replacewith(
      \forall int i;( MethodLabel:get(historySV, i)=

      \if(\exists ev;(isCompletionEv(ev) & 
                      containsEvent(ev, history) & 
                      getMethod(ev) = RW.RWinterface::openW#RW.CallerI & 
                      writer = getCaller(getInvocationReactionEventForFuture(history, getFuture(ev))) &
                      \forall laterEv;(seqIndexOf(history, ev) < i & i<seqLen(history) &  laterEv=HistoryLabel::seqGet(history, i) ->
                                   (!isCompletionEv(laterEv) | getMethod(laterEv) != RW.RWinterface::closeW#RW.CallerI))))
      \then (getCaller(getInvocationReactionEventForFuture(history, getFuture(ev)))) 
      \else (emptySeq)
    )
  };
