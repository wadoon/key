\settings {
"#Proof-Settings-Config-File
#Wed Aug 28 16:12:51 CEST 2013
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_EXPAND
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_EXPAND
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]RETREAT_MODE_OPTIONS_KEY=RETREAT_MODE_NONE
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=1000
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:ABS
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\absSource "/Users/bubel/Documents/Development Projects/absKeY/key/examples/abs/paper/rw";

\problem {
\forall ABSAnyInterface caller_0;
  (   !caller_0 = null
   -> \forall RW.CallerI caller_1;
        {caller:=caller_1}
          {history:=seqConcat(history,
                              seqSingleton(invocREv(caller_0,
                                                    this,
                                                    future,
                                                    RW.RWinterface::openW#RW.CallerI,
                                                    seqConcat(seqEmpty,
                                                              seqSingleton(caller)))))}
            (     wellFormed(heap)
                & wfHist(history)
                & !this = null
                & Pre(history, heap, this)
                & CInv(history, heap, this)
             ->   \[{   methodframe(source <- RW.RWinterface::openW#RW.CallerI,return <- (var:result,fut:future):{   await this.writer==null;
                                                                                                                     
                                                                                                                    this.writer = caller;
                                                                                                                    this.readers = insertElement(this.readers,
                                                                                                                                                caller); 
                                                                                                                  } 
                     }\]CInv(history, heap, this)))

}

\proof {
(keyLog "0" (keyUser "bubel" ) (keyVersion "90bb886cd7b78027c8f6703803461f09e5699bb9"))

(autoModeTime "7004")

(branch "dummy ID"
(builtin "One Step Simplification" (formula "1"))
(rule "allRight" (formula "1") (inst "sk=caller_0_0"))
(rule "impRight" (formula "1"))
(rule "notLeft" (formula "1"))
(rule "allRight" (formula "2") (inst "sk=caller_1_0"))
(rule "impRight" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "3"))
(rule "wellFormedInvocationEventPreceedsInvocationReactionEvent" (formula "2"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "2"))
(rule "andLeft" (formula "2"))
(rule "notLeft" (formula "4"))
(rule "andLeft" (formula "2"))
(rule "notLeft" (formula "4"))
(rule "notLeft" (formula "3"))
(rule "insertClassInvariantFor<RW.RWController>" (formula "9") (term "0,1"))
(rule "eqSymm" (formula "9") (term "1,0,0,0,1"))
(rule "eqSymm" (formula "9") (term "1,0,0,1,0,1"))
(rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0,0,0,0,0,1,0,1"))
(rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0,0,0,0,0,1,0,1"))
(rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0,1,0,0,1"))
(rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0,1,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0,0,0,0,0,1,0,1"))
(rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0,0,0,0,0,1,0,1"))
(rule "polySimp_rightDist" (formula "9") (term "1,1,0,0,0,0,0,0,1,0,1"))
(rule "mul_literals" (formula "9") (term "0,1,1,0,0,0,0,0,0,1,0,1"))
(rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0,0,0,0,0,1,0,1"))
(rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0,0,0,0,0,1,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0,1,0,0,1"))
(rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0,1,0,0,1"))
(rule "polySimp_rightDist" (formula "9") (term "1,1,0,0,1,0,0,1"))
(rule "mul_literals" (formula "9") (term "0,1,1,0,0,1,0,0,1"))
(rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0,1,0,0,1"))
(rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0,1,0,0,1"))
(rule "nnf_imp2or" (formula "9") (term "0,0,1,0,1"))
(rule "nnf_imp2or" (formula "9") (term "0,1,0,0,1"))
(rule "nnf_notAnd" (formula "9") (term "0,0,0,1,0,1"))
(rule "nnf_notAnd" (formula "9") (term "0,0,1,0,0,1"))
(rule "inEqSimp_notLeq" (formula "9") (term "1,0,0,1,0,0,1"))
(rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0,1,0,0,1"))
(rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0,1,0,0,1"))
(rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0,1,0,0,1"))
(rule "add_literals" (formula "9") (term "0,0,0,1,0,0,1,0,0,1"))
(rule "add_zero_left" (formula "9") (term "0,0,1,0,0,1,0,0,1"))
(rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0,1,0,0,1"))
(rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0,1,0,0,1"))
(rule "polySimp_elimOne" (formula "9") (term "1,1,0,0,1,0,0,1"))
(rule "inEqSimp_notGeq" (formula "9") (term "0,0,0,1,0,0,1"))
(rule "mul_literals" (formula "9") (term "1,0,0,0,0,0,1,0,0,1"))
(rule "add_zero_right" (formula "9") (term "0,0,0,0,0,1,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0,1,0,0,1"))
(rule "mul_literals" (formula "9") (term "1,0,0,0,1,0,0,1"))
(rule "nnf_notAnd" (formula "9") (term "0,0,0,0,1,0,1"))
(rule "nnf_notOr" (formula "9") (term "1,0,0,0,1,0,1"))
(rule "nnf_notAnd" (formula "9") (term "0,0,0,0,0,1,0,1"))
(rule "nnf_notAnd" (formula "9") (term "0,0,0,0,0,0,1,0,1"))
(rule "inEqSimp_notGeq" (formula "9") (term "0,0,0,0,0,0,0,1,0,1"))
(rule "times_zero_1" (formula "9") (term "1,0,0,0,0,0,0,0,0,0,1,0,1"))
(rule "add_zero_right" (formula "9") (term "0,0,0,0,0,0,0,0,0,1,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0,0,0,0,0,1,0,1"))
(rule "mul_literals" (formula "9") (term "1,0,0,0,0,0,0,0,1,0,1"))
(rule "inEqSimp_notLeq" (formula "9") (term "1,0,0,0,0,0,0,1,0,1"))
(rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0,0,0,0,0,1,0,1"))
(rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0,0,0,0,0,1,0,1"))
(rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0,0,0,0,0,1,0,1"))
(rule "add_literals" (formula "9") (term "0,0,0,1,0,0,0,0,0,0,1,0,1"))
(rule "add_zero_left" (formula "9") (term "0,0,1,0,0,0,0,0,0,1,0,1"))
(rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0,0,0,0,0,1,0,1"))
(rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0,0,0,0,0,1,0,1"))
(rule "polySimp_elimOne" (formula "9") (term "1,1,0,0,0,0,0,0,1,0,1"))
(rule "insertClassInvariantFor<RW.RWController>" (formula "5"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "5"))
(rule "eqSymm" (formula "8") (term "1,0,0"))
(rule "eqSymm" (formula "6"))
(rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0,0,0,0,0"))
(rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0,0,0,0,0"))
(rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0,0,0,0,0"))
(rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0,0,0,0,0"))
(rule "polySimp_rightDist" (formula "8") (term "1,1,0,0,0,0,0,0"))
(rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0,0,0,0,0"))
(rule "mul_literals" (formula "8") (term "0,1,1,0,0,0,0,0,0"))
(rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0"))
(rule "polySimp_rightDist" (formula "7") (term "1,1,0,0"))
(rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0"))
(rule "mul_literals" (formula "7") (term "0,1,1,0,0"))
(rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0"))
(rule "lenOfSeqConcat" (formula "8") (term "1,1,1,0,0,0,0,0,0"))
(builtin "One Step Simplification" (formula "8"))
(rule "polySimp_addComm0" (formula "8") (term "1,1,1,0,0,0,0,0,0"))
(rule "polySimp_addAssoc" (formula "8") (term "1,1,0,0,0,0,0,0"))
(rule "add_literals" (formula "8") (term "0,1,1,0,0,0,0,0,0"))
(rule "add_zero_left" (formula "8") (term "1,1,0,0,0,0,0,0"))
(rule "getOfSeqConcat" (formula "8") (term "1,1,0,0,0,0,0"))
(rule "polySimp_elimSub" (formula "8") (term "1,2,1,1,0,0,0,0,0"))
(rule "inEqSimp_ltToLeq" (formula "8") (term "0,1,1,0,0,0,0,0"))
(rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,1,1,0,0,0,0,0"))
(rule "polySimp_addComm0" (formula "8") (term "1,2,1,1,0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,1,1,0,0,0,0,0"))
(rule "polySimp_mulComm0" (formula "8") (term "1,0,1,1,0,0,0,0,0"))
(rule "polySimp_rightDist" (formula "8") (term "1,0,1,1,0,0,0,0,0"))
(rule "mul_literals" (formula "8") (term "0,1,0,1,1,0,0,0,0,0"))
(rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,1,1,0,0,0,0,0"))
(rule "polySimp_elimOne" (formula "8") (term "1,1,0,1,1,0,0,0,0,0"))
(rule "getOfSeqSingleton" (formula "8") (term "2,1,1,0,0,0,0,0"))
(rule "castDel" (formula "8") (term "1,2,1,1,0,0,0,0,0"))
(rule "polySimp_sepPosMonomial" (formula "8") (term "0,2,1,1,0,0,0,0,0"))
(rule "polySimp_mulLiterals" (formula "8") (term "1,0,2,1,1,0,0,0,0,0"))
(rule "polySimp_elimOne" (formula "8") (term "1,0,2,1,1,0,0,0,0,0"))
(rule "nnf_imp2or" (formula "7") (term "0"))
(rule "nnf_imp2or" (formula "8") (term "0,0"))
(rule "nnf_notAnd" (formula "7") (term "0,0"))
(rule "inEqSimp_notGeq" (formula "7") (term "0,0,0"))
(rule "times_zero_1" (formula "7") (term "1,0,0,0,0,0"))
(rule "add_zero_right" (formula "7") (term "0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0"))
(rule "mul_literals" (formula "7") (term "1,0,0,0"))
(rule "inEqSimp_notLeq" (formula "7") (term "1,0,0"))
(rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0,0"))
(rule "mul_literals" (formula "7") (term "0,1,0,0,1,0,0"))
(rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0,0"))
(rule "add_literals" (formula "7") (term "0,0,0,1,0,0"))
(rule "add_zero_left" (formula "7") (term "0,0,1,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "7") (term "1,0,0"))
(rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0"))
(rule "polySimp_elimOne" (formula "7") (term "1,1,0,0"))
(rule "nnf_notAnd" (formula "8") (term "0,0,0"))
(rule "nnf_notAnd" (formula "8") (term "0,0,0,0"))
(rule "nnf_notOr" (formula "8") (term "1,0,0,0"))
(rule "nnf_notAnd" (formula "8") (term "0,0,0,0,0"))
(rule "nnf_notAnd" (formula "8") (term "0,0,0,0,0,0"))
(rule "inEqSimp_notGeq" (formula "8") (term "0,0,0,0,0,0,0"))
(rule "times_zero_1" (formula "8") (term "1,0,0,0,0,0,0,0,0,0"))
(rule "add_zero_right" (formula "8") (term "0,0,0,0,0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,0,0,0,0,0"))
(rule "mul_literals" (formula "8") (term "1,0,0,0,0,0,0,0"))
(rule "inEqSimp_notLeq" (formula "8") (term "1,0,0,0,0,0,0"))
(rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "8") (term "1,0,0,0,0,0,0"))
(rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0,0,0,0,0"))
(rule "polySimp_rightDist" (formula "8") (term "1,1,0,0,0,0,0,0"))
(rule "mul_literals" (formula "8") (term "0,1,1,0,0,0,0,0,0"))
(rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0,0,0,0,0"))
(rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0,0,0,0,0"))
(rule "commute_or_2" (formula "8") (term "0,0,0,0"))
(rule "commute_or_2" (formula "8") (term "0,0"))
(rule "commute_or_2" (formula "8") (term "0,0,0"))
(rule "cnf_rightDist" (formula "8") (term "0,0"))
(rule "distr_forallAnd" (formula "8") (term "0"))
(rule "distr_forallAnd" (formula "8"))
(rule "andLeft" (formula "8"))
(rule "commute_or_2" (formula "8") (term "0,0"))
(builtin "One Step Simplification" (formula "8"))
(rule "castDel" (formula "8") (term "0,0,1,0"))
(rule "castDel" (formula "8") (term "0,0,0,1,0,0"))
(rule "castDel" (formula "8") (term "0,0,0,1,0,0,0"))
(rule "castDel" (formula "8") (term "0,1,1,0,0"))
(rule "commute_or_2" (formula "8") (term "0"))
(rule "commute_or_2" (formula "8") (term "0,0"))
(rule "commute_or_2" (formula "8") (term "0,0,0"))
(rule "commute_or" (formula "8") (term "0,0,0,0"))
(rule "shift_paren_or" (formula "9") (term "0,0"))
(builtin "One Step Simplification" (formula "9"))
(rule "castDel" (formula "9") (term "0,0,0,1,0,1,0"))
(rule "castDel" (formula "9") (term "0,0,0,0"))
(rule "castDel" (formula "9") (term "0,0,0,1,1,0"))
(rule "castDel" (formula "9") (term "0,1,1,1,0"))
(rule "shift_paren_or" (formula "9") (term "0"))
(rule "shift_paren_or" (formula "9") (term "0,0"))
(rule "shift_paren_or" (formula "9") (term "0,0,0"))
(rule "lenNonNegative" (formula "5") (term "0"))
(rule "inEqSimp_commuteLeq" (formula "5"))
(rule "lenNonNegative" (formula "9") (term "1,1,0,0,1,1,0"))
(rule "inEqSimp_commuteLeq" (formula "9"))
(rule "awaitExp" (formula "15") (inst "newHistory=newHistory_1") (inst "newHeap=newHeap_1") (userinteraction))
(branch "Case 1"
   (rule "insertClassInvariantFor<RW.RWController>" (formula "15") (term "0,1") (userinteraction))
   (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "6")))
   (rule "andRight" (formula "15"))
   (branch "Case 1"
      (rule "andRight" (formula "15"))
      (branch "Case 1"
         (rule "andRight" (formula "15"))
         (branch "Case 1"
            (rule "eqSymm" (formula "15"))
            (rule "close" (formula "15") (ifseqformula "7"))
         )
         (branch "Case 2"
            (rule "allRight" (formula "15") (inst "sk=i_2"))
            (rule "impRight" (formula "15"))
            (rule "notRight" (formula "16"))
            (rule "andLeft" (formula "2"))
            (rule "inEqSimp_ltToLeq" (formula "3"))
            (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "3") (term "0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "3"))
            (rule "polySimp_mulLiterals" (formula "3") (term "0"))
            (rule "polySimp_elimOne" (formula "3") (term "0"))
            (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "9"))
            (rule "polySimp_rightDist" (formula "3") (term "0,0"))
            (rule "mul_literals" (formula "3") (term "0,0,0"))
            (rule "polySimp_addComm1" (formula "3") (term "0"))
            (rule "add_literals" (formula "3") (term "0,0"))
            (rule "add_zero_left" (formula "3") (term "0"))
            (rule "inEqSimp_invertInEq1" (formula "3"))
            (rule "polySimp_mulLiterals" (formula "3") (term "0"))
            (rule "times_zero_2" (formula "3") (term "1"))
            (rule "polySimp_elimOne" (formula "3") (term "0"))
            (rule "inEqSimp_antiSymm" (formula "2") (ifseqformula "3"))
            (rule "applyEqRigid" (formula "4") (term "0") (ifseqformula "2"))
            (rule "leq_literals" (formula "4"))
            (rule "true_left" (formula "4"))
            (rule "applyEq" (formula "4") (term "1,1") (ifseqformula "2"))
            (rule "add_zero_right" (formula "4") (term "1"))
            (rule "applyEqRigid" (formula "1") (term "1,0") (ifseqformula "2"))
            (rule "applyEq" (formula "3") (term "0") (ifseqformula "2"))
            (rule "qeq_literals" (formula "3"))
            (rule "true_left" (formula "3"))
            (rule "inEqSimp_contradEq7" (formula "10") (term "0,0") (ifseqformula "3"))
            (rule "times_zero_1" (formula "10") (term "1,0,0,0,0"))
            (rule "add_zero_right" (formula "10") (term "0,0,0,0"))
            (rule "leq_literals" (formula "10") (term "0,0,0"))
            (builtin "One Step Simplification" (formula "10"))
            (rule "inEqSimp_subsumption1" (formula "8") (ifseqformula "3"))
            (rule "leq_literals" (formula "8") (term "0"))
            (builtin "One Step Simplification" (formula "8"))
            (rule "true_left" (formula "8"))
            (rule "inEqSimp_antiSymm" (formula "3") (ifseqformula "8"))
            (rule "applyEq" (formula "4") (term "0") (ifseqformula "3"))
            (rule "qeq_literals" (formula "4"))
            (rule "true_left" (formula "4"))
            (rule "applyEq" (formula "8") (term "0") (ifseqformula "3"))
            (rule "leq_literals" (formula "8"))
            (rule "true_left" (formula "8"))
            (rule "applyEq" (formula "9") (term "1,1,0,0") (ifseqformula "3"))
            (rule "inEqSimp_or_antiSymm0" (formula "9") (term "0,0"))
            (rule "add_literals" (formula "9") (term "0,0,0,0"))
            (builtin "One Step Simplification" (formula "9"))
            (rule "add_literals" (formula "9") (term "1,0,0,0"))
            (rule "commute_or" (formula "9") (term "0"))
            (builtin "One Step Simplification" (formula "9"))
            (rule "castDel" (formula "9") (term "1,0,0"))
            (rule "notLeft" (formula "9"))
            (rule "close" (formula "12") (ifseqformula "1"))
         )
      )
      (branch "Case 2"
         (rule "allRight" (formula "15") (inst "sk=i_4") (userinteraction))
         (rule "allRight" (formula "15") (inst "sk=ev_3") (userinteraction))
         (rule "instAll" (formula "15") (term "0,0,0,0,0,0") (ifseqformula "11") (userinteraction))
         (rule "impRight" (formula "16") (userinteraction))
         (rule "hide_left" (formula "13") (userinteraction))
         (rule "allLeftHide" (formula "12") (inst "t=i_4") (userinteraction))
         (rule "hide_left" (formula "10") (userinteraction))
         (rule "hide_left" (formula "6") (userinteraction))
         (rule "cut_direct" (formula "10") (term "0,0,0,0,1") (userinteraction))
         (branch "CUT: i_4 <= -1 + seqLen(history) TRUE"
            (rule "replace_known_left" (formula "11") (term "0,0,0,0,1,0") (ifseqformula "10") (userinteraction))
            (rule "replace_known_left" (formula "2") (term "0,0,1,1") (ifseqformula "10") (userinteraction))
            (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "10")) (ifInst ""  (formula "10")) (ifInst ""  (formula "10")))
            (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "10")) (ifInst ""  (formula "10")))
            (rule "andLeft" (formula "1") (userinteraction))
            (rule "andLeft" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "orLeft" (formula "15") (userinteraction))
            (branch " !isInvocationEv(HistoryLabel::seqGet(history, i_4)) | i_4 <= -1 | i_4 >= 1 + seqLen(history) | ! getMethod(HistoryLabel::seqGet(history, i_4)) = RW.RWinterface::openW#RW.CallerI"
               (rule "orLeft" (formula "15"))
               (branch " !isInvocationEv(HistoryLabel::seqGet(history, i_4)) | i_4 <= -1 | i_4 >= 1 + seqLen(history)"
                  (rule "orLeft" (formula "15"))
                  (branch " !isInvocationEv(HistoryLabel::seqGet(history, i_4)) | i_4 <= -1"
                     (rule "orLeft" (formula "15"))
                     (branch "!isInvocationEv(HistoryLabel::seqGet(history, i_4))"
                        (rule "notLeft" (formula "15"))
                        (rule "eqSymm" (formula "3"))
                        (rule "eqSymm" (formula "19"))
                        (rule "inEqSimp_ltToLeq" (formula "2"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "2") (term "0"))
                        (rule "inEqSimp_homoInEq1" (formula "6") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "6") (term "0,1,0,0"))
                        (rule "inEqSimp_homoInEq0" (formula "14"))
                        (rule "polySimp_addComm1" (formula "14") (term "0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                        (rule "polySimp_elimOne" (formula "2") (term "0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "1,0,0"))
                        (rule "polySimp_mulComm0" (formula "6") (term "1,1,0,0"))
                        (rule "polySimp_rightDist" (formula "6") (term "1,1,0,0"))
                        (rule "mul_literals" (formula "6") (term "0,1,1,0,0"))
                        (rule "polySimp_mulLiterals" (formula "6") (term "1,1,1,0,0"))
                        (rule "polySimp_elimOne" (formula "6") (term "1,1,1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "14"))
                        (rule "polySimp_mulComm0" (formula "14") (term "1"))
                        (rule "polySimp_rightDist" (formula "14") (term "1"))
                        (rule "mul_literals" (formula "14") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "14") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "14") (term "1,1"))
                        (rule "lenOfSeqConcat" (formula "2") (term "0"))
                        (builtin "One Step Simplification" (formula "2"))
                        (rule "polySimp_addComm0" (formula "2") (term "0"))
                        (rule "inEqSimp_homoInEq1" (formula "2"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                        (rule "mul_literals" (formula "2") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "2") (term "0"))
                        (rule "polySimp_addComm1" (formula "2") (term "0,0"))
                        (rule "add_literals" (formula "2") (term "0,0,0"))
                        (rule "add_zero_left" (formula "2") (term "0,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                        (rule "polySimp_elimOne" (formula "2") (term "0"))
                        (rule "inEqSimp_contradInEq1" (formula "6") (term "1,0,0") (ifseqformula "2"))
                        (rule "inEqSimp_homoInEq1" (formula "6") (term "0,1,0,0"))
                        (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1,0,0"))
                        (rule "polySimp_rightDist" (formula "6") (term "1,0,0,1,0,0"))
                        (rule "mul_literals" (formula "6") (term "0,1,0,0,1,0,0"))
                        (rule "polySimp_addAssoc" (formula "6") (term "0,0,1,0,0"))
                        (rule "polySimp_addComm0" (formula "6") (term "0,0,0,1,0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "6") (term "0,0,1,0,0"))
                        (rule "add_literals" (formula "6") (term "1,1,0,0,1,0,0"))
                        (rule "times_zero_1" (formula "6") (term "1,0,0,1,0,0"))
                        (rule "add_literals" (formula "6") (term "0,0,1,0,0"))
                        (rule "leq_literals" (formula "6") (term "0,1,0,0"))
                        (builtin "One Step Simplification" (formula "6"))
                        (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "14"))
                        (rule "inEqSimp_homoInEq0" (formula "2") (term "0"))
                        (rule "polySimp_pullOutFactor1b" (formula "2") (term "0,0"))
                        (rule "add_literals" (formula "2") (term "1,1,0,0"))
                        (rule "times_zero_1" (formula "2") (term "1,0,0"))
                        (rule "add_zero_right" (formula "2") (term "0,0"))
                        (rule "qeq_literals" (formula "2") (term "0"))
                        (builtin "One Step Simplification" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "inEqSimp_contradInEq1" (formula "5") (term "1,0,0") (ifseqformula "1"))
                        (rule "qeq_literals" (formula "5") (term "0,1,0,0"))
                        (builtin "One Step Simplification" (formula "5"))
                        (rule "getOfSeqConcat" (formula "2") (term "0"))
                        (rule "polySimp_elimSub" (formula "2") (term "1,2,0"))
                        (rule "inEqSimp_ltToLeq" (formula "2") (term "0,0"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,0"))
                        (rule "polySimp_addComm1" (formula "2") (term "0,0,0"))
                        (rule "getOfSeqSingleton" (formula "2") (term "2,0"))
                        (rule "castDel" (formula "2") (term "1,2,0"))
                        (rule "polySimp_sepNegMonomial" (formula "2") (term "0,2,0"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "0,0,2,0"))
                        (rule "polySimp_elimOne" (formula "2") (term "0,0,2,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0,0"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "0,0,0"))
                        (rule "polySimp_elimOne" (formula "2") (term "0,0,0"))
                        (rule "replace_known_left" (formula "2") (term "0,0") (ifseqformula "13"))
                        (builtin "One Step Simplification" (formula "2"))
                        (rule "applyEq" (formula "5") (term "0,0,0,1,0") (ifseqformula "2"))
                        (rule "replace_known_left" (formula "5") (term "0,1,0") (ifseqformula "3"))
                        (builtin "One Step Simplification" (formula "5"))
                        (rule "applyEq" (formula "14") (term "0") (ifseqformula "2"))
                        (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "14"))
                        (builtin "One Step Simplification" (formula "4"))
                        (rule "applyEq" (formula "5") (term "0,0,0") (ifseqformula "2"))
                        (rule "replace_known_left" (formula "5") (term "0,0") (ifseqformula "4"))
                        (builtin "One Step Simplification" (formula "5"))
                        (rule "applyEq" (formula "5") (term "0,0,0") (ifseqformula "2"))
                        (rule "applyEq" (formula "5") (term "0,1") (ifseqformula "2"))
                        (rule "close" (formula "18") (ifseqformula "5"))
                     )
                     (branch "i_4 <= -1"
                        (rule "eqSymm" (formula "3"))
                        (rule "eqSymm" (formula "19"))
                        (rule "replace_known_left" (formula "6") (term "1,0,0,0") (ifseqformula "15"))
                        (builtin "One Step Simplification" (formula "6"))
                        (rule "true_left" (formula "6"))
                        (rule "inEqSimp_ltToLeq" (formula "2"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                        (rule "polySimp_addComm1" (formula "2") (term "0"))
                        (rule "inEqSimp_homoInEq0" (formula "13"))
                        (rule "polySimp_addComm1" (formula "13") (term "0"))
                        (rule "lenOfSeqConcat" (formula "2") (term "0,1,0"))
                        (builtin "One Step Simplification" (formula "2"))
                        (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
                        (rule "polySimp_addComm0" (formula "2") (term "1,1,0"))
                        (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                        (rule "mul_literals" (formula "2") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "2") (term "0"))
                        (rule "polySimp_addComm1" (formula "2") (term "0,0"))
                        (rule "add_literals" (formula "2") (term "0,0,0"))
                        (rule "add_zero_left" (formula "2") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "13"))
                        (rule "polySimp_mulComm0" (formula "13") (term "1"))
                        (rule "polySimp_rightDist" (formula "13") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "13") (term "1,1"))
                        (rule "mul_literals" (formula "13") (term "0,1"))
                        (rule "polySimp_elimOne" (formula "13") (term "1,1"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                        (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                        (rule "polySimp_elimOne" (formula "2") (term "0"))
                        (rule "inEqSimp_contradInEq1" (formula "14") (ifseqformula "1"))
                        (rule "qeq_literals" (formula "14") (term "0"))
                        (builtin "One Step Simplification" (formula "14"))
                        (rule "closeFalse" (formula "14"))
                     )
                  )
                  (branch "i_4 >= 1 + seqLen(history)"
                     (rule "eqSymm" (formula "3"))
                     (rule "eqSymm" (formula "19"))
                     (rule "replace_known_left" (formula "6") (term "1,0,0") (ifseqformula "15"))
                     (builtin "One Step Simplification" (formula "6"))
                     (rule "true_left" (formula "6"))
                     (rule "inEqSimp_ltToLeq" (formula "2"))
                     (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                     (rule "polySimp_addComm1" (formula "2") (term "0"))
                     (rule "inEqSimp_homoInEq1" (formula "14"))
                     (rule "polySimp_addComm1" (formula "14") (term "0"))
                     (rule "inEqSimp_homoInEq0" (formula "13"))
                     (rule "polySimp_addComm1" (formula "13") (term "0"))
                     (rule "lenOfSeqConcat" (formula "2") (term "0,1,0"))
                     (builtin "One Step Simplification" (formula "2"))
                     (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
                     (rule "polySimp_addComm0" (formula "2") (term "1,1,0"))
                     (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                     (rule "mul_literals" (formula "2") (term "0,1,0"))
                     (rule "polySimp_addAssoc" (formula "2") (term "0"))
                     (rule "polySimp_addComm1" (formula "2") (term "0,0"))
                     (rule "add_literals" (formula "2") (term "0,0,0"))
                     (rule "add_zero_left" (formula "2") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "14"))
                     (rule "polySimp_mulComm0" (formula "14") (term "1"))
                     (rule "polySimp_rightDist" (formula "14") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "14") (term "1,1"))
                     (rule "mul_literals" (formula "14") (term "0,1"))
                     (rule "polySimp_elimOne" (formula "14") (term "1,1"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "13"))
                     (rule "polySimp_mulComm0" (formula "13") (term "1"))
                     (rule "polySimp_rightDist" (formula "13") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "13") (term "1,1"))
                     (rule "mul_literals" (formula "13") (term "0,1"))
                     (rule "polySimp_elimOne" (formula "13") (term "1,1"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                     (rule "polySimp_elimOne" (formula "2") (term "0"))
                     (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "13"))
                     (rule "inEqSimp_homoInEq0" (formula "2") (term "0"))
                     (rule "polySimp_pullOutFactor1b" (formula "2") (term "0,0"))
                     (rule "add_literals" (formula "2") (term "1,1,0,0"))
                     (rule "times_zero_1" (formula "2") (term "1,0,0"))
                     (rule "add_zero_right" (formula "2") (term "0,0"))
                     (rule "qeq_literals" (formula "2") (term "0"))
                     (builtin "One Step Simplification" (formula "2"))
                     (rule "true_left" (formula "2"))
                     (rule "inEqSimp_contradInEq0" (formula "12") (ifseqformula "13"))
                     (rule "andLeft" (formula "12"))
                     (rule "inEqSimp_homoInEq1" (formula "12"))
                     (rule "polySimp_mulComm0" (formula "12") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "12") (term "1,0"))
                     (rule "mul_literals" (formula "12") (term "0,1,0"))
                     (rule "polySimp_addAssoc" (formula "12") (term "0"))
                     (rule "polySimp_addComm1" (formula "12") (term "0,0"))
                     (rule "add_literals" (formula "12") (term "0,0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "12") (term "0"))
                     (rule "add_literals" (formula "12") (term "1,1,0"))
                     (rule "times_zero_1" (formula "12") (term "1,0"))
                     (rule "add_literals" (formula "12") (term "0"))
                     (rule "leq_literals" (formula "12"))
                     (rule "closeFalse" (formula "12"))
                  )
               )
               (branch "! getMethod(HistoryLabel::seqGet(history, i_4)) = RW.RWinterface::openW#RW.CallerI"
                  (rule "notLeft" (formula "15"))
                  (rule "eqSymm" (formula "3"))
                  (rule "eqSymm" (formula "19"))
                  (rule "replace_known_right" (formula "6") (term "0,1,0") (ifseqformula "15"))
                  (builtin "One Step Simplification" (formula "6"))
                  (rule "true_left" (formula "6"))
                  (rule "inEqSimp_ltToLeq" (formula "2"))
                  (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "2") (term "0"))
                  (rule "inEqSimp_homoInEq0" (formula "13"))
                  (rule "polySimp_addComm1" (formula "13") (term "0"))
                  (rule "lenOfSeqConcat" (formula "2") (term "0,1,0"))
                  (builtin "One Step Simplification" (formula "2"))
                  (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
                  (rule "polySimp_addComm0" (formula "2") (term "1,1,0"))
                  (rule "polySimp_rightDist" (formula "2") (term "1,0"))
                  (rule "mul_literals" (formula "2") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "2") (term "0"))
                  (rule "polySimp_addComm1" (formula "2") (term "0,0"))
                  (rule "add_literals" (formula "2") (term "0,0,0"))
                  (rule "add_zero_left" (formula "2") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "13"))
                  (rule "polySimp_mulComm0" (formula "13") (term "1"))
                  (rule "polySimp_rightDist" (formula "13") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "13") (term "1,1"))
                  (rule "mul_literals" (formula "13") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "13") (term "1,1"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                  (rule "polySimp_elimOne" (formula "2") (term "0"))
                  (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "13"))
                  (rule "inEqSimp_homoInEq0" (formula "2") (term "0"))
                  (rule "polySimp_pullOutFactor1b" (formula "2") (term "0,0"))
                  (rule "add_literals" (formula "2") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "2") (term "1,0,0"))
                  (rule "add_zero_right" (formula "2") (term "0,0"))
                  (rule "qeq_literals" (formula "2") (term "0"))
                  (builtin "One Step Simplification" (formula "2"))
                  (rule "true_left" (formula "2"))
                  (rule "getOfSeqConcat" (formula "2") (term "0"))
                  (rule "polySimp_elimSub" (formula "2") (term "1,2,0"))
                  (rule "inEqSimp_ltToLeq" (formula "2") (term "0,0"))
                  (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,0"))
                  (rule "polySimp_addComm1" (formula "2") (term "0,0,0"))
                  (rule "getOfSeqSingleton" (formula "2") (term "2,0"))
                  (rule "castDel" (formula "2") (term "1,2,0"))
                  (rule "polySimp_sepNegMonomial" (formula "2") (term "0,2,0"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "0,0,2,0"))
                  (rule "polySimp_elimOne" (formula "2") (term "0,0,2,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0,0"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "0,0,0"))
                  (rule "polySimp_elimOne" (formula "2") (term "0,0,0"))
                  (rule "replace_known_left" (formula "2") (term "0,0") (ifseqformula "12"))
                  (builtin "One Step Simplification" (formula "2"))
                  (rule "applyEq" (formula "13") (term "0,0") (ifseqformula "2"))
                  (rule "close" (formula "13") (ifseqformula "3"))
               )
            )
            (branch " seqSingleton(getCaller(HistoryLabel::seqGet(history, i_4))) = getArguments(HistoryLabel::seqGet(history, i_4))"
               (rule "eqSymm" (formula "3"))
               (rule "eqSymm" (formula "19"))
               (rule "replace_known_left" (formula "6") (term "1") (ifseqformula "15"))
               (builtin "One Step Simplification" (formula "6"))
               (rule "true_left" (formula "6"))
               (rule "inEqSimp_ltToLeq" (formula "2"))
               (rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
               (rule "polySimp_addComm1" (formula "2") (term "0"))
               (rule "inEqSimp_homoInEq0" (formula "13"))
               (rule "polySimp_addComm1" (formula "13") (term "0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "2"))
               (rule "polySimp_mulLiterals" (formula "2") (term "0"))
               (rule "polySimp_elimOne" (formula "2") (term "0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "13"))
               (rule "polySimp_mulComm0" (formula "13") (term "1"))
               (rule "polySimp_rightDist" (formula "13") (term "1"))
               (rule "mul_literals" (formula "13") (term "0,1"))
               (rule "polySimp_mulLiterals" (formula "13") (term "1,1"))
               (rule "polySimp_elimOne" (formula "13") (term "1,1"))
               (rule "lenOfSeqConcat" (formula "2") (term "0"))
               (builtin "One Step Simplification" (formula "2"))
               (rule "polySimp_addComm0" (formula "2") (term "0"))
               (rule "inEqSimp_homoInEq1" (formula "2"))
               (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
               (rule "polySimp_rightDist" (formula "2") (term "1,0"))
               (rule "mul_literals" (formula "2") (term "0,1,0"))
               (rule "polySimp_addAssoc" (formula "2") (term "0"))
               (rule "polySimp_addComm1" (formula "2") (term "0,0"))
               (rule "add_literals" (formula "2") (term "0,0,0"))
               (rule "add_zero_left" (formula "2") (term "0,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "2"))
               (rule "polySimp_mulLiterals" (formula "2") (term "0"))
               (rule "polySimp_elimOne" (formula "2") (term "0"))
               (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "13"))
               (rule "inEqSimp_homoInEq0" (formula "2") (term "0"))
               (rule "polySimp_pullOutFactor1b" (formula "2") (term "0,0"))
               (rule "add_literals" (formula "2") (term "1,1,0,0"))
               (rule "times_zero_1" (formula "2") (term "1,0,0"))
               (rule "add_literals" (formula "2") (term "0,0"))
               (rule "qeq_literals" (formula "2") (term "0"))
               (builtin "One Step Simplification" (formula "2"))
               (rule "true_left" (formula "2"))
               (rule "getOfSeqConcat" (formula "2") (term "0"))
               (rule "polySimp_elimSub" (formula "2") (term "1,2,0"))
               (rule "inEqSimp_ltToLeq" (formula "2") (term "0,0"))
               (rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,0"))
               (rule "polySimp_addComm1" (formula "2") (term "0,0,0"))
               (rule "getOfSeqSingleton" (formula "2") (term "2,0"))
               (rule "castDel" (formula "2") (term "1,2,0"))
               (rule "polySimp_sepNegMonomial" (formula "2") (term "0,2,0"))
               (rule "polySimp_mulLiterals" (formula "2") (term "0,0,2,0"))
               (rule "polySimp_elimOne" (formula "2") (term "0,0,2,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "2") (term "0,0"))
               (rule "polySimp_mulLiterals" (formula "2") (term "0,0,0"))
               (rule "polySimp_elimOne" (formula "2") (term "0,0,0"))
               (rule "replace_known_left" (formula "2") (term "0,0") (ifseqformula "12"))
               (builtin "One Step Simplification" (formula "2"))
               (rule "applyEq" (formula "13") (term "0,0,0") (ifseqformula "2"))
               (rule "applyEq" (formula "13") (term "0,1") (ifseqformula "2"))
               (rule "close" (formula "17") (ifseqformula "13"))
            )
         )
         (branch "CUT: i_4 <= -1 + seqLen(history) FALSE"
            (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "11")) (ifInst ""  (formula "11")) (ifInst ""  (formula "11")))
            (rule "andLeft" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "eqSymm" (formula "19"))
            (rule "eqSymm" (formula "6") (term "0,2,0,0,0,0,0,0"))
            (rule "eqSymm" (formula "6") (term "0,2,0,1,1"))
            (rule "eqSymm" (formula "6") (term "0,2,0,0,0,1"))
            (rule "eqSymm" (formula "6") (term "0,2,0,0,0,1,0"))
            (rule "eqSymm" (formula "14") (term "0,0,0,0,1,0"))
            (rule "eqSymm" (formula "14") (term "0,0,0,0,1"))
            (rule "eqSymm" (formula "14") (term "0,0,0,0,0,0,0"))
            (rule "eqSymm" (formula "14") (term "0,0,1,1"))
            (rule "eqSymm" (formula "3"))
            (rule "replace_known_right" (formula "6") (term "0,0,1,1") (ifseqformula "15"))
            (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "15")) (ifInst ""  (formula "15")) (ifInst ""  (formula "15")))
            (rule "inEqSimp_leqRight" (formula "15"))
            (rule "inEqSimp_ltToLeq" (formula "3"))
            (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "3") (term "0"))
            (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
            (rule "mul_literals" (formula "1") (term "0,1,0,0"))
            (rule "inEqSimp_homoInEq1" (formula "15") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "15") (term "0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
            (rule "add_literals" (formula "1") (term "0,0,0"))
            (rule "add_zero_left" (formula "1") (term "0,0"))
            (rule "polySimp_addComm0" (formula "1") (term "0"))
            (rule "inEqSimp_homoInEq1" (formula "7") (term "1,0,0"))
            (rule "polySimp_addComm1" (formula "7") (term "0,1,0,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "3"))
            (rule "polySimp_mulLiterals" (formula "3") (term "0"))
            (rule "polySimp_elimOne" (formula "3") (term "0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0"))
            (rule "mul_literals" (formula "15") (term "0,1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "0"))
            (rule "polySimp_elimOne" (formula "1") (term "0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0"))
            (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0"))
            (rule "polySimp_rightDist" (formula "7") (term "1,1,0,0"))
            (rule "mul_literals" (formula "7") (term "0,1,1,0,0"))
            (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0"))
            (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0"))
            (rule "lenOfSeqConcat" (formula "3") (term "0"))
            (builtin "One Step Simplification" (formula "3"))
            (rule "polySimp_addComm0" (formula "3") (term "0"))
            (rule "inEqSimp_homoInEq1" (formula "3"))
            (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
            (rule "polySimp_rightDist" (formula "3") (term "1,0"))
            (rule "mul_literals" (formula "3") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "3") (term "0"))
            (rule "polySimp_addComm1" (formula "3") (term "0,0"))
            (rule "add_literals" (formula "3") (term "0,0,0"))
            (rule "add_zero_left" (formula "3") (term "0,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "3"))
            (rule "polySimp_mulLiterals" (formula "3") (term "0"))
            (rule "polySimp_elimOne" (formula "3") (term "0"))
            (rule "inEqSimp_contradInEq1" (formula "7") (term "1,0,0,0") (ifseqformula "2"))
            (rule "qeq_literals" (formula "7") (term "0,1,0,0,0"))
            (builtin "One Step Simplification" (formula "7"))
            (rule "inEqSimp_contradInEq1" (formula "15") (term "1,0,0,0") (ifseqformula "2"))
            (rule "qeq_literals" (formula "15") (term "0,1,0,0,0"))
            (builtin "One Step Simplification" (formula "15"))
            (rule "inEqSimp_contradInEq1" (formula "7") (term "1,0,0") (ifseqformula "3"))
            (rule "inEqSimp_homoInEq1" (formula "7") (term "0,1,0,0"))
            (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0"))
            (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "7") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0,0"))
            (rule "polySimp_addComm0" (formula "7") (term "0,0,0,1,0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "7") (term "1,1,0,0,1,0,0"))
            (rule "times_zero_1" (formula "7") (term "1,0,0,1,0,0"))
            (rule "add_zero_right" (formula "7") (term "0,0,1,0,0"))
            (rule "leq_literals" (formula "7") (term "0,1,0,0"))
            (builtin "One Step Simplification" (formula "7"))
            (rule "inEqSimp_contradInEq1" (formula "15") (term "1,0,0") (ifseqformula "3"))
            (rule "inEqSimp_homoInEq1" (formula "15") (term "0,1,0,0"))
            (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0"))
            (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0"))
            (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0"))
            (rule "polySimp_addComm0" (formula "15") (term "0,0,0,1,0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,0,1,0,0"))
            (rule "add_literals" (formula "15") (term "1,1,0,0,1,0,0"))
            (rule "times_zero_1" (formula "15") (term "1,0,0,1,0,0"))
            (rule "add_zero_right" (formula "15") (term "0,0,1,0,0"))
            (rule "leq_literals" (formula "15") (term "0,1,0,0"))
            (builtin "One Step Simplification" (formula "15"))
            (rule "inEqSimp_antiSymm" (formula "3") (ifseqformula "1"))
            (rule "replace_known_left" (formula "8") (term "0,0,1,1") (ifseqformula "3"))
            (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "3")) (ifInst ""  (formula "3")) (ifInst ""  (formula "3")))
            (rule "replace_known_left" (formula "16") (term "0,0,0,0,0") (ifseqformula "3"))
            (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "3")) (ifInst ""  (formula "3")) (ifInst ""  (formula "3")))
            (rule "applyEq" (formula "4") (term "0") (ifseqformula "3"))
            (rule "inEqSimp_homoInEq1" (formula "4"))
            (rule "polySimp_pullOutFactor1" (formula "4") (term "0"))
            (rule "add_literals" (formula "4") (term "1,0"))
            (rule "times_zero_1" (formula "4") (term "0"))
            (rule "leq_literals" (formula "4"))
            (rule "true_left" (formula "4"))
            (rule "applyEq" (formula "1") (term "0") (ifseqformula "3"))
            (rule "inEqSimp_homoInEq0" (formula "1"))
            (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
            (rule "add_literals" (formula "1") (term "1,0"))
            (rule "times_zero_1" (formula "1") (term "0"))
            (rule "qeq_literals" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "applyEq" (formula "13") (term "0") (ifseqformula "2"))
            (rule "getMethodFromInvocREv" (formula "6") (term "0,0,1,0"))
            (builtin "One Step Simplification" (formula "6"))
            (rule "getArgumentsFromInvocREv" (formula "13") (term "1,1"))
            (rule "getMethodFromInvocREv" (formula "13") (term "0,0,1,0"))
            (builtin "One Step Simplification" (formula "13"))
            (rule "getArgumentsFromInvocREv" (formula "6") (term "1,1"))
            (rule "isInvocationReactionEvent" (formula "6") (term "0,0"))
            (builtin "One Step Simplification" (formula "6"))
            (rule "replace_known_left" (formula "13") (term "1") (ifseqformula "6"))
            (builtin "One Step Simplification" (formula "13"))
            (rule "true_left" (formula "13"))
            (rule "seqSingletonEqual" (formula "6"))
            (rule "equalityToSeqGetAndSeqLenRight" (formula "16") (inst "iv=iv"))
            (builtin "One Step Simplification" (formula "16"))
            (rule "eqSymm" (formula "16") (term "0"))
            (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0,1"))
            (rule "mul_literals" (formula "16") (term "1,0,0,1,0,0,1"))
            (rule "add_literals" (formula "16") (term "0,0,1,0,0,1"))
            (rule "add_zero_left" (formula "16") (term "0,1,0,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0,1"))
            (rule "getOfSeqSingleton" (formula "16") (term "0,1,0,1"))
            (rule "castDel" (formula "16") (term "1,0,1,0,1"))
            (rule "castDel" (formula "16") (term "2,0,1,0,1"))
            (rule "getOfSeqConcat" (formula "3") (term "0"))
            (rule "polySimp_elimSub" (formula "3") (term "1,2,0"))
            (rule "inEqSimp_ltToLeq" (formula "3") (term "0,0"))
            (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,0,0"))
            (rule "polySimp_addComm1" (formula "3") (term "0,0,0"))
            (rule "applyEq" (formula "3") (term "0,1,1,2,0") (ifseqformula "2"))
            (rule "polySimp_pullOutFactor1" (formula "3") (term "1,2,0"))
            (rule "add_literals" (formula "3") (term "1,1,2,0"))
            (rule "times_zero_1" (formula "3") (term "1,2,0"))
            (rule "applyEq" (formula "3") (term "0,1,0,0,0") (ifseqformula "2"))
            (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,0,0"))
            (rule "add_literals" (formula "3") (term "1,1,0,0,0"))
            (rule "times_zero_1" (formula "3") (term "1,0,0,0"))
            (rule "add_zero_right" (formula "3") (term "0,0,0"))
            (rule "leq_literals" (formula "3") (term "0,0"))
            (builtin "One Step Simplification" (formula "3"))
            (rule "getOfSeqSingleton" (formula "3") (term "0"))
            (builtin "One Step Simplification" (formula "3"))
            (rule "castDel" (formula "3") (term "0"))
            (rule "applyEq" (formula "12") (term "0,1,0,0,2,0") (ifseqformula "3"))
            (rule "applyEq" (formula "10") (term "0,1,0,0,0") (ifseqformula "3"))
            (rule "applyEq" (formula "6") (term "0,0") (ifseqformula "3"))
            (rule "applyEq" (formula "11") (term "0,1,0,0,0") (ifseqformula "3"))
            (rule "applyEq" (formula "12") (term "0,1,0,0,0,0,0") (ifseqformula "3"))
            (rule "applyEq" (formula "13") (term "0") (ifseqformula "3"))
            (rule "applyEqRigid" (formula "16") (term "1,0,1,0,1") (ifseqformula "6"))
            (rule "isInvocationReactionEventEQ" (formula "5") (term "1") (ifseqformula "3"))
            (builtin "One Step Simplification" (formula "5"))
            (rule "true_left" (formula "5"))
            (rule "getArgumentsFromInvocREvEQ" (formula "15") (term "0,1,1,0,1") (ifseqformula "3"))
            (rule "getArgumentsFromInvocREvEQ" (formula "15") (term "0,0,0") (ifseqformula "3"))
            (builtin "One Step Simplification" (formula "15"))
            (rule "allRight" (formula "15") (inst "sk=iv_19"))
            (rule "impRight" (formula "15"))
            (rule "andLeft" (formula "1"))
            (rule "getMethodFromInvocREvEQ" (formula "6") (term "0") (ifseqformula "5"))
            (builtin "One Step Simplification" (formula "6"))
            (rule "true_left" (formula "6"))
            (rule "getOfSeqSingleton" (formula "16") (term "1"))
            (rule "castDel" (formula "16") (term "1,1"))
            (rule "castDel" (formula "16") (term "2,1"))
            (builtin "One Step Simplification" (formula "16"))
            (rule "closeTrue" (formula "16"))
         )
      )
   )
   (branch "Case 2"
      (rule "wellFormedInvocationEventPreceedsInvocationReactionEvent" (formula "15"))
      (rule "replace_known_right" (formula "15") (term "0,1,0") (ifseqformula "12"))
      (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "2")) (ifInst ""  (formula "14")) (ifInst ""  (formula "13")) (ifInst ""  (formula "3")))
      (rule "closeTrue" (formula "15"))
   )
)
(branch "Case 2"
   (rule "hide_left" (formula "11") (userinteraction))
   (builtin "One Step Simplification" (formula "14"))
   (rule "impRight" (formula "14") (userinteraction))
   (rule "andLeft" (formula "1") (userinteraction))
   (rule "andLeft" (formula "1") (userinteraction))
   (rule "assignmentFieldMF" (formula "17") (term "1") (userinteraction))
   (rule "assignmentFieldMF" (formula "17") (term "1,1") (userinteraction))
   (builtin "One Step Simplification" (formula "17"))
   (rule "selectOfStore" (formula "17") (term "0,3,0,1,0"))
   (builtin "One Step Simplification" (formula "17"))
   (rule "methodImplicitReturnUnit" (formula "17") (term "1"))
   (builtin "One Step Simplification" (formula "17"))
   (rule "emptyBox" (formula "17") (term "1"))
   (builtin "One Step Simplification" (formula "17"))
   (rule "lenOfSeqConcat" (formula "17") (term "1,1,0,0,0,0,0,0,1"))
   (builtin "One Step Simplification" (formula "17"))
   (rule "polySimp_addComm0" (formula "17") (term "1,1,0,0,0,0,0,0,1"))
   (rule "andRight" (formula "17") (userinteraction))
   (branch "Case 1"
      (opengoal "\\forall ABSAnyInterface caller_0;   (   !caller_0 = null    -> \\forall RW.CallerI caller_1;         {caller:=caller_1}           {history:=seqConcat(history,                               seqSingleton(invocREv(caller_0,                                                     this,                                                     future,                                                     RW.RWinterface::openW#RW.CallerI,                                                     seqConcat(seqEmpty,                                                               seqSingleton(caller)))))}             (     wellFormed(heap)                 & wfHist(history)                 & !this = null                 & Pre(history, heap, this)                 & CInv(history, heap, this)              ->   \\[{   methodframe(source <- RW.RWinterface::openW#RW.CallerI,return <- (var:result,fut:future):{   await this.writer==null;                                                                                                                                                                                                                                           this.writer = caller;                                                                                                                     this.readers = insertElement(this.readers,                                                                                                                                                 caller);                                                                                                                    }                       }\\]CInv(history, heap, this))) ")
   )
   (branch "Case 2"
      (rule "allRight" (formula "17") (inst "sk=i_6") (userinteraction))
      (rule "allRight" (formula "17") (inst "sk=ev_5") (userinteraction))
      (rule "orRight" (formula "17"))
      (rule "orRight" (formula "17"))
      (rule "orRight" (formula "17"))
      (rule "orRight" (formula "17"))
      (rule "orRight" (formula "17"))
      (rule "notRight" (formula "19"))
      (rule "notRight" (formula "20"))
      (rule "insertClassInvariantFor<RW.RWController>" (formula "3") (userinteraction))
      (rule "andLeft" (formula "3"))
      (rule "andLeft" (formula "3"))
      (rule "andLeft" (formula "3"))
      (rule "hide_left" (formula "4") (userinteraction))
      (rule "hide_left" (formula "4") (userinteraction))
      (rule "instAll" (formula "2") (term "1,1") (ifseqformula "4") (userinteraction))
      (rule "hide_left" (formula "5") (userinteraction))
      (rule "instAll" (formula "1") (term "0,0") (ifseqformula "2") (userinteraction))
      (rule "hide_left" (formula "3") (userinteraction))
      (rule "impLeft" (formula "1") (userinteraction))
      (branch "Case 1"
         (rule "andRight" (formula "16") (userinteraction))
         (branch "Case 1"
            (rule "andRight" (formula "16") (userinteraction))
            (branch "Case 1"
               (rule "andRight" (formula "16") (userinteraction))
               (branch "Case 1"
                  (rule "andRight" (formula "16") (userinteraction))
                  (branch "Case 1"
                     (rule "eqSymm" (formula "2"))
                     (rule "inEqSimp_leqRight" (formula "20"))
                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "add_zero_left" (formula "1") (term "0"))
                     (rule "close" (formula "17") (ifseqformula "1"))
                  )
                  (branch "Case 2"
                     (opengoal "\\forall ABSAnyInterface caller_0;   (   !caller_0 = null    -> \\forall RW.CallerI caller_1;         {caller:=caller_1}           {history:=seqConcat(history,                               seqSingleton(invocREv(caller_0,                                                     this,                                                     future,                                                     RW.RWinterface::openW#RW.CallerI,                                                     seqConcat(seqEmpty,                                                               seqSingleton(caller)))))}             (     wellFormed(heap)                 & wfHist(history)                 & !this = null                 & Pre(history, heap, this)                 & CInv(history, heap, this)              ->   \\[{   methodframe(source <- RW.RWinterface::openW#RW.CallerI,return <- (var:result,fut:future):{   await this.writer==null;                                                                                                                                                                                                                                           this.writer = caller;                                                                                                                     this.readers = insertElement(this.readers,                                                                                                                                                 caller);                                                                                                                    }                       }\\]CInv(history, heap, this))) ")
                  )
               )
               (branch "Case 2"
                  (opengoal "\\forall ABSAnyInterface caller_0;   (   !caller_0 = null    -> \\forall RW.CallerI caller_1;         {caller:=caller_1}           {history:=seqConcat(history,                               seqSingleton(invocREv(caller_0,                                                     this,                                                     future,                                                     RW.RWinterface::openW#RW.CallerI,                                                     seqConcat(seqEmpty,                                                               seqSingleton(caller)))))}             (     wellFormed(heap)                 & wfHist(history)                 & !this = null                 & Pre(history, heap, this)                 & CInv(history, heap, this)              ->   \\[{   methodframe(source <- RW.RWinterface::openW#RW.CallerI,return <- (var:result,fut:future):{   await this.writer==null;                                                                                                                                                                                                                                           this.writer = caller;                                                                                                                     this.readers = insertElement(this.readers,                                                                                                                                                 caller);                                                                                                                    }                       }\\]CInv(history, heap, this))) ")
               )
            )
            (branch "Case 2"
               (rule "close" (formula "16") (ifseqformula "1"))
            )
         )
         (branch "Case 2"
            (rule "orRight" (formula "16"))
            (rule "eqSymm" (formula "2"))
            (rule "replace_known_right" (formula "23") (term "0,0") (ifseqformula "16"))
            (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "17")))
            (rule "closeTrue" (formula "23"))
         )
      )
      (branch "Case 2"
         (rule "eqSymm" (formula "3"))
         (rule "eqSymm" (formula "1"))
         (rule "close" (formula "23") (ifseqformula "1"))
      )
   )
)
)

}
