\settings {
"#Proof-Settings-Config-File
#Wed Sep 05 10:56:46 CEST 2012
[SMTSettings]maxGenericSorts=2
[SMTSettings]instantiateHierarchyAssumptions=true
[SMTSettings]UseBuiltUniqueness=false
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_INSTANTIATE
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_NORMAL
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[Strategy]Timeout=-1
[StrategyProperty]RETREAT_MODE_OPTIONS_KEY=RETREAT_MODE_NONE
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[Choice]DefaultChoices=intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:ABS
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[View]HideIntermediateProofsteps=false
[View]HideClosedSubtrees=false
[General]UseOCL=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[View]ShowWholeTaclet=false
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMinimum=-2147483645
[General]StupidMode=true
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[General]OneStepSimplification=true
[General]UseJML=true
[SMTSettings]integersMaximum=2147483645
[General]DnDDirectionSensitive=true
[View]FontIndex=2
[View]UseSystemLookAndFeel=false
[SMTSettings]useUninterpretedMultiplication=true
[Strategy]MaximumNumberOfAutomaticApplications=10000
[View]MaxTooltipLines=40
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[SMTSettings]SelectedTaclets=
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[SMTSettings]explicitTypeHierarchy=false
"
}

// This file is part of KeY - Integrated Deductive Software Design
// Copyright (C) 2001-2009 Universitaet Karlsruhe, Germany
//                         Universitaet Koblenz-Landau, Germany
//                         Chalmers University of Technology, Sweden
//
// The KeY system is protected by the GNU General Public License. 
// See LICENSE.TXT for details.
// Input file for KeY standalone prover version 0.497

\absSource ".";

\programVariables {
	MyModule.Variable o;
	MyModule.Variable this;
	ABS.StdLib.Fut<ABS.StdLib.Unit> ack;
}

\rules {

  insertClassInvariant {
  	\schemaVar \term ABSAnyInterface thisRef;
  	\schemaVar \term Heap heapSV;
  	\schemaVar \term Seq historySV;
  	
  	\find (CInv(heapSV, historySV, thisRef))
  	\replacewith (true)
  	\heuristics(simplify)
  };
}

/*
   this.a == lastIndexIn(history, set@Variable, 1)   
*/

\problem {
     wfHist(history)
   & !this = null
   & !o = null
   & wellFormed(heap)
->   \[{   ABS.StdLib.Fut local_ack = o!send(0);
          await local_ack?; 
          ack = local_ack; 
        }\]\exists any u;
               any::seqGet(history,
                           sub(seqLen(history),
                               Z(1(#))))
             = compREv(this, ack, u)

}

\proof {
(keyLog "0" (keyUser "bubel" ) (keyVersion "90bb886cd7b78027c8f6703803461f09e5699bb9"))

(autoModeTime "637")

(branch "dummy ID"
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "3"))
(rule "notLeft" (formula "2"))
(rule "eqSymm" (formula "5") (term "0,0"))
(rule "polySimp_elimSub" (formula "5") (term "1,1,0,0"))
(rule "mul_literals" (formula "5") (term "1,1,1,0,0"))
(rule "polySimp_addComm0" (formula "5") (term "1,1,0,0"))
(rule "asyncCall" (formula "5") (inst "futC=futC_0") (userinteraction))
(branch "check wellformedness"
   (rule "replace_known_right" (formula "5") (term "0,1") (ifseqformula "4"))
   (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "1")))
   (rule "closeTrue" (formula "5"))
)
(branch "async call"
   (builtin "One Step Simplification" (formula "5"))
   (rule "impRight" (formula "5"))
   (rule "notLeft" (formula "1"))
   (rule "impRight" (formula "6"))
   (rule "wellFormedInvocEv" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "notLeft" (formula "3"))
   (rule "notLeft" (formula "2"))
   (rule "andLeft" (formula "1"))
   (rule "notLeft" (formula "1"))
   (rule "awaitClaim" (formula "6") (inst "result=result_0") (inst "newHistory=newHistory_0") (inst "newHeap=newHeap_0") (userinteraction))
   (branch "Check invariant and wellformedness"
      (builtin "One Step Simplification" (formula "6"))
      (rule "wellFormedInvocEv" (formula "6") (term "1"))
      (rule "replace_known_right" (formula "6") (term "0,1,0,1") (ifseqformula "5"))
      (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "1")) (ifInst ""  (formula "4")) (ifInst ""  (formula "3")))
      (rule "insertClassInvariant" (formula "6"))
      (rule "closeTrue" (formula "6"))
   )
   (branch "await success"
      (builtin "One Step Simplification" (formula "6"))
      (rule "impRight" (formula "6"))
      (rule "andLeft" (formula "1"))
      (rule "insertClassInvariant" (formula "1"))
      (rule "true_left" (formula "1"))
      (rule "assignment" (formula "7") (term "1"))
      (builtin "One Step Simplification" (formula "7"))
      (rule "emptyBox" (formula "7") (term "1"))
      (builtin "One Step Simplification" (formula "7"))
      (rule "lenOfSeqConcat" (formula "7") (term "1,1,1,0"))
      (rule "polySimp_addAssoc" (formula "7") (term "1,1,0"))
      (rule "lenOfSeqConcat" (formula "7") (term "1,1,1,0"))
      (builtin "One Step Simplification" (formula "7"))
      (rule "polySimp_addComm0" (formula "7") (term "1,1,1,0"))
      (rule "polySimp_addComm1" (formula "7") (term "1,1,0"))
      (rule "polySimp_addAssoc" (formula "7") (term "0,1,1,0"))
      (rule "add_literals" (formula "7") (term "0,0,1,1,0"))
      (rule "add_zero_left" (formula "7") (term "0,1,1,0"))
      (rule "lenOfSeqConcat" (formula "7") (term "1,1,1,0"))
      (builtin "One Step Simplification" (formula "7"))
      (rule "polySimp_addComm0" (formula "7") (term "1,1,1,0"))
      (rule "polySimp_addComm0" (formula "7") (term "1,1,0"))
      (rule "getOfSeqConcat" (formula "7") (term "1,0"))
      (rule "polySimp_elimSub" (formula "7") (term "1,2,1,0"))
      (rule "inEqSimp_ltToLeq" (formula "7") (term "0,1,0"))
      (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0,1,0"))
      (rule "polySimp_addComm1" (formula "7") (term "0,0,1,0"))
      (rule "polySimp_addAssoc" (formula "7") (term "0,0,0,1,0"))
      (rule "polySimp_addAssoc" (formula "7") (term "0,0,0,0,1,0"))
      (rule "add_literals" (formula "7") (term "0,0,0,0,0,1,0"))
      (rule "lenOfSeqConcat" (formula "7") (term "0,1,1,2,1,0"))
      (builtin "One Step Simplification" (formula "7"))
      (rule "polySimp_mulComm0" (formula "7") (term "1,1,2,1,0"))
      (rule "polySimp_addComm0" (formula "7") (term "1,1,1,2,1,0"))
      (rule "polySimp_rightDist" (formula "7") (term "1,1,2,1,0"))
      (rule "mul_literals" (formula "7") (term "0,1,1,2,1,0"))
      (rule "polySimp_addComm1" (formula "7") (term "1,2,1,0"))
      (rule "polySimp_addAssoc" (formula "7") (term "0,1,2,1,0"))
      (rule "polySimp_addComm1" (formula "7") (term "0,0,1,2,1,0"))
      (rule "add_literals" (formula "7") (term "0,0,0,1,2,1,0"))
      (rule "add_zero_left" (formula "7") (term "0,0,1,2,1,0"))
      (rule "polySimp_pullOutFactor1" (formula "7") (term "0,1,2,1,0"))
      (rule "add_literals" (formula "7") (term "1,0,1,2,1,0"))
      (rule "times_zero_1" (formula "7") (term "0,1,2,1,0"))
      (rule "add_zero_left" (formula "7") (term "1,2,1,0"))
      (rule "lenOfSeqConcat" (formula "7") (term "0,1,0,0,1,0"))
      (builtin "One Step Simplification" (formula "7"))
      (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0"))
      (rule "polySimp_addComm0" (formula "7") (term "1,1,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0"))
      (rule "mul_literals" (formula "7") (term "0,1,0,0,1,0"))
      (rule "polySimp_addComm1" (formula "7") (term "0,0,1,0"))
      (rule "polySimp_addAssoc" (formula "7") (term "0,0,0,1,0"))
      (rule "polySimp_addComm1" (formula "7") (term "0,0,0,0,1,0"))
      (rule "add_literals" (formula "7") (term "0,0,0,0,0,1,0"))
      (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0,0,1,0"))
      (rule "add_literals" (formula "7") (term "1,1,0,0,0,1,0"))
      (rule "times_zero_1" (formula "7") (term "1,0,0,0,1,0"))
      (rule "add_zero_right" (formula "7") (term "0,0,0,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,1,0"))
      (rule "mul_literals" (formula "7") (term "1,0,1,0"))
      (rule "getOfSeqConcat" (formula "7") (term "2,1,0"))
      (rule "polySimp_elimSub" (formula "7") (term "1,2,2,1,0"))
      (rule "polySimp_pullOutFactor1" (formula "7") (term "1,2,2,1,0"))
      (rule "add_literals" (formula "7") (term "1,1,2,2,1,0"))
      (rule "times_zero_1" (formula "7") (term "1,2,2,1,0"))
      (rule "inEqSimp_ltToLeq" (formula "7") (term "0,2,1,0"))
      (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0,2,1,0"))
      (rule "polySimp_pullOutFactor2b" (formula "7") (term "0,0,2,1,0"))
      (rule "add_literals" (formula "7") (term "1,1,0,0,2,1,0"))
      (rule "times_zero_1" (formula "7") (term "1,0,0,2,1,0"))
      (rule "add_literals" (formula "7") (term "0,0,2,1,0"))
      (rule "leq_literals" (formula "7") (term "0,2,1,0"))
      (builtin "One Step Simplification" (formula "7"))
      (rule "getOfSeqSingleton" (formula "7") (term "2,1,0"))
      (builtin "One Step Simplification" (formula "7"))
      (rule "castDel" (formula "7") (term "2,1,0"))
      (rule "getOfSeqConcat" (formula "7") (term "1,1,0"))
      (rule "polySimp_elimSub" (formula "7") (term "1,2,1,1,0"))
      (rule "inEqSimp_ltToLeq" (formula "7") (term "0,1,1,0"))
      (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,0,1,1,0"))
      (rule "polySimp_addComm1" (formula "7") (term "1,2,1,1,0"))
      (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,1,2,1,1,0"))
      (rule "add_literals" (formula "7") (term "1,1,0,1,2,1,1,0"))
      (rule "times_zero_1" (formula "7") (term "1,0,1,2,1,1,0"))
      (rule "add_literals" (formula "7") (term "0,1,2,1,1,0"))
      (rule "polySimp_addAssoc" (formula "7") (term "0,0,1,1,0"))
      (rule "polySimp_addAssoc" (formula "7") (term "0,0,0,1,1,0"))
      (rule "polySimp_addComm1" (formula "7") (term "0,0,0,0,1,1,0"))
      (rule "add_literals" (formula "7") (term "0,0,0,0,0,1,1,0"))
      (rule "polySimp_pullOutFactor2b" (formula "7") (term "0,0,0,1,1,0"))
      (rule "add_literals" (formula "7") (term "1,1,0,0,0,1,1,0"))
      (rule "times_zero_1" (formula "7") (term "1,0,0,0,1,1,0"))
      (rule "add_literals" (formula "7") (term "0,0,0,1,1,0"))
      (rule "getOfSeqSingleton" (formula "7") (term "2,1,1,0"))
      (rule "castDel" (formula "7") (term "1,2,1,1,0"))
      (rule "polySimp_sepPosMonomial" (formula "7") (term "0,2,1,1,0"))
      (rule "mul_literals" (formula "7") (term "1,0,2,1,1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,1,1,0"))
      (rule "mul_literals" (formula "7") (term "1,0,1,1,0"))
      (rule "nnf_ex2all" (formula "7"))
      (rule "ifthenelse_to_or_right2" (formula "1") (term "0"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "inEqSimp_notLeq" (formula "1") (term "0,0,0"))
      (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0"))
      (rule "add_literals" (formula "1") (term "0,0,0,0,0"))
      (rule "add_zero_left" (formula "1") (term "0,0,0,0"))
      (rule "distr_forallAnd" (formula "1"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "andLeft" (formula "1"))
      (rule "instanceAny" (formula "2") (term "0,0,1"))
      (builtin "One Step Simplification" (formula "2"))
      (rule "inEqSimp_contradInEq0" (formula "1") (term "0,0") (ifseqformula "2"))
      (rule "qeq_literals" (formula "1") (term "0,0,0"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "ifthenelse_to_or_right2" (formula "1") (term "0"))
      (rule "inEqSimp_notLeq" (formula "1") (term "0,0,0"))
      (rule "mul_literals" (formula "1") (term "1,0,0,0,0,0"))
      (rule "add_literals" (formula "1") (term "0,0,0,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "1") (term "0,0,0"))
      (rule "mul_literals" (formula "1") (term "1,0,0,0"))
      (rule "distr_forallAnd" (formula "1"))
      (rule "andLeft" (formula "1"))
      (rule "commute_or" (formula "2") (term "0"))
      (rule "commute_or" (formula "1") (term "0"))
      (rule "ifthenelse_to_or_right2" (formula "2") (term "0,0"))
      (builtin "One Step Simplification" (formula "2"))
      (rule "commute_or" (formula "2") (term "0,0"))
      (rule "commute_or_2" (formula "2") (term "0"))
      (rule "inEqSimp_or_weaken2" (formula "2") (term "0"))
      (rule "add_literals" (formula "2") (term "1,0,1,0"))
      (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "3")))
      (rule "true_left" (formula "2"))
      (rule "cut_direct" (formula "1") (term "1,0"))
      (branch "CUT: seqLen(newHistory_0) >= -1 TRUE"
         (builtin "One Step Simplification" (formula "2"))
         (rule "true_left" (formula "2"))
         (rule "inEqSimp_antiSymm" (formula "1") (ifseqformula "2"))
         (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
         (rule "qeq_literals" (formula "2"))
         (rule "true_left" (formula "2"))
         (rule "applyEqRigid" (formula "2") (term "0") (ifseqformula "1"))
         (rule "leq_literals" (formula "2"))
         (rule "true_left" (formula "2"))
         (rule "lenNonNegative" (formula "1") (term "0"))
         (rule "inEqSimp_commuteLeq" (formula "1"))
         (rule "applyEqRigid" (formula "1") (term "0") (ifseqformula "2"))
         (rule "qeq_literals" (formula "1"))
         (rule "closeFalse" (formula "1"))
      )
      (branch "CUT: seqLen(newHistory_0) >= -1 FALSE"
         (builtin "One Step Simplification" (formula "1"))
         (rule "inEqSimp_geqRight" (formula "6"))
         (rule "mul_literals" (formula "1") (term "1,0,0"))
         (rule "add_literals" (formula "1") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "1"))
         (rule "mul_literals" (formula "1") (term "1"))
         (rule "inEqSimp_subsumption0" (formula "3") (ifseqformula "1"))
         (rule "leq_literals" (formula "3") (term "0"))
         (builtin "One Step Simplification" (formula "3"))
         (rule "true_left" (formula "3"))
         (rule "allLeft" (formula "2") (inst "t=result_0"))
         (rule "notLeft" (formula "2"))
         (rule "eqSymm" (formula "6"))
         (rule "lenNonNegative" (formula "2") (term "1,1,1,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "2"))
         (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "1"))
         (rule "qeq_literals" (formula "2") (term "0"))
         (builtin "One Step Simplification" (formula "2"))
         (rule "closeFalse" (formula "2"))
      )
   )
)
)

}
