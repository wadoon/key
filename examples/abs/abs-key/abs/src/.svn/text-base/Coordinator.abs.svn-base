module ReplicationSystem.Server.SyncServerClientCoordinator;

export SyncServerClientCoordinatorImpl;

import * from ReplicationSystem.Environment.DataTypes;
import * from ReplicationSystem.Environment.ReplicationSnapshot.Interfaces;
import * from ReplicationSystem.Server.Interfaces;

// CSP model CoordinatorProcess
// Java class com.fredhopper.replication.server.SyncServerClientCoordinator
[COG] 
class SyncServerClientCoordinatorImpl([Far] SyncServer server, Set<ClientId> clients) 
implements SyncServerClientCoordinator {

	Set<ConnectionThread> threads = EmptySet;
	[Far] ReplicationSnapshot snapshot;
	
	//@ represents thread <- threads;
	//@ represents snapshot <- snapshot;

	//take this out from the constructor so that it
	//can be modified
	//@ also 
	//@ 	assignable this.snapshot;
	//@		ensures this.snapshot == snapshot;
	Unit setSnapshot(ReplicationSnapshot snapshot) {
		this.snapshot = snapshot;
	}
	
	// Setting up a replication session
	//@ also 
	//@ 	ensures size(threads) > 0 ==> 
	//@			snapshot.getIndexingId() == \old(snapshot.getIndexingId()); 
	Unit startReplicationUpdate(ConnectionThread thread) {
		threads = Insert(thread,threads);
		if (size(threads) == 1) {
			this.refreshSnapShot();
		}
	}
	
	// Tidy up after a replication session
	//@ also 
	//@ 	ensures contains(threads, thread) ==> 
	//@			 threads == remove(\old(threads), thread); 
	Unit finishReplicationUpdate(ConnectionThread thread) {
		if (contains(threads,thread)) {
			if (size(threads) == 1) {
				this.clearSnapshot();
			}
			threads = remove(threads,thread);
		}
	}
	
	Unit clearSnapshot() {
		Fut<Unit> unit = snapshot!clearSnapshot(); unit.get;
	}
	
	Unit refreshSnapShot() {
		// advance check point only after data 
		// has been replicated to all clients
		Fut<Unit> unit = snapshot!refreshSnapshot(); unit.get;
	}
	
	TransactionId getCurrentTransactionId() {
		Fut<TransactionId> cf = snapshot!getIndexingId();
		return cf.get;
	}
}