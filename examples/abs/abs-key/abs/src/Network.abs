module Replication.Network;

export *;

import * from ReplicationSystem.Client.Interfaces;
import * from ReplicationSystem.Server.Interfaces;
import * from ReplicationSystem.Environment.Interfaces;
import * from ReplicationSystem.Tests;
import * from ReplicationSystem.Environment.Files;

interface Network {
	Unit shutDown(ClientConnector client);
}

class Network(
	[Far] [Final] SyncServer server, Set<[Far] ClientConnector> clients,
	[Far] Updater updater ) implements Network {

	Bool ready = False;
	Set<Tester> testers = EmptySet;

	Unit run() {
		Set<ClientConnector> cs = clients;
		while (hasNext(cs)) {
			Pair<Set<ClientConnector>,ClientConnector> nt = next(cs);
			Tester tester = new cog TesterImpl(server,snd(nt));
			testers = Insert(tester,testers);
			cs = fst(nt);
		}
		ready = True;
	}

	Unit shutDown(ClientConnector client) {
		await ready;
		clients = remove(clients,client);
		if (clients == EmptySet) {
			Fut<Unit> ss = updater!shutDown(); ss.get;
			ss = server!requestShutDown(); ss.get;
			Set<Tester> ts = testers;
			while (hasNext(ts)) {
				Pair<Set<Tester>,Tester> nt = next(ts);
				Tester tester = snd(nt);
				tester!analyse();
				ts = fst(nt);
			}
		}
	}
}