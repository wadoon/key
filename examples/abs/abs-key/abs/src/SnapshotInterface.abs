module ReplicationSystem.Environment.ReplicationSnapshot.Interfaces;

export *;

import * from ReplicationSystem.Environment.Files;
import * from ReplicationSystem.Environment.DataTypes;

interface ReplicationSnapshot {
	
	//model Int index;
	//model List<Maybe<Map<String, Set<ServerReplicationItem>>> data;

	//ensures index >= \old(index);
	//ensures length(data) == index + 1;
	//ensures nth(data, index) != Nothing;
	[Atomic] 
	Unit refreshSnapshot();
	
	/*
	 * Cleaning replication snapshot 
	 */
	//ensures index == \old(index);
	//ensures nth(data, index) == Nothing;
	[Atomic] 
	Unit clearSnapshot();
	
	//@ ensures \result == index;
	//@ assignable \nothing;
	Int getIndexingId();

	//@ requires length(data) >= index + 1; 
	//@ requires nth(data, index) != Nothing;
	//@ ensures \result == lookupDefault(fromJust(nth(data, index)), name, EmptySet));
	//@ assignable \nothing;
	Set<ServerReplicationItem> getItems(String name);

}

interface BasicReplicationItem {
	//@ model FileEntry entry;
	//@ model FileId dir; 

	//@ ensures \result == entry;
	//@ assignable \nothing;
	FileEntry getContents();
	
	//@ ensures entry == EmptyMap;
	[Atomic] Unit cleanup();
	
	//@ ensures \result == dir;
	//@ assignable \nothing;
	FileId getAbsoluteDir();
}

/*
 * Represents an item to be replicated to 
 * the sync clients. Global for the SyncServer
 *
 * Items could be abstracted as data type 
 * but data types cannot be modified by deltas! 
 */
interface ServerReplicationItem extends BasicReplicationItem {
	Command getCommand();
	ReplicationItemType getType();
	[Atomic] Unit refresh();
}