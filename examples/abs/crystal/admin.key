// This file is part of KeY - Integrated Deductive Software Design
// Copyright (C) 2001-2009 Universitaet Karlsruhe, Germany
//                         Universitaet Koblenz-Landau, Germany
//                         Chalmers University of Technology, Sweden
//
// The KeY system is protected by the GNU General Public License. 
// See LICENSE.TXT for details.
// Input file for KeY standalone prover version 0.497

\absSource ".";

\module "CV";
\class "Adm";

\functions{

  Seq some{true}(Seq);

}

\predicates {

   looseSubseq(Seq, Seq);
  
}

\programVariables {
	CV.AdmI this;
	CV.ProfI p;
	String s;
}

\rules {

  looseSubseqBase {
      \schemaVar \term Seq seq;
      
      \find (looseSubseq(seqEmpty, seq)) 
      \replacewith(true)

      \heuristics (concrete)
  };


  looseSubseqLenSubSmallerThanLenSeq1 {
      \schemaVar \term Seq seq;
      \schemaVar \term Seq sub;

      \find (looseSubseq(sub, seq) ==>) 
      \add(seqLen(sub) <= seqLen(seq) ==>)
  };

  looseSubseqLenSubSmallerThanLenSeq2 {
      \schemaVar \term Seq seq;
      \schemaVar \term Seq sub;

      \find (==> looseSubseq(sub, seq)) 
      \replacewith(==> \if (seqLen(sub) <= seqLen(seq)) \then (looseSubseq(sub, seq))
      		       \else (false) )

  };

  looseSubseqDefStep {
      \schemaVar \term Seq sub;
      \schemaVar \term Seq seq;
      
      \find (looseSubseq(sub, seq)) 
      \replacewith(seqLen(sub) <= seqLen(seq) & 
                   \if (sub = seqEmpty) \then (true)
                   \else (
		      \if (any::seqGet(sub, seqLen(sub)-1) = any::seqGet(seq, seqLen(seq)-1))
      		      \then (looseSubseq(seqSub(sub, 0, seqLen(sub)-2), seqSub(seq, 0, seqLen(seq)-2)))
      		      \else (looseSubseq(sub, seqSub(seq, 0, seqLen(seq)-2))))
		   )

  };



}


\problem {

\forall ABSAnyInterface concreteCaller; \forall Future concreteFut;
 (
  \forall int idx; (idx % 5 = 0 -> (
          (idx>=4 & idx<seqLen(history)  -> 
           (\exists ABSAnyInterface c; \exists Future d;\exists Future u;\exists Future u2;\exists any cv;
                   (HistoryLabel::seqGet(history, idx - 4) = invocREv(c, this, d, CV.AdmI::req, seqEmpty) &
                    HistoryLabel::seqGet(history, idx - 3) = invocEv(this, p, u, CV.ProfI::ask, seqEmpty) & 
                    HistoryLabel::seqGet(history, idx - 2) = compREv(this, u, u2) & 
                    HistoryLabel::seqGet(history, idx - 1) = compREv(this, u2, cv) & 
                    HistoryLabel::seqGet(history, idx) = compEv(this, d, CV.AdmI::req, cv) 
		   ))
          )
          & 
           ((seqLen(history) - idx > 0 & seqLen(history) - idx < 5) ->
	    (seqLen(history)%5>=2 & seqLen(history)%5 < 4 &
   	    \exists ABSAnyInterface c; \exists Future d;\exists Future u;\exists Future u2;\exists any cv;(
                   (HistoryLabel::seqGet(history, idx + 1) = invocREv(c, this, d, CV.AdmI::req, seqEmpty) & 
                    HistoryLabel::seqGet(history, idx + 2) = invocEv(this, p, u, CV.ProfI::ask, seqEmpty) &                    
		    seqLen(history)%5 = 3-> HistoryLabel::seqGet(history, idx + 3) = compREv(this, u, u2)))
           )
  ))))
}


