// This file is part of KeY - Integrated Deductive Software Design
// Copyright (C) 2001-2009 Universitaet Karlsruhe, Germany
//                         Universitaet Koblenz-Landau, Germany
//                         Chalmers University of Technology, Sweden
//
// The KeY system is protected by the GNU General Public License. 
// See LICENSE.TXT for details.
// Input file for KeY standalone prover version 0.497

\absSource ".";

\module "RW";
\class "RWController";

\functions{

\\  Seq some{true}(Seq);
  Seq Readers{}(Seq);
  
}

\predicates {

   looseSubseq(Seq, Seq);
  
}

\programVariables {
	RW.RWinterface this;
}

\rules {

  looseSubseqBase {
      \schemaVar \term Seq seq;
      
      \find (looseSubseq(seqEmpty, seq)) 
      \replacewith(true)

      \heuristics (concrete)
  };


  looseSubseqLenSubSmallerThanLenSeq1 {
      \schemaVar \term Seq seq;
      \schemaVar \term Seq sub;

      \find (looseSubseq(sub, seq) ==>) 
      \add(seqLen(sub) <= seqLen(seq) ==>)
  };

  looseSubseqLenSubSmallerThanLenSeq2 {
      \schemaVar \term Seq seq;
      \schemaVar \term Seq sub;

      \find (==> looseSubseq(sub, seq)) 
      \replacewith(==> \if (seqLen(sub) <= seqLen(seq)) \then (looseSubseq(sub, seq))
      		       \else (false) )

  };

  looseSubseqDefStep {
      \schemaVar \term Seq sub;
      \schemaVar \term Seq seq;
      
      \find (looseSubseq(sub, seq)) 
      \replacewith(seqLen(sub) <= seqLen(seq) & 
                   \if (sub = seqEmpty) \then (true)
                   \else (
		      \if (any::seqGet(sub, seqLen(sub)-1) = any::seqGet(seq, seqLen(seq)-1))
      		      \then (looseSubseq(seqSub(sub, 0, seqLen(sub)-2), seqSub(seq, 0, seqLen(seq)-2)))
      		      \else (looseSubseq(sub, seqSub(seq, 0, seqLen(seq)-2))))
		   )

  };



}


\problem {
\forall ABSAnyInterface concreteCaller; \forall Seq readers; \forall Any writer; \forall Seq newHistory;
(
readers = Readers(history)

->
{history := seqConcat(history, seqSingleton(invocREv(concreteCaller, this, concreteFuture, RW.RWinterface::openR, seqEmpty)))}
//  [await writer = null; readers = Add(concreteCaller, readers)]
{history := seqConcat(history, newHistory)}
wfHist(history) & writer = null -> (
    {readers := seqConcat(readers, seqSingleton(concreteCaller))}
    {history := seqConcat(history, seqSingleton(compEv(this, concreteFuture, RW.RWinterface::openR, Empty)))}
      readers = Readers(history)
)
)

}
