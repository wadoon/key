
//----------------------------------------------------
// The following code was generated by CUP v0.12joho 20110608
// Fri Jan 18 23:23:37 CET 2013
//----------------------------------------------------

package de.uni_freiburg.informatik.ultimate.smtinterpol.smtlib;

import de.uni_freiburg.informatik.ultimate.logic.*;
import de.uni_freiburg.informatik.ultimate.util.ScopedHashMap;
import org.apache.log4j.Logger;
import java_cup.runtime.Symbol;
import de.uni_freiburg.informatik.ultimate.smtinterpol.util.MySymbolFactory;

/** CUP v0.12joho 20110608 generated parser.
  * @version Fri Jan 18 23:23:37 CET 2013
  */
public class Parser extends java_cup.runtime.LRParser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}
  /** Return action table */
  protected String[] action_table() { 
    return new String[] {
    "\242\000\002\023\005\021\002\021\002\021\002" +
    "\021\004\021\002\021\002\022\001\022\001\022" +
    "\001\016\001\017\005\017\006\020\005\004\001" +
    "\004\005\004\007\004\006\004\005\004\010\041" +
    "\000\004\010\042\000\004\012\043\000\004\012" +
    "\044\000\005\004\006\001\006\001\006\001\006" +
    "\001\007\001\007\004\007\005\007\005\007\005" +
    "\010\001\010\001\010\001\010\001\012\001\013" +
    "\001\011\001\001\002\015\001\015\001\015\001" +
    "\015\001\014\001\014\004\014\005\014\007\002" +
    "\004\003\005\003\005\003\005\046\000\032\000" +
    "\031\001\031\002\040\000\037\001\037\002\047" +
    "\001\047\002\035\001\035\002\036\001\036\002" +
    "\034\000\033\001\033\002\045\001\045\002\026" +
    "\002\027\002\030\002\025\000\024\002\334\u027c" +
    "\340\342\u01e4\334\u0396\u0356\u019e\u01d6\u019c\336\u0274" +
    "\u026c\u0264\u01e4\u0376\u03c6\u0134\334\334\334\334\334" +
    "\334\334\u0228\334\334\334\334\334\334\334\334" +
    "\334\u01b2\u0248\u0244\334\u0344\334\u033a\u023c\u0238\u0234" +
    "\u0190\334\u0188\u022c\u0168\334\334\u03d2\334\u0160\u03d0" +
    "\u0330\334\u0106\u0192\u01c0\u016e\u014e\334\334\334\334" +
    "\u0286\334\334\u02d6\u02ae\u0224\u0128\u0204\u0154\u0140\u011c" +
    "\u03ce\334\334\366\334\u03cc\u03c4\u029e\334\334\334" +
    "\334\u0156\334\334\346\334\334\u012e\u03ca\u0326\u03c8" +
    "\334\u03c0\u03c2\u03be\u03bc\342\334\u012c\u0120\u0118\362" +
    "\u03ba\u031c\u03b6\u03b8\334\u03a4\u03b4\334\334\334\u03a2" +
    "\u03b2\334\u03a0\u0152\334\u01b4\u039a\u0312\u0276\u037c\u0332" +
    "\334\334\u0138\u01f0\336\334\u0330\334\u037a\u0362\u0328" +
    "\u02f2\334\334\334\u0360\u02dc\u035e\334\u035c\u02da\u0308" +
    "\u02ca\u02ce\334\u02c0\u03d0\334\u018a\u02a4\342\u0182\u02a0" +
    "\u025a\u02b6\334\340\334\u0256\u02b2\334\u0252\334\334" +
    "\u0200\334\u0228\u02aa\360\u021e\u02a6\334\344\334\u021a" +
    "\u02a2\u017a\334\u018a\334\u020e\334\u01f6\334\u02fe\u02ea" +
    "\u02e0\334\334\u01f0\u029a\u01c4\u0298\u0266\u023e\u022e\334" +
    "\334\u0198\u0292\u0146\u028e\354\u028a\334\334\334\u0432" +
    "\000\000\000\000\002\000\000\000\000\000\000" +
    "\000\000\000\000\000\000\242\020\004\242\120" +
    "\116\122\124\000\010\040\104\006\010\022\026" +
    "\024\012\000\000\000\016\000\076\000\000\000" +
    "\000\000\100\000\000\000\074\102\126\126\000" +
    "\000\000\030\000\000\000\000\000\136\144\140" +
    "\142\000\226\146\000\000\000\000\000\000\000" +
    "\000\000\210\000\166\172\000\000\000\014\232" +
    "\130\130\000\014\234\220\014\236\000\130\000" +
    "\000\230\000\000\000\000\000\214\000\000\000" +
    "\000\000\000\000\000\212\000\000\134\106\174" +
    "\000\000\132\222\000\222\000\000\000\000\000" +
    "\000\110\112\000\000\176\216\000\176\000\000" +
    "\000\000\042\050\114\000\000\224\224\000\000" +
    "\000\000\000\150\000\000\200\000\000\070\000" +
    "\000\000\000\046\064\032\000\000\036\000\152" +
    "\072\000\202\000\000\000\000\000\044\000\034" +
    "\000\000\000\204\000\052\000\056\000\154\000" +
    "\000\000\156\206\000\000\000\000\000\000\000" +
    "\066\062\000\000\000\000\000\000\160\162\164" +
    "\214\000\211\000\251\000\243\000\002\011\135" +
    "\000\001\007\120\053\334\001\334\001\334\001" +
    "\271\053\334\001\121\000\334\001\334\001\334" +
    "\001\265\053\156\053\012\077\120\055\334\001" +
    "\012\101\012\103\271\055\120\057\120\243\151" +
    "\u010f\120\061\271\057\265\055\156\055\271\061" +
    "\135\367\327\243\265\057\156\057\155\053\265" +
    "\061\156\061\121\355\154\053\120\063\120\170" +
    "\214\u013f\211\u013f\271\063\153\053\140\053\072" +
    "\163\155\055\327\u01b7\265\063\156\063\154\055" +
    "\155\057\115\341\114\053\155\061\154\057\153" +
    "\055\140\055\154\061\111\331\072\255\153\057" +
    "\140\057\113\053\153\061\140\061\114\055\021" +
    "\045\155\u0111\066\053\207\367\114\057\154\063" +
    "\061\053\114\061\325\243\113\055\275\u018b\153" +
    "\u0111\140\063\275\u018d\113\057\066\055\175\367" +
    "\113\061\132\367\061\055\066\057\114\063\057" +
    "\053\066\061\061\057\325\u01b5\055\053\061\061" +
    "\076\173\076\275\075\261\113\063\011\053\007" +
    "\053\075\263\057\055\275\u018f\066\063\244\243" +
    "\055\055\057\057\061\063\241\243\057\061\055" +
    "\057\011\055\007\055\055\061\073\261\323\243" +
    "\011\057\007\057\073\263\011\061\007\061\244" +
    "\170\244\u013f\057\063\277\u017b\241\170\241\u013f" +
    "\055\063\277\u0191\177\243\043\163\177\367\323" +
    "\u01b3\011\063\007\063\210\117\210\121\314\243" +
    "\210\123\210\125\210\053\210\127\210\131\210" +
    "\133\210\135\210\137\177\170\210\141\010\073" +
    "\210\143\210\145\074\167\074\267\210\055\314" +
    "\u01a5\003\013\210\147\210\u010f\210\057\312\243" +
    "\016\115\210\151\303\243\031\117\031\121\210" +
    "\153\031\123\031\125\031\053\031\127\031\131" +
    "\031\133\031\135\031\137\301\243\031\141\312" +
    "\u01a3\031\143\031\145\303\170\273\243\031\055" +
    "\266\243\261\u017b\031\147\112\323\031\057\263" +
    "\243\320\177\031\151\320\243\301\170\320\201" +
    "\031\153\320\203\320\205\317\177\273\u0189\317" +
    "\243\266\u0185\317\201\110\323\317\203\317\205" +
    "\263\u0181\060\233\320\207\320\170\256\243\054" +
    "\060\253\243\053\223\246\243\052\054\317\207" +
    "\317\170\316\177\045\173\316\243\044\167\316" +
    "\201\103\301\316\203\316\205\202\177\256\170" +
    "\202\243\253\u0175\202\201\246\u0171\202\203\202" +
    "\205\103\177\015\113\316\207\316\170\103\303" +
    "\014\111\103\203\103\205\103\263\013\107\202" +
    "\207\202\170\125\177\000\003\125\243\245\243" +
    "\125\201\242\243\125\203\125\205\107\177\330" +
    "\u01b7\107\243\326\u01b5\107\201\324\u01b3\107\203" +
    "\107\205\315\u01a5\313\u01a3\125\207\125\170\245" +
    "\170\274\u0189\242\170\267\u0185\233\243\264\u0181" +
    "\107\207\107\170\106\177\254\u0175\106\243\247" +
    "\u0171\106\201\307\177\106\203\106\205\236\u0161" +
    "\307\201\306\177\307\203\307\205\233\u015f\306" +
    "\201\234\u015f\306\203\306\205\106\207\106\170" +
    "\305\177\231\u015b\225\u0155\307\207\305\201\232" +
    "\177\305\203\305\205\306\207\232\201\201\177" +
    "\232\203\232\205\220\u0153\201\201\160\177\201" +
    "\203\201\205\305\207\160\201\142\177\160\203" +
    "\160\205\232\207\142\201\070\177\142\203\142" +
    "\205\201\207\070\201\051\177\070\203\070\205" +
    "\160\207\051\201\047\177\051\203\051\205\142" +
    "\207\047\201\217\u0151\047\203\047\205\070\207" +
    "\213\u0147\204\u013b\006\043\006\045\051\207\230" +
    "\243\226\243\224\243\216\243\047\207\006\017" +
    "\006\021\006\023\006\025\006\027\006\031\006" +
    "\033\006\035\017\043\006\047\215\243\203\243" +
    "\230\u015b\226\170\224\u0155\216\u0151\017\017\017" +
    "\021\017\023\017\025\017\027\017\031\017\033" +
    "\017\035\005\015\017\047\200\243\215\170\203" +
    "\u013b\174\243\171\243\164\243\005\017\005\021" +
    "\005\023\005\025\005\027\005\031\005\033\005" +
    "\035\161\243\005\240\157\243\200\170\147\243" +
    "\145\243\174\170\171\u0127\164\u0125\143\243\141" +
    "\144\123\243\116\243\067\243\064\124\172\u0127" +
    "\165\u0125\161\u0123\162\u0123\157\170\150\u010d\147" +
    "\u010d\145\u010b\146\u010b\124\357\020\047\143\170" +
    "\141\144\123\357\116\170\067\170\064\124\237" +
    "\u0163\334\001\334\001\334\001\u015a\357\170\240" +
    "\170\276\u0144\327\u014f\117\u014a\343\033\034\104" +
    "\105\312\174\170\104\105\170\240\072\104\105" +
    "\363\256\105\122\262\072\244\245\120\175\010" +
    "\062\065\320\u010f\277\u0102\345\317\346\u0148\170" +
    "\u0143\316\u0141\241\242\266\267\004\u0108\376\152" +
    "\272\271\274\267\275\122\262\074\152\111\170" +
    "\076\335\331\075\074\064\u013c\u013a\076\u0106\170" +
    "\325\u010b\155\237\142\327\143\263\264\170\007" +
    "\153\170\241\122\170\u0135\170\233\u0104\066\235" +
    "\067\230\070\144\105\u0126\u0133\u0121\u012e\u0100\305" +
    "\224\122\170\220\170\327\330\170\175\122\170" +
    "\375\265\170\226\373\240\323\172\122\144\105" +
    "\261\136\023\314\315\000\371\167\144\105\170" +
    "\325\326\164\170\367\122\162\170\016\140\323" +
    "\324\170\227\170\076\363\u0100\033\352\136\104" +
    "\105\365\176\133\232\105\346\230\231\001\311" +
    "\130\303\u0128\116\033\034\260\236\103\177\200" +
    "\226\257\202\310\135\161\132\013\006\001\127" +
    "\122\055\134\023\137\203\171\135\220\105\020" +
    "\122\002\122\000\122\163\122\024\033\034\122" +
    "\144\105\312\313\144\105\144\105\122\024\144" +
    "\105\122\233\234\164\165\171\172\147\150\122" +
    "\042\145\146\122\066\122\067\122\070\122\273" +
    "\274\122\002\266\267\122\110\122\112\122\104" +
    "\105\263\264\104\105\253\254\246\247\230\231" +
    "\224\225\271\216\217\104\105\203\204\161\162" +
    "\123\124\125\265\214\212\107\033\034\211\212" +
    "\301\033\034\033\034\166\215\001\106\033\034" +
    "\213\001\201\033\034\033\034\157\001\156\033" +
    "\034\033\034\116\001\114\033\034\033\034\113" +
    "\001\036\033\034\033\034\032\001\017\033\034" +
    "\017\020"
    };
  }

  /** Instance of action encapsulation class. */
  protected Action$ action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new Action$(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java.util.ArrayList<java_cup.runtime.Symbol> stack)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$do_action(act_num, stack);
  }


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }


	String filename;
	Benchmark benchmark;
	public void setFileName(String filename) {
		this.filename = filename;
	}
	
	public void report_error(String s, Object sym) {
		String location;
		if (sym instanceof MySymbolFactory.LineColumnSymbol) {
			MySymbolFactory.LineColumnSymbol bsym = (MySymbolFactory.LineColumnSymbol) sym;
			location = bsym.getLocation();
	    } else if ((sym instanceof Symbol) 
	    	       && ((Symbol)sym).sym == LexerSymbols.EOF) {
	    	location = "EOF";
	    } else
	        location = "UNKNOWN";
	    
		Logger.getRootLogger().error(filename+":"+location+": "+s);
	}

	public void report_error(String s) {	
		report_error(s, cur_token);
	}
	
	public void open(String file, boolean disableIPol) {
		benchmark = new Benchmark(file, disableIPol);
	}
	public Benchmark getBenchmark() {
		return benchmark;
	}


/** Cup generated class to encapsulate user supplied action code.*/
static class Action$ {


    ScopedHashMap<String, TermVariable> varScopes = 
    	new ScopedHashMap<String, TermVariable>();
    ScopedHashMap<String, TermVariable> fvarScopes = 
    	new ScopedHashMap<String, TermVariable>();
	
	public TermVariable findVar(Symbol var) {
		TermVariable tv = varScopes.get((String) var.value);
		if (tv == null)
			parser.report_error("Undeclared variable "+var.value, var);
		return tv;
	}
	
	public TermVariable findFvar(Symbol var) {
		TermVariable tv = fvarScopes.get((String) var.value);
		if (tv == null)
			parser.report_error("Undeclared form variable "+var.value, var);
		return tv;
	}


  private final Parser parser;

  /** Constructor */
  Action$(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  @SuppressWarnings({ "unused", "unchecked" })
  public final java_cup.runtime.Symbol CUP$do_action(
    int                        CUP$act_num,
    java.util.ArrayList<java_cup.runtime.Symbol> CUP$stack)
    throws java.lang.Exception
    {
      /* Stack size for peeking into the stack */
      int CUP$size = CUP$stack.size();

      /* select the action based on the action number */
      switch (CUP$act_num)
        {
          // $START ::= benchmark EOF 
          case 0:
            {
              Object RESULT;
RESULT = null;
/* ACCEPT */
parser.done_parsing();
              return parser.getSymbolFactory().newSymbol("$START", 0, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1), RESULT);
            }

          // benchmark ::= LPAR BENCHMARK ID bench_attribute* RPAR 
          case 1:
            {
              java_cup.runtime.Symbol name$ = CUP$stack.get(CUP$size - 3);
              String name = (String) name$.value;
              return parser.getSymbolFactory().newSymbol("benchmark", 19, CUP$stack.get(CUP$size - 5), CUP$stack.get(CUP$size - 1));
            }

          // bench_attribute ::= ATTR_LOGIC ID 
          case 2:
            {
              java_cup.runtime.Symbol logic$ = CUP$stack.get(CUP$size - 1);
              String logic = (String) logic$.value;
 parser.benchmark.setLogic(logic); 
              return parser.getSymbolFactory().newSymbol("bench_attribute", 17, CUP$stack.get(CUP$size - 2), logic$);
            }

          // bench_attribute ::= ATTR_ASSUMPTION formula 
          // bench_attribute ::= ATTR_FORMULA formula 
          case 3:
            {
              java_cup.runtime.Symbol f$ = CUP$stack.get(CUP$size - 1);
              Term f = (Term) f$.value;
 parser.benchmark.assertTerm(f); 
              return parser.getSymbolFactory().newSymbol("bench_attribute", 17, CUP$stack.get(CUP$size - 2), f$);
            }

          // bench_attribute ::= ATTR_STATUS status 
          case 4:
            {
              java_cup.runtime.Symbol s$ = CUP$stack.get(CUP$size - 1);
              String s = (String) s$.value;
 parser.benchmark.setInfo(":status", s); 
              return parser.getSymbolFactory().newSymbol("bench_attribute", 17, CUP$stack.get(CUP$size - 2), s$);
            }

          // bench_attribute ::= ATTR_EXTRASORTS LPAR extraSort+ RPAR 
          // bench_attribute ::= ATTR_EXTRAFUNS LPAR extraFun+ RPAR 
          // bench_attribute ::= ATTR_EXTRAPREDS LPAR extraPred+ RPAR 
          case 5:
            {
              return parser.getSymbolFactory().newSymbol("bench_attribute", 17, CUP$stack.get(CUP$size - 4), CUP$stack.get(CUP$size - 1));
            }

          // bench_attribute ::= ATTR_NOTES ATTR_STRING 
          case 6:
            {
              java_cup.runtime.Symbol s$ = CUP$stack.get(CUP$size - 1);
              String s = (String) s$.value;
 parser.benchmark.note(s); 
              return parser.getSymbolFactory().newSymbol("bench_attribute", 17, CUP$stack.get(CUP$size - 2), s$);
            }

          // bench_attribute ::= ATTRIBUTE USERVAL 
          case 7:
            {
              java_cup.runtime.Symbol v$ = CUP$stack.get(CUP$size - 1);
              String v = (String) v$.value;
              java_cup.runtime.Symbol a$ = CUP$stack.get(CUP$size - 2);
              String a = (String) a$.value;
 parser.benchmark.setInfo(":" + a, (new QuotedObject(v)).toString()); 
              return parser.getSymbolFactory().newSymbol("bench_attribute", 17, a$, v$);
            }

          // status ::= SAT 
          case 8:
            {
              String RESULT;
 RESULT = "sat"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("status", 18, CUP$sym, CUP$sym, RESULT);
            }

          // status ::= UNSAT 
          case 9:
            {
              String RESULT;
 RESULT = "unsat"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("status", 18, CUP$sym, CUP$sym, RESULT);
            }

          // status ::= UNKNOWN 
          case 10:
            {
              String RESULT;
 RESULT = "unknown"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("status", 18, CUP$sym, CUP$sym, RESULT);
            }

          // extraSort ::= ID 
          case 11:
            {
              java_cup.runtime.Symbol sort$ = CUP$stack.get(CUP$size - 1);
              String sort = (String) sort$.value;
 parser.benchmark.declareSort(sort); 
              return parser.getSymbolFactory().newSymbol("extraSort", 14, sort$, sort$);
            }

          // extraFun ::= LPAR fun_symb sort_symb annotation* RPAR 
          case 12:
            {
              java_cup.runtime.Symbol a$ = CUP$stack.get(CUP$size - 2);
              java.util.ArrayList<Annotation> CUP$list$a = (java.util.ArrayList<Annotation>) a$.value;
              Annotation[] a = CUP$list$a.toArray(new Annotation[CUP$list$a.size()]);
              java_cup.runtime.Symbol rsort$ = CUP$stack.get(CUP$size - 3);
              Sort rsort = (Sort) rsort$.value;
              java_cup.runtime.Symbol f$ = CUP$stack.get(CUP$size - 4);
              String f = (String) f$.value;
 parser.benchmark.declareFun(f, new Sort[0], rsort); 
              return parser.getSymbolFactory().newSymbol("extraFun", 15, CUP$stack.get(CUP$size - 5), CUP$stack.get(CUP$size - 1));
            }

          // extraFun ::= LPAR fun_symb sort_symb+ sort_symb annotation* RPAR 
          case 13:
            {
              java_cup.runtime.Symbol a$ = CUP$stack.get(CUP$size - 2);
              java.util.ArrayList<Annotation> CUP$list$a = (java.util.ArrayList<Annotation>) a$.value;
              Annotation[] a = CUP$list$a.toArray(new Annotation[CUP$list$a.size()]);
              java_cup.runtime.Symbol rsort$ = CUP$stack.get(CUP$size - 3);
              Sort rsort = (Sort) rsort$.value;
              java_cup.runtime.Symbol psorts$ = CUP$stack.get(CUP$size - 4);
              java.util.ArrayList<Sort> CUP$list$psorts = (java.util.ArrayList<Sort>) psorts$.value;
              Sort[] psorts = CUP$list$psorts.toArray(new Sort[CUP$list$psorts.size()]);
              java_cup.runtime.Symbol f$ = CUP$stack.get(CUP$size - 5);
              String f = (String) f$.value;
 parser.benchmark.declareFun(f, psorts, rsort); 
              return parser.getSymbolFactory().newSymbol("extraFun", 15, CUP$stack.get(CUP$size - 6), CUP$stack.get(CUP$size - 1));
            }

          // extraPred ::= LPAR fun_symb sort_symb* annotation* RPAR 
          case 14:
            {
              java_cup.runtime.Symbol a$ = CUP$stack.get(CUP$size - 2);
              java.util.ArrayList<Annotation> CUP$list$a = (java.util.ArrayList<Annotation>) a$.value;
              Annotation[] a = CUP$list$a.toArray(new Annotation[CUP$list$a.size()]);
              java_cup.runtime.Symbol psorts$ = CUP$stack.get(CUP$size - 3);
              java.util.ArrayList<Sort> CUP$list$psorts = (java.util.ArrayList<Sort>) psorts$.value;
              Sort[] psorts = CUP$list$psorts.toArray(new Sort[CUP$list$psorts.size()]);
              java_cup.runtime.Symbol f$ = CUP$stack.get(CUP$size - 4);
              String f = (String) f$.value;
 parser.benchmark.declareFun(f, psorts, parser.benchmark.getBooleanSort()); 
              return parser.getSymbolFactory().newSymbol("extraPred", 16, CUP$stack.get(CUP$size - 5), CUP$stack.get(CUP$size - 1));
            }

          // formula ::= atom 
          case 15:
            {
              Term RESULT;
              java_cup.runtime.Symbol a$ = CUP$stack.get(CUP$size - 1);
              Term a = (Term) a$.value;
 RESULT = a; 
              return parser.getSymbolFactory().newSymbol("formula", 4, a$, a$, RESULT);
            }

          // formula ::= LPAR NOT formula annotation* RPAR 
          case 16:
            {
              Term RESULT;
              java_cup.runtime.Symbol a$ = CUP$stack.get(CUP$size - 2);
              java.util.ArrayList<Annotation> CUP$list$a = (java.util.ArrayList<Annotation>) a$.value;
              Annotation[] a = CUP$list$a.toArray(new Annotation[CUP$list$a.size()]);
              java_cup.runtime.Symbol f$ = CUP$stack.get(CUP$size - 3);
              Term f = (Term) f$.value;
 RESULT = parser.benchmark.term("not", f);
               RESULT = parser.benchmark.annotateTerm(RESULT, a); 
              return parser.getSymbolFactory().newSymbol("formula", 4, CUP$stack.get(CUP$size - 5), CUP$stack.get(CUP$size - 1), RESULT);
            }

          // formula ::= LPAR IF_THEN_ELSE formula formula formula annotation* RPAR 
          case 17:
            {
              Term RESULT;
              java_cup.runtime.Symbol a$ = CUP$stack.get(CUP$size - 2);
              java.util.ArrayList<Annotation> CUP$list$a = (java.util.ArrayList<Annotation>) a$.value;
              Annotation[] a = CUP$list$a.toArray(new Annotation[CUP$list$a.size()]);
              java_cup.runtime.Symbol fe$ = CUP$stack.get(CUP$size - 3);
              Term fe = (Term) fe$.value;
              java_cup.runtime.Symbol ft$ = CUP$stack.get(CUP$size - 4);
              Term ft = (Term) ft$.value;
              java_cup.runtime.Symbol fc$ = CUP$stack.get(CUP$size - 5);
              Term fc = (Term) fc$.value;
 RESULT = parser.benchmark.term("ite", fc, ft, fe);
               RESULT = parser.benchmark.annotateTerm(RESULT, a); 
              return parser.getSymbolFactory().newSymbol("formula", 4, CUP$stack.get(CUP$size - 7), CUP$stack.get(CUP$size - 1), RESULT);
            }

          // formula ::= LPAR IMPLIES formula formula annotation* RPAR 
          case 18:
            {
              Term RESULT;
              java_cup.runtime.Symbol a$ = CUP$stack.get(CUP$size - 2);
              java.util.ArrayList<Annotation> CUP$list$a = (java.util.ArrayList<Annotation>) a$.value;
              Annotation[] a = CUP$list$a.toArray(new Annotation[CUP$list$a.size()]);
              java_cup.runtime.Symbol f2$ = CUP$stack.get(CUP$size - 3);
              Term f2 = (Term) f2$.value;
              java_cup.runtime.Symbol f1$ = CUP$stack.get(CUP$size - 4);
              Term f1 = (Term) f1$.value;
 RESULT = parser.benchmark.term("=>", f1, f2);
               RESULT = parser.benchmark.annotateTerm(RESULT, a); 
              return parser.getSymbolFactory().newSymbol("formula", 4, CUP$stack.get(CUP$size - 6), CUP$stack.get(CUP$size - 1), RESULT);
            }

          // formula ::= LPAR connective formula+ annotation* RPAR 
          case 19:
            {
              Term RESULT;
              java_cup.runtime.Symbol a$ = CUP$stack.get(CUP$size - 2);
              java.util.ArrayList<Annotation> CUP$list$a = (java.util.ArrayList<Annotation>) a$.value;
              Annotation[] a = CUP$list$a.toArray(new Annotation[CUP$list$a.size()]);
              java_cup.runtime.Symbol fl$ = CUP$stack.get(CUP$size - 3);
              java.util.ArrayList<Term> CUP$list$fl = (java.util.ArrayList<Term>) fl$.value;
              Term[] fl = CUP$list$fl.toArray(new Term[CUP$list$fl.size()]);
              java_cup.runtime.Symbol c$ = CUP$stack.get(CUP$size - 4);
              String c = (String) c$.value;
 if (fl.length == 1)
				   RESULT = fl[0];
               else
				   RESULT = parser.benchmark.term(c, fl);
               RESULT = parser.benchmark.annotateTerm(RESULT, a); 
              return parser.getSymbolFactory().newSymbol("formula", 4, CUP$stack.get(CUP$size - 5), CUP$stack.get(CUP$size - 1), RESULT);
            }

          // formula ::= LPAR EXISTS NT$0 quantVar+ formula patternAttr* annotation* RPAR 
          case 20:
            {
              Term RESULT = (Term) CUP$stack.get(CUP$size - 6).value;
              java_cup.runtime.Symbol a$ = CUP$stack.get(CUP$size - 2);
              java.util.ArrayList<Annotation> CUP$list$a = (java.util.ArrayList<Annotation>) a$.value;
              Annotation[] a = CUP$list$a.toArray(new Annotation[CUP$list$a.size()]);
              java_cup.runtime.Symbol t$ = CUP$stack.get(CUP$size - 3);
              java.util.ArrayList<Annotation> CUP$list$t = (java.util.ArrayList<Annotation>) t$.value;
              Annotation[] t = CUP$list$t.toArray(new Annotation[CUP$list$t.size()]);
              java_cup.runtime.Symbol f$ = CUP$stack.get(CUP$size - 4);
              Term f = (Term) f$.value;
              java_cup.runtime.Symbol vl$ = CUP$stack.get(CUP$size - 5);
              java.util.ArrayList<TermVariable> CUP$list$vl = (java.util.ArrayList<TermVariable>) vl$.value;
              TermVariable[] vl = CUP$list$vl.toArray(new TermVariable[CUP$list$vl.size()]);
 varScopes.endScope();
               RESULT = parser.benchmark.quantifier(Script.EXISTS, vl, parser.benchmark.annotateTerm(f, t), (Term[][])null);
               RESULT = parser.benchmark.annotateTerm(RESULT, a); 
              return parser.getSymbolFactory().newSymbol("formula", 4, CUP$stack.get(CUP$size - 8), CUP$stack.get(CUP$size - 1), RESULT);
            }

          // NT$0 ::= 
          case 21:
            {
              Term RESULT = null;
 varScopes.beginScope(); 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("NT$0", 33, CUP$sym, CUP$sym, RESULT);
            }

          // formula ::= LPAR FORALL NT$1 quantVar+ formula patternAttr* annotation* RPAR 
          case 22:
            {
              Term RESULT = (Term) CUP$stack.get(CUP$size - 6).value;
              java_cup.runtime.Symbol a$ = CUP$stack.get(CUP$size - 2);
              java.util.ArrayList<Annotation> CUP$list$a = (java.util.ArrayList<Annotation>) a$.value;
              Annotation[] a = CUP$list$a.toArray(new Annotation[CUP$list$a.size()]);
              java_cup.runtime.Symbol t$ = CUP$stack.get(CUP$size - 3);
              java.util.ArrayList<Annotation> CUP$list$t = (java.util.ArrayList<Annotation>) t$.value;
              Annotation[] t = CUP$list$t.toArray(new Annotation[CUP$list$t.size()]);
              java_cup.runtime.Symbol f$ = CUP$stack.get(CUP$size - 4);
              Term f = (Term) f$.value;
              java_cup.runtime.Symbol vl$ = CUP$stack.get(CUP$size - 5);
              java.util.ArrayList<TermVariable> CUP$list$vl = (java.util.ArrayList<TermVariable>) vl$.value;
              TermVariable[] vl = CUP$list$vl.toArray(new TermVariable[CUP$list$vl.size()]);
 varScopes.endScope();
               RESULT = parser.benchmark.quantifier(Script.FORALL, vl, parser.benchmark.annotateTerm(f, t), (Term[][])null);
               RESULT = parser.benchmark.annotateTerm(RESULT, a); 
              return parser.getSymbolFactory().newSymbol("formula", 4, CUP$stack.get(CUP$size - 8), CUP$stack.get(CUP$size - 1), RESULT);
            }

          // NT$1 ::= 
          case 23:
            {
              Term RESULT = null;
 varScopes.beginScope(); 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("NT$1", 34, CUP$sym, CUP$sym, RESULT);
            }

          // formula ::= LPAR LET LPAR VAR term RPAR NT$2 formula annotation* RPAR 
          case 24:
            {
              Term RESULT = (Term) CUP$stack.get(CUP$size - 4).value;
              java_cup.runtime.Symbol a$ = CUP$stack.get(CUP$size - 2);
              java.util.ArrayList<Annotation> CUP$list$a = (java.util.ArrayList<Annotation>) a$.value;
              Annotation[] a = CUP$list$a.toArray(new Annotation[CUP$list$a.size()]);
              java_cup.runtime.Symbol f$ = CUP$stack.get(CUP$size - 3);
              Term f = (Term) f$.value;
              java_cup.runtime.Symbol tv$ = CUP$stack.get(CUP$size - 6);
              Term tv = (Term) tv$.value;
              java_cup.runtime.Symbol v$ = CUP$stack.get(CUP$size - 7);
              String v = (String) v$.value;
 RESULT = parser.benchmark.let(varScopes.get(v), tv, f);
                 varScopes.endScope();
                 RESULT = parser.benchmark.annotateTerm(RESULT, a); 
              return parser.getSymbolFactory().newSymbol("formula", 4, CUP$stack.get(CUP$size - 10), CUP$stack.get(CUP$size - 1), RESULT);
            }

          // NT$2 ::= 
          case 25:
            {
              Term RESULT = null;
              java_cup.runtime.Symbol tv$ = CUP$stack.get(CUP$size - 2);
              Term tv = (Term) tv$.value;
              java_cup.runtime.Symbol v$ = CUP$stack.get(CUP$size - 3);
              String v = (String) v$.value;
 varScopes.beginScope();
          	     varScopes.put(v, parser.benchmark.variable(v, tv.getSort())); 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("NT$2", 35, CUP$sym, CUP$sym, RESULT);
            }

          // formula ::= LPAR FLET LPAR FVAR formula RPAR NT$3 formula annotation* RPAR 
          case 26:
            {
              Term RESULT = (Term) CUP$stack.get(CUP$size - 4).value;
              java_cup.runtime.Symbol a$ = CUP$stack.get(CUP$size - 2);
              java.util.ArrayList<Annotation> CUP$list$a = (java.util.ArrayList<Annotation>) a$.value;
              Annotation[] a = CUP$list$a.toArray(new Annotation[CUP$list$a.size()]);
              java_cup.runtime.Symbol f$ = CUP$stack.get(CUP$size - 3);
              Term f = (Term) f$.value;
              java_cup.runtime.Symbol fv$ = CUP$stack.get(CUP$size - 6);
              Term fv = (Term) fv$.value;
              java_cup.runtime.Symbol v$ = CUP$stack.get(CUP$size - 7);
              String v = (String) v$.value;
 RESULT = parser.benchmark.let(fvarScopes.get(v), fv, f);
                 fvarScopes.endScope();
                 RESULT = parser.benchmark.annotateTerm(RESULT, a); 
              return parser.getSymbolFactory().newSymbol("formula", 4, CUP$stack.get(CUP$size - 10), CUP$stack.get(CUP$size - 1), RESULT);
            }

          // NT$3 ::= 
          case 27:
            {
              Term RESULT = null;
              java_cup.runtime.Symbol fv$ = CUP$stack.get(CUP$size - 2);
              Term fv = (Term) fv$.value;
              java_cup.runtime.Symbol v$ = CUP$stack.get(CUP$size - 3);
              String v = (String) v$.value;
 fvarScopes.beginScope();
          	     fvarScopes.put(v, parser.benchmark.variable(v, parser.benchmark.getBooleanSort())); 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("NT$3", 36, CUP$sym, CUP$sym, RESULT);
            }

          // quantVar ::= LPAR VAR sort_symb RPAR 
          case 28:
            {
              TermVariable RESULT;
              java_cup.runtime.Symbol sort$ = CUP$stack.get(CUP$size - 2);
              Sort sort = (Sort) sort$.value;
              java_cup.runtime.Symbol v$ = CUP$stack.get(CUP$size - 3);
              String v = (String) v$.value;
 RESULT = parser.benchmark.variable(v, sort);
	     varScopes.put(v, RESULT); 
              return parser.getSymbolFactory().newSymbol("quantVar", 5, CUP$stack.get(CUP$size - 4), CUP$stack.get(CUP$size - 1), RESULT);
            }

          // connective ::= OR 
          case 29:
            {
              String RESULT;
 RESULT = "or"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("connective", 6, CUP$sym, CUP$sym, RESULT);
            }

          // connective ::= AND 
          case 30:
            {
              String RESULT;
 RESULT = "and"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("connective", 6, CUP$sym, CUP$sym, RESULT);
            }

          // connective ::= IFF 
          case 31:
            {
              String RESULT;
  RESULT = "="; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("connective", 6, CUP$sym, CUP$sym, RESULT);
            }

          // connective ::= XOR 
          case 32:
            {
              String RESULT;
 RESULT = "xor"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("connective", 6, CUP$sym, CUP$sym, RESULT);
            }

          // atom ::= prop_atom 
          case 33:
            {
              Term RESULT;
              java_cup.runtime.Symbol pa$ = CUP$stack.get(CUP$size - 1);
              Term pa = (Term) pa$.value;
 RESULT = pa; 
              return parser.getSymbolFactory().newSymbol("atom", 7, pa$, pa$, RESULT);
            }

          // atom ::= LPAR prop_atom annotation* RPAR 
          case 34:
            {
              Term RESULT;
              java_cup.runtime.Symbol a$ = CUP$stack.get(CUP$size - 2);
              java.util.ArrayList<Annotation> CUP$list$a = (java.util.ArrayList<Annotation>) a$.value;
              Annotation[] a = CUP$list$a.toArray(new Annotation[CUP$list$a.size()]);
              java_cup.runtime.Symbol pa$ = CUP$stack.get(CUP$size - 3);
              Term pa = (Term) pa$.value;
 RESULT = pa;
         RESULT = parser.benchmark.annotateTerm(RESULT, a); 
              return parser.getSymbolFactory().newSymbol("atom", 7, CUP$stack.get(CUP$size - 4), CUP$stack.get(CUP$size - 1), RESULT);
            }

          // atom ::= LPAR EQUALS term+ annotation* RPAR 
          case 35:
            {
              Term RESULT;
              java_cup.runtime.Symbol a$ = CUP$stack.get(CUP$size - 2);
              java.util.ArrayList<Annotation> CUP$list$a = (java.util.ArrayList<Annotation>) a$.value;
              Annotation[] a = CUP$list$a.toArray(new Annotation[CUP$list$a.size()]);
              java_cup.runtime.Symbol tl$ = CUP$stack.get(CUP$size - 3);
              java.util.ArrayList<Term> CUP$list$tl = (java.util.ArrayList<Term>) tl$.value;
              Term[] tl = CUP$list$tl.toArray(new Term[CUP$list$tl.size()]);
 RESULT = parser.benchmark.term("=", tl); 
	  if (RESULT == null) {parser.report_error("Bad equality"); System.exit(1);}
         RESULT = parser.benchmark.annotateTerm(RESULT, a); 
              return parser.getSymbolFactory().newSymbol("atom", 7, CUP$stack.get(CUP$size - 5), CUP$stack.get(CUP$size - 1), RESULT);
            }

          // atom ::= LPAR DISTINCT term+ annotation* RPAR 
          case 36:
            {
              Term RESULT;
              java_cup.runtime.Symbol a$ = CUP$stack.get(CUP$size - 2);
              java.util.ArrayList<Annotation> CUP$list$a = (java.util.ArrayList<Annotation>) a$.value;
              Annotation[] a = CUP$list$a.toArray(new Annotation[CUP$list$a.size()]);
              java_cup.runtime.Symbol tl$ = CUP$stack.get(CUP$size - 3);
              java.util.ArrayList<Term> CUP$list$tl = (java.util.ArrayList<Term>) tl$.value;
              Term[] tl = CUP$list$tl.toArray(new Term[CUP$list$tl.size()]);
 RESULT = parser.benchmark.term("distinct", tl); 
	  if (RESULT == null) {parser.report_error("Bad distinct"); System.exit(1);}
         RESULT = parser.benchmark.annotateTerm(RESULT, a); 
              return parser.getSymbolFactory().newSymbol("atom", 7, CUP$stack.get(CUP$size - 5), CUP$stack.get(CUP$size - 1), RESULT);
            }

          // atom ::= LPAR pred_symb term+ annotation* RPAR 
          case 37:
            {
              Term RESULT;
              java_cup.runtime.Symbol a$ = CUP$stack.get(CUP$size - 2);
              java.util.ArrayList<Annotation> CUP$list$a = (java.util.ArrayList<Annotation>) a$.value;
              Annotation[] a = CUP$list$a.toArray(new Annotation[CUP$list$a.size()]);
              java_cup.runtime.Symbol tl$ = CUP$stack.get(CUP$size - 3);
              java.util.ArrayList<Term> CUP$list$tl = (java.util.ArrayList<Term>) tl$.value;
              Term[] tl = CUP$list$tl.toArray(new Term[CUP$list$tl.size()]);
              java_cup.runtime.Symbol pred$ = CUP$stack.get(CUP$size - 4);
              String pred = (String) pred$.value;
 RESULT = parser.benchmark.term(pred, tl); 
	  if (RESULT == null) {parser.report_error("Undeclared predicate " + pred); System.exit(1); }
         RESULT = parser.benchmark.annotateTerm(RESULT, a); 
              return parser.getSymbolFactory().newSymbol("atom", 7, CUP$stack.get(CUP$size - 5), CUP$stack.get(CUP$size - 1), RESULT);
            }

          // prop_atom ::= TRUE 
          case 38:
            {
              Term RESULT;
 RESULT = parser.benchmark.term("true"); 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("prop_atom", 8, CUP$sym, CUP$sym, RESULT);
            }

          // prop_atom ::= FALSE 
          case 39:
            {
              Term RESULT;
 RESULT = parser.benchmark.term("false"); 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("prop_atom", 8, CUP$sym, CUP$sym, RESULT);
            }

          // prop_atom ::= FVAR 
          case 40:
            {
              Term RESULT;
              java_cup.runtime.Symbol f$ = CUP$stack.get(CUP$size - 1);
              String f = (String) f$.value;
 RESULT = findFvar(f$); 
              return parser.getSymbolFactory().newSymbol("prop_atom", 8, f$, f$, RESULT);
            }

          // prop_atom ::= ID 
          case 41:
            {
              Term RESULT;
              java_cup.runtime.Symbol pred$ = CUP$stack.get(CUP$size - 1);
              String pred = (String) pred$.value;
 RESULT = parser.benchmark.term(pred, new Term[0]);
		if (RESULT == null) {parser.report_error("Undeclared predicate " + pred); System.exit(1);} 
              return parser.getSymbolFactory().newSymbol("prop_atom", 8, pred$, pred$, RESULT);
            }

          // pred_symb ::= ARITH_SYMB 
          // pred_symb ::= ID 
          case 42:
            {
              String RESULT;
              java_cup.runtime.Symbol s$ = CUP$stack.get(CUP$size - 1);
              String s = (String) s$.value;
 RESULT = s; 
              return parser.getSymbolFactory().newSymbol("pred_symb", 10, s$, s$, RESULT);
            }

          // fun_symb ::= ARITH_SYMB 
          // fun_symb ::= ID 
          case 43:
            {
              String RESULT;
              java_cup.runtime.Symbol s$ = CUP$stack.get(CUP$size - 1);
              String s = (String) s$.value;
 RESULT = s; 
              return parser.getSymbolFactory().newSymbol("fun_symb", 11, s$, s$, RESULT);
            }

          // sort_symb ::= ID 
          case 44:
            {
              Sort RESULT;
              java_cup.runtime.Symbol s$ = CUP$stack.get(CUP$size - 1);
              String s = (String) s$.value;
 RESULT = parser.benchmark.sort(s);
	  	if (RESULT == null) {parser.report_error("Undeclared sort " + s); System.exit(1);} 
              return parser.getSymbolFactory().newSymbol("sort_symb", 9, s$, s$, RESULT);
            }

          // annotation ::= ATTRIBUTE USERVAL? 
          case 45:
            {
              Annotation RESULT;
              java_cup.runtime.Symbol u$ = CUP$stack.get(CUP$size - 1);
              String u = (String) u$.value;
              java_cup.runtime.Symbol a$ = CUP$stack.get(CUP$size - 2);
              String a = (String) a$.value;
 RESULT = new Annotation(a, u); 
              return parser.getSymbolFactory().newSymbol("annotation", 1, a$, u$, RESULT);
            }

          // base_term ::= VAR 
          case 46:
            {
              Term RESULT;
              java_cup.runtime.Symbol v$ = CUP$stack.get(CUP$size - 1);
              String v = (String) v$.value;
 RESULT = findVar(v$); 
              return parser.getSymbolFactory().newSymbol("base_term", 13, v$, v$, RESULT);
            }

          // base_term ::= NUMERAL 
          case 47:
            {
              Term RESULT;
              java_cup.runtime.Symbol n$ = CUP$stack.get(CUP$size - 1);
              String n = (String) n$.value;
 RESULT = parser.benchmark.numeral(n); 
              return parser.getSymbolFactory().newSymbol("base_term", 13, n$, n$, RESULT);
            }

          // base_term ::= RATIONAL 
          case 48:
            {
              Term RESULT;
              java_cup.runtime.Symbol n$ = CUP$stack.get(CUP$size - 1);
              String n = (String) n$.value;
 RESULT = parser.benchmark.decimal(n); 
              return parser.getSymbolFactory().newSymbol("base_term", 13, n$, n$, RESULT);
            }

          // base_term ::= ID 
          case 49:
            {
              Term RESULT;
              java_cup.runtime.Symbol id$ = CUP$stack.get(CUP$size - 1);
              String id = (String) id$.value;
 RESULT = parser.benchmark.term(id, new Term[0]);
     	if (RESULT == null) {parser.report_error("Undeclared term id " + id); System.exit(1);} 
              return parser.getSymbolFactory().newSymbol("base_term", 13, id$, id$, RESULT);
            }

          // term ::= base_term 
          case 50:
            {
              Term RESULT;
              java_cup.runtime.Symbol t$ = CUP$stack.get(CUP$size - 1);
              Term t = (Term) t$.value;
 RESULT = t; 
              return parser.getSymbolFactory().newSymbol("term", 12, t$, t$, RESULT);
            }

          // term ::= LPAR base_term annotation* RPAR 
          case 51:
            {
              Term RESULT;
              java_cup.runtime.Symbol a$ = CUP$stack.get(CUP$size - 2);
              java.util.ArrayList<Annotation> CUP$list$a = (java.util.ArrayList<Annotation>) a$.value;
              Annotation[] a = CUP$list$a.toArray(new Annotation[CUP$list$a.size()]);
              java_cup.runtime.Symbol t$ = CUP$stack.get(CUP$size - 3);
              Term t = (Term) t$.value;
 RESULT = t;
          RESULT = parser.benchmark.annotateTerm(RESULT, a); 
              return parser.getSymbolFactory().newSymbol("term", 12, CUP$stack.get(CUP$size - 4), CUP$stack.get(CUP$size - 1), RESULT);
            }

          // term ::= LPAR fun_symb term+ annotation* RPAR 
          case 52:
            {
              Term RESULT;
              java_cup.runtime.Symbol a$ = CUP$stack.get(CUP$size - 2);
              java.util.ArrayList<Annotation> CUP$list$a = (java.util.ArrayList<Annotation>) a$.value;
              Annotation[] a = CUP$list$a.toArray(new Annotation[CUP$list$a.size()]);
              java_cup.runtime.Symbol param$ = CUP$stack.get(CUP$size - 3);
              java.util.ArrayList<Term> CUP$list$param = (java.util.ArrayList<Term>) param$.value;
              Term[] param = CUP$list$param.toArray(new Term[CUP$list$param.size()]);
              java_cup.runtime.Symbol f$ = CUP$stack.get(CUP$size - 4);
              String f = (String) f$.value;
 RESULT = parser.benchmark.term(f, param);
       if (RESULT == null) {parser.report_error("Undeclared term id " + f); System.exit(1);}
          RESULT = parser.benchmark.annotateTerm(RESULT, a); 
              return parser.getSymbolFactory().newSymbol("term", 12, CUP$stack.get(CUP$size - 5), CUP$stack.get(CUP$size - 1), RESULT);
            }

          // term ::= LPAR ITE formula term term annotation* RPAR 
          case 53:
            {
              Term RESULT;
              java_cup.runtime.Symbol a$ = CUP$stack.get(CUP$size - 2);
              java.util.ArrayList<Annotation> CUP$list$a = (java.util.ArrayList<Annotation>) a$.value;
              Annotation[] a = CUP$list$a.toArray(new Annotation[CUP$list$a.size()]);
              java_cup.runtime.Symbol el$ = CUP$stack.get(CUP$size - 3);
              Term el = (Term) el$.value;
              java_cup.runtime.Symbol th$ = CUP$stack.get(CUP$size - 4);
              Term th = (Term) th$.value;
              java_cup.runtime.Symbol cond$ = CUP$stack.get(CUP$size - 5);
              Term cond = (Term) cond$.value;
 RESULT = parser.benchmark.term("ite", cond, th, el);
          RESULT = parser.benchmark.annotateTerm(RESULT, a); 
              return parser.getSymbolFactory().newSymbol("term", 12, CUP$stack.get(CUP$size - 7), CUP$stack.get(CUP$size - 1), RESULT);
            }

          // patternAttr ::= ATTR_PATTERN LCPAR pattern+ RCPAR 
          case 54:
            {
              Annotation RESULT;
              java_cup.runtime.Symbol t$ = CUP$stack.get(CUP$size - 2);
              java.util.ArrayList<Term> CUP$list$t = (java.util.ArrayList<Term>) t$.value;
              Term[] t = CUP$list$t.toArray(new Term[CUP$list$t.size()]);
 RESULT = new Annotation(":pattern", t); 
              return parser.getSymbolFactory().newSymbol("patternAttr", 2, CUP$stack.get(CUP$size - 4), CUP$stack.get(CUP$size - 1), RESULT);
            }

          // pattern ::= LPAR EQUALS term+ annotation* RPAR 
          case 55:
            {
              Term RESULT;
              java_cup.runtime.Symbol a$ = CUP$stack.get(CUP$size - 2);
              java.util.ArrayList<Annotation> CUP$list$a = (java.util.ArrayList<Annotation>) a$.value;
              Annotation[] a = CUP$list$a.toArray(new Annotation[CUP$list$a.size()]);
              java_cup.runtime.Symbol tl$ = CUP$stack.get(CUP$size - 3);
              java.util.ArrayList<Term> CUP$list$tl = (java.util.ArrayList<Term>) tl$.value;
              Term[] tl = CUP$list$tl.toArray(new Term[CUP$list$tl.size()]);
 RESULT = parser.benchmark.term("=", tl); 
         RESULT = parser.benchmark.annotateTerm(RESULT, a); 
              return parser.getSymbolFactory().newSymbol("pattern", 3, CUP$stack.get(CUP$size - 5), CUP$stack.get(CUP$size - 1), RESULT);
            }

          // pattern ::= LPAR DISTINCT term+ annotation* RPAR 
          case 56:
            {
              Term RESULT;
              java_cup.runtime.Symbol a$ = CUP$stack.get(CUP$size - 2);
              java.util.ArrayList<Annotation> CUP$list$a = (java.util.ArrayList<Annotation>) a$.value;
              Annotation[] a = CUP$list$a.toArray(new Annotation[CUP$list$a.size()]);
              java_cup.runtime.Symbol tl$ = CUP$stack.get(CUP$size - 3);
              java.util.ArrayList<Term> CUP$list$tl = (java.util.ArrayList<Term>) tl$.value;
              Term[] tl = CUP$list$tl.toArray(new Term[CUP$list$tl.size()]);
 RESULT = parser.benchmark.term("distinct", tl); 
         RESULT = parser.benchmark.annotateTerm(RESULT, a); 
              return parser.getSymbolFactory().newSymbol("pattern", 3, CUP$stack.get(CUP$size - 5), CUP$stack.get(CUP$size - 1), RESULT);
            }

          // pattern ::= LPAR ID term+ annotation* RPAR 
          case 57:
            {
              Term RESULT;
              java_cup.runtime.Symbol a$ = CUP$stack.get(CUP$size - 2);
              java.util.ArrayList<Annotation> CUP$list$a = (java.util.ArrayList<Annotation>) a$.value;
              Annotation[] a = CUP$list$a.toArray(new Annotation[CUP$list$a.size()]);
              java_cup.runtime.Symbol tl$ = CUP$stack.get(CUP$size - 3);
              java.util.ArrayList<Term> CUP$list$tl = (java.util.ArrayList<Term>) tl$.value;
              Term[] tl = CUP$list$tl.toArray(new Term[CUP$list$tl.size()]);
              java_cup.runtime.Symbol pred$ = CUP$stack.get(CUP$size - 4);
              String pred = (String) pred$.value;
 RESULT = parser.benchmark.annotateTerm(parser.benchmark.term(pred, tl), a); 
              return parser.getSymbolFactory().newSymbol("pattern", 3, CUP$stack.get(CUP$size - 5), CUP$stack.get(CUP$size - 1), RESULT);
            }

          // USERVAL? ::= 
          case 58:
            {
              String RESULT;
RESULT=null;
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("USERVAL?", 38, CUP$sym, CUP$sym, RESULT);
            }

          // annotation* ::= 
          case 59:
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("annotation*", 26, CUP$sym, CUP$sym, new java.util.ArrayList<Annotation>());
            }

          // annotation+ ::= annotation 
          case 60:
            {
              java_cup.runtime.Symbol CUP$0 = CUP$stack.get(CUP$size - 1);
              java.util.ArrayList<Annotation> RESULT = new java.util.ArrayList<Annotation>();
              RESULT.add((Annotation) CUP$0.value);
              return parser.getSymbolFactory().newSymbol("annotation+", 25, CUP$0, CUP$0, RESULT);
            }

          // annotation+ ::= annotation+ annotation 
          case 61:
            {
              java_cup.runtime.Symbol CUP$1 = CUP$stack.get(CUP$size - 1);
              java_cup.runtime.Symbol CUP$0 = CUP$stack.get(CUP$size - 2);
              java.util.ArrayList<Annotation> RESULT = (java.util.ArrayList<Annotation>) CUP$0.value;
              RESULT.add((Annotation) CUP$1.value);
              return parser.getSymbolFactory().newSymbol("annotation+", 25, CUP$0, CUP$1, RESULT);
            }

          // patternAttr* ::= 
          case 62:
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("patternAttr*", 32, CUP$sym, CUP$sym, new java.util.ArrayList<Annotation>());
            }

          // patternAttr+ ::= patternAttr 
          case 63:
            {
              java_cup.runtime.Symbol CUP$0 = CUP$stack.get(CUP$size - 1);
              java.util.ArrayList<Annotation> RESULT = new java.util.ArrayList<Annotation>();
              RESULT.add((Annotation) CUP$0.value);
              return parser.getSymbolFactory().newSymbol("patternAttr+", 31, CUP$0, CUP$0, RESULT);
            }

          // patternAttr+ ::= patternAttr+ patternAttr 
          case 64:
            {
              java_cup.runtime.Symbol CUP$1 = CUP$stack.get(CUP$size - 1);
              java_cup.runtime.Symbol CUP$0 = CUP$stack.get(CUP$size - 2);
              java.util.ArrayList<Annotation> RESULT = (java.util.ArrayList<Annotation>) CUP$0.value;
              RESULT.add((Annotation) CUP$1.value);
              return parser.getSymbolFactory().newSymbol("patternAttr+", 31, CUP$0, CUP$1, RESULT);
            }

          // pattern+ ::= pattern 
          case 65:
            {
              java_cup.runtime.Symbol CUP$0 = CUP$stack.get(CUP$size - 1);
              java.util.ArrayList<Term> RESULT = new java.util.ArrayList<Term>();
              RESULT.add((Term) CUP$0.value);
              return parser.getSymbolFactory().newSymbol("pattern+", 39, CUP$0, CUP$0, RESULT);
            }

          // pattern+ ::= pattern+ pattern 
          case 66:
            {
              java_cup.runtime.Symbol CUP$1 = CUP$stack.get(CUP$size - 1);
              java_cup.runtime.Symbol CUP$0 = CUP$stack.get(CUP$size - 2);
              java.util.ArrayList<Term> RESULT = (java.util.ArrayList<Term>) CUP$0.value;
              RESULT.add((Term) CUP$1.value);
              return parser.getSymbolFactory().newSymbol("pattern+", 39, CUP$0, CUP$1, RESULT);
            }

          // formula+ ::= formula 
          case 67:
            {
              java_cup.runtime.Symbol CUP$0 = CUP$stack.get(CUP$size - 1);
              java.util.ArrayList<Term> RESULT = new java.util.ArrayList<Term>();
              RESULT.add((Term) CUP$0.value);
              return parser.getSymbolFactory().newSymbol("formula+", 29, CUP$0, CUP$0, RESULT);
            }

          // formula+ ::= formula+ formula 
          case 68:
            {
              java_cup.runtime.Symbol CUP$1 = CUP$stack.get(CUP$size - 1);
              java_cup.runtime.Symbol CUP$0 = CUP$stack.get(CUP$size - 2);
              java.util.ArrayList<Term> RESULT = (java.util.ArrayList<Term>) CUP$0.value;
              RESULT.add((Term) CUP$1.value);
              return parser.getSymbolFactory().newSymbol("formula+", 29, CUP$0, CUP$1, RESULT);
            }

          // quantVar+ ::= quantVar 
          case 69:
            {
              java_cup.runtime.Symbol CUP$0 = CUP$stack.get(CUP$size - 1);
              java.util.ArrayList<TermVariable> RESULT = new java.util.ArrayList<TermVariable>();
              RESULT.add((TermVariable) CUP$0.value);
              return parser.getSymbolFactory().newSymbol("quantVar+", 30, CUP$0, CUP$0, RESULT);
            }

          // quantVar+ ::= quantVar+ quantVar 
          case 70:
            {
              java_cup.runtime.Symbol CUP$1 = CUP$stack.get(CUP$size - 1);
              java_cup.runtime.Symbol CUP$0 = CUP$stack.get(CUP$size - 2);
              java.util.ArrayList<TermVariable> RESULT = (java.util.ArrayList<TermVariable>) CUP$0.value;
              RESULT.add((TermVariable) CUP$1.value);
              return parser.getSymbolFactory().newSymbol("quantVar+", 30, CUP$0, CUP$1, RESULT);
            }

          // sort_symb* ::= 
          case 71:
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("sort_symb*", 28, CUP$sym, CUP$sym, new java.util.ArrayList<Sort>());
            }

          // sort_symb+ ::= sort_symb 
          case 72:
            {
              java_cup.runtime.Symbol CUP$0 = CUP$stack.get(CUP$size - 1);
              java.util.ArrayList<Sort> RESULT = new java.util.ArrayList<Sort>();
              RESULT.add((Sort) CUP$0.value);
              return parser.getSymbolFactory().newSymbol("sort_symb+", 27, CUP$0, CUP$0, RESULT);
            }

          // sort_symb+ ::= sort_symb+ sort_symb 
          case 73:
            {
              java_cup.runtime.Symbol CUP$1 = CUP$stack.get(CUP$size - 1);
              java_cup.runtime.Symbol CUP$0 = CUP$stack.get(CUP$size - 2);
              java.util.ArrayList<Sort> RESULT = (java.util.ArrayList<Sort>) CUP$0.value;
              RESULT.add((Sort) CUP$1.value);
              return parser.getSymbolFactory().newSymbol("sort_symb+", 27, CUP$0, CUP$1, RESULT);
            }

          // term+ ::= term 
          case 74:
            {
              java_cup.runtime.Symbol CUP$0 = CUP$stack.get(CUP$size - 1);
              java.util.ArrayList<Term> RESULT = new java.util.ArrayList<Term>();
              RESULT.add((Term) CUP$0.value);
              return parser.getSymbolFactory().newSymbol("term+", 37, CUP$0, CUP$0, RESULT);
            }

          // term+ ::= term+ term 
          case 75:
            {
              java_cup.runtime.Symbol CUP$1 = CUP$stack.get(CUP$size - 1);
              java_cup.runtime.Symbol CUP$0 = CUP$stack.get(CUP$size - 2);
              java.util.ArrayList<Term> RESULT = (java.util.ArrayList<Term>) CUP$0.value;
              RESULT.add((Term) CUP$1.value);
              return parser.getSymbolFactory().newSymbol("term+", 37, CUP$0, CUP$1, RESULT);
            }

          // extraSort+ ::= extraSort+ extraSort 
          case 76:
            {
              return parser.getSymbolFactory().newSymbol("extraSort+", 22, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // extraFun+ ::= extraFun+ extraFun 
          case 77:
            {
              return parser.getSymbolFactory().newSymbol("extraFun+", 23, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // extraPred+ ::= extraPred+ extraPred 
          case 78:
            {
              return parser.getSymbolFactory().newSymbol("extraPred+", 24, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // bench_attribute* ::= 
          case 79:
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("bench_attribute*", 21, CUP$sym, CUP$sym);
            }

          // bench_attribute+ ::= bench_attribute+ bench_attribute 
          case 80:
            {
              return parser.getSymbolFactory().newSymbol("bench_attribute+", 20, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          /* . . . . . .*/
          default:
            throw new InternalError(
               "Invalid action number found in internal parse table");

        }
    }
}

}
