package de.uka.ilkd.key.testgeneration;

import java.util.List;

import de.uka.ilkd.key.java.Services;
import de.uka.ilkd.key.symbolic_execution.model.IExecutionNode;
import de.uka.ilkd.key.testgeneration.defaultimplementation.ModelGenerator;
import de.uka.ilkd.key.testgeneration.model.IModel;
import de.uka.ilkd.key.testgeneration.model.modelgeneration.IModelGenerator;
import de.uka.ilkd.key.testgeneration.model.modelgeneration.ModelGeneratorException;
import de.uka.ilkd.key.testgeneration.xml.XMLGenerator;

/**
 * The main API interface for the KeYTestGen2 test case generation system.
 * Targets can be passed either as entire source files or individual methods. An
 * implementation of the <{@code ITestCaseXMLParser} can be provided in order to
 * generate test cases for a specific framework. Otherwise, KTG will simply
 * return the default XML representation of test cases as a raw {@code String}.
 * 
 * @author christopher
 */
public class TestCaseGenerator {

    private final IModelGenerator modelGenerator;
    private final XMLGenerator xmlWriter = new XMLGenerator();

    private TestCaseGenerator(IModelGenerator modelGenerator)
            throws ModelGeneratorException {

        this.modelGenerator = modelGenerator;
    };

    public static TestCaseGenerator getDefaultInstance()
            throws ModelGeneratorException {

        return new TestCaseGenerator(ModelGenerator.getDefaultModelGenerator());
    }

    public String generateTestCase(
            final IExecutionNode targetNode,
            final Services services) throws Exception {

        /*
         * Use the ModelGenerator in order to retrieve a model for the
         * precondition
         */
        IModel model = modelGenerator.generateModel(targetNode);

        /*
         * Use the XML writer in order to generate an XML representation for the
         * entire testcase
         */
        return xmlWriter.generateXML(model);
    }

    /**
     * Generate test cases for a specific method in the class being tested. The
     * test cases will be in the format specified by the provided
     * {@link ITestCaseXMLParser}.
     * 
     * @param parser
     *            the parser to use to produce test cases
     * @param sourcePath
     *            path to the source file to produce cases for
     * @param method
     *            the method to produce test cases for
     * @return
     */
    public Object generateTestCase(
            ITestCaseParser<?> parser,
            String sourcePath,
            String method) {

        return null;
    }

    /**
     * Generate test cases for a specific method in the class being tested. The
     * test case will be returned in the XML format generated by KeYTestGen2.
     * 
     * @param sourcePath
     *            path to the source file to produce cases for
     * @param method
     *            the method to produce test cases for
     * @return
     */
    public String generateTestCase(String sourcePath, String method) {

        return null;
    }

    /**
     * Generate test cases for all methods in the class being tested. The test
     * cases will be in the format specified by the provided
     * {@link ITestCaseXMLParser}.
     * 
     * @param parser
     *            the parser to use to produce test cases
     * @param sourcePath
     *            path to the source file to produce cases for
     * @param includePrivateMethods
     *            also generate test cases for private methods?
     * @return
     */
    public Object generateTestCases(
            ITestCaseParser<?> parser,
            String sourcePath,
            boolean includePrivateMethods) {

        return null;
    }

    /**
     * Generate test cases for all methods in the class being tested. The test
     * cases will be returned in the XML format generated by KeYTestGen2.
     * 
     * @param sourcePath
     *            path to the source file to produce cases for
     * @param includePrivateMethods
     *            also generate test cases for private methods?
     * @return
     */
    public List<String> generateTestCases(
            String sourcePath,
            boolean includePrivateMethods) {

        return null;
    }

}