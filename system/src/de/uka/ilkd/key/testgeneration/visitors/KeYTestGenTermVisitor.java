package de.uka.ilkd.key.testgeneration.visitors;

import java.util.LinkedList;

import de.uka.ilkd.key.logic.Term;
import de.uka.ilkd.key.logic.Visitor;
import de.uka.ilkd.key.logic.op.Equality;
import de.uka.ilkd.key.logic.op.Function;
import de.uka.ilkd.key.logic.op.Junctor;
import de.uka.ilkd.key.logic.op.LocationVariable;
import de.uka.ilkd.key.logic.op.Operator;
import de.uka.ilkd.key.logic.op.ProgramVariable;
import de.uka.ilkd.key.logic.op.SortDependingFunction;
import de.uka.ilkd.key.testgeneration.model.implementation.Model;
import de.uka.ilkd.key.testgeneration.model.implementation.ModelVariable;

/**
 * Used to define a custom set of {@link Term} visitors used in KeYTestGen.
 * 
 * @author christopher
 */
public abstract class KeYTestGenTermVisitor
        extends Visitor {

    /**
     * Used for storing an index over all primitive types currently handled by KeYTestGen
     */
    protected static final LinkedList<String> primitiveTypes;

    /**
     * Used for storing an index of binary functions supported by KeYTestGen
     */
    protected static final LinkedList<String> binaryFunctions;

    static {

        primitiveTypes = new LinkedList<String>();
        primitiveTypes.add("int");
        primitiveTypes.add("boolean");
        primitiveTypes.add("long");
        primitiveTypes.add("byte");

        binaryFunctions = new LinkedList<String>();
        binaryFunctions.add("geq");
        binaryFunctions.add("leq");
        binaryFunctions.add("mul");
        binaryFunctions.add("div");
        binaryFunctions.add("add");
        binaryFunctions.add("sub");
    }

    /**
     * Check if the given term represents a program construct with a supported primitive type as its
     * base type, such as a method or local variable declaration.
     * 
     * @param term
     *            the term to check
     * @return true if the Term represents an integer program construct, false otherwise
     */
    protected boolean isPrimitiveType(Term term) {

        String sortName = term.sort().name().toString();

        return primitiveTypes.contains(sortName);
    }

    /**
     * Check if the given Term represents a binary function, such as any of the {@link Junctor}
     * instances.
     * 
     * @param term
     * @return
     */
    protected boolean isBinaryFunction(Term term) {

        de.uka.ilkd.key.logic.op.Operator operator = term.op();

        return operator instanceof Junctor || operator instanceof Equality;
    }

    protected boolean isVariable(Term term) {

        Operator operator = term.op();

        return operator instanceof Function || operator instanceof ProgramVariable;
    }

    /**
     * Generate an identifier String for a variable. Such an identifier is used in order to uniquely
     * distinguish an instance of a {@link ModelVariable}.
     * <p>
     * If the variable is defined by a {@link SortDependingFunction}, the identifier will be
     * generated by recursively exploring the nesting hierarchy this variable is a part of.
     * 
     * @param term
     *            the {@link Term} representing the variable
     * @return the identifier String.
     * @see Model
     */
    protected String resolveIdentifierString(Term term) {

        /*
         * Base case: underlying definition does not consist of any more nested recursions, so we
         * just extract the current variable name and go back.
         */
        if (term.op().getClass() == LocationVariable.class) {
            return getVariableNameForTerm(term);
        }

        /*
         * Recursive case: underlying definition is still recursively defined, so keep unwinding it.
         */
        else if (term.toString().equals("null")) {
            return "null";
        }
        else {
            return resolveIdentifierString(term.sub(1)) + "_dot_"
                    + getVariableNameForTerm(term.sub(2));
        }
    }

    /**
     * Retrieves the short-hand name of the variable a given Term represents. For example, in the
     * Term
     * 
     * <pre>
     * com.example.MyClass::$myVariable,
     * </pre>
     * 
     * the returned shorthand is <i>myVariable</i>.
     * 
     * @param term
     *            the Term to process
     * @return the short-hand name of the variable represented by the Term. If the Term does not
     *         represent a variable, the regular toString output of the Terms {@link Operator}
     *         instance is returned.
     */
    protected String getVariableNameForTerm(Term term) {

        Operator operator = term.op();
        String name = operator.name().toString();

        String[] splitName = name.split("::\\$");
        return splitName[splitName.length - 1].replaceAll("[^A-Za-z0-9]", "");
    }
}
