package de.uka.ilkd.key.testgeneration.parser.z3parser.tree.bnf.Absyn; // Java Package generated by the BNF Converter.

public class Function extends Fun {
  public final String ident_;
  public final Block block_;
  public final Type type_;
  public final Val val_;

  public Function(String p1, Block p2, Type p3, Val p4) { ident_ = p1; block_ = p2; type_ = p3; val_ = p4; }

  public <R,A> R accept(de.uka.ilkd.key.testgeneration.parser.z3parser.tree.bnf.Absyn.Fun.Visitor<R,A> v, A arg) { return v.visit(this, arg); }

  public boolean equals(Object o) {
    if (this == o) return true;
    if (o instanceof de.uka.ilkd.key.testgeneration.parser.z3parser.tree.bnf.Absyn.Function) {
      de.uka.ilkd.key.testgeneration.parser.z3parser.tree.bnf.Absyn.Function x = (de.uka.ilkd.key.testgeneration.parser.z3parser.tree.bnf.Absyn.Function)o;
      return this.ident_.equals(x.ident_) && this.block_.equals(x.block_) && this.type_.equals(x.type_) && this.val_.equals(x.val_);
    }
    return false;
  }

  public int hashCode() {
    return 37*(37*(37*(this.ident_.hashCode())+this.block_.hashCode())+this.type_.hashCode())+this.val_.hashCode();
  }


}
