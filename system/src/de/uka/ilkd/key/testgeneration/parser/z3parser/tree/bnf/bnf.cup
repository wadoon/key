// -*- Java -*- This Cup file was machine-generated by BNFC
package z3parser.tree.bnf;

parser code {:
  public z3parser.tree.bnf.Absyn.Model pModel() throws Exception
  {
	java_cup.runtime.Symbol res = parse();
	return (z3parser.tree.bnf.Absyn.Model) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}

:}

nonterminal z3parser.tree.bnf.Absyn.Model Model;
nonterminal z3parser.tree.bnf.Absyn.ListFun ListFun;
nonterminal z3parser.tree.bnf.Absyn.Fun Fun;
nonterminal z3parser.tree.bnf.Absyn.Block Block;
nonterminal z3parser.tree.bnf.Absyn.Val Val;
nonterminal z3parser.tree.bnf.Absyn.Exp Exp;
nonterminal z3parser.tree.bnf.Absyn.Bool Bool;
nonterminal z3parser.tree.bnf.Absyn.ListExp ListExp;
nonterminal z3parser.tree.bnf.Absyn.Op Op;
nonterminal z3parser.tree.bnf.Absyn.Type Type;

terminal _SYMB_0;    //   (model
terminal _SYMB_1;    //   )
terminal _SYMB_2;    //   (define-fun
terminal _SYMB_3;    //   (
terminal _SYMB_4;    //   -
terminal _SYMB_5;    //   +
terminal _SYMB_6;    //   Bool
terminal _SYMB_7;    //   False
terminal _SYMB_8;    //   Int
terminal _SYMB_9;    //   True



terminal Integer _INTEGER_;

terminal String _IDENT_;



start with Model;


Model ::= _SYMB_0 ListFun:p_2 _SYMB_1  {: RESULT = new z3parser.tree.bnf.Absyn.Mod(p_2); :} 
;
ListFun ::=  /* empty */  {: RESULT = new z3parser.tree.bnf.Absyn.ListFun(); :} 
  | ListFun:p_1 Fun:p_2  {: RESULT = p_1; p_1.addLast(p_2); :}
;
Fun ::= _SYMB_2 _IDENT_:p_2 Block:p_3 Type:p_4 Val:p_5 _SYMB_1  {: RESULT = new z3parser.tree.bnf.Absyn.Function(p_2,p_3,p_4,p_5); :} 
;
Block ::= _SYMB_3 ListExp:p_2 _SYMB_1  {: RESULT = new z3parser.tree.bnf.Absyn.Blck(p_2); :} 
;
Val ::= Exp:p_1  {: RESULT = new z3parser.tree.bnf.Absyn.EVal(p_1); :} 
  | Block:p_1  {: RESULT = new z3parser.tree.bnf.Absyn.ENVal(p_1); :}
;
Exp ::= _INTEGER_:p_1  {: RESULT = new z3parser.tree.bnf.Absyn.EInt(p_1); :} 
  | Op:p_1 _INTEGER_:p_2  {: RESULT = new z3parser.tree.bnf.Absyn.ESInt(p_1,p_2); :}
  | Bool:p_1  {: RESULT = new z3parser.tree.bnf.Absyn.EBool(p_1); :}
;
Bool ::= _SYMB_9  {: RESULT = new z3parser.tree.bnf.Absyn.BTrue(); :} 
  | _SYMB_7  {: RESULT = new z3parser.tree.bnf.Absyn.BFalse(); :}
;
ListExp ::=  /* empty */  {: RESULT = new z3parser.tree.bnf.Absyn.ListExp(); :} 
  | ListExp:p_1 Exp:p_2  {: RESULT = p_1; p_1.addLast(p_2); :}
;
Op ::= _SYMB_4  {: RESULT = new z3parser.tree.bnf.Absyn.SNeg(); :} 
  | _SYMB_5  {: RESULT = new z3parser.tree.bnf.Absyn.SPos(); :}
;
Type ::= _SYMB_8  {: RESULT = new z3parser.tree.bnf.Absyn.TInt(); :} 
  | _SYMB_6  {: RESULT = new z3parser.tree.bnf.Absyn.TBool(); :}
;

