\sorts {
  ABS.StdLib.Bool;
}

\functions {
  ABS.StdLib.Bool ABS.StdLib.Bool::True;
  ABS.StdLib.Bool ABS.StdLib.Bool::False;
}

\rules{
  variableDeclarationWithInitializer {
      \schemaVar \program ABSTypeRef TypeRef;
      \schemaVar \program Variable lhs;
      \schemaVar \program PureExp exp1;

      \schemaVar \formula post;
      
      \find (\[{.. TypeRef lhs = exp1; ...}\]post)
      \replacewith (\[{.. lhs = exp1; ...}\]post)
      \addprogvars(lhs)

      \heuristics(simplify_prog) 
  };

  variableDeclaration {
      \schemaVar \program ABSInterfaceTypeRef TypeRef;
      \schemaVar \program Variable lhs;

      \schemaVar \formula post;
      
      \find (\[{.. TypeRef lhs; ...}\]post)
      \replacewith (\[{.. lhs = null; ...}\]post)
      \addprogvars(lhs)

      \heuristics(simplify_prog) 
  };


  assignment {
      \schemaVar \program Variable lhs;
      \schemaVar \program PureExp exp1;

      \schemaVar \formula post;
      
      \find (\[{.. lhs = exp1; ...}\]post) 
      \replacewith ({lhs:=exp1}\[{.. ...}\]post)

      \heuristics(simplify_prog)
  };

  ifThenElseAntec {
      \schemaVar \program PureExp cond;

      \schemaVar \program Statement thenB;
      \schemaVar \program Statement elseB;

      \schemaVar \formula post;
  	     
     \find (\[{.. if ( cond ) thenB; else elseB; ...}\]post ==> )
     \replacewith(\[{.. thenB; ...}\]post ==>) \add(cond = TRUE ==>);
     \replacewith(\[{.. elseB; ...}\]post ==>) \add(cond = FALSE ==>)
     \heuristics(split_if) 

  };

  ifThenElseSucc {
      \schemaVar \program PureExp cond;

      \schemaVar \program Statement thenB;
      \schemaVar \program Statement elseB;

      \schemaVar \program[list] Statement rest;
      \schemaVar \formula post;
  	     
     \find (==> \[{ if ( cond ) thenB; else elseB; rest; }\]post)
     \replacewith(==> \[{ thenB; rest; }\]post) \add(cond = TRUE ==>);
     \replacewith(==> \[{ elseB; rest; }\]post) \add(cond = FALSE ==>)
     \heuristics(split_if) 

  };

  emptyBlock {
      \schemaVar \formula post;
      
      \find (\[{.. {} ...}\]post) 
      \replacewith (\[{.. ...}\]  post)
      \heuristics(simplify_prog)
  };

  emptyBox {
      \schemaVar \formula post;
      
      \find (\[{ }\]post) 
      \replacewith (post)
      \heuristics(simplify_prog)
  };


  boxTrue {      
      \schemaVar \program[list] Statement s;

      \find (\[{ s; }\]true) 
      \replacewith (true)
      \heuristics(concrete)
  };

  ABSTrueToTRUE {      
      \find (ABS.StdLib.Bool::True) 
      \replacewith (TRUE)
      \heuristics(concrete)
  };

 ABSFalseToFALSE {      
      \find (ABS.StdLib.Bool::False) 
      \replacewith (FALSE)
      \heuristics(concrete)
  };

 BoolEncoding2Fml {      
      \schemaVar \formula phi;
      \find (\if (phi) \then (TRUE) \else (FALSE) = TRUE) 
      \replacewith (phi)
      \heuristics(concrete)
  };
}
