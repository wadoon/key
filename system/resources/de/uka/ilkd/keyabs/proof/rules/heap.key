\sorts {
    Field;
    Heap;
}


\functions {
    //select/store
    alpha alpha::select(Heap, ABSAnyInterface, Field);
    Heap store(Heap, ABSAnyInterface, Field, any);
    Heap anon(Heap, LocSet, Heap);
    Heap memset(Heap, LocSet, any);
        
    //null
    Null null;
        
}


\predicates {
    wellFormed(Heap);
}


\programVariables {
    Heap heap;
}


   

\rules {

    //--------------------------------------------------------------------------
    //axioms for select/store
    //--------------------------------------------------------------------------

    selectOfStore {
	\schemaVar \term Heap h;
	\schemaVar \term ABSAnyInterface o, o2;
	\schemaVar \term Field f, f2;
	\schemaVar \term alpha x;
   
	\find(beta::select(store(h, o, f, x), o2, f2))
	
	\replacewith(\if(o = o2 & f = f2)
                     \then((beta)x)
                     \else(beta::select(h, o2, f2)))
                     
      	\heuristics(simplify_enlarging)
    };
    
    
    selectOfAnon {
        \schemaVar \term Heap h, h2;
        \schemaVar \term LocSet s;
	\schemaVar \term ABSAnyInterface o;
	\schemaVar \term Field f; 
	
        \find(beta::select(anon(h, s, h2), o, f))
        
        \replacewith(\if(elementOf(o, f, s))
                     \then(beta::select(h2, o, f))
                     \else(beta::select(h, o, f)))
                                  
        \heuristics(simplify_enlarging)
    };
    
    selectOfMemset {
        \schemaVar \term Heap h;
        \schemaVar \term LocSet s;
        \schemaVar \term any x;
	\schemaVar \term ABSAnyInterface o;
	\schemaVar \term Field f; 
	
        \find(beta::select(memset(h, s, x), o, f))
        
        \replacewith(\if(elementOf(o, f, s))
                     \then(x)
                     \else(beta::select(h, o, f)))
                     
        \heuristics(simplify_enlarging)
    };
    
    
    
    //--------------------------------------------------------------------------
    //EQ versions of axioms for select/store (these are lemmata)
    //--------------------------------------------------------------------------
    
    selectOfStoreEQ {
	\schemaVar \term Heap h;
	\schemaVar \term ABSAnyInterface o, o2;
	\schemaVar \term Field f, f2;
	\schemaVar \term alpha x;
	\schemaVar \term Heap EQ;
   
        \assumes(store(h, o, f, x) = EQ ==>)
	\find(beta::select(EQ, o2, f2))
        \sameUpdateLevel
	
	\replacewith(\if(o = o2 & f = f2)
                     \then((beta)x)
                     \else(beta::select(h, o2, f2)))
                     
      	\heuristics(simplify_enlarging)
    };

    
    selectOfAnonEQ {
        \schemaVar \term Heap h, h2;
        \schemaVar \term LocSet s;
	\schemaVar \term ABSAnyInterface o;
	\schemaVar \term Field f;
	\schemaVar \term Heap EQ; 
	
	\assumes(anon(h, s, h2) = EQ ==>)
        \find(beta::select(EQ, o, f))
        \sameUpdateLevel
        
        \replacewith(\if(elementOf(o, f, s))
                     \then(beta::select(h2, o, f))
                     \else(beta::select(h, o, f)))
                     
        \heuristics(simplify_enlarging)
    };    
    
    
    selectOfMemsetEQ {
        \schemaVar \term Heap h;
        \schemaVar \term LocSet s;
        \schemaVar \term any x;
	\schemaVar \term ABSAnyInterface o;
	\schemaVar \term Field f;
	\schemaVar \term Heap EQ; 
	
	\assumes(memset(h, s, x) = EQ ==>)
        \find(beta::select(EQ, o, f))
        \sameUpdateLevel
        
        \replacewith(\if(elementOf(o, f, s))
                     \then(x)
                     \else(beta::select(h, o, f)))
                     
        \heuristics(simplify_enlarging)
    };
        
    
       
    //--------------------------------------------------------------------------
    //lemmata for some common cases
    //--------------------------------------------------------------------------
    
    dropEffectlessStores {
        \schemaVar \term Heap h, result;
        \schemaVar \term ABSAnyInterface o;
        \schemaVar \term Field f;
	\schemaVar \term any x;	
	
	\find(store(h, o, f, x))
	\varcond(\dropEffectlessStores(h, o, f, x, result))
	
	\replacewith(result)
	
	\heuristics(concrete)
    };
        
    
    memsetEmpty {
        \schemaVar \term Heap h;
        \schemaVar \term any x;
        
        \find(memset(h, empty, x))
        
        \replacewith(h)
        
        \heuristics(concrete)
    };
    
    
    
    //--------------------------------------------------------------------------
    //axioms for using wellFormed
    //--------------------------------------------------------------------------

    //--------------------------------------------------------------------------
    //axioms for proving wellFormed
    //--------------------------------------------------------------------------
    
    wellFormedStoreObject {
	\schemaVar \term Heap h;
	\schemaVar \term ABSAnyInterface o;
	\schemaVar \term Field f;
	\schemaVar \term deltaObject x;
        
   	\find(==> wellFormed(store(h, o, f, x)))

        \varcond(\fieldType(f, alpha))
   	
   	\replacewith(==> wellFormed(h));
        \replacewith(==> x = null | alpha::instance(x) = TRUE)
   	             
   	\heuristics(simplify_enlarging)
    };


    
    wellFormedStorePrimitive {
	\schemaVar \term Heap h;
	\schemaVar \term ABSAnyInterface o;
	\schemaVar \term Field f;
	\schemaVar \term beta x;
        
   	\find(==> wellFormed(store(h, o, f, x)))
   	\varcond(\fieldType(f, alpha), \not\sub(beta, ABSAnyInterface), 
                 \not\sub(beta, LocSet), \sub(beta, alpha))
   	
   	\replacewith(==> wellFormed(h))
   	             
   	\heuristics(concrete)
    };
    
    wellFormedAnon {
        \schemaVar \term Heap h, h2;
        \schemaVar \term LocSet s;
	
        \find(==> wellFormed(anon(h, s, h2)))
        
        \replacewith(==> wellFormed(h) & wellFormed(h2))
	
        \heuristics(concrete)    
    };

    //--------------------------------------------------------------------------
    //EQ versions of taclets for proving wellFormed (these are lemmata)
    //--------------------------------------------------------------------------
    
    wellFormedStoreObjectEQ {
	\schemaVar \term Heap h;
	\schemaVar \term ABSAnyInterface o;
	\schemaVar \term Field f;
	\schemaVar \term deltaObject x;
	\schemaVar \term Heap EQ;
        
        \assumes(store(h, o, f, x) = EQ ==>)        
   	\find(==> wellFormed(EQ))   	
   	
   	\replacewith(==> wellFormed(h))
   	             
   	\heuristics(simplify_enlarging)
    };
    
    
    wellFormedStoreLocSetEQ {
	\schemaVar \term Heap h;
	\schemaVar \term ABSAnyInterface o;
	\schemaVar \term Field f;
	\schemaVar \term LocSet x;
	\schemaVar \term Heap EQ;	
        
        \assumes(store(h, o, f, x) = EQ ==>)         
   	\find(==> wellFormed(EQ))
   	
   	\replacewith(==> wellFormed(h))
   	             
   	\heuristics(simplify_enlarging)
    };        
    
    
    wellFormedStorePrimitiveEQ {
	\schemaVar \term Heap h;
	\schemaVar \term ABSAnyInterface o;
	\schemaVar \term Field f;
	\schemaVar \term beta x;
	\schemaVar \term Heap EQ;
        
        \assumes(store(h, o, f, x) = EQ ==>)        
   	\find(==> wellFormed(EQ))
   	\varcond(\not\sub(beta, ABSAnyInterface), \not\sub(beta, LocSet))
   	
   	\replacewith(==> wellFormed(h))
   	             
   	\heuristics(concrete)
    };
    
    
    wellFormedAnonEQ {
        \schemaVar \term Heap h, h2;
        \schemaVar \term LocSet s;
	\schemaVar \term Heap EQ;        
	
	\assumes(anon(h, s, h2) = EQ ==>)	
        \find(==> wellFormed(EQ))
        
        \replacewith(==> wellFormed(h) & wellFormed(h2))
	
        \heuristics(concrete)    
    };    
    
    
    
    

    //--------------------------------------------------------------------------
    //axioms based on definition of semantics for casts
    //--------------------------------------------------------------------------

    narrowSelectType {
        \schemaVar \term Heap h;
        \schemaVar \term ABSAnyInterface o;
        \schemaVar \term Field f;

	\assumes( wellFormed(h) ==> )

        \find(beta::select(h,o,f))

        \varcond(\fieldType(f, alpha),
                 \strict\sub(alpha, beta))
        
        \replacewith(alpha::select(h,o,f))

	\heuristics(simplify)
    };


    
    castTrueImpliesOriginalTrue {
        \schemaVar \term Heap h;
        \schemaVar \term ABSAnyInterface o;
        \schemaVar \term Field f;
         
        \assumes(boolean::select(h, o, f) = TRUE ==>)
        \find(==> any::select(h, o, f) = TRUE)
        
        \replacewith(==> true)
             
        \heuristics(concrete)
    };
}

