\sorts {
  Future;
  HistoryLabel;
  ItfLabel;
  ClassLabel;
  MethodLabel;
  Unit;
}

\predicates {

    wfHist(Seq);
    containsEvent(HistoryLabel, Seq);
    containsFuture(Future, Seq);
    startsWith(Seq, Seq);
    endsWith(Seq, Seq);


    isCompletionEv(HistoryLabel);
    isCompletionREv(HistoryLabel);
    isInvocationEv(HistoryLabel);
    isInvocationREv(HistoryLabel);
}

\functions {
    \unique HistoryLabel invocEv(ABSAnyInterface, ABSAnyInterface, Future, MethodLabel, Seq);
    \unique HistoryLabel invocREv(ABSAnyInterface, ABSAnyInterface, Future, MethodLabel, Seq);
    \unique HistoryLabel compEv(ABSAnyInterface, Future, MethodLabel, any);
    \unique HistoryLabel compREv(ABSAnyInterface, Future, any);

    Seq fid(Seq);

    // query functions

    any         getResult(HistoryLabel);
    Future      getFuture(HistoryLabel);
    MethodLabel getMethod(HistoryLabel);
    Seq         getArguments(HistoryLabel);

    HistoryLabel    getInvocationReactionEventForFuture(Seq, Future);
    HistoryLabel    getCompletionEventForFuture(Seq, Future);
    HistoryLabel    getCompletionReactionEventForFuture(Seq, Future);

    ABSAnyInterface getCaller(HistoryLabel);
    ABSAnyInterface getCallee(HistoryLabel);

}


\programVariables {
  Seq history;
}

\rules {

   startsWithDef {
      \schemaVar \term Seq historySV, prefix;

      \find (startsWith(historySV, prefix))
      \replacewith(seqLen(historySV) >= seqLen(prefix) &
                   seqSub(historySV, 0, seqLen(prefix)) = prefix)

      \heuristics(simplify_enlarging)
   };


   endsWithDef {
      \schemaVar \term Seq historySV, suffix;

      \find (endsWith(historySV, suffix))
      \replacewith(seqLen(historySV) >= seqLen(suffix) &
                   seqSub(historySV, seqLen(historySV) - seqLen(suffix),
                   seqLen(historySV)) = suffix)

      \heuristics(simplify_enlarging)
   };

   getResultFromCompEv {
   	\schemaVar \term ABSAnyInterface callee;
   	\schemaVar \term Future fut;
   	\schemaVar \term MethodLabel meth;
   	\schemaVar \term any result;
	 
   	\find (getResult(compEv(callee, fut, meth, result)))
   	\replacewith(result)

   	\heuristics(simplify)
   };

   getResultFromCompREv {
   	\schemaVar \term ABSAnyInterface receiver;
   	\schemaVar \term Future fut;
   	\schemaVar \term any result;
   	\find (getResult(compREv(receiver, fut, result)))
   	\replacewith(result)
   	\heuristics(simplify)
   };

   getResultFromCompEvEQ {
   	\schemaVar \term ABSAnyInterface callee;
   	\schemaVar \term Future fut;
   	\schemaVar \term MethodLabel meth;
   	\schemaVar \term any result;
   	\schemaVar \term HistoryLabel EQ;

   	\assumes (compEv(callee, fut, meth, result) = EQ ==>)
   	\find (getResult(EQ))
   	\sameUpdateLevel
   	\replacewith(result)
   	\heuristics(simplify)
   };

   getResultFromCompREvEQ {
   	\schemaVar \term ABSAnyInterface receiver;
   	\schemaVar \term Future fut;
   	\schemaVar \term any result;
   	\schemaVar \term HistoryLabel EQ;

   	\assumes (compREv(receiver, fut, result) = EQ ==>)
   	\find (getResult(EQ))
   	\sameUpdateLevel
   	\replacewith(result)
   	\heuristics(simplify)
   };

   getFutureFromCompEv {
   	\schemaVar \term ABSAnyInterface callee;
   	\schemaVar \term Future fut;
   	\schemaVar \term MethodLabel meth;
   	\schemaVar \term any result;
   	\find (getFuture(compEv(callee, fut, meth, result)))
   	\replacewith(fut)
   	\heuristics(simplify)
   };

   getFutureFromCompREv {
   	\schemaVar \term ABSAnyInterface receiver;
   	\schemaVar \term Future fut;
   	\schemaVar \term any result;
   	\find (getFuture(compREv(receiver, fut, result)))
   	\replacewith(fut)
   	\heuristics(simplify)
   };

   getFutureFromCompEvEQ {
   	\schemaVar \term ABSAnyInterface callee;
   	\schemaVar \term Future fut;
   	\schemaVar \term MethodLabel meth;
   	\schemaVar \term any result;
   	\schemaVar \term HistoryLabel EQ;
   	
   	\assumes (compEv(callee, fut, meth, result) = EQ ==>)
   	\find (getFuture(EQ))
   	\sameUpdateLevel
   	\replacewith(fut)
   	\heuristics(simplify)
   };

   getFutureFromCompREvEQ {
   	\schemaVar \term ABSAnyInterface receiver;
   	\schemaVar \term Future fut;
   	\schemaVar \term any result;
   	\schemaVar \term HistoryLabel EQ;

   	\assumes (compREv(receiver, fut, result) = EQ ==>)
   	\find (getFuture(EQ))
   	\sameUpdateLevel
   	\replacewith(fut)
   	\heuristics(simplify)
   };

   getFutureFromInvocEv {
   	\schemaVar \term ABSAnyInterface caller, callee;
   	\schemaVar \term Future fut;
   	\schemaVar \term MethodLabel meth;
   	\schemaVar \term Seq args;
   	
   	\find(getFuture(invocEv(caller, callee, fut, meth, args)))
   	
   	\replacewith(fut)
   	
   	\heuristics(simplify)
   };

   getFutureFromInvocREv {
   	\schemaVar \term ABSAnyInterface caller, callee;
   	\schemaVar \term Future fut;
   	\schemaVar \term MethodLabel meth;
   	\schemaVar \term Seq args;
   	\find (getFuture(invocREv(caller, callee, fut, meth, args)))
   	\replacewith(fut)
   	\heuristics(simplify)
   };

   getFutureFromInvocEvEQ {
   	\schemaVar \term ABSAnyInterface caller, callee;
   	\schemaVar \term Future fut;
   	\schemaVar \term MethodLabel meth;
   	\schemaVar \term Seq args;
   	\schemaVar \term HistoryLabel EQ;
   	
   	\assumes (invocEv(caller, callee, fut, meth, args) = EQ ==>)
   	\find (getFuture(EQ))
   	\sameUpdateLevel
   	\replacewith(fut)
   	\heuristics(simplify)
   };

   getFutureFromInvocREvEQ {
   	\schemaVar \term ABSAnyInterface caller, callee;
   	\schemaVar \term Future fut;
   	\schemaVar \term MethodLabel meth;
   	\schemaVar \term Seq args;
   	\schemaVar \term HistoryLabel EQ;

   	\assumes (invocREv(caller, callee, fut, meth, args) = EQ ==>)
   	\find (getFuture(EQ))
   	\sameUpdateLevel
   	\replacewith(fut)
   	\heuristics(simplify)
   };

// getMethod

   getMethodFromCompEv {
   	\schemaVar \term ABSAnyInterface callee;
   	\schemaVar \term Future fut;
   	\schemaVar \term MethodLabel meth;
   	\schemaVar \term any result;
   	\find (getMethod(compEv(callee, fut, meth, result)))
   	\replacewith(meth)
   	\heuristics(simplify)
   };


   getMethodFromCompEvEQ {
   	\schemaVar \term ABSAnyInterface callee;
   	\schemaVar \term Future fut;
   	\schemaVar \term MethodLabel meth;
   	\schemaVar \term any result;
   	\schemaVar \term HistoryLabel EQ;
   	
   	\assumes (compEv(callee, fut, meth, result) = EQ ==>)
   	\find (getMethod(EQ))
   	\sameUpdateLevel
   	\replacewith(meth)
   	\heuristics(simplify)
   };


   getMethodFromInvocEv {
   	\schemaVar \term ABSAnyInterface caller, callee;
   	\schemaVar \term Future fut;
   	\schemaVar \term MethodLabel meth;
   	\schemaVar \term Seq args;
   	
   	\find(getMethod(invocEv(caller, callee, fut, meth, args)))
   	
   	\replacewith(meth)
   	
   	\heuristics(simplify)
   };

   getMethodFromInvocREv {
   	\schemaVar \term ABSAnyInterface caller, callee;
   	\schemaVar \term Future fut;
   	\schemaVar \term MethodLabel meth;
   	\schemaVar \term Seq args;
   	\find (getMethod(invocREv(caller, callee, fut, meth, args)))
   	\replacewith(meth)
   	\heuristics(simplify)
   };

   getMethodFromInvocEvEQ {
   	\schemaVar \term ABSAnyInterface caller, callee;
   	\schemaVar \term Future fut;
   	\schemaVar \term MethodLabel meth;
   	\schemaVar \term Seq args;
   	\schemaVar \term HistoryLabel EQ;
   	
   	\assumes (invocEv(caller, callee, fut, meth, args) = EQ ==>)
   	\find (getMethod(EQ))
   	\sameUpdateLevel
   	\replacewith(meth)
   	\heuristics(simplify)
   };

   getMethodFromInvocREvEQ {
   	\schemaVar \term ABSAnyInterface caller, callee;
   	\schemaVar \term Future fut;
   	\schemaVar \term MethodLabel meth;
   	\schemaVar \term Seq args;
   	\schemaVar \term HistoryLabel EQ;

   	\assumes (invocREv(caller, callee, fut, meth, args) = EQ ==>)
   	\find (getMethod(EQ))
   	\sameUpdateLevel
   	\replacewith(meth)
   	\heuristics(simplify)
   };




// checks for event kinds

   isCompletionEvent {
   	\schemaVar \term ABSAnyInterface callee;
   	\schemaVar \term Future fut;
   	\schemaVar \term MethodLabel meth;
   	\schemaVar \term any result;
   	\schemaVar \term HistoryLabel EQ;

   	\find (isCompletionEv(compEv(callee, fut, meth, result)))
   	\replacewith(true)
   	\heuristics(concrete)
   };

   isCompletionEventDef {
   	\schemaVar \variables ABSAnyInterface callee;
   	\schemaVar \variables Future fut;
   	\schemaVar \variables MethodLabel meth;
   	\schemaVar \variables any result;
   	\schemaVar \term HistoryLabel ev;

   	\find (isCompletionEv(ev))
	\varcond(\notFreeIn(callee, ev), \notFreeIn(fut, ev), \notFreeIn(meth, ev), \notFreeIn(result, ev))
	\replacewith(\exists callee;\exists fut;\exists meth;\exists result;(compEv(callee, fut, meth, result)=ev))
   	\heuristics(simplify)
   };


   isCompletionEventEQ {
   	\schemaVar \term ABSAnyInterface callee;
   	\schemaVar \term Future fut;
   	\schemaVar \term MethodLabel meth;
   	\schemaVar \term any result;
   	\schemaVar \term HistoryLabel EQ;

	\assumes (compEv(callee, fut, meth, result) = EQ ==>)
   	\find (isCompletionEv(EQ))
   	\sameUpdateLevel
   	\replacewith(true)
   	\heuristics(concrete)
   };

   isCompletionReactionEvent {
   	\schemaVar \term ABSAnyInterface callee;
   	\schemaVar \term Future fut;
   	\schemaVar \term any result;

   	\find (isCompletionREv(compREv(callee, fut, result)))
   	\replacewith(true)
   	\heuristics(concrete)
   };

   isCompletionReactionEventEQ {
   	\schemaVar \term ABSAnyInterface callee;
   	\schemaVar \term Future fut;
   	\schemaVar \term any result;
   	\schemaVar \term HistoryLabel EQ;
   	
   	\assumes(EQ = compREv(callee, fut, result) ==>)
   	\find (isCompletionREv(EQ))
   	\sameUpdateLevel   	
   	\replacewith(true)
   	\heuristics(concrete)
   };

   isCompletionReactionEventGeneral {
   	\schemaVar \variables ABSAnyInterface callee;
   	\schemaVar \variables Future fut;
   	\schemaVar \variables any result;
    \schemaVar \term HistoryLabel l;

   	\find (isCompletionREv(l))
   	\varcond (\notFreeIn(callee, l), \notFreeIn(fut, l), \notFreeIn(result, l))
   	\replacewith(\exists callee; \exists fut; \exists result; (l=compREv(callee, fut, result)))
   	\heuristics(simplify)
   };
   
   
    getArgumentsFromInvocEv {
   	\schemaVar \term ABSAnyInterface caller, callee;
   	\schemaVar \term Future fut;
   	\schemaVar \term MethodLabel meth;
   	\schemaVar \term Seq args;
   	\schemaVar \term HistoryLabel EQ;
   	
   	\find (getArguments(invocEv(caller, callee, fut, meth, args) ))
   	\sameUpdateLevel
   	\replacewith(args)
   	\heuristics(simplify)
   };

   getArgumentsFromInvocEvEQ {
   	\schemaVar \term ABSAnyInterface caller, callee;
   	\schemaVar \term Future fut;
   	\schemaVar \term MethodLabel meth;
   	\schemaVar \term Seq args;
   	\schemaVar \term HistoryLabel EQ;
   	
   	\assumes (invocEv(caller, callee, fut, meth, args) = EQ ==>)
   	\find (getArguments(EQ))
   	\sameUpdateLevel
   	\replacewith(args)
   	\heuristics(simplify)
   };

   getArgumentsFromInvocREv {
   	\schemaVar \term ABSAnyInterface caller, callee;
   	\schemaVar \term Future fut;
   	\schemaVar \term MethodLabel meth;
   	\schemaVar \term Seq args;
   	\find (getArguments(invocREv(caller, callee, fut, meth, args)))
   	\replacewith(args)
   	\heuristics(simplify)
   };

   getArgumentsFromInvocREvEQ {
   	\schemaVar \term ABSAnyInterface caller, callee;
   	\schemaVar \term Future fut;
   	\schemaVar \term MethodLabel meth;
   	\schemaVar \term Seq args;
   	\schemaVar \term HistoryLabel EQ;

   	\assumes (invocREv(caller, callee, fut, meth, args) = EQ ==>)
   	\find (getArguments(EQ))
   	\sameUpdateLevel
   	\replacewith(args)
   	\heuristics(simplify)
   };

   isInvocationEvent {
   	\schemaVar \term ABSAnyInterface caller, callee;
   	\schemaVar \term Future fut;
   	\schemaVar \term MethodLabel meth;
   	\schemaVar \term Seq args;

   	\find (isInvocationEv(invocEv(caller, callee, fut, meth, args)))
   	\replacewith(true)
   	\heuristics(simplify)
   };

   isInvocationReactionEvent {
   	\schemaVar \term ABSAnyInterface caller, callee;
   	\schemaVar \term Future fut;
   	\schemaVar \term MethodLabel meth;
   	\schemaVar \term Seq args;
   	
   	\find (isInvocationREv(invocREv(caller, callee, fut, meth, args)))
   	\replacewith(true)
   	\heuristics(simplify)
   };

   isInvocationEventEQ {
   	\schemaVar \term ABSAnyInterface caller, callee;
   	\schemaVar \term Future fut;
   	\schemaVar \term MethodLabel meth;
   	\schemaVar \term Seq args;
   	\schemaVar \term HistoryLabel EQ;
   	
	\assumes (invocEv(caller, callee, fut, meth, args) = EQ ==>)
   	\find (isInvocationEv(EQ))
   	\sameUpdateLevel
   	
   	\replacewith(true)
   	\heuristics(simplify)
   };

   isInvocationReactionEventEQ {
   	\schemaVar \term ABSAnyInterface caller, callee;
   	\schemaVar \term Future fut;
   	\schemaVar \term MethodLabel meth;
   	\schemaVar \term Seq args;
   	\schemaVar \term HistoryLabel EQ;
   	
   	\assumes (invocREv(caller, callee, fut, meth, args) = EQ ==>)
   	\find (isInvocationREv(EQ))
   	\sameUpdateLevel   
   		
   	\replacewith(true)
   	\heuristics(simplify)
   };



//
   isInvocationEventFalse1 {
   	\schemaVar \term ABSAnyInterface callee;
   	\schemaVar \term Future fut;
   	\schemaVar \term MethodLabel meth;
   	\schemaVar \term any result;

   	\find (isInvocationEv(compEv(callee, fut, meth, result)))
   	\replacewith(false)
   	\heuristics(simplify)
   };

   isInvocationEventFalse2 {
   	\schemaVar \term ABSAnyInterface callee;
   	\schemaVar \term Future fut;
   	\schemaVar \term MethodLabel meth;
   	\schemaVar \term any result;

   	\find (isInvocationEv(compREv(callee, fut, result)))
   	\replacewith(false)
   	\heuristics(simplify)
   };

   isInvocationReactionEventFalse1 {
   	\schemaVar \term ABSAnyInterface callee;
   	\schemaVar \term Future fut;
   	\schemaVar \term MethodLabel meth;
   	\schemaVar \term any result;
   	
   	\find (isInvocationREv(compEv(callee, fut, meth, result)))
   	\replacewith(false)
   	\heuristics(simplify)
   };

   isInvocationReactionEventFalse2 {
   	\schemaVar \term ABSAnyInterface callee;
   	\schemaVar \term Future fut;
   	\schemaVar \term MethodLabel meth;
   	\schemaVar \term any result;
   	
   	\find (isInvocationREv(compREv(callee, fut, result)))
   	\replacewith(false)
   	\heuristics(simplify)
   };

   isInvocationEventEQFalse1 {
   	\schemaVar \term ABSAnyInterface callee;
   	\schemaVar \term Future fut;
   	\schemaVar \term MethodLabel meth;
   	\schemaVar \term any result;
   	\schemaVar \term HistoryLabel EQ;
   	
	\assumes (compEv(callee, fut, meth, result) = EQ ==>)
   	\find (isInvocationEv(EQ))
  	\sameUpdateLevel
   	\replacewith(false)
   	\heuristics(simplify)
   };

   isInvocationEventEQFalse2 {
   	\schemaVar \term ABSAnyInterface callee;
   	\schemaVar \term Future fut;
   	\schemaVar \term any result;
   	\schemaVar \term HistoryLabel EQ;
   	
	\assumes (compREv(callee, fut, result) = EQ ==>)
   	\find (isInvocationEv(EQ))
  	\sameUpdateLevel
   	\replacewith(false)
   	\heuristics(simplify)
   };
   
   isInvocationReactionEventEQFalse1 {
   	\schemaVar \term ABSAnyInterface callee;
   	\schemaVar \term Future fut;
   	\schemaVar \term any result;
   	\schemaVar \term HistoryLabel EQ;
   
   	\assumes (compREv(callee, fut, result) = EQ ==>)
   	\find (isInvocationREv(EQ))
  	\sameUpdateLevel
   	\replacewith(false)
   	\heuristics(simplify)
   };

   isInvocationReactionEventEQFalse2 {
   	\schemaVar \term ABSAnyInterface callee;
   	\schemaVar \term Future fut;
   	\schemaVar \term MethodLabel meth;
   	\schemaVar \term any result;
   	\schemaVar \term HistoryLabel EQ;

   	
   	\assumes (compEv(callee, fut, meth, result) = EQ ==>)
   	\find (isInvocationREv(EQ))
  	\sameUpdateLevel
   	
   	\replacewith(false)
   	\heuristics(simplify)
   };

  // history well-formedness
 
/*  containsFutureDef {  	
	\find (containsFuture(fut, fid(history)))
	\replacewith (\exists i;(i>=0 & i<seqLen(fid(history); any::seqGet(fid(history), i) = fut)))	
  };*/
 
  wellFormedInvocationEvent {
  	\schemaVar \term ABSAnyInterface caller, callee;
   	\schemaVar \term Future fut;
   	\schemaVar \term MethodLabel meth;
   	\schemaVar \term Seq args;
   	\schemaVar \term Seq historySV;


  	\find(wfHist(seqConcat(historySV, seqSingleton(invocEv(caller, callee, fut, meth, args)))))
  	\replacewith(wfHist(historySV) & caller != null & callee != null & !containsFuture(fut, fid(historySV)))
  	\heuristics(simplify)
  };

 

  wellFormedInvocationEventEQ {
  	\schemaVar \term ABSAnyInterface caller, callee;
   	\schemaVar \term Future fut;
   	\schemaVar \term MethodLabel meth;
   	\schemaVar \term Seq args;
   	\schemaVar \term Seq EQ;
   	\schemaVar \term Seq historySV;


	\assumes (seqConcat(historySV, seqSingleton(invocEv(caller, callee, fut, meth, args))) = EQ ==>)
  	\find(wfHist(EQ))
  	\sameUpdateLevel
  	
  	\replacewith(wfHist(historySV) & caller != null & callee != null & !containsFuture(fut, fid(historySV)))
  	\heuristics(simplify)
  };

  wellFormedInvocationEventPreceedsInvocationReactionEvent {
  	\schemaVar \term ABSAnyInterface caller, callee;
   	\schemaVar \term Future fut;
   	\schemaVar \term MethodLabel meth;
   	\schemaVar \term Seq args;
    \schemaVar \term Seq historySV;

  	\find(wfHist(seqConcat(historySV, seqSingleton(invocREv(caller, callee, fut, meth, args)))))
  	\replacewith(wfHist(historySV) & caller != null & callee != null
  	     & !containsEvent(invocREv(caller, callee, fut, meth, args), historySV)
  	     &  containsEvent(invocEv(caller, callee, fut, meth, args), historySV))
  	\heuristics(simplify)
  };

  wellFormedInvocationEventPreceedsInvocationReactionEventEQ {
  	\schemaVar \term ABSAnyInterface caller, callee;
   	\schemaVar \term Future fut;
   	\schemaVar \term MethodLabel meth;
   	\schemaVar \term Seq args;
   	\schemaVar \term Seq EQ;
   	\schemaVar \term Seq historySV;


    \assumes(seqConcat(historySV, seqSingleton(invocREv(caller, callee, fut, meth, args))) = EQ ==>)
  	\find(wfHist(EQ))
  	\replacewith(wfHist(historySV) & caller != null & callee != null
  	     & !containsEvent(invocREv(caller, callee, fut, meth, args), historySV)
  	     &  containsEvent(invocEv(caller, callee, fut, meth, args), historySV))
  	\heuristics(simplify)
  };

  wellFormedCompletionEventPreceedsCompletionReactionEvent {
  	\schemaVar \term ABSAnyInterface caller;
   	\schemaVar \variables ABSAnyInterface callee;
   	\schemaVar \term Future fut;
   	\schemaVar \variables MethodLabel meth;
   	\schemaVar \term any result;
   	\schemaVar \term Seq historySV;

  	\find(wfHist(seqConcat(historySV, seqSingleton(compREv(caller, fut, result)))))
  	\varcond(\notFreeIn(callee, result), \notFreeIn(meth, result, fut, historySV),
  	         \notFreeIn(callee, result, fut, historySV))
  	\replacewith(wfHist(historySV) & caller != null
  	     &  \exists callee; \exists meth; (callee != null &
  	            containsEvent(compEv(callee, fut, meth, result), historySV)))
  	\heuristics(simplify)
  };

  wellFormedCompletionEventPreceedsCompletionReactionEventEQ {
  	\schemaVar \term ABSAnyInterface caller;
   	\schemaVar \term Future fut;
   	\schemaVar \variables ABSAnyInterface callee;
   	\schemaVar \variables MethodLabel meth;
   	\schemaVar \term any result;
   	\schemaVar \term Seq historySV;
   	\schemaVar \term Seq EQ;


  	\assumes(seqConcat(historySV, seqSingleton(compREv(caller, fut, result)))=EQ ==>)
  	\find(wfHist(EQ))
  	\varcond(\notFreeIn(callee, result), \notFreeIn(meth, result, fut, historySV),
  	         \notFreeIn(callee, result, fut, historySV))
  	\replacewith(wfHist(historySV) & caller != null
  	     &  \exists callee; \exists meth; (callee != null &
  	            containsEvent(compEv(callee, fut, meth, result), historySV)) )
  	\heuristics(simplify)
  };


  emptySeqLeft {
    \schemaVar \term Seq seq;
    \find (seqConcat(seqEmpty, seq))
    \replacewith(seq)
    \heuristics(simplify)
  };

  emptySeqRight {
    \schemaVar \term Seq seq;
    \find (seqConcat(seq, seqEmpty))
    \replacewith(seq)
    \heuristics(simplify)
  };

  emptySeqRightEQ {
    \schemaVar \term Seq seqLeft, seqRight;
    \assumes(seqLen(seqRight)=0 ==>)
    \find (seqConcat(seqLeft, seqRight)) \sameUpdateLevel
    \replacewith(seqLeft)
    \heuristics(simplify)
  };

  emptySeqLeftEQ {
    \schemaVar \term Seq seqLeft, seqRight;
    \assumes(seqLen(seqLeft)=0 ==>)
    \find (seqConcat(seqLeft, seqRight)) \sameUpdateLevel
    \replacewith(seqRight)
    \heuristics(simplify)
  };

  seqSubSingle {
    \schemaVar \term any el;
    \find(seqSub(seqSingleton(el), 0, 1))
    \replacewith(seqSingleton(el))
    \heuristics(simplify)
  };

  seqSingletonEqual {
    \schemaVar \term any el1, el2;
    \find(seqSingleton(el1) = seqSingleton(el2))
    \replacewith(el1 = el2)
    \heuristics(simplify)
  };
}
