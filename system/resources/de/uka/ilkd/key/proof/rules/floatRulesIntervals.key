// This file is part of KeY - Integrated Deductive Software Design
//
// Copyright (C) 2001-2011 Universitaet Karlsruhe (TH), Germany
//                         Universitaet Koblenz-Landau, Germany
//                         Chalmers University of Technology, Sweden
// Copyright (C) 2011-2014 Karlsruhe Institute of Technology, Germany
//                         Technical University Darmstadt, Germany
//                         Chalmers University of Technology, Sweden
//
// The KeY system is protected by the GNU General
// Public License. See LICENSE.TXT for details.
// 


\schemaVariables {
  \term float f1, f2;
  \term double d1, d2;
  \term numbers n1, n2;
}


\rules(programRules:Java, floatRules:intervalAbstractions){
  
  //Conversion of fp predicates to work on point intervals
  fpIntervalLtRight {
     \find(==> javaLtFloat(f1, f2))
     \replacewith(==> interLt(ivMax(FTI(f1)), ivMin(FTI(f2))))
     \heuristics(javaFloatSemantics)
  };

  fpIntervalLtLeft {
     \find(javaLtFloat(f1, f2) ==>)
     \replacewith(interLt(ivMin(FTI(f1)), ivMax(FTI(f2))) ==>)
     \heuristics(javaFloatSemantics)
  };

  fpIntervalLeqRight {
     \find(==> javaLeqFloat(f1, f2))
     \replacewith(==> interLeq(ivMax(FTI(f1)), ivMin(FTI(f2))))
     \heuristics(javaFloatSemantics)
  };

  fpIntervalLeqLeft {
     \find(javaLeqFloat(f1, f2) ==>)
     \replacewith(interLeq(ivMin(FTI(f1)), ivMax(FTI(f2))) ==>)
     \heuristics(javaFloatSemantics)
  };

  fpIntervalGtRight {
     \find(==> javaGtFloat(f1, f2))
     \replacewith(==> interGt(ivMin(FTI(f1)), ivMax(FTI(f2))))
     \heuristics(javaFloatSemantics)
  };

  fpIntervalGtLeft {
     \find(javaGtFloat(f1, f2) ==>)
     \replacewith(interGt(ivMax(FTI(f1)), ivMin(FTI(f2))) ==>)
     \heuristics(javaFloatSemantics)
  };

  fpIntervalGeqRight {
     \find(==> javaGeqFloat(f1, f2))
     \replacewith(==> interGeq(ivMin(FTI(f1)), ivMax(FTI(f2))))
     \heuristics(javaFloatSemantics)
  };

  fpIntervalGeqLeft {
     \find(javaGeqFloat(f1, f2) ==>)
     \replacewith(interGeq(ivMax(FTI(f1)), ivMin(FTI(f2))) ==>)
     \heuristics(javaFloatSemantics)
  };



  //Arithmetic operations

  fpIntervalUnaryMinusMin {
     \find(ivMin(FTI(javaUnaryMinusFloat(f1))))
     \replacewith(javaUnaryMinusFloat(ivMin(FTI(f1))))
     \heuristics(javaFloatSemantics)
  };

  fpIntervalUnaryMinusMax {
     \find(ivMax(FTI(javaUnaryMinusFloat(f1))))
     \replacewith(javaUnaryMinusFloat(ivMax(FTI(f1))))
     \heuristics(javaFloatSemantics)
  };

  fpIntervalAddMin {
     \find(ivMin(FTI(javaAddFloat(f1, f2))))
     \replacewith(addFloatIEEE(RTN,
                               ivMin(FTI(f1)),
                               ivMin(FTI(f2))))
     \heuristics(javaFloatSemantics)
  };

  fpIntervalAddMax {
     \find(ivMax(FTI(javaAddFloat(f1, f2))))
     \replacewith(addFloatIEEE(RTP,
                               ivMax(FTI(f1)),
                               ivMax(FTI(f2))))
     \heuristics(javaFloatSemantics)
  };

  fpIntervalSubMin {
     \find(ivMin(FTI(javaSubFloat(f1, f2))))
     \replacewith(subFloatIEEE(RTN,
                               ivMin(FTI(f1)),
                               ivMax(FTI(f2))))
     \heuristics(javaFloatSemantics)
  };

  fpIntervalSubMax {
     \find(ivMax(FTI(javaSubFloat(f1, f2))))
     \replacewith(subFloatIEEE(RTP,
                               ivMax(FTI(f1)),
                               ivMin(FTI(f2))))
     \heuristics(javaFloatSemantics)
  };

  fpIntervalMulMin {
    \find(ivMin(FTI(javaMulFloat(f1, f2))))
    "min(#f1) * min(#f2)":
      \replacewith(mulFloatIEEE(RTN,  ivMin(FTI(f1)),
                                      ivMin(FTI(f2))))
      \add(interLeq(mulFloatIEEE(RTN, ivMin(FTI(f1)), ivMin(FTI(f1))),
                    mulFloatIEEE(RTN, ivMin(FTI(f1)), ivMax(FTI(f2)))),
          interLeq(mulFloatIEEE(RTN, ivMin(FTI(f1)), ivMin(FTI(f1))),
                    mulFloatIEEE(RTN, ivMax(FTI(f1)), ivMin(FTI(f2)))),
          interLeq(mulFloatIEEE(RTN, ivMin(FTI(f1)), ivMin(FTI(f1))),
                    mulFloatIEEE(RTN, ivMax(FTI(f1)), ivMax(FTI(f2)))) ==>);
    "min(#f1) * max(#f2)":
      \replacewith(mulFloatIEEE(RTN,  ivMin(FTI(f1)),
                                      ivMax(FTI(f2))))
      \add(interLeq(mulFloatIEEE(RTN, ivMin(FTI(f1)), ivMax(FTI(f1))),
                    mulFloatIEEE(RTN, ivMin(FTI(f1)), ivMin(FTI(f2)))),
          interLeq(mulFloatIEEE(RTN, ivMin(FTI(f1)), ivMax(FTI(f1))),
                    mulFloatIEEE(RTN, ivMax(FTI(f1)), ivMin(FTI(f2)))),
          interLeq(mulFloatIEEE(RTN, ivMin(FTI(f1)), ivMax(FTI(f1))),
                    mulFloatIEEE(RTN, ivMax(FTI(f1)), ivMax(FTI(f2)))) ==>);
    "max(#f1) * min(#f2)":
      \replacewith(mulFloatIEEE(RTN,  ivMax(FTI(f1)),
                                      ivMin(FTI(f2))))
      \add(interLeq(mulFloatIEEE(RTN, ivMax(FTI(f1)), ivMin(FTI(f1))),
                    mulFloatIEEE(RTN, ivMin(FTI(f1)), ivMin(FTI(f2)))),
          interLeq(mulFloatIEEE(RTN, ivMax(FTI(f1)), ivMin(FTI(f1))),
                    mulFloatIEEE(RTN, ivMin(FTI(f1)), ivMax(FTI(f2)))),
          interLeq(mulFloatIEEE(RTN, ivMax(FTI(f1)), ivMin(FTI(f1))),
                    mulFloatIEEE(RTN, ivMax(FTI(f1)), ivMax(FTI(f2)))) ==>);
    "max(#f1) * max(#f2)":
      \replacewith(mulFloatIEEE(RTN,  ivMax(FTI(f1)),
                                      ivMax(FTI(f2))))
      \add(interLeq(mulFloatIEEE(RTN, ivMax(FTI(f1)), ivMax(FTI(f1))),
                    mulFloatIEEE(RTN, ivMin(FTI(f1)), ivMin(FTI(f2)))),
          interLeq(mulFloatIEEE(RTN, ivMax(FTI(f1)), ivMax(FTI(f1))),
                    mulFloatIEEE(RTN, ivMin(FTI(f1)), ivMax(FTI(f2)))),
          interLeq(mulFloatIEEE(RTN, ivMax(FTI(f1)), ivMax(FTI(f1))),
                    mulFloatIEEE(RTN, ivMax(FTI(f1)), ivMin(FTI(f2)))) ==>)
     \heuristics(javaFloatSemantics)
  };

  fpIntervalMulMax {
    \find(ivMax(FTI(javaMulFloat(f1, f2))))
    "min(#f1) * min(#f2)":
      \replacewith(mulFloatIEEE(RTP,  ivMin(FTI(f1)),
                                      ivMin(FTI(f2))))
      \add(interGeq(mulFloatIEEE(RTP, ivMin(FTI(f1)), ivMin(FTI(f1))),
                    mulFloatIEEE(RTP, ivMin(FTI(f1)), ivMax(FTI(f2)))),
          interGeq(mulFloatIEEE(RTP, ivMin(FTI(f1)), ivMin(FTI(f1))),
                    mulFloatIEEE(RTP, ivMax(FTI(f1)), ivMin(FTI(f2)))),
          interGeq(mulFloatIEEE(RTP, ivMin(FTI(f1)), ivMin(FTI(f1))),
                    mulFloatIEEE(RTP, ivMax(FTI(f1)), ivMax(FTI(f2)))) ==>);
    "min(#f1) * max(#f2)":
      \replacewith(mulFloatIEEE(RTP,  ivMin(FTI(f1)),
                                      ivMax(FTI(f2))))
      \add(interGeq(mulFloatIEEE(RTP, ivMin(FTI(f1)), ivMax(FTI(f1))),
                    mulFloatIEEE(RTP, ivMin(FTI(f1)), ivMin(FTI(f2)))),
          interGeq(mulFloatIEEE(RTP, ivMin(FTI(f1)), ivMax(FTI(f1))),
                    mulFloatIEEE(RTP, ivMax(FTI(f1)), ivMin(FTI(f2)))),
          interGeq(mulFloatIEEE(RTP, ivMin(FTI(f1)), ivMax(FTI(f1))),
                    mulFloatIEEE(RTP, ivMax(FTI(f1)), ivMax(FTI(f2)))) ==>);
    "max(#f1) * min(#f2)":
      \replacewith(mulFloatIEEE(RTP,  ivMax(FTI(f1)),
                                      ivMin(FTI(f2))))
      \add(interGeq(mulFloatIEEE(RTP, ivMax(FTI(f1)), ivMin(FTI(f1))),
                    mulFloatIEEE(RTP, ivMin(FTI(f1)), ivMin(FTI(f2)))),
          interGeq(mulFloatIEEE(RTP, ivMax(FTI(f1)), ivMin(FTI(f1))),
                    mulFloatIEEE(RTP, ivMin(FTI(f1)), ivMax(FTI(f2)))),
          interGeq(mulFloatIEEE(RTP, ivMax(FTI(f1)), ivMin(FTI(f1))),
                    mulFloatIEEE(RTP, ivMax(FTI(f1)), ivMax(FTI(f2)))) ==>);
    "max(#f1) * max(#f2)":
      \replacewith(mulFloatIEEE(RTP,  ivMax(FTI(f1)),
                                      ivMax(FTI(f2))))
      \add(interGeq(mulFloatIEEE(RTP, ivMax(FTI(f1)), ivMax(FTI(f1))),
                    mulFloatIEEE(RTP, ivMin(FTI(f1)), ivMin(FTI(f2)))),
          interGeq(mulFloatIEEE(RTP, ivMax(FTI(f1)), ivMax(FTI(f1))),
                    mulFloatIEEE(RTP, ivMin(FTI(f1)), ivMax(FTI(f2)))),
          interGeq(mulFloatIEEE(RTP, ivMax(FTI(f1)), ivMax(FTI(f1))),
                    mulFloatIEEE(RTP, ivMax(FTI(f1)), ivMin(FTI(f2)))) ==>)
     \heuristics(javaFloatSemantics)
  };

  //Literals are point intervals
  fpIntervalLiteralMin {
     \find(ivMin(FTI(FP(n1, n2))))
     \replacewith(FP(n1, n2))
     \heuristics(javaFloatSemantics)
  };

  fpIntervalLiteralMax {
     \find(ivMax(FTI(FP(n1, n2))))
     \replacewith(FP(n1, n2))
     \heuristics(javaFloatSemantics)
  };











  //
  //
  // Rules for double-precision intervals below
  //
  //

  fpIntervalLtRight2 {
     \find(==> javaLtDouble(d1, d2))
     \replacewith(==> interLtD(ivMaxD(DTI(d1)), ivMinD(DTI(d2))))
     \heuristics(javaFloatSemantics)
  };

  fpIntervalLtLeft2 {
     \find(javaLtDouble(d1, d2) ==>)
     \replacewith(interLtD(ivMinD(DTI(d1)), ivMaxD(DTI(d2))) ==>)
     \heuristics(javaFloatSemantics)
  };

  fpIntervalLeqRight2 {
     \find(==> javaLeqDouble(d1, d2))
     \replacewith(==> interLeqD(ivMaxD(DTI(d1)), ivMinD(DTI(d2))))
     \heuristics(javaFloatSemantics)
  };

  fpIntervalLeqLeft2 {
     \find(javaLeqDouble(d1, d2) ==>)
     \replacewith(interLeqD(ivMinD(DTI(d1)), ivMaxD(DTI(d2))) ==>)
     \heuristics(javaFloatSemantics)
  };

  fpIntervalGtRight2 {
     \find(==> javaGtDouble(d1, d2))
     \replacewith(==> interGtD(ivMinD(DTI(d1)), ivMaxD(DTI(d2))))
     \heuristics(javaFloatSemantics)
  };

  fpIntervalGtLeft2 {
     \find(javaGtDouble(d1, d2) ==>)
     \replacewith(interGtD(ivMaxD(DTI(d1)), ivMinD(DTI(d2))) ==>)
     \heuristics(javaFloatSemantics)
  };

  fpIntervalGeqRight2 {
     \find(==> javaGeqDouble(d1, d2))
     \replacewith(==> interGeqD(ivMinD(DTI(d1)), ivMaxD(DTI(d2))))
     \heuristics(javaFloatSemantics)
  };

  fpIntervalGeqLeft2 {
     \find(javaGeqDouble(d1, d2) ==>)
     \replacewith(interGeqD(ivMaxD(DTI(d1)), ivMinD(DTI(d2))) ==>)
     \heuristics(javaFloatSemantics)
  };

  //Arithmetic operations

  fpIntervalAbsMin2 {
     \find(ivMinD(DTI(doubleAbs(d1))))
     \replacewith(doubleAbs(ivMinD(DTI(d1))))
     \heuristics(javaFloatSemantics)
  };

  fpIntervalAbsMax2 {
     \find(ivMaxD(DTI(doubleAbs(d1))))
     \replacewith(doubleAbs(ivMaxD(DTI(d1))))
     \heuristics(javaFloatSemantics)
  };


  fpIntervalLiteralMin2 {
     \find(ivMinD(DTI(DFP(n1, n2))))
     \replacewith(DFP(n1, n2))
     \heuristics(javaFloatSemantics)
  };

  fpIntervalLiteralMax2 {
     \find(ivMaxD(DTI(DFP(n1, n2))))
     \replacewith(DFP(n1, n2))
     \heuristics(javaFloatSemantics)
  };




  fpIntervalAddMin2 {
     \find(ivMinD(DTI(javaAddDouble(d1, d2))))
     \replacewith(addDoubleIEEE(RTN,
                               ivMinD(DTI(d1)),
                               ivMinD(DTI(d2))))
     \heuristics(javaFloatSemantics)
  };

  fpIntervalAddMax2 {
     \find(ivMaxD(DTI(javaAddDouble(d1, d2))))
     \replacewith(addDoubleIEEE(RTP,
                               ivMaxD(DTI(d1)),
                               ivMaxD(DTI(d2))))
     \heuristics(javaFloatSemantics)
  };

  fpIntervalSubMin2 {
     \find(ivMinD(DTI(javaSubDouble(d1, d2))))
     \replacewith(subDoubleIEEE(RTN,
                               ivMinD(DTI(d1)),
                               ivMaxD(DTI(d2))))
     \heuristics(javaFloatSemantics)
  };

  fpIntervalSubMax2 {
     \find(ivMaxD(DTI(javaSubDouble(d1, d2))))
     \replacewith(subDoubleIEEE(RTP,
                               ivMaxD(DTI(d1)),
                               ivMinD(DTI(d2))))
     \heuristics(javaFloatSemantics)
  };



  fpIntervalMulMinD {
    \find(ivMinD(DTI(javaMulDouble(d1, d2))))
    "min(#d1) * min(#d2)":
      \replacewith(mulDoubleIEEE(RTN,  ivMinD(DTI(d1)),
                                      ivMinD(DTI(d2))))
      \add(interLeqD(mulDoubleIEEE(RTN, ivMinD(DTI(d1)), ivMinD(DTI(d2))),
                    mulDoubleIEEE(RTN, ivMinD(DTI(d1)), ivMaxD(DTI(d2)))),
          interLeqD(mulDoubleIEEE(RTN, ivMinD(DTI(d1)), ivMinD(DTI(d2))),
                    mulDoubleIEEE(RTN, ivMaxD(DTI(d1)), ivMinD(DTI(d2)))),
          interLeqD(mulDoubleIEEE(RTN, ivMinD(DTI(d1)), ivMinD(DTI(d2))),
                    mulDoubleIEEE(RTN, ivMaxD(DTI(d1)), ivMaxD(DTI(d2)))) ==>);
    "min(#d1) * max(#d2)":
      \replacewith(mulDoubleIEEE(RTN,  ivMinD(DTI(d1)),
                                      ivMaxD(DTI(d2))))
      \add(interLeqD(mulDoubleIEEE(RTN, ivMinD(DTI(d1)), ivMaxD(DTI(d2))),
                    mulDoubleIEEE(RTN, ivMinD(DTI(d1)), ivMinD(DTI(d2)))),
          interLeqD(mulDoubleIEEE(RTN, ivMinD(DTI(d1)), ivMaxD(DTI(d2))),
                    mulDoubleIEEE(RTN, ivMaxD(DTI(d1)), ivMinD(DTI(d2)))),
          interLeqD(mulDoubleIEEE(RTN, ivMinD(DTI(d1)), ivMaxD(DTI(d2))),
                    mulDoubleIEEE(RTN, ivMaxD(DTI(d1)), ivMaxD(DTI(d2)))) ==>);
    "max(#d1) * min(#d2)":
      \replacewith(mulDoubleIEEE(RTN,  ivMaxD(DTI(d1)),
                                      ivMinD(DTI(d2))))
      \add(interLeqD(mulDoubleIEEE(RTN, ivMaxD(DTI(d1)), ivMinD(DTI(d2))),
                    mulDoubleIEEE(RTN, ivMinD(DTI(d1)), ivMinD(DTI(d2)))),
          interLeqD(mulDoubleIEEE(RTN, ivMaxD(DTI(d1)), ivMinD(DTI(d2))),
                    mulDoubleIEEE(RTN, ivMinD(DTI(d1)), ivMaxD(DTI(d2)))),
          interLeqD(mulDoubleIEEE(RTN, ivMaxD(DTI(d1)), ivMinD(DTI(d2))),
                    mulDoubleIEEE(RTN, ivMaxD(DTI(d1)), ivMaxD(DTI(d2)))) ==>);
    "max(#d1) * max(#d2)":
      \replacewith(mulDoubleIEEE(RTN,  ivMaxD(DTI(d1)),
                                      ivMaxD(DTI(d2))))
      \add(interLeqD(mulDoubleIEEE(RTN, ivMaxD(DTI(d1)), ivMaxD(DTI(d2))),
                    mulDoubleIEEE(RTN, ivMinD(DTI(d1)), ivMinD(DTI(d2)))),
          interLeqD(mulDoubleIEEE(RTN, ivMaxD(DTI(d1)), ivMaxD(DTI(d2))),
                    mulDoubleIEEE(RTN, ivMinD(DTI(d1)), ivMaxD(DTI(d2)))),
          interLeqD(mulDoubleIEEE(RTN, ivMaxD(DTI(d1)), ivMaxD(DTI(d2))),
                    mulDoubleIEEE(RTN, ivMaxD(DTI(d1)), ivMinD(DTI(d2)))) ==>)
     \heuristics(javaFloatSemantics)
  };

  fpIntervalMulMaxD {
    \find(ivMaxD(DTI(javaMulDouble(d1, d2))))
    "min(#d1) * min(#d2)":
      \replacewith(mulDoubleIEEE(RTP,  ivMinD(DTI(d1)),
                                      ivMinD(DTI(d2))))
      \add(interGeqD(mulDoubleIEEE(RTP, ivMinD(DTI(d1)), ivMinD(DTI(d2))),
                    mulDoubleIEEE(RTP, ivMinD(DTI(d1)), ivMaxD(DTI(d2)))),
          interGeqD(mulDoubleIEEE(RTP, ivMinD(DTI(d1)), ivMinD(DTI(d2))),
                    mulDoubleIEEE(RTP, ivMaxD(DTI(d1)), ivMinD(DTI(d2)))),
          interGeqD(mulDoubleIEEE(RTP, ivMinD(DTI(d1)), ivMinD(DTI(d2))),
                    mulDoubleIEEE(RTP, ivMaxD(DTI(d1)), ivMaxD(DTI(d2)))) ==>);
    "min(#d1) * max(#d2)":
      \replacewith(mulDoubleIEEE(RTP,  ivMinD(DTI(d1)),
                                      ivMaxD(DTI(d2))))
      \add(interGeqD(mulDoubleIEEE(RTP, ivMinD(DTI(d1)), ivMaxD(DTI(d2))),
                    mulDoubleIEEE(RTP, ivMinD(DTI(d1)), ivMinD(DTI(d2)))),
          interGeqD(mulDoubleIEEE(RTP, ivMinD(DTI(d1)), ivMaxD(DTI(d2))),
                    mulDoubleIEEE(RTP, ivMaxD(DTI(d1)), ivMinD(DTI(d2)))),
          interGeqD(mulDoubleIEEE(RTP, ivMinD(DTI(d1)), ivMaxD(DTI(d2))),
                    mulDoubleIEEE(RTP, ivMaxD(DTI(d1)), ivMaxD(DTI(d2)))) ==>);
    "max(#d1) * min(#d2)":
      \replacewith(mulDoubleIEEE(RTP,  ivMaxD(DTI(d1)),
                                      ivMinD(DTI(d2))))
      \add(interGeqD(mulDoubleIEEE(RTP, ivMaxD(DTI(d1)), ivMinD(DTI(d2))),
                    mulDoubleIEEE(RTP, ivMinD(DTI(d1)), ivMinD(DTI(d2)))),
          interGeqD(mulDoubleIEEE(RTP, ivMaxD(DTI(d1)), ivMinD(DTI(d2))),
                    mulDoubleIEEE(RTP, ivMinD(DTI(d1)), ivMaxD(DTI(d2)))),
          interGeqD(mulDoubleIEEE(RTP, ivMaxD(DTI(d1)), ivMinD(DTI(d2))),
                    mulDoubleIEEE(RTP, ivMaxD(DTI(d1)), ivMaxD(DTI(d2)))) ==>);
    "max(#d1) * max(#d2)":
      \replacewith(mulDoubleIEEE(RTP,  ivMaxD(DTI(d1)),
                                      ivMaxD(DTI(d2))))
      \add(interGeqD(mulDoubleIEEE(RTP, ivMaxD(DTI(d1)), ivMaxD(DTI(d2))),
                    mulDoubleIEEE(RTP, ivMinD(DTI(d1)), ivMinD(DTI(d2)))),
          interGeqD(mulDoubleIEEE(RTP, ivMaxD(DTI(d1)), ivMaxD(DTI(d2))),
                    mulDoubleIEEE(RTP, ivMinD(DTI(d1)), ivMaxD(DTI(d2)))),
          interGeqD(mulDoubleIEEE(RTP, ivMaxD(DTI(d1)), ivMaxD(DTI(d2))),
                    mulDoubleIEEE(RTP, ivMaxD(DTI(d1)), ivMinD(DTI(d2)))) ==>)
     \heuristics(javaFloatSemantics)
  };
}

