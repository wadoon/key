// This file is part of KeY - Integrated Deductive Software Design
//
// Copyright (C) 2001-2011 Universitaet Karlsruhe (TH), Germany
//                         Universitaet Koblenz-Landau, Germany
//                         Chalmers University of Technology, Sweden
// Copyright (C) 2011-2014 Karlsruhe Institute of Technology, Germany
//                         Technical University Darmstadt, Germany
//                         Chalmers University of Technology, Sweden
//
// The KeY system is protected by the GNU General
// Public License. See LICENSE.TXT for details.
// 


\schemaVariables {
  \term float f1, f2;
  \term numbers n1, n2;
  \program Variable #loc ;
}


\rules(programRules:Java, floatRules:intervalAbstractions){
  
  //Conversion of fp predicates to work on point intervals
  fpIntervalLtRight {
     \find(==> javaLtFloat(f1, f2))
     \replacewith(==> interLt(ivMax(FTI(f1)), ivMin(FTI(f2))))
     \heuristics(javaFloatSemantics)
  };

  fpIntervalLtLeft {
     \find(javaLtFloat(f1, f2) ==>)
     \replacewith(interLt(ivMin(FTI(f1)), ivMax(FTI(f2))) ==>)
     \heuristics(javaFloatSemantics)
  };

  fpIntervalLeqRight {
     \find(==> javaLeqFloat(f1, f2))
     \replacewith(==> interLeq(ivMax(FTI(f1)), ivMin(FTI(f2))))
     \heuristics(javaFloatSemantics)
  };

  fpIntervalLeqLeft {
     \find(javaLeqFloat(f1, f2) ==>)
     \replacewith(interLeq(ivMin(FTI(f1)), ivMax(FTI(f2))) ==>)
     \heuristics(javaFloatSemantics)
  };

  fpIntervalGtRight {
     \find(==> javaGtFloat(f1, f2))
     \replacewith(==> interGt(ivMin(FTI(f1)), ivMax(FTI(f2))))
     \heuristics(javaFloatSemantics)
  };

  fpIntervalGtLeft {
     \find(javaGtFloat(f1, f2) ==>)
     \replacewith(interGt(ivMax(FTI(f1)), ivMin(FTI(f2))) ==>)
     \heuristics(javaFloatSemantics)
  };

  fpIntervalGeqRight {
     \find(==> javaGeqFloat(f1, f2))
     \replacewith(==> interGeq(ivMin(FTI(f1)), ivMax(FTI(f2))))
     \heuristics(javaFloatSemantics)
  };

  fpIntervalGeqLeft {
     \find(javaGeqFloat(f1, f2) ==>)
     \replacewith(interGeq(ivMax(FTI(f1)), ivMin(FTI(f2))) ==>)
     \heuristics(javaFloatSemantics)
  };


  //Arithmetic operations

  fpIntervalUnaryMinusMin {
     \find(ivMin(FTI(javaUnaryMinusFloat(f1))))
     \replacewith(javaUnaryMinusFloat(ivMin(FTI(f1))))
     \heuristics(javaFloatSemantics)
  };

  fpIntervalUnaryMinusMax {
     \find(ivMax(FTI(javaUnaryMinusFloat(f1))))
     \replacewith(javaUnaryMinusFloat(ivMax(FTI(f1))))
     \heuristics(javaFloatSemantics)
  };

  fpIntervalAddMin {
     \find(ivMin(FTI(javaAddFloat(f1, f2))))
     \replacewith(addFloatIEEE(RTN,
                               ivMin(FTI(f1)),
                               ivMin(FTI(f2))))
     \heuristics(javaFloatSemantics)
  };

  fpIntervalAddMax {
     \find(ivMax(FTI(javaAddFloat(f1, f2))))
     \replacewith(addFloatIEEE(RTP,
                               ivMax(FTI(f1)),
                               ivMax(FTI(f2))))
     \heuristics(javaFloatSemantics)
  };

  fpIntervalSubMin {
     \find(ivMin(FTI(javaSubFloat(f1, f2))))
     \replacewith(subFloatIEEE(RTN,
                               ivMin(FTI(f1)),
                               ivMax(FTI(f2))))
     \heuristics(javaFloatSemantics)
  };

  fpIntervalSubMax {
     \find(ivMax(FTI(javaSubFloat(f1, f2))))
     \replacewith(subFloatIEEE(RTP,
                               ivMax(FTI(f1)),
                               ivMin(FTI(f2))))
     \heuristics(javaFloatSemantics)
  };

  fpIntervalMulMin {
    \find(ivMin(FTI(javaMulFloat(f1, f2))))
    "min(#f1) * min(#f2)":
      \replacewith(mulFloatIEEE(RTN,  ivMin(FTI(f1)),
                                      ivMin(FTI(f2))))
      \add(interLeq(mulFloatIEEE(RTN, ivMin(FTI(f1)), ivMin(FTI(f1))),
                    mulFloatIEEE(RTN, ivMin(FTI(f1)), ivMax(FTI(f2)))),
          interLeq(mulFloatIEEE(RTN, ivMin(FTI(f1)), ivMin(FTI(f1))),
                    mulFloatIEEE(RTN, ivMax(FTI(f1)), ivMin(FTI(f2)))),
          interLeq(mulFloatIEEE(RTN, ivMin(FTI(f1)), ivMin(FTI(f1))),
                    mulFloatIEEE(RTN, ivMax(FTI(f1)), ivMax(FTI(f2)))) ==>);
    "min(#f1) * max(#f2)":
      \replacewith(mulFloatIEEE(RTN,  ivMin(FTI(f1)),
                                      ivMax(FTI(f2))))
      \add(interLeq(mulFloatIEEE(RTN, ivMin(FTI(f1)), ivMax(FTI(f1))),
                    mulFloatIEEE(RTN, ivMin(FTI(f1)), ivMin(FTI(f2)))),
          interLeq(mulFloatIEEE(RTN, ivMin(FTI(f1)), ivMax(FTI(f1))),
                    mulFloatIEEE(RTN, ivMax(FTI(f1)), ivMin(FTI(f2)))),
          interLeq(mulFloatIEEE(RTN, ivMin(FTI(f1)), ivMax(FTI(f1))),
                    mulFloatIEEE(RTN, ivMax(FTI(f1)), ivMax(FTI(f2)))) ==>);
    "max(#f1) * min(#f2)":
      \replacewith(mulFloatIEEE(RTN,  ivMax(FTI(f1)),
                                      ivMin(FTI(f2))))
      \add(interLeq(mulFloatIEEE(RTN, ivMax(FTI(f1)), ivMin(FTI(f1))),
                    mulFloatIEEE(RTN, ivMin(FTI(f1)), ivMin(FTI(f2)))),
          interLeq(mulFloatIEEE(RTN, ivMax(FTI(f1)), ivMin(FTI(f1))),
                    mulFloatIEEE(RTN, ivMin(FTI(f1)), ivMax(FTI(f2)))),
          interLeq(mulFloatIEEE(RTN, ivMax(FTI(f1)), ivMin(FTI(f1))),
                    mulFloatIEEE(RTN, ivMax(FTI(f1)), ivMax(FTI(f2)))) ==>);
    "max(#f1) * max(#f2)":
      \replacewith(mulFloatIEEE(RTN,  ivMax(FTI(f1)),
                                      ivMax(FTI(f2))))
      \add(interLeq(mulFloatIEEE(RTN, ivMax(FTI(f1)), ivMax(FTI(f1))),
                    mulFloatIEEE(RTN, ivMin(FTI(f1)), ivMin(FTI(f2)))),
          interLeq(mulFloatIEEE(RTN, ivMax(FTI(f1)), ivMax(FTI(f1))),
                    mulFloatIEEE(RTN, ivMin(FTI(f1)), ivMax(FTI(f2)))),
          interLeq(mulFloatIEEE(RTN, ivMax(FTI(f1)), ivMax(FTI(f1))),
                    mulFloatIEEE(RTN, ivMax(FTI(f1)), ivMin(FTI(f2)))) ==>)
     \heuristics(javaFloatSemantics)
  };

  fpIntervalMulMax {
    \find(ivMax(FTI(javaMulFloat(f1, f2))))
    "min(#f1) * min(#f2)":
      \replacewith(mulFloatIEEE(RTP,  ivMin(FTI(f1)),
                                      ivMin(FTI(f2))))
      \add(interGeq(mulFloatIEEE(RTP, ivMin(FTI(f1)), ivMin(FTI(f1))),
                    mulFloatIEEE(RTP, ivMin(FTI(f1)), ivMax(FTI(f2)))),
          interGeq(mulFloatIEEE(RTP, ivMin(FTI(f1)), ivMin(FTI(f1))),
                    mulFloatIEEE(RTP, ivMax(FTI(f1)), ivMin(FTI(f2)))),
          interGeq(mulFloatIEEE(RTP, ivMin(FTI(f1)), ivMin(FTI(f1))),
                    mulFloatIEEE(RTP, ivMax(FTI(f1)), ivMax(FTI(f2)))) ==>);
    "min(#f1) * max(#f2)":
      \replacewith(mulFloatIEEE(RTP,  ivMin(FTI(f1)),
                                      ivMax(FTI(f2))))
      \add(interGeq(mulFloatIEEE(RTP, ivMin(FTI(f1)), ivMax(FTI(f1))),
                    mulFloatIEEE(RTP, ivMin(FTI(f1)), ivMin(FTI(f2)))),
          interGeq(mulFloatIEEE(RTP, ivMin(FTI(f1)), ivMax(FTI(f1))),
                    mulFloatIEEE(RTP, ivMax(FTI(f1)), ivMin(FTI(f2)))),
          interGeq(mulFloatIEEE(RTP, ivMin(FTI(f1)), ivMax(FTI(f1))),
                    mulFloatIEEE(RTP, ivMax(FTI(f1)), ivMax(FTI(f2)))) ==>);
    "max(#f1) * min(#f2)":
      \replacewith(mulFloatIEEE(RTP,  ivMax(FTI(f1)),
                                      ivMin(FTI(f2))))
      \add(interGeq(mulFloatIEEE(RTP, ivMax(FTI(f1)), ivMin(FTI(f1))),
                    mulFloatIEEE(RTP, ivMin(FTI(f1)), ivMin(FTI(f2)))),
          interGeq(mulFloatIEEE(RTP, ivMax(FTI(f1)), ivMin(FTI(f1))),
                    mulFloatIEEE(RTP, ivMin(FTI(f1)), ivMax(FTI(f2)))),
          interGeq(mulFloatIEEE(RTP, ivMax(FTI(f1)), ivMin(FTI(f1))),
                    mulFloatIEEE(RTP, ivMax(FTI(f1)), ivMax(FTI(f2)))) ==>);
    "max(#f1) * max(#f2)":
      \replacewith(mulFloatIEEE(RTP,  ivMax(FTI(f1)),
                                      ivMax(FTI(f2))))
      \add(interGeq(mulFloatIEEE(RTP, ivMax(FTI(f1)), ivMax(FTI(f1))),
                    mulFloatIEEE(RTP, ivMin(FTI(f1)), ivMin(FTI(f2)))),
          interGeq(mulFloatIEEE(RTP, ivMax(FTI(f1)), ivMax(FTI(f1))),
                    mulFloatIEEE(RTP, ivMin(FTI(f1)), ivMax(FTI(f2)))),
          interGeq(mulFloatIEEE(RTP, ivMax(FTI(f1)), ivMax(FTI(f1))),
                    mulFloatIEEE(RTP, ivMax(FTI(f1)), ivMin(FTI(f2)))) ==>)
     \heuristics(javaFloatSemantics)
  };

  //Literals are point intervals
  fpIntervalLiteralMin {
     \find(ivMin(FTI(FP(n1, n2))))
     \replacewith(FP(n1, n2))
     \heuristics(javaFloatSemantics)
  };

  fpIntervalLiteralMax {
     \find(ivMax(FTI(FP(n1, n2))))
     \replacewith(FP(n1, n2))
     \heuristics(javaFloatSemantics)
  };

//  fpIntervalVariableMin {
//     \find(ivMin(FTI(#loc)))
//     \replacewith(#loc)
//     \heuristics(javaFloatSemantics)
//  };
//
//  fpIntervalVariableMax {
//     \find(ivMax(FTI(#loc)))
//     \replacewith(#loc)
//     \heuristics(javaFloatSemantics)
//  };




















}

