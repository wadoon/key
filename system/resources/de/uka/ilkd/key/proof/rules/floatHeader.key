// This file is part of KeY - Integrated Deductive Software Design 
//
// Copyright (C) 2001-2011 Universitaet Karlsruhe (TH), Germany 
//                         Universitaet Koblenz-Landau, Germany
//                         Chalmers University of Technology, Sweden
// Copyright (C) 2011-2014 Karlsruhe Institute of Technology, Germany 
//                         Technical University Darmstadt, Germany
//                         Chalmers University of Technology, Sweden
//
// The KeY system is protected by the GNU General 
// Public License. See LICENSE.TXT for details.
// 

\sorts{

  fp;
  float \extends fp;
  double \extends fp;

  fpRoundingMode;
}

\functions
{
  //Float literals, represented as the integer with the
  //same binary representation as the float literal
  //(second number is currently always 0)
  //TODO: add information about the precision here,
  //or in the sort itself?
  float FP(numbers, numbers);

  //Arithmetic operations transformed differently depending on chosen semantics
  float javaUnaryMinusFloat(float);
  float javaAddFloat(float, float);
  float javaSubFloat(float, float);
  float javaMulFloat(float, float);
  float javaDivFloat(float, float);
  float javaModFloat(float, float);
  float javaMinFloat(float, float);
  float javaMaxFloat(float, float);

  //Operations indicating forbidden float values (e.g. NaN or overflow/underflow)
  float javaAddFloatForbiddenResult(float, float);
  float javaSubFloatForbiddenResult(float, float);
  float javaMulFloatForbiddenResult(float, float);
  float javaDivFloatForbiddenResult(float, float);

  //Floating-point arithmetic with IEEE 754 semantics
  float addFloatIEEE(fpRoundingMode, float, float);
  float subFloatIEEE(fpRoundingMode, float, float);
  float mulFloatIEEE(fpRoundingMode, float, float);
  float divFloatIEEE(fpRoundingMode, float, float);

  float floatAbs(float);

  float castLongToFloat(int);
  
  int castFloatToLong(float);

  //Floating-point rounding modes
  //For java arithmetic, RNE is used
  fpRoundingMode RNE;
  fpRoundingMode RNA;
  fpRoundingMode RTP;
  fpRoundingMode RTN;
  fpRoundingMode RTZ;
}

\predicates
{
  javaLtFloat(float, float);
  javaGtFloat(float, float);
  javaLeqFloat(float, float);
  javaGeqFloat(float, float);
  javaEqFloat(float, float);

  floatIsNaN(float);
  floatIsZero(float);
  floatIsNormal(float);
  floatIsSubnormal(float);
  floatIsInfinite(float);
  floatIsPositive(float);
  floatIsNegative(float);
}
