/** This is a test driver generated by KeY 2.7 (internal: 90bb886cd7b78027c8f6703803461f09e5699bb9) (www.key-project.org). 
 * Possible use cases:
 *  Use Case 1. Using JUnit 4:
 *        javac -cp .:PATH_TO_JUNIT4_JAR *.java
 *        java  -cp .:PATH_TO_JUNIT4_JAR:PATH_TO_HAMCREST_JAR org.junit.runner.JUnitCore GenTest
 *  Use Case 2. Use JML runtime checker: 
 *      Compile this file and and execute the main method with a JML runtime checker. On linux you can use the built-in scripts:
 *        ./compileWithOpenJML.sh
 *        ./executeWithOpenJML.sh GenTest
 *  Use Case 3. Use simply a program debugger to follow and understand the execution of the program.
 * @author Christoph Gladisch
 * @author Mihai Herda
 */
package gentest;

import dynacode.DynaCode;
import geninstrument.GenInstrumentHelper;
import geninstrument.IGenInstrument;
import helperfunctions.HelperFunctions;
import java.util.ArrayList;
import java.util.HashMap;

public class GenTest implements IGenTest {
	private static HashMap<String, ArrayList<Integer>> varTraces = new HashMap<String, ArrayList<Integer>>();
	IGenInstrument genInstrument = GenInstrumentHelper.getGenInstrument();

	public GenTest() {
	}

	public HashMap<String, ArrayList<Integer>> callGenTest() {
		GenTest testSuiteObject;
		testSuiteObject = new GenTest();

		testSuiteObject.testcode0();
		testSuiteObject.testcode1();
		testSuiteObject.testcode2();
		testSuiteObject.testcode3();
		testSuiteObject.testcode4();
		testSuiteObject.testcode5();
		return varTraces;
	}

	// Test Case for NodeNr: 3865
	public void testcode0() {
		// Test preamble: creating objects and intializing test data
		int r_0 = (int) 0;
		boolean measuredByEmpty = (boolean) true;
		int i_0 = (int) 0;
		int n = (int) 32;

		// Other variables

		/* @ nullable */ java.lang.Throwable exc = null;
		/* @ nullable */ int result = 0;
		// Calling the method under test
		ArrayList<Integer> inputVars = new ArrayList<Integer>();
		inputVars.add(n);
		inputVars.add(i_0);
		inputVars.add(r_0);
		HashMap<String, ArrayList<Integer>> traces = genInstrument.callGenInstrument(inputVars);
		varTraces = HelperFunctions.mergeMapsKeyWise(varTraces, traces);
	}

	// Test Case for NodeNr: 3865
	public void testcode1() {
		// Test preamble: creating objects and intializing test data
		int r_0 = (int) 30;
		boolean measuredByEmpty = (boolean) true;
		int i_0 = (int) 3;
		int n = (int) 10;

		// Other variables

		/* @ nullable */ java.lang.Throwable exc = null;
		/* @ nullable */ int result = 0;
		// Calling the method under test
		ArrayList<Integer> inputVars = new ArrayList<Integer>();
		inputVars.add(n);
		inputVars.add(i_0);
		inputVars.add(r_0);
		HashMap<String, ArrayList<Integer>> traces = genInstrument.callGenInstrument(inputVars);
		varTraces = HelperFunctions.mergeMapsKeyWise(varTraces, traces);
	}

//Test Case for NodeNr: 3865
	public void testcode2() {
		// Test preamble: creating objects and intializing test data
		int r_0 = (int) 8;
		boolean measuredByEmpty = (boolean) true;
		int i_0 = (int) 2;
		int n = (int) 4;

		// Other variables

		/* @ nullable */ java.lang.Throwable exc = null;
		/* @ nullable */ int result = 0;
		// Calling the method under test
		ArrayList<Integer> inputVars = new ArrayList<Integer>();
		inputVars.add(n);
		inputVars.add(i_0);
		inputVars.add(r_0);
		HashMap<String, ArrayList<Integer>> traces = genInstrument.callGenInstrument(inputVars);
		varTraces = HelperFunctions.mergeMapsKeyWise(varTraces, traces);
	}

//Test Case for NodeNr: 3865
	public void testcode3() {
//Test preamble: creating objects and intializing test data
		int r_0 = (int) 22;
		boolean measuredByEmpty = (boolean) true;
		int i_0 = (int) 1;
		int n = (int) 22;

//Other variables

		/* @ nullable */ java.lang.Throwable exc = null;
		/* @ nullable */ int result = 0;
//Calling the method under test   
		ArrayList<Integer> inputVars = new ArrayList<Integer>();
		inputVars.add(n);
		inputVars.add(i_0);
		inputVars.add(r_0);
		HashMap<String, ArrayList<Integer>> traces = genInstrument.callGenInstrument(inputVars);
		varTraces = HelperFunctions.mergeMapsKeyWise(varTraces, traces);
	}

//Test Case for NodeNr: 3865
	public void testcode4() {
//Test preamble: creating objects and intializing test data
		int r_0 = (int) 182;
		boolean measuredByEmpty = (boolean) true;
		int i_0 = (int) 13;
		int n = (int) 14;

//Other variables

		/* @ nullable */ java.lang.Throwable exc = null;
		/* @ nullable */ int result = 0;
//Calling the method under test   
		ArrayList<Integer> inputVars = new ArrayList<Integer>();
		inputVars.add(n);
		inputVars.add(i_0);
		inputVars.add(r_0);
		HashMap<String, ArrayList<Integer>> traces = genInstrument.callGenInstrument(inputVars);
		varTraces = HelperFunctions.mergeMapsKeyWise(varTraces, traces);
	}
	
	
	public void testcode5() {
	//Test preamble: creating objects and intializing test data
			int r_0 = (int) 245;
			boolean measuredByEmpty = (boolean) true;
			int i_0 = (int) 5;
			int n = (int) 49;

	//Other variables

			/* @ nullable */ java.lang.Throwable exc = null;
			/* @ nullable */ int result = 0;
	//Calling the method under test   
			ArrayList<Integer> inputVars = new ArrayList<Integer>();
			inputVars.add(n);
			inputVars.add(i_0);
			inputVars.add(r_0);
			HashMap<String, ArrayList<Integer>> traces = genInstrument.callGenInstrument(inputVars);
			varTraces = HelperFunctions.mergeMapsKeyWise(varTraces, traces);
		}

}