package gentest;

import java.util.ArrayList;
import java.util.HashMap;

import dynacode.DynaCode;
import genmethod.GeneratedMethodHelper;
import genmethod.GeneratedMethodReturnObject;
import genmethod.IGeneratedMethod;
import helperfunctions.HelperFunctions;

/** This is a test driver generated by KeY 2.7 (internal: 90bb886cd7b78027c8f6703803461f09e5699bb9) (www.key-project.org). 
 * Possible use cases:
 *  Use Case 1. Using JUnit 4:
 *        javac -cp .:PATH_TO_JUNIT4_JAR *.java
 *        java  -cp .:PATH_TO_JUNIT4_JAR:PATH_TO_HAMCREST_JAR org.junit.runner.JUnitCore TestGeneric0_method1
 *  Use Case 2. Use JML runtime checker: 
 *      Compile this file and and execute the main method with a JML runtime checker. On linux you can use the built-in scripts:
 *        ./compileWithOpenJML.sh
 *        ./executeWithOpenJML.sh TestGeneric0_method1
 *  Use Case 3. Use simply a program debugger to follow and understand the execution of the program.
 * @author Christoph Gladisch
 * @author Mihai Herda
 */
public class GeneratedTest implements IGeneratedTest{ 
	private static HashMap<String, ArrayList<Integer>> varTraces = new HashMap<String, ArrayList<Integer>>();
 public GeneratedTest(){}

 public HashMap<String, ArrayList<Integer>> callGeneratedTest()
 {
   GeneratedTest testSuiteObject;
   testSuiteObject=new GeneratedTest ();

   testSuiteObject.testcode0();
   testSuiteObject.testcode1();
   
   return varTraces;
 }

  //Test Case for NodeNr: 575
 public void  testcode0(){

   //Test preamble: creating objects and intializing test data
   //EasyLoop1 _o1 = new EasyLoop1();
   boolean measuredByEmpty = (boolean)true;
   int x = (int)64;
   ///*@ nullable */ EasyLoop1 self = (EasyLoop1)_o1;

   //Other variables

   /*@ nullable */ int result = 0;
   /*@ nullable */ java.lang.Throwable exc = null;
   //Calling the method under test   
      
int _x = x;
{
  exc=null;try {
		 IGeneratedMethod generatedMethod = GeneratedMethodHelper.getGeneratedMethod();

			ArrayList<Integer> inputVars = new ArrayList<Integer>();
			inputVars.add(x);

			HashMap<String, ArrayList<Integer>> traces = generatedMethod.callGeneratedMethod(inputVars);
			//Merge
			varTraces = HelperFunctions.mergeMapsKeyWise(varTraces, traces);
  }   catch (java.lang.Throwable e) {
    exc=e;
  }
}
 }

  //Test Case for NodeNr: 556
 public void  testcode1(){

	   //Test preamble: creating objects and intializing test data
	   //EasyLoop1 _o1 = new EasyLoop1();
	   boolean measuredByEmpty = (boolean)true;
	   int x = (int)9;
	   ///*@ nullable */ EasyLoop1 self = (EasyLoop1)_o1;

	   //Other variables

	   /*@ nullable */ int result = 0;
	   /*@ nullable */ java.lang.Throwable exc = null;
	   //Calling the method under test   
	      
	int _x = x;
	{
	  exc=null;try {
			 IGeneratedMethod generatedMethod = GeneratedMethodHelper.getGeneratedMethod();

				ArrayList<Integer> inputVars = new ArrayList<Integer>();
				inputVars.add(x);

				HashMap<String, ArrayList<Integer>> traces = generatedMethod.callGeneratedMethod(inputVars);
				//Merge
				varTraces = HelperFunctions.mergeMapsKeyWise(varTraces, traces);
	  }   catch (java.lang.Throwable e) {
	    exc=e;
	  }
	}
	 }


}