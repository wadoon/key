/** This is a test driver generated by KeY 2.7 (internal: 90bb886cd7b78027c8f6703803461f09e5699bb9) (www.key-project.org). 
 * Possible use cases:
 *  Use Case 1. Using JUnit 4:
 *        javac -cp .:PATH_TO_JUNIT4_JAR *.java
 *        java  -cp .:PATH_TO_JUNIT4_JAR:PATH_TO_HAMCREST_JAR org.junit.runner.JUnitCore GeneratedTest
 *  Use Case 2. Use JML runtime checker: 
 *      Compile this file and and execute the main method with a JML runtime checker. On linux you can use the built-in scripts:
 *        ./compileWithOpenJML.sh
 *        ./executeWithOpenJML.sh GeneratedTest
 *  Use Case 3. Use simply a program debugger to follow and understand the execution of the program.
 * @author Christoph Gladisch
 * @author Mihai Herda
 */
package gentest;
import dynacode.DynaCode;
import genmethod.GeneratedMethodHelper;
import genmethod.GeneratedMethodReturnObject;
import genmethod.IGeneratedMethod;
import helperfunctions.HelperFunctions;
import java.util.ArrayList;
import java.util.HashMap;
public class GeneratedTest implements IGeneratedTest { 
private static HashMap<String, ArrayList<Integer>> varTraces = new HashMap<String, ArrayList<Integer>>();

 public GeneratedTest(){}

public HashMap<String, ArrayList<Integer>> callGeneratedTest(){
   GeneratedTest testSuiteObject;
   testSuiteObject=new GeneratedTest ();

   testSuiteObject.testcode0();
   testSuiteObject.testcode1();
   testSuiteObject.testcode2();
   testSuiteObject.testcode3();
   testSuiteObject.testcode4();
   testSuiteObject.testcode5();
   testSuiteObject.testcode6();
   testSuiteObject.testcode7();
   testSuiteObject.testcode8();
   testSuiteObject.testcode9();
   testSuiteObject.testcode10();
   testSuiteObject.testcode11();
   testSuiteObject.testcode12();
    return varTraces;
 }

  //Test Case for NodeNr: 689
 public void  testcode0(){
   //Test preamble: creating objects and intializing test data
   boolean measuredByEmpty = (boolean)true;
   int x = (int)64;

   //Other variables

   /*@ nullable */ int result = 0;
   /*@ nullable */ java.lang.Throwable exc = null;
   //Calling the method under test   
   IGeneratedMethod generatedMethod = GeneratedMethodHelper.getGeneratedMethod();
   ArrayList<Integer> inputVars = new ArrayList<Integer>();
   inputVars.add(x);
   HashMap<String, ArrayList<Integer>> traces = generatedMethod.callGeneratedMethod(inputVars);
   varTraces = HelperFunctions.mergeMapsKeyWise(varTraces, traces);
 }

  //Test Case for NodeNr: 670
 public void  testcode1(){
   //Test preamble: creating objects and intializing test data
   boolean measuredByEmpty = (boolean)true;
   int x = (int)11;

   //Other variables

   /*@ nullable */ int result = 0;
   /*@ nullable */ java.lang.Throwable exc = null;
   //Calling the method under test   
   IGeneratedMethod generatedMethod = GeneratedMethodHelper.getGeneratedMethod();
   ArrayList<Integer> inputVars = new ArrayList<Integer>();
   inputVars.add(x);
   HashMap<String, ArrayList<Integer>> traces = generatedMethod.callGeneratedMethod(inputVars);
   varTraces = HelperFunctions.mergeMapsKeyWise(varTraces, traces);
 }

  //Test Case for NodeNr: 613
 public void  testcode2(){
   //Test preamble: creating objects and intializing test data
   boolean measuredByEmpty = (boolean)true;
   int x = (int)10;

   //Other variables

   /*@ nullable */ int result = 0;
   /*@ nullable */ java.lang.Throwable exc = null;
   //Calling the method under test   
   IGeneratedMethod generatedMethod = GeneratedMethodHelper.getGeneratedMethod();
   ArrayList<Integer> inputVars = new ArrayList<Integer>();
   inputVars.add(x);
   HashMap<String, ArrayList<Integer>> traces = generatedMethod.callGeneratedMethod(inputVars);
   varTraces = HelperFunctions.mergeMapsKeyWise(varTraces, traces);
 }

  //Test Case for NodeNr: 556
 public void  testcode3(){
   //Test preamble: creating objects and intializing test data
   boolean measuredByEmpty = (boolean)true;
   int x = (int)9;

   //Other variables

   /*@ nullable */ int result = 0;
   /*@ nullable */ java.lang.Throwable exc = null;
   //Calling the method under test   
   IGeneratedMethod generatedMethod = GeneratedMethodHelper.getGeneratedMethod();
   ArrayList<Integer> inputVars = new ArrayList<Integer>();
   inputVars.add(x);
   HashMap<String, ArrayList<Integer>> traces = generatedMethod.callGeneratedMethod(inputVars);
   varTraces = HelperFunctions.mergeMapsKeyWise(varTraces, traces);
 }

  //Test Case for NodeNr: 499
 public void  testcode4(){
   //Test preamble: creating objects and intializing test data
   boolean measuredByEmpty = (boolean)true;
   int x = (int)8;

   //Other variables

   /*@ nullable */ int result = 0;
   /*@ nullable */ java.lang.Throwable exc = null;
   //Calling the method under test   
   IGeneratedMethod generatedMethod = GeneratedMethodHelper.getGeneratedMethod();
   ArrayList<Integer> inputVars = new ArrayList<Integer>();
   inputVars.add(x);
   HashMap<String, ArrayList<Integer>> traces = generatedMethod.callGeneratedMethod(inputVars);
   varTraces = HelperFunctions.mergeMapsKeyWise(varTraces, traces);
 }

  //Test Case for NodeNr: 442
 public void  testcode5(){
   //Test preamble: creating objects and intializing test data
   boolean measuredByEmpty = (boolean)true;
   int x = (int)7;

   //Other variables

   /*@ nullable */ int result = 0;
   /*@ nullable */ java.lang.Throwable exc = null;
   //Calling the method under test   
   IGeneratedMethod generatedMethod = GeneratedMethodHelper.getGeneratedMethod();
   ArrayList<Integer> inputVars = new ArrayList<Integer>();
   inputVars.add(x);
   HashMap<String, ArrayList<Integer>> traces = generatedMethod.callGeneratedMethod(inputVars);
   varTraces = HelperFunctions.mergeMapsKeyWise(varTraces, traces);
 }

  //Test Case for NodeNr: 385
 public void  testcode6(){
   //Test preamble: creating objects and intializing test data
   boolean measuredByEmpty = (boolean)true;
   int x = (int)6;

   //Other variables

   /*@ nullable */ int result = 0;
   /*@ nullable */ java.lang.Throwable exc = null;
   //Calling the method under test   
   IGeneratedMethod generatedMethod = GeneratedMethodHelper.getGeneratedMethod();
   ArrayList<Integer> inputVars = new ArrayList<Integer>();
   inputVars.add(x);
   HashMap<String, ArrayList<Integer>> traces = generatedMethod.callGeneratedMethod(inputVars);
   varTraces = HelperFunctions.mergeMapsKeyWise(varTraces, traces);
 }

  //Test Case for NodeNr: 328
 public void  testcode7(){
   //Test preamble: creating objects and intializing test data
   boolean measuredByEmpty = (boolean)true;
   int x = (int)5;

   //Other variables

   /*@ nullable */ int result = 0;
   /*@ nullable */ java.lang.Throwable exc = null;
   //Calling the method under test   
   IGeneratedMethod generatedMethod = GeneratedMethodHelper.getGeneratedMethod();
   ArrayList<Integer> inputVars = new ArrayList<Integer>();
   inputVars.add(x);
   HashMap<String, ArrayList<Integer>> traces = generatedMethod.callGeneratedMethod(inputVars);
   varTraces = HelperFunctions.mergeMapsKeyWise(varTraces, traces);
 }

  //Test Case for NodeNr: 271
 public void  testcode8(){
   //Test preamble: creating objects and intializing test data
   boolean measuredByEmpty = (boolean)true;
   int x = (int)4;

   //Other variables

   /*@ nullable */ int result = 0;
   /*@ nullable */ java.lang.Throwable exc = null;
   //Calling the method under test   
   IGeneratedMethod generatedMethod = GeneratedMethodHelper.getGeneratedMethod();
   ArrayList<Integer> inputVars = new ArrayList<Integer>();
   inputVars.add(x);
   HashMap<String, ArrayList<Integer>> traces = generatedMethod.callGeneratedMethod(inputVars);
   varTraces = HelperFunctions.mergeMapsKeyWise(varTraces, traces);
 }

  //Test Case for NodeNr: 214
 public void  testcode9(){
   //Test preamble: creating objects and intializing test data
   boolean measuredByEmpty = (boolean)true;
   int x = (int)3;

   //Other variables

   /*@ nullable */ int result = 0;
   /*@ nullable */ java.lang.Throwable exc = null;
   //Calling the method under test   
   IGeneratedMethod generatedMethod = GeneratedMethodHelper.getGeneratedMethod();
   ArrayList<Integer> inputVars = new ArrayList<Integer>();
   inputVars.add(x);
   HashMap<String, ArrayList<Integer>> traces = generatedMethod.callGeneratedMethod(inputVars);
   varTraces = HelperFunctions.mergeMapsKeyWise(varTraces, traces);
 }

  //Test Case for NodeNr: 157
 public void  testcode10(){
   //Test preamble: creating objects and intializing test data
   boolean measuredByEmpty = (boolean)true;
   int x = (int)2;

   //Other variables

   /*@ nullable */ int result = 0;
   /*@ nullable */ java.lang.Throwable exc = null;
   //Calling the method under test   
   IGeneratedMethod generatedMethod = GeneratedMethodHelper.getGeneratedMethod();
   ArrayList<Integer> inputVars = new ArrayList<Integer>();
   inputVars.add(x);
   HashMap<String, ArrayList<Integer>> traces = generatedMethod.callGeneratedMethod(inputVars);
   varTraces = HelperFunctions.mergeMapsKeyWise(varTraces, traces);
 }

  //Test Case for NodeNr: 101
 public void  testcode11(){
   //Test preamble: creating objects and intializing test data
   boolean measuredByEmpty = (boolean)true;
   int x = (int)1;

   //Other variables

   /*@ nullable */ int result = 0;
   /*@ nullable */ java.lang.Throwable exc = null;
   //Calling the method under test   
   IGeneratedMethod generatedMethod = GeneratedMethodHelper.getGeneratedMethod();
   ArrayList<Integer> inputVars = new ArrayList<Integer>();
   inputVars.add(x);
   HashMap<String, ArrayList<Integer>> traces = generatedMethod.callGeneratedMethod(inputVars);
   varTraces = HelperFunctions.mergeMapsKeyWise(varTraces, traces);
 }

  //Test Case for NodeNr: 54
 public void  testcode12(){
   //Test preamble: creating objects and intializing test data
   boolean measuredByEmpty = (boolean)true;
   int x = (int)0;

   //Other variables

   /*@ nullable */ int result = 0;
   /*@ nullable */ java.lang.Throwable exc = null;
   //Calling the method under test   
   IGeneratedMethod generatedMethod = GeneratedMethodHelper.getGeneratedMethod();
   ArrayList<Integer> inputVars = new ArrayList<Integer>();
   inputVars.add(x);
   HashMap<String, ArrayList<Integer>> traces = generatedMethod.callGeneratedMethod(inputVars);
   varTraces = HelperFunctions.mergeMapsKeyWise(varTraces, traces);
 }


}